
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c030  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000063c  0800c1c0  0800c1c0  0000d1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7fc  0800c7fc  0000e088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c7fc  0800c7fc  0000d7fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c804  0800c804  0000e088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c804  0800c804  0000d804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c808  0800c808  0000d808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800c80c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000e088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000e088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c705  00000000  00000000  0000e0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004861  00000000  00000000  0002a7bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  0002f020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011df  00000000  00000000  00030758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006b7d  00000000  00000000  00031937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fcd2  00000000  00000000  000384b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1ea8  00000000  00000000  00058186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012a02e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006d68  00000000  00000000  0012a074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00130ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c1a8 	.word	0x0800c1a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800c1a8 	.word	0x0800c1a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <get_random64>:
#include "global_rng.h"
#include "stm32f4xx_hal.h"

extern RNG_HandleTypeDef hrng;  // defined in your HAL setup

uint64_t get_random64(void) {
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4815      	ldr	r0, [pc, #84]	@ (8000600 <get_random64+0x64>)
 80005aa:	f006 fb07 	bl	8006bbc <HAL_RNG_GenerateRandomNumber>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <get_random64+0x1c>
        Error_Handler(); // or fail securely
 80005b4:	f001 f914 	bl	80017e0 <Error_Handler>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4810      	ldr	r0, [pc, #64]	@ (8000600 <get_random64+0x64>)
 80005be:	f006 fafd 	bl	8006bbc <HAL_RNG_GenerateRandomNumber>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <get_random64+0x30>
        Error_Handler();
 80005c8:	f001 f90a 	bl	80017e0 <Error_Handler>
    }
    return ((uint64_t)r1 << 32) | r2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	469a      	mov	sl, r3
 80005d2:	4693      	mov	fp, r2
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	4653      	mov	r3, sl
 80005de:	2200      	movs	r2, #0
 80005e0:	6839      	ldr	r1, [r7, #0]
 80005e2:	2000      	movs	r0, #0
 80005e4:	460c      	mov	r4, r1
 80005e6:	4605      	mov	r5, r0
 80005e8:	ea42 0804 	orr.w	r8, r2, r4
 80005ec:	ea43 0905 	orr.w	r9, r3, r5
 80005f0:	4642      	mov	r2, r8
 80005f2:	464b      	mov	r3, r9
}
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000600:	20000140 	.word	0x20000140

08000604 <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 8000604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000608:	b0a0      	sub	sp, #128	@ 0x80
 800060a:	af00      	add	r7, sp, #0
 800060c:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 800060e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000612:	2328      	movs	r3, #40	@ 0x28
 8000614:	461a      	mov	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f00b f866 	bl	800b6e8 <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 800061c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000620:	2328      	movs	r3, #40	@ 0x28
 8000622:	461a      	mov	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f00b f85f 	bl	800b6e8 <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 800062a:	2300      	movs	r3, #0
 800062c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800062e:	e043      	b.n	80006b8 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 8000630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000632:	00da      	lsls	r2, r3, #3
 8000634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000636:	4413      	add	r3, r2
 8000638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800063c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800063e:	3305      	adds	r3, #5
 8000640:	00da      	lsls	r2, r3, #3
 8000642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000644:	4413      	add	r3, r2
 8000646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800064a:	ea80 0402 	eor.w	r4, r0, r2
 800064e:	ea81 0503 	eor.w	r5, r1, r3
 8000652:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000654:	330a      	adds	r3, #10
 8000656:	00da      	lsls	r2, r3, #3
 8000658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065a:	4413      	add	r3, r2
 800065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000660:	ea84 0a02 	eor.w	sl, r4, r2
 8000664:	ea85 0b03 	eor.w	fp, r5, r3
 8000668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800066a:	330f      	adds	r3, #15
 800066c:	00da      	lsls	r2, r3, #3
 800066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000670:	4413      	add	r3, r2
 8000672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000676:	ea8a 0102 	eor.w	r1, sl, r2
 800067a:	61b9      	str	r1, [r7, #24]
 800067c:	ea8b 0303 	eor.w	r3, fp, r3
 8000680:	61fb      	str	r3, [r7, #28]
 8000682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000684:	3314      	adds	r3, #20
 8000686:	00da      	lsls	r2, r3, #3
 8000688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068a:	4413      	add	r3, r2
 800068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000690:	69b9      	ldr	r1, [r7, #24]
 8000692:	4051      	eors	r1, r2
 8000694:	6139      	str	r1, [r7, #16]
 8000696:	69f9      	ldr	r1, [r7, #28]
 8000698:	404b      	eors	r3, r1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	3360      	adds	r3, #96	@ 0x60
 80006a2:	f107 0220 	add.w	r2, r7, #32
 80006a6:	4413      	add	r3, r2
 80006a8:	3b30      	subs	r3, #48	@ 0x30
 80006aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80006ae:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 80006b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006b4:	3301      	adds	r3, #1
 80006b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	ddb8      	ble.n	8000630 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 80006be:	2300      	movs	r3, #0
 80006c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006c2:	e072      	b.n	80007aa <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 80006c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006c6:	1d19      	adds	r1, r3, #4
 80006c8:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <theta+0x1b8>)
 80006ca:	fb83 2301 	smull	r2, r3, r3, r1
 80006ce:	105a      	asrs	r2, r3, #1
 80006d0:	17cb      	asrs	r3, r1, #31
 80006d2:	1ad2      	subs	r2, r2, r3
 80006d4:	4613      	mov	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	1aca      	subs	r2, r1, r3
 80006dc:	00d3      	lsls	r3, r2, #3
 80006de:	3360      	adds	r3, #96	@ 0x60
 80006e0:	f107 0220 	add.w	r2, r7, #32
 80006e4:	4413      	add	r3, r2
 80006e6:	3b30      	subs	r3, #48	@ 0x30
 80006e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	1c5c      	adds	r4, r3, #1
 80006f0:	4b32      	ldr	r3, [pc, #200]	@ (80007bc <theta+0x1b8>)
 80006f2:	fb83 2304 	smull	r2, r3, r3, r4
 80006f6:	105a      	asrs	r2, r3, #1
 80006f8:	17e3      	asrs	r3, r4, #31
 80006fa:	1ad2      	subs	r2, r2, r3
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	1ae2      	subs	r2, r4, r3
 8000704:	00d3      	lsls	r3, r2, #3
 8000706:	3360      	adds	r3, #96	@ 0x60
 8000708:	f107 0220 	add.w	r2, r7, #32
 800070c:	4413      	add	r3, r2
 800070e:	3b30      	subs	r3, #48	@ 0x30
 8000710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000714:	0fd5      	lsrs	r5, r2, #31
 8000716:	005c      	lsls	r4, r3, #1
 8000718:	ea45 0904 	orr.w	r9, r5, r4
 800071c:	0fdc      	lsrs	r4, r3, #31
 800071e:	0053      	lsls	r3, r2, #1
 8000720:	ea44 0803 	orr.w	r8, r4, r3
 8000724:	ea80 0308 	eor.w	r3, r0, r8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	ea81 0309 	eor.w	r3, r1, r9
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	3360      	adds	r3, #96	@ 0x60
 8000736:	f107 0220 	add.w	r2, r7, #32
 800073a:	4413      	add	r3, r2
 800073c:	3b58      	subs	r3, #88	@ 0x58
 800073e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000742:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 8000746:	2300      	movs	r3, #0
 8000748:	67bb      	str	r3, [r7, #120]	@ 0x78
 800074a:	e028      	b.n	800079e <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 800074c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	441a      	add	r2, r3
 8000754:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075c:	4413      	add	r3, r2
 800075e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	3360      	adds	r3, #96	@ 0x60
 8000768:	f107 0220 	add.w	r2, r7, #32
 800076c:	4413      	add	r3, r2
 800076e:	3b58      	subs	r3, #88	@ 0x58
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 8000776:	462c      	mov	r4, r5
 8000778:	00a4      	lsls	r4, r4, #2
 800077a:	4425      	add	r5, r4
 800077c:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800077e:	442c      	add	r4, r5
 8000780:	00e4      	lsls	r4, r4, #3
 8000782:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8000784:	442c      	add	r4, r5
 8000786:	ea80 0502 	eor.w	r5, r0, r2
 800078a:	603d      	str	r5, [r7, #0]
 800078c:	404b      	eors	r3, r1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000794:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800079a:	3301      	adds	r3, #1
 800079c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800079e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	ddd3      	ble.n	800074c <theta+0x148>
  for (x = 0; x < 5; ++x) {
 80007a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007a6:	3301      	adds	r3, #1
 80007a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80007aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	dd89      	ble.n	80006c4 <theta+0xc0>
    }
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3780      	adds	r7, #128	@ 0x80
 80007b6:	46bd      	mov	sp, r7
 80007b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007bc:	66666667 	.word	0x66666667

080007c0 <rho>:

void rho(uint64_t* state)
{
 80007c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 80007ca:	2100      	movs	r1, #0
 80007cc:	6139      	str	r1, [r7, #16]
 80007ce:	e062      	b.n	8000896 <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 80007d0:	2100      	movs	r1, #0
 80007d2:	6179      	str	r1, [r7, #20]
 80007d4:	e059      	b.n	800088a <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 80007d6:	6938      	ldr	r0, [r7, #16]
 80007d8:	4601      	mov	r1, r0
 80007da:	0089      	lsls	r1, r1, #2
 80007dc:	4408      	add	r0, r1
 80007de:	6979      	ldr	r1, [r7, #20]
 80007e0:	4401      	add	r1, r0
 80007e2:	00c9      	lsls	r1, r1, #3
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	4401      	add	r1, r0
 80007e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007ec:	693e      	ldr	r6, [r7, #16]
 80007ee:	4634      	mov	r4, r6
 80007f0:	4626      	mov	r6, r4
 80007f2:	00b6      	lsls	r6, r6, #2
 80007f4:	eb06 0c04 	add.w	ip, r6, r4
 80007f8:	697e      	ldr	r6, [r7, #20]
 80007fa:	4466      	add	r6, ip
 80007fc:	4c2a      	ldr	r4, [pc, #168]	@ (80008a8 <rho+0xe8>)
 80007fe:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000802:	693c      	ldr	r4, [r7, #16]
 8000804:	46a4      	mov	ip, r4
 8000806:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800080a:	44a4      	add	ip, r4
 800080c:	697c      	ldr	r4, [r7, #20]
 800080e:	44a4      	add	ip, r4
 8000810:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000814:	68fc      	ldr	r4, [r7, #12]
 8000816:	eb04 0a0c 	add.w	sl, r4, ip
 800081a:	f1a6 0e20 	sub.w	lr, r6, #32
 800081e:	f1c6 0c20 	rsb	ip, r6, #32
 8000822:	fa01 f406 	lsl.w	r4, r1, r6
 8000826:	607c      	str	r4, [r7, #4]
 8000828:	fa00 fe0e 	lsl.w	lr, r0, lr
 800082c:	687c      	ldr	r4, [r7, #4]
 800082e:	ea44 040e 	orr.w	r4, r4, lr
 8000832:	607c      	str	r4, [r7, #4]
 8000834:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000838:	687c      	ldr	r4, [r7, #4]
 800083a:	ea44 040c 	orr.w	r4, r4, ip
 800083e:	607c      	str	r4, [r7, #4]
 8000840:	fa00 f406 	lsl.w	r4, r0, r6
 8000844:	603c      	str	r4, [r7, #0]
 8000846:	4276      	negs	r6, r6
 8000848:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 800084c:	f1c6 0e20 	rsb	lr, r6, #32
 8000850:	f1a6 0c20 	sub.w	ip, r6, #32
 8000854:	fa20 f206 	lsr.w	r2, r0, r6
 8000858:	fa01 fe0e 	lsl.w	lr, r1, lr
 800085c:	ea42 020e 	orr.w	r2, r2, lr
 8000860:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000864:	ea42 020c 	orr.w	r2, r2, ip
 8000868:	fa21 f306 	lsr.w	r3, r1, r6
 800086c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000870:	4621      	mov	r1, r4
 8000872:	ea41 0802 	orr.w	r8, r1, r2
 8000876:	4629      	mov	r1, r5
 8000878:	ea41 0903 	orr.w	r9, r1, r3
 800087c:	4642      	mov	r2, r8
 800087e:	464b      	mov	r3, r9
 8000880:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	3101      	adds	r1, #1
 8000888:	6179      	str	r1, [r7, #20]
 800088a:	6979      	ldr	r1, [r7, #20]
 800088c:	2904      	cmp	r1, #4
 800088e:	dda2      	ble.n	80007d6 <rho+0x16>
  for (y = 0; y < 5; ++y) {
 8000890:	6939      	ldr	r1, [r7, #16]
 8000892:	3101      	adds	r1, #1
 8000894:	6139      	str	r1, [r7, #16]
 8000896:	6939      	ldr	r1, [r7, #16]
 8000898:	2904      	cmp	r1, #4
 800089a:	dd99      	ble.n	80007d0 <rho+0x10>
    }
  }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a8:	0800c600 	.word	0x0800c600

080008ac <pi>:

void pi(uint64_t* state)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b0b9      	sub	sp, #228	@ 0xe4
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008ba:	e02c      	b.n	8000916 <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008c2:	e01f      	b.n	8000904 <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 80008c4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	441a      	add	r2, r3
 80008ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008d2:	4413      	add	r3, r2
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	18d0      	adds	r0, r2, r3
 80008da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	441a      	add	r2, r3
 80008e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008e8:	18d1      	adds	r1, r2, r3
 80008ea:	e9d0 2300 	ldrd	r2, r3, [r0]
 80008ee:	00c9      	lsls	r1, r1, #3
 80008f0:	31e0      	adds	r1, #224	@ 0xe0
 80008f2:	4439      	add	r1, r7
 80008f4:	39d8      	subs	r1, #216	@ 0xd8
 80008f6:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 80008fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008fe:	3301      	adds	r3, #1
 8000900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000908:	2b04      	cmp	r3, #4
 800090a:	dddb      	ble.n	80008c4 <pi+0x18>
  for (y = 0; y < 5; ++y) {
 800090c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000910:	3301      	adds	r3, #1
 8000912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800091a:	2b04      	cmp	r3, #4
 800091c:	ddce      	ble.n	80008bc <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000924:	e04f      	b.n	80009c6 <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800092c:	e042      	b.n	80009b4 <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 800092e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <pi+0x130>)
 8000934:	fb83 1302 	smull	r1, r3, r3, r2
 8000938:	1059      	asrs	r1, r3, #1
 800093a:	17d3      	asrs	r3, r2, #31
 800093c:	1ac9      	subs	r1, r1, r3
 800093e:	460b      	mov	r3, r1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	440b      	add	r3, r1
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 800094a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800094e:	0059      	lsls	r1, r3, #1
 8000950:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	18ca      	adds	r2, r1, r3
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <pi+0x130>)
 800095e:	fb83 1302 	smull	r1, r3, r3, r2
 8000962:	1059      	asrs	r1, r3, #1
 8000964:	17d3      	asrs	r3, r2, #31
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	460b      	mov	r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	440b      	add	r3, r1
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 8000974:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	441a      	add	r2, r3
 800097e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000982:	18d0      	adds	r0, r2, r3
 8000984:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	441a      	add	r2, r3
 800098e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	18d1      	adds	r1, r2, r3
 800099a:	00c3      	lsls	r3, r0, #3
 800099c:	33e0      	adds	r3, #224	@ 0xe0
 800099e:	443b      	add	r3, r7
 80009a0:	3bd8      	subs	r3, #216	@ 0xd8
 80009a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a6:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 80009aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009ae:	3301      	adds	r3, #1
 80009b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80009b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	ddb8      	ble.n	800092e <pi+0x82>
  for (y = 0; y < 5; ++y) {
 80009bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009c0:	3301      	adds	r3, #1
 80009c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80009c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	ddab      	ble.n	8000926 <pi+0x7a>
    }
  }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	37e4      	adds	r7, #228	@ 0xe4
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	66666667 	.word	0x66666667

080009e0 <chi>:

void chi(uint64_t* state)
{
 80009e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009e4:	b08e      	sub	sp, #56	@ 0x38
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80009ea:	2100      	movs	r1, #0
 80009ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80009ee:	e072      	b.n	8000ad6 <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 80009f0:	2100      	movs	r1, #0
 80009f2:	6379      	str	r1, [r7, #52]	@ 0x34
 80009f4:	e04e      	b.n	8000a94 <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 80009f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009f8:	4601      	mov	r1, r0
 80009fa:	0089      	lsls	r1, r1, #2
 80009fc:	4408      	add	r0, r1
 80009fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a00:	4401      	add	r1, r0
 8000a02:	00c9      	lsls	r1, r1, #3
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	4401      	add	r1, r0
 8000a08:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8000a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a0e:	4601      	mov	r1, r0
 8000a10:	0089      	lsls	r1, r1, #2
 8000a12:	eb01 0c00 	add.w	ip, r1, r0
 8000a16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a18:	1c4e      	adds	r6, r1, #1
 8000a1a:	4934      	ldr	r1, [pc, #208]	@ (8000aec <chi+0x10c>)
 8000a1c:	fb81 0106 	smull	r0, r1, r1, r6
 8000a20:	1048      	asrs	r0, r1, #1
 8000a22:	17f1      	asrs	r1, r6, #31
 8000a24:	1a40      	subs	r0, r0, r1
 8000a26:	4601      	mov	r1, r0
 8000a28:	0089      	lsls	r1, r1, #2
 8000a2a:	4401      	add	r1, r0
 8000a2c:	1a70      	subs	r0, r6, r1
 8000a2e:	eb0c 0100 	add.w	r1, ip, r0
 8000a32:	00c9      	lsls	r1, r1, #3
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	4401      	add	r1, r0
 8000a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a3c:	43c2      	mvns	r2, r0
 8000a3e:	43cb      	mvns	r3, r1
 8000a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a42:	4601      	mov	r1, r0
 8000a44:	0089      	lsls	r1, r1, #2
 8000a46:	eb01 0c00 	add.w	ip, r1, r0
 8000a4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a4c:	1c8e      	adds	r6, r1, #2
 8000a4e:	4927      	ldr	r1, [pc, #156]	@ (8000aec <chi+0x10c>)
 8000a50:	fb81 0106 	smull	r0, r1, r1, r6
 8000a54:	1048      	asrs	r0, r1, #1
 8000a56:	17f1      	asrs	r1, r6, #31
 8000a58:	1a40      	subs	r0, r0, r1
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	0089      	lsls	r1, r1, #2
 8000a5e:	4401      	add	r1, r0
 8000a60:	1a70      	subs	r0, r6, r1
 8000a62:	eb0c 0100 	add.w	r1, ip, r0
 8000a66:	00c9      	lsls	r1, r1, #3
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	4401      	add	r1, r0
 8000a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a70:	ea02 0400 	and.w	r4, r2, r0
 8000a74:	ea03 0501 	and.w	r5, r3, r1
 8000a78:	ea8a 0804 	eor.w	r8, sl, r4
 8000a7c:	ea8b 0905 	eor.w	r9, fp, r5
 8000a80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a82:	00c9      	lsls	r1, r1, #3
 8000a84:	3138      	adds	r1, #56	@ 0x38
 8000a86:	4439      	add	r1, r7
 8000a88:	3930      	subs	r1, #48	@ 0x30
 8000a8a:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 8000a8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a90:	3101      	adds	r1, #1
 8000a92:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a94:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a96:	2904      	cmp	r1, #4
 8000a98:	ddad      	ble.n	80009f6 <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a9e:	e014      	b.n	8000aca <chi+0xea>
      state[y * 5 + x] = C[x];
 8000aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	0089      	lsls	r1, r1, #2
 8000aa6:	4408      	add	r0, r1
 8000aa8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000aaa:	4401      	add	r1, r0
 8000aac:	00c9      	lsls	r1, r1, #3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	1846      	adds	r6, r0, r1
 8000ab2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ab4:	00c9      	lsls	r1, r1, #3
 8000ab6:	3138      	adds	r1, #56	@ 0x38
 8000ab8:	4439      	add	r1, r7
 8000aba:	3930      	subs	r1, #48	@ 0x30
 8000abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ac0:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000ac4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac6:	3101      	adds	r1, #1
 8000ac8:	6379      	str	r1, [r7, #52]	@ 0x34
 8000aca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000acc:	2904      	cmp	r1, #4
 8000ace:	dde7      	ble.n	8000aa0 <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 8000ad0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ad2:	3101      	adds	r1, #1
 8000ad4:	6339      	str	r1, [r7, #48]	@ 0x30
 8000ad6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ad8:	2904      	cmp	r1, #4
 8000ada:	dd89      	ble.n	80009f0 <chi+0x10>
    }
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	@ 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	66666667 	.word	0x66666667

08000af0 <iota>:

void iota(uint64_t* state, int i)
{
 8000af0:	b4b0      	push	{r4, r5, r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  /* Iota */
  /* XXX: truncate RC[i] if w < 64 */
  state[0] = state[0] ^ RC[i];
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000b00:	4808      	ldr	r0, [pc, #32]	@ (8000b24 <iota+0x34>)
 8000b02:	6839      	ldr	r1, [r7, #0]
 8000b04:	00c9      	lsls	r1, r1, #3
 8000b06:	4401      	add	r1, r0
 8000b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b0c:	ea84 0200 	eor.w	r2, r4, r0
 8000b10:	ea85 0301 	eor.w	r3, r5, r1
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bcb0      	pop	{r4, r5, r7}
 8000b22:	4770      	bx	lr
 8000b24:	0800c698 	.word	0x0800c698

08000b28 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <_write+0x28>)
 8000b40:	f006 f96b 	bl	8006e1a <HAL_UART_Transmit>
    return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001a8 	.word	0x200001a8

08000b54 <fill_masked_state_arithmetic>:
            dst[x][y].share[0] = t;
        }
    }
}

void fill_masked_state_arithmetic(masked_uint64_t dst[5][5], const uint64_t src[25]) {
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e05d      	b.n	8000c20 <fill_masked_state_arithmetic+0xcc>
        for (int x = 0; x < 5; ++x) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	e054      	b.n	8000c14 <fill_masked_state_arithmetic+0xc0>
            uint64_t acc = src[y * 5 + x];
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	441a      	add	r2, r3
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	e9c7 2304 	strd	r2, r3, [r7, #16]

            // Generate MASKING_N - 1 random shares
            for (int i = 0; i < MASKING_N - 1; ++i) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e02d      	b.n	8000be6 <fill_masked_state_arithmetic+0x92>
                dst[x][y].share[i] = get_random64();
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	015b      	lsls	r3, r3, #5
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	189e      	adds	r6, r3, r2
 8000b9a:	f7ff fcff 	bl	800059c <get_random64>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	69f9      	ldr	r1, [r7, #28]
 8000ba4:	0088      	lsls	r0, r1, #2
 8000ba6:	68f9      	ldr	r1, [r7, #12]
 8000ba8:	4401      	add	r1, r0
 8000baa:	00c9      	lsls	r1, r1, #3
 8000bac:	4431      	add	r1, r6
 8000bae:	e9c1 2300 	strd	r2, r3, [r1]
                acc -= dst[x][y].share[i];
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	015b      	lsls	r3, r3, #5
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	0099      	lsls	r1, r3, #2
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	440b      	add	r3, r1
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bd6:	1a84      	subs	r4, r0, r2
 8000bd8:	eb61 0503 	sbc.w	r5, r1, r3
 8000bdc:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N - 1; ++i) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	ddce      	ble.n	8000b8a <fill_masked_state_arithmetic+0x36>
            }

            // Last share ensures additive sum equals original value
            dst[x][y].share[MASKING_N - 1] = acc;
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	015b      	lsls	r3, r3, #5
 8000c00:	4413      	add	r3, r2
 8000c02:	f103 0118 	add.w	r1, r3, #24
 8000c06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c0a:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	dda7      	ble.n	8000b6a <fill_masked_state_arithmetic+0x16>
    for (int y = 0; y < 5; ++y) {
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	dd9e      	ble.n	8000b64 <fill_masked_state_arithmetic+0x10>
        }
    }
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	3724      	adds	r7, #36	@ 0x24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c30 <recombine_masked_state_arithmetic>:
                val ^= src[x][y].share[i];
            dst[y * 5 + x] = val;
        }
}

void recombine_masked_state_arithmetic(uint64_t dst[25], const masked_uint64_t src[5][5]) {
 8000c30:	b4b0      	push	{r4, r5, r7}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	e03e      	b.n	8000cbe <recombine_masked_state_arithmetic+0x8e>
        for (int x = 0; x < 5; ++x) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	e035      	b.n	8000cb2 <recombine_masked_state_arithmetic+0x82>
            uint64_t val = 0;
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	e019      	b.n	8000c8c <recombine_masked_state_arithmetic+0x5c>
                val += src[x][y].share[i];  // arithmetic recombination
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	441a      	add	r2, r3
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	0099      	lsls	r1, r3, #2
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	440b      	add	r3, r1
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c7c:	1884      	adds	r4, r0, r2
 8000c7e:	eb41 0503 	adc.w	r5, r1, r3
 8000c82:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	dde2      	ble.n	8000c58 <recombine_masked_state_arithmetic+0x28>
            dst[y * 5 + x] = val;
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	441a      	add	r2, r3
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	18d1      	adds	r1, r2, r3
 8000ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ca8:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	ddc6      	ble.n	8000c46 <recombine_masked_state_arithmetic+0x16>
    for (int y = 0; y < 5; ++y)
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	ddbd      	ble.n	8000c40 <recombine_masked_state_arithmetic+0x10>
        }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bcb0      	pop	{r4, r5, r7}
 8000cce:	4770      	bx	lr

08000cd0 <print_diff>:

void print_diff(const char *label, const uint64_t *ref, const uint64_t *masked) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	@ 0x38
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
    int fail = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
 8000ce4:	e04d      	b.n	8000d82 <print_diff+0xb2>
        if (ref[i] != masked[i]) {
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	4413      	add	r3, r2
 8000cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	bf08      	it	eq
 8000d02:	4290      	cmpeq	r0, r2
 8000d04:	d03a      	beq.n	8000d7c <print_diff+0xac>
            uint32_t rh = ref[i] >> 32, rl = ref[i] & 0xFFFFFFFF;
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4613      	mov	r3, r2
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4413      	add	r3, r2
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
            uint32_t mh = masked[i] >> 32, ml = masked[i] & 0xFFFFFFFF;
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	000a      	movs	r2, r1
 8000d48:	2300      	movs	r3, #0
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
            printf("Mismatch %s[%d]: ref = %08lX%08lX, masked = %08lX%08lX\n",
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	6a3a      	ldr	r2, [r7, #32]
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <print_diff+0xd0>)
 8000d72:	f00a fab5 	bl	800b2e0 <iprintf>
                   label, i,
                   (unsigned long)rh, (unsigned long)rl,
                   (unsigned long)mh, (unsigned long)ml);
            fail++;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	3301      	adds	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	2b18      	cmp	r3, #24
 8000d86:	ddae      	ble.n	8000ce6 <print_diff+0x16>
        }
    }
    if (fail == 0) {
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <print_diff+0xc6>
        printf("SUCCESS: %s output matched reference.\n", label);
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <print_diff+0xd4>)
 8000d92:	f00a faa5 	bl	800b2e0 <iprintf>
    }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	0800c1d0 	.word	0x0800c1d0
 8000da4:	0800c208 	.word	0x0800c208

08000da8 <fill_random_additive_shares>:
    print_diff("IOTA", tmp_ref, tmp_masked);



}
static void fill_random_additive_shares(masked_uint64_t* out, uint64_t value) {
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t acc = value;
 8000db4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000db8:	e9c7 2306 	strd	r2, r3, [r7, #24]

    for (int i = 0; i < MASKING_N - 1; ++i) {
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e019      	b.n	8000df6 <fill_random_additive_shares+0x4e>
        out->share[i] = get_random64();
 8000dc2:	f7ff fbeb 	bl	800059c <get_random64>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	68f8      	ldr	r0, [r7, #12]
 8000dcc:	6979      	ldr	r1, [r7, #20]
 8000dce:	00c9      	lsls	r1, r1, #3
 8000dd0:	4401      	add	r1, r0
 8000dd2:	e9c1 2300 	strd	r2, r3, [r1]
        acc -= out->share[i];
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	00db      	lsls	r3, r3, #3
 8000ddc:	4413      	add	r3, r2
 8000dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000de6:	1a84      	subs	r4, r0, r2
 8000de8:	eb61 0503 	sbc.w	r5, r1, r3
 8000dec:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 0; i < MASKING_N - 1; ++i) {
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	3301      	adds	r3, #1
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	dde2      	ble.n	8000dc2 <fill_random_additive_shares+0x1a>
    }

    out->share[MASKING_N - 1] = acc;
 8000dfc:	68f9      	ldr	r1, [r7, #12]
 8000dfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000e02:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8000e06:	bf00      	nop
 8000e08:	3720      	adds	r7, #32
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e10 <test_masked_vs_reference_step_by_step_arithmetic>:
#include "params.h"
void test_masked_vs_reference_step_by_step_arithmetic(void) {
 8000e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000e14:	f5ad 5dae 	sub.w	sp, sp, #5568	@ 0x15c0
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af04      	add	r7, sp, #16
    // === 1. Initial state setup ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 8000e1c:	2600      	movs	r6, #0
 8000e1e:	f507 5cad 	add.w	ip, r7, #5536	@ 0x15a0
 8000e22:	f10c 0c14 	add.w	ip, ip, #20
 8000e26:	f8cc 6000 	str.w	r6, [ip]
 8000e2a:	e032      	b.n	8000e92 <test_masked_vs_reference_step_by_step_arithmetic+0x82>
        ref_state[i] = i * 0x0F0F0F0F0F0F0F0FULL;
 8000e2c:	f507 56ad 	add.w	r6, r7, #5536	@ 0x15a0
 8000e30:	f106 0614 	add.w	r6, r6, #20
 8000e34:	6836      	ldr	r6, [r6, #0]
 8000e36:	ea4f 7ce6 	mov.w	ip, r6, asr #31
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	4661      	mov	r1, ip
 8000e3e:	f04f 360f 	mov.w	r6, #252645135	@ 0xf0f0f0f
 8000e42:	fb06 fc01 	mul.w	ip, r6, r1
 8000e46:	f04f 360f 	mov.w	r6, #252645135	@ 0xf0f0f0f
 8000e4a:	fb00 f606 	mul.w	r6, r0, r6
 8000e4e:	4466      	add	r6, ip
 8000e50:	f04f 3c0f 	mov.w	ip, #252645135	@ 0xf0f0f0f
 8000e54:	fba0 230c 	umull	r2, r3, r0, ip
 8000e58:	441e      	add	r6, r3
 8000e5a:	4633      	mov	r3, r6
 8000e5c:	f507 56ad 	add.w	r6, r7, #5536	@ 0x15a0
 8000e60:	f106 0618 	add.w	r6, r6, #24
 8000e64:	f5a6 7c84 	sub.w	ip, r6, #264	@ 0x108
 8000e68:	f507 56ad 	add.w	r6, r7, #5536	@ 0x15a0
 8000e6c:	f106 0614 	add.w	r6, r6, #20
 8000e70:	6836      	ldr	r6, [r6, #0]
 8000e72:	00f6      	lsls	r6, r6, #3
 8000e74:	4466      	add	r6, ip
 8000e76:	e9c6 2300 	strd	r2, r3, [r6]
    for (int i = 0; i < 25; i++)
 8000e7a:	f507 56ad 	add.w	r6, r7, #5536	@ 0x15a0
 8000e7e:	f106 0614 	add.w	r6, r6, #20
 8000e82:	6836      	ldr	r6, [r6, #0]
 8000e84:	3601      	adds	r6, #1
 8000e86:	f507 5cad 	add.w	ip, r7, #5536	@ 0x15a0
 8000e8a:	f10c 0c14 	add.w	ip, ip, #20
 8000e8e:	f8cc 6000 	str.w	r6, [ip]
 8000e92:	f507 56ad 	add.w	r6, r7, #5536	@ 0x15a0
 8000e96:	f106 0614 	add.w	r6, r6, #20
 8000e9a:	6836      	ldr	r6, [r6, #0]
 8000e9c:	2e18      	cmp	r6, #24
 8000e9e:	ddc5      	ble.n	8000e2c <test_masked_vs_reference_step_by_step_arithmetic+0x1c>

    masked_uint64_t masked_state[5][5];
    fill_masked_state_arithmetic(masked_state, ref_state);
 8000ea0:	f507 52a5 	add.w	r2, r7, #5280	@ 0x14a0
 8000ea4:	f102 0210 	add.w	r2, r2, #16
 8000ea8:	f507 538c 	add.w	r3, r7, #4480	@ 0x1180
 8000eac:	f103 0310 	add.w	r3, r3, #16
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fe4e 	bl	8000b54 <fill_masked_state_arithmetic>

    uint64_t tmp_ref[25], tmp_masked[25];


    masked_uint64_t a, b, res;
        uint64_t plain_a = 0x123456789ABCDEF0;
 8000eb8:	f20f 432c 	addw	r3, pc, #1068	@ 0x42c
 8000ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec0:	f507 51ac 	add.w	r1, r7, #5504	@ 0x1580
 8000ec4:	f101 0110 	add.w	r1, r1, #16
 8000ec8:	e9c1 2300 	strd	r2, r3, [r1]
        uint64_t plain_b = 0x0FEDCBA987654321;
 8000ecc:	f20f 4320 	addw	r3, pc, #1056	@ 0x420
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	f507 51ac 	add.w	r1, r7, #5504	@ 0x1580
 8000ed8:	f101 0108 	add.w	r1, r1, #8
 8000edc:	e9c1 2300 	strd	r2, r3, [r1]

        fill_random_additive_shares(&a, plain_a);
 8000ee0:	f507 617e 	add.w	r1, r7, #4064	@ 0xfe0
 8000ee4:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000ee8:	f103 0310 	add.w	r3, r3, #16
 8000eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef0:	4608      	mov	r0, r1
 8000ef2:	f7ff ff59 	bl	8000da8 <fill_random_additive_shares>
        fill_random_additive_shares(&b, plain_b);
 8000ef6:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 8000efa:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000efe:	f103 0308 	add.w	r3, r3, #8
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	4608      	mov	r0, r1
 8000f08:	f7ff ff4e 	bl	8000da8 <fill_random_additive_shares>

        masked_add_arithmetic(&res, &a, &b);  // 3-arg usage
 8000f0c:	f507 627c 	add.w	r2, r7, #4032	@ 0xfc0
 8000f10:	f507 617e 	add.w	r1, r7, #4064	@ 0xfe0
 8000f14:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 fcaa 	bl	8001872 <masked_add_arithmetic>

        // Recombine and check
        uint64_t recombined = 0;
 8000f1e:	f04f 0200 	mov.w	r2, #0
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	f507 51ad 	add.w	r1, r7, #5536	@ 0x15a0
 8000f2a:	f101 0108 	add.w	r1, r1, #8
 8000f2e:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < MASKING_N; ++i)
 8000f32:	2300      	movs	r3, #0
 8000f34:	f507 52ad 	add.w	r2, r7, #5536	@ 0x15a0
 8000f38:	f102 0204 	add.w	r2, r2, #4
 8000f3c:	6013      	str	r3, [r2, #0]
 8000f3e:	e029      	b.n	8000f94 <test_masked_vs_reference_step_by_step_arithmetic+0x184>
            recombined += res.share[i];
 8000f40:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000f44:	f103 0318 	add.w	r3, r3, #24
 8000f48:	f5a3 62c3 	sub.w	r2, r3, #1560	@ 0x618
 8000f4c:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000f50:	f103 0304 	add.w	r3, r3, #4
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	00db      	lsls	r3, r3, #3
 8000f58:	4413      	add	r3, r2
 8000f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5e:	f507 51ad 	add.w	r1, r7, #5536	@ 0x15a0
 8000f62:	f101 0108 	add.w	r1, r1, #8
 8000f66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f6a:	eb10 0802 	adds.w	r8, r0, r2
 8000f6e:	eb41 0903 	adc.w	r9, r1, r3
 8000f72:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000f76:	f103 0308 	add.w	r3, r3, #8
 8000f7a:	e9c3 8900 	strd	r8, r9, [r3]
        for (int i = 0; i < MASKING_N; ++i)
 8000f7e:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000f82:	f103 0304 	add.w	r3, r3, #4
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	f507 52ad 	add.w	r2, r7, #5536	@ 0x15a0
 8000f8e:	f102 0204 	add.w	r2, r2, #4
 8000f92:	6013      	str	r3, [r2, #0]
 8000f94:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000f98:	f103 0304 	add.w	r3, r3, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	ddce      	ble.n	8000f40 <test_masked_vs_reference_step_by_step_arithmetic+0x130>

        uint64_t expected = plain_a + plain_b;
 8000fa2:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000fa6:	f103 0310 	add.w	r3, r3, #16
 8000faa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fae:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000fb2:	f103 0308 	add.w	r3, r3, #8
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	1884      	adds	r4, r0, r2
 8000fbc:	eb41 0503 	adc.w	r5, r1, r3
 8000fc0:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000fc4:	e9c3 4500 	strd	r4, r5, [r3]
        if (recombined != expected) {
 8000fc8:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000fcc:	f103 0308 	add.w	r3, r3, #8
 8000fd0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd4:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	4299      	cmp	r1, r3
 8000fde:	bf08      	it	eq
 8000fe0:	4290      	cmpeq	r0, r2
 8000fe2:	d015      	beq.n	8001010 <test_masked_vs_reference_step_by_step_arithmetic+0x200>
            printf("[FAIL] masked_add_arithmetic: expected %016lX, got %016lX\n", expected, recombined);
 8000fe4:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8000fe8:	f103 0308 	add.w	r3, r3, #8
 8000fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ff4:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	48b0      	ldr	r0, [pc, #704]	@ (80012c0 <test_masked_vs_reference_step_by_step_arithmetic+0x4b0>)
 8000ffe:	f00a f96f 	bl	800b2e0 <iprintf>
            assert(0);
 8001002:	4bb0      	ldr	r3, [pc, #704]	@ (80012c4 <test_masked_vs_reference_step_by_step_arithmetic+0x4b4>)
 8001004:	4ab0      	ldr	r2, [pc, #704]	@ (80012c8 <test_masked_vs_reference_step_by_step_arithmetic+0x4b8>)
 8001006:	f240 111f 	movw	r1, #287	@ 0x11f
 800100a:	48b0      	ldr	r0, [pc, #704]	@ (80012cc <test_masked_vs_reference_step_by_step_arithmetic+0x4bc>)
 800100c:	f009 ffb8 	bl	800af80 <__assert_func>
        } else {
            printf("[PASS] masked_add_arithmetic: %016lX + %016lX = %016lX\n", plain_a, plain_b, recombined);
 8001010:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001014:	f103 0308 	add.w	r3, r3, #8
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001020:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8001024:	f103 0308 	add.w	r3, r3, #8
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	e9cd 2300 	strd	r2, r3, [sp]
 8001030:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8001034:	f103 0310 	add.w	r3, r3, #16
 8001038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800103c:	48a4      	ldr	r0, [pc, #656]	@ (80012d0 <test_masked_vs_reference_step_by_step_arithmetic+0x4c0>)
 800103e:	f00a f94f 	bl	800b2e0 <iprintf>
        }



    // === 2. THETA ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 8001042:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001046:	f103 0318 	add.w	r3, r3, #24
 800104a:	f5a3 629e 	sub.w	r2, r3, #1264	@ 0x4f0
 800104e:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001052:	f103 0318 	add.w	r3, r3, #24
 8001056:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800105a:	4610      	mov	r0, r2
 800105c:	4619      	mov	r1, r3
 800105e:	23c8      	movs	r3, #200	@ 0xc8
 8001060:	461a      	mov	r2, r3
 8001062:	f00a fbcc 	bl	800b7fe <memcpy>
    theta(tmp_ref);
 8001066:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 800106a:	f103 0308 	add.w	r3, r3, #8
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff fac8 	bl	8000604 <theta>

    masked_theta_arithmetic(masked_state);
 8001074:	f507 538c 	add.w	r3, r7, #4480	@ 0x1180
 8001078:	f103 0310 	add.w	r3, r3, #16
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fd0f 	bl	8001aa0 <masked_theta_arithmetic>
    recombine_masked_state_arithmetic(tmp_masked, masked_state);
 8001082:	f507 528c 	add.w	r2, r7, #4480	@ 0x1180
 8001086:	f102 0210 	add.w	r2, r2, #16
 800108a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fdcd 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("THETA-ARITH", tmp_ref, tmp_masked);
 8001096:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800109a:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 800109e:	f103 0308 	add.w	r3, r3, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	488b      	ldr	r0, [pc, #556]	@ (80012d4 <test_masked_vs_reference_step_by_step_arithmetic+0x4c4>)
 80010a6:	f7ff fe13 	bl	8000cd0 <print_diff>

    // === 3. RHO ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 80010aa:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 80010ae:	f103 0318 	add.w	r3, r3, #24
 80010b2:	f5a3 629e 	sub.w	r2, r3, #1264	@ 0x4f0
 80010b6:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 80010ba:	f103 0318 	add.w	r3, r3, #24
 80010be:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	23c8      	movs	r3, #200	@ 0xc8
 80010c8:	461a      	mov	r2, r3
 80010ca:	f00a fb98 	bl	800b7fe <memcpy>
    rho(tmp_ref);
 80010ce:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 80010d2:	f103 0308 	add.w	r3, r3, #8
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fb72 	bl	80007c0 <rho>

    masked_rho_arithmetic(masked_state);
 80010dc:	f507 538c 	add.w	r3, r7, #4480	@ 0x1180
 80010e0:	f103 0310 	add.w	r3, r3, #16
 80010e4:	4618      	mov	r0, r3
 80010e6:	f001 f815 	bl	8002114 <masked_rho_arithmetic>
    recombine_masked_state_arithmetic(tmp_masked, masked_state);
 80010ea:	f507 528c 	add.w	r2, r7, #4480	@ 0x1180
 80010ee:	f102 0210 	add.w	r2, r2, #16
 80010f2:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 80010f6:	4611      	mov	r1, r2
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fd99 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("RHO-ARITH", tmp_ref, tmp_masked);
 80010fe:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001102:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001106:	f103 0308 	add.w	r3, r3, #8
 800110a:	4619      	mov	r1, r3
 800110c:	4872      	ldr	r0, [pc, #456]	@ (80012d8 <test_masked_vs_reference_step_by_step_arithmetic+0x4c8>)
 800110e:	f7ff fddf 	bl	8000cd0 <print_diff>

    // === 4. PI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8001112:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001116:	f103 0318 	add.w	r3, r3, #24
 800111a:	f5a3 629e 	sub.w	r2, r3, #1264	@ 0x4f0
 800111e:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001122:	f103 0318 	add.w	r3, r3, #24
 8001126:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	23c8      	movs	r3, #200	@ 0xc8
 8001130:	461a      	mov	r2, r3
 8001132:	f00a fb64 	bl	800b7fe <memcpy>
    pi(tmp_ref);
 8001136:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 800113a:	f103 0308 	add.w	r3, r3, #8
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fbb4 	bl	80008ac <pi>

    masked_pi_arithmetic(masked_state);
 8001144:	f507 538c 	add.w	r3, r7, #4480	@ 0x1180
 8001148:	f103 0310 	add.w	r3, r3, #16
 800114c:	4618      	mov	r0, r3
 800114e:	f001 f86b 	bl	8002228 <masked_pi_arithmetic>
    recombine_masked_state_arithmetic(tmp_masked, masked_state);
 8001152:	f507 528c 	add.w	r2, r7, #4480	@ 0x1180
 8001156:	f102 0210 	add.w	r2, r2, #16
 800115a:	f507 5380 	add.w	r3, r7, #4096	@ 0x1000
 800115e:	4611      	mov	r1, r2
 8001160:	4618      	mov	r0, r3
 8001162:	f7ff fd65 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("PI-ARITH", tmp_ref, tmp_masked);
 8001166:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800116a:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 800116e:	f103 0308 	add.w	r3, r3, #8
 8001172:	4619      	mov	r1, r3
 8001174:	4859      	ldr	r0, [pc, #356]	@ (80012dc <test_masked_vs_reference_step_by_step_arithmetic+0x4cc>)
 8001176:	f7ff fdab 	bl	8000cd0 <print_diff>

    int round_idx = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	f507 52ab 	add.w	r2, r7, #5472	@ 0x1560
 8001180:	f102 021c 	add.w	r2, r2, #28
 8001184:	6013      	str	r3, [r2, #0]

    // === 5. CHI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8001186:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 800118a:	f103 0318 	add.w	r3, r3, #24
 800118e:	f5a3 629e 	sub.w	r2, r3, #1264	@ 0x4f0
 8001192:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001196:	f103 0318 	add.w	r3, r3, #24
 800119a:	f5a3 63b7 	sub.w	r3, r3, #1464	@ 0x5b8
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	23c8      	movs	r3, #200	@ 0xc8
 80011a4:	461a      	mov	r2, r3
 80011a6:	f00a fb2a 	bl	800b7fe <memcpy>
    chi(tmp_ref);
 80011aa:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 80011ae:	f103 0308 	add.w	r3, r3, #8
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff fc14 	bl	80009e0 <chi>

    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 80011b8:	2300      	movs	r3, #0
 80011ba:	f507 52ad 	add.w	r2, r7, #5536	@ 0x15a0
 80011be:	6013      	str	r3, [r2, #0]
 80011c0:	e033      	b.n	800122a <test_masked_vs_reference_step_by_step_arithmetic+0x41a>
        for (int x = 0; x < 5; ++x)
 80011c2:	2300      	movs	r3, #0
 80011c4:	f507 52ac 	add.w	r2, r7, #5504	@ 0x1580
 80011c8:	f102 021c 	add.w	r2, r2, #28
 80011cc:	6013      	str	r3, [r2, #0]
 80011ce:	e01e      	b.n	800120e <test_masked_vs_reference_step_by_step_arithmetic+0x3fe>
            fill_random_matrix(r_chi[x][y]);
 80011d0:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 80011d4:	3a18      	subs	r2, #24
 80011d6:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 80011da:	f103 031c 	add.w	r3, r3, #28
 80011de:	6819      	ldr	r1, [r3, #0]
 80011e0:	460b      	mov	r3, r1
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	f507 51ad 	add.w	r1, r7, #5536	@ 0x15a0
 80011ea:	6809      	ldr	r1, [r1, #0]
 80011ec:	440b      	add	r3, r1
 80011ee:	01db      	lsls	r3, r3, #7
 80011f0:	4413      	add	r3, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 fafa 	bl	80017ec <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 80011f8:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 80011fc:	f103 031c 	add.w	r3, r3, #28
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	3301      	adds	r3, #1
 8001204:	f507 52ac 	add.w	r2, r7, #5504	@ 0x1580
 8001208:	f102 021c 	add.w	r2, r2, #28
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	f507 53ac 	add.w	r3, r7, #5504	@ 0x1580
 8001212:	f103 031c 	add.w	r3, r3, #28
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2b04      	cmp	r3, #4
 800121a:	ddd9      	ble.n	80011d0 <test_masked_vs_reference_step_by_step_arithmetic+0x3c0>
    for (int y = 0; y < 5; ++y)
 800121c:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	3301      	adds	r3, #1
 8001224:	f507 52ad 	add.w	r2, r7, #5536	@ 0x15a0
 8001228:	6013      	str	r3, [r2, #0]
 800122a:	f507 53ad 	add.w	r3, r7, #5536	@ 0x15a0
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	ddc6      	ble.n	80011c2 <test_masked_vs_reference_step_by_step_arithmetic+0x3b2>

    masked_uint64_t chi_out[5][5];
    masked_chi_arithmetic(chi_out, masked_state, r_chi);
 8001234:	f507 724e 	add.w	r2, r7, #824	@ 0x338
 8001238:	3a18      	subs	r2, #24
 800123a:	f507 518c 	add.w	r1, r7, #4480	@ 0x1180
 800123e:	f101 0110 	add.w	r1, r1, #16
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	3b18      	subs	r3, #24
 8001248:	4618      	mov	r0, r3
 800124a:	f001 f89b 	bl	8002384 <masked_chi_arithmetic>

    // === 6. IOTA ===
    iota(tmp_ref, round_idx);
 800124e:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 8001252:	f103 0308 	add.w	r3, r3, #8
 8001256:	f507 52ab 	add.w	r2, r7, #5472	@ 0x1560
 800125a:	f102 021c 	add.w	r2, r2, #28
 800125e:	6811      	ldr	r1, [r2, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff fc45 	bl	8000af0 <iota>
    masked_iota_arithmetic(chi_out, RC[round_idx]);
 8001266:	4a1e      	ldr	r2, [pc, #120]	@ (80012e0 <test_masked_vs_reference_step_by_step_arithmetic+0x4d0>)
 8001268:	f507 53ab 	add.w	r3, r7, #5472	@ 0x1560
 800126c:	f103 031c 	add.w	r3, r3, #28
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	4413      	add	r3, r2
 8001276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800127a:	f107 0118 	add.w	r1, r7, #24
 800127e:	3918      	subs	r1, #24
 8001280:	4608      	mov	r0, r1
 8001282:	f001 f903 	bl	800248c <masked_iota_arithmetic>

    recombine_masked_state_arithmetic(tmp_masked, chi_out);
 8001286:	f107 0318 	add.w	r3, r7, #24
 800128a:	3b18      	subs	r3, #24
 800128c:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 8001290:	4619      	mov	r1, r3
 8001292:	4610      	mov	r0, r2
 8001294:	f7ff fccc 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("IOTA-ARITH", tmp_ref, tmp_masked);
 8001298:	f507 5280 	add.w	r2, r7, #4096	@ 0x1000
 800129c:	f507 5386 	add.w	r3, r7, #4288	@ 0x10c0
 80012a0:	f103 0308 	add.w	r3, r3, #8
 80012a4:	4619      	mov	r1, r3
 80012a6:	480f      	ldr	r0, [pc, #60]	@ (80012e4 <test_masked_vs_reference_step_by_step_arithmetic+0x4d4>)
 80012a8:	f7ff fd12 	bl	8000cd0 <print_diff>
}
 80012ac:	bf00      	nop
 80012ae:	f507 57ad 	add.w	r7, r7, #5536	@ 0x15a0
 80012b2:	371c      	adds	r7, #28
 80012b4:	46bd      	mov	sp, r7
 80012b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80012ba:	bf00      	nop
 80012bc:	f3af 8000 	nop.w
 80012c0:	0800c248 	.word	0x0800c248
 80012c4:	0800c284 	.word	0x0800c284
 80012c8:	0800c664 	.word	0x0800c664
 80012cc:	0800c288 	.word	0x0800c288
 80012d0:	0800c29c 	.word	0x0800c29c
 80012d4:	0800c2d4 	.word	0x0800c2d4
 80012d8:	0800c2e0 	.word	0x0800c2e0
 80012dc:	0800c2ec 	.word	0x0800c2ec
 80012e0:	0800c698 	.word	0x0800c698
 80012e4:	0800c2f8 	.word	0x0800c2f8
 80012e8:	9abcdef0 	.word	0x9abcdef0
 80012ec:	12345678 	.word	0x12345678
 80012f0:	87654321 	.word	0x87654321
 80012f4:	0fedcba9 	.word	0x0fedcba9

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f001 fbe3 	bl	8002ac8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f833 	bl	800136c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f96d 	bl	80015e4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800130a:	f000 f899 	bl	8001440 <MX_I2C1_Init>
  MX_I2S3_Init();
 800130e:	f000 f8c5 	bl	800149c <MX_I2S3_Init>
  MX_SPI1_Init();
 8001312:	f000 f907 	bl	8001524 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001316:	f009 fb29 	bl	800a96c <MX_USB_HOST_Init>
  MX_RNG_Init();
 800131a:	f000 f8ef 	bl	80014fc <MX_RNG_Init>
  MX_USART2_UART_Init();
 800131e:	f000 f937 	bl	8001590 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
 8001326:	4b0e      	ldr	r3, [pc, #56]	@ (8001360 <main+0x68>)
 8001328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800132a:	4a0d      	ldr	r2, [pc, #52]	@ (8001360 <main+0x68>)
 800132c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001330:	6353      	str	r3, [r2, #52]	@ 0x34
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <main+0x68>)
 8001334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800133a:	607b      	str	r3, [r7, #4]
 800133c:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 800133e:	4809      	ldr	r0, [pc, #36]	@ (8001364 <main+0x6c>)
 8001340:	f005 fc12 	bl	8006b68 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8001344:	4b08      	ldr	r3, [pc, #32]	@ (8001368 <main+0x70>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6898      	ldr	r0, [r3, #8]
 800134a:	2300      	movs	r3, #0
 800134c:	2202      	movs	r2, #2
 800134e:	2100      	movs	r1, #0
 8001350:	f00a f83e 	bl	800b3d0 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_vs_reference_step_by_step_arithmetic();
 8001354:	f7ff fd5c 	bl	8000e10 <test_masked_vs_reference_step_by_step_arithmetic>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001358:	f009 fb2e 	bl	800a9b8 <MX_USB_HOST_Process>
	  test_masked_vs_reference_step_by_step_arithmetic();
 800135c:	bf00      	nop
 800135e:	e7f9      	b.n	8001354 <main+0x5c>
 8001360:	40023800 	.word	0x40023800
 8001364:	20000140 	.word	0x20000140
 8001368:	20000038 	.word	0x20000038

0800136c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001372:	f107 0320 	add.w	r3, r7, #32
 8001376:	2230      	movs	r2, #48	@ 0x30
 8001378:	2100      	movs	r1, #0
 800137a:	4618      	mov	r0, r3
 800137c:	f00a f9b4 	bl	800b6e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001380:	f107 030c 	add.w	r3, r7, #12
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
 8001394:	4b28      	ldr	r3, [pc, #160]	@ (8001438 <SystemClock_Config+0xcc>)
 8001396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001398:	4a27      	ldr	r2, [pc, #156]	@ (8001438 <SystemClock_Config+0xcc>)
 800139a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800139e:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a0:	4b25      	ldr	r3, [pc, #148]	@ (8001438 <SystemClock_Config+0xcc>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
 80013b0:	4b22      	ldr	r3, [pc, #136]	@ (800143c <SystemClock_Config+0xd0>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a21      	ldr	r2, [pc, #132]	@ (800143c <SystemClock_Config+0xd0>)
 80013b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <SystemClock_Config+0xd0>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013c8:	2301      	movs	r3, #1
 80013ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d2:	2302      	movs	r3, #2
 80013d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80013da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80013dc:	2308      	movs	r3, #8
 80013de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80013e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e6:	2302      	movs	r3, #2
 80013e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ea:	2307      	movs	r3, #7
 80013ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013ee:	f107 0320 	add.w	r3, r7, #32
 80013f2:	4618      	mov	r0, r3
 80013f4:	f004 fdde 	bl	8005fb4 <HAL_RCC_OscConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80013fe:	f000 f9ef 	bl	80017e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001402:	230f      	movs	r3, #15
 8001404:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001406:	2302      	movs	r3, #2
 8001408:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800140e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001412:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001414:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001418:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141a:	f107 030c 	add.w	r3, r7, #12
 800141e:	2105      	movs	r1, #5
 8001420:	4618      	mov	r0, r3
 8001422:	f005 f83f 	bl	80064a4 <HAL_RCC_ClockConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800142c:	f000 f9d8 	bl	80017e0 <Error_Handler>
  }
}
 8001430:	bf00      	nop
 8001432:	3750      	adds	r7, #80	@ 0x50
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	40023800 	.word	0x40023800
 800143c:	40007000 	.word	0x40007000

08001440 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001444:	4b12      	ldr	r3, [pc, #72]	@ (8001490 <MX_I2C1_Init+0x50>)
 8001446:	4a13      	ldr	r2, [pc, #76]	@ (8001494 <MX_I2C1_Init+0x54>)
 8001448:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800144a:	4b11      	ldr	r3, [pc, #68]	@ (8001490 <MX_I2C1_Init+0x50>)
 800144c:	4a12      	ldr	r2, [pc, #72]	@ (8001498 <MX_I2C1_Init+0x58>)
 800144e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001450:	4b0f      	ldr	r3, [pc, #60]	@ (8001490 <MX_I2C1_Init+0x50>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001456:	4b0e      	ldr	r3, [pc, #56]	@ (8001490 <MX_I2C1_Init+0x50>)
 8001458:	2200      	movs	r2, #0
 800145a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800145c:	4b0c      	ldr	r3, [pc, #48]	@ (8001490 <MX_I2C1_Init+0x50>)
 800145e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001462:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001464:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <MX_I2C1_Init+0x50>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800146a:	4b09      	ldr	r3, [pc, #36]	@ (8001490 <MX_I2C1_Init+0x50>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001470:	4b07      	ldr	r3, [pc, #28]	@ (8001490 <MX_I2C1_Init+0x50>)
 8001472:	2200      	movs	r2, #0
 8001474:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001476:	4b06      	ldr	r3, [pc, #24]	@ (8001490 <MX_I2C1_Init+0x50>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800147c:	4804      	ldr	r0, [pc, #16]	@ (8001490 <MX_I2C1_Init+0x50>)
 800147e:	f003 ffb5 	bl	80053ec <HAL_I2C_Init>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001488:	f000 f9aa 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800148c:	bf00      	nop
 800148e:	bd80      	pop	{r7, pc}
 8001490:	200000a4 	.word	0x200000a4
 8001494:	40005400 	.word	0x40005400
 8001498:	000186a0 	.word	0x000186a0

0800149c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014a2:	4a14      	ldr	r2, [pc, #80]	@ (80014f4 <MX_I2S3_Init+0x58>)
 80014a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80014a6:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80014b4:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80014ba:	4b0d      	ldr	r3, [pc, #52]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014c4:	4a0c      	ldr	r2, [pc, #48]	@ (80014f8 <MX_I2S3_Init+0x5c>)
 80014c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_I2S3_Init+0x54>)
 80014dc:	f004 f8ca 	bl	8005674 <HAL_I2S_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80014e6:	f000 f97b 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	200000f8 	.word	0x200000f8
 80014f4:	40003c00 	.word	0x40003c00
 80014f8:	00017700 	.word	0x00017700

080014fc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <MX_RNG_Init+0x20>)
 8001502:	4a07      	ldr	r2, [pc, #28]	@ (8001520 <MX_RNG_Init+0x24>)
 8001504:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <MX_RNG_Init+0x20>)
 8001508:	f005 fb2e 	bl	8006b68 <HAL_RNG_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001512:	f000 f965 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000140 	.word	0x20000140
 8001520:	50060800 	.word	0x50060800

08001524 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001528:	4b17      	ldr	r3, [pc, #92]	@ (8001588 <MX_SPI1_Init+0x64>)
 800152a:	4a18      	ldr	r2, [pc, #96]	@ (800158c <MX_SPI1_Init+0x68>)
 800152c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001530:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001534:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001536:	4b14      	ldr	r3, [pc, #80]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800153c:	4b12      	ldr	r3, [pc, #72]	@ (8001588 <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001542:	4b11      	ldr	r3, [pc, #68]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001548:	4b0f      	ldr	r3, [pc, #60]	@ (8001588 <MX_SPI1_Init+0x64>)
 800154a:	2200      	movs	r2, #0
 800154c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001550:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001554:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001556:	4b0c      	ldr	r3, [pc, #48]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001558:	2200      	movs	r2, #0
 800155a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800155c:	4b0a      	ldr	r3, [pc, #40]	@ (8001588 <MX_SPI1_Init+0x64>)
 800155e:	2200      	movs	r2, #0
 8001560:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001564:	2200      	movs	r2, #0
 8001566:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001568:	4b07      	ldr	r3, [pc, #28]	@ (8001588 <MX_SPI1_Init+0x64>)
 800156a:	2200      	movs	r2, #0
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001570:	220a      	movs	r2, #10
 8001572:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001574:	4804      	ldr	r0, [pc, #16]	@ (8001588 <MX_SPI1_Init+0x64>)
 8001576:	f005 fb77 	bl	8006c68 <HAL_SPI_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001580:	f000 f92e 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	20000150 	.word	0x20000150
 800158c:	40013000 	.word	0x40013000

08001590 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001594:	4b11      	ldr	r3, [pc, #68]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 8001596:	4a12      	ldr	r2, [pc, #72]	@ (80015e0 <MX_USART2_UART_Init+0x50>)
 8001598:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800159a:	4b10      	ldr	r3, [pc, #64]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 800159c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015a2:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a8:	4b0c      	ldr	r3, [pc, #48]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ae:	4b0b      	ldr	r3, [pc, #44]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b4:	4b09      	ldr	r3, [pc, #36]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015b6:	220c      	movs	r2, #12
 80015b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ba:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c0:	4b06      	ldr	r3, [pc, #24]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	4805      	ldr	r0, [pc, #20]	@ (80015dc <MX_USART2_UART_Init+0x4c>)
 80015c8:	f005 fbd7 	bl	8006d7a <HAL_UART_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015d2:	f000 f905 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	200001a8 	.word	0x200001a8
 80015e0:	40004400 	.word	0x40004400

080015e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b08c      	sub	sp, #48	@ 0x30
 80015e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	f107 031c 	add.w	r3, r7, #28
 80015ee:	2200      	movs	r2, #0
 80015f0:	601a      	str	r2, [r3, #0]
 80015f2:	605a      	str	r2, [r3, #4]
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	60da      	str	r2, [r3, #12]
 80015f8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	61bb      	str	r3, [r7, #24]
 80015fe:	4b72      	ldr	r3, [pc, #456]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	4a71      	ldr	r2, [pc, #452]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001604:	f043 0310 	orr.w	r3, r3, #16
 8001608:	6313      	str	r3, [r2, #48]	@ 0x30
 800160a:	4b6f      	ldr	r3, [pc, #444]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160e:	f003 0310 	and.w	r3, r3, #16
 8001612:	61bb      	str	r3, [r7, #24]
 8001614:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	4b6b      	ldr	r3, [pc, #428]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a6a      	ldr	r2, [pc, #424]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b68      	ldr	r3, [pc, #416]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	4b64      	ldr	r3, [pc, #400]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a63      	ldr	r2, [pc, #396]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b61      	ldr	r3, [pc, #388]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	613b      	str	r3, [r7, #16]
 800164c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
 8001652:	4b5d      	ldr	r3, [pc, #372]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a5c      	ldr	r2, [pc, #368]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b5a      	ldr	r3, [pc, #360]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60fb      	str	r3, [r7, #12]
 8001668:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b56      	ldr	r3, [pc, #344]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a55      	ldr	r2, [pc, #340]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b53      	ldr	r3, [pc, #332]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	607b      	str	r3, [r7, #4]
 800168a:	4b4f      	ldr	r3, [pc, #316]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a4e      	ldr	r2, [pc, #312]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b4c      	ldr	r3, [pc, #304]	@ (80017c8 <MX_GPIO_Init+0x1e4>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0308 	and.w	r3, r3, #8
 800169e:	607b      	str	r3, [r7, #4]
 80016a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80016a2:	2200      	movs	r2, #0
 80016a4:	2108      	movs	r1, #8
 80016a6:	4849      	ldr	r0, [pc, #292]	@ (80017cc <MX_GPIO_Init+0x1e8>)
 80016a8:	f001 fd52 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2101      	movs	r1, #1
 80016b0:	4847      	ldr	r0, [pc, #284]	@ (80017d0 <MX_GPIO_Init+0x1ec>)
 80016b2:	f001 fd4d 	bl	8003150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80016b6:	2200      	movs	r2, #0
 80016b8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 80016bc:	4845      	ldr	r0, [pc, #276]	@ (80017d4 <MX_GPIO_Init+0x1f0>)
 80016be:	f001 fd47 	bl	8003150 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80016c2:	2308      	movs	r3, #8
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ce:	2300      	movs	r3, #0
 80016d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80016d2:	f107 031c 	add.w	r3, r7, #28
 80016d6:	4619      	mov	r1, r3
 80016d8:	483c      	ldr	r0, [pc, #240]	@ (80017cc <MX_GPIO_Init+0x1e8>)
 80016da:	f001 fb9d 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80016de:	2301      	movs	r3, #1
 80016e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e2:	2301      	movs	r3, #1
 80016e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016ee:	f107 031c 	add.w	r3, r7, #28
 80016f2:	4619      	mov	r1, r3
 80016f4:	4836      	ldr	r0, [pc, #216]	@ (80017d0 <MX_GPIO_Init+0x1ec>)
 80016f6:	f001 fb8f 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80016fa:	2308      	movs	r3, #8
 80016fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800170a:	2305      	movs	r3, #5
 800170c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	482e      	ldr	r0, [pc, #184]	@ (80017d0 <MX_GPIO_Init+0x1ec>)
 8001716:	f001 fb7f 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800171e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001722:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001728:	f107 031c 	add.w	r3, r7, #28
 800172c:	4619      	mov	r1, r3
 800172e:	482a      	ldr	r0, [pc, #168]	@ (80017d8 <MX_GPIO_Init+0x1f4>)
 8001730:	f001 fb72 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001734:	2304      	movs	r3, #4
 8001736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 031c 	add.w	r3, r7, #28
 8001744:	4619      	mov	r1, r3
 8001746:	4825      	ldr	r0, [pc, #148]	@ (80017dc <MX_GPIO_Init+0x1f8>)
 8001748:	f001 fb66 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800174c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001750:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800175e:	2305      	movs	r3, #5
 8001760:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001762:	f107 031c 	add.w	r3, r7, #28
 8001766:	4619      	mov	r1, r3
 8001768:	481c      	ldr	r0, [pc, #112]	@ (80017dc <MX_GPIO_Init+0x1f8>)
 800176a:	f001 fb55 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800176e:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001772:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001774:	2301      	movs	r3, #1
 8001776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177c:	2300      	movs	r3, #0
 800177e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001780:	f107 031c 	add.w	r3, r7, #28
 8001784:	4619      	mov	r1, r3
 8001786:	4813      	ldr	r0, [pc, #76]	@ (80017d4 <MX_GPIO_Init+0x1f0>)
 8001788:	f001 fb46 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800178c:	2320      	movs	r3, #32
 800178e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001790:	2300      	movs	r3, #0
 8001792:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001794:	2300      	movs	r3, #0
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001798:	f107 031c 	add.w	r3, r7, #28
 800179c:	4619      	mov	r1, r3
 800179e:	480d      	ldr	r0, [pc, #52]	@ (80017d4 <MX_GPIO_Init+0x1f0>)
 80017a0:	f001 fb3a 	bl	8002e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80017a4:	2302      	movs	r3, #2
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017a8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80017ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80017b2:	f107 031c 	add.w	r3, r7, #28
 80017b6:	4619      	mov	r1, r3
 80017b8:	4804      	ldr	r0, [pc, #16]	@ (80017cc <MX_GPIO_Init+0x1e8>)
 80017ba:	f001 fb2d 	bl	8002e18 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80017be:	bf00      	nop
 80017c0:	3730      	adds	r7, #48	@ 0x30
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40021000 	.word	0x40021000
 80017d0:	40020800 	.word	0x40020800
 80017d4:	40020c00 	.word	0x40020c00
 80017d8:	40020000 	.word	0x40020000
 80017dc:	40020400 	.word	0x40020400

080017e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e4:	b672      	cpsid	i
}
 80017e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e8:	bf00      	nop
 80017ea:	e7fd      	b.n	80017e8 <Error_Handler+0x8>

080017ec <fill_random_matrix>:
#include <stdint.h>
#include <stdio.h>
#include "masked_gadgets.h"
#include "global_rng.h"

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	e033      	b.n	8001862 <fill_random_matrix+0x76>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	3301      	adds	r3, #1
 80017fe:	613b      	str	r3, [r7, #16]
 8001800:	e01c      	b.n	800183c <fill_random_matrix+0x50>
            uint64_t val = get_random64();
 8001802:	f7fe fecb 	bl	800059c <get_random64>
 8001806:	e9c7 0102 	strd	r0, r1, [r7, #8]
            r[i][j] = val;
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	015b      	lsls	r3, r3, #5
 800180e:	687a      	ldr	r2, [r7, #4]
 8001810:	441a      	add	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	18d1      	adds	r1, r2, r3
 8001818:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800181c:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	015b      	lsls	r3, r3, #5
 8001824:	687a      	ldr	r2, [r7, #4]
 8001826:	441a      	add	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	18d1      	adds	r1, r2, r3
 800182e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001832:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	3301      	adds	r3, #1
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d9df      	bls.n	8001802 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	015b      	lsls	r3, r3, #5
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	441a      	add	r2, r3
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	18d1      	adds	r1, r2, r3
 8001850:	f04f 0200 	mov.w	r2, #0
 8001854:	f04f 0300 	mov.w	r3, #0
 8001858:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d9c8      	bls.n	80017fa <fill_random_matrix+0xe>
    }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3718      	adds	r7, #24
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <masked_add_arithmetic>:
// ~~~ARITHMETIC IMPLEMENTATIONS ~~~


void masked_add_arithmetic(masked_uint64_t *out,
                           const masked_uint64_t *a,
                           const masked_uint64_t *b) {
 8001872:	b4b0      	push	{r4, r5, r7}
 8001874:	b087      	sub	sp, #28
 8001876:	af00      	add	r7, sp, #0
 8001878:	60f8      	str	r0, [r7, #12]
 800187a:	60b9      	str	r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
 8001882:	e017      	b.n	80018b4 <masked_add_arithmetic+0x42>
        out->share[i] = (a->share[i] + b->share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8001884:	68ba      	ldr	r2, [r7, #8]
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	00db      	lsls	r3, r3, #3
 800188a:	4413      	add	r3, r2
 800188c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	4413      	add	r3, r2
 8001898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800189c:	1884      	adds	r4, r0, r2
 800189e:	eb41 0503 	adc.w	r5, r1, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	3301      	adds	r3, #1
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	2b03      	cmp	r3, #3
 80018b8:	d9e4      	bls.n	8001884 <masked_add_arithmetic+0x12>
    }
}
 80018ba:	bf00      	nop
 80018bc:	bf00      	nop
 80018be:	371c      	adds	r7, #28
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bcb0      	pop	{r4, r5, r7}
 80018c4:	4770      	bx	lr

080018c6 <masked_mul_arithmetic>:
}

void masked_mul_arithmetic(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 80018c6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018ca:	b094      	sub	sp, #80	@ 0x50
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6378      	str	r0, [r7, #52]	@ 0x34
 80018d0:	6339      	str	r1, [r7, #48]	@ 0x30
 80018d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80018d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Step 1: Diagonal products
    for (size_t i = 0; i < MASKING_N; i++) {
 80018d6:	2300      	movs	r3, #0
 80018d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80018da:	e01e      	b.n	800191a <masked_mul_arithmetic+0x54>
        out->share[i] = a->share[i] * b->share[i];
 80018dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	4413      	add	r3, r2
 80018e4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80018e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80018ec:	00db      	lsls	r3, r3, #3
 80018ee:	4413      	add	r3, r2
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	fb02 f005 	mul.w	r0, r2, r5
 80018f8:	fb04 f103 	mul.w	r1, r4, r3
 80018fc:	4401      	add	r1, r0
 80018fe:	fba4 8902 	umull	r8, r9, r4, r2
 8001902:	eb01 0309 	add.w	r3, r1, r9
 8001906:	4699      	mov	r9, r3
 8001908:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800190a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001916:	3301      	adds	r3, #1
 8001918:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800191a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800191c:	2b03      	cmp	r3, #3
 800191e:	d9dd      	bls.n	80018dc <masked_mul_arithmetic+0x16>
    }

    // Step 2: Cross-terms + randomness (ISW-style)
    for (size_t i = 0; i < MASKING_N; i++) {
 8001920:	2300      	movs	r3, #0
 8001922:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001924:	e08d      	b.n	8001a42 <masked_mul_arithmetic+0x17c>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001926:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001928:	3301      	adds	r3, #1
 800192a:	647b      	str	r3, [r7, #68]	@ 0x44
 800192c:	e082      	b.n	8001a34 <masked_mul_arithmetic+0x16e>
            uint64_t t = a->share[i] * b->share[j] + a->share[j] * b->share[i];
 800192e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001930:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001932:	00db      	lsls	r3, r3, #3
 8001934:	4413      	add	r3, r2
 8001936:	e9d3 4500 	ldrd	r4, r5, [r3]
 800193a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800193c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	4413      	add	r3, r2
 8001942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001946:	fb02 f005 	mul.w	r0, r2, r5
 800194a:	fb04 f103 	mul.w	r1, r4, r3
 800194e:	4401      	add	r1, r0
 8001950:	fba4 ab02 	umull	sl, fp, r4, r2
 8001954:	eb01 030b 	add.w	r3, r1, fp
 8001958:	469b      	mov	fp, r3
 800195a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800195c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	4413      	add	r3, r2
 8001962:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001966:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	4413      	add	r3, r2
 800196e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001972:	fb02 f005 	mul.w	r0, r2, r5
 8001976:	fb04 f103 	mul.w	r1, r4, r3
 800197a:	4401      	add	r1, r0
 800197c:	fba4 2302 	umull	r2, r3, r4, r2
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
 8001982:	4613      	mov	r3, r2
 8001984:	623b      	str	r3, [r7, #32]
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	18cb      	adds	r3, r1, r3
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
 800198c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001990:	460b      	mov	r3, r1
 8001992:	eb1a 0303 	adds.w	r3, sl, r3
 8001996:	603b      	str	r3, [r7, #0]
 8001998:	4613      	mov	r3, r2
 800199a:	eb4b 0303 	adc.w	r3, fp, r3
 800199e:	607b      	str	r3, [r7, #4]
 80019a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019a4:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
            out->share[i] += r[i][j];
 80019a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4413      	add	r3, r2
 80019b0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019b6:	015a      	lsls	r2, r3, #5
 80019b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019ba:	441a      	add	r2, r3
 80019bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019be:	00db      	lsls	r3, r3, #3
 80019c0:	4413      	add	r3, r2
 80019c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c6:	1884      	adds	r4, r0, r2
 80019c8:	61bc      	str	r4, [r7, #24]
 80019ca:	eb41 0303 	adc.w	r3, r1, r3
 80019ce:	61fb      	str	r3, [r7, #28]
 80019d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	4413      	add	r3, r2
 80019d8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80019dc:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] += t - r[i][j];
 80019e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80019e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019e4:	00db      	lsls	r3, r3, #3
 80019e6:	4413      	add	r3, r2
 80019e8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80019ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80019ee:	015a      	lsls	r2, r3, #5
 80019f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019f2:	441a      	add	r2, r3
 80019f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	4413      	add	r3, r2
 80019fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019fe:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8001a02:	1a16      	subs	r6, r2, r0
 8001a04:	613e      	str	r6, [r7, #16]
 8001a06:	eb63 0301 	sbc.w	r3, r3, r1
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001a10:	460b      	mov	r3, r1
 8001a12:	18e3      	adds	r3, r4, r3
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	4613      	mov	r3, r2
 8001a18:	eb45 0303 	adc.w	r3, r5, r3
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4413      	add	r3, r2
 8001a26:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001a2a:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a30:	3301      	adds	r3, #1
 8001a32:	647b      	str	r3, [r7, #68]	@ 0x44
 8001a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001a36:	2b03      	cmp	r3, #3
 8001a38:	f67f af79 	bls.w	800192e <masked_mul_arithmetic+0x68>
    for (size_t i = 0; i < MASKING_N; i++) {
 8001a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a3e:	3301      	adds	r3, #1
 8001a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a42:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001a44:	2b03      	cmp	r3, #3
 8001a46:	f67f af6e 	bls.w	8001926 <masked_mul_arithmetic+0x60>
        }
    }
}
 8001a4a:	bf00      	nop
 8001a4c:	bf00      	nop
 8001a4e:	3750      	adds	r7, #80	@ 0x50
 8001a50:	46bd      	mov	sp, r7
 8001a52:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001a56:	4770      	bx	lr

08001a58 <masked_neg_arithmetic>:

void masked_neg_arithmetic(masked_uint64_t *out,
                const masked_uint64_t *a) {
 8001a58:	b4b0      	push	{r4, r5, r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	e012      	b.n	8001a8e <masked_neg_arithmetic+0x36>
        out->share[i] = -a->share[i];
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4413      	add	r3, r2
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	2100      	movs	r1, #0
 8001a76:	4254      	negs	r4, r2
 8001a78:	eb61 0503 	sbc.w	r5, r1, r3
 8001a7c:	687a      	ldr	r2, [r7, #4]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	4413      	add	r3, r2
 8001a84:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d9e9      	bls.n	8001a68 <masked_neg_arithmetic+0x10>
    }
}
 8001a94:	bf00      	nop
 8001a96:	bf00      	nop
 8001a98:	3714      	adds	r7, #20
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bcb0      	pop	{r4, r5, r7}
 8001a9e:	4770      	bx	lr

08001aa0 <masked_theta_arithmetic>:
        masked_keccak_round(state, RC[i]);
    }
}


void masked_theta_arithmetic(masked_uint64_t state[5][5]) {
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	f5ad 7d72 	sub.w	sp, sp, #968	@ 0x3c8
 8001aa8:	af04      	add	r7, sp, #16
 8001aaa:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001aae:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8001ab2:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};
 8001ab4:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001ab8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001abc:	4618      	mov	r0, r3
 8001abe:	23a0      	movs	r3, #160	@ 0xa0
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	f009 fe10 	bl	800b6e8 <memset>
    masked_uint64_t D[5] = {0};
 8001ac8:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001acc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	23a0      	movs	r3, #160	@ 0xa0
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	f009 fe06 	bl	800b6e8 <memset>

    // === Recombine and save initial state ===
    uint64_t input_state[25];
    for (int y = 0; y < 5; ++y)
 8001adc:	2300      	movs	r3, #0
 8001ade:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001ae2:	e054      	b.n	8001b8e <masked_theta_arithmetic+0xee>
        for (int x = 0; x < 5; ++x) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001aea:	e047      	b.n	8001b7c <masked_theta_arithmetic+0xdc>
            uint64_t val = 0;
 8001aec:	f04f 0200 	mov.w	r2, #0
 8001af0:	f04f 0300 	mov.w	r3, #0
 8001af4:	e9c7 23ea 	strd	r2, r3, [r7, #936]	@ 0x3a8
            for (int i = 0; i < MASKING_N; ++i)
 8001af8:	2300      	movs	r3, #0
 8001afa:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001afe:	e022      	b.n	8001b46 <masked_theta_arithmetic+0xa6>
                val = (val + state[x][y].share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8001b00:	f8d7 23b0 	ldr.w	r2, [r7, #944]	@ 0x3b0
 8001b04:	4613      	mov	r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	4413      	add	r3, r2
 8001b0a:	015b      	lsls	r3, r3, #5
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001b12:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	1899      	adds	r1, r3, r2
 8001b1a:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001b1e:	009a      	lsls	r2, r3, #2
 8001b20:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b24:	4413      	add	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	440b      	add	r3, r1
 8001b2a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b2e:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001b32:	1814      	adds	r4, r2, r0
 8001b34:	eb43 0501 	adc.w	r5, r3, r1
 8001b38:	e9c7 45ea 	strd	r4, r5, [r7, #936]	@ 0x3a8
            for (int i = 0; i < MASKING_N; ++i)
 8001b3c:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b40:	3301      	adds	r3, #1
 8001b42:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001b46:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8001b4a:	2b03      	cmp	r3, #3
 8001b4c:	ddd8      	ble.n	8001b00 <masked_theta_arithmetic+0x60>
            input_state[y * 5 + x] = val;
 8001b4e:	f8d7 23b4 	ldr.w	r2, [r7, #948]	@ 0x3b4
 8001b52:	4613      	mov	r3, r2
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	441a      	add	r2, r3
 8001b58:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001b5c:	18d1      	adds	r1, r2, r3
 8001b5e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001b62:	f5a3 7228 	sub.w	r2, r3, #672	@ 0x2a0
 8001b66:	00cb      	lsls	r3, r1, #3
 8001b68:	18d1      	adds	r1, r2, r3
 8001b6a:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 8001b6e:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8001b72:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001b76:	3301      	adds	r3, #1
 8001b78:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8001b7c:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8001b80:	2b04      	cmp	r3, #4
 8001b82:	ddb3      	ble.n	8001aec <masked_theta_arithmetic+0x4c>
    for (int y = 0; y < 5; ++y)
 8001b84:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001b88:	3301      	adds	r3, #1
 8001b8a:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8001b8e:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8001b92:	2b04      	cmp	r3, #4
 8001b94:	dda6      	ble.n	8001ae4 <masked_theta_arithmetic+0x44>
        }

    // === Compute reference state ===
    uint64_t ref_state[25];
    memcpy(ref_state, input_state, sizeof(ref_state));
 8001b96:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001b9a:	f5a3 725a 	sub.w	r2, r3, #872	@ 0x368
 8001b9e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001ba2:	f5a3 7328 	sub.w	r3, r3, #672	@ 0x2a0
 8001ba6:	4610      	mov	r0, r2
 8001ba8:	4619      	mov	r1, r3
 8001baa:	23c8      	movs	r3, #200	@ 0xc8
 8001bac:	461a      	mov	r2, r3
 8001bae:	f009 fe26 	bl	800b7fe <memcpy>
    theta(ref_state);
 8001bb2:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7fe fd24 	bl	8000604 <theta>

    printf("\n[DEBUG] Input state before Theta:\n");
 8001bbc:	48df      	ldr	r0, [pc, #892]	@ (8001f3c <masked_theta_arithmetic+0x49c>)
 8001bbe:	f009 fbff 	bl	800b3c0 <puts>
    for (int y = 0; y < 5; ++y)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8001bc8:	e02a      	b.n	8001c20 <masked_theta_arithmetic+0x180>
        for (int x = 0; x < 5; ++x)
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001bd0:	e01d      	b.n	8001c0e <masked_theta_arithmetic+0x16e>
            printf("input[%d][%d] = %016lX\n", x, y, input_state[y * 5 + x]);
 8001bd2:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	441a      	add	r2, r3
 8001bdc:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001be0:	18d1      	adds	r1, r2, r3
 8001be2:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001be6:	f5a3 7228 	sub.w	r2, r3, #672	@ 0x2a0
 8001bea:	00cb      	lsls	r3, r1, #3
 8001bec:	4413      	add	r3, r2
 8001bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf2:	e9cd 2300 	strd	r2, r3, [sp]
 8001bf6:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8001bfa:	f8d7 139c 	ldr.w	r1, [r7, #924]	@ 0x39c
 8001bfe:	48d0      	ldr	r0, [pc, #832]	@ (8001f40 <masked_theta_arithmetic+0x4a0>)
 8001c00:	f009 fb6e 	bl	800b2e0 <iprintf>
        for (int x = 0; x < 5; ++x)
 8001c04:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001c08:	3301      	adds	r3, #1
 8001c0a:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8001c0e:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8001c12:	2b04      	cmp	r3, #4
 8001c14:	dddd      	ble.n	8001bd2 <masked_theta_arithmetic+0x132>
    for (int y = 0; y < 5; ++y)
 8001c16:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8001c20:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8001c24:	2b04      	cmp	r3, #4
 8001c26:	ddd0      	ble.n	8001bca <masked_theta_arithmetic+0x12a>

    // === Compute C[x] = sum across each column ===
    for (int x = 0; x < 5; x++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8001c2e:	e07e      	b.n	8001d2e <masked_theta_arithmetic+0x28e>
        C[x] = state[x][0];
 8001c30:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8001c34:	4613      	mov	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	4413      	add	r3, r2
 8001c3a:	015b      	lsls	r3, r3, #5
 8001c3c:	461a      	mov	r2, r3
 8001c3e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001c42:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	1899      	adds	r1, r3, r2
 8001c4a:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001c4e:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8001c52:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001c56:	015b      	lsls	r3, r3, #5
 8001c58:	4413      	add	r3, r2
 8001c5a:	461d      	mov	r5, r3
 8001c5c:	460c      	mov	r4, r1
 8001c5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001c66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001c70:	e024      	b.n	8001cbc <masked_theta_arithmetic+0x21c>
            masked_add_arithmetic(&C[x], &C[x], &state[x][y]);
 8001c72:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 8001c76:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	18d0      	adds	r0, r2, r3
 8001c7e:	f507 7220 	add.w	r2, r7, #640	@ 0x280
 8001c82:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001c86:	015b      	lsls	r3, r3, #5
 8001c88:	18d1      	adds	r1, r2, r3
 8001c8a:	f8d7 2398 	ldr.w	r2, [r7, #920]	@ 0x398
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	015b      	lsls	r3, r3, #5
 8001c96:	461a      	mov	r2, r3
 8001c98:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001c9c:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	441a      	add	r2, r3
 8001ca4:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8001ca8:	015b      	lsls	r3, r3, #5
 8001caa:	4413      	add	r3, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	f7ff fde0 	bl	8001872 <masked_add_arithmetic>
        for (int y = 1; y < 5; y++) {
 8001cb2:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8001cbc:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	ddd6      	ble.n	8001c72 <masked_theta_arithmetic+0x1d2>
        }

        uint64_t recombined = 0;
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	e9c7 23e2 	strd	r2, r3, [r7, #904]	@ 0x388
        for (int i = 0; i < MASKING_N; ++i)
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001cd6:	e01a      	b.n	8001d0e <masked_theta_arithmetic+0x26e>
            recombined = (recombined + C[x].share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8001cd8:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001cdc:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8001ce0:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001ce4:	009a      	lsls	r2, r3, #2
 8001ce6:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001cea:	4413      	add	r3, r2
 8001cec:	00db      	lsls	r3, r3, #3
 8001cee:	440b      	add	r3, r1
 8001cf0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf4:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8001cf8:	eb12 0800 	adds.w	r8, r2, r0
 8001cfc:	eb43 0901 	adc.w	r9, r3, r1
 8001d00:	e9c7 89e2 	strd	r8, r9, [r7, #904]	@ 0x388
        for (int i = 0; i < MASKING_N; ++i)
 8001d04:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001d08:	3301      	adds	r3, #1
 8001d0a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8001d0e:	f8d7 3384 	ldr.w	r3, [r7, #900]	@ 0x384
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	dde0      	ble.n	8001cd8 <masked_theta_arithmetic+0x238>
        printf("[DEBUG] C[%d] recombined = %016lX\n", x, recombined);
 8001d16:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8001d1a:	f8d7 1398 	ldr.w	r1, [r7, #920]	@ 0x398
 8001d1e:	4889      	ldr	r0, [pc, #548]	@ (8001f44 <masked_theta_arithmetic+0x4a4>)
 8001d20:	f009 fade 	bl	800b2e0 <iprintf>
    for (int x = 0; x < 5; x++) {
 8001d24:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001d28:	3301      	adds	r3, #1
 8001d2a:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8001d2e:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8001d32:	2b04      	cmp	r3, #4
 8001d34:	f77f af7c 	ble.w	8001c30 <masked_theta_arithmetic+0x190>
    }

    // === Compute D[x] = C[x-1] + ROT(C[x+1], 1) ===
    for (int x = 0; x < 5; x++) {
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001d3e:	e0f0      	b.n	8001f22 <masked_theta_arithmetic+0x482>
        // Recombine C[(x+1)%5]
        uint64_t c_next = 0;
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9c7 23de 	strd	r2, r3, [r7, #888]	@ 0x378
        for (int i = 0; i < MASKING_N; ++i)
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001d52:	e027      	b.n	8001da4 <masked_theta_arithmetic+0x304>
            c_next = (c_next + C[(x + 1) % 5].share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8001d54:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001d58:	1c59      	adds	r1, r3, #1
 8001d5a:	4b7b      	ldr	r3, [pc, #492]	@ (8001f48 <masked_theta_arithmetic+0x4a8>)
 8001d5c:	fb83 2301 	smull	r2, r3, r3, r1
 8001d60:	105a      	asrs	r2, r3, #1
 8001d62:	17cb      	asrs	r3, r1, #31
 8001d64:	1ad2      	subs	r2, r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	1aca      	subs	r2, r1, r3
 8001d6e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001d72:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8001d76:	0092      	lsls	r2, r2, #2
 8001d78:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001d7c:	4413      	add	r3, r2
 8001d7e:	00db      	lsls	r3, r3, #3
 8001d80:	440b      	add	r3, r1
 8001d82:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d86:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 8001d8a:	1814      	adds	r4, r2, r0
 8001d8c:	623c      	str	r4, [r7, #32]
 8001d8e:	414b      	adcs	r3, r1
 8001d90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d92:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001d96:	e9c7 34de 	strd	r3, r4, [r7, #888]	@ 0x378
        for (int i = 0; i < MASKING_N; ++i)
 8001d9a:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001d9e:	3301      	adds	r3, #1
 8001da0:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8001da4:	f8d7 3374 	ldr.w	r3, [r7, #884]	@ 0x374
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	ddd3      	ble.n	8001d54 <masked_theta_arithmetic+0x2b4>

        // Recombine C[(x+4)%5]
        uint64_t c_prev = 0;
 8001dac:	f04f 0200 	mov.w	r2, #0
 8001db0:	f04f 0300 	mov.w	r3, #0
 8001db4:	e9c7 23da 	strd	r2, r3, [r7, #872]	@ 0x368
        for (int i = 0; i < MASKING_N; ++i)
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001dbe:	e027      	b.n	8001e10 <masked_theta_arithmetic+0x370>
            c_prev = (c_prev + C[(x + 4) % 5].share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8001dc0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001dc4:	1d19      	adds	r1, r3, #4
 8001dc6:	4b60      	ldr	r3, [pc, #384]	@ (8001f48 <masked_theta_arithmetic+0x4a8>)
 8001dc8:	fb83 2301 	smull	r2, r3, r3, r1
 8001dcc:	105a      	asrs	r2, r3, #1
 8001dce:	17cb      	asrs	r3, r1, #31
 8001dd0:	1ad2      	subs	r2, r2, r3
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	1aca      	subs	r2, r1, r3
 8001dda:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001dde:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8001de2:	0092      	lsls	r2, r2, #2
 8001de4:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001de8:	4413      	add	r3, r2
 8001dea:	00db      	lsls	r3, r3, #3
 8001dec:	440b      	add	r3, r1
 8001dee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001df2:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	@ 0x368
 8001df6:	1814      	adds	r4, r2, r0
 8001df8:	61bc      	str	r4, [r7, #24]
 8001dfa:	414b      	adcs	r3, r1
 8001dfc:	61fb      	str	r3, [r7, #28]
 8001dfe:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e02:	e9c7 34da 	strd	r3, r4, [r7, #872]	@ 0x368
        for (int i = 0; i < MASKING_N; ++i)
 8001e06:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001e10:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001e14:	2b03      	cmp	r3, #3
 8001e16:	ddd3      	ble.n	8001dc0 <masked_theta_arithmetic+0x320>

        uint64_t rotated = (c_next << 1) | (c_next >> 63);
 8001e18:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001e1c:	0fda      	lsrs	r2, r3, #31
 8001e1e:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	4313      	orrs	r3, r2
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 8001e2c:	0fda      	lsrs	r2, r3, #31
 8001e2e:	f8d7 3378 	ldr.w	r3, [r7, #888]	@ 0x378
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4313      	orrs	r3, r2
 8001e36:	613b      	str	r3, [r7, #16]
 8001e38:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e3c:	e9c7 34ca 	strd	r3, r4, [r7, #808]	@ 0x328
        uint64_t Dx = c_prev ^ rotated;
 8001e40:	e9d7 01da 	ldrd	r0, r1, [r7, #872]	@ 0x368
 8001e44:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8001e48:	ea80 0402 	eor.w	r4, r0, r2
 8001e4c:	60bc      	str	r4, [r7, #8]
 8001e4e:	404b      	eors	r3, r1
 8001e50:	60fb      	str	r3, [r7, #12]
 8001e52:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e56:	e9c7 34c8 	strd	r3, r4, [r7, #800]	@ 0x320


        // Mask Dx back into D[x]
        // Temporarily mask Dx deterministically for debugging
        for (int i = 0; i < MASKING_N; ++i)
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8001e60:	e016      	b.n	8001e90 <masked_theta_arithmetic+0x3f0>
            D[x].share[i] = 0;
 8001e62:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001e66:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8001e6a:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001e6e:	009a      	lsls	r2, r3, #2
 8001e70:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001e74:	4413      	add	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4419      	add	r1, r3
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9c1 2300 	strd	r2, r3, [r1]
        for (int i = 0; i < MASKING_N; ++i)
 8001e86:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8001e90:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	dde4      	ble.n	8001e62 <masked_theta_arithmetic+0x3c2>
        D[x].share[MASKING_N - 1] = Dx;
 8001e98:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001e9c:	f5a3 72ec 	sub.w	r2, r3, #472	@ 0x1d8
 8001ea0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001ea4:	015b      	lsls	r3, r3, #5
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f103 0118 	add.w	r1, r3, #24
 8001eac:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8001eb0:	e9c1 2300 	strd	r2, r3, [r1]


        // Recombine to log
        uint64_t recombined = 0;
 8001eb4:	f04f 0200 	mov.w	r2, #0
 8001eb8:	f04f 0300 	mov.w	r3, #0
 8001ebc:	e9c7 23d6 	strd	r2, r3, [r7, #856]	@ 0x358
        for (int i = 0; i < MASKING_N; ++i)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001ec6:	e01c      	b.n	8001f02 <masked_theta_arithmetic+0x462>
            recombined = (recombined + D[x].share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8001ec8:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001ecc:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8001ed0:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001ed4:	009a      	lsls	r2, r3, #2
 8001ed6:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001eda:	4413      	add	r3, r2
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	440b      	add	r3, r1
 8001ee0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ee4:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8001ee8:	1814      	adds	r4, r2, r0
 8001eea:	603c      	str	r4, [r7, #0]
 8001eec:	414b      	adcs	r3, r1
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001ef4:	e9c7 34d6 	strd	r3, r4, [r7, #856]	@ 0x358
        for (int i = 0; i < MASKING_N; ++i)
 8001ef8:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001efc:	3301      	adds	r3, #1
 8001efe:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001f02:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	ddde      	ble.n	8001ec8 <masked_theta_arithmetic+0x428>
        printf("[DEBUG] D[%d] recombined = %016lX\n", x, recombined);
 8001f0a:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8001f0e:	f8d7 1380 	ldr.w	r1, [r7, #896]	@ 0x380
 8001f12:	480e      	ldr	r0, [pc, #56]	@ (8001f4c <masked_theta_arithmetic+0x4ac>)
 8001f14:	f009 f9e4 	bl	800b2e0 <iprintf>
    for (int x = 0; x < 5; x++) {
 8001f18:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001f1c:	3301      	adds	r3, #1
 8001f1e:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
 8001f22:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	f77f af0a 	ble.w	8001d40 <masked_theta_arithmetic+0x2a0>
    }

    // === Final update: A[x,y] = A[x,y] + D[x] ===
    for (int x = 0; x < 5; x++) {
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001f32:	e054      	b.n	8001fde <masked_theta_arithmetic+0x53e>
        for (int y = 0; y < 5; y++) {
 8001f34:	2300      	movs	r3, #0
 8001f36:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001f3a:	e047      	b.n	8001fcc <masked_theta_arithmetic+0x52c>
 8001f3c:	0800c508 	.word	0x0800c508
 8001f40:	0800c52c 	.word	0x0800c52c
 8001f44:	0800c544 	.word	0x0800c544
 8001f48:	66666667 	.word	0x66666667
 8001f4c:	0800c568 	.word	0x0800c568
            masked_uint64_t tmp;
            masked_add_arithmetic(&tmp, &state[x][y], &D[x]);
 8001f50:	f8d7 2350 	ldr.w	r2, [r7, #848]	@ 0x350
 8001f54:	4613      	mov	r3, r2
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	015b      	lsls	r3, r3, #5
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001f62:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	441a      	add	r2, r3
 8001f6a:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001f6e:	015b      	lsls	r3, r3, #5
 8001f70:	18d1      	adds	r1, r2, r3
 8001f72:	f507 72f0 	add.w	r2, r7, #480	@ 0x1e0
 8001f76:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001f7a:	015b      	lsls	r3, r3, #5
 8001f7c:	441a      	add	r2, r3
 8001f7e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fc75 	bl	8001872 <masked_add_arithmetic>
            state[x][y] = tmp;
 8001f88:	f8d7 2350 	ldr.w	r2, [r7, #848]	@ 0x350
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	4413      	add	r3, r2
 8001f92:	015b      	lsls	r3, r3, #5
 8001f94:	461a      	mov	r2, r3
 8001f96:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001f9a:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	441a      	add	r2, r3
 8001fa2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fa6:	015b      	lsls	r3, r3, #5
 8001fa8:	441a      	add	r2, r3
 8001faa:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8001fae:	f5a3 7362 	sub.w	r3, r3, #904	@ 0x388
 8001fb2:	4614      	mov	r4, r2
 8001fb4:	461d      	mov	r5, r3
 8001fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; y++) {
 8001fc2:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fc6:	3301      	adds	r3, #1
 8001fc8:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8001fcc:	f8d7 334c 	ldr.w	r3, [r7, #844]	@ 0x34c
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	ddbd      	ble.n	8001f50 <masked_theta_arithmetic+0x4b0>
    for (int x = 0; x < 5; x++) {
 8001fd4:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001fd8:	3301      	adds	r3, #1
 8001fda:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001fde:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	dda6      	ble.n	8001f34 <masked_theta_arithmetic+0x494>
        }
    }

    printf("\n[DEBUG] Final recombined state after masked_theta:\n");
 8001fe6:	4848      	ldr	r0, [pc, #288]	@ (8002108 <masked_theta_arithmetic+0x668>)
 8001fe8:	f009 f9ea 	bl	800b3c0 <puts>
    for (int y = 0; y < 5; ++y) {
 8001fec:	2300      	movs	r3, #0
 8001fee:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8001ff2:	e07c      	b.n	80020ee <masked_theta_arithmetic+0x64e>
        for (int x = 0; x < 5; ++x) {
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8001ffa:	e06f      	b.n	80020dc <masked_theta_arithmetic+0x63c>
            uint64_t val = 0;
 8001ffc:	f04f 0200 	mov.w	r2, #0
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	e9c7 23ce 	strd	r2, r3, [r7, #824]	@ 0x338
            for (int i = 0; i < MASKING_N; ++i)
 8002008:	2300      	movs	r3, #0
 800200a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 800200e:	e023      	b.n	8002058 <masked_theta_arithmetic+0x5b8>
                val = (val + state[x][y].share[i]) & 0xFFFFFFFFFFFFFFFFULL;
 8002010:	f8d7 2344 	ldr.w	r2, [r7, #836]	@ 0x344
 8002014:	4613      	mov	r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	4413      	add	r3, r2
 800201a:	015b      	lsls	r3, r3, #5
 800201c:	461a      	mov	r2, r3
 800201e:	f507 736e 	add.w	r3, r7, #952	@ 0x3b8
 8002022:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	441a      	add	r2, r3
 800202a:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 800202e:	0099      	lsls	r1, r3, #2
 8002030:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002034:	440b      	add	r3, r1
 8002036:	00db      	lsls	r3, r3, #3
 8002038:	4413      	add	r3, r2
 800203a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203e:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 8002042:	eb10 0a02 	adds.w	sl, r0, r2
 8002046:	eb41 0b03 	adc.w	fp, r1, r3
 800204a:	e9c7 abce 	strd	sl, fp, [r7, #824]	@ 0x338
            for (int i = 0; i < MASKING_N; ++i)
 800204e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002052:	3301      	adds	r3, #1
 8002054:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002058:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800205c:	2b03      	cmp	r3, #3
 800205e:	ddd7      	ble.n	8002010 <masked_theta_arithmetic+0x570>
            printf("state[%d][%d] = %016lX | expected = %016lX", x, y, val, ref_state[y * 5 + x]);
 8002060:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	441a      	add	r2, r3
 800206a:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800206e:	4413      	add	r3, r2
 8002070:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 8002074:	f5a2 725a 	sub.w	r2, r2, #872	@ 0x368
 8002078:	00db      	lsls	r3, r3, #3
 800207a:	4413      	add	r3, r2
 800207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002080:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002084:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8002088:	e9cd 2300 	strd	r2, r3, [sp]
 800208c:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 8002090:	f8d7 1344 	ldr.w	r1, [r7, #836]	@ 0x344
 8002094:	481d      	ldr	r0, [pc, #116]	@ (800210c <masked_theta_arithmetic+0x66c>)
 8002096:	f009 f923 	bl	800b2e0 <iprintf>
            if (val != ref_state[y * 5 + x]) printf("  <-- mismatch");
 800209a:	f8d7 2348 	ldr.w	r2, [r7, #840]	@ 0x348
 800209e:	4613      	mov	r3, r2
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	441a      	add	r2, r3
 80020a4:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80020a8:	4413      	add	r3, r2
 80020aa:	f507 726e 	add.w	r2, r7, #952	@ 0x3b8
 80020ae:	f5a2 725a 	sub.w	r2, r2, #872	@ 0x368
 80020b2:	00db      	lsls	r3, r3, #3
 80020b4:	4413      	add	r3, r2
 80020b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ba:	e9d7 01ce 	ldrd	r0, r1, [r7, #824]	@ 0x338
 80020be:	4299      	cmp	r1, r3
 80020c0:	bf08      	it	eq
 80020c2:	4290      	cmpeq	r0, r2
 80020c4:	d002      	beq.n	80020cc <masked_theta_arithmetic+0x62c>
 80020c6:	4812      	ldr	r0, [pc, #72]	@ (8002110 <masked_theta_arithmetic+0x670>)
 80020c8:	f009 f90a 	bl	800b2e0 <iprintf>
            printf("\n");
 80020cc:	200a      	movs	r0, #10
 80020ce:	f009 f919 	bl	800b304 <putchar>
        for (int x = 0; x < 5; ++x) {
 80020d2:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80020d6:	3301      	adds	r3, #1
 80020d8:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80020dc:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	dd8b      	ble.n	8001ffc <masked_theta_arithmetic+0x55c>
    for (int y = 0; y < 5; ++y) {
 80020e4:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80020e8:	3301      	adds	r3, #1
 80020ea:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 80020ee:	f8d7 3348 	ldr.w	r3, [r7, #840]	@ 0x348
 80020f2:	2b04      	cmp	r3, #4
 80020f4:	f77f af7e 	ble.w	8001ff4 <masked_theta_arithmetic+0x554>
        }
    }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	f507 776e 	add.w	r7, r7, #952	@ 0x3b8
 8002100:	46bd      	mov	sp, r7
 8002102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002106:	bf00      	nop
 8002108:	0800c58c 	.word	0x0800c58c
 800210c:	0800c5c0 	.word	0x0800c5c0
 8002110:	0800c5ec 	.word	0x0800c5ec

08002114 <masked_rho_arithmetic>:



void masked_rho_arithmetic(masked_uint64_t state[5][5]) {
 8002114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002118:	b088      	sub	sp, #32
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
    for (int x = 0; x < 5; x++) {
 800211e:	2100      	movs	r1, #0
 8002120:	61f9      	str	r1, [r7, #28]
 8002122:	e075      	b.n	8002210 <masked_rho_arithmetic+0xfc>
        for (int y = 0; y < 5; y++) {
 8002124:	2100      	movs	r1, #0
 8002126:	61b9      	str	r1, [r7, #24]
 8002128:	e06c      	b.n	8002204 <masked_rho_arithmetic+0xf0>
            uint8_t r = keccak_rho_offsets[x][y];
 800212a:	4e3e      	ldr	r6, [pc, #248]	@ (8002224 <masked_rho_arithmetic+0x110>)
 800212c:	69f8      	ldr	r0, [r7, #28]
 800212e:	4601      	mov	r1, r0
 8002130:	0089      	lsls	r1, r1, #2
 8002132:	4401      	add	r1, r0
 8002134:	1870      	adds	r0, r6, r1
 8002136:	69b9      	ldr	r1, [r7, #24]
 8002138:	4401      	add	r1, r0
 800213a:	7809      	ldrb	r1, [r1, #0]
 800213c:	74f9      	strb	r1, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 800213e:	2100      	movs	r1, #0
 8002140:	6179      	str	r1, [r7, #20]
 8002142:	e059      	b.n	80021f8 <masked_rho_arithmetic+0xe4>
                state[x][y].share[i] = ROL64(state[x][y].share[i], r);
 8002144:	69f8      	ldr	r0, [r7, #28]
 8002146:	4601      	mov	r1, r0
 8002148:	0089      	lsls	r1, r1, #2
 800214a:	4401      	add	r1, r0
 800214c:	0149      	lsls	r1, r1, #5
 800214e:	4608      	mov	r0, r1
 8002150:	68f9      	ldr	r1, [r7, #12]
 8002152:	4408      	add	r0, r1
 8002154:	69b9      	ldr	r1, [r7, #24]
 8002156:	008e      	lsls	r6, r1, #2
 8002158:	6979      	ldr	r1, [r7, #20]
 800215a:	4431      	add	r1, r6
 800215c:	00c9      	lsls	r1, r1, #3
 800215e:	4401      	add	r1, r0
 8002160:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002164:	f897 c013 	ldrb.w	ip, [r7, #19]
 8002168:	69fe      	ldr	r6, [r7, #28]
 800216a:	4634      	mov	r4, r6
 800216c:	4626      	mov	r6, r4
 800216e:	00b6      	lsls	r6, r6, #2
 8002170:	4426      	add	r6, r4
 8002172:	0176      	lsls	r6, r6, #5
 8002174:	46b6      	mov	lr, r6
 8002176:	68fe      	ldr	r6, [r7, #12]
 8002178:	eb06 0a0e 	add.w	sl, r6, lr
 800217c:	f1ac 0e20 	sub.w	lr, ip, #32
 8002180:	f1cc 0620 	rsb	r6, ip, #32
 8002184:	fa01 f40c 	lsl.w	r4, r1, ip
 8002188:	607c      	str	r4, [r7, #4]
 800218a:	fa00 fe0e 	lsl.w	lr, r0, lr
 800218e:	687c      	ldr	r4, [r7, #4]
 8002190:	ea44 040e 	orr.w	r4, r4, lr
 8002194:	607c      	str	r4, [r7, #4]
 8002196:	fa20 f606 	lsr.w	r6, r0, r6
 800219a:	687c      	ldr	r4, [r7, #4]
 800219c:	4334      	orrs	r4, r6
 800219e:	607c      	str	r4, [r7, #4]
 80021a0:	fa00 f40c 	lsl.w	r4, r0, ip
 80021a4:	603c      	str	r4, [r7, #0]
 80021a6:	f1cc 0600 	rsb	r6, ip, #0
 80021aa:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80021ae:	f1c6 0e20 	rsb	lr, r6, #32
 80021b2:	f1a6 0c20 	sub.w	ip, r6, #32
 80021b6:	fa20 f206 	lsr.w	r2, r0, r6
 80021ba:	fa01 fe0e 	lsl.w	lr, r1, lr
 80021be:	ea42 020e 	orr.w	r2, r2, lr
 80021c2:	fa21 fc0c 	lsr.w	ip, r1, ip
 80021c6:	ea42 020c 	orr.w	r2, r2, ip
 80021ca:	fa21 f306 	lsr.w	r3, r1, r6
 80021ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021d2:	4621      	mov	r1, r4
 80021d4:	ea41 0802 	orr.w	r8, r1, r2
 80021d8:	4629      	mov	r1, r5
 80021da:	ea41 0903 	orr.w	r9, r1, r3
 80021de:	4642      	mov	r2, r8
 80021e0:	464b      	mov	r3, r9
 80021e2:	69b9      	ldr	r1, [r7, #24]
 80021e4:	0088      	lsls	r0, r1, #2
 80021e6:	6979      	ldr	r1, [r7, #20]
 80021e8:	4401      	add	r1, r0
 80021ea:	00c9      	lsls	r1, r1, #3
 80021ec:	4451      	add	r1, sl
 80021ee:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 80021f2:	6979      	ldr	r1, [r7, #20]
 80021f4:	3101      	adds	r1, #1
 80021f6:	6179      	str	r1, [r7, #20]
 80021f8:	6979      	ldr	r1, [r7, #20]
 80021fa:	2903      	cmp	r1, #3
 80021fc:	dda2      	ble.n	8002144 <masked_rho_arithmetic+0x30>
        for (int y = 0; y < 5; y++) {
 80021fe:	69b9      	ldr	r1, [r7, #24]
 8002200:	3101      	adds	r1, #1
 8002202:	61b9      	str	r1, [r7, #24]
 8002204:	69b9      	ldr	r1, [r7, #24]
 8002206:	2904      	cmp	r1, #4
 8002208:	dd8f      	ble.n	800212a <masked_rho_arithmetic+0x16>
    for (int x = 0; x < 5; x++) {
 800220a:	69f9      	ldr	r1, [r7, #28]
 800220c:	3101      	adds	r1, #1
 800220e:	61f9      	str	r1, [r7, #28]
 8002210:	69f9      	ldr	r1, [r7, #28]
 8002212:	2904      	cmp	r1, #4
 8002214:	dd86      	ble.n	8002124 <masked_rho_arithmetic+0x10>
            }
        }
    }
}
 8002216:	bf00      	nop
 8002218:	bf00      	nop
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002222:	bf00      	nop
 8002224:	0800c758 	.word	0x0800c758

08002228 <masked_pi_arithmetic>:

void masked_pi_arithmetic(masked_uint64_t state[5][5]) {
 8002228:	b4b0      	push	{r4, r5, r7}
 800222a:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 800222e:	af00      	add	r7, sp, #0
 8002230:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002234:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002238:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];
    for (int x = 0; x < 5; ++x)
 800223a:	2300      	movs	r3, #0
 800223c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002240:	e038      	b.n	80022b4 <masked_pi_arithmetic+0x8c>
        for (int y = 0; y < 5; ++y)
 8002242:	2300      	movs	r3, #0
 8002244:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002248:	e02b      	b.n	80022a2 <masked_pi_arithmetic+0x7a>
            tmp[x][y] = state[x][y];
 800224a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	015b      	lsls	r3, r3, #5
 8002256:	461a      	mov	r2, r3
 8002258:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 800225c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	1899      	adds	r1, r3, r2
 8002264:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002268:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 800226c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002270:	4613      	mov	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4413      	add	r3, r2
 8002276:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 800227a:	4413      	add	r3, r2
 800227c:	015b      	lsls	r3, r3, #5
 800227e:	18c2      	adds	r2, r0, r3
 8002280:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002284:	015b      	lsls	r3, r3, #5
 8002286:	440b      	add	r3, r1
 8002288:	4614      	mov	r4, r2
 800228a:	461d      	mov	r5, r3
 800228c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800228e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002290:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8002298:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 800229c:	3301      	adds	r3, #1
 800229e:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80022a2:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 80022a6:	2b04      	cmp	r3, #4
 80022a8:	ddcf      	ble.n	800224a <masked_pi_arithmetic+0x22>
    for (int x = 0; x < 5; ++x)
 80022aa:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80022ae:	3301      	adds	r3, #1
 80022b0:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80022b4:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 80022b8:	2b04      	cmp	r3, #4
 80022ba:	ddc2      	ble.n	8002242 <masked_pi_arithmetic+0x1a>

    for (int x = 0; x < 5; ++x)
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 80022c2:	e051      	b.n	8002368 <masked_pi_arithmetic+0x140>
        for (int y = 0; y < 5; ++y) {
 80022c4:	2300      	movs	r3, #0
 80022c6:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 80022ca:	e044      	b.n	8002356 <masked_pi_arithmetic+0x12e>
            int new_x = y;
 80022cc:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 80022d0:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;
 80022d4:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 80022d8:	0059      	lsls	r1, r3, #1
 80022da:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 80022de:	4613      	mov	r3, r2
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	4413      	add	r3, r2
 80022e4:	18ca      	adds	r2, r1, r3
 80022e6:	4b26      	ldr	r3, [pc, #152]	@ (8002380 <masked_pi_arithmetic+0x158>)
 80022e8:	fb83 1302 	smull	r1, r3, r3, r2
 80022ec:	1059      	asrs	r1, r3, #1
 80022ee:	17d3      	asrs	r3, r2, #31
 80022f0:	1ac9      	subs	r1, r1, r3
 80022f2:	460b      	mov	r3, r1
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	440b      	add	r3, r1
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];
 80022fe:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8002302:	4613      	mov	r3, r2
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	4413      	add	r3, r2
 8002308:	015b      	lsls	r3, r3, #5
 800230a:	461a      	mov	r2, r3
 800230c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002310:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	441a      	add	r2, r3
 8002318:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 800231c:	015b      	lsls	r3, r3, #5
 800231e:	18d0      	adds	r0, r2, r3
 8002320:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002324:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8002328:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 800232c:	4613      	mov	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4413      	add	r3, r2
 8002332:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8002336:	4413      	add	r3, r2
 8002338:	015b      	lsls	r3, r3, #5
 800233a:	440b      	add	r3, r1
 800233c:	4604      	mov	r4, r0
 800233e:	461d      	mov	r5, r3
 8002340:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002344:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002348:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 800234c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002350:	3301      	adds	r3, #1
 8002352:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8002356:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 800235a:	2b04      	cmp	r3, #4
 800235c:	ddb6      	ble.n	80022cc <masked_pi_arithmetic+0xa4>
    for (int x = 0; x < 5; ++x)
 800235e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002362:	3301      	adds	r3, #1
 8002364:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002368:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 800236c:	2b04      	cmp	r3, #4
 800236e:	dda9      	ble.n	80022c4 <masked_pi_arithmetic+0x9c>
        }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8002378:	46bd      	mov	sp, r7
 800237a:	bcb0      	pop	{r4, r5, r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	66666667 	.word	0x66666667

08002384 <masked_chi_arithmetic>:

void masked_chi_arithmetic(masked_uint64_t out[5][5], const masked_uint64_t in[5][5],
                           const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b09a      	sub	sp, #104	@ 0x68
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
    for (int y = 0; y < 5; y++) {
 8002390:	2300      	movs	r3, #0
 8002392:	667b      	str	r3, [r7, #100]	@ 0x64
 8002394:	e070      	b.n	8002478 <masked_chi_arithmetic+0xf4>
        for (int x = 0; x < 5; x++) {
 8002396:	2300      	movs	r3, #0
 8002398:	663b      	str	r3, [r7, #96]	@ 0x60
 800239a:	e067      	b.n	800246c <masked_chi_arithmetic+0xe8>
            const masked_uint64_t *a = &in[x][y];
 800239c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800239e:	4613      	mov	r3, r2
 80023a0:	009b      	lsls	r3, r3, #2
 80023a2:	4413      	add	r3, r2
 80023a4:	015b      	lsls	r3, r3, #5
 80023a6:	461a      	mov	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	441a      	add	r2, r3
 80023ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023ae:	015b      	lsls	r3, r3, #5
 80023b0:	4413      	add	r3, r2
 80023b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 80023b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023b6:	1c5a      	adds	r2, r3, #1
 80023b8:	4b33      	ldr	r3, [pc, #204]	@ (8002488 <masked_chi_arithmetic+0x104>)
 80023ba:	fb83 1302 	smull	r1, r3, r3, r2
 80023be:	1059      	asrs	r1, r3, #1
 80023c0:	17d3      	asrs	r3, r2, #31
 80023c2:	1ac9      	subs	r1, r1, r3
 80023c4:	460b      	mov	r3, r1
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	440b      	add	r3, r1
 80023ca:	1ad1      	subs	r1, r2, r3
 80023cc:	460a      	mov	r2, r1
 80023ce:	4613      	mov	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4413      	add	r3, r2
 80023d4:	015b      	lsls	r3, r3, #5
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	441a      	add	r2, r3
 80023dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	4413      	add	r3, r2
 80023e2:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 80023e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023e6:	1c9a      	adds	r2, r3, #2
 80023e8:	4b27      	ldr	r3, [pc, #156]	@ (8002488 <masked_chi_arithmetic+0x104>)
 80023ea:	fb83 1302 	smull	r1, r3, r3, r2
 80023ee:	1059      	asrs	r1, r3, #1
 80023f0:	17d3      	asrs	r3, r2, #31
 80023f2:	1ac9      	subs	r1, r1, r3
 80023f4:	460b      	mov	r3, r1
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	440b      	add	r3, r1
 80023fa:	1ad1      	subs	r1, r2, r3
 80023fc:	460a      	mov	r2, r1
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	015b      	lsls	r3, r3, #5
 8002406:	461a      	mov	r2, r3
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	441a      	add	r2, r3
 800240c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800240e:	015b      	lsls	r3, r3, #5
 8002410:	4413      	add	r3, r2
 8002412:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_neg_arithmetic(&t1, b);
 8002414:	f107 0310 	add.w	r3, r7, #16
 8002418:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff fb1c 	bl	8001a58 <masked_neg_arithmetic>
            masked_mul_arithmetic(&t2, &t1, c, r[x][y]);
 8002420:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002422:	4613      	mov	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	4413      	add	r3, r2
 8002428:	01db      	lsls	r3, r3, #7
 800242a:	461a      	mov	r2, r3
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	441a      	add	r2, r3
 8002430:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002432:	01db      	lsls	r3, r3, #7
 8002434:	4413      	add	r3, r2
 8002436:	f107 0110 	add.w	r1, r7, #16
 800243a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800243e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002440:	f7ff fa41 	bl	80018c6 <masked_mul_arithmetic>
            masked_add_arithmetic(&out[x][y], a, &t2);
 8002444:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	015b      	lsls	r3, r3, #5
 800244e:	461a      	mov	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	441a      	add	r2, r3
 8002454:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002456:	015b      	lsls	r3, r3, #5
 8002458:	4413      	add	r3, r2
 800245a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800245e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002460:	4618      	mov	r0, r3
 8002462:	f7ff fa06 	bl	8001872 <masked_add_arithmetic>
        for (int x = 0; x < 5; x++) {
 8002466:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002468:	3301      	adds	r3, #1
 800246a:	663b      	str	r3, [r7, #96]	@ 0x60
 800246c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800246e:	2b04      	cmp	r3, #4
 8002470:	dd94      	ble.n	800239c <masked_chi_arithmetic+0x18>
    for (int y = 0; y < 5; y++) {
 8002472:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002474:	3301      	adds	r3, #1
 8002476:	667b      	str	r3, [r7, #100]	@ 0x64
 8002478:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800247a:	2b04      	cmp	r3, #4
 800247c:	dd8b      	ble.n	8002396 <masked_chi_arithmetic+0x12>
        }
    }
}
 800247e:	bf00      	nop
 8002480:	bf00      	nop
 8002482:	3768      	adds	r7, #104	@ 0x68
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	66666667 	.word	0x66666667

0800248c <masked_iota_arithmetic>:

void masked_iota_arithmetic(masked_uint64_t state[5][5], uint64_t rc) {
 800248c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002490:	b08c      	sub	sp, #48	@ 0x30
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t value = 0;
 800249a:	f04f 0200 	mov.w	r2, #0
 800249e:	f04f 0300 	mov.w	r3, #0
 80024a2:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 80024a6:	2300      	movs	r3, #0
 80024a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80024aa:	e010      	b.n	80024ce <masked_iota_arithmetic+0x42>
        value += state[0][0].share[i];
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4413      	add	r3, r2
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024bc:	eb10 0a02 	adds.w	sl, r0, r2
 80024c0:	eb41 0b03 	adc.w	fp, r1, r3
 80024c4:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 80024c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ca:	3301      	adds	r3, #1
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	ddeb      	ble.n	80024ac <masked_iota_arithmetic+0x20>
    value += rc;
 80024d4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80024d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80024dc:	eb10 0802 	adds.w	r8, r0, r2
 80024e0:	eb41 0903 	adc.w	r9, r1, r3
 80024e4:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    uint64_t acc = value;
 80024e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 80024f0:	2301      	movs	r3, #1
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e019      	b.n	800252a <masked_iota_arithmetic+0x9e>
        state[0][0].share[i] = get_random64();
 80024f6:	f7fe f851 	bl	800059c <get_random64>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	6979      	ldr	r1, [r7, #20]
 8002502:	00c9      	lsls	r1, r1, #3
 8002504:	4401      	add	r1, r0
 8002506:	e9c1 2300 	strd	r2, r3, [r1]
        acc -= state[0][0].share[i];
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	4413      	add	r3, r2
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800251a:	1a84      	subs	r4, r0, r2
 800251c:	eb61 0503 	sbc.w	r5, r1, r3
 8002520:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	3301      	adds	r3, #1
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b03      	cmp	r3, #3
 800252e:	dde2      	ble.n	80024f6 <masked_iota_arithmetic+0x6a>
    }
    state[0][0].share[0] = acc;
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002536:	e9c1 2300 	strd	r2, r3, [r1]
}
 800253a:	bf00      	nop
 800253c:	3730      	adds	r7, #48	@ 0x30
 800253e:	46bd      	mov	sp, r7
 8002540:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b082      	sub	sp, #8
 8002548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	607b      	str	r3, [r7, #4]
 800254e:	4b10      	ldr	r3, [pc, #64]	@ (8002590 <HAL_MspInit+0x4c>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002552:	4a0f      	ldr	r2, [pc, #60]	@ (8002590 <HAL_MspInit+0x4c>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002558:	6453      	str	r3, [r2, #68]	@ 0x44
 800255a:	4b0d      	ldr	r3, [pc, #52]	@ (8002590 <HAL_MspInit+0x4c>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	2300      	movs	r3, #0
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <HAL_MspInit+0x4c>)
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	4a08      	ldr	r2, [pc, #32]	@ (8002590 <HAL_MspInit+0x4c>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002574:	6413      	str	r3, [r2, #64]	@ 0x40
 8002576:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <HAL_MspInit+0x4c>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257e:	603b      	str	r3, [r7, #0]
 8002580:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002582:	2007      	movs	r0, #7
 8002584:	f000 fc06 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002588:	bf00      	nop
 800258a:	3708      	adds	r7, #8
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	40023800 	.word	0x40023800

08002594 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	@ 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a19      	ldr	r2, [pc, #100]	@ (8002618 <HAL_I2C_MspInit+0x84>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d12c      	bne.n	8002610 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_I2C_MspInit+0x88>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025be:	4a17      	ldr	r2, [pc, #92]	@ (800261c <HAL_I2C_MspInit+0x88>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80025c6:	4b15      	ldr	r3, [pc, #84]	@ (800261c <HAL_I2C_MspInit+0x88>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80025d2:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80025d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80025d8:	2312      	movs	r3, #18
 80025da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025dc:	2301      	movs	r3, #1
 80025de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025e0:	2300      	movs	r3, #0
 80025e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80025e4:	2304      	movs	r3, #4
 80025e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025e8:	f107 0314 	add.w	r3, r7, #20
 80025ec:	4619      	mov	r1, r3
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <HAL_I2C_MspInit+0x8c>)
 80025f0:	f000 fc12 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025f4:	2300      	movs	r3, #0
 80025f6:	60fb      	str	r3, [r7, #12]
 80025f8:	4b08      	ldr	r3, [pc, #32]	@ (800261c <HAL_I2C_MspInit+0x88>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025fc:	4a07      	ldr	r2, [pc, #28]	@ (800261c <HAL_I2C_MspInit+0x88>)
 80025fe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002602:	6413      	str	r3, [r2, #64]	@ 0x40
 8002604:	4b05      	ldr	r3, [pc, #20]	@ (800261c <HAL_I2C_MspInit+0x88>)
 8002606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002608:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800260c:	60fb      	str	r3, [r7, #12]
 800260e:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002610:	bf00      	nop
 8002612:	3728      	adds	r7, #40	@ 0x28
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	40005400 	.word	0x40005400
 800261c:	40023800 	.word	0x40023800
 8002620:	40020400 	.word	0x40020400

08002624 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	@ 0x38
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800263c:	f107 0314 	add.w	r3, r7, #20
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a31      	ldr	r2, [pc, #196]	@ (8002714 <HAL_I2S_MspInit+0xf0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d15a      	bne.n	800270a <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002654:	2301      	movs	r3, #1
 8002656:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002658:	23c0      	movs	r3, #192	@ 0xc0
 800265a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800265c:	2302      	movs	r3, #2
 800265e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4618      	mov	r0, r3
 8002666:	f004 f93d 	bl	80068e4 <HAL_RCCEx_PeriphCLKConfig>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002670:	f7ff f8b6 	bl	80017e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002674:	2300      	movs	r3, #0
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	4b27      	ldr	r3, [pc, #156]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4a26      	ldr	r2, [pc, #152]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 800267e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002682:	6413      	str	r3, [r2, #64]	@ 0x40
 8002684:	4b24      	ldr	r3, [pc, #144]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 8002686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	4b20      	ldr	r3, [pc, #128]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 8002696:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002698:	4a1f      	ldr	r2, [pc, #124]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6313      	str	r3, [r2, #48]	@ 0x30
 80026a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 80026a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026ac:	2300      	movs	r3, #0
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 80026b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b4:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 80026b6:	f043 0304 	orr.w	r3, r3, #4
 80026ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80026bc:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_I2S_MspInit+0xf4>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	60bb      	str	r3, [r7, #8]
 80026c6:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80026c8:	2310      	movs	r3, #16
 80026ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026cc:	2302      	movs	r3, #2
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d0:	2300      	movs	r3, #0
 80026d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d4:	2300      	movs	r3, #0
 80026d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026d8:	2306      	movs	r3, #6
 80026da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80026dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026e0:	4619      	mov	r1, r3
 80026e2:	480e      	ldr	r0, [pc, #56]	@ (800271c <HAL_I2S_MspInit+0xf8>)
 80026e4:	f000 fb98 	bl	8002e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80026e8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80026ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f2:	2300      	movs	r3, #0
 80026f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f6:	2300      	movs	r3, #0
 80026f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80026fa:	2306      	movs	r3, #6
 80026fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002702:	4619      	mov	r1, r3
 8002704:	4806      	ldr	r0, [pc, #24]	@ (8002720 <HAL_I2S_MspInit+0xfc>)
 8002706:	f000 fb87 	bl	8002e18 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800270a:	bf00      	nop
 800270c:	3738      	adds	r7, #56	@ 0x38
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	40003c00 	.word	0x40003c00
 8002718:	40023800 	.word	0x40023800
 800271c:	40020000 	.word	0x40020000
 8002720:	40020800 	.word	0x40020800

08002724 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8002724:	b480      	push	{r7}
 8002726:	b085      	sub	sp, #20
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a0b      	ldr	r2, [pc, #44]	@ (8002760 <HAL_RNG_MspInit+0x3c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d10d      	bne.n	8002752 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	60fb      	str	r3, [r7, #12]
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_RNG_MspInit+0x40>)
 800273c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800273e:	4a09      	ldr	r2, [pc, #36]	@ (8002764 <HAL_RNG_MspInit+0x40>)
 8002740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002744:	6353      	str	r3, [r2, #52]	@ 0x34
 8002746:	4b07      	ldr	r3, [pc, #28]	@ (8002764 <HAL_RNG_MspInit+0x40>)
 8002748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002752:	bf00      	nop
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	50060800 	.word	0x50060800
 8002764:	40023800 	.word	0x40023800

08002768 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b08a      	sub	sp, #40	@ 0x28
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002770:	f107 0314 	add.w	r3, r7, #20
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	605a      	str	r2, [r3, #4]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	60da      	str	r2, [r3, #12]
 800277e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <HAL_SPI_MspInit+0x84>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d12b      	bne.n	80027e2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	613b      	str	r3, [r7, #16]
 800278e:	4b18      	ldr	r3, [pc, #96]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002792:	4a17      	ldr	r2, [pc, #92]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 8002794:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002798:	6453      	str	r3, [r2, #68]	@ 0x44
 800279a:	4b15      	ldr	r3, [pc, #84]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 800279c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a6:	2300      	movs	r3, #0
 80027a8:	60fb      	str	r3, [r7, #12]
 80027aa:	4b11      	ldr	r3, [pc, #68]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ae:	4a10      	ldr	r2, [pc, #64]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 80027b0:	f043 0301 	orr.w	r3, r3, #1
 80027b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b6:	4b0e      	ldr	r3, [pc, #56]	@ (80027f0 <HAL_SPI_MspInit+0x88>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	60fb      	str	r3, [r7, #12]
 80027c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80027c2:	23e0      	movs	r3, #224	@ 0xe0
 80027c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c6:	2302      	movs	r3, #2
 80027c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ca:	2300      	movs	r3, #0
 80027cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ce:	2300      	movs	r3, #0
 80027d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80027d2:	2305      	movs	r3, #5
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d6:	f107 0314 	add.w	r3, r7, #20
 80027da:	4619      	mov	r1, r3
 80027dc:	4805      	ldr	r0, [pc, #20]	@ (80027f4 <HAL_SPI_MspInit+0x8c>)
 80027de:	f000 fb1b 	bl	8002e18 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80027e2:	bf00      	nop
 80027e4:	3728      	adds	r7, #40	@ 0x28
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40013000 	.word	0x40013000
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020000 	.word	0x40020000

080027f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b08a      	sub	sp, #40	@ 0x28
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002800:	f107 0314 	add.w	r3, r7, #20
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a19      	ldr	r2, [pc, #100]	@ (800287c <HAL_UART_MspInit+0x84>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12b      	bne.n	8002872 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	4b18      	ldr	r3, [pc, #96]	@ (8002880 <HAL_UART_MspInit+0x88>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002822:	4a17      	ldr	r2, [pc, #92]	@ (8002880 <HAL_UART_MspInit+0x88>)
 8002824:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002828:	6413      	str	r3, [r2, #64]	@ 0x40
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <HAL_UART_MspInit+0x88>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002832:	613b      	str	r3, [r7, #16]
 8002834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60fb      	str	r3, [r7, #12]
 800283a:	4b11      	ldr	r3, [pc, #68]	@ (8002880 <HAL_UART_MspInit+0x88>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	4a10      	ldr	r2, [pc, #64]	@ (8002880 <HAL_UART_MspInit+0x88>)
 8002840:	f043 0301 	orr.w	r3, r3, #1
 8002844:	6313      	str	r3, [r2, #48]	@ 0x30
 8002846:	4b0e      	ldr	r3, [pc, #56]	@ (8002880 <HAL_UART_MspInit+0x88>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800284a:	f003 0301 	and.w	r3, r3, #1
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002852:	230c      	movs	r3, #12
 8002854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800285e:	2303      	movs	r3, #3
 8002860:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002862:	2307      	movs	r3, #7
 8002864:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	4619      	mov	r1, r3
 800286c:	4805      	ldr	r0, [pc, #20]	@ (8002884 <HAL_UART_MspInit+0x8c>)
 800286e:	f000 fad3 	bl	8002e18 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002872:	bf00      	nop
 8002874:	3728      	adds	r7, #40	@ 0x28
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40004400 	.word	0x40004400
 8002880:	40023800 	.word	0x40023800
 8002884:	40020000 	.word	0x40020000

08002888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800288c:	bf00      	nop
 800288e:	e7fd      	b.n	800288c <NMI_Handler+0x4>

08002890 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002894:	bf00      	nop
 8002896:	e7fd      	b.n	8002894 <HardFault_Handler+0x4>

08002898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800289c:	bf00      	nop
 800289e:	e7fd      	b.n	800289c <MemManage_Handler+0x4>

080028a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028a4:	bf00      	nop
 80028a6:	e7fd      	b.n	80028a4 <BusFault_Handler+0x4>

080028a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028ac:	bf00      	nop
 80028ae:	e7fd      	b.n	80028ac <UsageFault_Handler+0x4>

080028b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028b4:	bf00      	nop
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028be:	b480      	push	{r7}
 80028c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028c2:	bf00      	nop
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028d0:	bf00      	nop
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028da:	b580      	push	{r7, lr}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028de:	f000 f945 	bl	8002b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
	...

080028e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80028ec:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <OTG_FS_IRQHandler+0x10>)
 80028ee:	f000 ff29 	bl	8003744 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80028f2:	bf00      	nop
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	200005d4 	.word	0x200005d4

080028fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return 1;
 8002900:	2301      	movs	r3, #1
}
 8002902:	4618      	mov	r0, r3
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <_kill>:

int _kill(int pid, int sig)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002916:	f008 ff45 	bl	800b7a4 <__errno>
 800291a:	4603      	mov	r3, r0
 800291c:	2216      	movs	r2, #22
 800291e:	601a      	str	r2, [r3, #0]
  return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002924:	4618      	mov	r0, r3
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}

0800292c <_exit>:

void _exit (int status)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002934:	f04f 31ff 	mov.w	r1, #4294967295
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	f7ff ffe7 	bl	800290c <_kill>
  while (1) {}    /* Make sure we hang here */
 800293e:	bf00      	nop
 8002940:	e7fd      	b.n	800293e <_exit+0x12>

08002942 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	60b9      	str	r1, [r7, #8]
 800294c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800294e:	2300      	movs	r3, #0
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e00a      	b.n	800296a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002954:	f3af 8000 	nop.w
 8002958:	4601      	mov	r1, r0
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	1c5a      	adds	r2, r3, #1
 800295e:	60ba      	str	r2, [r7, #8]
 8002960:	b2ca      	uxtb	r2, r1
 8002962:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	3301      	adds	r3, #1
 8002968:	617b      	str	r3, [r7, #20]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	429a      	cmp	r2, r3
 8002970:	dbf0      	blt.n	8002954 <_read+0x12>
  }

  return len;
 8002972:	687b      	ldr	r3, [r7, #4]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3718      	adds	r7, #24
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <_close>:
  }
  return len;
}

int _close(int file)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002984:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002988:	4618      	mov	r0, r3
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr

08002994 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80029a4:	605a      	str	r2, [r3, #4]
  return 0;
 80029a6:	2300      	movs	r3, #0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <_isatty>:

int _isatty(int file)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029bc:	2301      	movs	r3, #1
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b085      	sub	sp, #20
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	60f8      	str	r0, [r7, #12]
 80029d2:	60b9      	str	r1, [r7, #8]
 80029d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	3714      	adds	r7, #20
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029ec:	4a14      	ldr	r2, [pc, #80]	@ (8002a40 <_sbrk+0x5c>)
 80029ee:	4b15      	ldr	r3, [pc, #84]	@ (8002a44 <_sbrk+0x60>)
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <_sbrk+0x64>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a00:	4b11      	ldr	r3, [pc, #68]	@ (8002a48 <_sbrk+0x64>)
 8002a02:	4a12      	ldr	r2, [pc, #72]	@ (8002a4c <_sbrk+0x68>)
 8002a04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a06:	4b10      	ldr	r3, [pc, #64]	@ (8002a48 <_sbrk+0x64>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d207      	bcs.n	8002a24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a14:	f008 fec6 	bl	800b7a4 <__errno>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	220c      	movs	r2, #12
 8002a1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e009      	b.n	8002a38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a24:	4b08      	ldr	r3, [pc, #32]	@ (8002a48 <_sbrk+0x64>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2a:	4b07      	ldr	r3, [pc, #28]	@ (8002a48 <_sbrk+0x64>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4413      	add	r3, r2
 8002a32:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <_sbrk+0x64>)
 8002a34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a36:	68fb      	ldr	r3, [r7, #12]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}
 8002a40:	20020000 	.word	0x20020000
 8002a44:	00000400 	.word	0x00000400
 8002a48:	200001f0 	.word	0x200001f0
 8002a4c:	20000b00 	.word	0x20000b00

08002a50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a54:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <SystemInit+0x20>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a5a:	4a05      	ldr	r2, [pc, #20]	@ (8002a70 <SystemInit+0x20>)
 8002a5c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a60:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002a74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002aac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a78:	f7ff ffea 	bl	8002a50 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a7c:	480c      	ldr	r0, [pc, #48]	@ (8002ab0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a7e:	490d      	ldr	r1, [pc, #52]	@ (8002ab4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a80:	4a0d      	ldr	r2, [pc, #52]	@ (8002ab8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a84:	e002      	b.n	8002a8c <LoopCopyDataInit>

08002a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a8a:	3304      	adds	r3, #4

08002a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a90:	d3f9      	bcc.n	8002a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a92:	4a0a      	ldr	r2, [pc, #40]	@ (8002abc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a94:	4c0a      	ldr	r4, [pc, #40]	@ (8002ac0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a98:	e001      	b.n	8002a9e <LoopFillZerobss>

08002a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a9c:	3204      	adds	r2, #4

08002a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aa0:	d3fb      	bcc.n	8002a9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002aa2:	f008 fe85 	bl	800b7b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002aa6:	f7fe fc27 	bl	80012f8 <main>
  bx  lr    
 8002aaa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002aac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ab4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002ab8:	0800c80c 	.word	0x0800c80c
  ldr r2, =_sbss
 8002abc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002ac0:	20000b00 	.word	0x20000b00

08002ac4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002ac4:	e7fe      	b.n	8002ac4 <ADC_IRQHandler>
	...

08002ac8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002acc:	4b0e      	ldr	r3, [pc, #56]	@ (8002b08 <HAL_Init+0x40>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8002b08 <HAL_Init+0x40>)
 8002ad2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_Init+0x40>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a0a      	ldr	r2, [pc, #40]	@ (8002b08 <HAL_Init+0x40>)
 8002ade:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ae2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae4:	4b08      	ldr	r3, [pc, #32]	@ (8002b08 <HAL_Init+0x40>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a07      	ldr	r2, [pc, #28]	@ (8002b08 <HAL_Init+0x40>)
 8002aea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002af0:	2003      	movs	r0, #3
 8002af2:	f000 f94f 	bl	8002d94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af6:	2000      	movs	r0, #0
 8002af8:	f000 f808 	bl	8002b0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002afc:	f7ff fd22 	bl	8002544 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	40023c00 	.word	0x40023c00

08002b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b14:	4b12      	ldr	r3, [pc, #72]	@ (8002b60 <HAL_InitTick+0x54>)
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	4b12      	ldr	r3, [pc, #72]	@ (8002b64 <HAL_InitTick+0x58>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b22:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f000 f967 	bl	8002dfe <HAL_SYSTICK_Config>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e00e      	b.n	8002b58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b0f      	cmp	r3, #15
 8002b3e:	d80a      	bhi.n	8002b56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b40:	2200      	movs	r2, #0
 8002b42:	6879      	ldr	r1, [r7, #4]
 8002b44:	f04f 30ff 	mov.w	r0, #4294967295
 8002b48:	f000 f92f 	bl	8002daa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b4c:	4a06      	ldr	r2, [pc, #24]	@ (8002b68 <HAL_InitTick+0x5c>)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b52:	2300      	movs	r3, #0
 8002b54:	e000      	b.n	8002b58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	20000000 	.word	0x20000000
 8002b64:	20000008 	.word	0x20000008
 8002b68:	20000004 	.word	0x20000004

08002b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b70:	4b06      	ldr	r3, [pc, #24]	@ (8002b8c <HAL_IncTick+0x20>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	461a      	mov	r2, r3
 8002b76:	4b06      	ldr	r3, [pc, #24]	@ (8002b90 <HAL_IncTick+0x24>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a04      	ldr	r2, [pc, #16]	@ (8002b90 <HAL_IncTick+0x24>)
 8002b7e:	6013      	str	r3, [r2, #0]
}
 8002b80:	bf00      	nop
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	20000008 	.word	0x20000008
 8002b90:	200001f4 	.word	0x200001f4

08002b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return uwTick;
 8002b98:	4b03      	ldr	r3, [pc, #12]	@ (8002ba8 <HAL_GetTick+0x14>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200001f4 	.word	0x200001f4

08002bac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bb4:	f7ff ffee 	bl	8002b94 <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bc4:	d005      	beq.n	8002bd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf0 <HAL_Delay+0x44>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4413      	add	r3, r2
 8002bd0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002bd2:	bf00      	nop
 8002bd4:	f7ff ffde 	bl	8002b94 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d8f7      	bhi.n	8002bd4 <HAL_Delay+0x28>
  {
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3710      	adds	r7, #16
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	20000008 	.word	0x20000008

08002bf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f003 0307 	and.w	r3, r3, #7
 8002c02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c10:	4013      	ands	r3, r2
 8002c12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c26:	4a04      	ldr	r2, [pc, #16]	@ (8002c38 <__NVIC_SetPriorityGrouping+0x44>)
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	60d3      	str	r3, [r2, #12]
}
 8002c2c:	bf00      	nop
 8002c2e:	3714      	adds	r7, #20
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c40:	4b04      	ldr	r3, [pc, #16]	@ (8002c54 <__NVIC_GetPriorityGrouping+0x18>)
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	0a1b      	lsrs	r3, r3, #8
 8002c46:	f003 0307 	and.w	r3, r3, #7
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr
 8002c54:	e000ed00 	.word	0xe000ed00

08002c58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	4603      	mov	r3, r0
 8002c60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	db0b      	blt.n	8002c82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c6a:	79fb      	ldrb	r3, [r7, #7]
 8002c6c:	f003 021f 	and.w	r2, r3, #31
 8002c70:	4907      	ldr	r1, [pc, #28]	@ (8002c90 <__NVIC_EnableIRQ+0x38>)
 8002c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c76:	095b      	lsrs	r3, r3, #5
 8002c78:	2001      	movs	r0, #1
 8002c7a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c82:	bf00      	nop
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	e000e100 	.word	0xe000e100

08002c94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	6039      	str	r1, [r7, #0]
 8002c9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	db0a      	blt.n	8002cbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	b2da      	uxtb	r2, r3
 8002cac:	490c      	ldr	r1, [pc, #48]	@ (8002ce0 <__NVIC_SetPriority+0x4c>)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	0112      	lsls	r2, r2, #4
 8002cb4:	b2d2      	uxtb	r2, r2
 8002cb6:	440b      	add	r3, r1
 8002cb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cbc:	e00a      	b.n	8002cd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	4908      	ldr	r1, [pc, #32]	@ (8002ce4 <__NVIC_SetPriority+0x50>)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	3b04      	subs	r3, #4
 8002ccc:	0112      	lsls	r2, r2, #4
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	761a      	strb	r2, [r3, #24]
}
 8002cd4:	bf00      	nop
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000e100 	.word	0xe000e100
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b089      	sub	sp, #36	@ 0x24
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	60f8      	str	r0, [r7, #12]
 8002cf0:	60b9      	str	r1, [r7, #8]
 8002cf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	f1c3 0307 	rsb	r3, r3, #7
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	bf28      	it	cs
 8002d06:	2304      	movcs	r3, #4
 8002d08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	2b06      	cmp	r3, #6
 8002d10:	d902      	bls.n	8002d18 <NVIC_EncodePriority+0x30>
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	3b03      	subs	r3, #3
 8002d16:	e000      	b.n	8002d1a <NVIC_EncodePriority+0x32>
 8002d18:	2300      	movs	r3, #0
 8002d1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	68bb      	ldr	r3, [r7, #8]
 8002d2a:	401a      	ands	r2, r3
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d30:	f04f 31ff 	mov.w	r1, #4294967295
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	fa01 f303 	lsl.w	r3, r1, r3
 8002d3a:	43d9      	mvns	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d40:	4313      	orrs	r3, r2
         );
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3724      	adds	r7, #36	@ 0x24
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
	...

08002d50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d60:	d301      	bcc.n	8002d66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00f      	b.n	8002d86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d66:	4a0a      	ldr	r2, [pc, #40]	@ (8002d90 <SysTick_Config+0x40>)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f04f 30ff 	mov.w	r0, #4294967295
 8002d74:	f7ff ff8e 	bl	8002c94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <SysTick_Config+0x40>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7e:	4b04      	ldr	r3, [pc, #16]	@ (8002d90 <SysTick_Config+0x40>)
 8002d80:	2207      	movs	r2, #7
 8002d82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	e000e010 	.word	0xe000e010

08002d94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7ff ff29 	bl	8002bf4 <__NVIC_SetPriorityGrouping>
}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b086      	sub	sp, #24
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
 8002db6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dbc:	f7ff ff3e 	bl	8002c3c <__NVIC_GetPriorityGrouping>
 8002dc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	68b9      	ldr	r1, [r7, #8]
 8002dc6:	6978      	ldr	r0, [r7, #20]
 8002dc8:	f7ff ff8e 	bl	8002ce8 <NVIC_EncodePriority>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dd2:	4611      	mov	r1, r2
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff5d 	bl	8002c94 <__NVIC_SetPriority>
}
 8002dda:	bf00      	nop
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b082      	sub	sp, #8
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4603      	mov	r3, r0
 8002dea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7ff ff31 	bl	8002c58 <__NVIC_EnableIRQ>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff ffa2 	bl	8002d50 <SysTick_Config>
 8002e0c:	4603      	mov	r3, r0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
 8002e32:	e16b      	b.n	800310c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e34:	2201      	movs	r2, #1
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	4013      	ands	r3, r2
 8002e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f040 815a 	bne.w	8003106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f003 0303 	and.w	r3, r3, #3
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d130      	bne.n	8002ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	005b      	lsls	r3, r3, #1
 8002e74:	2203      	movs	r2, #3
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	69ba      	ldr	r2, [r7, #24]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	69ba      	ldr	r2, [r7, #24]
 8002eac:	4013      	ands	r3, r2
 8002eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	091b      	lsrs	r3, r3, #4
 8002eb6:	f003 0201 	and.w	r2, r3, #1
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b03      	cmp	r3, #3
 8002ed6:	d017      	beq.n	8002f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	2203      	movs	r2, #3
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	005b      	lsls	r3, r3, #1
 8002ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f003 0303 	and.w	r3, r3, #3
 8002f10:	2b02      	cmp	r3, #2
 8002f12:	d123      	bne.n	8002f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	08da      	lsrs	r2, r3, #3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3208      	adds	r2, #8
 8002f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f22:	69fb      	ldr	r3, [r7, #28]
 8002f24:	f003 0307 	and.w	r3, r3, #7
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	220f      	movs	r2, #15
 8002f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f30:	43db      	mvns	r3, r3
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	4013      	ands	r3, r2
 8002f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	691a      	ldr	r2, [r3, #16]
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	f003 0307 	and.w	r3, r3, #7
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	69ba      	ldr	r2, [r7, #24]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	08da      	lsrs	r2, r3, #3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	3208      	adds	r2, #8
 8002f56:	69b9      	ldr	r1, [r7, #24]
 8002f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	005b      	lsls	r3, r3, #1
 8002f66:	2203      	movs	r2, #3
 8002f68:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6c:	43db      	mvns	r3, r3
 8002f6e:	69ba      	ldr	r2, [r7, #24]
 8002f70:	4013      	ands	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f003 0203 	and.w	r2, r3, #3
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80b4 	beq.w	8003106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b60      	ldr	r3, [pc, #384]	@ (8003124 <HAL_GPIO_Init+0x30c>)
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8003124 <HAL_GPIO_Init+0x30c>)
 8002fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002fae:	4b5d      	ldr	r3, [pc, #372]	@ (8003124 <HAL_GPIO_Init+0x30c>)
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fba:	4a5b      	ldr	r2, [pc, #364]	@ (8003128 <HAL_GPIO_Init+0x310>)
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	089b      	lsrs	r3, r3, #2
 8002fc0:	3302      	adds	r3, #2
 8002fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002fc8:	69fb      	ldr	r3, [r7, #28]
 8002fca:	f003 0303 	and.w	r3, r3, #3
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	220f      	movs	r2, #15
 8002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	4013      	ands	r3, r2
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a52      	ldr	r2, [pc, #328]	@ (800312c <HAL_GPIO_Init+0x314>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d02b      	beq.n	800303e <HAL_GPIO_Init+0x226>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a51      	ldr	r2, [pc, #324]	@ (8003130 <HAL_GPIO_Init+0x318>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d025      	beq.n	800303a <HAL_GPIO_Init+0x222>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a50      	ldr	r2, [pc, #320]	@ (8003134 <HAL_GPIO_Init+0x31c>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d01f      	beq.n	8003036 <HAL_GPIO_Init+0x21e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8003138 <HAL_GPIO_Init+0x320>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d019      	beq.n	8003032 <HAL_GPIO_Init+0x21a>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4e      	ldr	r2, [pc, #312]	@ (800313c <HAL_GPIO_Init+0x324>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d013      	beq.n	800302e <HAL_GPIO_Init+0x216>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	4a4d      	ldr	r2, [pc, #308]	@ (8003140 <HAL_GPIO_Init+0x328>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d00d      	beq.n	800302a <HAL_GPIO_Init+0x212>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	4a4c      	ldr	r2, [pc, #304]	@ (8003144 <HAL_GPIO_Init+0x32c>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d007      	beq.n	8003026 <HAL_GPIO_Init+0x20e>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	4a4b      	ldr	r2, [pc, #300]	@ (8003148 <HAL_GPIO_Init+0x330>)
 800301a:	4293      	cmp	r3, r2
 800301c:	d101      	bne.n	8003022 <HAL_GPIO_Init+0x20a>
 800301e:	2307      	movs	r3, #7
 8003020:	e00e      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003022:	2308      	movs	r3, #8
 8003024:	e00c      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003026:	2306      	movs	r3, #6
 8003028:	e00a      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800302a:	2305      	movs	r3, #5
 800302c:	e008      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800302e:	2304      	movs	r3, #4
 8003030:	e006      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003032:	2303      	movs	r3, #3
 8003034:	e004      	b.n	8003040 <HAL_GPIO_Init+0x228>
 8003036:	2302      	movs	r3, #2
 8003038:	e002      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <HAL_GPIO_Init+0x228>
 800303e:	2300      	movs	r3, #0
 8003040:	69fa      	ldr	r2, [r7, #28]
 8003042:	f002 0203 	and.w	r2, r2, #3
 8003046:	0092      	lsls	r2, r2, #2
 8003048:	4093      	lsls	r3, r2
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	4313      	orrs	r3, r2
 800304e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003050:	4935      	ldr	r1, [pc, #212]	@ (8003128 <HAL_GPIO_Init+0x310>)
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	089b      	lsrs	r3, r3, #2
 8003056:	3302      	adds	r3, #2
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800305e:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_GPIO_Init+0x334>)
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d003      	beq.n	8003082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003082:	4a32      	ldr	r2, [pc, #200]	@ (800314c <HAL_GPIO_Init+0x334>)
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003088:	4b30      	ldr	r3, [pc, #192]	@ (800314c <HAL_GPIO_Init+0x334>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030ac:	4a27      	ldr	r2, [pc, #156]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030b2:	4b26      	ldr	r3, [pc, #152]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	43db      	mvns	r3, r3
 80030bc:	69ba      	ldr	r2, [r7, #24]
 80030be:	4013      	ands	r3, r2
 80030c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d003      	beq.n	80030d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030d6:	4a1d      	ldr	r2, [pc, #116]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030dc:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_GPIO_Init+0x334>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685b      	ldr	r3, [r3, #4]
 80030f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003100:	4a12      	ldr	r2, [pc, #72]	@ (800314c <HAL_GPIO_Init+0x334>)
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	3301      	adds	r3, #1
 800310a:	61fb      	str	r3, [r7, #28]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	2b0f      	cmp	r3, #15
 8003110:	f67f ae90 	bls.w	8002e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003114:	bf00      	nop
 8003116:	bf00      	nop
 8003118:	3724      	adds	r7, #36	@ 0x24
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	40023800 	.word	0x40023800
 8003128:	40013800 	.word	0x40013800
 800312c:	40020000 	.word	0x40020000
 8003130:	40020400 	.word	0x40020400
 8003134:	40020800 	.word	0x40020800
 8003138:	40020c00 	.word	0x40020c00
 800313c:	40021000 	.word	0x40021000
 8003140:	40021400 	.word	0x40021400
 8003144:	40021800 	.word	0x40021800
 8003148:	40021c00 	.word	0x40021c00
 800314c:	40013c00 	.word	0x40013c00

08003150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
 8003158:	460b      	mov	r3, r1
 800315a:	807b      	strh	r3, [r7, #2]
 800315c:	4613      	mov	r3, r2
 800315e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003160:	787b      	ldrb	r3, [r7, #1]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d003      	beq.n	800316e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800316c:	e003      	b.n	8003176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800316e:	887b      	ldrh	r3, [r7, #2]
 8003170:	041a      	lsls	r2, r3, #16
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	619a      	str	r2, [r3, #24]
}
 8003176:	bf00      	nop
 8003178:	370c      	adds	r7, #12
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b086      	sub	sp, #24
 8003186:	af02      	add	r7, sp, #8
 8003188:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e059      	b.n	8003248 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f007 fc3a 	bl	800aa28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2203      	movs	r2, #3
 80031b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80031c2:	d102      	bne.n	80031ca <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 fa53 	bl	800767a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6818      	ldr	r0, [r3, #0]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	7c1a      	ldrb	r2, [r3, #16]
 80031dc:	f88d 2000 	strb.w	r2, [sp]
 80031e0:	3304      	adds	r3, #4
 80031e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031e4:	f004 f9d4 	bl	8007590 <USB_CoreInit>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d005      	beq.n	80031fa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2202      	movs	r2, #2
 80031f2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e026      	b.n	8003248 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2101      	movs	r1, #1
 8003200:	4618      	mov	r0, r3
 8003202:	f004 fa4b 	bl	800769c <USB_SetCurrentMode>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d005      	beq.n	8003218 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e017      	b.n	8003248 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6818      	ldr	r0, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7c1a      	ldrb	r2, [r3, #16]
 8003220:	f88d 2000 	strb.w	r2, [sp]
 8003224:	3304      	adds	r3, #4
 8003226:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003228:	f004 fbee 	bl	8007a08 <USB_HostInit>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d005      	beq.n	800323e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2202      	movs	r2, #2
 8003236:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e004      	b.n	8003248 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	3710      	adds	r7, #16
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003250:	b590      	push	{r4, r7, lr}
 8003252:	b08b      	sub	sp, #44	@ 0x2c
 8003254:	af04      	add	r7, sp, #16
 8003256:	6078      	str	r0, [r7, #4]
 8003258:	4608      	mov	r0, r1
 800325a:	4611      	mov	r1, r2
 800325c:	461a      	mov	r2, r3
 800325e:	4603      	mov	r3, r0
 8003260:	70fb      	strb	r3, [r7, #3]
 8003262:	460b      	mov	r3, r1
 8003264:	70bb      	strb	r3, [r7, #2]
 8003266:	4613      	mov	r3, r2
 8003268:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800326a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800326c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003274:	2b01      	cmp	r3, #1
 8003276:	d101      	bne.n	800327c <HAL_HCD_HC_Init+0x2c>
 8003278:	2302      	movs	r3, #2
 800327a:	e09d      	b.n	80033b8 <HAL_HCD_HC_Init+0x168>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003284:	78fa      	ldrb	r2, [r7, #3]
 8003286:	6879      	ldr	r1, [r7, #4]
 8003288:	4613      	mov	r3, r2
 800328a:	011b      	lsls	r3, r3, #4
 800328c:	1a9b      	subs	r3, r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	440b      	add	r3, r1
 8003292:	3319      	adds	r3, #25
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	6879      	ldr	r1, [r7, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3314      	adds	r3, #20
 80032a8:	787a      	ldrb	r2, [r7, #1]
 80032aa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3315      	adds	r3, #21
 80032bc:	78fa      	ldrb	r2, [r7, #3]
 80032be:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	3326      	adds	r3, #38	@ 0x26
 80032d0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80032d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	78bb      	ldrb	r3, [r7, #2]
 80032da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032de:	b2d8      	uxtb	r0, r3
 80032e0:	6879      	ldr	r1, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	1a9b      	subs	r3, r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	3316      	adds	r3, #22
 80032ee:	4602      	mov	r2, r0
 80032f0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80032f2:	78fb      	ldrb	r3, [r7, #3]
 80032f4:	4619      	mov	r1, r3
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	f000 fbc8 	bl	8003a8c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80032fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003300:	2b00      	cmp	r3, #0
 8003302:	da0a      	bge.n	800331a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003304:	78fa      	ldrb	r2, [r7, #3]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3317      	adds	r3, #23
 8003314:	2201      	movs	r2, #1
 8003316:	701a      	strb	r2, [r3, #0]
 8003318:	e009      	b.n	800332e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800331a:	78fa      	ldrb	r2, [r7, #3]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4613      	mov	r3, r2
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	1a9b      	subs	r3, r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	440b      	add	r3, r1
 8003328:	3317      	adds	r3, #23
 800332a:	2200      	movs	r2, #0
 800332c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f004 fccc 	bl	8007cd0 <USB_GetHostSpeed>
 8003338:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800333a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800333e:	2b01      	cmp	r3, #1
 8003340:	d10b      	bne.n	800335a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003342:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003346:	2b01      	cmp	r3, #1
 8003348:	d107      	bne.n	800335a <HAL_HCD_HC_Init+0x10a>
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d104      	bne.n	800335a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003350:	697b      	ldr	r3, [r7, #20]
 8003352:	2bbc      	cmp	r3, #188	@ 0xbc
 8003354:	d901      	bls.n	800335a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003356:	23bc      	movs	r3, #188	@ 0xbc
 8003358:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3318      	adds	r3, #24
 800336a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800336e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	b298      	uxth	r0, r3
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	3328      	adds	r3, #40	@ 0x28
 8003384:	4602      	mov	r2, r0
 8003386:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6818      	ldr	r0, [r3, #0]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	b29b      	uxth	r3, r3
 8003390:	787c      	ldrb	r4, [r7, #1]
 8003392:	78ba      	ldrb	r2, [r7, #2]
 8003394:	78f9      	ldrb	r1, [r7, #3]
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800339c:	9301      	str	r3, [sp, #4]
 800339e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	4623      	mov	r3, r4
 80033a6:	f004 fcbb 	bl	8007d20 <USB_HC_Init>
 80033aa:	4603      	mov	r3, r0
 80033ac:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2200      	movs	r2, #0
 80033b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80033b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	371c      	adds	r7, #28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd90      	pop	{r4, r7, pc}

080033c0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	460b      	mov	r3, r1
 80033ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_HCD_HC_Halt+0x1e>
 80033da:	2302      	movs	r3, #2
 80033dc:	e00f      	b.n	80033fe <HAL_HCD_HC_Halt+0x3e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	78fa      	ldrb	r2, [r7, #3]
 80033ec:	4611      	mov	r1, r2
 80033ee:	4618      	mov	r0, r3
 80033f0:	f005 f84d 	bl	800848e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033fe:	4618      	mov	r0, r3
 8003400:	3710      	adds	r7, #16
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}
	...

08003408 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	461a      	mov	r2, r3
 8003416:	4603      	mov	r3, r0
 8003418:	70fb      	strb	r3, [r7, #3]
 800341a:	460b      	mov	r3, r1
 800341c:	70bb      	strb	r3, [r7, #2]
 800341e:	4613      	mov	r3, r2
 8003420:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003422:	78fa      	ldrb	r2, [r7, #3]
 8003424:	6879      	ldr	r1, [r7, #4]
 8003426:	4613      	mov	r3, r2
 8003428:	011b      	lsls	r3, r3, #4
 800342a:	1a9b      	subs	r3, r3, r2
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	440b      	add	r3, r1
 8003430:	3317      	adds	r3, #23
 8003432:	78ba      	ldrb	r2, [r7, #2]
 8003434:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	6879      	ldr	r1, [r7, #4]
 800343a:	4613      	mov	r3, r2
 800343c:	011b      	lsls	r3, r3, #4
 800343e:	1a9b      	subs	r3, r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3326      	adds	r3, #38	@ 0x26
 8003446:	787a      	ldrb	r2, [r7, #1]
 8003448:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800344a:	7c3b      	ldrb	r3, [r7, #16]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d114      	bne.n	800347a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	332a      	adds	r3, #42	@ 0x2a
 8003460:	2203      	movs	r2, #3
 8003462:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3319      	adds	r3, #25
 8003474:	7f3a      	ldrb	r2, [r7, #28]
 8003476:	701a      	strb	r2, [r3, #0]
 8003478:	e009      	b.n	800348e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	332a      	adds	r3, #42	@ 0x2a
 800348a:	2202      	movs	r2, #2
 800348c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800348e:	787b      	ldrb	r3, [r7, #1]
 8003490:	2b03      	cmp	r3, #3
 8003492:	f200 8102 	bhi.w	800369a <HAL_HCD_HC_SubmitRequest+0x292>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_HCD_HC_SubmitRequest+0x94>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034ad 	.word	0x080034ad
 80034a0:	08003685 	.word	0x08003685
 80034a4:	08003571 	.word	0x08003571
 80034a8:	080035fb 	.word	0x080035fb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80034ac:	7c3b      	ldrb	r3, [r7, #16]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	f040 80f5 	bne.w	800369e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80034b4:	78bb      	ldrb	r3, [r7, #2]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d12d      	bne.n	8003516 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80034ba:	8b3b      	ldrh	r3, [r7, #24]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	011b      	lsls	r3, r3, #4
 80034c8:	1a9b      	subs	r3, r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	440b      	add	r3, r1
 80034ce:	333d      	adds	r3, #61	@ 0x3d
 80034d0:	2201      	movs	r2, #1
 80034d2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	333d      	adds	r3, #61	@ 0x3d
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10a      	bne.n	8003500 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	332a      	adds	r3, #42	@ 0x2a
 80034fa:	2200      	movs	r2, #0
 80034fc:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80034fe:	e0ce      	b.n	800369e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	332a      	adds	r3, #42	@ 0x2a
 8003510:	2202      	movs	r2, #2
 8003512:	701a      	strb	r2, [r3, #0]
      break;
 8003514:	e0c3      	b.n	800369e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	4613      	mov	r3, r2
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	440b      	add	r3, r1
 8003524:	331a      	adds	r3, #26
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 80b8 	bne.w	800369e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800352e:	78fa      	ldrb	r2, [r7, #3]
 8003530:	6879      	ldr	r1, [r7, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	011b      	lsls	r3, r3, #4
 8003536:	1a9b      	subs	r3, r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	333c      	adds	r3, #60	@ 0x3c
 800353e:	781b      	ldrb	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	332a      	adds	r3, #42	@ 0x2a
 8003554:	2200      	movs	r2, #0
 8003556:	701a      	strb	r2, [r3, #0]
      break;
 8003558:	e0a1      	b.n	800369e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800355a:	78fa      	ldrb	r2, [r7, #3]
 800355c:	6879      	ldr	r1, [r7, #4]
 800355e:	4613      	mov	r3, r2
 8003560:	011b      	lsls	r3, r3, #4
 8003562:	1a9b      	subs	r3, r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	332a      	adds	r3, #42	@ 0x2a
 800356a:	2202      	movs	r2, #2
 800356c:	701a      	strb	r2, [r3, #0]
      break;
 800356e:	e096      	b.n	800369e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003570:	78bb      	ldrb	r3, [r7, #2]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d120      	bne.n	80035b8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003576:	78fa      	ldrb	r2, [r7, #3]
 8003578:	6879      	ldr	r1, [r7, #4]
 800357a:	4613      	mov	r3, r2
 800357c:	011b      	lsls	r3, r3, #4
 800357e:	1a9b      	subs	r3, r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	440b      	add	r3, r1
 8003584:	333d      	adds	r3, #61	@ 0x3d
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10a      	bne.n	80035a2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	332a      	adds	r3, #42	@ 0x2a
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80035a0:	e07e      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	332a      	adds	r3, #42	@ 0x2a
 80035b2:	2202      	movs	r2, #2
 80035b4:	701a      	strb	r2, [r3, #0]
      break;
 80035b6:	e073      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	333c      	adds	r3, #60	@ 0x3c
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10a      	bne.n	80035e4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	332a      	adds	r3, #42	@ 0x2a
 80035de:	2200      	movs	r2, #0
 80035e0:	701a      	strb	r2, [r3, #0]
      break;
 80035e2:	e05d      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035e4:	78fa      	ldrb	r2, [r7, #3]
 80035e6:	6879      	ldr	r1, [r7, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	011b      	lsls	r3, r3, #4
 80035ec:	1a9b      	subs	r3, r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	440b      	add	r3, r1
 80035f2:	332a      	adds	r3, #42	@ 0x2a
 80035f4:	2202      	movs	r2, #2
 80035f6:	701a      	strb	r2, [r3, #0]
      break;
 80035f8:	e052      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80035fa:	78bb      	ldrb	r3, [r7, #2]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d120      	bne.n	8003642 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003600:	78fa      	ldrb	r2, [r7, #3]
 8003602:	6879      	ldr	r1, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	1a9b      	subs	r3, r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	440b      	add	r3, r1
 800360e:	333d      	adds	r3, #61	@ 0x3d
 8003610:	781b      	ldrb	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10a      	bne.n	800362c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	6879      	ldr	r1, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	011b      	lsls	r3, r3, #4
 800361e:	1a9b      	subs	r3, r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	440b      	add	r3, r1
 8003624:	332a      	adds	r3, #42	@ 0x2a
 8003626:	2200      	movs	r2, #0
 8003628:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800362a:	e039      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	332a      	adds	r3, #42	@ 0x2a
 800363c:	2202      	movs	r2, #2
 800363e:	701a      	strb	r2, [r3, #0]
      break;
 8003640:	e02e      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	333c      	adds	r3, #60	@ 0x3c
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10a      	bne.n	800366e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	332a      	adds	r3, #42	@ 0x2a
 8003668:	2200      	movs	r2, #0
 800366a:	701a      	strb	r2, [r3, #0]
      break;
 800366c:	e018      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	332a      	adds	r3, #42	@ 0x2a
 800367e:	2202      	movs	r2, #2
 8003680:	701a      	strb	r2, [r3, #0]
      break;
 8003682:	e00d      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	6879      	ldr	r1, [r7, #4]
 8003688:	4613      	mov	r3, r2
 800368a:	011b      	lsls	r3, r3, #4
 800368c:	1a9b      	subs	r3, r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	440b      	add	r3, r1
 8003692:	332a      	adds	r3, #42	@ 0x2a
 8003694:	2200      	movs	r2, #0
 8003696:	701a      	strb	r2, [r3, #0]
      break;
 8003698:	e002      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800369a:	bf00      	nop
 800369c:	e000      	b.n	80036a0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800369e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	332c      	adds	r3, #44	@ 0x2c
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	8b39      	ldrh	r1, [r7, #24]
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	011b      	lsls	r3, r3, #4
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4403      	add	r3, r0
 80036c4:	3334      	adds	r3, #52	@ 0x34
 80036c6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80036c8:	78fa      	ldrb	r2, [r7, #3]
 80036ca:	6879      	ldr	r1, [r7, #4]
 80036cc:	4613      	mov	r3, r2
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	1a9b      	subs	r3, r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	440b      	add	r3, r1
 80036d6:	334c      	adds	r3, #76	@ 0x4c
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3338      	adds	r3, #56	@ 0x38
 80036ec:	2200      	movs	r2, #0
 80036ee:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3315      	adds	r3, #21
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	334d      	adds	r3, #77	@ 0x4d
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6818      	ldr	r0, [r3, #0]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	4613      	mov	r3, r2
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	009b      	lsls	r3, r3, #2
 8003726:	3310      	adds	r3, #16
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	4413      	add	r3, r2
 800372c:	1d19      	adds	r1, r3, #4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	799b      	ldrb	r3, [r3, #6]
 8003732:	461a      	mov	r2, r3
 8003734:	f004 fc20 	bl	8007f78 <USB_HC_StartXfer>
 8003738:	4603      	mov	r3, r0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop

08003744 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b086      	sub	sp, #24
 8003748:	af00      	add	r7, sp, #0
 800374a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f914 	bl	8007988 <USB_GetMode>
 8003760:	4603      	mov	r3, r0
 8003762:	2b01      	cmp	r3, #1
 8003764:	f040 80fb 	bne.w	800395e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f8d7 	bl	8007920 <USB_ReadInterrupts>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 80f1 	beq.w	800395c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f004 f8ce 	bl	8007920 <USB_ReadInterrupts>
 8003784:	4603      	mov	r3, r0
 8003786:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800378a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800378e:	d104      	bne.n	800379a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003798:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4618      	mov	r0, r3
 80037a0:	f004 f8be 	bl	8007920 <USB_ReadInterrupts>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80037aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037ae:	d104      	bne.n	80037ba <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80037b8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f004 f8ae 	bl	8007920 <USB_ReadInterrupts>
 80037c4:	4603      	mov	r3, r0
 80037c6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80037ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037ce:	d104      	bne.n	80037da <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80037d8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 f89e 	bl	8007920 <USB_ReadInterrupts>
 80037e4:	4603      	mov	r3, r0
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d103      	bne.n	80037f6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2202      	movs	r2, #2
 80037f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4618      	mov	r0, r3
 80037fc:	f004 f890 	bl	8007920 <USB_ReadInterrupts>
 8003800:	4603      	mov	r3, r0
 8003802:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003806:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800380a:	d120      	bne.n	800384e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003814:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d113      	bne.n	800384e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003826:	2110      	movs	r1, #16
 8003828:	6938      	ldr	r0, [r7, #16]
 800382a:	f003 ff83 	bl	8007734 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800382e:	6938      	ldr	r0, [r7, #16]
 8003830:	f003 ffb2 	bl	8007798 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	7a5b      	ldrb	r3, [r3, #9]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d105      	bne.n	8003848 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2101      	movs	r1, #1
 8003842:	4618      	mov	r0, r3
 8003844:	f004 f9a4 	bl	8007b90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	f007 f96b 	bl	800ab24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f004 f864 	bl	8007920 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800385e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003862:	d102      	bne.n	800386a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f001 fd4d 	bl	8005304 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4618      	mov	r0, r3
 8003870:	f004 f856 	bl	8007920 <USB_ReadInterrupts>
 8003874:	4603      	mov	r3, r0
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	2b08      	cmp	r3, #8
 800387c:	d106      	bne.n	800388c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f007 f934 	bl	800aaec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2208      	movs	r2, #8
 800388a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4618      	mov	r0, r3
 8003892:	f004 f845 	bl	8007920 <USB_ReadInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038a0:	d139      	bne.n	8003916 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f004 fde0 	bl	800846c <USB_HC_ReadInterrupt>
 80038ac:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e025      	b.n	8003900 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	68ba      	ldr	r2, [r7, #8]
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	f003 0301 	and.w	r3, r3, #1
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d018      	beq.n	80038fa <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038de:	d106      	bne.n	80038ee <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	4619      	mov	r1, r3
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 f905 	bl	8003af6 <HCD_HC_IN_IRQHandler>
 80038ec:	e005      	b.n	80038fa <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 ff67 	bl	80047c8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	3301      	adds	r3, #1
 80038fe:	617b      	str	r3, [r7, #20]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	795b      	ldrb	r3, [r3, #5]
 8003904:	461a      	mov	r2, r3
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	4293      	cmp	r3, r2
 800390a:	d3d3      	bcc.n	80038b4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003914:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4618      	mov	r0, r3
 800391c:	f004 f800 	bl	8007920 <USB_ReadInterrupts>
 8003920:	4603      	mov	r3, r0
 8003922:	f003 0310 	and.w	r3, r3, #16
 8003926:	2b10      	cmp	r3, #16
 8003928:	d101      	bne.n	800392e <HAL_HCD_IRQHandler+0x1ea>
 800392a:	2301      	movs	r3, #1
 800392c:	e000      	b.n	8003930 <HAL_HCD_IRQHandler+0x1ec>
 800392e:	2300      	movs	r3, #0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d014      	beq.n	800395e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	699a      	ldr	r2, [r3, #24]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0210 	bic.w	r2, r2, #16
 8003942:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f001 fbfe 	bl	8005146 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699a      	ldr	r2, [r3, #24]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f042 0210 	orr.w	r2, r2, #16
 8003958:	619a      	str	r2, [r3, #24]
 800395a:	e000      	b.n	800395e <HAL_HCD_IRQHandler+0x21a>
      return;
 800395c:	bf00      	nop
    }
  }
}
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003972:	2b01      	cmp	r3, #1
 8003974:	d101      	bne.n	800397a <HAL_HCD_Start+0x16>
 8003976:	2302      	movs	r3, #2
 8003978:	e013      	b.n	80039a2 <HAL_HCD_Start+0x3e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2101      	movs	r1, #1
 8003988:	4618      	mov	r0, r3
 800398a:	f004 f968 	bl	8007c5e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f003 fe60 	bl	8007658 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}

080039aa <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80039aa:	b580      	push	{r7, lr}
 80039ac:	b082      	sub	sp, #8
 80039ae:	af00      	add	r7, sp, #0
 80039b0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_HCD_Stop+0x16>
 80039bc:	2302      	movs	r3, #2
 80039be:	e00d      	b.n	80039dc <HAL_HCD_Stop+0x32>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f004 febb 	bl	8008748 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80039da:	2300      	movs	r3, #0
}
 80039dc:	4618      	mov	r0, r3
 80039de:	3708      	adds	r7, #8
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4618      	mov	r0, r3
 80039f2:	f004 f90a 	bl	8007c0a <USB_ResetPort>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3708      	adds	r7, #8
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}

08003a00 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b083      	sub	sp, #12
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003a0c:	78fa      	ldrb	r2, [r7, #3]
 8003a0e:	6879      	ldr	r1, [r7, #4]
 8003a10:	4613      	mov	r3, r2
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	1a9b      	subs	r3, r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	334c      	adds	r3, #76	@ 0x4c
 8003a1c:	781b      	ldrb	r3, [r3, #0]
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003a2a:	b480      	push	{r7}
 8003a2c:	b083      	sub	sp, #12
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
 8003a32:	460b      	mov	r3, r1
 8003a34:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3338      	adds	r3, #56	@ 0x38
 8003a46:	681b      	ldr	r3, [r3, #0]
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4618      	mov	r0, r3
 8003a62:	f004 f94c 	bl	8007cfe <USB_GetCurrentFrame>
 8003a66:	4603      	mov	r3, r0
}
 8003a68:	4618      	mov	r0, r3
 8003a6a:	3708      	adds	r7, #8
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f004 f927 	bl	8007cd0 <USB_GetHostSpeed>
 8003a82:	4603      	mov	r3, r0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b083      	sub	sp, #12
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
 8003a94:	460b      	mov	r3, r1
 8003a96:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	331a      	adds	r3, #26
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	6879      	ldr	r1, [r7, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	011b      	lsls	r3, r3, #4
 8003ab4:	1a9b      	subs	r3, r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	440b      	add	r3, r1
 8003aba:	331b      	adds	r3, #27
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003ac0:	78fa      	ldrb	r2, [r7, #3]
 8003ac2:	6879      	ldr	r1, [r7, #4]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	011b      	lsls	r3, r3, #4
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3325      	adds	r3, #37	@ 0x25
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	3324      	adds	r3, #36	@ 0x24
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	370c      	adds	r7, #12
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b086      	sub	sp, #24
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
 8003afe:	460b      	mov	r3, r1
 8003b00:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	78fa      	ldrb	r2, [r7, #3]
 8003b12:	4611      	mov	r1, r2
 8003b14:	4618      	mov	r0, r3
 8003b16:	f003 ff16 	bl	8007946 <USB_ReadChInterrupts>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d11a      	bne.n	8003b5a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003b24:	78fb      	ldrb	r3, [r7, #3]
 8003b26:	015a      	lsls	r2, r3, #5
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	4413      	add	r3, r2
 8003b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b30:	461a      	mov	r2, r3
 8003b32:	2304      	movs	r3, #4
 8003b34:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	6879      	ldr	r1, [r7, #4]
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	1a9b      	subs	r3, r3, r2
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	440b      	add	r3, r1
 8003b44:	334d      	adds	r3, #77	@ 0x4d
 8003b46:	2207      	movs	r2, #7
 8003b48:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f004 fc9b 	bl	800848e <USB_HC_Halt>
 8003b58:	e09e      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	4611      	mov	r1, r2
 8003b62:	4618      	mov	r0, r3
 8003b64:	f003 feef 	bl	8007946 <USB_ReadChInterrupts>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b72:	d11b      	bne.n	8003bac <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b80:	461a      	mov	r2, r3
 8003b82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003b86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	334d      	adds	r3, #77	@ 0x4d
 8003b98:	2208      	movs	r2, #8
 8003b9a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	78fa      	ldrb	r2, [r7, #3]
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f004 fc72 	bl	800848e <USB_HC_Halt>
 8003baa:	e075      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f003 fec6 	bl	8007946 <USB_ReadChInterrupts>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d11a      	bne.n	8003bfa <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003bc4:	78fb      	ldrb	r3, [r7, #3]
 8003bc6:	015a      	lsls	r2, r3, #5
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	4413      	add	r3, r2
 8003bcc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	334d      	adds	r3, #77	@ 0x4d
 8003be6:	2206      	movs	r2, #6
 8003be8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	78fa      	ldrb	r2, [r7, #3]
 8003bf0:	4611      	mov	r1, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f004 fc4b 	bl	800848e <USB_HC_Halt>
 8003bf8:	e04e      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	4611      	mov	r1, r2
 8003c02:	4618      	mov	r0, r3
 8003c04:	f003 fe9f 	bl	8007946 <USB_ReadChInterrupts>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c12:	d11b      	bne.n	8003c4c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c20:	461a      	mov	r2, r3
 8003c22:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c26:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003c28:	78fa      	ldrb	r2, [r7, #3]
 8003c2a:	6879      	ldr	r1, [r7, #4]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	011b      	lsls	r3, r3, #4
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	440b      	add	r3, r1
 8003c36:	334d      	adds	r3, #77	@ 0x4d
 8003c38:	2209      	movs	r2, #9
 8003c3a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	4611      	mov	r1, r2
 8003c44:	4618      	mov	r0, r3
 8003c46:	f004 fc22 	bl	800848e <USB_HC_Halt>
 8003c4a:	e025      	b.n	8003c98 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	78fa      	ldrb	r2, [r7, #3]
 8003c52:	4611      	mov	r1, r2
 8003c54:	4618      	mov	r0, r3
 8003c56:	f003 fe76 	bl	8007946 <USB_ReadChInterrupts>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c60:	2b80      	cmp	r3, #128	@ 0x80
 8003c62:	d119      	bne.n	8003c98 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	015a      	lsls	r2, r3, #5
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	4413      	add	r3, r2
 8003c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c70:	461a      	mov	r2, r3
 8003c72:	2380      	movs	r3, #128	@ 0x80
 8003c74:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334d      	adds	r3, #77	@ 0x4d
 8003c86:	2207      	movs	r2, #7
 8003c88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	4611      	mov	r1, r2
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 fbfb 	bl	800848e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	4611      	mov	r1, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f003 fe50 	bl	8007946 <USB_ReadChInterrupts>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	d112      	bne.n	8003cd8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	78fa      	ldrb	r2, [r7, #3]
 8003cb8:	4611      	mov	r1, r2
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f004 fbe7 	bl	800848e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003cd2:	6093      	str	r3, [r2, #8]
 8003cd4:	f000 bd75 	b.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	78fa      	ldrb	r2, [r7, #3]
 8003cde:	4611      	mov	r1, r2
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f003 fe30 	bl	8007946 <USB_ReadChInterrupts>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	f040 8128 	bne.w	8003f42 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfe:	461a      	mov	r2, r3
 8003d00:	2320      	movs	r3, #32
 8003d02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003d04:	78fa      	ldrb	r2, [r7, #3]
 8003d06:	6879      	ldr	r1, [r7, #4]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	1a9b      	subs	r3, r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	440b      	add	r3, r1
 8003d12:	331b      	adds	r3, #27
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d119      	bne.n	8003d4e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003d1a:	78fa      	ldrb	r2, [r7, #3]
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	011b      	lsls	r3, r3, #4
 8003d22:	1a9b      	subs	r3, r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	331b      	adds	r3, #27
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d2e:	78fb      	ldrb	r3, [r7, #3]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	78fa      	ldrb	r2, [r7, #3]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d4c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	799b      	ldrb	r3, [r3, #6]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01b      	beq.n	8003d8e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	3330      	adds	r3, #48	@ 0x30
 8003d66:	6819      	ldr	r1, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	015a      	lsls	r2, r3, #5
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	4413      	add	r3, r2
 8003d70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	1ac9      	subs	r1, r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	011b      	lsls	r3, r3, #4
 8003d84:	1a9b      	subs	r3, r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	4403      	add	r3, r0
 8003d8a:	3338      	adds	r3, #56	@ 0x38
 8003d8c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	6879      	ldr	r1, [r7, #4]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	334d      	adds	r3, #77	@ 0x4d
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8003da2:	78fa      	ldrb	r2, [r7, #3]
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	1a9b      	subs	r3, r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	3344      	adds	r3, #68	@ 0x44
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003db6:	78fb      	ldrb	r3, [r7, #3]
 8003db8:	015a      	lsls	r2, r3, #5
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4413      	add	r3, r2
 8003dbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc2:	461a      	mov	r2, r3
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dc8:	78fa      	ldrb	r2, [r7, #3]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	3326      	adds	r3, #38	@ 0x26
 8003dd8:	781b      	ldrb	r3, [r3, #0]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00a      	beq.n	8003df4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3326      	adds	r3, #38	@ 0x26
 8003dee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d110      	bne.n	8003e16 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	78fa      	ldrb	r2, [r7, #3]
 8003dfa:	4611      	mov	r1, r2
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f004 fb46 	bl	800848e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e0e:	461a      	mov	r2, r3
 8003e10:	2310      	movs	r3, #16
 8003e12:	6093      	str	r3, [r2, #8]
 8003e14:	e03d      	b.n	8003e92 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003e16:	78fa      	ldrb	r2, [r7, #3]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	4613      	mov	r3, r2
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	1a9b      	subs	r3, r3, r2
 8003e20:	009b      	lsls	r3, r3, #2
 8003e22:	440b      	add	r3, r1
 8003e24:	3326      	adds	r3, #38	@ 0x26
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b03      	cmp	r3, #3
 8003e2a:	d00a      	beq.n	8003e42 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3326      	adds	r3, #38	@ 0x26
 8003e3c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d127      	bne.n	8003e92 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	78fa      	ldrb	r2, [r7, #3]
 8003e52:	0151      	lsls	r1, r2, #5
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	440a      	add	r2, r1
 8003e58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e5c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003e60:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003e62:	78fa      	ldrb	r2, [r7, #3]
 8003e64:	6879      	ldr	r1, [r7, #4]
 8003e66:	4613      	mov	r3, r2
 8003e68:	011b      	lsls	r3, r3, #4
 8003e6a:	1a9b      	subs	r3, r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	440b      	add	r3, r1
 8003e70:	334c      	adds	r3, #76	@ 0x4c
 8003e72:	2201      	movs	r2, #1
 8003e74:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	334c      	adds	r3, #76	@ 0x4c
 8003e86:	781a      	ldrb	r2, [r3, #0]
 8003e88:	78fb      	ldrb	r3, [r7, #3]
 8003e8a:	4619      	mov	r1, r3
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f006 fe57 	bl	800ab40 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	799b      	ldrb	r3, [r3, #6]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d13b      	bne.n	8003f12 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3338      	adds	r3, #56	@ 0x38
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4403      	add	r3, r0
 8003eba:	3328      	adds	r3, #40	@ 0x28
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	440b      	add	r3, r1
 8003ec0:	1e59      	subs	r1, r3, #1
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	4403      	add	r3, r0
 8003ed0:	3328      	adds	r3, #40	@ 0x28
 8003ed2:	881b      	ldrh	r3, [r3, #0]
 8003ed4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ed8:	f003 0301 	and.w	r3, r3, #1
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	f000 8470 	beq.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	333c      	adds	r3, #60	@ 0x3c
 8003ef2:	781b      	ldrb	r3, [r3, #0]
 8003ef4:	78fa      	ldrb	r2, [r7, #3]
 8003ef6:	f083 0301 	eor.w	r3, r3, #1
 8003efa:	b2d8      	uxtb	r0, r3
 8003efc:	6879      	ldr	r1, [r7, #4]
 8003efe:	4613      	mov	r3, r2
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	1a9b      	subs	r3, r3, r2
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	440b      	add	r3, r1
 8003f08:	333c      	adds	r3, #60	@ 0x3c
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	701a      	strb	r2, [r3, #0]
 8003f0e:	f000 bc58 	b.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8003f12:	78fa      	ldrb	r2, [r7, #3]
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	4613      	mov	r3, r2
 8003f18:	011b      	lsls	r3, r3, #4
 8003f1a:	1a9b      	subs	r3, r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	440b      	add	r3, r1
 8003f20:	333c      	adds	r3, #60	@ 0x3c
 8003f22:	781b      	ldrb	r3, [r3, #0]
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	f083 0301 	eor.w	r3, r3, #1
 8003f2a:	b2d8      	uxtb	r0, r3
 8003f2c:	6879      	ldr	r1, [r7, #4]
 8003f2e:	4613      	mov	r3, r2
 8003f30:	011b      	lsls	r3, r3, #4
 8003f32:	1a9b      	subs	r3, r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	440b      	add	r3, r1
 8003f38:	333c      	adds	r3, #60	@ 0x3c
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	701a      	strb	r2, [r3, #0]
 8003f3e:	f000 bc40 	b.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	78fa      	ldrb	r2, [r7, #3]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f003 fcfb 	bl	8007946 <USB_ReadChInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b20      	cmp	r3, #32
 8003f58:	d131      	bne.n	8003fbe <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003f5a:	78fb      	ldrb	r3, [r7, #3]
 8003f5c:	015a      	lsls	r2, r3, #5
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	4413      	add	r3, r2
 8003f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f66:	461a      	mov	r2, r3
 8003f68:	2320      	movs	r3, #32
 8003f6a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8003f6c:	78fa      	ldrb	r2, [r7, #3]
 8003f6e:	6879      	ldr	r1, [r7, #4]
 8003f70:	4613      	mov	r3, r2
 8003f72:	011b      	lsls	r3, r3, #4
 8003f74:	1a9b      	subs	r3, r3, r2
 8003f76:	009b      	lsls	r3, r3, #2
 8003f78:	440b      	add	r3, r1
 8003f7a:	331a      	adds	r3, #26
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	f040 841f 	bne.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003f84:	78fa      	ldrb	r2, [r7, #3]
 8003f86:	6879      	ldr	r1, [r7, #4]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	331b      	adds	r3, #27
 8003f94:	2201      	movs	r2, #1
 8003f96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003f98:	78fa      	ldrb	r2, [r7, #3]
 8003f9a:	6879      	ldr	r1, [r7, #4]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	1a9b      	subs	r3, r3, r2
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	334d      	adds	r3, #77	@ 0x4d
 8003fa8:	2203      	movs	r2, #3
 8003faa:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	78fa      	ldrb	r2, [r7, #3]
 8003fb2:	4611      	mov	r1, r2
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f004 fa6a 	bl	800848e <USB_HC_Halt>
 8003fba:	f000 bc02 	b.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f003 fcbd 	bl	8007946 <USB_ReadChInterrupts>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f040 8305 	bne.w	80045e2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003fd8:	78fb      	ldrb	r3, [r7, #3]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003fea:	78fa      	ldrb	r2, [r7, #3]
 8003fec:	6879      	ldr	r1, [r7, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	334d      	adds	r3, #77	@ 0x4d
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d114      	bne.n	800402a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004000:	78fa      	ldrb	r2, [r7, #3]
 8004002:	6879      	ldr	r1, [r7, #4]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	334d      	adds	r3, #77	@ 0x4d
 8004010:	2202      	movs	r2, #2
 8004012:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	6879      	ldr	r1, [r7, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	011b      	lsls	r3, r3, #4
 800401c:	1a9b      	subs	r3, r3, r2
 800401e:	009b      	lsls	r3, r3, #2
 8004020:	440b      	add	r3, r1
 8004022:	334c      	adds	r3, #76	@ 0x4c
 8004024:	2201      	movs	r2, #1
 8004026:	701a      	strb	r2, [r3, #0]
 8004028:	e2cc      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800402a:	78fa      	ldrb	r2, [r7, #3]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	4613      	mov	r3, r2
 8004030:	011b      	lsls	r3, r3, #4
 8004032:	1a9b      	subs	r3, r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	440b      	add	r3, r1
 8004038:	334d      	adds	r3, #77	@ 0x4d
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b06      	cmp	r3, #6
 800403e:	d114      	bne.n	800406a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004040:	78fa      	ldrb	r2, [r7, #3]
 8004042:	6879      	ldr	r1, [r7, #4]
 8004044:	4613      	mov	r3, r2
 8004046:	011b      	lsls	r3, r3, #4
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	009b      	lsls	r3, r3, #2
 800404c:	440b      	add	r3, r1
 800404e:	334d      	adds	r3, #77	@ 0x4d
 8004050:	2202      	movs	r2, #2
 8004052:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	334c      	adds	r3, #76	@ 0x4c
 8004064:	2205      	movs	r2, #5
 8004066:	701a      	strb	r2, [r3, #0]
 8004068:	e2ac      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	334d      	adds	r3, #77	@ 0x4d
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b07      	cmp	r3, #7
 800407e:	d00b      	beq.n	8004098 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004080:	78fa      	ldrb	r2, [r7, #3]
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	011b      	lsls	r3, r3, #4
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	334d      	adds	r3, #77	@ 0x4d
 8004090:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004092:	2b09      	cmp	r3, #9
 8004094:	f040 80a6 	bne.w	80041e4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	334d      	adds	r3, #77	@ 0x4d
 80040a8:	2202      	movs	r2, #2
 80040aa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	3344      	adds	r3, #68	@ 0x44
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	1c59      	adds	r1, r3, #1
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	4403      	add	r3, r0
 80040cc:	3344      	adds	r3, #68	@ 0x44
 80040ce:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80040d0:	78fa      	ldrb	r2, [r7, #3]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	3344      	adds	r3, #68	@ 0x44
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d943      	bls.n	800416e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80040e6:	78fa      	ldrb	r2, [r7, #3]
 80040e8:	6879      	ldr	r1, [r7, #4]
 80040ea:	4613      	mov	r3, r2
 80040ec:	011b      	lsls	r3, r3, #4
 80040ee:	1a9b      	subs	r3, r3, r2
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	440b      	add	r3, r1
 80040f4:	3344      	adds	r3, #68	@ 0x44
 80040f6:	2200      	movs	r2, #0
 80040f8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80040fa:	78fa      	ldrb	r2, [r7, #3]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	1a9b      	subs	r3, r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	331a      	adds	r3, #26
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	2b01      	cmp	r3, #1
 800410e:	d123      	bne.n	8004158 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004110:	78fa      	ldrb	r2, [r7, #3]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	1a9b      	subs	r3, r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	331b      	adds	r3, #27
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004124:	78fa      	ldrb	r2, [r7, #3]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	011b      	lsls	r3, r3, #4
 800412c:	1a9b      	subs	r3, r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	331c      	adds	r3, #28
 8004134:	2200      	movs	r2, #0
 8004136:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	78fa      	ldrb	r2, [r7, #3]
 8004148:	0151      	lsls	r1, r2, #5
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	440a      	add	r2, r1
 800414e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004152:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004156:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334c      	adds	r3, #76	@ 0x4c
 8004168:	2204      	movs	r2, #4
 800416a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800416c:	e229      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334c      	adds	r3, #76	@ 0x4c
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	3326      	adds	r3, #38	@ 0x26
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d00b      	beq.n	80041b0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	3326      	adds	r3, #38	@ 0x26
 80041a8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80041aa:	2b02      	cmp	r3, #2
 80041ac:	f040 8209 	bne.w	80045c2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80041b0:	78fb      	ldrb	r3, [r7, #3]
 80041b2:	015a      	lsls	r2, r3, #5
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	4413      	add	r3, r2
 80041b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80041c6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80041ce:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041dc:	461a      	mov	r2, r3
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80041e2:	e1ee      	b.n	80045c2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80041e4:	78fa      	ldrb	r2, [r7, #3]
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	4613      	mov	r3, r2
 80041ea:	011b      	lsls	r3, r3, #4
 80041ec:	1a9b      	subs	r3, r3, r2
 80041ee:	009b      	lsls	r3, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	334d      	adds	r3, #77	@ 0x4d
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b05      	cmp	r3, #5
 80041f8:	f040 80c8 	bne.w	800438c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80041fc:	78fa      	ldrb	r2, [r7, #3]
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	334d      	adds	r3, #77	@ 0x4d
 800420c:	2202      	movs	r2, #2
 800420e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004210:	78fa      	ldrb	r2, [r7, #3]
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	4613      	mov	r3, r2
 8004216:	011b      	lsls	r3, r3, #4
 8004218:	1a9b      	subs	r3, r3, r2
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	440b      	add	r3, r1
 800421e:	331b      	adds	r3, #27
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b01      	cmp	r3, #1
 8004224:	f040 81ce 	bne.w	80045c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004228:	78fa      	ldrb	r2, [r7, #3]
 800422a:	6879      	ldr	r1, [r7, #4]
 800422c:	4613      	mov	r3, r2
 800422e:	011b      	lsls	r3, r3, #4
 8004230:	1a9b      	subs	r3, r3, r2
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	440b      	add	r3, r1
 8004236:	3326      	adds	r3, #38	@ 0x26
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	2b03      	cmp	r3, #3
 800423c:	d16b      	bne.n	8004316 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800423e:	78fa      	ldrb	r2, [r7, #3]
 8004240:	6879      	ldr	r1, [r7, #4]
 8004242:	4613      	mov	r3, r2
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	1a9b      	subs	r3, r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	440b      	add	r3, r1
 800424c:	3348      	adds	r3, #72	@ 0x48
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	1c59      	adds	r1, r3, #1
 8004252:	6878      	ldr	r0, [r7, #4]
 8004254:	4613      	mov	r3, r2
 8004256:	011b      	lsls	r3, r3, #4
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	009b      	lsls	r3, r3, #2
 800425c:	4403      	add	r3, r0
 800425e:	3348      	adds	r3, #72	@ 0x48
 8004260:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004262:	78fa      	ldrb	r2, [r7, #3]
 8004264:	6879      	ldr	r1, [r7, #4]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	3348      	adds	r3, #72	@ 0x48
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b02      	cmp	r3, #2
 8004276:	d943      	bls.n	8004300 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004278:	78fa      	ldrb	r2, [r7, #3]
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	440b      	add	r3, r1
 8004286:	3348      	adds	r3, #72	@ 0x48
 8004288:	2200      	movs	r2, #0
 800428a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800428c:	78fa      	ldrb	r2, [r7, #3]
 800428e:	6879      	ldr	r1, [r7, #4]
 8004290:	4613      	mov	r3, r2
 8004292:	011b      	lsls	r3, r3, #4
 8004294:	1a9b      	subs	r3, r3, r2
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	440b      	add	r3, r1
 800429a:	331b      	adds	r3, #27
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80042a0:	78fa      	ldrb	r2, [r7, #3]
 80042a2:	6879      	ldr	r1, [r7, #4]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	3344      	adds	r3, #68	@ 0x44
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	2b02      	cmp	r3, #2
 80042b4:	d809      	bhi.n	80042ca <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80042b6:	78fa      	ldrb	r2, [r7, #3]
 80042b8:	6879      	ldr	r1, [r7, #4]
 80042ba:	4613      	mov	r3, r2
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	1a9b      	subs	r3, r3, r2
 80042c0:	009b      	lsls	r3, r3, #2
 80042c2:	440b      	add	r3, r1
 80042c4:	331c      	adds	r3, #28
 80042c6:	2201      	movs	r2, #1
 80042c8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80042ca:	78fb      	ldrb	r3, [r7, #3]
 80042cc:	015a      	lsls	r2, r3, #5
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	4413      	add	r3, r2
 80042d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	0151      	lsls	r1, r2, #5
 80042dc:	693a      	ldr	r2, [r7, #16]
 80042de:	440a      	add	r2, r1
 80042e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80042e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042e8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80042ea:	78fa      	ldrb	r2, [r7, #3]
 80042ec:	6879      	ldr	r1, [r7, #4]
 80042ee:	4613      	mov	r3, r2
 80042f0:	011b      	lsls	r3, r3, #4
 80042f2:	1a9b      	subs	r3, r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	440b      	add	r3, r1
 80042f8:	334c      	adds	r3, #76	@ 0x4c
 80042fa:	2204      	movs	r2, #4
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e014      	b.n	800432a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334c      	adds	r3, #76	@ 0x4c
 8004310:	2202      	movs	r2, #2
 8004312:	701a      	strb	r2, [r3, #0]
 8004314:	e009      	b.n	800432a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004316:	78fa      	ldrb	r2, [r7, #3]
 8004318:	6879      	ldr	r1, [r7, #4]
 800431a:	4613      	mov	r3, r2
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	1a9b      	subs	r3, r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	440b      	add	r3, r1
 8004324:	334c      	adds	r3, #76	@ 0x4c
 8004326:	2202      	movs	r2, #2
 8004328:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800432a:	78fa      	ldrb	r2, [r7, #3]
 800432c:	6879      	ldr	r1, [r7, #4]
 800432e:	4613      	mov	r3, r2
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	1a9b      	subs	r3, r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3326      	adds	r3, #38	@ 0x26
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d00b      	beq.n	8004358 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004340:	78fa      	ldrb	r2, [r7, #3]
 8004342:	6879      	ldr	r1, [r7, #4]
 8004344:	4613      	mov	r3, r2
 8004346:	011b      	lsls	r3, r3, #4
 8004348:	1a9b      	subs	r3, r3, r2
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	440b      	add	r3, r1
 800434e:	3326      	adds	r3, #38	@ 0x26
 8004350:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004352:	2b02      	cmp	r3, #2
 8004354:	f040 8136 	bne.w	80045c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004358:	78fb      	ldrb	r3, [r7, #3]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	4413      	add	r3, r2
 8004360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800436e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004376:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4413      	add	r3, r2
 8004380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004384:	461a      	mov	r2, r3
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6013      	str	r3, [r2, #0]
 800438a:	e11b      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800438c:	78fa      	ldrb	r2, [r7, #3]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	4613      	mov	r3, r2
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	1a9b      	subs	r3, r3, r2
 8004396:	009b      	lsls	r3, r3, #2
 8004398:	440b      	add	r3, r1
 800439a:	334d      	adds	r3, #77	@ 0x4d
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	2b03      	cmp	r3, #3
 80043a0:	f040 8081 	bne.w	80044a6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80043a4:	78fa      	ldrb	r2, [r7, #3]
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	4613      	mov	r3, r2
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	1a9b      	subs	r3, r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	440b      	add	r3, r1
 80043b2:	334d      	adds	r3, #77	@ 0x4d
 80043b4:	2202      	movs	r2, #2
 80043b6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	6879      	ldr	r1, [r7, #4]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	331b      	adds	r3, #27
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	f040 80fa 	bne.w	80045c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80043d0:	78fa      	ldrb	r2, [r7, #3]
 80043d2:	6879      	ldr	r1, [r7, #4]
 80043d4:	4613      	mov	r3, r2
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	1a9b      	subs	r3, r3, r2
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	334c      	adds	r3, #76	@ 0x4c
 80043e0:	2202      	movs	r2, #2
 80043e2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80043e4:	78fb      	ldrb	r3, [r7, #3]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	78fa      	ldrb	r2, [r7, #3]
 80043f4:	0151      	lsls	r1, r2, #5
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	440a      	add	r2, r1
 80043fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004402:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	4413      	add	r3, r2
 800440c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	78fa      	ldrb	r2, [r7, #3]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	440a      	add	r2, r1
 800441a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800441e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004422:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004424:	78fb      	ldrb	r3, [r7, #3]
 8004426:	015a      	lsls	r2, r3, #5
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	4413      	add	r3, r2
 800442c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	0151      	lsls	r1, r2, #5
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	440a      	add	r2, r1
 800443a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800443e:	f023 0320 	bic.w	r3, r3, #32
 8004442:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004444:	78fa      	ldrb	r2, [r7, #3]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	011b      	lsls	r3, r3, #4
 800444c:	1a9b      	subs	r3, r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	3326      	adds	r3, #38	@ 0x26
 8004454:	781b      	ldrb	r3, [r3, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00b      	beq.n	8004472 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800445a:	78fa      	ldrb	r2, [r7, #3]
 800445c:	6879      	ldr	r1, [r7, #4]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	3326      	adds	r3, #38	@ 0x26
 800446a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800446c:	2b02      	cmp	r3, #2
 800446e:	f040 80a9 	bne.w	80045c4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004472:	78fb      	ldrb	r3, [r7, #3]
 8004474:	015a      	lsls	r2, r3, #5
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	4413      	add	r3, r2
 800447a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004488:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004490:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004492:	78fb      	ldrb	r3, [r7, #3]
 8004494:	015a      	lsls	r2, r3, #5
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4413      	add	r3, r2
 800449a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800449e:	461a      	mov	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e08e      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334d      	adds	r3, #77	@ 0x4d
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b04      	cmp	r3, #4
 80044ba:	d143      	bne.n	8004544 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334d      	adds	r3, #77	@ 0x4d
 80044cc:	2202      	movs	r2, #2
 80044ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	334c      	adds	r3, #76	@ 0x4c
 80044e0:	2202      	movs	r2, #2
 80044e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	4613      	mov	r3, r2
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	1a9b      	subs	r3, r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	3326      	adds	r3, #38	@ 0x26
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d00a      	beq.n	8004510 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	6879      	ldr	r1, [r7, #4]
 80044fe:	4613      	mov	r3, r2
 8004500:	011b      	lsls	r3, r3, #4
 8004502:	1a9b      	subs	r3, r3, r2
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	440b      	add	r3, r1
 8004508:	3326      	adds	r3, #38	@ 0x26
 800450a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800450c:	2b02      	cmp	r3, #2
 800450e:	d159      	bne.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004510:	78fb      	ldrb	r3, [r7, #3]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004526:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800452e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004530:	78fb      	ldrb	r3, [r7, #3]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	4413      	add	r3, r2
 8004538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800453c:	461a      	mov	r2, r3
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6013      	str	r3, [r2, #0]
 8004542:	e03f      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004544:	78fa      	ldrb	r2, [r7, #3]
 8004546:	6879      	ldr	r1, [r7, #4]
 8004548:	4613      	mov	r3, r2
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	1a9b      	subs	r3, r3, r2
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	440b      	add	r3, r1
 8004552:	334d      	adds	r3, #77	@ 0x4d
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2b08      	cmp	r3, #8
 8004558:	d126      	bne.n	80045a8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800455a:	78fa      	ldrb	r2, [r7, #3]
 800455c:	6879      	ldr	r1, [r7, #4]
 800455e:	4613      	mov	r3, r2
 8004560:	011b      	lsls	r3, r3, #4
 8004562:	1a9b      	subs	r3, r3, r2
 8004564:	009b      	lsls	r3, r3, #2
 8004566:	440b      	add	r3, r1
 8004568:	334d      	adds	r3, #77	@ 0x4d
 800456a:	2202      	movs	r2, #2
 800456c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800456e:	78fa      	ldrb	r2, [r7, #3]
 8004570:	6879      	ldr	r1, [r7, #4]
 8004572:	4613      	mov	r3, r2
 8004574:	011b      	lsls	r3, r3, #4
 8004576:	1a9b      	subs	r3, r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	440b      	add	r3, r1
 800457c:	3344      	adds	r3, #68	@ 0x44
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1c59      	adds	r1, r3, #1
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	011b      	lsls	r3, r3, #4
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4403      	add	r3, r0
 800458e:	3344      	adds	r3, #68	@ 0x44
 8004590:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	334c      	adds	r3, #76	@ 0x4c
 80045a2:	2204      	movs	r2, #4
 80045a4:	701a      	strb	r2, [r3, #0]
 80045a6:	e00d      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80045a8:	78fa      	ldrb	r2, [r7, #3]
 80045aa:	6879      	ldr	r1, [r7, #4]
 80045ac:	4613      	mov	r3, r2
 80045ae:	011b      	lsls	r3, r3, #4
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	440b      	add	r3, r1
 80045b6:	334d      	adds	r3, #77	@ 0x4d
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	f000 8100 	beq.w	80047c0 <HCD_HC_IN_IRQHandler+0xcca>
 80045c0:	e000      	b.n	80045c4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	334c      	adds	r3, #76	@ 0x4c
 80045d4:	781a      	ldrb	r2, [r3, #0]
 80045d6:	78fb      	ldrb	r3, [r7, #3]
 80045d8:	4619      	mov	r1, r3
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f006 fab0 	bl	800ab40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80045e0:	e0ef      	b.n	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	78fa      	ldrb	r2, [r7, #3]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f003 f9ab 	bl	8007946 <USB_ReadChInterrupts>
 80045f0:	4603      	mov	r3, r0
 80045f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045f6:	2b40      	cmp	r3, #64	@ 0x40
 80045f8:	d12f      	bne.n	800465a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80045fa:	78fb      	ldrb	r3, [r7, #3]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004606:	461a      	mov	r2, r3
 8004608:	2340      	movs	r3, #64	@ 0x40
 800460a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	334d      	adds	r3, #77	@ 0x4d
 800461c:	2205      	movs	r2, #5
 800461e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004620:	78fa      	ldrb	r2, [r7, #3]
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	4613      	mov	r3, r2
 8004626:	011b      	lsls	r3, r3, #4
 8004628:	1a9b      	subs	r3, r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	440b      	add	r3, r1
 800462e:	331a      	adds	r3, #26
 8004630:	781b      	ldrb	r3, [r3, #0]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d109      	bne.n	800464a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004636:	78fa      	ldrb	r2, [r7, #3]
 8004638:	6879      	ldr	r1, [r7, #4]
 800463a:	4613      	mov	r3, r2
 800463c:	011b      	lsls	r3, r3, #4
 800463e:	1a9b      	subs	r3, r3, r2
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	440b      	add	r3, r1
 8004644:	3344      	adds	r3, #68	@ 0x44
 8004646:	2200      	movs	r2, #0
 8004648:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	78fa      	ldrb	r2, [r7, #3]
 8004650:	4611      	mov	r1, r2
 8004652:	4618      	mov	r0, r3
 8004654:	f003 ff1b 	bl	800848e <USB_HC_Halt>
 8004658:	e0b3      	b.n	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	4611      	mov	r1, r2
 8004662:	4618      	mov	r0, r3
 8004664:	f003 f96f 	bl	8007946 <USB_ReadChInterrupts>
 8004668:	4603      	mov	r3, r0
 800466a:	f003 0310 	and.w	r3, r3, #16
 800466e:	2b10      	cmp	r3, #16
 8004670:	f040 80a7 	bne.w	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	3326      	adds	r3, #38	@ 0x26
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b03      	cmp	r3, #3
 8004688:	d11b      	bne.n	80046c2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	3344      	adds	r3, #68	@ 0x44
 800469a:	2200      	movs	r2, #0
 800469c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	334d      	adds	r3, #77	@ 0x4d
 80046ae:	2204      	movs	r2, #4
 80046b0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f003 fee7 	bl	800848e <USB_HC_Halt>
 80046c0:	e03f      	b.n	8004742 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3326      	adds	r3, #38	@ 0x26
 80046d2:	781b      	ldrb	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d00a      	beq.n	80046ee <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	3326      	adds	r3, #38	@ 0x26
 80046e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d129      	bne.n	8004742 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80046ee:	78fa      	ldrb	r2, [r7, #3]
 80046f0:	6879      	ldr	r1, [r7, #4]
 80046f2:	4613      	mov	r3, r2
 80046f4:	011b      	lsls	r3, r3, #4
 80046f6:	1a9b      	subs	r3, r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	440b      	add	r3, r1
 80046fc:	3344      	adds	r3, #68	@ 0x44
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	799b      	ldrb	r3, [r3, #6]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d00a      	beq.n	8004720 <HCD_HC_IN_IRQHandler+0xc2a>
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	331b      	adds	r3, #27
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	d110      	bne.n	8004742 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004720:	78fa      	ldrb	r2, [r7, #3]
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	1a9b      	subs	r3, r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	334d      	adds	r3, #77	@ 0x4d
 8004730:	2204      	movs	r2, #4
 8004732:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	78fa      	ldrb	r2, [r7, #3]
 800473a:	4611      	mov	r1, r2
 800473c:	4618      	mov	r0, r3
 800473e:	f003 fea6 	bl	800848e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	331b      	adds	r3, #27
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d129      	bne.n	80047ac <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	331b      	adds	r3, #27
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800476c:	78fb      	ldrb	r3, [r7, #3]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	4413      	add	r3, r2
 8004774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	78fa      	ldrb	r2, [r7, #3]
 800477c:	0151      	lsls	r1, r2, #5
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	440a      	add	r2, r1
 8004782:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004786:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	015a      	lsls	r2, r3, #5
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	4413      	add	r3, r2
 8004794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	78fa      	ldrb	r2, [r7, #3]
 800479c:	0151      	lsls	r1, r2, #5
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	440a      	add	r2, r1
 80047a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047a6:	f043 0320 	orr.w	r3, r3, #32
 80047aa:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047b8:	461a      	mov	r2, r3
 80047ba:	2310      	movs	r3, #16
 80047bc:	6093      	str	r3, [r2, #8]
 80047be:	e000      	b.n	80047c2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80047c0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	4611      	mov	r1, r2
 80047e6:	4618      	mov	r0, r3
 80047e8:	f003 f8ad 	bl	8007946 <USB_ReadChInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f003 0304 	and.w	r3, r3, #4
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d11b      	bne.n	800482e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80047f6:	78fb      	ldrb	r3, [r7, #3]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004802:	461a      	mov	r2, r3
 8004804:	2304      	movs	r3, #4
 8004806:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004808:	78fa      	ldrb	r2, [r7, #3]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	011b      	lsls	r3, r3, #4
 8004810:	1a9b      	subs	r3, r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	334d      	adds	r3, #77	@ 0x4d
 8004818:	2207      	movs	r2, #7
 800481a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	78fa      	ldrb	r2, [r7, #3]
 8004822:	4611      	mov	r1, r2
 8004824:	4618      	mov	r0, r3
 8004826:	f003 fe32 	bl	800848e <USB_HC_Halt>
 800482a:	f000 bc89 	b.w	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	78fa      	ldrb	r2, [r7, #3]
 8004834:	4611      	mov	r1, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f003 f885 	bl	8007946 <USB_ReadChInterrupts>
 800483c:	4603      	mov	r3, r0
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	2b20      	cmp	r3, #32
 8004844:	f040 8082 	bne.w	800494c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004848:	78fb      	ldrb	r3, [r7, #3]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	4413      	add	r3, r2
 8004850:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004854:	461a      	mov	r2, r3
 8004856:	2320      	movs	r3, #32
 8004858:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800485a:	78fa      	ldrb	r2, [r7, #3]
 800485c:	6879      	ldr	r1, [r7, #4]
 800485e:	4613      	mov	r3, r2
 8004860:	011b      	lsls	r3, r3, #4
 8004862:	1a9b      	subs	r3, r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3319      	adds	r3, #25
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d124      	bne.n	80048ba <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004870:	78fa      	ldrb	r2, [r7, #3]
 8004872:	6879      	ldr	r1, [r7, #4]
 8004874:	4613      	mov	r3, r2
 8004876:	011b      	lsls	r3, r3, #4
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	3319      	adds	r3, #25
 8004880:	2200      	movs	r2, #0
 8004882:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004884:	78fa      	ldrb	r2, [r7, #3]
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	334c      	adds	r3, #76	@ 0x4c
 8004894:	2202      	movs	r2, #2
 8004896:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	334d      	adds	r3, #77	@ 0x4d
 80048a8:	2203      	movs	r2, #3
 80048aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	4611      	mov	r1, r2
 80048b4:	4618      	mov	r0, r3
 80048b6:	f003 fdea 	bl	800848e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	331a      	adds	r3, #26
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	f040 8437 	bne.w	8005140 <HCD_HC_OUT_IRQHandler+0x978>
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	331b      	adds	r3, #27
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f040 842b 	bne.w	8005140 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80048ea:	78fa      	ldrb	r2, [r7, #3]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	011b      	lsls	r3, r3, #4
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3326      	adds	r3, #38	@ 0x26
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d009      	beq.n	8004914 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004900:	78fa      	ldrb	r2, [r7, #3]
 8004902:	6879      	ldr	r1, [r7, #4]
 8004904:	4613      	mov	r3, r2
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	1a9b      	subs	r3, r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	331b      	adds	r3, #27
 8004910:	2201      	movs	r2, #1
 8004912:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004914:	78fa      	ldrb	r2, [r7, #3]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	011b      	lsls	r3, r3, #4
 800491c:	1a9b      	subs	r3, r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	334d      	adds	r3, #77	@ 0x4d
 8004924:	2203      	movs	r2, #3
 8004926:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	4611      	mov	r1, r2
 8004930:	4618      	mov	r0, r3
 8004932:	f003 fdac 	bl	800848e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004936:	78fa      	ldrb	r2, [r7, #3]
 8004938:	6879      	ldr	r1, [r7, #4]
 800493a:	4613      	mov	r3, r2
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	1a9b      	subs	r3, r3, r2
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	440b      	add	r3, r1
 8004944:	3344      	adds	r3, #68	@ 0x44
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	e3f9      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	4611      	mov	r1, r2
 8004954:	4618      	mov	r0, r3
 8004956:	f002 fff6 	bl	8007946 <USB_ReadChInterrupts>
 800495a:	4603      	mov	r3, r0
 800495c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004964:	d111      	bne.n	800498a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004966:	78fb      	ldrb	r3, [r7, #3]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4413      	add	r3, r2
 800496e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004972:	461a      	mov	r2, r3
 8004974:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004978:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	4611      	mov	r1, r2
 8004982:	4618      	mov	r0, r3
 8004984:	f003 fd83 	bl	800848e <USB_HC_Halt>
 8004988:	e3da      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	78fa      	ldrb	r2, [r7, #3]
 8004990:	4611      	mov	r1, r2
 8004992:	4618      	mov	r0, r3
 8004994:	f002 ffd7 	bl	8007946 <USB_ReadChInterrupts>
 8004998:	4603      	mov	r3, r0
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d168      	bne.n	8004a74 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	3344      	adds	r3, #68	@ 0x44
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	78fa      	ldrb	r2, [r7, #3]
 80049bc:	4611      	mov	r1, r2
 80049be:	4618      	mov	r0, r3
 80049c0:	f002 ffc1 	bl	8007946 <USB_ReadChInterrupts>
 80049c4:	4603      	mov	r3, r0
 80049c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ca:	2b40      	cmp	r3, #64	@ 0x40
 80049cc:	d112      	bne.n	80049f4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80049ce:	78fa      	ldrb	r2, [r7, #3]
 80049d0:	6879      	ldr	r1, [r7, #4]
 80049d2:	4613      	mov	r3, r2
 80049d4:	011b      	lsls	r3, r3, #4
 80049d6:	1a9b      	subs	r3, r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	440b      	add	r3, r1
 80049dc:	3319      	adds	r3, #25
 80049de:	2201      	movs	r2, #1
 80049e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80049e2:	78fb      	ldrb	r3, [r7, #3]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ee:	461a      	mov	r2, r3
 80049f0:	2340      	movs	r3, #64	@ 0x40
 80049f2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80049f4:	78fa      	ldrb	r2, [r7, #3]
 80049f6:	6879      	ldr	r1, [r7, #4]
 80049f8:	4613      	mov	r3, r2
 80049fa:	011b      	lsls	r3, r3, #4
 80049fc:	1a9b      	subs	r3, r3, r2
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	331b      	adds	r3, #27
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d019      	beq.n	8004a3e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	4613      	mov	r3, r2
 8004a10:	011b      	lsls	r3, r3, #4
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	009b      	lsls	r3, r3, #2
 8004a16:	440b      	add	r3, r1
 8004a18:	331b      	adds	r3, #27
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004a1e:	78fb      	ldrb	r3, [r7, #3]
 8004a20:	015a      	lsls	r2, r3, #5
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4413      	add	r3, r2
 8004a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	78fa      	ldrb	r2, [r7, #3]
 8004a2e:	0151      	lsls	r1, r2, #5
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	440a      	add	r2, r1
 8004a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a3c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	334d      	adds	r3, #77	@ 0x4d
 8004a60:	2201      	movs	r2, #1
 8004a62:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	78fa      	ldrb	r2, [r7, #3]
 8004a6a:	4611      	mov	r1, r2
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f003 fd0e 	bl	800848e <USB_HC_Halt>
 8004a72:	e365      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	78fa      	ldrb	r2, [r7, #3]
 8004a7a:	4611      	mov	r1, r2
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f002 ff62 	bl	8007946 <USB_ReadChInterrupts>
 8004a82:	4603      	mov	r3, r0
 8004a84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a88:	2b40      	cmp	r3, #64	@ 0x40
 8004a8a:	d139      	bne.n	8004b00 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	011b      	lsls	r3, r3, #4
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	440b      	add	r3, r1
 8004a9a:	334d      	adds	r3, #77	@ 0x4d
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004aa0:	78fa      	ldrb	r2, [r7, #3]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	011b      	lsls	r3, r3, #4
 8004aa8:	1a9b      	subs	r3, r3, r2
 8004aaa:	009b      	lsls	r3, r3, #2
 8004aac:	440b      	add	r3, r1
 8004aae:	331a      	adds	r3, #26
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d109      	bne.n	8004aca <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004ab6:	78fa      	ldrb	r2, [r7, #3]
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	4613      	mov	r3, r2
 8004abc:	011b      	lsls	r3, r3, #4
 8004abe:	1a9b      	subs	r3, r3, r2
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	440b      	add	r3, r1
 8004ac4:	3319      	adds	r3, #25
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	011b      	lsls	r3, r3, #4
 8004ad2:	1a9b      	subs	r3, r3, r2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	3344      	adds	r3, #68	@ 0x44
 8004ada:	2200      	movs	r2, #0
 8004adc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	78fa      	ldrb	r2, [r7, #3]
 8004ae4:	4611      	mov	r1, r2
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f003 fcd1 	bl	800848e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af8:	461a      	mov	r2, r3
 8004afa:	2340      	movs	r3, #64	@ 0x40
 8004afc:	6093      	str	r3, [r2, #8]
 8004afe:	e31f      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	78fa      	ldrb	r2, [r7, #3]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f002 ff1c 	bl	8007946 <USB_ReadChInterrupts>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	f003 0308 	and.w	r3, r3, #8
 8004b14:	2b08      	cmp	r3, #8
 8004b16:	d11a      	bne.n	8004b4e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004b18:	78fb      	ldrb	r3, [r7, #3]
 8004b1a:	015a      	lsls	r2, r3, #5
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	4413      	add	r3, r2
 8004b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b24:	461a      	mov	r2, r3
 8004b26:	2308      	movs	r3, #8
 8004b28:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334d      	adds	r3, #77	@ 0x4d
 8004b3a:	2206      	movs	r2, #6
 8004b3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	78fa      	ldrb	r2, [r7, #3]
 8004b44:	4611      	mov	r1, r2
 8004b46:	4618      	mov	r0, r3
 8004b48:	f003 fca1 	bl	800848e <USB_HC_Halt>
 8004b4c:	e2f8      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f002 fef5 	bl	8007946 <USB_ReadChInterrupts>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b10      	cmp	r3, #16
 8004b64:	d144      	bne.n	8004bf0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004b66:	78fa      	ldrb	r2, [r7, #3]
 8004b68:	6879      	ldr	r1, [r7, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	1a9b      	subs	r3, r3, r2
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	440b      	add	r3, r1
 8004b74:	3344      	adds	r3, #68	@ 0x44
 8004b76:	2200      	movs	r2, #0
 8004b78:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8004b7a:	78fa      	ldrb	r2, [r7, #3]
 8004b7c:	6879      	ldr	r1, [r7, #4]
 8004b7e:	4613      	mov	r3, r2
 8004b80:	011b      	lsls	r3, r3, #4
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	009b      	lsls	r3, r3, #2
 8004b86:	440b      	add	r3, r1
 8004b88:	334d      	adds	r3, #77	@ 0x4d
 8004b8a:	2204      	movs	r2, #4
 8004b8c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8004b8e:	78fa      	ldrb	r2, [r7, #3]
 8004b90:	6879      	ldr	r1, [r7, #4]
 8004b92:	4613      	mov	r3, r2
 8004b94:	011b      	lsls	r3, r3, #4
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	440b      	add	r3, r1
 8004b9c:	3319      	adds	r3, #25
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d114      	bne.n	8004bce <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004ba4:	78fa      	ldrb	r2, [r7, #3]
 8004ba6:	6879      	ldr	r1, [r7, #4]
 8004ba8:	4613      	mov	r3, r2
 8004baa:	011b      	lsls	r3, r3, #4
 8004bac:	1a9b      	subs	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	3318      	adds	r3, #24
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d109      	bne.n	8004bce <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004bba:	78fa      	ldrb	r2, [r7, #3]
 8004bbc:	6879      	ldr	r1, [r7, #4]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	1a9b      	subs	r3, r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	440b      	add	r3, r1
 8004bc8:	3319      	adds	r3, #25
 8004bca:	2201      	movs	r2, #1
 8004bcc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	4611      	mov	r1, r2
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f003 fc59 	bl	800848e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004be8:	461a      	mov	r2, r3
 8004bea:	2310      	movs	r3, #16
 8004bec:	6093      	str	r3, [r2, #8]
 8004bee:	e2a7      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	78fa      	ldrb	r2, [r7, #3]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f002 fea4 	bl	8007946 <USB_ReadChInterrupts>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c04:	2b80      	cmp	r3, #128	@ 0x80
 8004c06:	f040 8083 	bne.w	8004d10 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	799b      	ldrb	r3, [r3, #6]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d111      	bne.n	8004c36 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8004c12:	78fa      	ldrb	r2, [r7, #3]
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	4613      	mov	r3, r2
 8004c18:	011b      	lsls	r3, r3, #4
 8004c1a:	1a9b      	subs	r3, r3, r2
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	440b      	add	r3, r1
 8004c20:	334d      	adds	r3, #77	@ 0x4d
 8004c22:	2207      	movs	r2, #7
 8004c24:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	78fa      	ldrb	r2, [r7, #3]
 8004c2c:	4611      	mov	r1, r2
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f003 fc2d 	bl	800848e <USB_HC_Halt>
 8004c34:	e062      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8004c36:	78fa      	ldrb	r2, [r7, #3]
 8004c38:	6879      	ldr	r1, [r7, #4]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	011b      	lsls	r3, r3, #4
 8004c3e:	1a9b      	subs	r3, r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	440b      	add	r3, r1
 8004c44:	3344      	adds	r3, #68	@ 0x44
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	1c59      	adds	r1, r3, #1
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4403      	add	r3, r0
 8004c56:	3344      	adds	r3, #68	@ 0x44
 8004c58:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c5a:	78fa      	ldrb	r2, [r7, #3]
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	011b      	lsls	r3, r3, #4
 8004c62:	1a9b      	subs	r3, r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	440b      	add	r3, r1
 8004c68:	3344      	adds	r3, #68	@ 0x44
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d922      	bls.n	8004cb6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004c70:	78fa      	ldrb	r2, [r7, #3]
 8004c72:	6879      	ldr	r1, [r7, #4]
 8004c74:	4613      	mov	r3, r2
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	1a9b      	subs	r3, r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	3344      	adds	r3, #68	@ 0x44
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	6879      	ldr	r1, [r7, #4]
 8004c88:	4613      	mov	r3, r2
 8004c8a:	011b      	lsls	r3, r3, #4
 8004c8c:	1a9b      	subs	r3, r3, r2
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	334c      	adds	r3, #76	@ 0x4c
 8004c94:	2204      	movs	r2, #4
 8004c96:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c98:	78fa      	ldrb	r2, [r7, #3]
 8004c9a:	6879      	ldr	r1, [r7, #4]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	011b      	lsls	r3, r3, #4
 8004ca0:	1a9b      	subs	r3, r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	440b      	add	r3, r1
 8004ca6:	334c      	adds	r3, #76	@ 0x4c
 8004ca8:	781a      	ldrb	r2, [r3, #0]
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	4619      	mov	r1, r3
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f005 ff46 	bl	800ab40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004cb4:	e022      	b.n	8004cfc <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cb6:	78fa      	ldrb	r2, [r7, #3]
 8004cb8:	6879      	ldr	r1, [r7, #4]
 8004cba:	4613      	mov	r3, r2
 8004cbc:	011b      	lsls	r3, r3, #4
 8004cbe:	1a9b      	subs	r3, r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	440b      	add	r3, r1
 8004cc4:	334c      	adds	r3, #76	@ 0x4c
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	015a      	lsls	r2, r3, #5
 8004cce:	693b      	ldr	r3, [r7, #16]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ce0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ce8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004cea:	78fb      	ldrb	r3, [r7, #3]
 8004cec:	015a      	lsls	r2, r3, #5
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	015a      	lsls	r2, r3, #5
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	4413      	add	r3, r2
 8004d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d08:	461a      	mov	r2, r3
 8004d0a:	2380      	movs	r3, #128	@ 0x80
 8004d0c:	6093      	str	r3, [r2, #8]
 8004d0e:	e217      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f002 fe14 	bl	8007946 <USB_ReadChInterrupts>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d28:	d11b      	bne.n	8004d62 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d2a:	78fa      	ldrb	r2, [r7, #3]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	011b      	lsls	r3, r3, #4
 8004d32:	1a9b      	subs	r3, r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	334d      	adds	r3, #77	@ 0x4d
 8004d3a:	2209      	movs	r2, #9
 8004d3c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	78fa      	ldrb	r2, [r7, #3]
 8004d44:	4611      	mov	r1, r2
 8004d46:	4618      	mov	r0, r3
 8004d48:	f003 fba1 	bl	800848e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d58:	461a      	mov	r2, r3
 8004d5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d5e:	6093      	str	r3, [r2, #8]
 8004d60:	e1ee      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	78fa      	ldrb	r2, [r7, #3]
 8004d68:	4611      	mov	r1, r2
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	f002 fdeb 	bl	8007946 <USB_ReadChInterrupts>
 8004d70:	4603      	mov	r3, r0
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	f040 81df 	bne.w	800513a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004d7c:	78fb      	ldrb	r3, [r7, #3]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d88:	461a      	mov	r2, r3
 8004d8a:	2302      	movs	r3, #2
 8004d8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004d8e:	78fa      	ldrb	r2, [r7, #3]
 8004d90:	6879      	ldr	r1, [r7, #4]
 8004d92:	4613      	mov	r3, r2
 8004d94:	011b      	lsls	r3, r3, #4
 8004d96:	1a9b      	subs	r3, r3, r2
 8004d98:	009b      	lsls	r3, r3, #2
 8004d9a:	440b      	add	r3, r1
 8004d9c:	334d      	adds	r3, #77	@ 0x4d
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b01      	cmp	r3, #1
 8004da2:	f040 8093 	bne.w	8004ecc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	334d      	adds	r3, #77	@ 0x4d
 8004db6:	2202      	movs	r2, #2
 8004db8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004dba:	78fa      	ldrb	r2, [r7, #3]
 8004dbc:	6879      	ldr	r1, [r7, #4]
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	011b      	lsls	r3, r3, #4
 8004dc2:	1a9b      	subs	r3, r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	440b      	add	r3, r1
 8004dc8:	334c      	adds	r3, #76	@ 0x4c
 8004dca:	2201      	movs	r2, #1
 8004dcc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004dce:	78fa      	ldrb	r2, [r7, #3]
 8004dd0:	6879      	ldr	r1, [r7, #4]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	1a9b      	subs	r3, r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	440b      	add	r3, r1
 8004ddc:	3326      	adds	r3, #38	@ 0x26
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b02      	cmp	r3, #2
 8004de2:	d00b      	beq.n	8004dfc <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004de4:	78fa      	ldrb	r2, [r7, #3]
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	1a9b      	subs	r3, r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3326      	adds	r3, #38	@ 0x26
 8004df4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004df6:	2b03      	cmp	r3, #3
 8004df8:	f040 8190 	bne.w	800511c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	799b      	ldrb	r3, [r3, #6]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d115      	bne.n	8004e30 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004e04:	78fa      	ldrb	r2, [r7, #3]
 8004e06:	6879      	ldr	r1, [r7, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	011b      	lsls	r3, r3, #4
 8004e0c:	1a9b      	subs	r3, r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	333d      	adds	r3, #61	@ 0x3d
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	78fa      	ldrb	r2, [r7, #3]
 8004e18:	f083 0301 	eor.w	r3, r3, #1
 8004e1c:	b2d8      	uxtb	r0, r3
 8004e1e:	6879      	ldr	r1, [r7, #4]
 8004e20:	4613      	mov	r3, r2
 8004e22:	011b      	lsls	r3, r3, #4
 8004e24:	1a9b      	subs	r3, r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	440b      	add	r3, r1
 8004e2a:	333d      	adds	r3, #61	@ 0x3d
 8004e2c:	4602      	mov	r2, r0
 8004e2e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	799b      	ldrb	r3, [r3, #6]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	f040 8171 	bne.w	800511c <HCD_HC_OUT_IRQHandler+0x954>
 8004e3a:	78fa      	ldrb	r2, [r7, #3]
 8004e3c:	6879      	ldr	r1, [r7, #4]
 8004e3e:	4613      	mov	r3, r2
 8004e40:	011b      	lsls	r3, r3, #4
 8004e42:	1a9b      	subs	r3, r3, r2
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	440b      	add	r3, r1
 8004e48:	3334      	adds	r3, #52	@ 0x34
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	f000 8165 	beq.w	800511c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	3334      	adds	r3, #52	@ 0x34
 8004e62:	6819      	ldr	r1, [r3, #0]
 8004e64:	78fa      	ldrb	r2, [r7, #3]
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	1a9b      	subs	r3, r3, r2
 8004e6e:	009b      	lsls	r3, r3, #2
 8004e70:	4403      	add	r3, r0
 8004e72:	3328      	adds	r3, #40	@ 0x28
 8004e74:	881b      	ldrh	r3, [r3, #0]
 8004e76:	440b      	add	r3, r1
 8004e78:	1e59      	subs	r1, r3, #1
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	6878      	ldr	r0, [r7, #4]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	011b      	lsls	r3, r3, #4
 8004e82:	1a9b      	subs	r3, r3, r2
 8004e84:	009b      	lsls	r3, r3, #2
 8004e86:	4403      	add	r3, r0
 8004e88:	3328      	adds	r3, #40	@ 0x28
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e90:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	f000 813f 	beq.w	800511c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004e9e:	78fa      	ldrb	r2, [r7, #3]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	011b      	lsls	r3, r3, #4
 8004ea6:	1a9b      	subs	r3, r3, r2
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	440b      	add	r3, r1
 8004eac:	333d      	adds	r3, #61	@ 0x3d
 8004eae:	781b      	ldrb	r3, [r3, #0]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	f083 0301 	eor.w	r3, r3, #1
 8004eb6:	b2d8      	uxtb	r0, r3
 8004eb8:	6879      	ldr	r1, [r7, #4]
 8004eba:	4613      	mov	r3, r2
 8004ebc:	011b      	lsls	r3, r3, #4
 8004ebe:	1a9b      	subs	r3, r3, r2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	440b      	add	r3, r1
 8004ec4:	333d      	adds	r3, #61	@ 0x3d
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	701a      	strb	r2, [r3, #0]
 8004eca:	e127      	b.n	800511c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004ecc:	78fa      	ldrb	r2, [r7, #3]
 8004ece:	6879      	ldr	r1, [r7, #4]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	011b      	lsls	r3, r3, #4
 8004ed4:	1a9b      	subs	r3, r3, r2
 8004ed6:	009b      	lsls	r3, r3, #2
 8004ed8:	440b      	add	r3, r1
 8004eda:	334d      	adds	r3, #77	@ 0x4d
 8004edc:	781b      	ldrb	r3, [r3, #0]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d120      	bne.n	8004f24 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ee2:	78fa      	ldrb	r2, [r7, #3]
 8004ee4:	6879      	ldr	r1, [r7, #4]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	011b      	lsls	r3, r3, #4
 8004eea:	1a9b      	subs	r3, r3, r2
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	440b      	add	r3, r1
 8004ef0:	334d      	adds	r3, #77	@ 0x4d
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004ef6:	78fa      	ldrb	r2, [r7, #3]
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	4613      	mov	r3, r2
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	1a9b      	subs	r3, r3, r2
 8004f00:	009b      	lsls	r3, r3, #2
 8004f02:	440b      	add	r3, r1
 8004f04:	331b      	adds	r3, #27
 8004f06:	781b      	ldrb	r3, [r3, #0]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	f040 8107 	bne.w	800511c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f0e:	78fa      	ldrb	r2, [r7, #3]
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	4613      	mov	r3, r2
 8004f14:	011b      	lsls	r3, r3, #4
 8004f16:	1a9b      	subs	r3, r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	440b      	add	r3, r1
 8004f1c:	334c      	adds	r3, #76	@ 0x4c
 8004f1e:	2202      	movs	r2, #2
 8004f20:	701a      	strb	r2, [r3, #0]
 8004f22:	e0fb      	b.n	800511c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004f24:	78fa      	ldrb	r2, [r7, #3]
 8004f26:	6879      	ldr	r1, [r7, #4]
 8004f28:	4613      	mov	r3, r2
 8004f2a:	011b      	lsls	r3, r3, #4
 8004f2c:	1a9b      	subs	r3, r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	334d      	adds	r3, #77	@ 0x4d
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d13a      	bne.n	8004fb0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f3a:	78fa      	ldrb	r2, [r7, #3]
 8004f3c:	6879      	ldr	r1, [r7, #4]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	011b      	lsls	r3, r3, #4
 8004f42:	1a9b      	subs	r3, r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	334d      	adds	r3, #77	@ 0x4d
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f4e:	78fa      	ldrb	r2, [r7, #3]
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	4613      	mov	r3, r2
 8004f54:	011b      	lsls	r3, r3, #4
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	009b      	lsls	r3, r3, #2
 8004f5a:	440b      	add	r3, r1
 8004f5c:	334c      	adds	r3, #76	@ 0x4c
 8004f5e:	2202      	movs	r2, #2
 8004f60:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f62:	78fa      	ldrb	r2, [r7, #3]
 8004f64:	6879      	ldr	r1, [r7, #4]
 8004f66:	4613      	mov	r3, r2
 8004f68:	011b      	lsls	r3, r3, #4
 8004f6a:	1a9b      	subs	r3, r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	440b      	add	r3, r1
 8004f70:	331b      	adds	r3, #27
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	f040 80d1 	bne.w	800511c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	6879      	ldr	r1, [r7, #4]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	440b      	add	r3, r1
 8004f88:	331b      	adds	r3, #27
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004f8e:	78fb      	ldrb	r3, [r7, #3]
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f9a:	685b      	ldr	r3, [r3, #4]
 8004f9c:	78fa      	ldrb	r2, [r7, #3]
 8004f9e:	0151      	lsls	r1, r2, #5
 8004fa0:	693a      	ldr	r2, [r7, #16]
 8004fa2:	440a      	add	r2, r1
 8004fa4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004fac:	6053      	str	r3, [r2, #4]
 8004fae:	e0b5      	b.n	800511c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004fb0:	78fa      	ldrb	r2, [r7, #3]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	1a9b      	subs	r3, r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	334d      	adds	r3, #77	@ 0x4d
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b05      	cmp	r3, #5
 8004fc4:	d114      	bne.n	8004ff0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004fc6:	78fa      	ldrb	r2, [r7, #3]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	011b      	lsls	r3, r3, #4
 8004fce:	1a9b      	subs	r3, r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	334d      	adds	r3, #77	@ 0x4d
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004fda:	78fa      	ldrb	r2, [r7, #3]
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	4613      	mov	r3, r2
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	1a9b      	subs	r3, r3, r2
 8004fe4:	009b      	lsls	r3, r3, #2
 8004fe6:	440b      	add	r3, r1
 8004fe8:	334c      	adds	r3, #76	@ 0x4c
 8004fea:	2202      	movs	r2, #2
 8004fec:	701a      	strb	r2, [r3, #0]
 8004fee:	e095      	b.n	800511c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004ff0:	78fa      	ldrb	r2, [r7, #3]
 8004ff2:	6879      	ldr	r1, [r7, #4]
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	1a9b      	subs	r3, r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	334d      	adds	r3, #77	@ 0x4d
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	2b06      	cmp	r3, #6
 8005004:	d114      	bne.n	8005030 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005006:	78fa      	ldrb	r2, [r7, #3]
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	4613      	mov	r3, r2
 800500c:	011b      	lsls	r3, r3, #4
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	440b      	add	r3, r1
 8005014:	334d      	adds	r3, #77	@ 0x4d
 8005016:	2202      	movs	r2, #2
 8005018:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800501a:	78fa      	ldrb	r2, [r7, #3]
 800501c:	6879      	ldr	r1, [r7, #4]
 800501e:	4613      	mov	r3, r2
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	1a9b      	subs	r3, r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	440b      	add	r3, r1
 8005028:	334c      	adds	r3, #76	@ 0x4c
 800502a:	2205      	movs	r2, #5
 800502c:	701a      	strb	r2, [r3, #0]
 800502e:	e075      	b.n	800511c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005030:	78fa      	ldrb	r2, [r7, #3]
 8005032:	6879      	ldr	r1, [r7, #4]
 8005034:	4613      	mov	r3, r2
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	1a9b      	subs	r3, r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	334d      	adds	r3, #77	@ 0x4d
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	2b07      	cmp	r3, #7
 8005044:	d00a      	beq.n	800505c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005046:	78fa      	ldrb	r2, [r7, #3]
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	4613      	mov	r3, r2
 800504c:	011b      	lsls	r3, r3, #4
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	440b      	add	r3, r1
 8005054:	334d      	adds	r3, #77	@ 0x4d
 8005056:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005058:	2b09      	cmp	r3, #9
 800505a:	d170      	bne.n	800513e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800505c:	78fa      	ldrb	r2, [r7, #3]
 800505e:	6879      	ldr	r1, [r7, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	011b      	lsls	r3, r3, #4
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	334d      	adds	r3, #77	@ 0x4d
 800506c:	2202      	movs	r2, #2
 800506e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005070:	78fa      	ldrb	r2, [r7, #3]
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	4613      	mov	r3, r2
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	1a9b      	subs	r3, r3, r2
 800507a:	009b      	lsls	r3, r3, #2
 800507c:	440b      	add	r3, r1
 800507e:	3344      	adds	r3, #68	@ 0x44
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	6878      	ldr	r0, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	1a9b      	subs	r3, r3, r2
 800508c:	009b      	lsls	r3, r3, #2
 800508e:	4403      	add	r3, r0
 8005090:	3344      	adds	r3, #68	@ 0x44
 8005092:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005094:	78fa      	ldrb	r2, [r7, #3]
 8005096:	6879      	ldr	r1, [r7, #4]
 8005098:	4613      	mov	r3, r2
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	1a9b      	subs	r3, r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	3344      	adds	r3, #68	@ 0x44
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d914      	bls.n	80050d4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	3344      	adds	r3, #68	@ 0x44
 80050ba:	2200      	movs	r2, #0
 80050bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80050be:	78fa      	ldrb	r2, [r7, #3]
 80050c0:	6879      	ldr	r1, [r7, #4]
 80050c2:	4613      	mov	r3, r2
 80050c4:	011b      	lsls	r3, r3, #4
 80050c6:	1a9b      	subs	r3, r3, r2
 80050c8:	009b      	lsls	r3, r3, #2
 80050ca:	440b      	add	r3, r1
 80050cc:	334c      	adds	r3, #76	@ 0x4c
 80050ce:	2204      	movs	r2, #4
 80050d0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80050d2:	e022      	b.n	800511a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80050d4:	78fa      	ldrb	r2, [r7, #3]
 80050d6:	6879      	ldr	r1, [r7, #4]
 80050d8:	4613      	mov	r3, r2
 80050da:	011b      	lsls	r3, r3, #4
 80050dc:	1a9b      	subs	r3, r3, r2
 80050de:	009b      	lsls	r3, r3, #2
 80050e0:	440b      	add	r3, r1
 80050e2:	334c      	adds	r3, #76	@ 0x4c
 80050e4:	2202      	movs	r2, #2
 80050e6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80050e8:	78fb      	ldrb	r3, [r7, #3]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80050fe:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005106:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005108:	78fb      	ldrb	r3, [r7, #3]
 800510a:	015a      	lsls	r2, r3, #5
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4413      	add	r3, r2
 8005110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005114:	461a      	mov	r2, r3
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800511a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800511c:	78fa      	ldrb	r2, [r7, #3]
 800511e:	6879      	ldr	r1, [r7, #4]
 8005120:	4613      	mov	r3, r2
 8005122:	011b      	lsls	r3, r3, #4
 8005124:	1a9b      	subs	r3, r3, r2
 8005126:	009b      	lsls	r3, r3, #2
 8005128:	440b      	add	r3, r1
 800512a:	334c      	adds	r3, #76	@ 0x4c
 800512c:	781a      	ldrb	r2, [r3, #0]
 800512e:	78fb      	ldrb	r3, [r7, #3]
 8005130:	4619      	mov	r1, r3
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f005 fd04 	bl	800ab40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005138:	e002      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800513a:	bf00      	nop
 800513c:	e000      	b.n	8005140 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800513e:	bf00      	nop
  }
}
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b08a      	sub	sp, #40	@ 0x28
 800514a:	af00      	add	r7, sp, #0
 800514c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005156:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6a1b      	ldr	r3, [r3, #32]
 800515e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	f003 030f 	and.w	r3, r3, #15
 8005166:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005168:	69fb      	ldr	r3, [r7, #28]
 800516a:	0c5b      	lsrs	r3, r3, #17
 800516c:	f003 030f 	and.w	r3, r3, #15
 8005170:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	091b      	lsrs	r3, r3, #4
 8005176:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800517a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b02      	cmp	r3, #2
 8005180:	d004      	beq.n	800518c <HCD_RXQLVL_IRQHandler+0x46>
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2b05      	cmp	r3, #5
 8005186:	f000 80b6 	beq.w	80052f6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800518a:	e0b7      	b.n	80052fc <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800518c:	693b      	ldr	r3, [r7, #16]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 80b3 	beq.w	80052fa <HCD_RXQLVL_IRQHandler+0x1b4>
 8005194:	6879      	ldr	r1, [r7, #4]
 8005196:	69ba      	ldr	r2, [r7, #24]
 8005198:	4613      	mov	r3, r2
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	1a9b      	subs	r3, r3, r2
 800519e:	009b      	lsls	r3, r3, #2
 80051a0:	440b      	add	r3, r1
 80051a2:	332c      	adds	r3, #44	@ 0x2c
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 80a7 	beq.w	80052fa <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 80051ac:	6879      	ldr	r1, [r7, #4]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	4613      	mov	r3, r2
 80051b2:	011b      	lsls	r3, r3, #4
 80051b4:	1a9b      	subs	r3, r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	3338      	adds	r3, #56	@ 0x38
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	18d1      	adds	r1, r2, r3
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	4613      	mov	r3, r2
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	1a9b      	subs	r3, r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	4403      	add	r3, r0
 80051d0:	3334      	adds	r3, #52	@ 0x34
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4299      	cmp	r1, r3
 80051d6:	f200 8083 	bhi.w	80052e0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6818      	ldr	r0, [r3, #0]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	332c      	adds	r3, #44	@ 0x2c
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	b292      	uxth	r2, r2
 80051f4:	4619      	mov	r1, r3
 80051f6:	f002 fb3b 	bl	8007870 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80051fa:	6879      	ldr	r1, [r7, #4]
 80051fc:	69ba      	ldr	r2, [r7, #24]
 80051fe:	4613      	mov	r3, r2
 8005200:	011b      	lsls	r3, r3, #4
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	440b      	add	r3, r1
 8005208:	332c      	adds	r3, #44	@ 0x2c
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	693b      	ldr	r3, [r7, #16]
 800520e:	18d1      	adds	r1, r2, r3
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	4613      	mov	r3, r2
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	1a9b      	subs	r3, r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	4403      	add	r3, r0
 800521e:	332c      	adds	r3, #44	@ 0x2c
 8005220:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4613      	mov	r3, r2
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	1a9b      	subs	r3, r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	440b      	add	r3, r1
 8005230:	3338      	adds	r3, #56	@ 0x38
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	18d1      	adds	r1, r2, r3
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	69ba      	ldr	r2, [r7, #24]
 800523c:	4613      	mov	r3, r2
 800523e:	011b      	lsls	r3, r3, #4
 8005240:	1a9b      	subs	r3, r3, r2
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	4403      	add	r3, r0
 8005246:	3338      	adds	r3, #56	@ 0x38
 8005248:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800524a:	69bb      	ldr	r3, [r7, #24]
 800524c:	015a      	lsls	r2, r3, #5
 800524e:	6a3b      	ldr	r3, [r7, #32]
 8005250:	4413      	add	r3, r2
 8005252:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	0cdb      	lsrs	r3, r3, #19
 800525a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800525e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005260:	6879      	ldr	r1, [r7, #4]
 8005262:	69ba      	ldr	r2, [r7, #24]
 8005264:	4613      	mov	r3, r2
 8005266:	011b      	lsls	r3, r3, #4
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	440b      	add	r3, r1
 800526e:	3328      	adds	r3, #40	@ 0x28
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	461a      	mov	r2, r3
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	4293      	cmp	r3, r2
 8005278:	d13f      	bne.n	80052fa <HCD_RXQLVL_IRQHandler+0x1b4>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d03c      	beq.n	80052fa <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	4413      	add	r3, r2
 8005288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005296:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800529e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80052a0:	69bb      	ldr	r3, [r7, #24]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	6a3b      	ldr	r3, [r7, #32]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ac:	461a      	mov	r2, r3
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	69ba      	ldr	r2, [r7, #24]
 80052b6:	4613      	mov	r3, r2
 80052b8:	011b      	lsls	r3, r3, #4
 80052ba:	1a9b      	subs	r3, r3, r2
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	440b      	add	r3, r1
 80052c0:	333c      	adds	r3, #60	@ 0x3c
 80052c2:	781b      	ldrb	r3, [r3, #0]
 80052c4:	f083 0301 	eor.w	r3, r3, #1
 80052c8:	b2d8      	uxtb	r0, r3
 80052ca:	6879      	ldr	r1, [r7, #4]
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	333c      	adds	r3, #60	@ 0x3c
 80052da:	4602      	mov	r2, r0
 80052dc:	701a      	strb	r2, [r3, #0]
      break;
 80052de:	e00c      	b.n	80052fa <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	69ba      	ldr	r2, [r7, #24]
 80052e4:	4613      	mov	r3, r2
 80052e6:	011b      	lsls	r3, r3, #4
 80052e8:	1a9b      	subs	r3, r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	334c      	adds	r3, #76	@ 0x4c
 80052f0:	2204      	movs	r2, #4
 80052f2:	701a      	strb	r2, [r3, #0]
      break;
 80052f4:	e001      	b.n	80052fa <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80052f6:	bf00      	nop
 80052f8:	e000      	b.n	80052fc <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80052fa:	bf00      	nop
  }
}
 80052fc:	bf00      	nop
 80052fe:	3728      	adds	r7, #40	@ 0x28
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b086      	sub	sp, #24
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005330:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f003 0302 	and.w	r3, r3, #2
 8005338:	2b02      	cmp	r3, #2
 800533a:	d10b      	bne.n	8005354 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d102      	bne.n	800534c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f005 fbde 	bl	800ab08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f043 0302 	orr.w	r3, r3, #2
 8005352:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f003 0308 	and.w	r3, r3, #8
 800535a:	2b08      	cmp	r3, #8
 800535c:	d132      	bne.n	80053c4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800535e:	68bb      	ldr	r3, [r7, #8]
 8005360:	f043 0308 	orr.w	r3, r3, #8
 8005364:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	f003 0304 	and.w	r3, r3, #4
 800536c:	2b04      	cmp	r3, #4
 800536e:	d126      	bne.n	80053be <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	7a5b      	ldrb	r3, [r3, #9]
 8005374:	2b02      	cmp	r3, #2
 8005376:	d113      	bne.n	80053a0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800537e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005382:	d106      	bne.n	8005392 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2102      	movs	r1, #2
 800538a:	4618      	mov	r0, r3
 800538c:	f002 fc00 	bl	8007b90 <USB_InitFSLSPClkSel>
 8005390:	e011      	b.n	80053b6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2101      	movs	r1, #1
 8005398:	4618      	mov	r0, r3
 800539a:	f002 fbf9 	bl	8007b90 <USB_InitFSLSPClkSel>
 800539e:	e00a      	b.n	80053b6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	79db      	ldrb	r3, [r3, #7]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d106      	bne.n	80053b6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053ae:	461a      	mov	r2, r3
 80053b0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80053b4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f005 fbd0 	bl	800ab5c <HAL_HCD_PortEnabled_Callback>
 80053bc:	e002      	b.n	80053c4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f005 fbda 	bl	800ab78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b20      	cmp	r3, #32
 80053cc:	d103      	bne.n	80053d6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f043 0320 	orr.w	r3, r3, #32
 80053d4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80053dc:	461a      	mov	r2, r3
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	6013      	str	r3, [r2, #0]
}
 80053e2:	bf00      	nop
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
	...

080053ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80053fa:	2301      	movs	r3, #1
 80053fc:	e12b      	b.n	8005656 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d106      	bne.n	8005418 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7fd f8be 	bl	8002594 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2224      	movs	r2, #36	@ 0x24
 800541c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800543e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800544e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005450:	f001 fa20 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8005454:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4a81      	ldr	r2, [pc, #516]	@ (8005660 <HAL_I2C_Init+0x274>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d807      	bhi.n	8005470 <HAL_I2C_Init+0x84>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	4a80      	ldr	r2, [pc, #512]	@ (8005664 <HAL_I2C_Init+0x278>)
 8005464:	4293      	cmp	r3, r2
 8005466:	bf94      	ite	ls
 8005468:	2301      	movls	r3, #1
 800546a:	2300      	movhi	r3, #0
 800546c:	b2db      	uxtb	r3, r3
 800546e:	e006      	b.n	800547e <HAL_I2C_Init+0x92>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	4a7d      	ldr	r2, [pc, #500]	@ (8005668 <HAL_I2C_Init+0x27c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	bf94      	ite	ls
 8005478:	2301      	movls	r3, #1
 800547a:	2300      	movhi	r3, #0
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e0e7      	b.n	8005656 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	4a78      	ldr	r2, [pc, #480]	@ (800566c <HAL_I2C_Init+0x280>)
 800548a:	fba2 2303 	umull	r2, r3, r2, r3
 800548e:	0c9b      	lsrs	r3, r3, #18
 8005490:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68ba      	ldr	r2, [r7, #8]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	4a6a      	ldr	r2, [pc, #424]	@ (8005660 <HAL_I2C_Init+0x274>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d802      	bhi.n	80054c0 <HAL_I2C_Init+0xd4>
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	3301      	adds	r3, #1
 80054be:	e009      	b.n	80054d4 <HAL_I2C_Init+0xe8>
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80054c6:	fb02 f303 	mul.w	r3, r2, r3
 80054ca:	4a69      	ldr	r2, [pc, #420]	@ (8005670 <HAL_I2C_Init+0x284>)
 80054cc:	fba2 2303 	umull	r2, r3, r2, r3
 80054d0:	099b      	lsrs	r3, r3, #6
 80054d2:	3301      	adds	r3, #1
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	6812      	ldr	r2, [r2, #0]
 80054d8:	430b      	orrs	r3, r1
 80054da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69db      	ldr	r3, [r3, #28]
 80054e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80054e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	495c      	ldr	r1, [pc, #368]	@ (8005660 <HAL_I2C_Init+0x274>)
 80054f0:	428b      	cmp	r3, r1
 80054f2:	d819      	bhi.n	8005528 <HAL_I2C_Init+0x13c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	1e59      	subs	r1, r3, #1
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005502:	1c59      	adds	r1, r3, #1
 8005504:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005508:	400b      	ands	r3, r1
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <HAL_I2C_Init+0x138>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	1e59      	subs	r1, r3, #1
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	fbb1 f3f3 	udiv	r3, r1, r3
 800551c:	3301      	adds	r3, #1
 800551e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005522:	e051      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005524:	2304      	movs	r3, #4
 8005526:	e04f      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d111      	bne.n	8005554 <HAL_I2C_Init+0x168>
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	1e58      	subs	r0, r3, #1
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6859      	ldr	r1, [r3, #4]
 8005538:	460b      	mov	r3, r1
 800553a:	005b      	lsls	r3, r3, #1
 800553c:	440b      	add	r3, r1
 800553e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005542:	3301      	adds	r3, #1
 8005544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005548:	2b00      	cmp	r3, #0
 800554a:	bf0c      	ite	eq
 800554c:	2301      	moveq	r3, #1
 800554e:	2300      	movne	r3, #0
 8005550:	b2db      	uxtb	r3, r3
 8005552:	e012      	b.n	800557a <HAL_I2C_Init+0x18e>
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1e58      	subs	r0, r3, #1
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6859      	ldr	r1, [r3, #4]
 800555c:	460b      	mov	r3, r1
 800555e:	009b      	lsls	r3, r3, #2
 8005560:	440b      	add	r3, r1
 8005562:	0099      	lsls	r1, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	fbb0 f3f3 	udiv	r3, r0, r3
 800556a:	3301      	adds	r3, #1
 800556c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d001      	beq.n	8005582 <HAL_I2C_Init+0x196>
 800557e:	2301      	movs	r3, #1
 8005580:	e022      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d10e      	bne.n	80055a8 <HAL_I2C_Init+0x1bc>
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	1e58      	subs	r0, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	460b      	mov	r3, r1
 8005594:	005b      	lsls	r3, r3, #1
 8005596:	440b      	add	r3, r1
 8005598:	fbb0 f3f3 	udiv	r3, r0, r3
 800559c:	3301      	adds	r3, #1
 800559e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055a6:	e00f      	b.n	80055c8 <HAL_I2C_Init+0x1dc>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	1e58      	subs	r0, r3, #1
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6859      	ldr	r1, [r3, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	0099      	lsls	r1, r3, #2
 80055b8:	440b      	add	r3, r1
 80055ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80055be:	3301      	adds	r3, #1
 80055c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80055c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80055c8:	6879      	ldr	r1, [r7, #4]
 80055ca:	6809      	ldr	r1, [r1, #0]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6a1b      	ldr	r3, [r3, #32]
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80055f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80055fa:	687a      	ldr	r2, [r7, #4]
 80055fc:	6911      	ldr	r1, [r2, #16]
 80055fe:	687a      	ldr	r2, [r7, #4]
 8005600:	68d2      	ldr	r2, [r2, #12]
 8005602:	4311      	orrs	r1, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6812      	ldr	r2, [r2, #0]
 8005608:	430b      	orrs	r3, r1
 800560a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695a      	ldr	r2, [r3, #20]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	431a      	orrs	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f042 0201 	orr.w	r2, r2, #1
 8005636:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2200      	movs	r2, #0
 800563c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	3710      	adds	r7, #16
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	000186a0 	.word	0x000186a0
 8005664:	001e847f 	.word	0x001e847f
 8005668:	003d08ff 	.word	0x003d08ff
 800566c:	431bde83 	.word	0x431bde83
 8005670:	10624dd3 	.word	0x10624dd3

08005674 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b088      	sub	sp, #32
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e128      	b.n	80058d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800568c:	b2db      	uxtb	r3, r3
 800568e:	2b00      	cmp	r3, #0
 8005690:	d109      	bne.n	80056a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a90      	ldr	r2, [pc, #576]	@ (80058e0 <HAL_I2S_Init+0x26c>)
 800569e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fc ffbf 	bl	8002624 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2202      	movs	r2, #2
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	69db      	ldr	r3, [r3, #28]
 80056b4:	687a      	ldr	r2, [r7, #4]
 80056b6:	6812      	ldr	r2, [r2, #0]
 80056b8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80056bc:	f023 030f 	bic.w	r3, r3, #15
 80056c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2202      	movs	r2, #2
 80056c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	695b      	ldr	r3, [r3, #20]
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d060      	beq.n	8005794 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d102      	bne.n	80056e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80056da:	2310      	movs	r3, #16
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	e001      	b.n	80056e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80056e0:	2320      	movs	r3, #32
 80056e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d802      	bhi.n	80056f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80056f2:	2001      	movs	r0, #1
 80056f4:	f001 f9d8 	bl	8006aa8 <HAL_RCCEx_GetPeriphCLKFreq>
 80056f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	691b      	ldr	r3, [r3, #16]
 80056fe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005702:	d125      	bne.n	8005750 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	68db      	ldr	r3, [r3, #12]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d010      	beq.n	800572e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	68fa      	ldr	r2, [r7, #12]
 8005712:	fbb2 f2f3 	udiv	r2, r2, r3
 8005716:	4613      	mov	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	4413      	add	r3, r2
 800571c:	005b      	lsls	r3, r3, #1
 800571e:	461a      	mov	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	fbb2 f3f3 	udiv	r3, r2, r3
 8005728:	3305      	adds	r3, #5
 800572a:	613b      	str	r3, [r7, #16]
 800572c:	e01f      	b.n	800576e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	00db      	lsls	r3, r3, #3
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	fbb2 f2f3 	udiv	r2, r2, r3
 8005738:	4613      	mov	r3, r2
 800573a:	009b      	lsls	r3, r3, #2
 800573c:	4413      	add	r3, r2
 800573e:	005b      	lsls	r3, r3, #1
 8005740:	461a      	mov	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	fbb2 f3f3 	udiv	r3, r2, r3
 800574a:	3305      	adds	r3, #5
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	e00e      	b.n	800576e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	697b      	ldr	r3, [r7, #20]
 8005754:	fbb2 f2f3 	udiv	r2, r2, r3
 8005758:	4613      	mov	r3, r2
 800575a:	009b      	lsls	r3, r3, #2
 800575c:	4413      	add	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	695b      	ldr	r3, [r3, #20]
 8005766:	fbb2 f3f3 	udiv	r3, r2, r3
 800576a:	3305      	adds	r3, #5
 800576c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4a5c      	ldr	r2, [pc, #368]	@ (80058e4 <HAL_I2S_Init+0x270>)
 8005772:	fba2 2303 	umull	r2, r3, r2, r3
 8005776:	08db      	lsrs	r3, r3, #3
 8005778:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	085b      	lsrs	r3, r3, #1
 800578a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	021b      	lsls	r3, r3, #8
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	e003      	b.n	800579c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005794:	2302      	movs	r3, #2
 8005796:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005798:	2300      	movs	r3, #0
 800579a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	2b01      	cmp	r3, #1
 80057a0:	d902      	bls.n	80057a8 <HAL_I2S_Init+0x134>
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	2bff      	cmp	r3, #255	@ 0xff
 80057a6:	d907      	bls.n	80057b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057ac:	f043 0210 	orr.w	r2, r3, #16
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80057b4:	2301      	movs	r3, #1
 80057b6:	e08f      	b.n	80058d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	691a      	ldr	r2, [r3, #16]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	ea42 0103 	orr.w	r1, r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69fa      	ldr	r2, [r7, #28]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	69db      	ldr	r3, [r3, #28]
 80057d2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80057d6:	f023 030f 	bic.w	r3, r3, #15
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6851      	ldr	r1, [r2, #4]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	4311      	orrs	r1, r2
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	68d2      	ldr	r2, [r2, #12]
 80057e8:	4311      	orrs	r1, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6992      	ldr	r2, [r2, #24]
 80057ee:	430a      	orrs	r2, r1
 80057f0:	431a      	orrs	r2, r3
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d161      	bne.n	80058c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a38      	ldr	r2, [pc, #224]	@ (80058e8 <HAL_I2S_Init+0x274>)
 8005808:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a37      	ldr	r2, [pc, #220]	@ (80058ec <HAL_I2S_Init+0x278>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d101      	bne.n	8005818 <HAL_I2S_Init+0x1a4>
 8005814:	4b36      	ldr	r3, [pc, #216]	@ (80058f0 <HAL_I2S_Init+0x27c>)
 8005816:	e001      	b.n	800581c <HAL_I2S_Init+0x1a8>
 8005818:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800581c:	69db      	ldr	r3, [r3, #28]
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	6812      	ldr	r2, [r2, #0]
 8005822:	4932      	ldr	r1, [pc, #200]	@ (80058ec <HAL_I2S_Init+0x278>)
 8005824:	428a      	cmp	r2, r1
 8005826:	d101      	bne.n	800582c <HAL_I2S_Init+0x1b8>
 8005828:	4a31      	ldr	r2, [pc, #196]	@ (80058f0 <HAL_I2S_Init+0x27c>)
 800582a:	e001      	b.n	8005830 <HAL_I2S_Init+0x1bc>
 800582c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005830:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005834:	f023 030f 	bic.w	r3, r3, #15
 8005838:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a2b      	ldr	r2, [pc, #172]	@ (80058ec <HAL_I2S_Init+0x278>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_I2S_Init+0x1d4>
 8005844:	4b2a      	ldr	r3, [pc, #168]	@ (80058f0 <HAL_I2S_Init+0x27c>)
 8005846:	e001      	b.n	800584c <HAL_I2S_Init+0x1d8>
 8005848:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800584c:	2202      	movs	r2, #2
 800584e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a25      	ldr	r2, [pc, #148]	@ (80058ec <HAL_I2S_Init+0x278>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d101      	bne.n	800585e <HAL_I2S_Init+0x1ea>
 800585a:	4b25      	ldr	r3, [pc, #148]	@ (80058f0 <HAL_I2S_Init+0x27c>)
 800585c:	e001      	b.n	8005862 <HAL_I2S_Init+0x1ee>
 800585e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800586e:	d003      	beq.n	8005878 <HAL_I2S_Init+0x204>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d103      	bne.n	8005880 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005878:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800587c:	613b      	str	r3, [r7, #16]
 800587e:	e001      	b.n	8005884 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	689b      	ldr	r3, [r3, #8]
 800588c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800588e:	4313      	orrs	r3, r2
 8005890:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005898:	4313      	orrs	r3, r2
 800589a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80058a2:	4313      	orrs	r3, r2
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	897b      	ldrh	r3, [r7, #10]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	b29b      	uxth	r3, r3
 80058ac:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80058b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a0d      	ldr	r2, [pc, #52]	@ (80058ec <HAL_I2S_Init+0x278>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <HAL_I2S_Init+0x24c>
 80058bc:	4b0c      	ldr	r3, [pc, #48]	@ (80058f0 <HAL_I2S_Init+0x27c>)
 80058be:	e001      	b.n	80058c4 <HAL_I2S_Init+0x250>
 80058c0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058c4:	897a      	ldrh	r2, [r7, #10]
 80058c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2201      	movs	r2, #1
 80058d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3720      	adds	r7, #32
 80058dc:	46bd      	mov	sp, r7
 80058de:	bd80      	pop	{r7, pc}
 80058e0:	080059eb 	.word	0x080059eb
 80058e4:	cccccccd 	.word	0xcccccccd
 80058e8:	08005b01 	.word	0x08005b01
 80058ec:	40003800 	.word	0x40003800
 80058f0:	40003400 	.word	0x40003400

080058f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800593c:	881a      	ldrh	r2, [r3, #0]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005948:	1c9a      	adds	r2, r3, #2
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005952:	b29b      	uxth	r3, r3
 8005954:	3b01      	subs	r3, #1
 8005956:	b29a      	uxth	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005960:	b29b      	uxth	r3, r3
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10e      	bne.n	8005984 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	685a      	ldr	r2, [r3, #4]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005974:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2201      	movs	r2, #1
 800597a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff ffb8 	bl	80058f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005984:	bf00      	nop
 8005986:	3708      	adds	r7, #8
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	68da      	ldr	r2, [r3, #12]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800599e:	b292      	uxth	r2, r2
 80059a0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a6:	1c9a      	adds	r2, r3, #2
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10e      	bne.n	80059e2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685a      	ldr	r2, [r3, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059d2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f7ff ff93 	bl	8005908 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80059e2:	bf00      	nop
 80059e4:	3708      	adds	r7, #8
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}

080059ea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b086      	sub	sp, #24
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b04      	cmp	r3, #4
 8005a04:	d13a      	bne.n	8005a7c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d109      	bne.n	8005a24 <I2S_IRQHandler+0x3a>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a1a:	2b40      	cmp	r3, #64	@ 0x40
 8005a1c:	d102      	bne.n	8005a24 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff ffb4 	bl	800598c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a2a:	2b40      	cmp	r3, #64	@ 0x40
 8005a2c:	d126      	bne.n	8005a7c <I2S_IRQHandler+0x92>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	685b      	ldr	r3, [r3, #4]
 8005a34:	f003 0320 	and.w	r3, r3, #32
 8005a38:	2b20      	cmp	r3, #32
 8005a3a:	d11f      	bne.n	8005a7c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685a      	ldr	r2, [r3, #4]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005a4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	613b      	str	r3, [r7, #16]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68db      	ldr	r3, [r3, #12]
 8005a56:	613b      	str	r3, [r7, #16]
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2201      	movs	r2, #1
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a6e:	f043 0202 	orr.w	r2, r3, #2
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f7ff ff50 	bl	800591c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	2b03      	cmp	r3, #3
 8005a86:	d136      	bne.n	8005af6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	f003 0302 	and.w	r3, r3, #2
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d109      	bne.n	8005aa6 <I2S_IRQHandler+0xbc>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a9c:	2b80      	cmp	r3, #128	@ 0x80
 8005a9e:	d102      	bne.n	8005aa6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f7ff ff45 	bl	8005930 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b08      	cmp	r3, #8
 8005aae:	d122      	bne.n	8005af6 <I2S_IRQHandler+0x10c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f003 0320 	and.w	r3, r3, #32
 8005aba:	2b20      	cmp	r3, #32
 8005abc:	d11b      	bne.n	8005af6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	685a      	ldr	r2, [r3, #4]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005acc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	60fb      	str	r3, [r7, #12]
 8005ada:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005ae8:	f043 0204 	orr.w	r2, r3, #4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f7ff ff13 	bl	800591c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005af6:	bf00      	nop
 8005af8:	3718      	adds	r7, #24
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
	...

08005b00 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a92      	ldr	r2, [pc, #584]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d101      	bne.n	8005b1e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005b1a:	4b92      	ldr	r3, [pc, #584]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b1c:	e001      	b.n	8005b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005b1e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a8b      	ldr	r2, [pc, #556]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d101      	bne.n	8005b3c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005b38:	4b8a      	ldr	r3, [pc, #552]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b3a:	e001      	b.n	8005b40 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005b3c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005b4c:	d004      	beq.n	8005b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f040 8099 	bne.w	8005c8a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d107      	bne.n	8005b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d002      	beq.n	8005b72 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f925 	bl	8005dbc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d107      	bne.n	8005b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005b7c:	693b      	ldr	r3, [r7, #16]
 8005b7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d002      	beq.n	8005b8c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 f9c8 	bl	8005f1c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b92:	2b40      	cmp	r3, #64	@ 0x40
 8005b94:	d13a      	bne.n	8005c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d035      	beq.n	8005c0c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a6e      	ldr	r2, [pc, #440]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d101      	bne.n	8005bae <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005baa:	4b6e      	ldr	r3, [pc, #440]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bac:	e001      	b.n	8005bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005bae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bb2:	685a      	ldr	r2, [r3, #4]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4969      	ldr	r1, [pc, #420]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bba:	428b      	cmp	r3, r1
 8005bbc:	d101      	bne.n	8005bc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005bbe:	4b69      	ldr	r3, [pc, #420]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bc0:	e001      	b.n	8005bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005bc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005bc6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005bca:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685a      	ldr	r2, [r3, #4]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005bda:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005bdc:	2300      	movs	r3, #0
 8005bde:	60fb      	str	r3, [r7, #12]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	60fb      	str	r3, [r7, #12]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2201      	movs	r2, #1
 8005bf6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bfe:	f043 0202 	orr.w	r2, r3, #2
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7ff fe88 	bl	800591c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	f003 0308 	and.w	r3, r3, #8
 8005c12:	2b08      	cmp	r3, #8
 8005c14:	f040 80c3 	bne.w	8005d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f003 0320 	and.w	r3, r3, #32
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 80bd 	beq.w	8005d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005c32:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a49      	ldr	r2, [pc, #292]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005c3e:	4b49      	ldr	r3, [pc, #292]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c40:	e001      	b.n	8005c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005c42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4944      	ldr	r1, [pc, #272]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c4e:	428b      	cmp	r3, r1
 8005c50:	d101      	bne.n	8005c56 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005c52:	4b44      	ldr	r3, [pc, #272]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c54:	e001      	b.n	8005c5a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005c56:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005c5a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005c5e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005c60:	2300      	movs	r3, #0
 8005c62:	60bb      	str	r3, [r7, #8]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	60bb      	str	r3, [r7, #8]
 8005c6c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c7a:	f043 0204 	orr.w	r2, r3, #4
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f7ff fe4a 	bl	800591c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c88:	e089      	b.n	8005d9e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	f003 0302 	and.w	r3, r3, #2
 8005c90:	2b02      	cmp	r3, #2
 8005c92:	d107      	bne.n	8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d002      	beq.n	8005ca4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 f8be 	bl	8005e20 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d107      	bne.n	8005cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 f8fd 	bl	8005eb8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005cbe:	69fb      	ldr	r3, [r7, #28]
 8005cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cc4:	2b40      	cmp	r3, #64	@ 0x40
 8005cc6:	d12f      	bne.n	8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	f003 0320 	and.w	r3, r3, #32
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d02a      	beq.n	8005d28 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005ce0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d101      	bne.n	8005cf0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005cec:	4b1d      	ldr	r3, [pc, #116]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005cee:	e001      	b.n	8005cf4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005cf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005cf4:	685a      	ldr	r2, [r3, #4]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4919      	ldr	r1, [pc, #100]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005cfc:	428b      	cmp	r3, r1
 8005cfe:	d101      	bne.n	8005d04 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005d00:	4b18      	ldr	r3, [pc, #96]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d02:	e001      	b.n	8005d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005d04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d0c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1a:	f043 0202 	orr.w	r2, r3, #2
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f7ff fdfa 	bl	800591c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005d28:	69bb      	ldr	r3, [r7, #24]
 8005d2a:	f003 0308 	and.w	r3, r3, #8
 8005d2e:	2b08      	cmp	r3, #8
 8005d30:	d136      	bne.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 0320 	and.w	r3, r3, #32
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d031      	beq.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a07      	ldr	r2, [pc, #28]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d101      	bne.n	8005d4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005d46:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d48:	e001      	b.n	8005d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005d4a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4902      	ldr	r1, [pc, #8]	@ (8005d60 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005d56:	428b      	cmp	r3, r1
 8005d58:	d106      	bne.n	8005d68 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005d5a:	4b02      	ldr	r3, [pc, #8]	@ (8005d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005d5c:	e006      	b.n	8005d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005d5e:	bf00      	nop
 8005d60:	40003800 	.word	0x40003800
 8005d64:	40003400 	.word	0x40003400
 8005d68:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005d6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005d70:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005d80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2201      	movs	r2, #1
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d8e:	f043 0204 	orr.w	r2, r3, #4
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f7ff fdc0 	bl	800591c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d9c:	e000      	b.n	8005da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d9e:	bf00      	nop
}
 8005da0:	bf00      	nop
 8005da2:	3720      	adds	r7, #32
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005db0:	bf00      	nop
 8005db2:	370c      	adds	r7, #12
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b082      	sub	sp, #8
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dc8:	1c99      	adds	r1, r3, #2
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	6251      	str	r1, [r2, #36]	@ 0x24
 8005dce:	881a      	ldrh	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005dda:	b29b      	uxth	r3, r3
 8005ddc:	3b01      	subs	r3, #1
 8005dde:	b29a      	uxth	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d113      	bne.n	8005e16 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005dfc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d106      	bne.n	8005e16 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f7ff ffc9 	bl	8005da8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e16:	bf00      	nop
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
	...

08005e20 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2c:	1c99      	adds	r1, r3, #2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6251      	str	r1, [r2, #36]	@ 0x24
 8005e32:	8819      	ldrh	r1, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4a1d      	ldr	r2, [pc, #116]	@ (8005eb0 <I2SEx_TxISR_I2SExt+0x90>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d101      	bne.n	8005e42 <I2SEx_TxISR_I2SExt+0x22>
 8005e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8005eb4 <I2SEx_TxISR_I2SExt+0x94>)
 8005e40:	e001      	b.n	8005e46 <I2SEx_TxISR_I2SExt+0x26>
 8005e42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e46:	460a      	mov	r2, r1
 8005e48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e4e:	b29b      	uxth	r3, r3
 8005e50:	3b01      	subs	r3, #1
 8005e52:	b29a      	uxth	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e5c:	b29b      	uxth	r3, r3
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d121      	bne.n	8005ea6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a12      	ldr	r2, [pc, #72]	@ (8005eb0 <I2SEx_TxISR_I2SExt+0x90>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d101      	bne.n	8005e70 <I2SEx_TxISR_I2SExt+0x50>
 8005e6c:	4b11      	ldr	r3, [pc, #68]	@ (8005eb4 <I2SEx_TxISR_I2SExt+0x94>)
 8005e6e:	e001      	b.n	8005e74 <I2SEx_TxISR_I2SExt+0x54>
 8005e70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	490d      	ldr	r1, [pc, #52]	@ (8005eb0 <I2SEx_TxISR_I2SExt+0x90>)
 8005e7c:	428b      	cmp	r3, r1
 8005e7e:	d101      	bne.n	8005e84 <I2SEx_TxISR_I2SExt+0x64>
 8005e80:	4b0c      	ldr	r3, [pc, #48]	@ (8005eb4 <I2SEx_TxISR_I2SExt+0x94>)
 8005e82:	e001      	b.n	8005e88 <I2SEx_TxISR_I2SExt+0x68>
 8005e84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005e88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005e8c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff ff81 	bl	8005da8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	40003800 	.word	0x40003800
 8005eb4:	40003400 	.word	0x40003400

08005eb8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	68d8      	ldr	r0, [r3, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	1c99      	adds	r1, r3, #2
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005ed0:	b282      	uxth	r2, r0
 8005ed2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ed8:	b29b      	uxth	r3, r3
 8005eda:	3b01      	subs	r3, #1
 8005edc:	b29a      	uxth	r2, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d113      	bne.n	8005f14 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005efa:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f00:	b29b      	uxth	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7ff ff4a 	bl	8005da8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f14:	bf00      	nop
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	4a20      	ldr	r2, [pc, #128]	@ (8005fac <I2SEx_RxISR_I2SExt+0x90>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d101      	bne.n	8005f32 <I2SEx_RxISR_I2SExt+0x16>
 8005f2e:	4b20      	ldr	r3, [pc, #128]	@ (8005fb0 <I2SEx_RxISR_I2SExt+0x94>)
 8005f30:	e001      	b.n	8005f36 <I2SEx_RxISR_I2SExt+0x1a>
 8005f32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f36:	68d8      	ldr	r0, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f3c:	1c99      	adds	r1, r3, #2
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005f42:	b282      	uxth	r2, r0
 8005f44:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	b29a      	uxth	r2, r3
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d121      	bne.n	8005fa2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a12      	ldr	r2, [pc, #72]	@ (8005fac <I2SEx_RxISR_I2SExt+0x90>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d101      	bne.n	8005f6c <I2SEx_RxISR_I2SExt+0x50>
 8005f68:	4b11      	ldr	r3, [pc, #68]	@ (8005fb0 <I2SEx_RxISR_I2SExt+0x94>)
 8005f6a:	e001      	b.n	8005f70 <I2SEx_RxISR_I2SExt+0x54>
 8005f6c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	490d      	ldr	r1, [pc, #52]	@ (8005fac <I2SEx_RxISR_I2SExt+0x90>)
 8005f78:	428b      	cmp	r3, r1
 8005f7a:	d101      	bne.n	8005f80 <I2SEx_RxISR_I2SExt+0x64>
 8005f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8005fb0 <I2SEx_RxISR_I2SExt+0x94>)
 8005f7e:	e001      	b.n	8005f84 <I2SEx_RxISR_I2SExt+0x68>
 8005f80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005f84:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005f88:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f8e:	b29b      	uxth	r3, r3
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d106      	bne.n	8005fa2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f7ff ff03 	bl	8005da8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fa2:	bf00      	nop
 8005fa4:	3708      	adds	r7, #8
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
 8005faa:	bf00      	nop
 8005fac:	40003800 	.word	0x40003800
 8005fb0:	40003400 	.word	0x40003400

08005fb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b086      	sub	sp, #24
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e267      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0301 	and.w	r3, r3, #1
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d075      	beq.n	80060be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fd2:	4b88      	ldr	r3, [pc, #544]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
 8005fda:	2b04      	cmp	r3, #4
 8005fdc:	d00c      	beq.n	8005ff8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fde:	4b85      	ldr	r3, [pc, #532]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	689b      	ldr	r3, [r3, #8]
 8005fe2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005fe6:	2b08      	cmp	r3, #8
 8005fe8:	d112      	bne.n	8006010 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fea:	4b82      	ldr	r3, [pc, #520]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ff2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005ff6:	d10b      	bne.n	8006010 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ff8:	4b7e      	ldr	r3, [pc, #504]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d05b      	beq.n	80060bc <HAL_RCC_OscConfig+0x108>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	2b00      	cmp	r3, #0
 800600a:	d157      	bne.n	80060bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	e242      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006018:	d106      	bne.n	8006028 <HAL_RCC_OscConfig+0x74>
 800601a:	4b76      	ldr	r3, [pc, #472]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a75      	ldr	r2, [pc, #468]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006020:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006024:	6013      	str	r3, [r2, #0]
 8006026:	e01d      	b.n	8006064 <HAL_RCC_OscConfig+0xb0>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006030:	d10c      	bne.n	800604c <HAL_RCC_OscConfig+0x98>
 8006032:	4b70      	ldr	r3, [pc, #448]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a6f      	ldr	r2, [pc, #444]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006038:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	4b6d      	ldr	r3, [pc, #436]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a6c      	ldr	r2, [pc, #432]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006044:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006048:	6013      	str	r3, [r2, #0]
 800604a:	e00b      	b.n	8006064 <HAL_RCC_OscConfig+0xb0>
 800604c:	4b69      	ldr	r3, [pc, #420]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a68      	ldr	r2, [pc, #416]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006056:	6013      	str	r3, [r2, #0]
 8006058:	4b66      	ldr	r3, [pc, #408]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a65      	ldr	r2, [pc, #404]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 800605e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006062:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d013      	beq.n	8006094 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606c:	f7fc fd92 	bl	8002b94 <HAL_GetTick>
 8006070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006072:	e008      	b.n	8006086 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006074:	f7fc fd8e 	bl	8002b94 <HAL_GetTick>
 8006078:	4602      	mov	r2, r0
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	1ad3      	subs	r3, r2, r3
 800607e:	2b64      	cmp	r3, #100	@ 0x64
 8006080:	d901      	bls.n	8006086 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006082:	2303      	movs	r3, #3
 8006084:	e207      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006086:	4b5b      	ldr	r3, [pc, #364]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d0f0      	beq.n	8006074 <HAL_RCC_OscConfig+0xc0>
 8006092:	e014      	b.n	80060be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006094:	f7fc fd7e 	bl	8002b94 <HAL_GetTick>
 8006098:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800609a:	e008      	b.n	80060ae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800609c:	f7fc fd7a 	bl	8002b94 <HAL_GetTick>
 80060a0:	4602      	mov	r2, r0
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	1ad3      	subs	r3, r2, r3
 80060a6:	2b64      	cmp	r3, #100	@ 0x64
 80060a8:	d901      	bls.n	80060ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060aa:	2303      	movs	r3, #3
 80060ac:	e1f3      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ae:	4b51      	ldr	r3, [pc, #324]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d1f0      	bne.n	800609c <HAL_RCC_OscConfig+0xe8>
 80060ba:	e000      	b.n	80060be <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0302 	and.w	r3, r3, #2
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d063      	beq.n	8006192 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060ca:	4b4a      	ldr	r3, [pc, #296]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 030c 	and.w	r3, r3, #12
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d00b      	beq.n	80060ee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060d6:	4b47      	ldr	r3, [pc, #284]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80060de:	2b08      	cmp	r3, #8
 80060e0:	d11c      	bne.n	800611c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060e2:	4b44      	ldr	r3, [pc, #272]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d116      	bne.n	800611c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060ee:	4b41      	ldr	r3, [pc, #260]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d005      	beq.n	8006106 <HAL_RCC_OscConfig+0x152>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	2b01      	cmp	r3, #1
 8006100:	d001      	beq.n	8006106 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006102:	2301      	movs	r3, #1
 8006104:	e1c7      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006106:	4b3b      	ldr	r3, [pc, #236]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4937      	ldr	r1, [pc, #220]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006116:	4313      	orrs	r3, r2
 8006118:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800611a:	e03a      	b.n	8006192 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d020      	beq.n	8006166 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006124:	4b34      	ldr	r3, [pc, #208]	@ (80061f8 <HAL_RCC_OscConfig+0x244>)
 8006126:	2201      	movs	r2, #1
 8006128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800612a:	f7fc fd33 	bl	8002b94 <HAL_GetTick>
 800612e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006130:	e008      	b.n	8006144 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006132:	f7fc fd2f 	bl	8002b94 <HAL_GetTick>
 8006136:	4602      	mov	r2, r0
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	1ad3      	subs	r3, r2, r3
 800613c:	2b02      	cmp	r3, #2
 800613e:	d901      	bls.n	8006144 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006140:	2303      	movs	r3, #3
 8006142:	e1a8      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006144:	4b2b      	ldr	r3, [pc, #172]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f003 0302 	and.w	r3, r3, #2
 800614c:	2b00      	cmp	r3, #0
 800614e:	d0f0      	beq.n	8006132 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006150:	4b28      	ldr	r3, [pc, #160]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	00db      	lsls	r3, r3, #3
 800615e:	4925      	ldr	r1, [pc, #148]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006160:	4313      	orrs	r3, r2
 8006162:	600b      	str	r3, [r1, #0]
 8006164:	e015      	b.n	8006192 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006166:	4b24      	ldr	r3, [pc, #144]	@ (80061f8 <HAL_RCC_OscConfig+0x244>)
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616c:	f7fc fd12 	bl	8002b94 <HAL_GetTick>
 8006170:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006172:	e008      	b.n	8006186 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006174:	f7fc fd0e 	bl	8002b94 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	2b02      	cmp	r3, #2
 8006180:	d901      	bls.n	8006186 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e187      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006186:	4b1b      	ldr	r3, [pc, #108]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d1f0      	bne.n	8006174 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0308 	and.w	r3, r3, #8
 800619a:	2b00      	cmp	r3, #0
 800619c:	d036      	beq.n	800620c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	695b      	ldr	r3, [r3, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d016      	beq.n	80061d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061a6:	4b15      	ldr	r3, [pc, #84]	@ (80061fc <HAL_RCC_OscConfig+0x248>)
 80061a8:	2201      	movs	r2, #1
 80061aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ac:	f7fc fcf2 	bl	8002b94 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061b4:	f7fc fcee 	bl	8002b94 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e167      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061c6:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <HAL_RCC_OscConfig+0x240>)
 80061c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d0f0      	beq.n	80061b4 <HAL_RCC_OscConfig+0x200>
 80061d2:	e01b      	b.n	800620c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061d4:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <HAL_RCC_OscConfig+0x248>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061da:	f7fc fcdb 	bl	8002b94 <HAL_GetTick>
 80061de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061e0:	e00e      	b.n	8006200 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80061e2:	f7fc fcd7 	bl	8002b94 <HAL_GetTick>
 80061e6:	4602      	mov	r2, r0
 80061e8:	693b      	ldr	r3, [r7, #16]
 80061ea:	1ad3      	subs	r3, r2, r3
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d907      	bls.n	8006200 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061f0:	2303      	movs	r3, #3
 80061f2:	e150      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
 80061f4:	40023800 	.word	0x40023800
 80061f8:	42470000 	.word	0x42470000
 80061fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006200:	4b88      	ldr	r3, [pc, #544]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006202:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006204:	f003 0302 	and.w	r3, r3, #2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1ea      	bne.n	80061e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0304 	and.w	r3, r3, #4
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 8097 	beq.w	8006348 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800621e:	4b81      	ldr	r3, [pc, #516]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d10f      	bne.n	800624a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800622a:	2300      	movs	r3, #0
 800622c:	60bb      	str	r3, [r7, #8]
 800622e:	4b7d      	ldr	r3, [pc, #500]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006232:	4a7c      	ldr	r2, [pc, #496]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006234:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006238:	6413      	str	r3, [r2, #64]	@ 0x40
 800623a:	4b7a      	ldr	r3, [pc, #488]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006242:	60bb      	str	r3, [r7, #8]
 8006244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006246:	2301      	movs	r3, #1
 8006248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800624a:	4b77      	ldr	r3, [pc, #476]	@ (8006428 <HAL_RCC_OscConfig+0x474>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006252:	2b00      	cmp	r3, #0
 8006254:	d118      	bne.n	8006288 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006256:	4b74      	ldr	r3, [pc, #464]	@ (8006428 <HAL_RCC_OscConfig+0x474>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a73      	ldr	r2, [pc, #460]	@ (8006428 <HAL_RCC_OscConfig+0x474>)
 800625c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006262:	f7fc fc97 	bl	8002b94 <HAL_GetTick>
 8006266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006268:	e008      	b.n	800627c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800626a:	f7fc fc93 	bl	8002b94 <HAL_GetTick>
 800626e:	4602      	mov	r2, r0
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	1ad3      	subs	r3, r2, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d901      	bls.n	800627c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006278:	2303      	movs	r3, #3
 800627a:	e10c      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627c:	4b6a      	ldr	r3, [pc, #424]	@ (8006428 <HAL_RCC_OscConfig+0x474>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006284:	2b00      	cmp	r3, #0
 8006286:	d0f0      	beq.n	800626a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d106      	bne.n	800629e <HAL_RCC_OscConfig+0x2ea>
 8006290:	4b64      	ldr	r3, [pc, #400]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	4a63      	ldr	r2, [pc, #396]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006296:	f043 0301 	orr.w	r3, r3, #1
 800629a:	6713      	str	r3, [r2, #112]	@ 0x70
 800629c:	e01c      	b.n	80062d8 <HAL_RCC_OscConfig+0x324>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	689b      	ldr	r3, [r3, #8]
 80062a2:	2b05      	cmp	r3, #5
 80062a4:	d10c      	bne.n	80062c0 <HAL_RCC_OscConfig+0x30c>
 80062a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062aa:	4a5e      	ldr	r2, [pc, #376]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062ac:	f043 0304 	orr.w	r3, r3, #4
 80062b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80062b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062b6:	4a5b      	ldr	r2, [pc, #364]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062b8:	f043 0301 	orr.w	r3, r3, #1
 80062bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80062be:	e00b      	b.n	80062d8 <HAL_RCC_OscConfig+0x324>
 80062c0:	4b58      	ldr	r3, [pc, #352]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062c4:	4a57      	ldr	r2, [pc, #348]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062c6:	f023 0301 	bic.w	r3, r3, #1
 80062ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80062cc:	4b55      	ldr	r3, [pc, #340]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d0:	4a54      	ldr	r2, [pc, #336]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80062d2:	f023 0304 	bic.w	r3, r3, #4
 80062d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d015      	beq.n	800630c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062e0:	f7fc fc58 	bl	8002b94 <HAL_GetTick>
 80062e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062e6:	e00a      	b.n	80062fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062e8:	f7fc fc54 	bl	8002b94 <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d901      	bls.n	80062fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062fa:	2303      	movs	r3, #3
 80062fc:	e0cb      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062fe:	4b49      	ldr	r3, [pc, #292]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006302:	f003 0302 	and.w	r3, r3, #2
 8006306:	2b00      	cmp	r3, #0
 8006308:	d0ee      	beq.n	80062e8 <HAL_RCC_OscConfig+0x334>
 800630a:	e014      	b.n	8006336 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800630c:	f7fc fc42 	bl	8002b94 <HAL_GetTick>
 8006310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006312:	e00a      	b.n	800632a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006314:	f7fc fc3e 	bl	8002b94 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006322:	4293      	cmp	r3, r2
 8006324:	d901      	bls.n	800632a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006326:	2303      	movs	r3, #3
 8006328:	e0b5      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800632a:	4b3e      	ldr	r3, [pc, #248]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 800632c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800632e:	f003 0302 	and.w	r3, r3, #2
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1ee      	bne.n	8006314 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006336:	7dfb      	ldrb	r3, [r7, #23]
 8006338:	2b01      	cmp	r3, #1
 800633a:	d105      	bne.n	8006348 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800633c:	4b39      	ldr	r3, [pc, #228]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 800633e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006340:	4a38      	ldr	r2, [pc, #224]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006342:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006346:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	699b      	ldr	r3, [r3, #24]
 800634c:	2b00      	cmp	r3, #0
 800634e:	f000 80a1 	beq.w	8006494 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006352:	4b34      	ldr	r3, [pc, #208]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b08      	cmp	r3, #8
 800635c:	d05c      	beq.n	8006418 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b02      	cmp	r3, #2
 8006364:	d141      	bne.n	80063ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006366:	4b31      	ldr	r3, [pc, #196]	@ (800642c <HAL_RCC_OscConfig+0x478>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800636c:	f7fc fc12 	bl	8002b94 <HAL_GetTick>
 8006370:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006372:	e008      	b.n	8006386 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006374:	f7fc fc0e 	bl	8002b94 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	2b02      	cmp	r3, #2
 8006380:	d901      	bls.n	8006386 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006382:	2303      	movs	r3, #3
 8006384:	e087      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006386:	4b27      	ldr	r3, [pc, #156]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800638e:	2b00      	cmp	r3, #0
 8006390:	d1f0      	bne.n	8006374 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	69da      	ldr	r2, [r3, #28]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a0:	019b      	lsls	r3, r3, #6
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	3b01      	subs	r3, #1
 80063ac:	041b      	lsls	r3, r3, #16
 80063ae:	431a      	orrs	r2, r3
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b4:	061b      	lsls	r3, r3, #24
 80063b6:	491b      	ldr	r1, [pc, #108]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063bc:	4b1b      	ldr	r3, [pc, #108]	@ (800642c <HAL_RCC_OscConfig+0x478>)
 80063be:	2201      	movs	r2, #1
 80063c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c2:	f7fc fbe7 	bl	8002b94 <HAL_GetTick>
 80063c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063c8:	e008      	b.n	80063dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063ca:	f7fc fbe3 	bl	8002b94 <HAL_GetTick>
 80063ce:	4602      	mov	r2, r0
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	1ad3      	subs	r3, r2, r3
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d901      	bls.n	80063dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063d8:	2303      	movs	r3, #3
 80063da:	e05c      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063dc:	4b11      	ldr	r3, [pc, #68]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0f0      	beq.n	80063ca <HAL_RCC_OscConfig+0x416>
 80063e8:	e054      	b.n	8006494 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ea:	4b10      	ldr	r3, [pc, #64]	@ (800642c <HAL_RCC_OscConfig+0x478>)
 80063ec:	2200      	movs	r2, #0
 80063ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063f0:	f7fc fbd0 	bl	8002b94 <HAL_GetTick>
 80063f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063f6:	e008      	b.n	800640a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063f8:	f7fc fbcc 	bl	8002b94 <HAL_GetTick>
 80063fc:	4602      	mov	r2, r0
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	1ad3      	subs	r3, r2, r3
 8006402:	2b02      	cmp	r3, #2
 8006404:	d901      	bls.n	800640a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e045      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800640a:	4b06      	ldr	r3, [pc, #24]	@ (8006424 <HAL_RCC_OscConfig+0x470>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1f0      	bne.n	80063f8 <HAL_RCC_OscConfig+0x444>
 8006416:	e03d      	b.n	8006494 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d107      	bne.n	8006430 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006420:	2301      	movs	r3, #1
 8006422:	e038      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
 8006424:	40023800 	.word	0x40023800
 8006428:	40007000 	.word	0x40007000
 800642c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006430:	4b1b      	ldr	r3, [pc, #108]	@ (80064a0 <HAL_RCC_OscConfig+0x4ec>)
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	699b      	ldr	r3, [r3, #24]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d028      	beq.n	8006490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006448:	429a      	cmp	r2, r3
 800644a:	d121      	bne.n	8006490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006456:	429a      	cmp	r2, r3
 8006458:	d11a      	bne.n	8006490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800645a:	68fa      	ldr	r2, [r7, #12]
 800645c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006460:	4013      	ands	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006466:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006468:	4293      	cmp	r3, r2
 800646a:	d111      	bne.n	8006490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006476:	085b      	lsrs	r3, r3, #1
 8006478:	3b01      	subs	r3, #1
 800647a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800647c:	429a      	cmp	r2, r3
 800647e:	d107      	bne.n	8006490 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800648a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800648c:	429a      	cmp	r2, r3
 800648e:	d001      	beq.n	8006494 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006490:	2301      	movs	r3, #1
 8006492:	e000      	b.n	8006496 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3718      	adds	r7, #24
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	40023800 	.word	0x40023800

080064a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	e0cc      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80064b8:	4b68      	ldr	r3, [pc, #416]	@ (800665c <HAL_RCC_ClockConfig+0x1b8>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f003 0307 	and.w	r3, r3, #7
 80064c0:	683a      	ldr	r2, [r7, #0]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d90c      	bls.n	80064e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064c6:	4b65      	ldr	r3, [pc, #404]	@ (800665c <HAL_RCC_ClockConfig+0x1b8>)
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	b2d2      	uxtb	r2, r2
 80064cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ce:	4b63      	ldr	r3, [pc, #396]	@ (800665c <HAL_RCC_ClockConfig+0x1b8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f003 0307 	and.w	r3, r3, #7
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d001      	beq.n	80064e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e0b8      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0302 	and.w	r3, r3, #2
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d020      	beq.n	800652e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0304 	and.w	r3, r3, #4
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d005      	beq.n	8006504 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064f8:	4b59      	ldr	r3, [pc, #356]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	4a58      	ldr	r2, [pc, #352]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 80064fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006502:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f003 0308 	and.w	r3, r3, #8
 800650c:	2b00      	cmp	r3, #0
 800650e:	d005      	beq.n	800651c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006510:	4b53      	ldr	r3, [pc, #332]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	4a52      	ldr	r2, [pc, #328]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800651a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800651c:	4b50      	ldr	r3, [pc, #320]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	689b      	ldr	r3, [r3, #8]
 8006520:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	494d      	ldr	r1, [pc, #308]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 800652a:	4313      	orrs	r3, r2
 800652c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f003 0301 	and.w	r3, r3, #1
 8006536:	2b00      	cmp	r3, #0
 8006538:	d044      	beq.n	80065c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006542:	4b47      	ldr	r3, [pc, #284]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800654a:	2b00      	cmp	r3, #0
 800654c:	d119      	bne.n	8006582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800654e:	2301      	movs	r3, #1
 8006550:	e07f      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d003      	beq.n	8006562 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800655e:	2b03      	cmp	r3, #3
 8006560:	d107      	bne.n	8006572 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006562:	4b3f      	ldr	r3, [pc, #252]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800656a:	2b00      	cmp	r3, #0
 800656c:	d109      	bne.n	8006582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e06f      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006572:	4b3b      	ldr	r3, [pc, #236]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f003 0302 	and.w	r3, r3, #2
 800657a:	2b00      	cmp	r3, #0
 800657c:	d101      	bne.n	8006582 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	e067      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006582:	4b37      	ldr	r3, [pc, #220]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f023 0203 	bic.w	r2, r3, #3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	4934      	ldr	r1, [pc, #208]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006590:	4313      	orrs	r3, r2
 8006592:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006594:	f7fc fafe 	bl	8002b94 <HAL_GetTick>
 8006598:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800659a:	e00a      	b.n	80065b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800659c:	f7fc fafa 	bl	8002b94 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d901      	bls.n	80065b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ae:	2303      	movs	r3, #3
 80065b0:	e04f      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065b2:	4b2b      	ldr	r3, [pc, #172]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	689b      	ldr	r3, [r3, #8]
 80065b6:	f003 020c 	and.w	r2, r3, #12
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d1eb      	bne.n	800659c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80065c4:	4b25      	ldr	r3, [pc, #148]	@ (800665c <HAL_RCC_ClockConfig+0x1b8>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0307 	and.w	r3, r3, #7
 80065cc:	683a      	ldr	r2, [r7, #0]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d20c      	bcs.n	80065ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065d2:	4b22      	ldr	r3, [pc, #136]	@ (800665c <HAL_RCC_ClockConfig+0x1b8>)
 80065d4:	683a      	ldr	r2, [r7, #0]
 80065d6:	b2d2      	uxtb	r2, r2
 80065d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80065da:	4b20      	ldr	r3, [pc, #128]	@ (800665c <HAL_RCC_ClockConfig+0x1b8>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0307 	and.w	r3, r3, #7
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d001      	beq.n	80065ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065e8:	2301      	movs	r3, #1
 80065ea:	e032      	b.n	8006652 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0304 	and.w	r3, r3, #4
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d008      	beq.n	800660a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065f8:	4b19      	ldr	r3, [pc, #100]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	68db      	ldr	r3, [r3, #12]
 8006604:	4916      	ldr	r1, [pc, #88]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006606:	4313      	orrs	r3, r2
 8006608:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006616:	4b12      	ldr	r3, [pc, #72]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	00db      	lsls	r3, r3, #3
 8006624:	490e      	ldr	r1, [pc, #56]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	4313      	orrs	r3, r2
 8006628:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800662a:	f000 f821 	bl	8006670 <HAL_RCC_GetSysClockFreq>
 800662e:	4602      	mov	r2, r0
 8006630:	4b0b      	ldr	r3, [pc, #44]	@ (8006660 <HAL_RCC_ClockConfig+0x1bc>)
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	091b      	lsrs	r3, r3, #4
 8006636:	f003 030f 	and.w	r3, r3, #15
 800663a:	490a      	ldr	r1, [pc, #40]	@ (8006664 <HAL_RCC_ClockConfig+0x1c0>)
 800663c:	5ccb      	ldrb	r3, [r1, r3]
 800663e:	fa22 f303 	lsr.w	r3, r2, r3
 8006642:	4a09      	ldr	r2, [pc, #36]	@ (8006668 <HAL_RCC_ClockConfig+0x1c4>)
 8006644:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006646:	4b09      	ldr	r3, [pc, #36]	@ (800666c <HAL_RCC_ClockConfig+0x1c8>)
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f7fc fa5e 	bl	8002b0c <HAL_InitTick>

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3710      	adds	r7, #16
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}
 800665a:	bf00      	nop
 800665c:	40023c00 	.word	0x40023c00
 8006660:	40023800 	.word	0x40023800
 8006664:	0800c774 	.word	0x0800c774
 8006668:	20000000 	.word	0x20000000
 800666c:	20000004 	.word	0x20000004

08006670 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006670:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006674:	b094      	sub	sp, #80	@ 0x50
 8006676:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800667c:	2300      	movs	r3, #0
 800667e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006680:	2300      	movs	r3, #0
 8006682:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006684:	2300      	movs	r3, #0
 8006686:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006688:	4b79      	ldr	r3, [pc, #484]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x200>)
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f003 030c 	and.w	r3, r3, #12
 8006690:	2b08      	cmp	r3, #8
 8006692:	d00d      	beq.n	80066b0 <HAL_RCC_GetSysClockFreq+0x40>
 8006694:	2b08      	cmp	r3, #8
 8006696:	f200 80e1 	bhi.w	800685c <HAL_RCC_GetSysClockFreq+0x1ec>
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x34>
 800669e:	2b04      	cmp	r3, #4
 80066a0:	d003      	beq.n	80066aa <HAL_RCC_GetSysClockFreq+0x3a>
 80066a2:	e0db      	b.n	800685c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80066a4:	4b73      	ldr	r3, [pc, #460]	@ (8006874 <HAL_RCC_GetSysClockFreq+0x204>)
 80066a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066a8:	e0db      	b.n	8006862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80066aa:	4b73      	ldr	r3, [pc, #460]	@ (8006878 <HAL_RCC_GetSysClockFreq+0x208>)
 80066ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80066ae:	e0d8      	b.n	8006862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066b0:	4b6f      	ldr	r3, [pc, #444]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x200>)
 80066b2:	685b      	ldr	r3, [r3, #4]
 80066b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80066b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ba:	4b6d      	ldr	r3, [pc, #436]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x200>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d063      	beq.n	800678e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066c6:	4b6a      	ldr	r3, [pc, #424]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x200>)
 80066c8:	685b      	ldr	r3, [r3, #4]
 80066ca:	099b      	lsrs	r3, r3, #6
 80066cc:	2200      	movs	r2, #0
 80066ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80066da:	2300      	movs	r3, #0
 80066dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	f04f 0000 	mov.w	r0, #0
 80066ea:	f04f 0100 	mov.w	r1, #0
 80066ee:	0159      	lsls	r1, r3, #5
 80066f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066f4:	0150      	lsls	r0, r2, #5
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4621      	mov	r1, r4
 80066fc:	1a51      	subs	r1, r2, r1
 80066fe:	6139      	str	r1, [r7, #16]
 8006700:	4629      	mov	r1, r5
 8006702:	eb63 0301 	sbc.w	r3, r3, r1
 8006706:	617b      	str	r3, [r7, #20]
 8006708:	f04f 0200 	mov.w	r2, #0
 800670c:	f04f 0300 	mov.w	r3, #0
 8006710:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006714:	4659      	mov	r1, fp
 8006716:	018b      	lsls	r3, r1, #6
 8006718:	4651      	mov	r1, sl
 800671a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800671e:	4651      	mov	r1, sl
 8006720:	018a      	lsls	r2, r1, #6
 8006722:	4651      	mov	r1, sl
 8006724:	ebb2 0801 	subs.w	r8, r2, r1
 8006728:	4659      	mov	r1, fp
 800672a:	eb63 0901 	sbc.w	r9, r3, r1
 800672e:	f04f 0200 	mov.w	r2, #0
 8006732:	f04f 0300 	mov.w	r3, #0
 8006736:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800673a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800673e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006742:	4690      	mov	r8, r2
 8006744:	4699      	mov	r9, r3
 8006746:	4623      	mov	r3, r4
 8006748:	eb18 0303 	adds.w	r3, r8, r3
 800674c:	60bb      	str	r3, [r7, #8]
 800674e:	462b      	mov	r3, r5
 8006750:	eb49 0303 	adc.w	r3, r9, r3
 8006754:	60fb      	str	r3, [r7, #12]
 8006756:	f04f 0200 	mov.w	r2, #0
 800675a:	f04f 0300 	mov.w	r3, #0
 800675e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006762:	4629      	mov	r1, r5
 8006764:	024b      	lsls	r3, r1, #9
 8006766:	4621      	mov	r1, r4
 8006768:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800676c:	4621      	mov	r1, r4
 800676e:	024a      	lsls	r2, r1, #9
 8006770:	4610      	mov	r0, r2
 8006772:	4619      	mov	r1, r3
 8006774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006776:	2200      	movs	r2, #0
 8006778:	62bb      	str	r3, [r7, #40]	@ 0x28
 800677a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800677c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006780:	f7f9 fd76 	bl	8000270 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4613      	mov	r3, r2
 800678a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800678c:	e058      	b.n	8006840 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800678e:	4b38      	ldr	r3, [pc, #224]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x200>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	099b      	lsrs	r3, r3, #6
 8006794:	2200      	movs	r2, #0
 8006796:	4618      	mov	r0, r3
 8006798:	4611      	mov	r1, r2
 800679a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800679e:	623b      	str	r3, [r7, #32]
 80067a0:	2300      	movs	r3, #0
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80067a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80067a8:	4642      	mov	r2, r8
 80067aa:	464b      	mov	r3, r9
 80067ac:	f04f 0000 	mov.w	r0, #0
 80067b0:	f04f 0100 	mov.w	r1, #0
 80067b4:	0159      	lsls	r1, r3, #5
 80067b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80067ba:	0150      	lsls	r0, r2, #5
 80067bc:	4602      	mov	r2, r0
 80067be:	460b      	mov	r3, r1
 80067c0:	4641      	mov	r1, r8
 80067c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80067c6:	4649      	mov	r1, r9
 80067c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80067cc:	f04f 0200 	mov.w	r2, #0
 80067d0:	f04f 0300 	mov.w	r3, #0
 80067d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80067d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80067dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80067e0:	ebb2 040a 	subs.w	r4, r2, sl
 80067e4:	eb63 050b 	sbc.w	r5, r3, fp
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	00eb      	lsls	r3, r5, #3
 80067f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80067f6:	00e2      	lsls	r2, r4, #3
 80067f8:	4614      	mov	r4, r2
 80067fa:	461d      	mov	r5, r3
 80067fc:	4643      	mov	r3, r8
 80067fe:	18e3      	adds	r3, r4, r3
 8006800:	603b      	str	r3, [r7, #0]
 8006802:	464b      	mov	r3, r9
 8006804:	eb45 0303 	adc.w	r3, r5, r3
 8006808:	607b      	str	r3, [r7, #4]
 800680a:	f04f 0200 	mov.w	r2, #0
 800680e:	f04f 0300 	mov.w	r3, #0
 8006812:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006816:	4629      	mov	r1, r5
 8006818:	028b      	lsls	r3, r1, #10
 800681a:	4621      	mov	r1, r4
 800681c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006820:	4621      	mov	r1, r4
 8006822:	028a      	lsls	r2, r1, #10
 8006824:	4610      	mov	r0, r2
 8006826:	4619      	mov	r1, r3
 8006828:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800682a:	2200      	movs	r2, #0
 800682c:	61bb      	str	r3, [r7, #24]
 800682e:	61fa      	str	r2, [r7, #28]
 8006830:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006834:	f7f9 fd1c 	bl	8000270 <__aeabi_uldivmod>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4613      	mov	r3, r2
 800683e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006840:	4b0b      	ldr	r3, [pc, #44]	@ (8006870 <HAL_RCC_GetSysClockFreq+0x200>)
 8006842:	685b      	ldr	r3, [r3, #4]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	f003 0303 	and.w	r3, r3, #3
 800684a:	3301      	adds	r3, #1
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006850:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006852:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006854:	fbb2 f3f3 	udiv	r3, r2, r3
 8006858:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800685a:	e002      	b.n	8006862 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800685c:	4b05      	ldr	r3, [pc, #20]	@ (8006874 <HAL_RCC_GetSysClockFreq+0x204>)
 800685e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006864:	4618      	mov	r0, r3
 8006866:	3750      	adds	r7, #80	@ 0x50
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800686e:	bf00      	nop
 8006870:	40023800 	.word	0x40023800
 8006874:	00f42400 	.word	0x00f42400
 8006878:	007a1200 	.word	0x007a1200

0800687c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006880:	4b03      	ldr	r3, [pc, #12]	@ (8006890 <HAL_RCC_GetHCLKFreq+0x14>)
 8006882:	681b      	ldr	r3, [r3, #0]
}
 8006884:	4618      	mov	r0, r3
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20000000 	.word	0x20000000

08006894 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006898:	f7ff fff0 	bl	800687c <HAL_RCC_GetHCLKFreq>
 800689c:	4602      	mov	r2, r0
 800689e:	4b05      	ldr	r3, [pc, #20]	@ (80068b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80068a0:	689b      	ldr	r3, [r3, #8]
 80068a2:	0a9b      	lsrs	r3, r3, #10
 80068a4:	f003 0307 	and.w	r3, r3, #7
 80068a8:	4903      	ldr	r1, [pc, #12]	@ (80068b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068aa:	5ccb      	ldrb	r3, [r1, r3]
 80068ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	bd80      	pop	{r7, pc}
 80068b4:	40023800 	.word	0x40023800
 80068b8:	0800c784 	.word	0x0800c784

080068bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80068c0:	f7ff ffdc 	bl	800687c <HAL_RCC_GetHCLKFreq>
 80068c4:	4602      	mov	r2, r0
 80068c6:	4b05      	ldr	r3, [pc, #20]	@ (80068dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	0b5b      	lsrs	r3, r3, #13
 80068cc:	f003 0307 	and.w	r3, r3, #7
 80068d0:	4903      	ldr	r1, [pc, #12]	@ (80068e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068d2:	5ccb      	ldrb	r3, [r1, r3]
 80068d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80068d8:	4618      	mov	r0, r3
 80068da:	bd80      	pop	{r7, pc}
 80068dc:	40023800 	.word	0x40023800
 80068e0:	0800c784 	.word	0x0800c784

080068e4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d105      	bne.n	800690c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006908:	2b00      	cmp	r3, #0
 800690a:	d035      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800690c:	4b62      	ldr	r3, [pc, #392]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800690e:	2200      	movs	r2, #0
 8006910:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006912:	f7fc f93f 	bl	8002b94 <HAL_GetTick>
 8006916:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006918:	e008      	b.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800691a:	f7fc f93b 	bl	8002b94 <HAL_GetTick>
 800691e:	4602      	mov	r2, r0
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	2b02      	cmp	r3, #2
 8006926:	d901      	bls.n	800692c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006928:	2303      	movs	r3, #3
 800692a:	e0b0      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800692c:	4b5b      	ldr	r3, [pc, #364]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006934:	2b00      	cmp	r3, #0
 8006936:	d1f0      	bne.n	800691a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	019a      	lsls	r2, r3, #6
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	071b      	lsls	r3, r3, #28
 8006944:	4955      	ldr	r1, [pc, #340]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006946:	4313      	orrs	r3, r2
 8006948:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800694c:	4b52      	ldr	r3, [pc, #328]	@ (8006a98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800694e:	2201      	movs	r2, #1
 8006950:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006952:	f7fc f91f 	bl	8002b94 <HAL_GetTick>
 8006956:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006958:	e008      	b.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800695a:	f7fc f91b 	bl	8002b94 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e090      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800696c:	4b4b      	ldr	r3, [pc, #300]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0f0      	beq.n	800695a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0302 	and.w	r3, r3, #2
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 8083 	beq.w	8006a8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006986:	2300      	movs	r3, #0
 8006988:	60fb      	str	r3, [r7, #12]
 800698a:	4b44      	ldr	r3, [pc, #272]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800698c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800698e:	4a43      	ldr	r2, [pc, #268]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006994:	6413      	str	r3, [r2, #64]	@ 0x40
 8006996:	4b41      	ldr	r3, [pc, #260]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800699a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80069a2:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a3e      	ldr	r2, [pc, #248]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ac:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80069ae:	f7fc f8f1 	bl	8002b94 <HAL_GetTick>
 80069b2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069b4:	e008      	b.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069b6:	f7fc f8ed 	bl	8002b94 <HAL_GetTick>
 80069ba:	4602      	mov	r2, r0
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	1ad3      	subs	r3, r2, r3
 80069c0:	2b02      	cmp	r3, #2
 80069c2:	d901      	bls.n	80069c8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80069c4:	2303      	movs	r3, #3
 80069c6:	e062      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80069c8:	4b35      	ldr	r3, [pc, #212]	@ (8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d0f0      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80069d4:	4b31      	ldr	r3, [pc, #196]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069dc:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d02f      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d028      	beq.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80069f2:	4b2a      	ldr	r3, [pc, #168]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069fa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80069fc:	4b29      	ldr	r3, [pc, #164]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80069fe:	2201      	movs	r2, #1
 8006a00:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006a02:	4b28      	ldr	r3, [pc, #160]	@ (8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006a08:	4a24      	ldr	r2, [pc, #144]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006a0e:	4b23      	ldr	r3, [pc, #140]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a12:	f003 0301 	and.w	r3, r3, #1
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d114      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006a1a:	f7fc f8bb 	bl	8002b94 <HAL_GetTick>
 8006a1e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fc f8b7 	bl	8002b94 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e02a      	b.n	8006a8e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a38:	4b18      	ldr	r3, [pc, #96]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d0ee      	beq.n	8006a22 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a4c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a50:	d10d      	bne.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006a52:	4b12      	ldr	r3, [pc, #72]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	68db      	ldr	r3, [r3, #12]
 8006a5e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006a62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006a66:	490d      	ldr	r1, [pc, #52]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a68:	4313      	orrs	r3, r2
 8006a6a:	608b      	str	r3, [r1, #8]
 8006a6c:	e005      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a6e:	4b0b      	ldr	r3, [pc, #44]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	4a0a      	ldr	r2, [pc, #40]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a74:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8006a78:	6093      	str	r3, [r2, #8]
 8006a7a:	4b08      	ldr	r3, [pc, #32]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a7c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a86:	4905      	ldr	r1, [pc, #20]	@ (8006a9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006a8c:	2300      	movs	r3, #0
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	42470068 	.word	0x42470068
 8006a9c:	40023800 	.word	0x40023800
 8006aa0:	40007000 	.word	0x40007000
 8006aa4:	42470e40 	.word	0x42470e40

08006aa8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b087      	sub	sp, #28
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006ab8:	2300      	movs	r3, #0
 8006aba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006abc:	2300      	movs	r3, #0
 8006abe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2b01      	cmp	r3, #1
 8006ac4:	d13f      	bne.n	8006b46 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006ac6:	4b24      	ldr	r3, [pc, #144]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006ace:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d006      	beq.n	8006ae4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006adc:	d12f      	bne.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006ade:	4b1f      	ldr	r3, [pc, #124]	@ (8006b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006ae0:	617b      	str	r3, [r7, #20]
          break;
 8006ae2:	e02f      	b.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006ae4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006aec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006af0:	d108      	bne.n	8006b04 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006af2:	4b19      	ldr	r3, [pc, #100]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006afa:	4a19      	ldr	r2, [pc, #100]	@ (8006b60 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	e007      	b.n	8006b14 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006b04:	4b14      	ldr	r3, [pc, #80]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006b0c:	4a15      	ldr	r2, [pc, #84]	@ (8006b64 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b12:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006b14:	4b10      	ldr	r3, [pc, #64]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b1a:	099b      	lsrs	r3, r3, #6
 8006b1c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006b20:	693b      	ldr	r3, [r7, #16]
 8006b22:	fb02 f303 	mul.w	r3, r2, r3
 8006b26:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006b28:	4b0b      	ldr	r3, [pc, #44]	@ (8006b58 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006b2e:	0f1b      	lsrs	r3, r3, #28
 8006b30:	f003 0307 	and.w	r3, r3, #7
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b3a:	617b      	str	r3, [r7, #20]
          break;
 8006b3c:	e002      	b.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	617b      	str	r3, [r7, #20]
          break;
 8006b42:	bf00      	nop
        }
      }
      break;
 8006b44:	e000      	b.n	8006b48 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8006b46:	bf00      	nop
    }
  }
  return frequency;
 8006b48:	697b      	ldr	r3, [r7, #20]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40023800 	.word	0x40023800
 8006b5c:	00bb8000 	.word	0x00bb8000
 8006b60:	007a1200 	.word	0x007a1200
 8006b64:	00f42400 	.word	0x00f42400

08006b68 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e01c      	b.n	8006bb4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	795b      	ldrb	r3, [r3, #5]
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d105      	bne.n	8006b90 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f7fb fdca 	bl	8002724 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2202      	movs	r2, #2
 8006b94:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f042 0204 	orr.w	r2, r2, #4
 8006ba4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006bb2:	2300      	movs	r3, #0
}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3708      	adds	r7, #8
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	bd80      	pop	{r7, pc}

08006bbc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b084      	sub	sp, #16
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	791b      	ldrb	r3, [r3, #4]
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d101      	bne.n	8006bd6 <HAL_RNG_GenerateRandomNumber+0x1a>
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	e044      	b.n	8006c60 <HAL_RNG_GenerateRandomNumber+0xa4>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	795b      	ldrb	r3, [r3, #5]
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d133      	bne.n	8006c4e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006bec:	f7fb ffd2 	bl	8002b94 <HAL_GetTick>
 8006bf0:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006bf2:	e018      	b.n	8006c26 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006bf4:	f7fb ffce 	bl	8002b94 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d911      	bls.n	8006c26 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d00a      	beq.n	8006c26 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e01c      	b.n	8006c60 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	f003 0301 	and.w	r3, r3, #1
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d1df      	bne.n	8006bf4 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	689a      	ldr	r2, [r3, #8]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68da      	ldr	r2, [r3, #12]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2201      	movs	r2, #1
 8006c4a:	715a      	strb	r2, [r3, #5]
 8006c4c:	e004      	b.n	8006c58 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2204      	movs	r2, #4
 8006c52:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8006c54:	2301      	movs	r3, #1
 8006c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	711a      	strb	r2, [r3, #4]

  return status;
 8006c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3710      	adds	r7, #16
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d101      	bne.n	8006c7a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e07b      	b.n	8006d72 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d108      	bne.n	8006c94 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006c8a:	d009      	beq.n	8006ca0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	61da      	str	r2, [r3, #28]
 8006c92:	e005      	b.n	8006ca0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d106      	bne.n	8006cc0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f7fb fd54 	bl	8002768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681a      	ldr	r2, [r3, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006cd6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006ce8:	431a      	orrs	r2, r3
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68db      	ldr	r3, [r3, #12]
 8006cee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cf2:	431a      	orrs	r2, r3
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	691b      	ldr	r3, [r3, #16]
 8006cf8:	f003 0302 	and.w	r3, r3, #2
 8006cfc:	431a      	orrs	r2, r3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	f003 0301 	and.w	r3, r3, #1
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	699b      	ldr	r3, [r3, #24]
 8006d0c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006d1a:	431a      	orrs	r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6a1b      	ldr	r3, [r3, #32]
 8006d20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d24:	ea42 0103 	orr.w	r1, r2, r3
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d2c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	430a      	orrs	r2, r1
 8006d36:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	699b      	ldr	r3, [r3, #24]
 8006d3c:	0c1b      	lsrs	r3, r3, #16
 8006d3e:	f003 0104 	and.w	r1, r3, #4
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	f003 0210 	and.w	r2, r3, #16
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d60:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2201      	movs	r2, #1
 8006d6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3708      	adds	r7, #8
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b082      	sub	sp, #8
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d101      	bne.n	8006d8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e042      	b.n	8006e12 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d106      	bne.n	8006da6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7fb fd29 	bl	80027f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2224      	movs	r2, #36	@ 0x24
 8006daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006dbc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 f972 	bl	80070a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	691a      	ldr	r2, [r3, #16]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006dd2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	695a      	ldr	r2, [r3, #20]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006de2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	68da      	ldr	r2, [r3, #12]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006df2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2220      	movs	r2, #32
 8006dfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2220      	movs	r2, #32
 8006e06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006e10:	2300      	movs	r3, #0
}
 8006e12:	4618      	mov	r0, r3
 8006e14:	3708      	adds	r7, #8
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b08a      	sub	sp, #40	@ 0x28
 8006e1e:	af02      	add	r7, sp, #8
 8006e20:	60f8      	str	r0, [r7, #12]
 8006e22:	60b9      	str	r1, [r7, #8]
 8006e24:	603b      	str	r3, [r7, #0]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	2b20      	cmp	r3, #32
 8006e38:	d175      	bne.n	8006f26 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d002      	beq.n	8006e46 <HAL_UART_Transmit+0x2c>
 8006e40:	88fb      	ldrh	r3, [r7, #6]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	e06e      	b.n	8006f28 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2221      	movs	r2, #33	@ 0x21
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e58:	f7fb fe9c 	bl	8002b94 <HAL_GetTick>
 8006e5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	88fa      	ldrh	r2, [r7, #6]
 8006e62:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	88fa      	ldrh	r2, [r7, #6]
 8006e68:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006e72:	d108      	bne.n	8006e86 <HAL_UART_Transmit+0x6c>
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	691b      	ldr	r3, [r3, #16]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d104      	bne.n	8006e86 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	61bb      	str	r3, [r7, #24]
 8006e84:	e003      	b.n	8006e8e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006e8e:	e02e      	b.n	8006eee <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	9300      	str	r3, [sp, #0]
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	2200      	movs	r2, #0
 8006e98:	2180      	movs	r1, #128	@ 0x80
 8006e9a:	68f8      	ldr	r0, [r7, #12]
 8006e9c:	f000 f848 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d005      	beq.n	8006eb2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	e03a      	b.n	8006f28 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10b      	bne.n	8006ed0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006eb8:	69bb      	ldr	r3, [r7, #24]
 8006eba:	881b      	ldrh	r3, [r3, #0]
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ec6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	3302      	adds	r3, #2
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	e007      	b.n	8006ee0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	781a      	ldrb	r2, [r3, #0]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	3301      	adds	r3, #1
 8006ede:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b01      	subs	r3, #1
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006ef2:	b29b      	uxth	r3, r3
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1cb      	bne.n	8006e90 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	9300      	str	r3, [sp, #0]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	2140      	movs	r1, #64	@ 0x40
 8006f02:	68f8      	ldr	r0, [r7, #12]
 8006f04:	f000 f814 	bl	8006f30 <UART_WaitOnFlagUntilTimeout>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d005      	beq.n	8006f1a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2220      	movs	r2, #32
 8006f12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e006      	b.n	8006f28 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	2220      	movs	r2, #32
 8006f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	e000      	b.n	8006f28 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006f26:	2302      	movs	r3, #2
  }
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3720      	adds	r7, #32
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b086      	sub	sp, #24
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f40:	e03b      	b.n	8006fba <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f48:	d037      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4a:	f7fb fe23 	bl	8002b94 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	6a3a      	ldr	r2, [r7, #32]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d302      	bcc.n	8006f60 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f5a:	6a3b      	ldr	r3, [r7, #32]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f60:	2303      	movs	r3, #3
 8006f62:	e03a      	b.n	8006fda <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	f003 0304 	and.w	r3, r3, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d023      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b80      	cmp	r3, #128	@ 0x80
 8006f76:	d020      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x8a>
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	2b40      	cmp	r3, #64	@ 0x40
 8006f7c:	d01d      	beq.n	8006fba <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0308 	and.w	r3, r3, #8
 8006f88:	2b08      	cmp	r3, #8
 8006f8a:	d116      	bne.n	8006fba <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	617b      	str	r3, [r7, #20]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	617b      	str	r3, [r7, #20]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	617b      	str	r3, [r7, #20]
 8006fa0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f000 f81d 	bl	8006fe2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2208      	movs	r2, #8
 8006fac:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e00f      	b.n	8006fda <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	68ba      	ldr	r2, [r7, #8]
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	bf0c      	ite	eq
 8006fca:	2301      	moveq	r3, #1
 8006fcc:	2300      	movne	r3, #0
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d0b4      	beq.n	8006f42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fd8:	2300      	movs	r3, #0
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3718      	adds	r7, #24
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006fe2:	b480      	push	{r7}
 8006fe4:	b095      	sub	sp, #84	@ 0x54
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	330c      	adds	r3, #12
 8006ff0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ff2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff4:	e853 3f00 	ldrex	r3, [r3]
 8006ff8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ffc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007000:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	330c      	adds	r3, #12
 8007008:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800700a:	643a      	str	r2, [r7, #64]	@ 0x40
 800700c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007010:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007012:	e841 2300 	strex	r3, r2, [r1]
 8007016:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800701a:	2b00      	cmp	r3, #0
 800701c:	d1e5      	bne.n	8006fea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3314      	adds	r3, #20
 8007024:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007026:	6a3b      	ldr	r3, [r7, #32]
 8007028:	e853 3f00 	ldrex	r3, [r3]
 800702c:	61fb      	str	r3, [r7, #28]
   return(result);
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	f023 0301 	bic.w	r3, r3, #1
 8007034:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3314      	adds	r3, #20
 800703c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800703e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007040:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007042:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007044:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007046:	e841 2300 	strex	r3, r2, [r1]
 800704a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	d1e5      	bne.n	800701e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007056:	2b01      	cmp	r3, #1
 8007058:	d119      	bne.n	800708e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	330c      	adds	r3, #12
 8007060:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	e853 3f00 	ldrex	r3, [r3]
 8007068:	60bb      	str	r3, [r7, #8]
   return(result);
 800706a:	68bb      	ldr	r3, [r7, #8]
 800706c:	f023 0310 	bic.w	r3, r3, #16
 8007070:	647b      	str	r3, [r7, #68]	@ 0x44
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	330c      	adds	r3, #12
 8007078:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800707a:	61ba      	str	r2, [r7, #24]
 800707c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800707e:	6979      	ldr	r1, [r7, #20]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	e841 2300 	strex	r3, r2, [r1]
 8007086:	613b      	str	r3, [r7, #16]
   return(result);
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1e5      	bne.n	800705a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2220      	movs	r2, #32
 8007092:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800709c:	bf00      	nop
 800709e:	3754      	adds	r7, #84	@ 0x54
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80070ac:	b0c0      	sub	sp, #256	@ 0x100
 80070ae:	af00      	add	r7, sp, #0
 80070b0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	691b      	ldr	r3, [r3, #16]
 80070bc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80070c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c4:	68d9      	ldr	r1, [r3, #12]
 80070c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	ea40 0301 	orr.w	r3, r0, r1
 80070d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80070d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070dc:	691b      	ldr	r3, [r3, #16]
 80070de:	431a      	orrs	r2, r3
 80070e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070e4:	695b      	ldr	r3, [r3, #20]
 80070e6:	431a      	orrs	r2, r3
 80070e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80070f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007100:	f021 010c 	bic.w	r1, r1, #12
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	681a      	ldr	r2, [r3, #0]
 800710a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800710e:	430b      	orrs	r3, r1
 8007110:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007112:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	695b      	ldr	r3, [r3, #20]
 800711a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007122:	6999      	ldr	r1, [r3, #24]
 8007124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	ea40 0301 	orr.w	r3, r0, r1
 800712e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	4b8f      	ldr	r3, [pc, #572]	@ (8007374 <UART_SetConfig+0x2cc>)
 8007138:	429a      	cmp	r2, r3
 800713a:	d005      	beq.n	8007148 <UART_SetConfig+0xa0>
 800713c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007140:	681a      	ldr	r2, [r3, #0]
 8007142:	4b8d      	ldr	r3, [pc, #564]	@ (8007378 <UART_SetConfig+0x2d0>)
 8007144:	429a      	cmp	r2, r3
 8007146:	d104      	bne.n	8007152 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007148:	f7ff fbb8 	bl	80068bc <HAL_RCC_GetPCLK2Freq>
 800714c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007150:	e003      	b.n	800715a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007152:	f7ff fb9f 	bl	8006894 <HAL_RCC_GetPCLK1Freq>
 8007156:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800715a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007164:	f040 810c 	bne.w	8007380 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007168:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800716c:	2200      	movs	r2, #0
 800716e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007172:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007176:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800717a:	4622      	mov	r2, r4
 800717c:	462b      	mov	r3, r5
 800717e:	1891      	adds	r1, r2, r2
 8007180:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007182:	415b      	adcs	r3, r3
 8007184:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007186:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800718a:	4621      	mov	r1, r4
 800718c:	eb12 0801 	adds.w	r8, r2, r1
 8007190:	4629      	mov	r1, r5
 8007192:	eb43 0901 	adc.w	r9, r3, r1
 8007196:	f04f 0200 	mov.w	r2, #0
 800719a:	f04f 0300 	mov.w	r3, #0
 800719e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80071aa:	4690      	mov	r8, r2
 80071ac:	4699      	mov	r9, r3
 80071ae:	4623      	mov	r3, r4
 80071b0:	eb18 0303 	adds.w	r3, r8, r3
 80071b4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80071b8:	462b      	mov	r3, r5
 80071ba:	eb49 0303 	adc.w	r3, r9, r3
 80071be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80071c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80071ce:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80071d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80071d6:	460b      	mov	r3, r1
 80071d8:	18db      	adds	r3, r3, r3
 80071da:	653b      	str	r3, [r7, #80]	@ 0x50
 80071dc:	4613      	mov	r3, r2
 80071de:	eb42 0303 	adc.w	r3, r2, r3
 80071e2:	657b      	str	r3, [r7, #84]	@ 0x54
 80071e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80071e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80071ec:	f7f9 f840 	bl	8000270 <__aeabi_uldivmod>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4b61      	ldr	r3, [pc, #388]	@ (800737c <UART_SetConfig+0x2d4>)
 80071f6:	fba3 2302 	umull	r2, r3, r3, r2
 80071fa:	095b      	lsrs	r3, r3, #5
 80071fc:	011c      	lsls	r4, r3, #4
 80071fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007202:	2200      	movs	r2, #0
 8007204:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007208:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800720c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007210:	4642      	mov	r2, r8
 8007212:	464b      	mov	r3, r9
 8007214:	1891      	adds	r1, r2, r2
 8007216:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007218:	415b      	adcs	r3, r3
 800721a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800721c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007220:	4641      	mov	r1, r8
 8007222:	eb12 0a01 	adds.w	sl, r2, r1
 8007226:	4649      	mov	r1, r9
 8007228:	eb43 0b01 	adc.w	fp, r3, r1
 800722c:	f04f 0200 	mov.w	r2, #0
 8007230:	f04f 0300 	mov.w	r3, #0
 8007234:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007238:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800723c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007240:	4692      	mov	sl, r2
 8007242:	469b      	mov	fp, r3
 8007244:	4643      	mov	r3, r8
 8007246:	eb1a 0303 	adds.w	r3, sl, r3
 800724a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800724e:	464b      	mov	r3, r9
 8007250:	eb4b 0303 	adc.w	r3, fp, r3
 8007254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800726c:	460b      	mov	r3, r1
 800726e:	18db      	adds	r3, r3, r3
 8007270:	643b      	str	r3, [r7, #64]	@ 0x40
 8007272:	4613      	mov	r3, r2
 8007274:	eb42 0303 	adc.w	r3, r2, r3
 8007278:	647b      	str	r3, [r7, #68]	@ 0x44
 800727a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800727e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007282:	f7f8 fff5 	bl	8000270 <__aeabi_uldivmod>
 8007286:	4602      	mov	r2, r0
 8007288:	460b      	mov	r3, r1
 800728a:	4611      	mov	r1, r2
 800728c:	4b3b      	ldr	r3, [pc, #236]	@ (800737c <UART_SetConfig+0x2d4>)
 800728e:	fba3 2301 	umull	r2, r3, r3, r1
 8007292:	095b      	lsrs	r3, r3, #5
 8007294:	2264      	movs	r2, #100	@ 0x64
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	1acb      	subs	r3, r1, r3
 800729c:	00db      	lsls	r3, r3, #3
 800729e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80072a2:	4b36      	ldr	r3, [pc, #216]	@ (800737c <UART_SetConfig+0x2d4>)
 80072a4:	fba3 2302 	umull	r2, r3, r3, r2
 80072a8:	095b      	lsrs	r3, r3, #5
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80072b0:	441c      	add	r4, r3
 80072b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80072bc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80072c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80072c4:	4642      	mov	r2, r8
 80072c6:	464b      	mov	r3, r9
 80072c8:	1891      	adds	r1, r2, r2
 80072ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80072cc:	415b      	adcs	r3, r3
 80072ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80072d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80072d4:	4641      	mov	r1, r8
 80072d6:	1851      	adds	r1, r2, r1
 80072d8:	6339      	str	r1, [r7, #48]	@ 0x30
 80072da:	4649      	mov	r1, r9
 80072dc:	414b      	adcs	r3, r1
 80072de:	637b      	str	r3, [r7, #52]	@ 0x34
 80072e0:	f04f 0200 	mov.w	r2, #0
 80072e4:	f04f 0300 	mov.w	r3, #0
 80072e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80072ec:	4659      	mov	r1, fp
 80072ee:	00cb      	lsls	r3, r1, #3
 80072f0:	4651      	mov	r1, sl
 80072f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80072f6:	4651      	mov	r1, sl
 80072f8:	00ca      	lsls	r2, r1, #3
 80072fa:	4610      	mov	r0, r2
 80072fc:	4619      	mov	r1, r3
 80072fe:	4603      	mov	r3, r0
 8007300:	4642      	mov	r2, r8
 8007302:	189b      	adds	r3, r3, r2
 8007304:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007308:	464b      	mov	r3, r9
 800730a:	460a      	mov	r2, r1
 800730c:	eb42 0303 	adc.w	r3, r2, r3
 8007310:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007320:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007324:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007328:	460b      	mov	r3, r1
 800732a:	18db      	adds	r3, r3, r3
 800732c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800732e:	4613      	mov	r3, r2
 8007330:	eb42 0303 	adc.w	r3, r2, r3
 8007334:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007336:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800733a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800733e:	f7f8 ff97 	bl	8000270 <__aeabi_uldivmod>
 8007342:	4602      	mov	r2, r0
 8007344:	460b      	mov	r3, r1
 8007346:	4b0d      	ldr	r3, [pc, #52]	@ (800737c <UART_SetConfig+0x2d4>)
 8007348:	fba3 1302 	umull	r1, r3, r3, r2
 800734c:	095b      	lsrs	r3, r3, #5
 800734e:	2164      	movs	r1, #100	@ 0x64
 8007350:	fb01 f303 	mul.w	r3, r1, r3
 8007354:	1ad3      	subs	r3, r2, r3
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	3332      	adds	r3, #50	@ 0x32
 800735a:	4a08      	ldr	r2, [pc, #32]	@ (800737c <UART_SetConfig+0x2d4>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	095b      	lsrs	r3, r3, #5
 8007362:	f003 0207 	and.w	r2, r3, #7
 8007366:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4422      	add	r2, r4
 800736e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007370:	e106      	b.n	8007580 <UART_SetConfig+0x4d8>
 8007372:	bf00      	nop
 8007374:	40011000 	.word	0x40011000
 8007378:	40011400 	.word	0x40011400
 800737c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007384:	2200      	movs	r2, #0
 8007386:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800738a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800738e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007392:	4642      	mov	r2, r8
 8007394:	464b      	mov	r3, r9
 8007396:	1891      	adds	r1, r2, r2
 8007398:	6239      	str	r1, [r7, #32]
 800739a:	415b      	adcs	r3, r3
 800739c:	627b      	str	r3, [r7, #36]	@ 0x24
 800739e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073a2:	4641      	mov	r1, r8
 80073a4:	1854      	adds	r4, r2, r1
 80073a6:	4649      	mov	r1, r9
 80073a8:	eb43 0501 	adc.w	r5, r3, r1
 80073ac:	f04f 0200 	mov.w	r2, #0
 80073b0:	f04f 0300 	mov.w	r3, #0
 80073b4:	00eb      	lsls	r3, r5, #3
 80073b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80073ba:	00e2      	lsls	r2, r4, #3
 80073bc:	4614      	mov	r4, r2
 80073be:	461d      	mov	r5, r3
 80073c0:	4643      	mov	r3, r8
 80073c2:	18e3      	adds	r3, r4, r3
 80073c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80073c8:	464b      	mov	r3, r9
 80073ca:	eb45 0303 	adc.w	r3, r5, r3
 80073ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80073d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80073de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80073e2:	f04f 0200 	mov.w	r2, #0
 80073e6:	f04f 0300 	mov.w	r3, #0
 80073ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80073ee:	4629      	mov	r1, r5
 80073f0:	008b      	lsls	r3, r1, #2
 80073f2:	4621      	mov	r1, r4
 80073f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80073f8:	4621      	mov	r1, r4
 80073fa:	008a      	lsls	r2, r1, #2
 80073fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007400:	f7f8 ff36 	bl	8000270 <__aeabi_uldivmod>
 8007404:	4602      	mov	r2, r0
 8007406:	460b      	mov	r3, r1
 8007408:	4b60      	ldr	r3, [pc, #384]	@ (800758c <UART_SetConfig+0x4e4>)
 800740a:	fba3 2302 	umull	r2, r3, r3, r2
 800740e:	095b      	lsrs	r3, r3, #5
 8007410:	011c      	lsls	r4, r3, #4
 8007412:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007416:	2200      	movs	r2, #0
 8007418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800741c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007420:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007424:	4642      	mov	r2, r8
 8007426:	464b      	mov	r3, r9
 8007428:	1891      	adds	r1, r2, r2
 800742a:	61b9      	str	r1, [r7, #24]
 800742c:	415b      	adcs	r3, r3
 800742e:	61fb      	str	r3, [r7, #28]
 8007430:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007434:	4641      	mov	r1, r8
 8007436:	1851      	adds	r1, r2, r1
 8007438:	6139      	str	r1, [r7, #16]
 800743a:	4649      	mov	r1, r9
 800743c:	414b      	adcs	r3, r1
 800743e:	617b      	str	r3, [r7, #20]
 8007440:	f04f 0200 	mov.w	r2, #0
 8007444:	f04f 0300 	mov.w	r3, #0
 8007448:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800744c:	4659      	mov	r1, fp
 800744e:	00cb      	lsls	r3, r1, #3
 8007450:	4651      	mov	r1, sl
 8007452:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007456:	4651      	mov	r1, sl
 8007458:	00ca      	lsls	r2, r1, #3
 800745a:	4610      	mov	r0, r2
 800745c:	4619      	mov	r1, r3
 800745e:	4603      	mov	r3, r0
 8007460:	4642      	mov	r2, r8
 8007462:	189b      	adds	r3, r3, r2
 8007464:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007468:	464b      	mov	r3, r9
 800746a:	460a      	mov	r2, r1
 800746c:	eb42 0303 	adc.w	r3, r2, r3
 8007470:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800747e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007480:	f04f 0200 	mov.w	r2, #0
 8007484:	f04f 0300 	mov.w	r3, #0
 8007488:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800748c:	4649      	mov	r1, r9
 800748e:	008b      	lsls	r3, r1, #2
 8007490:	4641      	mov	r1, r8
 8007492:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007496:	4641      	mov	r1, r8
 8007498:	008a      	lsls	r2, r1, #2
 800749a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800749e:	f7f8 fee7 	bl	8000270 <__aeabi_uldivmod>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4611      	mov	r1, r2
 80074a8:	4b38      	ldr	r3, [pc, #224]	@ (800758c <UART_SetConfig+0x4e4>)
 80074aa:	fba3 2301 	umull	r2, r3, r3, r1
 80074ae:	095b      	lsrs	r3, r3, #5
 80074b0:	2264      	movs	r2, #100	@ 0x64
 80074b2:	fb02 f303 	mul.w	r3, r2, r3
 80074b6:	1acb      	subs	r3, r1, r3
 80074b8:	011b      	lsls	r3, r3, #4
 80074ba:	3332      	adds	r3, #50	@ 0x32
 80074bc:	4a33      	ldr	r2, [pc, #204]	@ (800758c <UART_SetConfig+0x4e4>)
 80074be:	fba2 2303 	umull	r2, r3, r2, r3
 80074c2:	095b      	lsrs	r3, r3, #5
 80074c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80074c8:	441c      	add	r4, r3
 80074ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074ce:	2200      	movs	r2, #0
 80074d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80074d2:	677a      	str	r2, [r7, #116]	@ 0x74
 80074d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80074d8:	4642      	mov	r2, r8
 80074da:	464b      	mov	r3, r9
 80074dc:	1891      	adds	r1, r2, r2
 80074de:	60b9      	str	r1, [r7, #8]
 80074e0:	415b      	adcs	r3, r3
 80074e2:	60fb      	str	r3, [r7, #12]
 80074e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80074e8:	4641      	mov	r1, r8
 80074ea:	1851      	adds	r1, r2, r1
 80074ec:	6039      	str	r1, [r7, #0]
 80074ee:	4649      	mov	r1, r9
 80074f0:	414b      	adcs	r3, r1
 80074f2:	607b      	str	r3, [r7, #4]
 80074f4:	f04f 0200 	mov.w	r2, #0
 80074f8:	f04f 0300 	mov.w	r3, #0
 80074fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007500:	4659      	mov	r1, fp
 8007502:	00cb      	lsls	r3, r1, #3
 8007504:	4651      	mov	r1, sl
 8007506:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800750a:	4651      	mov	r1, sl
 800750c:	00ca      	lsls	r2, r1, #3
 800750e:	4610      	mov	r0, r2
 8007510:	4619      	mov	r1, r3
 8007512:	4603      	mov	r3, r0
 8007514:	4642      	mov	r2, r8
 8007516:	189b      	adds	r3, r3, r2
 8007518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800751a:	464b      	mov	r3, r9
 800751c:	460a      	mov	r2, r1
 800751e:	eb42 0303 	adc.w	r3, r2, r3
 8007522:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007528:	685b      	ldr	r3, [r3, #4]
 800752a:	2200      	movs	r2, #0
 800752c:	663b      	str	r3, [r7, #96]	@ 0x60
 800752e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007530:	f04f 0200 	mov.w	r2, #0
 8007534:	f04f 0300 	mov.w	r3, #0
 8007538:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800753c:	4649      	mov	r1, r9
 800753e:	008b      	lsls	r3, r1, #2
 8007540:	4641      	mov	r1, r8
 8007542:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007546:	4641      	mov	r1, r8
 8007548:	008a      	lsls	r2, r1, #2
 800754a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800754e:	f7f8 fe8f 	bl	8000270 <__aeabi_uldivmod>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4b0d      	ldr	r3, [pc, #52]	@ (800758c <UART_SetConfig+0x4e4>)
 8007558:	fba3 1302 	umull	r1, r3, r3, r2
 800755c:	095b      	lsrs	r3, r3, #5
 800755e:	2164      	movs	r1, #100	@ 0x64
 8007560:	fb01 f303 	mul.w	r3, r1, r3
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	3332      	adds	r3, #50	@ 0x32
 800756a:	4a08      	ldr	r2, [pc, #32]	@ (800758c <UART_SetConfig+0x4e4>)
 800756c:	fba2 2303 	umull	r2, r3, r2, r3
 8007570:	095b      	lsrs	r3, r3, #5
 8007572:	f003 020f 	and.w	r2, r3, #15
 8007576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4422      	add	r2, r4
 800757e:	609a      	str	r2, [r3, #8]
}
 8007580:	bf00      	nop
 8007582:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007586:	46bd      	mov	sp, r7
 8007588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800758c:	51eb851f 	.word	0x51eb851f

08007590 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007590:	b084      	sub	sp, #16
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
 800759a:	f107 001c 	add.w	r0, r7, #28
 800759e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80075a2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d123      	bne.n	80075f2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80075be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075d2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d105      	bne.n	80075e6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f9dc 	bl	80079a4 <USB_CoreReset>
 80075ec:	4603      	mov	r3, r0
 80075ee:	73fb      	strb	r3, [r7, #15]
 80075f0:	e01b      	b.n	800762a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	68db      	ldr	r3, [r3, #12]
 80075f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f9d0 	bl	80079a4 <USB_CoreReset>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007608:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800760c:	2b00      	cmp	r3, #0
 800760e:	d106      	bne.n	800761e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007614:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	639a      	str	r2, [r3, #56]	@ 0x38
 800761c:	e005      	b.n	800762a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007622:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800762a:	7fbb      	ldrb	r3, [r7, #30]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d10b      	bne.n	8007648 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f043 0206 	orr.w	r2, r3, #6
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	689b      	ldr	r3, [r3, #8]
 8007640:	f043 0220 	orr.w	r2, r3, #32
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007648:	7bfb      	ldrb	r3, [r7, #15]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3710      	adds	r7, #16
 800764e:	46bd      	mov	sp, r7
 8007650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007654:	b004      	add	sp, #16
 8007656:	4770      	bx	lr

08007658 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	689b      	ldr	r3, [r3, #8]
 8007664:	f043 0201 	orr.w	r2, r3, #1
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	370c      	adds	r7, #12
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f023 0201 	bic.w	r2, r3, #1
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b084      	sub	sp, #16
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	460b      	mov	r3, r1
 80076a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80076a8:	2300      	movs	r3, #0
 80076aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	68db      	ldr	r3, [r3, #12]
 80076b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80076b8:	78fb      	ldrb	r3, [r7, #3]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d115      	bne.n	80076ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68db      	ldr	r3, [r3, #12]
 80076c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076ca:	200a      	movs	r0, #10
 80076cc:	f7fb fa6e 	bl	8002bac <HAL_Delay>
      ms += 10U;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	330a      	adds	r3, #10
 80076d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f956 	bl	8007988 <USB_GetMode>
 80076dc:	4603      	mov	r3, r0
 80076de:	2b01      	cmp	r3, #1
 80076e0:	d01e      	beq.n	8007720 <USB_SetCurrentMode+0x84>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2bc7      	cmp	r3, #199	@ 0xc7
 80076e6:	d9f0      	bls.n	80076ca <USB_SetCurrentMode+0x2e>
 80076e8:	e01a      	b.n	8007720 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80076ea:	78fb      	ldrb	r3, [r7, #3]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d115      	bne.n	800771c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	68db      	ldr	r3, [r3, #12]
 80076f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80076fc:	200a      	movs	r0, #10
 80076fe:	f7fb fa55 	bl	8002bac <HAL_Delay>
      ms += 10U;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	330a      	adds	r3, #10
 8007706:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007708:	6878      	ldr	r0, [r7, #4]
 800770a:	f000 f93d 	bl	8007988 <USB_GetMode>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d005      	beq.n	8007720 <USB_SetCurrentMode+0x84>
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2bc7      	cmp	r3, #199	@ 0xc7
 8007718:	d9f0      	bls.n	80076fc <USB_SetCurrentMode+0x60>
 800771a:	e001      	b.n	8007720 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e005      	b.n	800772c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	2bc8      	cmp	r3, #200	@ 0xc8
 8007724:	d101      	bne.n	800772a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800773e:	2300      	movs	r3, #0
 8007740:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	3301      	adds	r3, #1
 8007746:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800774e:	d901      	bls.n	8007754 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007750:	2303      	movs	r3, #3
 8007752:	e01b      	b.n	800778c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	691b      	ldr	r3, [r3, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	daf2      	bge.n	8007742 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800775c:	2300      	movs	r3, #0
 800775e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	019b      	lsls	r3, r3, #6
 8007764:	f043 0220 	orr.w	r2, r3, #32
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	3301      	adds	r3, #1
 8007770:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007778:	d901      	bls.n	800777e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800777a:	2303      	movs	r3, #3
 800777c:	e006      	b.n	800778c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0320 	and.w	r3, r3, #32
 8007786:	2b20      	cmp	r3, #32
 8007788:	d0f0      	beq.n	800776c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3714      	adds	r7, #20
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077a0:	2300      	movs	r3, #0
 80077a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b0:	d901      	bls.n	80077b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e018      	b.n	80077e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	daf2      	bge.n	80077a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077be:	2300      	movs	r3, #0
 80077c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2210      	movs	r2, #16
 80077c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	3301      	adds	r3, #1
 80077cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077d4:	d901      	bls.n	80077da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80077d6:	2303      	movs	r3, #3
 80077d8:	e006      	b.n	80077e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	691b      	ldr	r3, [r3, #16]
 80077de:	f003 0310 	and.w	r3, r3, #16
 80077e2:	2b10      	cmp	r3, #16
 80077e4:	d0f0      	beq.n	80077c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3714      	adds	r7, #20
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr

080077f4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80077f4:	b480      	push	{r7}
 80077f6:	b089      	sub	sp, #36	@ 0x24
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	60f8      	str	r0, [r7, #12]
 80077fc:	60b9      	str	r1, [r7, #8]
 80077fe:	4611      	mov	r1, r2
 8007800:	461a      	mov	r2, r3
 8007802:	460b      	mov	r3, r1
 8007804:	71fb      	strb	r3, [r7, #7]
 8007806:	4613      	mov	r3, r2
 8007808:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007812:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007816:	2b00      	cmp	r3, #0
 8007818:	d123      	bne.n	8007862 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800781a:	88bb      	ldrh	r3, [r7, #4]
 800781c:	3303      	adds	r3, #3
 800781e:	089b      	lsrs	r3, r3, #2
 8007820:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007822:	2300      	movs	r3, #0
 8007824:	61bb      	str	r3, [r7, #24]
 8007826:	e018      	b.n	800785a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007828:	79fb      	ldrb	r3, [r7, #7]
 800782a:	031a      	lsls	r2, r3, #12
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	4413      	add	r3, r2
 8007830:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007834:	461a      	mov	r2, r3
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800783c:	69fb      	ldr	r3, [r7, #28]
 800783e:	3301      	adds	r3, #1
 8007840:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	3301      	adds	r3, #1
 8007846:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007848:	69fb      	ldr	r3, [r7, #28]
 800784a:	3301      	adds	r3, #1
 800784c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	3301      	adds	r3, #1
 8007852:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	3301      	adds	r3, #1
 8007858:	61bb      	str	r3, [r7, #24]
 800785a:	69ba      	ldr	r2, [r7, #24]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	d3e2      	bcc.n	8007828 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3724      	adds	r7, #36	@ 0x24
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007870:	b480      	push	{r7}
 8007872:	b08b      	sub	sp, #44	@ 0x2c
 8007874:	af00      	add	r7, sp, #0
 8007876:	60f8      	str	r0, [r7, #12]
 8007878:	60b9      	str	r1, [r7, #8]
 800787a:	4613      	mov	r3, r2
 800787c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007886:	88fb      	ldrh	r3, [r7, #6]
 8007888:	089b      	lsrs	r3, r3, #2
 800788a:	b29b      	uxth	r3, r3
 800788c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800788e:	88fb      	ldrh	r3, [r7, #6]
 8007890:	f003 0303 	and.w	r3, r3, #3
 8007894:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007896:	2300      	movs	r3, #0
 8007898:	623b      	str	r3, [r7, #32]
 800789a:	e014      	b.n	80078c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078a2:	681a      	ldr	r2, [r3, #0]
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078aa:	3301      	adds	r3, #1
 80078ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b0:	3301      	adds	r3, #1
 80078b2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b6:	3301      	adds	r3, #1
 80078b8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078bc:	3301      	adds	r3, #1
 80078be:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	3301      	adds	r3, #1
 80078c4:	623b      	str	r3, [r7, #32]
 80078c6:	6a3a      	ldr	r2, [r7, #32]
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	429a      	cmp	r2, r3
 80078cc:	d3e6      	bcc.n	800789c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078ce:	8bfb      	ldrh	r3, [r7, #30]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d01e      	beq.n	8007912 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078d8:	69bb      	ldr	r3, [r7, #24]
 80078da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078de:	461a      	mov	r2, r3
 80078e0:	f107 0310 	add.w	r3, r7, #16
 80078e4:	6812      	ldr	r2, [r2, #0]
 80078e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078e8:	693a      	ldr	r2, [r7, #16]
 80078ea:	6a3b      	ldr	r3, [r7, #32]
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	fa22 f303 	lsr.w	r3, r2, r3
 80078f4:	b2da      	uxtb	r2, r3
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	701a      	strb	r2, [r3, #0]
      i++;
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	3301      	adds	r3, #1
 80078fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8007900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007902:	3301      	adds	r3, #1
 8007904:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007906:	8bfb      	ldrh	r3, [r7, #30]
 8007908:	3b01      	subs	r3, #1
 800790a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800790c:	8bfb      	ldrh	r3, [r7, #30]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d1ea      	bne.n	80078e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007914:	4618      	mov	r0, r3
 8007916:	372c      	adds	r7, #44	@ 0x2c
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007920:	b480      	push	{r7}
 8007922:	b085      	sub	sp, #20
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	68fa      	ldr	r2, [r7, #12]
 8007934:	4013      	ands	r3, r2
 8007936:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007938:	68fb      	ldr	r3, [r7, #12]
}
 800793a:	4618      	mov	r0, r3
 800793c:	3714      	adds	r7, #20
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007946:	b480      	push	{r7}
 8007948:	b085      	sub	sp, #20
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	460b      	mov	r3, r1
 8007950:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007956:	78fb      	ldrb	r3, [r7, #3]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	4413      	add	r3, r2
 800795e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007962:	689b      	ldr	r3, [r3, #8]
 8007964:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007966:	78fb      	ldrb	r3, [r7, #3]
 8007968:	015a      	lsls	r2, r3, #5
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	4413      	add	r3, r2
 800796e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007972:	68db      	ldr	r3, [r3, #12]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	4013      	ands	r3, r2
 8007978:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800797a:	68bb      	ldr	r3, [r7, #8]
}
 800797c:	4618      	mov	r0, r3
 800797e:	3714      	adds	r7, #20
 8007980:	46bd      	mov	sp, r7
 8007982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007986:	4770      	bx	lr

08007988 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	695b      	ldr	r3, [r3, #20]
 8007994:	f003 0301 	and.w	r3, r3, #1
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b085      	sub	sp, #20
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	3301      	adds	r3, #1
 80079b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079bc:	d901      	bls.n	80079c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079be:	2303      	movs	r3, #3
 80079c0:	e01b      	b.n	80079fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	daf2      	bge.n	80079b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079ca:	2300      	movs	r3, #0
 80079cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f043 0201 	orr.w	r2, r3, #1
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	3301      	adds	r3, #1
 80079de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079e6:	d901      	bls.n	80079ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079e8:	2303      	movs	r3, #3
 80079ea:	e006      	b.n	80079fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	f003 0301 	and.w	r3, r3, #1
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d0f0      	beq.n	80079da <USB_CoreReset+0x36>

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3714      	adds	r7, #20
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr
	...

08007a08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007a08:	b084      	sub	sp, #16
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b086      	sub	sp, #24
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a28:	461a      	mov	r2, r3
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d119      	bne.n	8007a92 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d10a      	bne.n	8007a7c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a74:	f043 0304 	orr.w	r3, r3, #4
 8007a78:	6013      	str	r3, [r2, #0]
 8007a7a:	e014      	b.n	8007aa6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a8a:	f023 0304 	bic.w	r3, r3, #4
 8007a8e:	6013      	str	r3, [r2, #0]
 8007a90:	e009      	b.n	8007aa6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68fa      	ldr	r2, [r7, #12]
 8007a9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007aa0:	f023 0304 	bic.w	r3, r3, #4
 8007aa4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007aa6:	2110      	movs	r1, #16
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f7ff fe43 	bl	8007734 <USB_FlushTxFifo>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d001      	beq.n	8007ab8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007ab8:	6878      	ldr	r0, [r7, #4]
 8007aba:	f7ff fe6d 	bl	8007798 <USB_FlushRxFifo>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d001      	beq.n	8007ac8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ac8:	2300      	movs	r3, #0
 8007aca:	613b      	str	r3, [r7, #16]
 8007acc:	e015      	b.n	8007afa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ada:	461a      	mov	r2, r3
 8007adc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ae0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	015a      	lsls	r2, r3, #5
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	4413      	add	r3, r2
 8007aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aee:	461a      	mov	r2, r3
 8007af0:	2300      	movs	r3, #0
 8007af2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	3301      	adds	r3, #1
 8007af8:	613b      	str	r3, [r7, #16]
 8007afa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007afe:	461a      	mov	r2, r3
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d3e3      	bcc.n	8007ace <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b12:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	4a18      	ldr	r2, [pc, #96]	@ (8007b78 <USB_HostInit+0x170>)
 8007b18:	4293      	cmp	r3, r2
 8007b1a:	d10b      	bne.n	8007b34 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b22:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a15      	ldr	r2, [pc, #84]	@ (8007b7c <USB_HostInit+0x174>)
 8007b28:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	4a14      	ldr	r2, [pc, #80]	@ (8007b80 <USB_HostInit+0x178>)
 8007b2e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007b32:	e009      	b.n	8007b48 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2280      	movs	r2, #128	@ 0x80
 8007b38:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	4a11      	ldr	r2, [pc, #68]	@ (8007b84 <USB_HostInit+0x17c>)
 8007b3e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4a11      	ldr	r2, [pc, #68]	@ (8007b88 <USB_HostInit+0x180>)
 8007b44:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d105      	bne.n	8007b5c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699b      	ldr	r3, [r3, #24]
 8007b54:	f043 0210 	orr.w	r2, r3, #16
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	4b0a      	ldr	r3, [pc, #40]	@ (8007b8c <USB_HostInit+0x184>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	687a      	ldr	r2, [r7, #4]
 8007b66:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3718      	adds	r7, #24
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b74:	b004      	add	sp, #16
 8007b76:	4770      	bx	lr
 8007b78:	40040000 	.word	0x40040000
 8007b7c:	01000200 	.word	0x01000200
 8007b80:	00e00300 	.word	0x00e00300
 8007b84:	00600080 	.word	0x00600080
 8007b88:	004000e0 	.word	0x004000e0
 8007b8c:	a3200008 	.word	0xa3200008

08007b90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b90:	b480      	push	{r7}
 8007b92:	b085      	sub	sp, #20
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	460b      	mov	r3, r1
 8007b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007bae:	f023 0303 	bic.w	r3, r3, #3
 8007bb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 0303 	and.w	r3, r3, #3
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007bc8:	4313      	orrs	r3, r2
 8007bca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007bcc:	78fb      	ldrb	r3, [r7, #3]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d107      	bne.n	8007be2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007bde:	6053      	str	r3, [r2, #4]
 8007be0:	e00c      	b.n	8007bfc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	2b02      	cmp	r3, #2
 8007be6:	d107      	bne.n	8007bf8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007bf4:	6053      	str	r3, [r2, #4]
 8007bf6:	e001      	b.n	8007bfc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e000      	b.n	8007bfe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3714      	adds	r7, #20
 8007c02:	46bd      	mov	sp, r7
 8007c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c08:	4770      	bx	lr

08007c0a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007c0a:	b580      	push	{r7, lr}
 8007c0c:	b084      	sub	sp, #16
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007c16:	2300      	movs	r3, #0
 8007c18:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007c2a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	68fa      	ldr	r2, [r7, #12]
 8007c30:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007c34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c38:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8007c3a:	2064      	movs	r0, #100	@ 0x64
 8007c3c:	f7fa ffb6 	bl	8002bac <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	68fa      	ldr	r2, [r7, #12]
 8007c44:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007c48:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c4c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007c4e:	200a      	movs	r0, #10
 8007c50:	f7fa ffac 	bl	8002bac <HAL_Delay>

  return HAL_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b085      	sub	sp, #20
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
 8007c66:	460b      	mov	r3, r1
 8007c68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007c82:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <USB_DriveVbus+0x44>
 8007c8e:	78fb      	ldrb	r3, [r7, #3]
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d106      	bne.n	8007ca2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	68fa      	ldr	r2, [r7, #12]
 8007c98:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007c9c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007ca0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007ca8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007cac:	d109      	bne.n	8007cc2 <USB_DriveVbus+0x64>
 8007cae:	78fb      	ldrb	r3, [r7, #3]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d106      	bne.n	8007cc2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007cb4:	68bb      	ldr	r3, [r7, #8]
 8007cb6:	68fa      	ldr	r2, [r7, #12]
 8007cb8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007cbc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007cc0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007cc2:	2300      	movs	r3, #0
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3714      	adds	r7, #20
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cce:	4770      	bx	lr

08007cd0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	0c5b      	lsrs	r3, r3, #17
 8007cee:	f003 0303 	and.w	r3, r3, #3
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007d10:	689b      	ldr	r3, [r3, #8]
 8007d12:	b29b      	uxth	r3, r3
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3714      	adds	r7, #20
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1e:	4770      	bx	lr

08007d20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b088      	sub	sp, #32
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	6078      	str	r0, [r7, #4]
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	70fb      	strb	r3, [r7, #3]
 8007d32:	460b      	mov	r3, r1
 8007d34:	70bb      	strb	r3, [r7, #2]
 8007d36:	4613      	mov	r3, r2
 8007d38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007d42:	78fb      	ldrb	r3, [r7, #3]
 8007d44:	015a      	lsls	r2, r3, #5
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	4413      	add	r3, r2
 8007d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4e:	461a      	mov	r2, r3
 8007d50:	f04f 33ff 	mov.w	r3, #4294967295
 8007d54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007d56:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007d5a:	2b03      	cmp	r3, #3
 8007d5c:	d87c      	bhi.n	8007e58 <USB_HC_Init+0x138>
 8007d5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007d64 <USB_HC_Init+0x44>)
 8007d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d64:	08007d75 	.word	0x08007d75
 8007d68:	08007e1b 	.word	0x08007e1b
 8007d6c:	08007d75 	.word	0x08007d75
 8007d70:	08007ddd 	.word	0x08007ddd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007d74:	78fb      	ldrb	r3, [r7, #3]
 8007d76:	015a      	lsls	r2, r3, #5
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	4413      	add	r3, r2
 8007d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d80:	461a      	mov	r2, r3
 8007d82:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007d86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007d88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	da10      	bge.n	8007db2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007d90:	78fb      	ldrb	r3, [r7, #3]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	78fa      	ldrb	r2, [r7, #3]
 8007da0:	0151      	lsls	r1, r2, #5
 8007da2:	693a      	ldr	r2, [r7, #16]
 8007da4:	440a      	add	r2, r1
 8007da6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007daa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007db0:	e055      	b.n	8007e5e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	4a6f      	ldr	r2, [pc, #444]	@ (8007f74 <USB_HC_Init+0x254>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d151      	bne.n	8007e5e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007dba:	78fb      	ldrb	r3, [r7, #3]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	78fa      	ldrb	r2, [r7, #3]
 8007dca:	0151      	lsls	r1, r2, #5
 8007dcc:	693a      	ldr	r2, [r7, #16]
 8007dce:	440a      	add	r2, r1
 8007dd0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dd4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007dd8:	60d3      	str	r3, [r2, #12]
      break;
 8007dda:	e040      	b.n	8007e5e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007ddc:	78fb      	ldrb	r3, [r7, #3]
 8007dde:	015a      	lsls	r2, r3, #5
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	4413      	add	r3, r2
 8007de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007de8:	461a      	mov	r2, r3
 8007dea:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007dee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007df0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	da34      	bge.n	8007e62 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007df8:	78fb      	ldrb	r3, [r7, #3]
 8007dfa:	015a      	lsls	r2, r3, #5
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	4413      	add	r3, r2
 8007e00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e04:	68db      	ldr	r3, [r3, #12]
 8007e06:	78fa      	ldrb	r2, [r7, #3]
 8007e08:	0151      	lsls	r1, r2, #5
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	440a      	add	r2, r1
 8007e0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e16:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007e18:	e023      	b.n	8007e62 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e26:	461a      	mov	r2, r3
 8007e28:	f240 2325 	movw	r3, #549	@ 0x225
 8007e2c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007e2e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	da17      	bge.n	8007e66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	693b      	ldr	r3, [r7, #16]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e42:	68db      	ldr	r3, [r3, #12]
 8007e44:	78fa      	ldrb	r2, [r7, #3]
 8007e46:	0151      	lsls	r1, r2, #5
 8007e48:	693a      	ldr	r2, [r7, #16]
 8007e4a:	440a      	add	r2, r1
 8007e4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e50:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007e54:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007e56:	e006      	b.n	8007e66 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	77fb      	strb	r3, [r7, #31]
      break;
 8007e5c:	e004      	b.n	8007e68 <USB_HC_Init+0x148>
      break;
 8007e5e:	bf00      	nop
 8007e60:	e002      	b.n	8007e68 <USB_HC_Init+0x148>
      break;
 8007e62:	bf00      	nop
 8007e64:	e000      	b.n	8007e68 <USB_HC_Init+0x148>
      break;
 8007e66:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007e68:	78fb      	ldrb	r3, [r7, #3]
 8007e6a:	015a      	lsls	r2, r3, #5
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	4413      	add	r3, r2
 8007e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e74:	461a      	mov	r2, r3
 8007e76:	2300      	movs	r3, #0
 8007e78:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8007e7a:	78fb      	ldrb	r3, [r7, #3]
 8007e7c:	015a      	lsls	r2, r3, #5
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	4413      	add	r3, r2
 8007e82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	78fa      	ldrb	r2, [r7, #3]
 8007e8a:	0151      	lsls	r1, r2, #5
 8007e8c:	693a      	ldr	r2, [r7, #16]
 8007e8e:	440a      	add	r2, r1
 8007e90:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e94:	f043 0302 	orr.w	r3, r3, #2
 8007e98:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ea0:	699a      	ldr	r2, [r3, #24]
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	f003 030f 	and.w	r3, r3, #15
 8007ea8:	2101      	movs	r1, #1
 8007eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8007eae:	6939      	ldr	r1, [r7, #16]
 8007eb0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007eb4:	4313      	orrs	r3, r2
 8007eb6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007ec4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	da03      	bge.n	8007ed4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007ecc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ed0:	61bb      	str	r3, [r7, #24]
 8007ed2:	e001      	b.n	8007ed8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007ed4:	2300      	movs	r3, #0
 8007ed6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7ff fef9 	bl	8007cd0 <USB_GetHostSpeed>
 8007ede:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007ee0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d106      	bne.n	8007ef6 <USB_HC_Init+0x1d6>
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d003      	beq.n	8007ef6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007eee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007ef2:	617b      	str	r3, [r7, #20]
 8007ef4:	e001      	b.n	8007efa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007efa:	787b      	ldrb	r3, [r7, #1]
 8007efc:	059b      	lsls	r3, r3, #22
 8007efe:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f02:	78bb      	ldrb	r3, [r7, #2]
 8007f04:	02db      	lsls	r3, r3, #11
 8007f06:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f0a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f10:	049b      	lsls	r3, r3, #18
 8007f12:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007f16:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007f18:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007f1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007f1e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007f20:	69bb      	ldr	r3, [r7, #24]
 8007f22:	431a      	orrs	r2, r3
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f28:	78fa      	ldrb	r2, [r7, #3]
 8007f2a:	0151      	lsls	r1, r2, #5
 8007f2c:	693a      	ldr	r2, [r7, #16]
 8007f2e:	440a      	add	r2, r1
 8007f30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007f34:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007f38:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8007f3a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f3e:	2b03      	cmp	r3, #3
 8007f40:	d003      	beq.n	8007f4a <USB_HC_Init+0x22a>
 8007f42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10f      	bne.n	8007f6a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8007f4a:	78fb      	ldrb	r3, [r7, #3]
 8007f4c:	015a      	lsls	r2, r3, #5
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	4413      	add	r3, r2
 8007f52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	78fa      	ldrb	r2, [r7, #3]
 8007f5a:	0151      	lsls	r1, r2, #5
 8007f5c:	693a      	ldr	r2, [r7, #16]
 8007f5e:	440a      	add	r2, r1
 8007f60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f68:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8007f6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3720      	adds	r7, #32
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}
 8007f74:	40040000 	.word	0x40040000

08007f78 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b08c      	sub	sp, #48	@ 0x30
 8007f7c:	af02      	add	r7, sp, #8
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	4613      	mov	r3, r2
 8007f84:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	785b      	ldrb	r3, [r3, #1]
 8007f8e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007f90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007f94:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a5d      	ldr	r2, [pc, #372]	@ (8008110 <USB_HC_StartXfer+0x198>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d12f      	bne.n	8007ffe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007f9e:	79fb      	ldrb	r3, [r7, #7]
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d11c      	bne.n	8007fde <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	7c9b      	ldrb	r3, [r3, #18]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d003      	beq.n	8007fb4 <USB_HC_StartXfer+0x3c>
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	7c9b      	ldrb	r3, [r3, #18]
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	d124      	bne.n	8007ffe <USB_HC_StartXfer+0x86>
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	799b      	ldrb	r3, [r3, #6]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d120      	bne.n	8007ffe <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	6a3b      	ldr	r3, [r7, #32]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc8:	68db      	ldr	r3, [r3, #12]
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	6a3a      	ldr	r2, [r7, #32]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fda:	60d3      	str	r3, [r2, #12]
 8007fdc:	e00f      	b.n	8007ffe <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	791b      	ldrb	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d10b      	bne.n	8007ffe <USB_HC_StartXfer+0x86>
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	795b      	ldrb	r3, [r3, #5]
 8007fea:	2b01      	cmp	r3, #1
 8007fec:	d107      	bne.n	8007ffe <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	785b      	ldrb	r3, [r3, #1]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	68f8      	ldr	r0, [r7, #12]
 8007ff6:	f000 fb6b 	bl	80086d0 <USB_DoPing>
        return HAL_OK;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e232      	b.n	8008464 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	799b      	ldrb	r3, [r3, #6]
 8008002:	2b01      	cmp	r3, #1
 8008004:	d158      	bne.n	80080b8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008006:	2301      	movs	r3, #1
 8008008:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	78db      	ldrb	r3, [r3, #3]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d007      	beq.n	8008022 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008012:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	8a92      	ldrh	r2, [r2, #20]
 8008018:	fb03 f202 	mul.w	r2, r3, r2
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	61da      	str	r2, [r3, #28]
 8008020:	e07c      	b.n	800811c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	7c9b      	ldrb	r3, [r3, #18]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d130      	bne.n	800808c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800802a:	68bb      	ldr	r3, [r7, #8]
 800802c:	6a1b      	ldr	r3, [r3, #32]
 800802e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008030:	d918      	bls.n	8008064 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	8a9b      	ldrh	r3, [r3, #20]
 8008036:	461a      	mov	r2, r3
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	69da      	ldr	r2, [r3, #28]
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d003      	beq.n	8008054 <USB_HC_StartXfer+0xdc>
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	2b02      	cmp	r3, #2
 8008052:	d103      	bne.n	800805c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	2202      	movs	r2, #2
 8008058:	60da      	str	r2, [r3, #12]
 800805a:	e05f      	b.n	800811c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	2201      	movs	r2, #1
 8008060:	60da      	str	r2, [r3, #12]
 8008062:	e05b      	b.n	800811c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	6a1a      	ldr	r2, [r3, #32]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d007      	beq.n	8008084 <USB_HC_StartXfer+0x10c>
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	68db      	ldr	r3, [r3, #12]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d003      	beq.n	8008084 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2204      	movs	r2, #4
 8008080:	60da      	str	r2, [r3, #12]
 8008082:	e04b      	b.n	800811c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008084:	68bb      	ldr	r3, [r7, #8]
 8008086:	2203      	movs	r2, #3
 8008088:	60da      	str	r2, [r3, #12]
 800808a:	e047      	b.n	800811c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800808c:	79fb      	ldrb	r3, [r7, #7]
 800808e:	2b01      	cmp	r3, #1
 8008090:	d10d      	bne.n	80080ae <USB_HC_StartXfer+0x136>
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6a1b      	ldr	r3, [r3, #32]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	8a92      	ldrh	r2, [r2, #20]
 800809a:	4293      	cmp	r3, r2
 800809c:	d907      	bls.n	80080ae <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800809e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080a0:	68ba      	ldr	r2, [r7, #8]
 80080a2:	8a92      	ldrh	r2, [r2, #20]
 80080a4:	fb03 f202 	mul.w	r2, r3, r2
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	61da      	str	r2, [r3, #28]
 80080ac:	e036      	b.n	800811c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80080ae:	68bb      	ldr	r3, [r7, #8]
 80080b0:	6a1a      	ldr	r2, [r3, #32]
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	61da      	str	r2, [r3, #28]
 80080b6:	e031      	b.n	800811c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	6a1b      	ldr	r3, [r3, #32]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d018      	beq.n	80080f2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	6a1b      	ldr	r3, [r3, #32]
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	8a92      	ldrh	r2, [r2, #20]
 80080c8:	4413      	add	r3, r2
 80080ca:	3b01      	subs	r3, #1
 80080cc:	68ba      	ldr	r2, [r7, #8]
 80080ce:	8a92      	ldrh	r2, [r2, #20]
 80080d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80080d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80080d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80080d8:	8b7b      	ldrh	r3, [r7, #26]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d90b      	bls.n	80080f6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80080de:	8b7b      	ldrh	r3, [r7, #26]
 80080e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80080e4:	68ba      	ldr	r2, [r7, #8]
 80080e6:	8a92      	ldrh	r2, [r2, #20]
 80080e8:	fb03 f202 	mul.w	r2, r3, r2
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	61da      	str	r2, [r3, #28]
 80080f0:	e001      	b.n	80080f6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80080f2:	2301      	movs	r3, #1
 80080f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	78db      	ldrb	r3, [r3, #3]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d00a      	beq.n	8008114 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80080fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008100:	68ba      	ldr	r2, [r7, #8]
 8008102:	8a92      	ldrh	r2, [r2, #20]
 8008104:	fb03 f202 	mul.w	r2, r3, r2
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	61da      	str	r2, [r3, #28]
 800810c:	e006      	b.n	800811c <USB_HC_StartXfer+0x1a4>
 800810e:	bf00      	nop
 8008110:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	6a1a      	ldr	r2, [r3, #32]
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800811c:	68bb      	ldr	r3, [r7, #8]
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008124:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008126:	04d9      	lsls	r1, r3, #19
 8008128:	4ba3      	ldr	r3, [pc, #652]	@ (80083b8 <USB_HC_StartXfer+0x440>)
 800812a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800812c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	7d9b      	ldrb	r3, [r3, #22]
 8008132:	075b      	lsls	r3, r3, #29
 8008134:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008138:	69f9      	ldr	r1, [r7, #28]
 800813a:	0148      	lsls	r0, r1, #5
 800813c:	6a39      	ldr	r1, [r7, #32]
 800813e:	4401      	add	r1, r0
 8008140:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008144:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008146:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008148:	79fb      	ldrb	r3, [r7, #7]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	6999      	ldr	r1, [r3, #24]
 8008152:	69fb      	ldr	r3, [r7, #28]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	6a3b      	ldr	r3, [r7, #32]
 8008158:	4413      	add	r3, r2
 800815a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800815e:	460a      	mov	r2, r1
 8008160:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008162:	6a3b      	ldr	r3, [r7, #32]
 8008164:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 0301 	and.w	r3, r3, #1
 800816e:	2b00      	cmp	r3, #0
 8008170:	bf0c      	ite	eq
 8008172:	2301      	moveq	r3, #1
 8008174:	2300      	movne	r3, #0
 8008176:	b2db      	uxtb	r3, r3
 8008178:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	6a3b      	ldr	r3, [r7, #32]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	69fa      	ldr	r2, [r7, #28]
 800818a:	0151      	lsls	r1, r2, #5
 800818c:	6a3a      	ldr	r2, [r7, #32]
 800818e:	440a      	add	r2, r1
 8008190:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008194:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008198:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800819a:	69fb      	ldr	r3, [r7, #28]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	6a3b      	ldr	r3, [r7, #32]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	7e7b      	ldrb	r3, [r7, #25]
 80081aa:	075b      	lsls	r3, r3, #29
 80081ac:	69f9      	ldr	r1, [r7, #28]
 80081ae:	0148      	lsls	r0, r1, #5
 80081b0:	6a39      	ldr	r1, [r7, #32]
 80081b2:	4401      	add	r1, r0
 80081b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80081b8:	4313      	orrs	r3, r2
 80081ba:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	799b      	ldrb	r3, [r3, #6]
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	f040 80c3 	bne.w	800834c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80081c6:	68bb      	ldr	r3, [r7, #8]
 80081c8:	7c5b      	ldrb	r3, [r3, #17]
 80081ca:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80081cc:	68ba      	ldr	r2, [r7, #8]
 80081ce:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80081d0:	4313      	orrs	r3, r2
 80081d2:	69fa      	ldr	r2, [r7, #28]
 80081d4:	0151      	lsls	r1, r2, #5
 80081d6:	6a3a      	ldr	r2, [r7, #32]
 80081d8:	440a      	add	r2, r1
 80081da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80081de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80081e2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80081e4:	69fb      	ldr	r3, [r7, #28]
 80081e6:	015a      	lsls	r2, r3, #5
 80081e8:	6a3b      	ldr	r3, [r7, #32]
 80081ea:	4413      	add	r3, r2
 80081ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081f0:	68db      	ldr	r3, [r3, #12]
 80081f2:	69fa      	ldr	r2, [r7, #28]
 80081f4:	0151      	lsls	r1, r2, #5
 80081f6:	6a3a      	ldr	r2, [r7, #32]
 80081f8:	440a      	add	r2, r1
 80081fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80081fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008202:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	79db      	ldrb	r3, [r3, #7]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d123      	bne.n	8008254 <USB_HC_StartXfer+0x2dc>
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	78db      	ldrb	r3, [r3, #3]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d11f      	bne.n	8008254 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	015a      	lsls	r2, r3, #5
 8008218:	6a3b      	ldr	r3, [r7, #32]
 800821a:	4413      	add	r3, r2
 800821c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	69fa      	ldr	r2, [r7, #28]
 8008224:	0151      	lsls	r1, r2, #5
 8008226:	6a3a      	ldr	r2, [r7, #32]
 8008228:	440a      	add	r2, r1
 800822a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800822e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008232:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008234:	69fb      	ldr	r3, [r7, #28]
 8008236:	015a      	lsls	r2, r3, #5
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	4413      	add	r3, r2
 800823c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	69fa      	ldr	r2, [r7, #28]
 8008244:	0151      	lsls	r1, r2, #5
 8008246:	6a3a      	ldr	r2, [r7, #32]
 8008248:	440a      	add	r2, r1
 800824a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800824e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008252:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	7c9b      	ldrb	r3, [r3, #18]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d003      	beq.n	8008264 <USB_HC_StartXfer+0x2ec>
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	7c9b      	ldrb	r3, [r3, #18]
 8008260:	2b03      	cmp	r3, #3
 8008262:	d117      	bne.n	8008294 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008268:	2b01      	cmp	r3, #1
 800826a:	d113      	bne.n	8008294 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	78db      	ldrb	r3, [r3, #3]
 8008270:	2b01      	cmp	r3, #1
 8008272:	d10f      	bne.n	8008294 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008274:	69fb      	ldr	r3, [r7, #28]
 8008276:	015a      	lsls	r2, r3, #5
 8008278:	6a3b      	ldr	r3, [r7, #32]
 800827a:	4413      	add	r3, r2
 800827c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008280:	685b      	ldr	r3, [r3, #4]
 8008282:	69fa      	ldr	r2, [r7, #28]
 8008284:	0151      	lsls	r1, r2, #5
 8008286:	6a3a      	ldr	r2, [r7, #32]
 8008288:	440a      	add	r2, r1
 800828a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800828e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008292:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	7c9b      	ldrb	r3, [r3, #18]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d162      	bne.n	8008362 <USB_HC_StartXfer+0x3ea>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	78db      	ldrb	r3, [r3, #3]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d15e      	bne.n	8008362 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	3b01      	subs	r3, #1
 80082aa:	2b03      	cmp	r3, #3
 80082ac:	d858      	bhi.n	8008360 <USB_HC_StartXfer+0x3e8>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <USB_HC_StartXfer+0x33c>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082c5 	.word	0x080082c5
 80082b8:	080082e7 	.word	0x080082e7
 80082bc:	08008309 	.word	0x08008309
 80082c0:	0800832b 	.word	0x0800832b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80082c4:	69fb      	ldr	r3, [r7, #28]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	6a3b      	ldr	r3, [r7, #32]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	69fa      	ldr	r2, [r7, #28]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	6a3a      	ldr	r2, [r7, #32]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80082e2:	6053      	str	r3, [r2, #4]
          break;
 80082e4:	e03d      	b.n	8008362 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	6a3b      	ldr	r3, [r7, #32]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	69fa      	ldr	r2, [r7, #28]
 80082f6:	0151      	lsls	r1, r2, #5
 80082f8:	6a3a      	ldr	r2, [r7, #32]
 80082fa:	440a      	add	r2, r1
 80082fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008300:	f043 030e 	orr.w	r3, r3, #14
 8008304:	6053      	str	r3, [r2, #4]
          break;
 8008306:	e02c      	b.n	8008362 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	015a      	lsls	r2, r3, #5
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	4413      	add	r3, r2
 8008310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	69fa      	ldr	r2, [r7, #28]
 8008318:	0151      	lsls	r1, r2, #5
 800831a:	6a3a      	ldr	r2, [r7, #32]
 800831c:	440a      	add	r2, r1
 800831e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008322:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008326:	6053      	str	r3, [r2, #4]
          break;
 8008328:	e01b      	b.n	8008362 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	015a      	lsls	r2, r3, #5
 800832e:	6a3b      	ldr	r3, [r7, #32]
 8008330:	4413      	add	r3, r2
 8008332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008336:	685b      	ldr	r3, [r3, #4]
 8008338:	69fa      	ldr	r2, [r7, #28]
 800833a:	0151      	lsls	r1, r2, #5
 800833c:	6a3a      	ldr	r2, [r7, #32]
 800833e:	440a      	add	r2, r1
 8008340:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008344:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008348:	6053      	str	r3, [r2, #4]
          break;
 800834a:	e00a      	b.n	8008362 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	015a      	lsls	r2, r3, #5
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	4413      	add	r3, r2
 8008354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008358:	461a      	mov	r2, r3
 800835a:	2300      	movs	r3, #0
 800835c:	6053      	str	r3, [r2, #4]
 800835e:	e000      	b.n	8008362 <USB_HC_StartXfer+0x3ea>
          break;
 8008360:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008362:	69fb      	ldr	r3, [r7, #28]
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	6a3b      	ldr	r3, [r7, #32]
 8008368:	4413      	add	r3, r2
 800836a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008372:	693b      	ldr	r3, [r7, #16]
 8008374:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008378:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	78db      	ldrb	r3, [r3, #3]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d004      	beq.n	800838c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008382:	693b      	ldr	r3, [r7, #16]
 8008384:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008388:	613b      	str	r3, [r7, #16]
 800838a:	e003      	b.n	8008394 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008392:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800839a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800839c:	69fb      	ldr	r3, [r7, #28]
 800839e:	015a      	lsls	r2, r3, #5
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	4413      	add	r3, r2
 80083a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80083a8:	461a      	mov	r2, r3
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80083ae:	79fb      	ldrb	r3, [r7, #7]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d003      	beq.n	80083bc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80083b4:	2300      	movs	r3, #0
 80083b6:	e055      	b.n	8008464 <USB_HC_StartXfer+0x4ec>
 80083b8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	78db      	ldrb	r3, [r3, #3]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d14e      	bne.n	8008462 <USB_HC_StartXfer+0x4ea>
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	6a1b      	ldr	r3, [r3, #32]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d04a      	beq.n	8008462 <USB_HC_StartXfer+0x4ea>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	79db      	ldrb	r3, [r3, #7]
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d146      	bne.n	8008462 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80083d4:	68bb      	ldr	r3, [r7, #8]
 80083d6:	7c9b      	ldrb	r3, [r3, #18]
 80083d8:	2b03      	cmp	r3, #3
 80083da:	d831      	bhi.n	8008440 <USB_HC_StartXfer+0x4c8>
 80083dc:	a201      	add	r2, pc, #4	@ (adr r2, 80083e4 <USB_HC_StartXfer+0x46c>)
 80083de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e2:	bf00      	nop
 80083e4:	080083f5 	.word	0x080083f5
 80083e8:	08008419 	.word	0x08008419
 80083ec:	080083f5 	.word	0x080083f5
 80083f0:	08008419 	.word	0x08008419
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80083f4:	68bb      	ldr	r3, [r7, #8]
 80083f6:	6a1b      	ldr	r3, [r3, #32]
 80083f8:	3303      	adds	r3, #3
 80083fa:	089b      	lsrs	r3, r3, #2
 80083fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80083fe:	8afa      	ldrh	r2, [r7, #22]
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008404:	b29b      	uxth	r3, r3
 8008406:	429a      	cmp	r2, r3
 8008408:	d91c      	bls.n	8008444 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	699b      	ldr	r3, [r3, #24]
 800840e:	f043 0220 	orr.w	r2, r3, #32
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	619a      	str	r2, [r3, #24]
        }
        break;
 8008416:	e015      	b.n	8008444 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	3303      	adds	r3, #3
 800841e:	089b      	lsrs	r3, r3, #2
 8008420:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008422:	8afa      	ldrh	r2, [r7, #22]
 8008424:	6a3b      	ldr	r3, [r7, #32]
 8008426:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	b29b      	uxth	r3, r3
 800842e:	429a      	cmp	r2, r3
 8008430:	d90a      	bls.n	8008448 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	699b      	ldr	r3, [r3, #24]
 8008436:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	619a      	str	r2, [r3, #24]
        }
        break;
 800843e:	e003      	b.n	8008448 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008440:	bf00      	nop
 8008442:	e002      	b.n	800844a <USB_HC_StartXfer+0x4d2>
        break;
 8008444:	bf00      	nop
 8008446:	e000      	b.n	800844a <USB_HC_StartXfer+0x4d2>
        break;
 8008448:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	6999      	ldr	r1, [r3, #24]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	785a      	ldrb	r2, [r3, #1]
 8008452:	68bb      	ldr	r3, [r7, #8]
 8008454:	6a1b      	ldr	r3, [r3, #32]
 8008456:	b29b      	uxth	r3, r3
 8008458:	2000      	movs	r0, #0
 800845a:	9000      	str	r0, [sp, #0]
 800845c:	68f8      	ldr	r0, [r7, #12]
 800845e:	f7ff f9c9 	bl	80077f4 <USB_WritePacket>
  }

  return HAL_OK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	4618      	mov	r0, r3
 8008466:	3728      	adds	r7, #40	@ 0x28
 8008468:	46bd      	mov	sp, r7
 800846a:	bd80      	pop	{r7, pc}

0800846c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800846c:	b480      	push	{r7}
 800846e:	b085      	sub	sp, #20
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800847e:	695b      	ldr	r3, [r3, #20]
 8008480:	b29b      	uxth	r3, r3
}
 8008482:	4618      	mov	r0, r3
 8008484:	3714      	adds	r7, #20
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr

0800848e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800848e:	b480      	push	{r7}
 8008490:	b089      	sub	sp, #36	@ 0x24
 8008492:	af00      	add	r7, sp, #0
 8008494:	6078      	str	r0, [r7, #4]
 8008496:	460b      	mov	r3, r1
 8008498:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800849e:	78fb      	ldrb	r3, [r7, #3]
 80084a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80084a2:	2300      	movs	r3, #0
 80084a4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	69fb      	ldr	r3, [r7, #28]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	0c9b      	lsrs	r3, r3, #18
 80084b6:	f003 0303 	and.w	r3, r3, #3
 80084ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	015a      	lsls	r2, r3, #5
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	4413      	add	r3, r2
 80084c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	0fdb      	lsrs	r3, r3, #31
 80084cc:	f003 0301 	and.w	r3, r3, #1
 80084d0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80084d2:	69bb      	ldr	r3, [r7, #24]
 80084d4:	015a      	lsls	r2, r3, #5
 80084d6:	69fb      	ldr	r3, [r7, #28]
 80084d8:	4413      	add	r3, r2
 80084da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	0fdb      	lsrs	r3, r3, #31
 80084e2:	f003 0301 	and.w	r3, r3, #1
 80084e6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	689b      	ldr	r3, [r3, #8]
 80084ec:	f003 0320 	and.w	r3, r3, #32
 80084f0:	2b20      	cmp	r3, #32
 80084f2:	d10d      	bne.n	8008510 <USB_HC_Halt+0x82>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d10a      	bne.n	8008510 <USB_HC_Halt+0x82>
 80084fa:	693b      	ldr	r3, [r7, #16]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d005      	beq.n	800850c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d002      	beq.n	800850c <USB_HC_Halt+0x7e>
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2b03      	cmp	r3, #3
 800850a:	d101      	bne.n	8008510 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800850c:	2300      	movs	r3, #0
 800850e:	e0d8      	b.n	80086c2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d002      	beq.n	800851c <USB_HC_Halt+0x8e>
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b02      	cmp	r3, #2
 800851a:	d173      	bne.n	8008604 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800851c:	69bb      	ldr	r3, [r7, #24]
 800851e:	015a      	lsls	r2, r3, #5
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	4413      	add	r3, r2
 8008524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	69ba      	ldr	r2, [r7, #24]
 800852c:	0151      	lsls	r1, r2, #5
 800852e:	69fa      	ldr	r2, [r7, #28]
 8008530:	440a      	add	r2, r1
 8008532:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008536:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800853a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d14a      	bne.n	80085de <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800854c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d133      	bne.n	80085bc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008554:	69bb      	ldr	r3, [r7, #24]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	69fb      	ldr	r3, [r7, #28]
 800855a:	4413      	add	r3, r2
 800855c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	69ba      	ldr	r2, [r7, #24]
 8008564:	0151      	lsls	r1, r2, #5
 8008566:	69fa      	ldr	r2, [r7, #28]
 8008568:	440a      	add	r2, r1
 800856a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800856e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008572:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008574:	69bb      	ldr	r3, [r7, #24]
 8008576:	015a      	lsls	r2, r3, #5
 8008578:	69fb      	ldr	r3, [r7, #28]
 800857a:	4413      	add	r3, r2
 800857c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	69ba      	ldr	r2, [r7, #24]
 8008584:	0151      	lsls	r1, r2, #5
 8008586:	69fa      	ldr	r2, [r7, #28]
 8008588:	440a      	add	r2, r1
 800858a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800858e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008592:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	3301      	adds	r3, #1
 8008598:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80085a0:	d82e      	bhi.n	8008600 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80085a2:	69bb      	ldr	r3, [r7, #24]
 80085a4:	015a      	lsls	r2, r3, #5
 80085a6:	69fb      	ldr	r3, [r7, #28]
 80085a8:	4413      	add	r3, r2
 80085aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80085b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80085b8:	d0ec      	beq.n	8008594 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085ba:	e081      	b.n	80086c0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	015a      	lsls	r2, r3, #5
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	4413      	add	r3, r2
 80085c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69ba      	ldr	r2, [r7, #24]
 80085cc:	0151      	lsls	r1, r2, #5
 80085ce:	69fa      	ldr	r2, [r7, #28]
 80085d0:	440a      	add	r2, r1
 80085d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085da:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085dc:	e070      	b.n	80086c0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80085de:	69bb      	ldr	r3, [r7, #24]
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	69ba      	ldr	r2, [r7, #24]
 80085ee:	0151      	lsls	r1, r2, #5
 80085f0:	69fa      	ldr	r2, [r7, #28]
 80085f2:	440a      	add	r2, r1
 80085f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80085fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80085fe:	e05f      	b.n	80086c0 <USB_HC_Halt+0x232>
            break;
 8008600:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008602:	e05d      	b.n	80086c0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008604:	69bb      	ldr	r3, [r7, #24]
 8008606:	015a      	lsls	r2, r3, #5
 8008608:	69fb      	ldr	r3, [r7, #28]
 800860a:	4413      	add	r3, r2
 800860c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	0151      	lsls	r1, r2, #5
 8008616:	69fa      	ldr	r2, [r7, #28]
 8008618:	440a      	add	r2, r1
 800861a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800861e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008622:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008624:	69fb      	ldr	r3, [r7, #28]
 8008626:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800862a:	691b      	ldr	r3, [r3, #16]
 800862c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008630:	2b00      	cmp	r3, #0
 8008632:	d133      	bne.n	800869c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	015a      	lsls	r2, r3, #5
 8008638:	69fb      	ldr	r3, [r7, #28]
 800863a:	4413      	add	r3, r2
 800863c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	69ba      	ldr	r2, [r7, #24]
 8008644:	0151      	lsls	r1, r2, #5
 8008646:	69fa      	ldr	r2, [r7, #28]
 8008648:	440a      	add	r2, r1
 800864a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800864e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008652:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008654:	69bb      	ldr	r3, [r7, #24]
 8008656:	015a      	lsls	r2, r3, #5
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	4413      	add	r3, r2
 800865c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	69ba      	ldr	r2, [r7, #24]
 8008664:	0151      	lsls	r1, r2, #5
 8008666:	69fa      	ldr	r2, [r7, #28]
 8008668:	440a      	add	r2, r1
 800866a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800866e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008672:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008674:	68bb      	ldr	r3, [r7, #8]
 8008676:	3301      	adds	r3, #1
 8008678:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008680:	d81d      	bhi.n	80086be <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008682:	69bb      	ldr	r3, [r7, #24]
 8008684:	015a      	lsls	r2, r3, #5
 8008686:	69fb      	ldr	r3, [r7, #28]
 8008688:	4413      	add	r3, r2
 800868a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008694:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008698:	d0ec      	beq.n	8008674 <USB_HC_Halt+0x1e6>
 800869a:	e011      	b.n	80086c0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800869c:	69bb      	ldr	r3, [r7, #24]
 800869e:	015a      	lsls	r2, r3, #5
 80086a0:	69fb      	ldr	r3, [r7, #28]
 80086a2:	4413      	add	r3, r2
 80086a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	69ba      	ldr	r2, [r7, #24]
 80086ac:	0151      	lsls	r1, r2, #5
 80086ae:	69fa      	ldr	r2, [r7, #28]
 80086b0:	440a      	add	r2, r1
 80086b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086ba:	6013      	str	r3, [r2, #0]
 80086bc:	e000      	b.n	80086c0 <USB_HC_Halt+0x232>
          break;
 80086be:	bf00      	nop
    }
  }

  return HAL_OK;
 80086c0:	2300      	movs	r3, #0
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3724      	adds	r7, #36	@ 0x24
 80086c6:	46bd      	mov	sp, r7
 80086c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086cc:	4770      	bx	lr
	...

080086d0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b087      	sub	sp, #28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	460b      	mov	r3, r1
 80086da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80086e0:	78fb      	ldrb	r3, [r7, #3]
 80086e2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80086e4:	2301      	movs	r3, #1
 80086e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	04da      	lsls	r2, r3, #19
 80086ec:	4b15      	ldr	r3, [pc, #84]	@ (8008744 <USB_DoPing+0x74>)
 80086ee:	4013      	ands	r3, r2
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008700:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008702:	693b      	ldr	r3, [r7, #16]
 8008704:	015a      	lsls	r2, r3, #5
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	4413      	add	r3, r2
 800870a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008718:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008720:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	015a      	lsls	r2, r3, #5
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	4413      	add	r3, r2
 800872a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800872e:	461a      	mov	r2, r3
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008734:	2300      	movs	r3, #0
}
 8008736:	4618      	mov	r0, r3
 8008738:	371c      	adds	r7, #28
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr
 8008742:	bf00      	nop
 8008744:	1ff80000 	.word	0x1ff80000

08008748 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b088      	sub	sp, #32
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008750:	2300      	movs	r3, #0
 8008752:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fe ff8c 	bl	800767a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008762:	2110      	movs	r1, #16
 8008764:	6878      	ldr	r0, [r7, #4]
 8008766:	f7fe ffe5 	bl	8007734 <USB_FlushTxFifo>
 800876a:	4603      	mov	r3, r0
 800876c:	2b00      	cmp	r3, #0
 800876e:	d001      	beq.n	8008774 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008770:	2301      	movs	r3, #1
 8008772:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	f7ff f80f 	bl	8007798 <USB_FlushRxFifo>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	d001      	beq.n	8008784 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008780:	2301      	movs	r3, #1
 8008782:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008784:	2300      	movs	r3, #0
 8008786:	61bb      	str	r3, [r7, #24]
 8008788:	e01f      	b.n	80087ca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800879a:	693b      	ldr	r3, [r7, #16]
 800879c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087a0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80087a2:	693b      	ldr	r3, [r7, #16]
 80087a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80087a8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087b0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	015a      	lsls	r2, r3, #5
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	4413      	add	r3, r2
 80087ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087be:	461a      	mov	r2, r3
 80087c0:	693b      	ldr	r3, [r7, #16]
 80087c2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	3301      	adds	r3, #1
 80087c8:	61bb      	str	r3, [r7, #24]
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	2b0f      	cmp	r3, #15
 80087ce:	d9dc      	bls.n	800878a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80087d0:	2300      	movs	r3, #0
 80087d2:	61bb      	str	r3, [r7, #24]
 80087d4:	e034      	b.n	8008840 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	015a      	lsls	r2, r3, #5
 80087da:	697b      	ldr	r3, [r7, #20]
 80087dc:	4413      	add	r3, r2
 80087de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80087ec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80087f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80087fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80087fe:	69bb      	ldr	r3, [r7, #24]
 8008800:	015a      	lsls	r2, r3, #5
 8008802:	697b      	ldr	r3, [r7, #20]
 8008804:	4413      	add	r3, r2
 8008806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800880a:	461a      	mov	r2, r3
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	3301      	adds	r3, #1
 8008814:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800881c:	d80c      	bhi.n	8008838 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800881e:	69bb      	ldr	r3, [r7, #24]
 8008820:	015a      	lsls	r2, r3, #5
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	4413      	add	r3, r2
 8008826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008830:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008834:	d0ec      	beq.n	8008810 <USB_StopHost+0xc8>
 8008836:	e000      	b.n	800883a <USB_StopHost+0xf2>
        break;
 8008838:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800883a:	69bb      	ldr	r3, [r7, #24]
 800883c:	3301      	adds	r3, #1
 800883e:	61bb      	str	r3, [r7, #24]
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	2b0f      	cmp	r3, #15
 8008844:	d9c7      	bls.n	80087d6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800884c:	461a      	mov	r2, r3
 800884e:	f04f 33ff 	mov.w	r3, #4294967295
 8008852:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	f04f 32ff 	mov.w	r2, #4294967295
 800885a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800885c:	6878      	ldr	r0, [r7, #4]
 800885e:	f7fe fefb 	bl	8007658 <USB_EnableGlobalInt>

  return ret;
 8008862:	7ffb      	ldrb	r3, [r7, #31]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3720      	adds	r7, #32
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800886c:	b590      	push	{r4, r7, lr}
 800886e:	b089      	sub	sp, #36	@ 0x24
 8008870:	af04      	add	r7, sp, #16
 8008872:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008874:	2301      	movs	r3, #1
 8008876:	2202      	movs	r2, #2
 8008878:	2102      	movs	r1, #2
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fc85 	bl	800918a <USBH_FindInterface>
 8008880:	4603      	mov	r3, r0
 8008882:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008884:	7bfb      	ldrb	r3, [r7, #15]
 8008886:	2bff      	cmp	r3, #255	@ 0xff
 8008888:	d002      	beq.n	8008890 <USBH_CDC_InterfaceInit+0x24>
 800888a:	7bfb      	ldrb	r3, [r7, #15]
 800888c:	2b01      	cmp	r3, #1
 800888e:	d901      	bls.n	8008894 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008890:	2302      	movs	r3, #2
 8008892:	e13d      	b.n	8008b10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008894:	7bfb      	ldrb	r3, [r7, #15]
 8008896:	4619      	mov	r1, r3
 8008898:	6878      	ldr	r0, [r7, #4]
 800889a:	f000 fc5a 	bl	8009152 <USBH_SelectInterface>
 800889e:	4603      	mov	r3, r0
 80088a0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80088a2:	7bbb      	ldrb	r3, [r7, #14]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d001      	beq.n	80088ac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80088a8:	2302      	movs	r3, #2
 80088aa:	e131      	b.n	8008b10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80088b2:	2050      	movs	r0, #80	@ 0x50
 80088b4:	f002 fb82 	bl	800afbc <malloc>
 80088b8:	4603      	mov	r3, r0
 80088ba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80088c2:	69db      	ldr	r3, [r3, #28]
 80088c4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80088c6:	68bb      	ldr	r3, [r7, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80088cc:	2302      	movs	r3, #2
 80088ce:	e11f      	b.n	8008b10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80088d0:	2250      	movs	r2, #80	@ 0x50
 80088d2:	2100      	movs	r1, #0
 80088d4:	68b8      	ldr	r0, [r7, #8]
 80088d6:	f002 ff07 	bl	800b6e8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80088da:	7bfb      	ldrb	r3, [r7, #15]
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	211a      	movs	r1, #26
 80088e0:	fb01 f303 	mul.w	r3, r1, r3
 80088e4:	4413      	add	r3, r2
 80088e6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	b25b      	sxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	da15      	bge.n	800891e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	211a      	movs	r1, #26
 80088f8:	fb01 f303 	mul.w	r3, r1, r3
 80088fc:	4413      	add	r3, r2
 80088fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008902:	781a      	ldrb	r2, [r3, #0]
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008908:	7bfb      	ldrb	r3, [r7, #15]
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	211a      	movs	r1, #26
 800890e:	fb01 f303 	mul.w	r3, r1, r3
 8008912:	4413      	add	r3, r2
 8008914:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008918:	881a      	ldrh	r2, [r3, #0]
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800891e:	68bb      	ldr	r3, [r7, #8]
 8008920:	785b      	ldrb	r3, [r3, #1]
 8008922:	4619      	mov	r1, r3
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 ffbe 	bl	800a8a6 <USBH_AllocPipe>
 800892a:	4603      	mov	r3, r0
 800892c:	461a      	mov	r2, r3
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	7819      	ldrb	r1, [r3, #0]
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	7858      	ldrb	r0, [r3, #1]
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008946:	68ba      	ldr	r2, [r7, #8]
 8008948:	8952      	ldrh	r2, [r2, #10]
 800894a:	9202      	str	r2, [sp, #8]
 800894c:	2203      	movs	r2, #3
 800894e:	9201      	str	r2, [sp, #4]
 8008950:	9300      	str	r3, [sp, #0]
 8008952:	4623      	mov	r3, r4
 8008954:	4602      	mov	r2, r0
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f001 ff76 	bl	800a848 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	781b      	ldrb	r3, [r3, #0]
 8008960:	2200      	movs	r2, #0
 8008962:	4619      	mov	r1, r3
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f002 fa85 	bl	800ae74 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800896a:	2300      	movs	r3, #0
 800896c:	2200      	movs	r2, #0
 800896e:	210a      	movs	r1, #10
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 fc0a 	bl	800918a <USBH_FindInterface>
 8008976:	4603      	mov	r3, r0
 8008978:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800897a:	7bfb      	ldrb	r3, [r7, #15]
 800897c:	2bff      	cmp	r3, #255	@ 0xff
 800897e:	d002      	beq.n	8008986 <USBH_CDC_InterfaceInit+0x11a>
 8008980:	7bfb      	ldrb	r3, [r7, #15]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d901      	bls.n	800898a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008986:	2302      	movs	r3, #2
 8008988:	e0c2      	b.n	8008b10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800898a:	7bfb      	ldrb	r3, [r7, #15]
 800898c:	687a      	ldr	r2, [r7, #4]
 800898e:	211a      	movs	r1, #26
 8008990:	fb01 f303 	mul.w	r3, r1, r3
 8008994:	4413      	add	r3, r2
 8008996:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	b25b      	sxtb	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	da16      	bge.n	80089d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089a2:	7bfb      	ldrb	r3, [r7, #15]
 80089a4:	687a      	ldr	r2, [r7, #4]
 80089a6:	211a      	movs	r1, #26
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	4413      	add	r3, r2
 80089ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80089b2:	781a      	ldrb	r2, [r3, #0]
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089b8:	7bfb      	ldrb	r3, [r7, #15]
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	211a      	movs	r1, #26
 80089be:	fb01 f303 	mul.w	r3, r1, r3
 80089c2:	4413      	add	r3, r2
 80089c4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089c8:	881a      	ldrh	r2, [r3, #0]
 80089ca:	68bb      	ldr	r3, [r7, #8]
 80089cc:	835a      	strh	r2, [r3, #26]
 80089ce:	e015      	b.n	80089fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80089d0:	7bfb      	ldrb	r3, [r7, #15]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	211a      	movs	r1, #26
 80089d6:	fb01 f303 	mul.w	r3, r1, r3
 80089da:	4413      	add	r3, r2
 80089dc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80089e0:	781a      	ldrb	r2, [r3, #0]
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80089e6:	7bfb      	ldrb	r3, [r7, #15]
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	211a      	movs	r1, #26
 80089ec:	fb01 f303 	mul.w	r3, r1, r3
 80089f0:	4413      	add	r3, r2
 80089f2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80089f6:	881a      	ldrh	r2, [r3, #0]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
 80089fe:	687a      	ldr	r2, [r7, #4]
 8008a00:	211a      	movs	r1, #26
 8008a02:	fb01 f303 	mul.w	r3, r1, r3
 8008a06:	4413      	add	r3, r2
 8008a08:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a0c:	781b      	ldrb	r3, [r3, #0]
 8008a0e:	b25b      	sxtb	r3, r3
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	da16      	bge.n	8008a42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a14:	7bfb      	ldrb	r3, [r7, #15]
 8008a16:	687a      	ldr	r2, [r7, #4]
 8008a18:	211a      	movs	r1, #26
 8008a1a:	fb01 f303 	mul.w	r3, r1, r3
 8008a1e:	4413      	add	r3, r2
 8008a20:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a24:	781a      	ldrb	r2, [r3, #0]
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a2a:	7bfb      	ldrb	r3, [r7, #15]
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	211a      	movs	r1, #26
 8008a30:	fb01 f303 	mul.w	r3, r1, r3
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008a3a:	881a      	ldrh	r2, [r3, #0]
 8008a3c:	68bb      	ldr	r3, [r7, #8]
 8008a3e:	835a      	strh	r2, [r3, #26]
 8008a40:	e015      	b.n	8008a6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008a42:	7bfb      	ldrb	r3, [r7, #15]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	211a      	movs	r1, #26
 8008a48:	fb01 f303 	mul.w	r3, r1, r3
 8008a4c:	4413      	add	r3, r2
 8008a4e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008a52:	781a      	ldrb	r2, [r3, #0]
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	211a      	movs	r1, #26
 8008a5e:	fb01 f303 	mul.w	r3, r1, r3
 8008a62:	4413      	add	r3, r2
 8008a64:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008a68:	881a      	ldrh	r2, [r3, #0]
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	7b9b      	ldrb	r3, [r3, #14]
 8008a72:	4619      	mov	r1, r3
 8008a74:	6878      	ldr	r0, [r7, #4]
 8008a76:	f001 ff16 	bl	800a8a6 <USBH_AllocPipe>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	7bdb      	ldrb	r3, [r3, #15]
 8008a86:	4619      	mov	r1, r3
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f001 ff0c 	bl	800a8a6 <USBH_AllocPipe>
 8008a8e:	4603      	mov	r3, r0
 8008a90:	461a      	mov	r2, r3
 8008a92:	68bb      	ldr	r3, [r7, #8]
 8008a94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	7b59      	ldrb	r1, [r3, #13]
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	7b98      	ldrb	r0, [r3, #14]
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	8b12      	ldrh	r2, [r2, #24]
 8008aae:	9202      	str	r2, [sp, #8]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	9201      	str	r2, [sp, #4]
 8008ab4:	9300      	str	r3, [sp, #0]
 8008ab6:	4623      	mov	r3, r4
 8008ab8:	4602      	mov	r2, r0
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f001 fec4 	bl	800a848 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	7b19      	ldrb	r1, [r3, #12]
 8008ac4:	68bb      	ldr	r3, [r7, #8]
 8008ac6:	7bd8      	ldrb	r0, [r3, #15]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008ad4:	68ba      	ldr	r2, [r7, #8]
 8008ad6:	8b52      	ldrh	r2, [r2, #26]
 8008ad8:	9202      	str	r2, [sp, #8]
 8008ada:	2202      	movs	r2, #2
 8008adc:	9201      	str	r2, [sp, #4]
 8008ade:	9300      	str	r3, [sp, #0]
 8008ae0:	4623      	mov	r3, r4
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 feaf 	bl	800a848 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	7b5b      	ldrb	r3, [r3, #13]
 8008af6:	2200      	movs	r2, #0
 8008af8:	4619      	mov	r1, r3
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f002 f9ba 	bl	800ae74 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	7b1b      	ldrb	r3, [r3, #12]
 8008b04:	2200      	movs	r2, #0
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f002 f9b3 	bl	800ae74 <USBH_LL_SetToggle>

  return USBH_OK;
 8008b0e:	2300      	movs	r3, #0
}
 8008b10:	4618      	mov	r0, r3
 8008b12:	3714      	adds	r7, #20
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd90      	pop	{r4, r7, pc}

08008b18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	b084      	sub	sp, #16
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b26:	69db      	ldr	r3, [r3, #28]
 8008b28:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	781b      	ldrb	r3, [r3, #0]
 8008b36:	4619      	mov	r1, r3
 8008b38:	6878      	ldr	r0, [r7, #4]
 8008b3a:	f001 fea4 	bl	800a886 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	4619      	mov	r1, r3
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f001 fecf 	bl	800a8e8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	7b1b      	ldrb	r3, [r3, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00e      	beq.n	8008b76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	7b1b      	ldrb	r3, [r3, #12]
 8008b5c:	4619      	mov	r1, r3
 8008b5e:	6878      	ldr	r0, [r7, #4]
 8008b60:	f001 fe91 	bl	800a886 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	7b1b      	ldrb	r3, [r3, #12]
 8008b68:	4619      	mov	r1, r3
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f001 febc 	bl	800a8e8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2200      	movs	r2, #0
 8008b74:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	7b5b      	ldrb	r3, [r3, #13]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d00e      	beq.n	8008b9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	7b5b      	ldrb	r3, [r3, #13]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f001 fe7e 	bl	800a886 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	7b5b      	ldrb	r3, [r3, #13]
 8008b8e:	4619      	mov	r1, r3
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f001 fea9 	bl	800a8e8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d00b      	beq.n	8008bc0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f002 fa0b 	bl	800afcc <free>
    phost->pActiveClass->pData = 0U;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	3340      	adds	r3, #64	@ 0x40
 8008be0:	4619      	mov	r1, r3
 8008be2:	6878      	ldr	r0, [r7, #4]
 8008be4:	f000 f8b1 	bl	8008d4a <GetLineCoding>
 8008be8:	4603      	mov	r3, r0
 8008bea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008bec:	7afb      	ldrb	r3, [r7, #11]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d105      	bne.n	8008bfe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008bf8:	2102      	movs	r1, #2
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008bfe:	7afb      	ldrb	r3, [r7, #11]
}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3710      	adds	r7, #16
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008c10:	2301      	movs	r3, #1
 8008c12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008c14:	2300      	movs	r3, #0
 8008c16:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008c1e:	69db      	ldr	r3, [r3, #28]
 8008c20:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008c28:	2b04      	cmp	r3, #4
 8008c2a:	d877      	bhi.n	8008d1c <USBH_CDC_Process+0x114>
 8008c2c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c34 <USBH_CDC_Process+0x2c>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c49 	.word	0x08008c49
 8008c38:	08008c4f 	.word	0x08008c4f
 8008c3c:	08008c7f 	.word	0x08008c7f
 8008c40:	08008cf3 	.word	0x08008cf3
 8008c44:	08008d01 	.word	0x08008d01
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c4c:	e06d      	b.n	8008d2a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008c52:	4619      	mov	r1, r3
 8008c54:	6878      	ldr	r0, [r7, #4]
 8008c56:	f000 f897 	bl	8008d88 <SetLineCoding>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c5e:	7bbb      	ldrb	r3, [r7, #14]
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d104      	bne.n	8008c6e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	2202      	movs	r2, #2
 8008c68:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008c6c:	e058      	b.n	8008d20 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008c6e:	7bbb      	ldrb	r3, [r7, #14]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d055      	beq.n	8008d20 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	2204      	movs	r2, #4
 8008c78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008c7c:	e050      	b.n	8008d20 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	3340      	adds	r3, #64	@ 0x40
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f860 	bl	8008d4a <GetLineCoding>
 8008c8a:	4603      	mov	r3, r0
 8008c8c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008c8e:	7bbb      	ldrb	r3, [r7, #14]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d126      	bne.n	8008ce2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008c9c:	68bb      	ldr	r3, [r7, #8]
 8008c9e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008ca2:	68bb      	ldr	r3, [r7, #8]
 8008ca4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ca6:	791b      	ldrb	r3, [r3, #4]
 8008ca8:	429a      	cmp	r2, r3
 8008caa:	d13b      	bne.n	8008d24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cb6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008cb8:	429a      	cmp	r2, r3
 8008cba:	d133      	bne.n	8008d24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cc6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008cc8:	429a      	cmp	r2, r3
 8008cca:	d12b      	bne.n	8008d24 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008cd0:	68bb      	ldr	r3, [r7, #8]
 8008cd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008cd4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d124      	bne.n	8008d24 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008cda:	6878      	ldr	r0, [r7, #4]
 8008cdc:	f000 f958 	bl	8008f90 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008ce0:	e020      	b.n	8008d24 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d01d      	beq.n	8008d24 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	2204      	movs	r2, #4
 8008cec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008cf0:	e018      	b.n	8008d24 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f867 	bl	8008dc6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 f8da 	bl	8008eb2 <CDC_ProcessReception>
      break;
 8008cfe:	e014      	b.n	8008d2a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008d00:	2100      	movs	r1, #0
 8008d02:	6878      	ldr	r0, [r7, #4]
 8008d04:	f001 f81a 	bl	8009d3c <USBH_ClrFeature>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d10a      	bne.n	8008d28 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	2200      	movs	r2, #0
 8008d16:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008d1a:	e005      	b.n	8008d28 <USBH_CDC_Process+0x120>

    default:
      break;
 8008d1c:	bf00      	nop
 8008d1e:	e004      	b.n	8008d2a <USBH_CDC_Process+0x122>
      break;
 8008d20:	bf00      	nop
 8008d22:	e002      	b.n	8008d2a <USBH_CDC_Process+0x122>
      break;
 8008d24:	bf00      	nop
 8008d26:	e000      	b.n	8008d2a <USBH_CDC_Process+0x122>
      break;
 8008d28:	bf00      	nop

  }

  return status;
 8008d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d2c:	4618      	mov	r0, r3
 8008d2e:	3710      	adds	r7, #16
 8008d30:	46bd      	mov	sp, r7
 8008d32:	bd80      	pop	{r7, pc}

08008d34 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b083      	sub	sp, #12
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	370c      	adds	r7, #12
 8008d42:	46bd      	mov	sp, r7
 8008d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d48:	4770      	bx	lr

08008d4a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
 8008d50:	6078      	str	r0, [r7, #4]
 8008d52:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	22a1      	movs	r2, #161	@ 0xa1
 8008d58:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2221      	movs	r2, #33	@ 0x21
 8008d5e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2207      	movs	r2, #7
 8008d70:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	2207      	movs	r2, #7
 8008d76:	4619      	mov	r1, r3
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f001 fb14 	bl	800a3a6 <USBH_CtlReq>
 8008d7e:	4603      	mov	r3, r0
}
 8008d80:	4618      	mov	r0, r3
 8008d82:	3708      	adds	r7, #8
 8008d84:	46bd      	mov	sp, r7
 8008d86:	bd80      	pop	{r7, pc}

08008d88 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b082      	sub	sp, #8
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2221      	movs	r2, #33	@ 0x21
 8008d96:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2220      	movs	r2, #32
 8008d9c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2207      	movs	r2, #7
 8008dae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008db0:	683b      	ldr	r3, [r7, #0]
 8008db2:	2207      	movs	r2, #7
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f001 faf5 	bl	800a3a6 <USBH_CtlReq>
 8008dbc:	4603      	mov	r3, r0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}

08008dc6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008dc6:	b580      	push	{r7, lr}
 8008dc8:	b086      	sub	sp, #24
 8008dca:	af02      	add	r7, sp, #8
 8008dcc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008dd4:	69db      	ldr	r3, [r3, #28]
 8008dd6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d002      	beq.n	8008dec <CDC_ProcessTransmission+0x26>
 8008de6:	2b02      	cmp	r3, #2
 8008de8:	d023      	beq.n	8008e32 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008dea:	e05e      	b.n	8008eaa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008df0:	68fa      	ldr	r2, [r7, #12]
 8008df2:	8b12      	ldrh	r2, [r2, #24]
 8008df4:	4293      	cmp	r3, r2
 8008df6:	d90b      	bls.n	8008e10 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	69d9      	ldr	r1, [r3, #28]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	8b1a      	ldrh	r2, [r3, #24]
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	7b5b      	ldrb	r3, [r3, #13]
 8008e04:	2001      	movs	r0, #1
 8008e06:	9000      	str	r0, [sp, #0]
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 fcda 	bl	800a7c2 <USBH_BulkSendData>
 8008e0e:	e00b      	b.n	8008e28 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008e18:	b29a      	uxth	r2, r3
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	7b5b      	ldrb	r3, [r3, #13]
 8008e1e:	2001      	movs	r0, #1
 8008e20:	9000      	str	r0, [sp, #0]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f001 fccd 	bl	800a7c2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	2202      	movs	r2, #2
 8008e2c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008e30:	e03b      	b.n	8008eaa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	7b5b      	ldrb	r3, [r3, #13]
 8008e36:	4619      	mov	r1, r3
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f001 fff1 	bl	800ae20 <USBH_LL_GetURBState>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008e42:	7afb      	ldrb	r3, [r7, #11]
 8008e44:	2b01      	cmp	r3, #1
 8008e46:	d128      	bne.n	8008e9a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e4c:	68fa      	ldr	r2, [r7, #12]
 8008e4e:	8b12      	ldrh	r2, [r2, #24]
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d90e      	bls.n	8008e72 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e58:	68fa      	ldr	r2, [r7, #12]
 8008e5a:	8b12      	ldrh	r2, [r2, #24]
 8008e5c:	1a9a      	subs	r2, r3, r2
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	69db      	ldr	r3, [r3, #28]
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	8b12      	ldrh	r2, [r2, #24]
 8008e6a:	441a      	add	r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	61da      	str	r2, [r3, #28]
 8008e70:	e002      	b.n	8008e78 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2200      	movs	r2, #0
 8008e76:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d004      	beq.n	8008e8a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	2201      	movs	r2, #1
 8008e84:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008e88:	e00e      	b.n	8008ea8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f868 	bl	8008f68 <USBH_CDC_TransmitCallback>
      break;
 8008e98:	e006      	b.n	8008ea8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008e9a:	7afb      	ldrb	r3, [r7, #11]
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d103      	bne.n	8008ea8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ea8:	bf00      	nop
  }
}
 8008eaa:	bf00      	nop
 8008eac:	3710      	adds	r7, #16
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd80      	pop	{r7, pc}

08008eb2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008eb2:	b580      	push	{r7, lr}
 8008eb4:	b086      	sub	sp, #24
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ec0:	69db      	ldr	r3, [r3, #28]
 8008ec2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d002      	beq.n	8008ed8 <CDC_ProcessReception+0x26>
 8008ed2:	2b04      	cmp	r3, #4
 8008ed4:	d00e      	beq.n	8008ef4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008ed6:	e043      	b.n	8008f60 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008ed8:	697b      	ldr	r3, [r7, #20]
 8008eda:	6a19      	ldr	r1, [r3, #32]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	8b5a      	ldrh	r2, [r3, #26]
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	7b1b      	ldrb	r3, [r3, #12]
 8008ee4:	6878      	ldr	r0, [r7, #4]
 8008ee6:	f001 fc91 	bl	800a80c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008eea:	697b      	ldr	r3, [r7, #20]
 8008eec:	2204      	movs	r2, #4
 8008eee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008ef2:	e035      	b.n	8008f60 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008ef4:	697b      	ldr	r3, [r7, #20]
 8008ef6:	7b1b      	ldrb	r3, [r3, #12]
 8008ef8:	4619      	mov	r1, r3
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 ff90 	bl	800ae20 <USBH_LL_GetURBState>
 8008f00:	4603      	mov	r3, r0
 8008f02:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008f04:	7cfb      	ldrb	r3, [r7, #19]
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d129      	bne.n	8008f5e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	7b1b      	ldrb	r3, [r3, #12]
 8008f0e:	4619      	mov	r1, r3
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	f001 fef3 	bl	800acfc <USBH_LL_GetLastXferSize>
 8008f16:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f1c:	68fa      	ldr	r2, [r7, #12]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d016      	beq.n	8008f50 <CDC_ProcessReception+0x9e>
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	8b5b      	ldrh	r3, [r3, #26]
 8008f26:	461a      	mov	r2, r3
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d110      	bne.n	8008f50 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1ad2      	subs	r2, r2, r3
 8008f36:	697b      	ldr	r3, [r7, #20]
 8008f38:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	6a1a      	ldr	r2, [r3, #32]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	441a      	add	r2, r3
 8008f42:	697b      	ldr	r3, [r7, #20]
 8008f44:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2203      	movs	r2, #3
 8008f4a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008f4e:	e006      	b.n	8008f5e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	2200      	movs	r2, #0
 8008f54:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f000 f80f 	bl	8008f7c <USBH_CDC_ReceiveCallback>
      break;
 8008f5e:	bf00      	nop
  }
}
 8008f60:	bf00      	nop
 8008f62:	3718      	adds	r7, #24
 8008f64:	46bd      	mov	sp, r7
 8008f66:	bd80      	pop	{r7, pc}

08008f68 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b083      	sub	sp, #12
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f70:	bf00      	nop
 8008f72:	370c      	adds	r7, #12
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f84:	bf00      	nop
 8008f86:	370c      	adds	r7, #12
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr

08008f90 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	4613      	mov	r3, r2
 8008fb0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d101      	bne.n	8008fbc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008fb8:	2302      	movs	r3, #2
 8008fba:	e029      	b.n	8009010 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	79fa      	ldrb	r2, [r7, #7]
 8008fc0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008fd4:	68f8      	ldr	r0, [r7, #12]
 8008fd6:	f000 f81f 	bl	8009018 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008ffa:	68bb      	ldr	r3, [r7, #8]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d003      	beq.n	8009008 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	68ba      	ldr	r2, [r7, #8]
 8009004:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009008:	68f8      	ldr	r0, [r7, #12]
 800900a:	f001 fdc3 	bl	800ab94 <USBH_LL_Init>

  return USBH_OK;
 800900e:	2300      	movs	r3, #0
}
 8009010:	4618      	mov	r0, r3
 8009012:	3710      	adds	r7, #16
 8009014:	46bd      	mov	sp, r7
 8009016:	bd80      	pop	{r7, pc}

08009018 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009020:	2300      	movs	r3, #0
 8009022:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009024:	2300      	movs	r3, #0
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	e009      	b.n	800903e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800902a:	687a      	ldr	r2, [r7, #4]
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	33e0      	adds	r3, #224	@ 0xe0
 8009030:	009b      	lsls	r3, r3, #2
 8009032:	4413      	add	r3, r2
 8009034:	2200      	movs	r2, #0
 8009036:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	3301      	adds	r3, #1
 800903c:	60fb      	str	r3, [r7, #12]
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	2b0f      	cmp	r3, #15
 8009042:	d9f2      	bls.n	800902a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]
 8009048:	e009      	b.n	800905e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	4413      	add	r3, r2
 8009050:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009054:	2200      	movs	r2, #0
 8009056:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	3301      	adds	r3, #1
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009064:	d3f1      	bcc.n	800904a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2201      	movs	r2, #1
 8009076:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2201      	movs	r2, #1
 8009084:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2240      	movs	r2, #64	@ 0x40
 800908a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2200      	movs	r2, #0
 8009090:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2200      	movs	r2, #0
 8009096:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2200      	movs	r2, #0
 80090ae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	331c      	adds	r3, #28
 80090b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090ba:	2100      	movs	r1, #0
 80090bc:	4618      	mov	r0, r3
 80090be:	f002 fb13 	bl	800b6e8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f002 fb0a 	bl	800b6e8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80090da:	2212      	movs	r2, #18
 80090dc:	2100      	movs	r1, #0
 80090de:	4618      	mov	r0, r3
 80090e0:	f002 fb02 	bl	800b6e8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80090ea:	223e      	movs	r2, #62	@ 0x3e
 80090ec:	2100      	movs	r1, #0
 80090ee:	4618      	mov	r0, r3
 80090f0:	f002 fafa 	bl	800b6e8 <memset>

  return USBH_OK;
 80090f4:	2300      	movs	r3, #0
}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009108:	2300      	movs	r3, #0
 800910a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d016      	beq.n	8009140 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009118:	2b00      	cmp	r3, #0
 800911a:	d10e      	bne.n	800913a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009122:	1c59      	adds	r1, r3, #1
 8009124:	687a      	ldr	r2, [r7, #4]
 8009126:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800912a:	687a      	ldr	r2, [r7, #4]
 800912c:	33de      	adds	r3, #222	@ 0xde
 800912e:	6839      	ldr	r1, [r7, #0]
 8009130:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	73fb      	strb	r3, [r7, #15]
 8009138:	e004      	b.n	8009144 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800913a:	2302      	movs	r3, #2
 800913c:	73fb      	strb	r3, [r7, #15]
 800913e:	e001      	b.n	8009144 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009140:	2302      	movs	r3, #2
 8009142:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009144:	7bfb      	ldrb	r3, [r7, #15]
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
 800915a:	460b      	mov	r3, r1
 800915c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009168:	78fa      	ldrb	r2, [r7, #3]
 800916a:	429a      	cmp	r2, r3
 800916c:	d204      	bcs.n	8009178 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	78fa      	ldrb	r2, [r7, #3]
 8009172:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009176:	e001      	b.n	800917c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009178:	2302      	movs	r3, #2
 800917a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800917c:	7bfb      	ldrb	r3, [r7, #15]
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800918a:	b480      	push	{r7}
 800918c:	b087      	sub	sp, #28
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
 8009192:	4608      	mov	r0, r1
 8009194:	4611      	mov	r1, r2
 8009196:	461a      	mov	r2, r3
 8009198:	4603      	mov	r3, r0
 800919a:	70fb      	strb	r3, [r7, #3]
 800919c:	460b      	mov	r3, r1
 800919e:	70bb      	strb	r3, [r7, #2]
 80091a0:	4613      	mov	r3, r2
 80091a2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80091a4:	2300      	movs	r3, #0
 80091a6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80091a8:	2300      	movs	r3, #0
 80091aa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80091b2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80091b4:	e025      	b.n	8009202 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80091b6:	7dfb      	ldrb	r3, [r7, #23]
 80091b8:	221a      	movs	r2, #26
 80091ba:	fb02 f303 	mul.w	r3, r2, r3
 80091be:	3308      	adds	r3, #8
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4413      	add	r3, r2
 80091c4:	3302      	adds	r3, #2
 80091c6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	795b      	ldrb	r3, [r3, #5]
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d002      	beq.n	80091d8 <USBH_FindInterface+0x4e>
 80091d2:	78fb      	ldrb	r3, [r7, #3]
 80091d4:	2bff      	cmp	r3, #255	@ 0xff
 80091d6:	d111      	bne.n	80091fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80091dc:	78ba      	ldrb	r2, [r7, #2]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d002      	beq.n	80091e8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091e2:	78bb      	ldrb	r3, [r7, #2]
 80091e4:	2bff      	cmp	r3, #255	@ 0xff
 80091e6:	d109      	bne.n	80091fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80091ec:	787a      	ldrb	r2, [r7, #1]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d002      	beq.n	80091f8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80091f2:	787b      	ldrb	r3, [r7, #1]
 80091f4:	2bff      	cmp	r3, #255	@ 0xff
 80091f6:	d101      	bne.n	80091fc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80091f8:	7dfb      	ldrb	r3, [r7, #23]
 80091fa:	e006      	b.n	800920a <USBH_FindInterface+0x80>
    }
    if_ix++;
 80091fc:	7dfb      	ldrb	r3, [r7, #23]
 80091fe:	3301      	adds	r3, #1
 8009200:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009202:	7dfb      	ldrb	r3, [r7, #23]
 8009204:	2b01      	cmp	r3, #1
 8009206:	d9d6      	bls.n	80091b6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009208:	23ff      	movs	r3, #255	@ 0xff
}
 800920a:	4618      	mov	r0, r3
 800920c:	371c      	adds	r7, #28
 800920e:	46bd      	mov	sp, r7
 8009210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009214:	4770      	bx	lr

08009216 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b082      	sub	sp, #8
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f001 fcf4 	bl	800ac0c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009224:	2101      	movs	r1, #1
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f001 fe0d 	bl	800ae46 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	3708      	adds	r7, #8
 8009232:	46bd      	mov	sp, r7
 8009234:	bd80      	pop	{r7, pc}
	...

08009238 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b088      	sub	sp, #32
 800923c:	af04      	add	r7, sp, #16
 800923e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009240:	2302      	movs	r3, #2
 8009242:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009244:	2300      	movs	r3, #0
 8009246:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b01      	cmp	r3, #1
 8009252:	d102      	bne.n	800925a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2203      	movs	r2, #3
 8009258:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	b2db      	uxtb	r3, r3
 8009260:	2b0b      	cmp	r3, #11
 8009262:	f200 81bb 	bhi.w	80095dc <USBH_Process+0x3a4>
 8009266:	a201      	add	r2, pc, #4	@ (adr r2, 800926c <USBH_Process+0x34>)
 8009268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800926c:	0800929d 	.word	0x0800929d
 8009270:	080092cf 	.word	0x080092cf
 8009274:	08009337 	.word	0x08009337
 8009278:	08009577 	.word	0x08009577
 800927c:	080095dd 	.word	0x080095dd
 8009280:	080093d7 	.word	0x080093d7
 8009284:	0800951d 	.word	0x0800951d
 8009288:	0800940d 	.word	0x0800940d
 800928c:	0800942d 	.word	0x0800942d
 8009290:	0800944b 	.word	0x0800944b
 8009294:	0800948f 	.word	0x0800948f
 8009298:	0800955f 	.word	0x0800955f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 819b 	beq.w	80095e0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80092b0:	20c8      	movs	r0, #200	@ 0xc8
 80092b2:	f001 fe12 	bl	800aeda <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80092b6:	6878      	ldr	r0, [r7, #4]
 80092b8:	f001 fd05 	bl	800acc6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092cc:	e188      	b.n	80095e0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80092d4:	2b01      	cmp	r3, #1
 80092d6:	d107      	bne.n	80092e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2200      	movs	r2, #0
 80092dc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2202      	movs	r2, #2
 80092e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80092e6:	e18a      	b.n	80095fe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80092ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80092f2:	d914      	bls.n	800931e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80092fa:	3301      	adds	r3, #1
 80092fc:	b2da      	uxtb	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800930a:	2b03      	cmp	r3, #3
 800930c:	d903      	bls.n	8009316 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	220d      	movs	r2, #13
 8009312:	701a      	strb	r2, [r3, #0]
      break;
 8009314:	e173      	b.n	80095fe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	701a      	strb	r2, [r3, #0]
      break;
 800931c:	e16f      	b.n	80095fe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009324:	f103 020a 	add.w	r2, r3, #10
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800932e:	200a      	movs	r0, #10
 8009330:	f001 fdd3 	bl	800aeda <USBH_Delay>
      break;
 8009334:	e163      	b.n	80095fe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800933c:	2b00      	cmp	r3, #0
 800933e:	d005      	beq.n	800934c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009346:	2104      	movs	r1, #4
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800934c:	2064      	movs	r0, #100	@ 0x64
 800934e:	f001 fdc4 	bl	800aeda <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 fc90 	bl	800ac78 <USBH_LL_GetSpeed>
 8009358:	4603      	mov	r3, r0
 800935a:	461a      	mov	r2, r3
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2205      	movs	r2, #5
 8009366:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fa9b 	bl	800a8a6 <USBH_AllocPipe>
 8009370:	4603      	mov	r3, r0
 8009372:	461a      	mov	r2, r3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009378:	2180      	movs	r1, #128	@ 0x80
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f001 fa93 	bl	800a8a6 <USBH_AllocPipe>
 8009380:	4603      	mov	r3, r0
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	7919      	ldrb	r1, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009398:	687a      	ldr	r2, [r7, #4]
 800939a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800939c:	9202      	str	r2, [sp, #8]
 800939e:	2200      	movs	r2, #0
 80093a0:	9201      	str	r2, [sp, #4]
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	4603      	mov	r3, r0
 80093a6:	2280      	movs	r2, #128	@ 0x80
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fa4d 	bl	800a848 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	7959      	ldrb	r1, [r3, #5]
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80093be:	687a      	ldr	r2, [r7, #4]
 80093c0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80093c2:	9202      	str	r2, [sp, #8]
 80093c4:	2200      	movs	r2, #0
 80093c6:	9201      	str	r2, [sp, #4]
 80093c8:	9300      	str	r3, [sp, #0]
 80093ca:	4603      	mov	r3, r0
 80093cc:	2200      	movs	r2, #0
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f001 fa3a 	bl	800a848 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80093d4:	e113      	b.n	80095fe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f916 	bl	8009608 <USBH_HandleEnum>
 80093dc:	4603      	mov	r3, r0
 80093de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	b2db      	uxtb	r3, r3
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	f040 80fd 	bne.w	80095e4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80093f8:	2b01      	cmp	r3, #1
 80093fa:	d103      	bne.n	8009404 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2208      	movs	r2, #8
 8009400:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009402:	e0ef      	b.n	80095e4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2207      	movs	r2, #7
 8009408:	701a      	strb	r2, [r3, #0]
      break;
 800940a:	e0eb      	b.n	80095e4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009412:	2b00      	cmp	r3, #0
 8009414:	f000 80e8 	beq.w	80095e8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800941e:	2101      	movs	r1, #1
 8009420:	6878      	ldr	r0, [r7, #4]
 8009422:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2208      	movs	r2, #8
 8009428:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800942a:	e0dd      	b.n	80095e8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009432:	4619      	mov	r1, r3
 8009434:	6878      	ldr	r0, [r7, #4]
 8009436:	f000 fc3a 	bl	8009cae <USBH_SetCfg>
 800943a:	4603      	mov	r3, r0
 800943c:	2b00      	cmp	r3, #0
 800943e:	f040 80d5 	bne.w	80095ec <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	2209      	movs	r2, #9
 8009446:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009448:	e0d0      	b.n	80095ec <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d016      	beq.n	8009486 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009458:	2101      	movs	r1, #1
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 fc4a 	bl	8009cf4 <USBH_SetFeature>
 8009460:	4603      	mov	r3, r0
 8009462:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d103      	bne.n	8009474 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	220a      	movs	r2, #10
 8009470:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009472:	e0bd      	b.n	80095f0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009474:	7bbb      	ldrb	r3, [r7, #14]
 8009476:	b2db      	uxtb	r3, r3
 8009478:	2b03      	cmp	r3, #3
 800947a:	f040 80b9 	bne.w	80095f0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	220a      	movs	r2, #10
 8009482:	701a      	strb	r2, [r3, #0]
      break;
 8009484:	e0b4      	b.n	80095f0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	220a      	movs	r2, #10
 800948a:	701a      	strb	r2, [r3, #0]
      break;
 800948c:	e0b0      	b.n	80095f0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009494:	2b00      	cmp	r3, #0
 8009496:	f000 80ad 	beq.w	80095f4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80094a2:	2300      	movs	r3, #0
 80094a4:	73fb      	strb	r3, [r7, #15]
 80094a6:	e016      	b.n	80094d6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80094a8:	7bfa      	ldrb	r2, [r7, #15]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	32de      	adds	r2, #222	@ 0xde
 80094ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094b2:	791a      	ldrb	r2, [r3, #4]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 80094ba:	429a      	cmp	r2, r3
 80094bc:	d108      	bne.n	80094d0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 80094be:	7bfa      	ldrb	r2, [r7, #15]
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	32de      	adds	r2, #222	@ 0xde
 80094c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 80094ce:	e005      	b.n	80094dc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80094d0:	7bfb      	ldrb	r3, [r7, #15]
 80094d2:	3301      	adds	r3, #1
 80094d4:	73fb      	strb	r3, [r7, #15]
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d0e5      	beq.n	80094a8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d016      	beq.n	8009514 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	4798      	blx	r3
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d109      	bne.n	800950c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2206      	movs	r2, #6
 80094fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009504:	2103      	movs	r1, #3
 8009506:	6878      	ldr	r0, [r7, #4]
 8009508:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800950a:	e073      	b.n	80095f4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	220d      	movs	r2, #13
 8009510:	701a      	strb	r2, [r3, #0]
      break;
 8009512:	e06f      	b.n	80095f4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	220d      	movs	r2, #13
 8009518:	701a      	strb	r2, [r3, #0]
      break;
 800951a:	e06b      	b.n	80095f4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009522:	2b00      	cmp	r3, #0
 8009524:	d017      	beq.n	8009556 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800952c:	691b      	ldr	r3, [r3, #16]
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
 8009532:	4603      	mov	r3, r0
 8009534:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009536:	7bbb      	ldrb	r3, [r7, #14]
 8009538:	b2db      	uxtb	r3, r3
 800953a:	2b00      	cmp	r3, #0
 800953c:	d103      	bne.n	8009546 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	220b      	movs	r2, #11
 8009542:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009544:	e058      	b.n	80095f8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009546:	7bbb      	ldrb	r3, [r7, #14]
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b02      	cmp	r3, #2
 800954c:	d154      	bne.n	80095f8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	220d      	movs	r2, #13
 8009552:	701a      	strb	r2, [r3, #0]
      break;
 8009554:	e050      	b.n	80095f8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	220d      	movs	r2, #13
 800955a:	701a      	strb	r2, [r3, #0]
      break;
 800955c:	e04c      	b.n	80095f8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009564:	2b00      	cmp	r3, #0
 8009566:	d049      	beq.n	80095fc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	4798      	blx	r3
      }
      break;
 8009574:	e042      	b.n	80095fc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	2200      	movs	r2, #0
 800957a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f7ff fd4a 	bl	8009018 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800958a:	2b00      	cmp	r3, #0
 800958c:	d009      	beq.n	80095a2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009594:	68db      	ldr	r3, [r3, #12]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d005      	beq.n	80095b8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80095b2:	2105      	movs	r1, #5
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 80095be:	b2db      	uxtb	r3, r3
 80095c0:	2b01      	cmp	r3, #1
 80095c2:	d107      	bne.n	80095d4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2200      	movs	r2, #0
 80095c8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff fe22 	bl	8009216 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80095d2:	e014      	b.n	80095fe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 80095d4:	6878      	ldr	r0, [r7, #4]
 80095d6:	f001 fb19 	bl	800ac0c <USBH_LL_Start>
      break;
 80095da:	e010      	b.n	80095fe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 80095dc:	bf00      	nop
 80095de:	e00e      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095e0:	bf00      	nop
 80095e2:	e00c      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095e4:	bf00      	nop
 80095e6:	e00a      	b.n	80095fe <USBH_Process+0x3c6>
    break;
 80095e8:	bf00      	nop
 80095ea:	e008      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095ec:	bf00      	nop
 80095ee:	e006      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095f0:	bf00      	nop
 80095f2:	e004      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095f4:	bf00      	nop
 80095f6:	e002      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095f8:	bf00      	nop
 80095fa:	e000      	b.n	80095fe <USBH_Process+0x3c6>
      break;
 80095fc:	bf00      	nop
  }
  return USBH_OK;
 80095fe:	2300      	movs	r3, #0
}
 8009600:	4618      	mov	r0, r3
 8009602:	3710      	adds	r7, #16
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b088      	sub	sp, #32
 800960c:	af04      	add	r7, sp, #16
 800960e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009610:	2301      	movs	r3, #1
 8009612:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009614:	2301      	movs	r3, #1
 8009616:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	785b      	ldrb	r3, [r3, #1]
 800961c:	2b07      	cmp	r3, #7
 800961e:	f200 81bd 	bhi.w	800999c <USBH_HandleEnum+0x394>
 8009622:	a201      	add	r2, pc, #4	@ (adr r2, 8009628 <USBH_HandleEnum+0x20>)
 8009624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009628:	08009649 	.word	0x08009649
 800962c:	08009703 	.word	0x08009703
 8009630:	0800976d 	.word	0x0800976d
 8009634:	080097f7 	.word	0x080097f7
 8009638:	08009861 	.word	0x08009861
 800963c:	080098d1 	.word	0x080098d1
 8009640:	08009917 	.word	0x08009917
 8009644:	0800995d 	.word	0x0800995d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009648:	2108      	movs	r1, #8
 800964a:	6878      	ldr	r0, [r7, #4]
 800964c:	f000 fa4c 	bl	8009ae8 <USBH_Get_DevDesc>
 8009650:	4603      	mov	r3, r0
 8009652:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009654:	7bbb      	ldrb	r3, [r7, #14]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d12e      	bne.n	80096b8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	7919      	ldrb	r1, [r3, #4]
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800967e:	9202      	str	r2, [sp, #8]
 8009680:	2200      	movs	r2, #0
 8009682:	9201      	str	r2, [sp, #4]
 8009684:	9300      	str	r3, [sp, #0]
 8009686:	4603      	mov	r3, r0
 8009688:	2280      	movs	r2, #128	@ 0x80
 800968a:	6878      	ldr	r0, [r7, #4]
 800968c:	f001 f8dc 	bl	800a848 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	7959      	ldrb	r1, [r3, #5]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80096a4:	9202      	str	r2, [sp, #8]
 80096a6:	2200      	movs	r2, #0
 80096a8:	9201      	str	r2, [sp, #4]
 80096aa:	9300      	str	r3, [sp, #0]
 80096ac:	4603      	mov	r3, r0
 80096ae:	2200      	movs	r2, #0
 80096b0:	6878      	ldr	r0, [r7, #4]
 80096b2:	f001 f8c9 	bl	800a848 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80096b6:	e173      	b.n	80099a0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80096b8:	7bbb      	ldrb	r3, [r7, #14]
 80096ba:	2b03      	cmp	r3, #3
 80096bc:	f040 8170 	bne.w	80099a0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096c6:	3301      	adds	r3, #1
 80096c8:	b2da      	uxtb	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d903      	bls.n	80096e2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	220d      	movs	r2, #13
 80096de:	701a      	strb	r2, [r3, #0]
      break;
 80096e0:	e15e      	b.n	80099a0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	795b      	ldrb	r3, [r3, #5]
 80096e6:	4619      	mov	r1, r3
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	f001 f8fd 	bl	800a8e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	791b      	ldrb	r3, [r3, #4]
 80096f2:	4619      	mov	r1, r3
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f001 f8f7 	bl	800a8e8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2200      	movs	r2, #0
 80096fe:	701a      	strb	r2, [r3, #0]
      break;
 8009700:	e14e      	b.n	80099a0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009702:	2112      	movs	r1, #18
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 f9ef 	bl	8009ae8 <USBH_Get_DevDesc>
 800970a:	4603      	mov	r3, r0
 800970c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800970e:	7bbb      	ldrb	r3, [r7, #14]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d103      	bne.n	800971c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2202      	movs	r2, #2
 8009718:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800971a:	e143      	b.n	80099a4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800971c:	7bbb      	ldrb	r3, [r7, #14]
 800971e:	2b03      	cmp	r3, #3
 8009720:	f040 8140 	bne.w	80099a4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800972a:	3301      	adds	r3, #1
 800972c:	b2da      	uxtb	r2, r3
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800973a:	2b03      	cmp	r3, #3
 800973c:	d903      	bls.n	8009746 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	220d      	movs	r2, #13
 8009742:	701a      	strb	r2, [r3, #0]
      break;
 8009744:	e12e      	b.n	80099a4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	795b      	ldrb	r3, [r3, #5]
 800974a:	4619      	mov	r1, r3
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f001 f8cb 	bl	800a8e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	791b      	ldrb	r3, [r3, #4]
 8009756:	4619      	mov	r1, r3
 8009758:	6878      	ldr	r0, [r7, #4]
 800975a:	f001 f8c5 	bl	800a8e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2200      	movs	r2, #0
 8009762:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2200      	movs	r2, #0
 8009768:	701a      	strb	r2, [r3, #0]
      break;
 800976a:	e11b      	b.n	80099a4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800976c:	2101      	movs	r1, #1
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 fa79 	bl	8009c66 <USBH_SetAddress>
 8009774:	4603      	mov	r3, r0
 8009776:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009778:	7bbb      	ldrb	r3, [r7, #14]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d130      	bne.n	80097e0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800977e:	2002      	movs	r0, #2
 8009780:	f001 fbab 	bl	800aeda <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2201      	movs	r2, #1
 8009788:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2203      	movs	r2, #3
 8009790:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	7919      	ldrb	r1, [r3, #4]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097a2:	687a      	ldr	r2, [r7, #4]
 80097a4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80097a6:	9202      	str	r2, [sp, #8]
 80097a8:	2200      	movs	r2, #0
 80097aa:	9201      	str	r2, [sp, #4]
 80097ac:	9300      	str	r3, [sp, #0]
 80097ae:	4603      	mov	r3, r0
 80097b0:	2280      	movs	r2, #128	@ 0x80
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f001 f848 	bl	800a848 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	7959      	ldrb	r1, [r3, #5]
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80097cc:	9202      	str	r2, [sp, #8]
 80097ce:	2200      	movs	r2, #0
 80097d0:	9201      	str	r2, [sp, #4]
 80097d2:	9300      	str	r3, [sp, #0]
 80097d4:	4603      	mov	r3, r0
 80097d6:	2200      	movs	r2, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	f001 f835 	bl	800a848 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80097de:	e0e3      	b.n	80099a8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80097e0:	7bbb      	ldrb	r3, [r7, #14]
 80097e2:	2b03      	cmp	r3, #3
 80097e4:	f040 80e0 	bne.w	80099a8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	220d      	movs	r2, #13
 80097ec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	705a      	strb	r2, [r3, #1]
      break;
 80097f4:	e0d8      	b.n	80099a8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80097f6:	2109      	movs	r1, #9
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 f9a1 	bl	8009b40 <USBH_Get_CfgDesc>
 80097fe:	4603      	mov	r3, r0
 8009800:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009802:	7bbb      	ldrb	r3, [r7, #14]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d103      	bne.n	8009810 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2204      	movs	r2, #4
 800980c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800980e:	e0cd      	b.n	80099ac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009810:	7bbb      	ldrb	r3, [r7, #14]
 8009812:	2b03      	cmp	r3, #3
 8009814:	f040 80ca 	bne.w	80099ac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800981e:	3301      	adds	r3, #1
 8009820:	b2da      	uxtb	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800982e:	2b03      	cmp	r3, #3
 8009830:	d903      	bls.n	800983a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	220d      	movs	r2, #13
 8009836:	701a      	strb	r2, [r3, #0]
      break;
 8009838:	e0b8      	b.n	80099ac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	795b      	ldrb	r3, [r3, #5]
 800983e:	4619      	mov	r1, r3
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f001 f851 	bl	800a8e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	791b      	ldrb	r3, [r3, #4]
 800984a:	4619      	mov	r1, r3
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 f84b 	bl	800a8e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	701a      	strb	r2, [r3, #0]
      break;
 800985e:	e0a5      	b.n	80099ac <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009866:	4619      	mov	r1, r3
 8009868:	6878      	ldr	r0, [r7, #4]
 800986a:	f000 f969 	bl	8009b40 <USBH_Get_CfgDesc>
 800986e:	4603      	mov	r3, r0
 8009870:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d103      	bne.n	8009880 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2205      	movs	r2, #5
 800987c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800987e:	e097      	b.n	80099b0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009880:	7bbb      	ldrb	r3, [r7, #14]
 8009882:	2b03      	cmp	r3, #3
 8009884:	f040 8094 	bne.w	80099b0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800988e:	3301      	adds	r3, #1
 8009890:	b2da      	uxtb	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d903      	bls.n	80098aa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	220d      	movs	r2, #13
 80098a6:	701a      	strb	r2, [r3, #0]
      break;
 80098a8:	e082      	b.n	80099b0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	795b      	ldrb	r3, [r3, #5]
 80098ae:	4619      	mov	r1, r3
 80098b0:	6878      	ldr	r0, [r7, #4]
 80098b2:	f001 f819 	bl	800a8e8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	791b      	ldrb	r3, [r3, #4]
 80098ba:	4619      	mov	r1, r3
 80098bc:	6878      	ldr	r0, [r7, #4]
 80098be:	f001 f813 	bl	800a8e8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2200      	movs	r2, #0
 80098c6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	701a      	strb	r2, [r3, #0]
      break;
 80098ce:	e06f      	b.n	80099b0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d019      	beq.n	800990e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80098e6:	23ff      	movs	r3, #255	@ 0xff
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 f953 	bl	8009b94 <USBH_Get_StringDesc>
 80098ee:	4603      	mov	r3, r0
 80098f0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80098f2:	7bbb      	ldrb	r3, [r7, #14]
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d103      	bne.n	8009900 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2206      	movs	r2, #6
 80098fc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098fe:	e059      	b.n	80099b4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009900:	7bbb      	ldrb	r3, [r7, #14]
 8009902:	2b03      	cmp	r3, #3
 8009904:	d156      	bne.n	80099b4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2206      	movs	r2, #6
 800990a:	705a      	strb	r2, [r3, #1]
      break;
 800990c:	e052      	b.n	80099b4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2206      	movs	r2, #6
 8009912:	705a      	strb	r2, [r3, #1]
      break;
 8009914:	e04e      	b.n	80099b4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800991c:	2b00      	cmp	r3, #0
 800991e:	d019      	beq.n	8009954 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800992c:	23ff      	movs	r3, #255	@ 0xff
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f930 	bl	8009b94 <USBH_Get_StringDesc>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d103      	bne.n	8009946 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	2207      	movs	r2, #7
 8009942:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009944:	e038      	b.n	80099b8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009946:	7bbb      	ldrb	r3, [r7, #14]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d135      	bne.n	80099b8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2207      	movs	r2, #7
 8009950:	705a      	strb	r2, [r3, #1]
      break;
 8009952:	e031      	b.n	80099b8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2207      	movs	r2, #7
 8009958:	705a      	strb	r2, [r3, #1]
      break;
 800995a:	e02d      	b.n	80099b8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009962:	2b00      	cmp	r3, #0
 8009964:	d017      	beq.n	8009996 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009972:	23ff      	movs	r3, #255	@ 0xff
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 f90d 	bl	8009b94 <USBH_Get_StringDesc>
 800997a:	4603      	mov	r3, r0
 800997c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800997e:	7bbb      	ldrb	r3, [r7, #14]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d102      	bne.n	800998a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009984:	2300      	movs	r3, #0
 8009986:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009988:	e018      	b.n	80099bc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800998a:	7bbb      	ldrb	r3, [r7, #14]
 800998c:	2b03      	cmp	r3, #3
 800998e:	d115      	bne.n	80099bc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009990:	2300      	movs	r3, #0
 8009992:	73fb      	strb	r3, [r7, #15]
      break;
 8009994:	e012      	b.n	80099bc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009996:	2300      	movs	r3, #0
 8009998:	73fb      	strb	r3, [r7, #15]
      break;
 800999a:	e00f      	b.n	80099bc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800999c:	bf00      	nop
 800999e:	e00e      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099a0:	bf00      	nop
 80099a2:	e00c      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099a4:	bf00      	nop
 80099a6:	e00a      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099a8:	bf00      	nop
 80099aa:	e008      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099ac:	bf00      	nop
 80099ae:	e006      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099b0:	bf00      	nop
 80099b2:	e004      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099b4:	bf00      	nop
 80099b6:	e002      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099b8:	bf00      	nop
 80099ba:	e000      	b.n	80099be <USBH_HandleEnum+0x3b6>
      break;
 80099bc:	bf00      	nop
  }
  return Status;
 80099be:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3710      	adds	r7, #16
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b083      	sub	sp, #12
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	6078      	str	r0, [r7, #4]
 80099d0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	683a      	ldr	r2, [r7, #0]
 80099d6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80099da:	bf00      	nop
 80099dc:	370c      	adds	r7, #12
 80099de:	46bd      	mov	sp, r7
 80099e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e4:	4770      	bx	lr

080099e6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b082      	sub	sp, #8
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80099f4:	1c5a      	adds	r2, r3, #1
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80099fc:	6878      	ldr	r0, [r7, #4]
 80099fe:	f000 f804 	bl	8009a0a <USBH_HandleSof>
}
 8009a02:	bf00      	nop
 8009a04:	3708      	adds	r7, #8
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b082      	sub	sp, #8
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	781b      	ldrb	r3, [r3, #0]
 8009a16:	b2db      	uxtb	r3, r3
 8009a18:	2b0b      	cmp	r3, #11
 8009a1a:	d10a      	bne.n	8009a32 <USBH_HandleSof+0x28>
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d005      	beq.n	8009a32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a2c:	699b      	ldr	r3, [r3, #24]
 8009a2e:	6878      	ldr	r0, [r7, #4]
 8009a30:	4798      	blx	r3
  }
}
 8009a32:	bf00      	nop
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	2201      	movs	r2, #1
 8009a46:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009a4a:	bf00      	nop
}
 8009a4c:	370c      	adds	r7, #12
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009a56:	b480      	push	{r7}
 8009a58:	b083      	sub	sp, #12
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009a66:	bf00      	nop
}
 8009a68:	370c      	adds	r7, #12
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a70:	4770      	bx	lr

08009a72 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	2201      	movs	r2, #1
 8009a7e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2200      	movs	r2, #0
 8009a8e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009a92:	2300      	movs	r3, #0
}
 8009a94:	4618      	mov	r0, r3
 8009a96:	370c      	adds	r7, #12
 8009a98:	46bd      	mov	sp, r7
 8009a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9e:	4770      	bx	lr

08009aa0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f001 f8be 	bl	800ac42 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	791b      	ldrb	r3, [r3, #4]
 8009aca:	4619      	mov	r1, r3
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f000 ff0b 	bl	800a8e8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	795b      	ldrb	r3, [r3, #5]
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f000 ff05 	bl	800a8e8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009ade:	2300      	movs	r3, #0
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3708      	adds	r7, #8
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b086      	sub	sp, #24
 8009aec:	af02      	add	r7, sp, #8
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	460b      	mov	r3, r1
 8009af2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009af4:	887b      	ldrh	r3, [r7, #2]
 8009af6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009afa:	d901      	bls.n	8009b00 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e01b      	b.n	8009b38 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009b06:	887b      	ldrh	r3, [r7, #2]
 8009b08:	9300      	str	r3, [sp, #0]
 8009b0a:	4613      	mov	r3, r2
 8009b0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009b10:	2100      	movs	r1, #0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f872 	bl	8009bfc <USBH_GetDescriptor>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009b1c:	7bfb      	ldrb	r3, [r7, #15]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d109      	bne.n	8009b36 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009b28:	887a      	ldrh	r2, [r7, #2]
 8009b2a:	4619      	mov	r1, r3
 8009b2c:	6878      	ldr	r0, [r7, #4]
 8009b2e:	f000 f929 	bl	8009d84 <USBH_ParseDevDesc>
 8009b32:	4603      	mov	r3, r0
 8009b34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3710      	adds	r7, #16
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}

08009b40 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b086      	sub	sp, #24
 8009b44:	af02      	add	r7, sp, #8
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	331c      	adds	r3, #28
 8009b50:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009b52:	887b      	ldrh	r3, [r7, #2]
 8009b54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009b58:	d901      	bls.n	8009b5e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	e016      	b.n	8009b8c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009b5e:	887b      	ldrh	r3, [r7, #2]
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b68:	2100      	movs	r1, #0
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f846 	bl	8009bfc <USBH_GetDescriptor>
 8009b70:	4603      	mov	r3, r0
 8009b72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009b74:	7bfb      	ldrb	r3, [r7, #15]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d107      	bne.n	8009b8a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009b7a:	887b      	ldrh	r3, [r7, #2]
 8009b7c:	461a      	mov	r2, r3
 8009b7e:	68b9      	ldr	r1, [r7, #8]
 8009b80:	6878      	ldr	r0, [r7, #4]
 8009b82:	f000 f9af 	bl	8009ee4 <USBH_ParseCfgDesc>
 8009b86:	4603      	mov	r3, r0
 8009b88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b088      	sub	sp, #32
 8009b98:	af02      	add	r7, sp, #8
 8009b9a:	60f8      	str	r0, [r7, #12]
 8009b9c:	607a      	str	r2, [r7, #4]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	72fb      	strb	r3, [r7, #11]
 8009ba4:	4613      	mov	r3, r2
 8009ba6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009ba8:	893b      	ldrh	r3, [r7, #8]
 8009baa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bae:	d802      	bhi.n	8009bb6 <USBH_Get_StringDesc+0x22>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d101      	bne.n	8009bba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009bb6:	2303      	movs	r3, #3
 8009bb8:	e01c      	b.n	8009bf4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009bba:	7afb      	ldrb	r3, [r7, #11]
 8009bbc:	b29b      	uxth	r3, r3
 8009bbe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009bc2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009bca:	893b      	ldrh	r3, [r7, #8]
 8009bcc:	9300      	str	r3, [sp, #0]
 8009bce:	460b      	mov	r3, r1
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	68f8      	ldr	r0, [r7, #12]
 8009bd4:	f000 f812 	bl	8009bfc <USBH_GetDescriptor>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009bdc:	7dfb      	ldrb	r3, [r7, #23]
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d107      	bne.n	8009bf2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009be8:	893a      	ldrh	r2, [r7, #8]
 8009bea:	6879      	ldr	r1, [r7, #4]
 8009bec:	4618      	mov	r0, r3
 8009bee:	f000 fb8d 	bl	800a30c <USBH_ParseStringDesc>
  }

  return status;
 8009bf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3718      	adds	r7, #24
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}

08009bfc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b084      	sub	sp, #16
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	607b      	str	r3, [r7, #4]
 8009c06:	460b      	mov	r3, r1
 8009c08:	72fb      	strb	r3, [r7, #11]
 8009c0a:	4613      	mov	r3, r2
 8009c0c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	789b      	ldrb	r3, [r3, #2]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d11c      	bne.n	8009c50 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009c16:	7afb      	ldrb	r3, [r7, #11]
 8009c18:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009c1c:	b2da      	uxtb	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2206      	movs	r2, #6
 8009c26:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	893a      	ldrh	r2, [r7, #8]
 8009c2c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009c2e:	893b      	ldrh	r3, [r7, #8]
 8009c30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009c34:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009c38:	d104      	bne.n	8009c44 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009c40:	829a      	strh	r2, [r3, #20]
 8009c42:	e002      	b.n	8009c4a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	8b3a      	ldrh	r2, [r7, #24]
 8009c4e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009c50:	8b3b      	ldrh	r3, [r7, #24]
 8009c52:	461a      	mov	r2, r3
 8009c54:	6879      	ldr	r1, [r7, #4]
 8009c56:	68f8      	ldr	r0, [r7, #12]
 8009c58:	f000 fba5 	bl	800a3a6 <USBH_CtlReq>
 8009c5c:	4603      	mov	r3, r0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b082      	sub	sp, #8
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	460b      	mov	r3, r1
 8009c70:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	789b      	ldrb	r3, [r3, #2]
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d10f      	bne.n	8009c9a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2200      	movs	r2, #0
 8009c7e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2205      	movs	r2, #5
 8009c84:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009c86:	78fb      	ldrb	r3, [r7, #3]
 8009c88:	b29a      	uxth	r2, r3
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	2100      	movs	r1, #0
 8009c9e:	6878      	ldr	r0, [r7, #4]
 8009ca0:	f000 fb81 	bl	800a3a6 <USBH_CtlReq>
 8009ca4:	4603      	mov	r3, r0
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	3708      	adds	r7, #8
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd80      	pop	{r7, pc}

08009cae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009cae:	b580      	push	{r7, lr}
 8009cb0:	b082      	sub	sp, #8
 8009cb2:	af00      	add	r7, sp, #0
 8009cb4:	6078      	str	r0, [r7, #4]
 8009cb6:	460b      	mov	r3, r1
 8009cb8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	789b      	ldrb	r3, [r3, #2]
 8009cbe:	2b01      	cmp	r3, #1
 8009cc0:	d10e      	bne.n	8009ce0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2209      	movs	r2, #9
 8009ccc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	887a      	ldrh	r2, [r7, #2]
 8009cd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	2100      	movs	r1, #0
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 fb5e 	bl	800a3a6 <USBH_CtlReq>
 8009cea:	4603      	mov	r3, r0
}
 8009cec:	4618      	mov	r0, r3
 8009cee:	3708      	adds	r7, #8
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009cf4:	b580      	push	{r7, lr}
 8009cf6:	b082      	sub	sp, #8
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
 8009cfc:	460b      	mov	r3, r1
 8009cfe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	789b      	ldrb	r3, [r3, #2]
 8009d04:	2b01      	cmp	r3, #1
 8009d06:	d10f      	bne.n	8009d28 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2203      	movs	r2, #3
 8009d12:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009d14:	78fb      	ldrb	r3, [r7, #3]
 8009d16:	b29a      	uxth	r2, r3
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d28:	2200      	movs	r2, #0
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 fb3a 	bl	800a3a6 <USBH_CtlReq>
 8009d32:	4603      	mov	r3, r0
}
 8009d34:	4618      	mov	r0, r3
 8009d36:	3708      	adds	r7, #8
 8009d38:	46bd      	mov	sp, r7
 8009d3a:	bd80      	pop	{r7, pc}

08009d3c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b082      	sub	sp, #8
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
 8009d44:	460b      	mov	r3, r1
 8009d46:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	789b      	ldrb	r3, [r3, #2]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	d10f      	bne.n	8009d70 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2201      	movs	r2, #1
 8009d5a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009d62:	78fb      	ldrb	r3, [r7, #3]
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009d70:	2200      	movs	r2, #0
 8009d72:	2100      	movs	r1, #0
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f000 fb16 	bl	800a3a6 <USBH_CtlReq>
 8009d7a:	4603      	mov	r3, r0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b087      	sub	sp, #28
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	60f8      	str	r0, [r7, #12]
 8009d8c:	60b9      	str	r1, [r7, #8]
 8009d8e:	4613      	mov	r3, r2
 8009d90:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009d98:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d101      	bne.n	8009da8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009da4:	2302      	movs	r3, #2
 8009da6:	e094      	b.n	8009ed2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	781a      	ldrb	r2, [r3, #0]
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	785a      	ldrb	r2, [r3, #1]
 8009db4:	693b      	ldr	r3, [r7, #16]
 8009db6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	3302      	adds	r3, #2
 8009dbc:	781b      	ldrb	r3, [r3, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	3303      	adds	r3, #3
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	021b      	lsls	r3, r3, #8
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	b29a      	uxth	r2, r3
 8009dce:	693b      	ldr	r3, [r7, #16]
 8009dd0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009dd2:	68bb      	ldr	r3, [r7, #8]
 8009dd4:	791a      	ldrb	r2, [r3, #4]
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	795a      	ldrb	r2, [r3, #5]
 8009dde:	693b      	ldr	r3, [r7, #16]
 8009de0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	799a      	ldrb	r2, [r3, #6]
 8009de6:	693b      	ldr	r3, [r7, #16]
 8009de8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	79da      	ldrb	r2, [r3, #7]
 8009dee:	693b      	ldr	r3, [r7, #16]
 8009df0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d004      	beq.n	8009e06 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d11b      	bne.n	8009e3e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	79db      	ldrb	r3, [r3, #7]
 8009e0a:	2b20      	cmp	r3, #32
 8009e0c:	dc0f      	bgt.n	8009e2e <USBH_ParseDevDesc+0xaa>
 8009e0e:	2b08      	cmp	r3, #8
 8009e10:	db0f      	blt.n	8009e32 <USBH_ParseDevDesc+0xae>
 8009e12:	3b08      	subs	r3, #8
 8009e14:	4a32      	ldr	r2, [pc, #200]	@ (8009ee0 <USBH_ParseDevDesc+0x15c>)
 8009e16:	fa22 f303 	lsr.w	r3, r2, r3
 8009e1a:	f003 0301 	and.w	r3, r3, #1
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	bf14      	ite	ne
 8009e22:	2301      	movne	r3, #1
 8009e24:	2300      	moveq	r3, #0
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <USBH_ParseDevDesc+0xb6>
 8009e2c:	e001      	b.n	8009e32 <USBH_ParseDevDesc+0xae>
 8009e2e:	2b40      	cmp	r3, #64	@ 0x40
 8009e30:	d003      	beq.n	8009e3a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2208      	movs	r2, #8
 8009e36:	71da      	strb	r2, [r3, #7]
        break;
 8009e38:	e000      	b.n	8009e3c <USBH_ParseDevDesc+0xb8>
        break;
 8009e3a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009e3c:	e00e      	b.n	8009e5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d107      	bne.n	8009e58 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	79db      	ldrb	r3, [r3, #7]
 8009e4c:	2b08      	cmp	r3, #8
 8009e4e:	d005      	beq.n	8009e5c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	2208      	movs	r2, #8
 8009e54:	71da      	strb	r2, [r3, #7]
 8009e56:	e001      	b.n	8009e5c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009e58:	2303      	movs	r3, #3
 8009e5a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009e5c:	88fb      	ldrh	r3, [r7, #6]
 8009e5e:	2b08      	cmp	r3, #8
 8009e60:	d936      	bls.n	8009ed0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009e62:	68bb      	ldr	r3, [r7, #8]
 8009e64:	3308      	adds	r3, #8
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	461a      	mov	r2, r3
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	3309      	adds	r3, #9
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	021b      	lsls	r3, r3, #8
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	4313      	orrs	r3, r2
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	693b      	ldr	r3, [r7, #16]
 8009e7a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009e7c:	68bb      	ldr	r3, [r7, #8]
 8009e7e:	330a      	adds	r3, #10
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	461a      	mov	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	330b      	adds	r3, #11
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	021b      	lsls	r3, r3, #8
 8009e8c:	b29b      	uxth	r3, r3
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	330c      	adds	r3, #12
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	461a      	mov	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	330d      	adds	r3, #13
 8009ea2:	781b      	ldrb	r3, [r3, #0]
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	4313      	orrs	r3, r2
 8009eaa:	b29a      	uxth	r2, r3
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	7b9a      	ldrb	r2, [r3, #14]
 8009eb4:	693b      	ldr	r3, [r7, #16]
 8009eb6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	7bda      	ldrb	r2, [r3, #15]
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	7c1a      	ldrb	r2, [r3, #16]
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	7c5a      	ldrb	r2, [r3, #17]
 8009ecc:	693b      	ldr	r3, [r7, #16]
 8009ece:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	371c      	adds	r7, #28
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	01000101 	.word	0x01000101

08009ee4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08c      	sub	sp, #48	@ 0x30
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009ef8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009f00:	2300      	movs	r3, #0
 8009f02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009f06:	2300      	movs	r3, #0
 8009f08:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009f12:	2302      	movs	r3, #2
 8009f14:	e0da      	b.n	800a0cc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009f16:	68bb      	ldr	r3, [r7, #8]
 8009f18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f1c:	781b      	ldrb	r3, [r3, #0]
 8009f1e:	2b09      	cmp	r3, #9
 8009f20:	d002      	beq.n	8009f28 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f24:	2209      	movs	r2, #9
 8009f26:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	6a3b      	ldr	r3, [r7, #32]
 8009f2e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	785a      	ldrb	r2, [r3, #1]
 8009f34:	6a3b      	ldr	r3, [r7, #32]
 8009f36:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	3302      	adds	r3, #2
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	3303      	adds	r3, #3
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	021b      	lsls	r3, r3, #8
 8009f48:	b29b      	uxth	r3, r3
 8009f4a:	4313      	orrs	r3, r2
 8009f4c:	b29b      	uxth	r3, r3
 8009f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009f52:	bf28      	it	cs
 8009f54:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	6a3b      	ldr	r3, [r7, #32]
 8009f5c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009f5e:	68bb      	ldr	r3, [r7, #8]
 8009f60:	791a      	ldrb	r2, [r3, #4]
 8009f62:	6a3b      	ldr	r3, [r7, #32]
 8009f64:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	795a      	ldrb	r2, [r3, #5]
 8009f6a:	6a3b      	ldr	r3, [r7, #32]
 8009f6c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	799a      	ldrb	r2, [r3, #6]
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	79da      	ldrb	r2, [r3, #7]
 8009f7a:	6a3b      	ldr	r3, [r7, #32]
 8009f7c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	7a1a      	ldrb	r2, [r3, #8]
 8009f82:	6a3b      	ldr	r3, [r7, #32]
 8009f84:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009f86:	88fb      	ldrh	r3, [r7, #6]
 8009f88:	2b09      	cmp	r3, #9
 8009f8a:	f240 809d 	bls.w	800a0c8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009f8e:	2309      	movs	r3, #9
 8009f90:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009f92:	2300      	movs	r3, #0
 8009f94:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009f96:	e081      	b.n	800a09c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009f98:	f107 0316 	add.w	r3, r7, #22
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fa0:	f000 f9e7 	bl	800a372 <USBH_GetNextDesc>
 8009fa4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	2b04      	cmp	r3, #4
 8009fac:	d176      	bne.n	800a09c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009fae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb0:	781b      	ldrb	r3, [r3, #0]
 8009fb2:	2b09      	cmp	r3, #9
 8009fb4:	d002      	beq.n	8009fbc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fb8:	2209      	movs	r2, #9
 8009fba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009fc0:	221a      	movs	r2, #26
 8009fc2:	fb02 f303 	mul.w	r3, r2, r3
 8009fc6:	3308      	adds	r3, #8
 8009fc8:	6a3a      	ldr	r2, [r7, #32]
 8009fca:	4413      	add	r3, r2
 8009fcc:	3302      	adds	r3, #2
 8009fce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009fd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009fd2:	69f8      	ldr	r0, [r7, #28]
 8009fd4:	f000 f87e 	bl	800a0d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009fde:	2300      	movs	r3, #0
 8009fe0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009fe2:	e043      	b.n	800a06c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009fe4:	f107 0316 	add.w	r3, r7, #22
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fec:	f000 f9c1 	bl	800a372 <USBH_GetNextDesc>
 8009ff0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	785b      	ldrb	r3, [r3, #1]
 8009ff6:	2b05      	cmp	r3, #5
 8009ff8:	d138      	bne.n	800a06c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009ffa:	69fb      	ldr	r3, [r7, #28]
 8009ffc:	795b      	ldrb	r3, [r3, #5]
 8009ffe:	2b01      	cmp	r3, #1
 800a000:	d113      	bne.n	800a02a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a002:	69fb      	ldr	r3, [r7, #28]
 800a004:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a006:	2b02      	cmp	r3, #2
 800a008:	d003      	beq.n	800a012 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a00a:	69fb      	ldr	r3, [r7, #28]
 800a00c:	799b      	ldrb	r3, [r3, #6]
 800a00e:	2b03      	cmp	r3, #3
 800a010:	d10b      	bne.n	800a02a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	79db      	ldrb	r3, [r3, #7]
 800a016:	2b00      	cmp	r3, #0
 800a018:	d10b      	bne.n	800a032 <USBH_ParseCfgDesc+0x14e>
 800a01a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a01c:	781b      	ldrb	r3, [r3, #0]
 800a01e:	2b09      	cmp	r3, #9
 800a020:	d007      	beq.n	800a032 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a024:	2209      	movs	r2, #9
 800a026:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a028:	e003      	b.n	800a032 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a02a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a02c:	2207      	movs	r2, #7
 800a02e:	701a      	strb	r2, [r3, #0]
 800a030:	e000      	b.n	800a034 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a032:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a034:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a038:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a03c:	3201      	adds	r2, #1
 800a03e:	00d2      	lsls	r2, r2, #3
 800a040:	211a      	movs	r1, #26
 800a042:	fb01 f303 	mul.w	r3, r1, r3
 800a046:	4413      	add	r3, r2
 800a048:	3308      	adds	r3, #8
 800a04a:	6a3a      	ldr	r2, [r7, #32]
 800a04c:	4413      	add	r3, r2
 800a04e:	3304      	adds	r3, #4
 800a050:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a052:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a054:	69b9      	ldr	r1, [r7, #24]
 800a056:	68f8      	ldr	r0, [r7, #12]
 800a058:	f000 f870 	bl	800a13c <USBH_ParseEPDesc>
 800a05c:	4603      	mov	r3, r0
 800a05e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a066:	3301      	adds	r3, #1
 800a068:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	791b      	ldrb	r3, [r3, #4]
 800a070:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a074:	429a      	cmp	r2, r3
 800a076:	d204      	bcs.n	800a082 <USBH_ParseCfgDesc+0x19e>
 800a078:	6a3b      	ldr	r3, [r7, #32]
 800a07a:	885a      	ldrh	r2, [r3, #2]
 800a07c:	8afb      	ldrh	r3, [r7, #22]
 800a07e:	429a      	cmp	r2, r3
 800a080:	d8b0      	bhi.n	8009fe4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	791b      	ldrb	r3, [r3, #4]
 800a086:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d201      	bcs.n	800a092 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a08e:	2303      	movs	r3, #3
 800a090:	e01c      	b.n	800a0cc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a092:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a096:	3301      	adds	r3, #1
 800a098:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a09c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d805      	bhi.n	800a0b0 <USBH_ParseCfgDesc+0x1cc>
 800a0a4:	6a3b      	ldr	r3, [r7, #32]
 800a0a6:	885a      	ldrh	r2, [r3, #2]
 800a0a8:	8afb      	ldrh	r3, [r7, #22]
 800a0aa:	429a      	cmp	r2, r3
 800a0ac:	f63f af74 	bhi.w	8009f98 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a0b0:	6a3b      	ldr	r3, [r7, #32]
 800a0b2:	791b      	ldrb	r3, [r3, #4]
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	bf28      	it	cs
 800a0b8:	2302      	movcs	r3, #2
 800a0ba:	b2db      	uxtb	r3, r3
 800a0bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a0c0:	429a      	cmp	r2, r3
 800a0c2:	d201      	bcs.n	800a0c8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a0c4:	2303      	movs	r3, #3
 800a0c6:	e001      	b.n	800a0cc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a0c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	3730      	adds	r7, #48	@ 0x30
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b083      	sub	sp, #12
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781a      	ldrb	r2, [r3, #0]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	785a      	ldrb	r2, [r3, #1]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	789a      	ldrb	r2, [r3, #2]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	78da      	ldrb	r2, [r3, #3]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	3304      	adds	r3, #4
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	2b02      	cmp	r3, #2
 800a106:	bf28      	it	cs
 800a108:	2302      	movcs	r3, #2
 800a10a:	b2da      	uxtb	r2, r3
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a110:	683b      	ldr	r3, [r7, #0]
 800a112:	795a      	ldrb	r2, [r3, #5]
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a118:	683b      	ldr	r3, [r7, #0]
 800a11a:	799a      	ldrb	r2, [r3, #6]
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	79da      	ldrb	r2, [r3, #7]
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	7a1a      	ldrb	r2, [r3, #8]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	721a      	strb	r2, [r3, #8]
}
 800a130:	bf00      	nop
 800a132:	370c      	adds	r7, #12
 800a134:	46bd      	mov	sp, r7
 800a136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13a:	4770      	bx	lr

0800a13c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b087      	sub	sp, #28
 800a140:	af00      	add	r7, sp, #0
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	60b9      	str	r1, [r7, #8]
 800a146:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a148:	2300      	movs	r3, #0
 800a14a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	781a      	ldrb	r2, [r3, #0]
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	785a      	ldrb	r2, [r3, #1]
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	789a      	ldrb	r2, [r3, #2]
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	78da      	ldrb	r2, [r3, #3]
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	3304      	adds	r3, #4
 800a170:	781b      	ldrb	r3, [r3, #0]
 800a172:	461a      	mov	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	3305      	adds	r3, #5
 800a178:	781b      	ldrb	r3, [r3, #0]
 800a17a:	021b      	lsls	r3, r3, #8
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	4313      	orrs	r3, r2
 800a180:	b29a      	uxth	r2, r3
 800a182:	68bb      	ldr	r3, [r7, #8]
 800a184:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	799a      	ldrb	r2, [r3, #6]
 800a18a:	68bb      	ldr	r3, [r7, #8]
 800a18c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	889b      	ldrh	r3, [r3, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d009      	beq.n	800a1aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a196:	68bb      	ldr	r3, [r7, #8]
 800a198:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a19a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a19e:	d804      	bhi.n	800a1aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a1a0:	68bb      	ldr	r3, [r7, #8]
 800a1a2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a1a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1a8:	d901      	bls.n	800a1ae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d136      	bne.n	800a226 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	78db      	ldrb	r3, [r3, #3]
 800a1bc:	f003 0303 	and.w	r3, r3, #3
 800a1c0:	2b02      	cmp	r3, #2
 800a1c2:	d108      	bne.n	800a1d6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a1c4:	68bb      	ldr	r3, [r7, #8]
 800a1c6:	889b      	ldrh	r3, [r3, #4]
 800a1c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1cc:	f240 8097 	bls.w	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a1d0:	2303      	movs	r3, #3
 800a1d2:	75fb      	strb	r3, [r7, #23]
 800a1d4:	e093      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a1d6:	68bb      	ldr	r3, [r7, #8]
 800a1d8:	78db      	ldrb	r3, [r3, #3]
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d107      	bne.n	800a1f2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	889b      	ldrh	r3, [r3, #4]
 800a1e6:	2b40      	cmp	r3, #64	@ 0x40
 800a1e8:	f240 8089 	bls.w	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a1ec:	2303      	movs	r3, #3
 800a1ee:	75fb      	strb	r3, [r7, #23]
 800a1f0:	e085      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	78db      	ldrb	r3, [r3, #3]
 800a1f6:	f003 0303 	and.w	r3, r3, #3
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d005      	beq.n	800a20a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	78db      	ldrb	r3, [r3, #3]
 800a202:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a206:	2b03      	cmp	r3, #3
 800a208:	d10a      	bne.n	800a220 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	799b      	ldrb	r3, [r3, #6]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d003      	beq.n	800a21a <USBH_ParseEPDesc+0xde>
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	799b      	ldrb	r3, [r3, #6]
 800a216:	2b10      	cmp	r3, #16
 800a218:	d970      	bls.n	800a2fc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a21a:	2303      	movs	r3, #3
 800a21c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a21e:	e06d      	b.n	800a2fc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a220:	2303      	movs	r3, #3
 800a222:	75fb      	strb	r3, [r7, #23]
 800a224:	e06b      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a22c:	2b01      	cmp	r3, #1
 800a22e:	d13c      	bne.n	800a2aa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	78db      	ldrb	r3, [r3, #3]
 800a234:	f003 0303 	and.w	r3, r3, #3
 800a238:	2b02      	cmp	r3, #2
 800a23a:	d005      	beq.n	800a248 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	78db      	ldrb	r3, [r3, #3]
 800a240:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a244:	2b00      	cmp	r3, #0
 800a246:	d106      	bne.n	800a256 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	889b      	ldrh	r3, [r3, #4]
 800a24c:	2b40      	cmp	r3, #64	@ 0x40
 800a24e:	d956      	bls.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a250:	2303      	movs	r3, #3
 800a252:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a254:	e053      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	78db      	ldrb	r3, [r3, #3]
 800a25a:	f003 0303 	and.w	r3, r3, #3
 800a25e:	2b01      	cmp	r3, #1
 800a260:	d10e      	bne.n	800a280 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	799b      	ldrb	r3, [r3, #6]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d007      	beq.n	800a27a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a26e:	2b10      	cmp	r3, #16
 800a270:	d803      	bhi.n	800a27a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a276:	2b40      	cmp	r3, #64	@ 0x40
 800a278:	d941      	bls.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a27a:	2303      	movs	r3, #3
 800a27c:	75fb      	strb	r3, [r7, #23]
 800a27e:	e03e      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a280:	68bb      	ldr	r3, [r7, #8]
 800a282:	78db      	ldrb	r3, [r3, #3]
 800a284:	f003 0303 	and.w	r3, r3, #3
 800a288:	2b03      	cmp	r3, #3
 800a28a:	d10b      	bne.n	800a2a4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a28c:	68bb      	ldr	r3, [r7, #8]
 800a28e:	799b      	ldrb	r3, [r3, #6]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d004      	beq.n	800a29e <USBH_ParseEPDesc+0x162>
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	889b      	ldrh	r3, [r3, #4]
 800a298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a29c:	d32f      	bcc.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a29e:	2303      	movs	r3, #3
 800a2a0:	75fb      	strb	r3, [r7, #23]
 800a2a2:	e02c      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a2a4:	2303      	movs	r3, #3
 800a2a6:	75fb      	strb	r3, [r7, #23]
 800a2a8:	e029      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2b0:	2b02      	cmp	r3, #2
 800a2b2:	d120      	bne.n	800a2f6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	78db      	ldrb	r3, [r3, #3]
 800a2b8:	f003 0303 	and.w	r3, r3, #3
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d106      	bne.n	800a2ce <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	889b      	ldrh	r3, [r3, #4]
 800a2c4:	2b08      	cmp	r3, #8
 800a2c6:	d01a      	beq.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	75fb      	strb	r3, [r7, #23]
 800a2cc:	e017      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a2ce:	68bb      	ldr	r3, [r7, #8]
 800a2d0:	78db      	ldrb	r3, [r3, #3]
 800a2d2:	f003 0303 	and.w	r3, r3, #3
 800a2d6:	2b03      	cmp	r3, #3
 800a2d8:	d10a      	bne.n	800a2f0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	799b      	ldrb	r3, [r3, #6]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d003      	beq.n	800a2ea <USBH_ParseEPDesc+0x1ae>
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	889b      	ldrh	r3, [r3, #4]
 800a2e6:	2b08      	cmp	r3, #8
 800a2e8:	d909      	bls.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	75fb      	strb	r3, [r7, #23]
 800a2ee:	e006      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	75fb      	strb	r3, [r7, #23]
 800a2f4:	e003      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a2f6:	2303      	movs	r3, #3
 800a2f8:	75fb      	strb	r3, [r7, #23]
 800a2fa:	e000      	b.n	800a2fe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a2fc:	bf00      	nop
  }

  return status;
 800a2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800a300:	4618      	mov	r0, r3
 800a302:	371c      	adds	r7, #28
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b087      	sub	sp, #28
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	4613      	mov	r3, r2
 800a318:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	3301      	adds	r3, #1
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b03      	cmp	r3, #3
 800a322:	d120      	bne.n	800a366 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	1e9a      	subs	r2, r3, #2
 800a32a:	88fb      	ldrh	r3, [r7, #6]
 800a32c:	4293      	cmp	r3, r2
 800a32e:	bf28      	it	cs
 800a330:	4613      	movcs	r3, r2
 800a332:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3302      	adds	r3, #2
 800a338:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a33a:	2300      	movs	r3, #0
 800a33c:	82fb      	strh	r3, [r7, #22]
 800a33e:	e00b      	b.n	800a358 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a340:	8afb      	ldrh	r3, [r7, #22]
 800a342:	68fa      	ldr	r2, [r7, #12]
 800a344:	4413      	add	r3, r2
 800a346:	781a      	ldrb	r2, [r3, #0]
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	3301      	adds	r3, #1
 800a350:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a352:	8afb      	ldrh	r3, [r7, #22]
 800a354:	3302      	adds	r3, #2
 800a356:	82fb      	strh	r3, [r7, #22]
 800a358:	8afa      	ldrh	r2, [r7, #22]
 800a35a:	8abb      	ldrh	r3, [r7, #20]
 800a35c:	429a      	cmp	r2, r3
 800a35e:	d3ef      	bcc.n	800a340 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	2200      	movs	r2, #0
 800a364:	701a      	strb	r2, [r3, #0]
  }
}
 800a366:	bf00      	nop
 800a368:	371c      	adds	r7, #28
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a372:	b480      	push	{r7}
 800a374:	b085      	sub	sp, #20
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	881b      	ldrh	r3, [r3, #0]
 800a380:	687a      	ldr	r2, [r7, #4]
 800a382:	7812      	ldrb	r2, [r2, #0]
 800a384:	4413      	add	r3, r2
 800a386:	b29a      	uxth	r2, r3
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	781b      	ldrb	r3, [r3, #0]
 800a390:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	4413      	add	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a398:	68fb      	ldr	r3, [r7, #12]
}
 800a39a:	4618      	mov	r0, r3
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a3a6:	b580      	push	{r7, lr}
 800a3a8:	b086      	sub	sp, #24
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	60f8      	str	r0, [r7, #12]
 800a3ae:	60b9      	str	r1, [r7, #8]
 800a3b0:	4613      	mov	r3, r2
 800a3b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	789b      	ldrb	r3, [r3, #2]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d002      	beq.n	800a3c6 <USBH_CtlReq+0x20>
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d00f      	beq.n	800a3e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a3c4:	e027      	b.n	800a416 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	68ba      	ldr	r2, [r7, #8]
 800a3ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	88fa      	ldrh	r2, [r7, #6]
 800a3d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	2202      	movs	r2, #2
 800a3dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	75fb      	strb	r3, [r7, #23]
      break;
 800a3e2:	e018      	b.n	800a416 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a3e4:	68f8      	ldr	r0, [r7, #12]
 800a3e6:	f000 f81b 	bl	800a420 <USBH_HandleControl>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a3ee:	7dfb      	ldrb	r3, [r7, #23]
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <USBH_CtlReq+0x54>
 800a3f4:	7dfb      	ldrb	r3, [r7, #23]
 800a3f6:	2b03      	cmp	r3, #3
 800a3f8:	d106      	bne.n	800a408 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	2201      	movs	r2, #1
 800a3fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	2200      	movs	r2, #0
 800a404:	761a      	strb	r2, [r3, #24]
      break;
 800a406:	e005      	b.n	800a414 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a408:	7dfb      	ldrb	r3, [r7, #23]
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d102      	bne.n	800a414 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2201      	movs	r2, #1
 800a412:	709a      	strb	r2, [r3, #2]
      break;
 800a414:	bf00      	nop
  }
  return status;
 800a416:	7dfb      	ldrb	r3, [r7, #23]
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3718      	adds	r7, #24
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b086      	sub	sp, #24
 800a424:	af02      	add	r7, sp, #8
 800a426:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a428:	2301      	movs	r3, #1
 800a42a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a42c:	2300      	movs	r3, #0
 800a42e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	7e1b      	ldrb	r3, [r3, #24]
 800a434:	3b01      	subs	r3, #1
 800a436:	2b0a      	cmp	r3, #10
 800a438:	f200 8156 	bhi.w	800a6e8 <USBH_HandleControl+0x2c8>
 800a43c:	a201      	add	r2, pc, #4	@ (adr r2, 800a444 <USBH_HandleControl+0x24>)
 800a43e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a442:	bf00      	nop
 800a444:	0800a471 	.word	0x0800a471
 800a448:	0800a48b 	.word	0x0800a48b
 800a44c:	0800a4f5 	.word	0x0800a4f5
 800a450:	0800a51b 	.word	0x0800a51b
 800a454:	0800a553 	.word	0x0800a553
 800a458:	0800a57d 	.word	0x0800a57d
 800a45c:	0800a5cf 	.word	0x0800a5cf
 800a460:	0800a5f1 	.word	0x0800a5f1
 800a464:	0800a62d 	.word	0x0800a62d
 800a468:	0800a653 	.word	0x0800a653
 800a46c:	0800a691 	.word	0x0800a691
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f103 0110 	add.w	r1, r3, #16
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	795b      	ldrb	r3, [r3, #5]
 800a47a:	461a      	mov	r2, r3
 800a47c:	6878      	ldr	r0, [r7, #4]
 800a47e:	f000 f943 	bl	800a708 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2202      	movs	r2, #2
 800a486:	761a      	strb	r2, [r3, #24]
      break;
 800a488:	e139      	b.n	800a6fe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	795b      	ldrb	r3, [r3, #5]
 800a48e:	4619      	mov	r1, r3
 800a490:	6878      	ldr	r0, [r7, #4]
 800a492:	f000 fcc5 	bl	800ae20 <USBH_LL_GetURBState>
 800a496:	4603      	mov	r3, r0
 800a498:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a49a:	7bbb      	ldrb	r3, [r7, #14]
 800a49c:	2b01      	cmp	r3, #1
 800a49e:	d11e      	bne.n	800a4de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	7c1b      	ldrb	r3, [r3, #16]
 800a4a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a4a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	8adb      	ldrh	r3, [r3, #22]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00a      	beq.n	800a4c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a4b2:	7b7b      	ldrb	r3, [r7, #13]
 800a4b4:	2b80      	cmp	r3, #128	@ 0x80
 800a4b6:	d103      	bne.n	800a4c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2203      	movs	r2, #3
 800a4bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a4be:	e115      	b.n	800a6ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2205      	movs	r2, #5
 800a4c4:	761a      	strb	r2, [r3, #24]
      break;
 800a4c6:	e111      	b.n	800a6ec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a4c8:	7b7b      	ldrb	r3, [r7, #13]
 800a4ca:	2b80      	cmp	r3, #128	@ 0x80
 800a4cc:	d103      	bne.n	800a4d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2209      	movs	r2, #9
 800a4d2:	761a      	strb	r2, [r3, #24]
      break;
 800a4d4:	e10a      	b.n	800a6ec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2207      	movs	r2, #7
 800a4da:	761a      	strb	r2, [r3, #24]
      break;
 800a4dc:	e106      	b.n	800a6ec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a4de:	7bbb      	ldrb	r3, [r7, #14]
 800a4e0:	2b04      	cmp	r3, #4
 800a4e2:	d003      	beq.n	800a4ec <USBH_HandleControl+0xcc>
 800a4e4:	7bbb      	ldrb	r3, [r7, #14]
 800a4e6:	2b02      	cmp	r3, #2
 800a4e8:	f040 8100 	bne.w	800a6ec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	220b      	movs	r2, #11
 800a4f0:	761a      	strb	r2, [r3, #24]
      break;
 800a4f2:	e0fb      	b.n	800a6ec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a4fa:	b29a      	uxth	r2, r3
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	6899      	ldr	r1, [r3, #8]
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	899a      	ldrh	r2, [r3, #12]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	791b      	ldrb	r3, [r3, #4]
 800a50c:	6878      	ldr	r0, [r7, #4]
 800a50e:	f000 f93a 	bl	800a786 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2204      	movs	r2, #4
 800a516:	761a      	strb	r2, [r3, #24]
      break;
 800a518:	e0f1      	b.n	800a6fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	791b      	ldrb	r3, [r3, #4]
 800a51e:	4619      	mov	r1, r3
 800a520:	6878      	ldr	r0, [r7, #4]
 800a522:	f000 fc7d 	bl	800ae20 <USBH_LL_GetURBState>
 800a526:	4603      	mov	r3, r0
 800a528:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a52a:	7bbb      	ldrb	r3, [r7, #14]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d102      	bne.n	800a536 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2209      	movs	r2, #9
 800a534:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a536:	7bbb      	ldrb	r3, [r7, #14]
 800a538:	2b05      	cmp	r3, #5
 800a53a:	d102      	bne.n	800a542 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a53c:	2303      	movs	r3, #3
 800a53e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a540:	e0d6      	b.n	800a6f0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a542:	7bbb      	ldrb	r3, [r7, #14]
 800a544:	2b04      	cmp	r3, #4
 800a546:	f040 80d3 	bne.w	800a6f0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	220b      	movs	r2, #11
 800a54e:	761a      	strb	r2, [r3, #24]
      break;
 800a550:	e0ce      	b.n	800a6f0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6899      	ldr	r1, [r3, #8]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	899a      	ldrh	r2, [r3, #12]
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	795b      	ldrb	r3, [r3, #5]
 800a55e:	2001      	movs	r0, #1
 800a560:	9000      	str	r0, [sp, #0]
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	f000 f8ea 	bl	800a73c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a56e:	b29a      	uxth	r2, r3
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2206      	movs	r2, #6
 800a578:	761a      	strb	r2, [r3, #24]
      break;
 800a57a:	e0c0      	b.n	800a6fe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	795b      	ldrb	r3, [r3, #5]
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f000 fc4c 	bl	800ae20 <USBH_LL_GetURBState>
 800a588:	4603      	mov	r3, r0
 800a58a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a58c:	7bbb      	ldrb	r3, [r7, #14]
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d103      	bne.n	800a59a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2207      	movs	r2, #7
 800a596:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a598:	e0ac      	b.n	800a6f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a59a:	7bbb      	ldrb	r3, [r7, #14]
 800a59c:	2b05      	cmp	r3, #5
 800a59e:	d105      	bne.n	800a5ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	220c      	movs	r2, #12
 800a5a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a5a6:	2303      	movs	r3, #3
 800a5a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a5aa:	e0a3      	b.n	800a6f4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5ac:	7bbb      	ldrb	r3, [r7, #14]
 800a5ae:	2b02      	cmp	r3, #2
 800a5b0:	d103      	bne.n	800a5ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	2205      	movs	r2, #5
 800a5b6:	761a      	strb	r2, [r3, #24]
      break;
 800a5b8:	e09c      	b.n	800a6f4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a5ba:	7bbb      	ldrb	r3, [r7, #14]
 800a5bc:	2b04      	cmp	r3, #4
 800a5be:	f040 8099 	bne.w	800a6f4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	220b      	movs	r2, #11
 800a5c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a5c8:	2302      	movs	r3, #2
 800a5ca:	73fb      	strb	r3, [r7, #15]
      break;
 800a5cc:	e092      	b.n	800a6f4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	791b      	ldrb	r3, [r3, #4]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	2100      	movs	r1, #0
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f000 f8d5 	bl	800a786 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a5e2:	b29a      	uxth	r2, r3
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2208      	movs	r2, #8
 800a5ec:	761a      	strb	r2, [r3, #24]

      break;
 800a5ee:	e086      	b.n	800a6fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	791b      	ldrb	r3, [r3, #4]
 800a5f4:	4619      	mov	r1, r3
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f000 fc12 	bl	800ae20 <USBH_LL_GetURBState>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a600:	7bbb      	ldrb	r3, [r7, #14]
 800a602:	2b01      	cmp	r3, #1
 800a604:	d105      	bne.n	800a612 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	220d      	movs	r2, #13
 800a60a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a610:	e072      	b.n	800a6f8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a612:	7bbb      	ldrb	r3, [r7, #14]
 800a614:	2b04      	cmp	r3, #4
 800a616:	d103      	bne.n	800a620 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	220b      	movs	r2, #11
 800a61c:	761a      	strb	r2, [r3, #24]
      break;
 800a61e:	e06b      	b.n	800a6f8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a620:	7bbb      	ldrb	r3, [r7, #14]
 800a622:	2b05      	cmp	r3, #5
 800a624:	d168      	bne.n	800a6f8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a626:	2303      	movs	r3, #3
 800a628:	73fb      	strb	r3, [r7, #15]
      break;
 800a62a:	e065      	b.n	800a6f8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	795b      	ldrb	r3, [r3, #5]
 800a630:	2201      	movs	r2, #1
 800a632:	9200      	str	r2, [sp, #0]
 800a634:	2200      	movs	r2, #0
 800a636:	2100      	movs	r1, #0
 800a638:	6878      	ldr	r0, [r7, #4]
 800a63a:	f000 f87f 	bl	800a73c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a644:	b29a      	uxth	r2, r3
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	220a      	movs	r2, #10
 800a64e:	761a      	strb	r2, [r3, #24]
      break;
 800a650:	e055      	b.n	800a6fe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	795b      	ldrb	r3, [r3, #5]
 800a656:	4619      	mov	r1, r3
 800a658:	6878      	ldr	r0, [r7, #4]
 800a65a:	f000 fbe1 	bl	800ae20 <USBH_LL_GetURBState>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	2b01      	cmp	r3, #1
 800a666:	d105      	bne.n	800a674 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a668:	2300      	movs	r3, #0
 800a66a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	220d      	movs	r2, #13
 800a670:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a672:	e043      	b.n	800a6fc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	2b02      	cmp	r3, #2
 800a678:	d103      	bne.n	800a682 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2209      	movs	r2, #9
 800a67e:	761a      	strb	r2, [r3, #24]
      break;
 800a680:	e03c      	b.n	800a6fc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	2b04      	cmp	r3, #4
 800a686:	d139      	bne.n	800a6fc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	220b      	movs	r2, #11
 800a68c:	761a      	strb	r2, [r3, #24]
      break;
 800a68e:	e035      	b.n	800a6fc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	7e5b      	ldrb	r3, [r3, #25]
 800a694:	3301      	adds	r3, #1
 800a696:	b2da      	uxtb	r2, r3
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	765a      	strb	r2, [r3, #25]
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7e5b      	ldrb	r3, [r3, #25]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	d806      	bhi.n	800a6b2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a6b0:	e025      	b.n	800a6fe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a6b8:	2106      	movs	r1, #6
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	795b      	ldrb	r3, [r3, #5]
 800a6c8:	4619      	mov	r1, r3
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f90c 	bl	800a8e8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	791b      	ldrb	r3, [r3, #4]
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	f000 f906 	bl	800a8e8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a6e2:	2302      	movs	r3, #2
 800a6e4:	73fb      	strb	r3, [r7, #15]
      break;
 800a6e6:	e00a      	b.n	800a6fe <USBH_HandleControl+0x2de>

    default:
      break;
 800a6e8:	bf00      	nop
 800a6ea:	e008      	b.n	800a6fe <USBH_HandleControl+0x2de>
      break;
 800a6ec:	bf00      	nop
 800a6ee:	e006      	b.n	800a6fe <USBH_HandleControl+0x2de>
      break;
 800a6f0:	bf00      	nop
 800a6f2:	e004      	b.n	800a6fe <USBH_HandleControl+0x2de>
      break;
 800a6f4:	bf00      	nop
 800a6f6:	e002      	b.n	800a6fe <USBH_HandleControl+0x2de>
      break;
 800a6f8:	bf00      	nop
 800a6fa:	e000      	b.n	800a6fe <USBH_HandleControl+0x2de>
      break;
 800a6fc:	bf00      	nop
  }

  return status;
 800a6fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a700:	4618      	mov	r0, r3
 800a702:	3710      	adds	r7, #16
 800a704:	46bd      	mov	sp, r7
 800a706:	bd80      	pop	{r7, pc}

0800a708 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af04      	add	r7, sp, #16
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	60b9      	str	r1, [r7, #8]
 800a712:	4613      	mov	r3, r2
 800a714:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a716:	79f9      	ldrb	r1, [r7, #7]
 800a718:	2300      	movs	r3, #0
 800a71a:	9303      	str	r3, [sp, #12]
 800a71c:	2308      	movs	r3, #8
 800a71e:	9302      	str	r3, [sp, #8]
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	9301      	str	r3, [sp, #4]
 800a724:	2300      	movs	r3, #0
 800a726:	9300      	str	r3, [sp, #0]
 800a728:	2300      	movs	r3, #0
 800a72a:	2200      	movs	r2, #0
 800a72c:	68f8      	ldr	r0, [r7, #12]
 800a72e:	f000 fb46 	bl	800adbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a732:	2300      	movs	r3, #0
}
 800a734:	4618      	mov	r0, r3
 800a736:	3710      	adds	r7, #16
 800a738:	46bd      	mov	sp, r7
 800a73a:	bd80      	pop	{r7, pc}

0800a73c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b088      	sub	sp, #32
 800a740:	af04      	add	r7, sp, #16
 800a742:	60f8      	str	r0, [r7, #12]
 800a744:	60b9      	str	r1, [r7, #8]
 800a746:	4611      	mov	r1, r2
 800a748:	461a      	mov	r2, r3
 800a74a:	460b      	mov	r3, r1
 800a74c:	80fb      	strh	r3, [r7, #6]
 800a74e:	4613      	mov	r3, r2
 800a750:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d001      	beq.n	800a760 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a75c:	2300      	movs	r3, #0
 800a75e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a760:	7979      	ldrb	r1, [r7, #5]
 800a762:	7e3b      	ldrb	r3, [r7, #24]
 800a764:	9303      	str	r3, [sp, #12]
 800a766:	88fb      	ldrh	r3, [r7, #6]
 800a768:	9302      	str	r3, [sp, #8]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	9301      	str	r3, [sp, #4]
 800a76e:	2301      	movs	r3, #1
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	2300      	movs	r3, #0
 800a774:	2200      	movs	r2, #0
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 fb21 	bl	800adbe <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a77c:	2300      	movs	r3, #0
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3710      	adds	r7, #16
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b088      	sub	sp, #32
 800a78a:	af04      	add	r7, sp, #16
 800a78c:	60f8      	str	r0, [r7, #12]
 800a78e:	60b9      	str	r1, [r7, #8]
 800a790:	4611      	mov	r1, r2
 800a792:	461a      	mov	r2, r3
 800a794:	460b      	mov	r3, r1
 800a796:	80fb      	strh	r3, [r7, #6]
 800a798:	4613      	mov	r3, r2
 800a79a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a79c:	7979      	ldrb	r1, [r7, #5]
 800a79e:	2300      	movs	r3, #0
 800a7a0:	9303      	str	r3, [sp, #12]
 800a7a2:	88fb      	ldrh	r3, [r7, #6]
 800a7a4:	9302      	str	r3, [sp, #8]
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	9301      	str	r3, [sp, #4]
 800a7aa:	2301      	movs	r3, #1
 800a7ac:	9300      	str	r3, [sp, #0]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	68f8      	ldr	r0, [r7, #12]
 800a7b4:	f000 fb03 	bl	800adbe <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a7b8:	2300      	movs	r3, #0

}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3710      	adds	r7, #16
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b088      	sub	sp, #32
 800a7c6:	af04      	add	r7, sp, #16
 800a7c8:	60f8      	str	r0, [r7, #12]
 800a7ca:	60b9      	str	r1, [r7, #8]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	80fb      	strh	r3, [r7, #6]
 800a7d4:	4613      	mov	r3, r2
 800a7d6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d001      	beq.n	800a7e6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a7e6:	7979      	ldrb	r1, [r7, #5]
 800a7e8:	7e3b      	ldrb	r3, [r7, #24]
 800a7ea:	9303      	str	r3, [sp, #12]
 800a7ec:	88fb      	ldrh	r3, [r7, #6]
 800a7ee:	9302      	str	r3, [sp, #8]
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	9301      	str	r3, [sp, #4]
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	9300      	str	r3, [sp, #0]
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	f000 fade 	bl	800adbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a802:	2300      	movs	r3, #0
}
 800a804:	4618      	mov	r0, r3
 800a806:	3710      	adds	r7, #16
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b088      	sub	sp, #32
 800a810:	af04      	add	r7, sp, #16
 800a812:	60f8      	str	r0, [r7, #12]
 800a814:	60b9      	str	r1, [r7, #8]
 800a816:	4611      	mov	r1, r2
 800a818:	461a      	mov	r2, r3
 800a81a:	460b      	mov	r3, r1
 800a81c:	80fb      	strh	r3, [r7, #6]
 800a81e:	4613      	mov	r3, r2
 800a820:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a822:	7979      	ldrb	r1, [r7, #5]
 800a824:	2300      	movs	r3, #0
 800a826:	9303      	str	r3, [sp, #12]
 800a828:	88fb      	ldrh	r3, [r7, #6]
 800a82a:	9302      	str	r3, [sp, #8]
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	9301      	str	r3, [sp, #4]
 800a830:	2301      	movs	r3, #1
 800a832:	9300      	str	r3, [sp, #0]
 800a834:	2302      	movs	r3, #2
 800a836:	2201      	movs	r2, #1
 800a838:	68f8      	ldr	r0, [r7, #12]
 800a83a:	f000 fac0 	bl	800adbe <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a83e:	2300      	movs	r3, #0
}
 800a840:	4618      	mov	r0, r3
 800a842:	3710      	adds	r7, #16
 800a844:	46bd      	mov	sp, r7
 800a846:	bd80      	pop	{r7, pc}

0800a848 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af04      	add	r7, sp, #16
 800a84e:	6078      	str	r0, [r7, #4]
 800a850:	4608      	mov	r0, r1
 800a852:	4611      	mov	r1, r2
 800a854:	461a      	mov	r2, r3
 800a856:	4603      	mov	r3, r0
 800a858:	70fb      	strb	r3, [r7, #3]
 800a85a:	460b      	mov	r3, r1
 800a85c:	70bb      	strb	r3, [r7, #2]
 800a85e:	4613      	mov	r3, r2
 800a860:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a862:	7878      	ldrb	r0, [r7, #1]
 800a864:	78ba      	ldrb	r2, [r7, #2]
 800a866:	78f9      	ldrb	r1, [r7, #3]
 800a868:	8b3b      	ldrh	r3, [r7, #24]
 800a86a:	9302      	str	r3, [sp, #8]
 800a86c:	7d3b      	ldrb	r3, [r7, #20]
 800a86e:	9301      	str	r3, [sp, #4]
 800a870:	7c3b      	ldrb	r3, [r7, #16]
 800a872:	9300      	str	r3, [sp, #0]
 800a874:	4603      	mov	r3, r0
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fa53 	bl	800ad22 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a886:	b580      	push	{r7, lr}
 800a888:	b082      	sub	sp, #8
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
 800a88e:	460b      	mov	r3, r1
 800a890:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a892:	78fb      	ldrb	r3, [r7, #3]
 800a894:	4619      	mov	r1, r3
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	f000 fa72 	bl	800ad80 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3708      	adds	r7, #8
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a8a6:	b580      	push	{r7, lr}
 800a8a8:	b084      	sub	sp, #16
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
 800a8ae:	460b      	mov	r3, r1
 800a8b0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a8b2:	6878      	ldr	r0, [r7, #4]
 800a8b4:	f000 f836 	bl	800a924 <USBH_GetFreePipe>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a8bc:	89fb      	ldrh	r3, [r7, #14]
 800a8be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d00a      	beq.n	800a8dc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a8c6:	78fa      	ldrb	r2, [r7, #3]
 800a8c8:	89fb      	ldrh	r3, [r7, #14]
 800a8ca:	f003 030f 	and.w	r3, r3, #15
 800a8ce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a8d2:	6879      	ldr	r1, [r7, #4]
 800a8d4:	33e0      	adds	r3, #224	@ 0xe0
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	440b      	add	r3, r1
 800a8da:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a8dc:	89fb      	ldrh	r3, [r7, #14]
 800a8de:	b2db      	uxtb	r3, r3
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3710      	adds	r7, #16
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bd80      	pop	{r7, pc}

0800a8e8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b083      	sub	sp, #12
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	460b      	mov	r3, r1
 800a8f2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a8f4:	78fb      	ldrb	r3, [r7, #3]
 800a8f6:	2b0f      	cmp	r3, #15
 800a8f8:	d80d      	bhi.n	800a916 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a8fa:	78fb      	ldrb	r3, [r7, #3]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	33e0      	adds	r3, #224	@ 0xe0
 800a900:	009b      	lsls	r3, r3, #2
 800a902:	4413      	add	r3, r2
 800a904:	685a      	ldr	r2, [r3, #4]
 800a906:	78fb      	ldrb	r3, [r7, #3]
 800a908:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a90c:	6879      	ldr	r1, [r7, #4]
 800a90e:	33e0      	adds	r3, #224	@ 0xe0
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	440b      	add	r3, r1
 800a914:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	370c      	adds	r7, #12
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a930:	2300      	movs	r3, #0
 800a932:	73fb      	strb	r3, [r7, #15]
 800a934:	e00f      	b.n	800a956 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a936:	7bfb      	ldrb	r3, [r7, #15]
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	33e0      	adds	r3, #224	@ 0xe0
 800a93c:	009b      	lsls	r3, r3, #2
 800a93e:	4413      	add	r3, r2
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a946:	2b00      	cmp	r3, #0
 800a948:	d102      	bne.n	800a950 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a94a:	7bfb      	ldrb	r3, [r7, #15]
 800a94c:	b29b      	uxth	r3, r3
 800a94e:	e007      	b.n	800a960 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	3301      	adds	r3, #1
 800a954:	73fb      	strb	r3, [r7, #15]
 800a956:	7bfb      	ldrb	r3, [r7, #15]
 800a958:	2b0f      	cmp	r3, #15
 800a95a:	d9ec      	bls.n	800a936 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a95c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a960:	4618      	mov	r0, r3
 800a962:	3714      	adds	r7, #20
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a970:	2201      	movs	r2, #1
 800a972:	490e      	ldr	r1, [pc, #56]	@ (800a9ac <MX_USB_HOST_Init+0x40>)
 800a974:	480e      	ldr	r0, [pc, #56]	@ (800a9b0 <MX_USB_HOST_Init+0x44>)
 800a976:	f7fe fb15 	bl	8008fa4 <USBH_Init>
 800a97a:	4603      	mov	r3, r0
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d001      	beq.n	800a984 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a980:	f7f6 ff2e 	bl	80017e0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a984:	490b      	ldr	r1, [pc, #44]	@ (800a9b4 <MX_USB_HOST_Init+0x48>)
 800a986:	480a      	ldr	r0, [pc, #40]	@ (800a9b0 <MX_USB_HOST_Init+0x44>)
 800a988:	f7fe fbb9 	bl	80090fe <USBH_RegisterClass>
 800a98c:	4603      	mov	r3, r0
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d001      	beq.n	800a996 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a992:	f7f6 ff25 	bl	80017e0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a996:	4806      	ldr	r0, [pc, #24]	@ (800a9b0 <MX_USB_HOST_Init+0x44>)
 800a998:	f7fe fc3d 	bl	8009216 <USBH_Start>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d001      	beq.n	800a9a6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a9a2:	f7f6 ff1d 	bl	80017e0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a9a6:	bf00      	nop
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	0800a9cd 	.word	0x0800a9cd
 800a9b0:	200001f8 	.word	0x200001f8
 800a9b4:	2000000c 	.word	0x2000000c

0800a9b8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a9bc:	4802      	ldr	r0, [pc, #8]	@ (800a9c8 <MX_USB_HOST_Process+0x10>)
 800a9be:	f7fe fc3b 	bl	8009238 <USBH_Process>
}
 800a9c2:	bf00      	nop
 800a9c4:	bd80      	pop	{r7, pc}
 800a9c6:	bf00      	nop
 800a9c8:	200001f8 	.word	0x200001f8

0800a9cc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a9cc:	b480      	push	{r7}
 800a9ce:	b083      	sub	sp, #12
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
 800a9d4:	460b      	mov	r3, r1
 800a9d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a9d8:	78fb      	ldrb	r3, [r7, #3]
 800a9da:	3b01      	subs	r3, #1
 800a9dc:	2b04      	cmp	r3, #4
 800a9de:	d819      	bhi.n	800aa14 <USBH_UserProcess+0x48>
 800a9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e8 <USBH_UserProcess+0x1c>)
 800a9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e6:	bf00      	nop
 800a9e8:	0800aa15 	.word	0x0800aa15
 800a9ec:	0800aa05 	.word	0x0800aa05
 800a9f0:	0800aa15 	.word	0x0800aa15
 800a9f4:	0800aa0d 	.word	0x0800aa0d
 800a9f8:	0800a9fd 	.word	0x0800a9fd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a9fc:	4b09      	ldr	r3, [pc, #36]	@ (800aa24 <USBH_UserProcess+0x58>)
 800a9fe:	2203      	movs	r2, #3
 800aa00:	701a      	strb	r2, [r3, #0]
  break;
 800aa02:	e008      	b.n	800aa16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aa04:	4b07      	ldr	r3, [pc, #28]	@ (800aa24 <USBH_UserProcess+0x58>)
 800aa06:	2202      	movs	r2, #2
 800aa08:	701a      	strb	r2, [r3, #0]
  break;
 800aa0a:	e004      	b.n	800aa16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aa0c:	4b05      	ldr	r3, [pc, #20]	@ (800aa24 <USBH_UserProcess+0x58>)
 800aa0e:	2201      	movs	r2, #1
 800aa10:	701a      	strb	r2, [r3, #0]
  break;
 800aa12:	e000      	b.n	800aa16 <USBH_UserProcess+0x4a>

  default:
  break;
 800aa14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aa16:	bf00      	nop
 800aa18:	370c      	adds	r7, #12
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa20:	4770      	bx	lr
 800aa22:	bf00      	nop
 800aa24:	200005d0 	.word	0x200005d0

0800aa28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b08a      	sub	sp, #40	@ 0x28
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa30:	f107 0314 	add.w	r3, r7, #20
 800aa34:	2200      	movs	r2, #0
 800aa36:	601a      	str	r2, [r3, #0]
 800aa38:	605a      	str	r2, [r3, #4]
 800aa3a:	609a      	str	r2, [r3, #8]
 800aa3c:	60da      	str	r2, [r3, #12]
 800aa3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa48:	d147      	bne.n	800aada <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	613b      	str	r3, [r7, #16]
 800aa4e:	4b25      	ldr	r3, [pc, #148]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aa50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa52:	4a24      	ldr	r2, [pc, #144]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aa54:	f043 0301 	orr.w	r3, r3, #1
 800aa58:	6313      	str	r3, [r2, #48]	@ 0x30
 800aa5a:	4b22      	ldr	r3, [pc, #136]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aa5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa5e:	f003 0301 	and.w	r3, r3, #1
 800aa62:	613b      	str	r3, [r7, #16]
 800aa64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800aa66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800aa74:	f107 0314 	add.w	r3, r7, #20
 800aa78:	4619      	mov	r1, r3
 800aa7a:	481b      	ldr	r0, [pc, #108]	@ (800aae8 <HAL_HCD_MspInit+0xc0>)
 800aa7c:	f7f8 f9cc 	bl	8002e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800aa80:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800aa84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa86:	2302      	movs	r3, #2
 800aa88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800aa8e:	2300      	movs	r3, #0
 800aa90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aa92:	230a      	movs	r3, #10
 800aa94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aa96:	f107 0314 	add.w	r3, r7, #20
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4812      	ldr	r0, [pc, #72]	@ (800aae8 <HAL_HCD_MspInit+0xc0>)
 800aa9e:	f7f8 f9bb 	bl	8002e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aaa2:	4b10      	ldr	r3, [pc, #64]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aaa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aaa6:	4a0f      	ldr	r2, [pc, #60]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aaa8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aaac:	6353      	str	r3, [r2, #52]	@ 0x34
 800aaae:	2300      	movs	r3, #0
 800aab0:	60fb      	str	r3, [r7, #12]
 800aab2:	4b0c      	ldr	r3, [pc, #48]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aab4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aab6:	4a0b      	ldr	r2, [pc, #44]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aab8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aabc:	6453      	str	r3, [r2, #68]	@ 0x44
 800aabe:	4b09      	ldr	r3, [pc, #36]	@ (800aae4 <HAL_HCD_MspInit+0xbc>)
 800aac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aac2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aac6:	60fb      	str	r3, [r7, #12]
 800aac8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aaca:	2200      	movs	r2, #0
 800aacc:	2100      	movs	r1, #0
 800aace:	2043      	movs	r0, #67	@ 0x43
 800aad0:	f7f8 f96b 	bl	8002daa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800aad4:	2043      	movs	r0, #67	@ 0x43
 800aad6:	f7f8 f984 	bl	8002de2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800aada:	bf00      	nop
 800aadc:	3728      	adds	r7, #40	@ 0x28
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	40023800 	.word	0x40023800
 800aae8:	40020000 	.word	0x40020000

0800aaec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800aaec:	b580      	push	{r7, lr}
 800aaee:	b082      	sub	sp, #8
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800aafa:	4618      	mov	r0, r3
 800aafc:	f7fe ff73 	bl	80099e6 <USBH_LL_IncTimer>
}
 800ab00:	bf00      	nop
 800ab02:	3708      	adds	r7, #8
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd80      	pop	{r7, pc}

0800ab08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab16:	4618      	mov	r0, r3
 800ab18:	f7fe ffab 	bl	8009a72 <USBH_LL_Connect>
}
 800ab1c:	bf00      	nop
 800ab1e:	3708      	adds	r7, #8
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b082      	sub	sp, #8
 800ab28:	af00      	add	r7, sp, #0
 800ab2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe ffb4 	bl	8009aa0 <USBH_LL_Disconnect>
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
 800ab4c:	4613      	mov	r3, r2
 800ab4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ab50:	bf00      	nop
 800ab52:	370c      	adds	r7, #12
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr

0800ab5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b082      	sub	sp, #8
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7fe ff65 	bl	8009a3a <USBH_LL_PortEnabled>
}
 800ab70:	bf00      	nop
 800ab72:	3708      	adds	r7, #8
 800ab74:	46bd      	mov	sp, r7
 800ab76:	bd80      	pop	{r7, pc}

0800ab78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af00      	add	r7, sp, #0
 800ab7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7fe ff65 	bl	8009a56 <USBH_LL_PortDisabled>
}
 800ab8c:	bf00      	nop
 800ab8e:	3708      	adds	r7, #8
 800ab90:	46bd      	mov	sp, r7
 800ab92:	bd80      	pop	{r7, pc}

0800ab94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	b082      	sub	sp, #8
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800aba2:	2b01      	cmp	r3, #1
 800aba4:	d12a      	bne.n	800abfc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800aba6:	4a18      	ldr	r2, [pc, #96]	@ (800ac08 <USBH_LL_Init+0x74>)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	4a15      	ldr	r2, [pc, #84]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abb2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800abb6:	4b14      	ldr	r3, [pc, #80]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abb8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800abbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800abbe:	4b12      	ldr	r3, [pc, #72]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abc0:	2208      	movs	r2, #8
 800abc2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800abc4:	4b10      	ldr	r3, [pc, #64]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abc6:	2201      	movs	r2, #1
 800abc8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800abca:	4b0f      	ldr	r3, [pc, #60]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abcc:	2200      	movs	r2, #0
 800abce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800abd0:	4b0d      	ldr	r3, [pc, #52]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abd2:	2202      	movs	r2, #2
 800abd4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800abd6:	4b0c      	ldr	r3, [pc, #48]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abd8:	2200      	movs	r2, #0
 800abda:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800abdc:	480a      	ldr	r0, [pc, #40]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abde:	f7f8 fad0 	bl	8003182 <HAL_HCD_Init>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800abe8:	f7f6 fdfa 	bl	80017e0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800abec:	4806      	ldr	r0, [pc, #24]	@ (800ac08 <USBH_LL_Init+0x74>)
 800abee:	f7f8 ff31 	bl	8003a54 <HAL_HCD_GetCurrentFrame>
 800abf2:	4603      	mov	r3, r0
 800abf4:	4619      	mov	r1, r3
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f7fe fee6 	bl	80099c8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800abfc:	2300      	movs	r3, #0
}
 800abfe:	4618      	mov	r0, r3
 800ac00:	3708      	adds	r7, #8
 800ac02:	46bd      	mov	sp, r7
 800ac04:	bd80      	pop	{r7, pc}
 800ac06:	bf00      	nop
 800ac08:	200005d4 	.word	0x200005d4

0800ac0c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac14:	2300      	movs	r3, #0
 800ac16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac22:	4618      	mov	r0, r3
 800ac24:	f7f8 fe9e 	bl	8003964 <HAL_HCD_Start>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f000 f95e 	bl	800aef0 <USBH_Get_USB_Status>
 800ac34:	4603      	mov	r3, r0
 800ac36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}

0800ac42 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800ac42:	b580      	push	{r7, lr}
 800ac44:	b084      	sub	sp, #16
 800ac46:	af00      	add	r7, sp, #0
 800ac48:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f7f8 fea6 	bl	80039aa <HAL_HCD_Stop>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 f943 	bl	800aef0 <USBH_Get_USB_Status>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac6e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	b084      	sub	sp, #16
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800ac80:	2301      	movs	r3, #1
 800ac82:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	f7f8 fef0 	bl	8003a70 <HAL_HCD_GetCurrentSpeed>
 800ac90:	4603      	mov	r3, r0
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d00c      	beq.n	800acb0 <USBH_LL_GetSpeed+0x38>
 800ac96:	2b02      	cmp	r3, #2
 800ac98:	d80d      	bhi.n	800acb6 <USBH_LL_GetSpeed+0x3e>
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <USBH_LL_GetSpeed+0x2c>
 800ac9e:	2b01      	cmp	r3, #1
 800aca0:	d003      	beq.n	800acaa <USBH_LL_GetSpeed+0x32>
 800aca2:	e008      	b.n	800acb6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800aca4:	2300      	movs	r3, #0
 800aca6:	73fb      	strb	r3, [r7, #15]
    break;
 800aca8:	e008      	b.n	800acbc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800acaa:	2301      	movs	r3, #1
 800acac:	73fb      	strb	r3, [r7, #15]
    break;
 800acae:	e005      	b.n	800acbc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800acb0:	2302      	movs	r3, #2
 800acb2:	73fb      	strb	r3, [r7, #15]
    break;
 800acb4:	e002      	b.n	800acbc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800acb6:	2301      	movs	r3, #1
 800acb8:	73fb      	strb	r3, [r7, #15]
    break;
 800acba:	bf00      	nop
  }
  return  speed;
 800acbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	3710      	adds	r7, #16
 800acc2:	46bd      	mov	sp, r7
 800acc4:	bd80      	pop	{r7, pc}

0800acc6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800acc6:	b580      	push	{r7, lr}
 800acc8:	b084      	sub	sp, #16
 800acca:	af00      	add	r7, sp, #0
 800accc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acce:	2300      	movs	r3, #0
 800acd0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800acd2:	2300      	movs	r3, #0
 800acd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800acdc:	4618      	mov	r0, r3
 800acde:	f7f8 fe81 	bl	80039e4 <HAL_HCD_ResetPort>
 800ace2:	4603      	mov	r3, r0
 800ace4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	4618      	mov	r0, r3
 800acea:	f000 f901 	bl	800aef0 <USBH_Get_USB_Status>
 800acee:	4603      	mov	r3, r0
 800acf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800acf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b082      	sub	sp, #8
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	460b      	mov	r3, r1
 800ad06:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad0e:	78fa      	ldrb	r2, [r7, #3]
 800ad10:	4611      	mov	r1, r2
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7f8 fe89 	bl	8003a2a <HAL_HCD_HC_GetXferCount>
 800ad18:	4603      	mov	r3, r0
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3708      	adds	r7, #8
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}

0800ad22 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad22:	b590      	push	{r4, r7, lr}
 800ad24:	b089      	sub	sp, #36	@ 0x24
 800ad26:	af04      	add	r7, sp, #16
 800ad28:	6078      	str	r0, [r7, #4]
 800ad2a:	4608      	mov	r0, r1
 800ad2c:	4611      	mov	r1, r2
 800ad2e:	461a      	mov	r2, r3
 800ad30:	4603      	mov	r3, r0
 800ad32:	70fb      	strb	r3, [r7, #3]
 800ad34:	460b      	mov	r3, r1
 800ad36:	70bb      	strb	r3, [r7, #2]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad40:	2300      	movs	r3, #0
 800ad42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ad4a:	787c      	ldrb	r4, [r7, #1]
 800ad4c:	78ba      	ldrb	r2, [r7, #2]
 800ad4e:	78f9      	ldrb	r1, [r7, #3]
 800ad50:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ad52:	9302      	str	r3, [sp, #8]
 800ad54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad58:	9301      	str	r3, [sp, #4]
 800ad5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ad5e:	9300      	str	r3, [sp, #0]
 800ad60:	4623      	mov	r3, r4
 800ad62:	f7f8 fa75 	bl	8003250 <HAL_HCD_HC_Init>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800ad6a:	7bfb      	ldrb	r3, [r7, #15]
 800ad6c:	4618      	mov	r0, r3
 800ad6e:	f000 f8bf 	bl	800aef0 <USBH_Get_USB_Status>
 800ad72:	4603      	mov	r3, r0
 800ad74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3714      	adds	r7, #20
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd90      	pop	{r4, r7, pc}

0800ad80 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b084      	sub	sp, #16
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
 800ad88:	460b      	mov	r3, r1
 800ad8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ad9a:	78fa      	ldrb	r2, [r7, #3]
 800ad9c:	4611      	mov	r1, r2
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f7f8 fb0e 	bl	80033c0 <HAL_HCD_HC_Halt>
 800ada4:	4603      	mov	r3, r0
 800ada6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ada8:	7bfb      	ldrb	r3, [r7, #15]
 800adaa:	4618      	mov	r0, r3
 800adac:	f000 f8a0 	bl	800aef0 <USBH_Get_USB_Status>
 800adb0:	4603      	mov	r3, r0
 800adb2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb4:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb6:	4618      	mov	r0, r3
 800adb8:	3710      	adds	r7, #16
 800adba:	46bd      	mov	sp, r7
 800adbc:	bd80      	pop	{r7, pc}

0800adbe <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800adbe:	b590      	push	{r4, r7, lr}
 800adc0:	b089      	sub	sp, #36	@ 0x24
 800adc2:	af04      	add	r7, sp, #16
 800adc4:	6078      	str	r0, [r7, #4]
 800adc6:	4608      	mov	r0, r1
 800adc8:	4611      	mov	r1, r2
 800adca:	461a      	mov	r2, r3
 800adcc:	4603      	mov	r3, r0
 800adce:	70fb      	strb	r3, [r7, #3]
 800add0:	460b      	mov	r3, r1
 800add2:	70bb      	strb	r3, [r7, #2]
 800add4:	4613      	mov	r3, r2
 800add6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800addc:	2300      	movs	r3, #0
 800adde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ade6:	787c      	ldrb	r4, [r7, #1]
 800ade8:	78ba      	ldrb	r2, [r7, #2]
 800adea:	78f9      	ldrb	r1, [r7, #3]
 800adec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800adf0:	9303      	str	r3, [sp, #12]
 800adf2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800adf4:	9302      	str	r3, [sp, #8]
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	9301      	str	r3, [sp, #4]
 800adfa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800adfe:	9300      	str	r3, [sp, #0]
 800ae00:	4623      	mov	r3, r4
 800ae02:	f7f8 fb01 	bl	8003408 <HAL_HCD_HC_SubmitRequest>
 800ae06:	4603      	mov	r3, r0
 800ae08:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	f000 f86f 	bl	800aef0 <USBH_Get_USB_Status>
 800ae12:	4603      	mov	r3, r0
 800ae14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae16:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd90      	pop	{r4, r7, pc}

0800ae20 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ae20:	b580      	push	{r7, lr}
 800ae22:	b082      	sub	sp, #8
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
 800ae28:	460b      	mov	r3, r1
 800ae2a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae32:	78fa      	ldrb	r2, [r7, #3]
 800ae34:	4611      	mov	r1, r2
 800ae36:	4618      	mov	r0, r3
 800ae38:	f7f8 fde2 	bl	8003a00 <HAL_HCD_HC_GetURBState>
 800ae3c:	4603      	mov	r3, r0
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	3708      	adds	r7, #8
 800ae42:	46bd      	mov	sp, r7
 800ae44:	bd80      	pop	{r7, pc}

0800ae46 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ae46:	b580      	push	{r7, lr}
 800ae48:	b082      	sub	sp, #8
 800ae4a:	af00      	add	r7, sp, #0
 800ae4c:	6078      	str	r0, [r7, #4]
 800ae4e:	460b      	mov	r3, r1
 800ae50:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d103      	bne.n	800ae64 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800ae5c:	78fb      	ldrb	r3, [r7, #3]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	f000 f872 	bl	800af48 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ae64:	20c8      	movs	r0, #200	@ 0xc8
 800ae66:	f7f7 fea1 	bl	8002bac <HAL_Delay>
  return USBH_OK;
 800ae6a:	2300      	movs	r3, #0
}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b085      	sub	sp, #20
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
 800ae80:	4613      	mov	r3, r2
 800ae82:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ae8a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ae8c:	78fa      	ldrb	r2, [r7, #3]
 800ae8e:	68f9      	ldr	r1, [r7, #12]
 800ae90:	4613      	mov	r3, r2
 800ae92:	011b      	lsls	r3, r3, #4
 800ae94:	1a9b      	subs	r3, r3, r2
 800ae96:	009b      	lsls	r3, r3, #2
 800ae98:	440b      	add	r3, r1
 800ae9a:	3317      	adds	r3, #23
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d00a      	beq.n	800aeb8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800aea2:	78fa      	ldrb	r2, [r7, #3]
 800aea4:	68f9      	ldr	r1, [r7, #12]
 800aea6:	4613      	mov	r3, r2
 800aea8:	011b      	lsls	r3, r3, #4
 800aeaa:	1a9b      	subs	r3, r3, r2
 800aeac:	009b      	lsls	r3, r3, #2
 800aeae:	440b      	add	r3, r1
 800aeb0:	333c      	adds	r3, #60	@ 0x3c
 800aeb2:	78ba      	ldrb	r2, [r7, #2]
 800aeb4:	701a      	strb	r2, [r3, #0]
 800aeb6:	e009      	b.n	800aecc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800aeb8:	78fa      	ldrb	r2, [r7, #3]
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	4613      	mov	r3, r2
 800aebe:	011b      	lsls	r3, r3, #4
 800aec0:	1a9b      	subs	r3, r3, r2
 800aec2:	009b      	lsls	r3, r3, #2
 800aec4:	440b      	add	r3, r1
 800aec6:	333d      	adds	r3, #61	@ 0x3d
 800aec8:	78ba      	ldrb	r2, [r7, #2]
 800aeca:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3714      	adds	r7, #20
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800aeda:	b580      	push	{r7, lr}
 800aedc:	b082      	sub	sp, #8
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f7f7 fe62 	bl	8002bac <HAL_Delay>
}
 800aee8:	bf00      	nop
 800aeea:	3708      	adds	r7, #8
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800aef0:	b480      	push	{r7}
 800aef2:	b085      	sub	sp, #20
 800aef4:	af00      	add	r7, sp, #0
 800aef6:	4603      	mov	r3, r0
 800aef8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800aefa:	2300      	movs	r3, #0
 800aefc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800aefe:	79fb      	ldrb	r3, [r7, #7]
 800af00:	2b03      	cmp	r3, #3
 800af02:	d817      	bhi.n	800af34 <USBH_Get_USB_Status+0x44>
 800af04:	a201      	add	r2, pc, #4	@ (adr r2, 800af0c <USBH_Get_USB_Status+0x1c>)
 800af06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af0a:	bf00      	nop
 800af0c:	0800af1d 	.word	0x0800af1d
 800af10:	0800af23 	.word	0x0800af23
 800af14:	0800af29 	.word	0x0800af29
 800af18:	0800af2f 	.word	0x0800af2f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800af1c:	2300      	movs	r3, #0
 800af1e:	73fb      	strb	r3, [r7, #15]
    break;
 800af20:	e00b      	b.n	800af3a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800af22:	2302      	movs	r3, #2
 800af24:	73fb      	strb	r3, [r7, #15]
    break;
 800af26:	e008      	b.n	800af3a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800af28:	2301      	movs	r3, #1
 800af2a:	73fb      	strb	r3, [r7, #15]
    break;
 800af2c:	e005      	b.n	800af3a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800af2e:	2302      	movs	r3, #2
 800af30:	73fb      	strb	r3, [r7, #15]
    break;
 800af32:	e002      	b.n	800af3a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800af34:	2302      	movs	r3, #2
 800af36:	73fb      	strb	r3, [r7, #15]
    break;
 800af38:	bf00      	nop
  }
  return usb_status;
 800af3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	4603      	mov	r3, r0
 800af50:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800af52:	79fb      	ldrb	r3, [r7, #7]
 800af54:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800af56:	79fb      	ldrb	r3, [r7, #7]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d102      	bne.n	800af62 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800af5c:	2300      	movs	r3, #0
 800af5e:	73fb      	strb	r3, [r7, #15]
 800af60:	e001      	b.n	800af66 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800af62:	2301      	movs	r3, #1
 800af64:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800af66:	7bfb      	ldrb	r3, [r7, #15]
 800af68:	461a      	mov	r2, r3
 800af6a:	2101      	movs	r1, #1
 800af6c:	4803      	ldr	r0, [pc, #12]	@ (800af7c <MX_DriverVbusFS+0x34>)
 800af6e:	f7f8 f8ef 	bl	8003150 <HAL_GPIO_WritePin>
}
 800af72:	bf00      	nop
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	40020800 	.word	0x40020800

0800af80 <__assert_func>:
 800af80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af82:	4614      	mov	r4, r2
 800af84:	461a      	mov	r2, r3
 800af86:	4b09      	ldr	r3, [pc, #36]	@ (800afac <__assert_func+0x2c>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	4605      	mov	r5, r0
 800af8c:	68d8      	ldr	r0, [r3, #12]
 800af8e:	b14c      	cbz	r4, 800afa4 <__assert_func+0x24>
 800af90:	4b07      	ldr	r3, [pc, #28]	@ (800afb0 <__assert_func+0x30>)
 800af92:	9100      	str	r1, [sp, #0]
 800af94:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800af98:	4906      	ldr	r1, [pc, #24]	@ (800afb4 <__assert_func+0x34>)
 800af9a:	462b      	mov	r3, r5
 800af9c:	f000 f970 	bl	800b280 <fiprintf>
 800afa0:	f000 fc3b 	bl	800b81a <abort>
 800afa4:	4b04      	ldr	r3, [pc, #16]	@ (800afb8 <__assert_func+0x38>)
 800afa6:	461c      	mov	r4, r3
 800afa8:	e7f3      	b.n	800af92 <__assert_func+0x12>
 800afaa:	bf00      	nop
 800afac:	20000038 	.word	0x20000038
 800afb0:	0800c78c 	.word	0x0800c78c
 800afb4:	0800c799 	.word	0x0800c799
 800afb8:	0800c7c7 	.word	0x0800c7c7

0800afbc <malloc>:
 800afbc:	4b02      	ldr	r3, [pc, #8]	@ (800afc8 <malloc+0xc>)
 800afbe:	4601      	mov	r1, r0
 800afc0:	6818      	ldr	r0, [r3, #0]
 800afc2:	f000 b82d 	b.w	800b020 <_malloc_r>
 800afc6:	bf00      	nop
 800afc8:	20000038 	.word	0x20000038

0800afcc <free>:
 800afcc:	4b02      	ldr	r3, [pc, #8]	@ (800afd8 <free+0xc>)
 800afce:	4601      	mov	r1, r0
 800afd0:	6818      	ldr	r0, [r3, #0]
 800afd2:	f000 bc29 	b.w	800b828 <_free_r>
 800afd6:	bf00      	nop
 800afd8:	20000038 	.word	0x20000038

0800afdc <sbrk_aligned>:
 800afdc:	b570      	push	{r4, r5, r6, lr}
 800afde:	4e0f      	ldr	r6, [pc, #60]	@ (800b01c <sbrk_aligned+0x40>)
 800afe0:	460c      	mov	r4, r1
 800afe2:	6831      	ldr	r1, [r6, #0]
 800afe4:	4605      	mov	r5, r0
 800afe6:	b911      	cbnz	r1, 800afee <sbrk_aligned+0x12>
 800afe8:	f000 fbba 	bl	800b760 <_sbrk_r>
 800afec:	6030      	str	r0, [r6, #0]
 800afee:	4621      	mov	r1, r4
 800aff0:	4628      	mov	r0, r5
 800aff2:	f000 fbb5 	bl	800b760 <_sbrk_r>
 800aff6:	1c43      	adds	r3, r0, #1
 800aff8:	d103      	bne.n	800b002 <sbrk_aligned+0x26>
 800affa:	f04f 34ff 	mov.w	r4, #4294967295
 800affe:	4620      	mov	r0, r4
 800b000:	bd70      	pop	{r4, r5, r6, pc}
 800b002:	1cc4      	adds	r4, r0, #3
 800b004:	f024 0403 	bic.w	r4, r4, #3
 800b008:	42a0      	cmp	r0, r4
 800b00a:	d0f8      	beq.n	800affe <sbrk_aligned+0x22>
 800b00c:	1a21      	subs	r1, r4, r0
 800b00e:	4628      	mov	r0, r5
 800b010:	f000 fba6 	bl	800b760 <_sbrk_r>
 800b014:	3001      	adds	r0, #1
 800b016:	d1f2      	bne.n	800affe <sbrk_aligned+0x22>
 800b018:	e7ef      	b.n	800affa <sbrk_aligned+0x1e>
 800b01a:	bf00      	nop
 800b01c:	200009b4 	.word	0x200009b4

0800b020 <_malloc_r>:
 800b020:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b024:	1ccd      	adds	r5, r1, #3
 800b026:	f025 0503 	bic.w	r5, r5, #3
 800b02a:	3508      	adds	r5, #8
 800b02c:	2d0c      	cmp	r5, #12
 800b02e:	bf38      	it	cc
 800b030:	250c      	movcc	r5, #12
 800b032:	2d00      	cmp	r5, #0
 800b034:	4606      	mov	r6, r0
 800b036:	db01      	blt.n	800b03c <_malloc_r+0x1c>
 800b038:	42a9      	cmp	r1, r5
 800b03a:	d904      	bls.n	800b046 <_malloc_r+0x26>
 800b03c:	230c      	movs	r3, #12
 800b03e:	6033      	str	r3, [r6, #0]
 800b040:	2000      	movs	r0, #0
 800b042:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b046:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b11c <_malloc_r+0xfc>
 800b04a:	f000 f869 	bl	800b120 <__malloc_lock>
 800b04e:	f8d8 3000 	ldr.w	r3, [r8]
 800b052:	461c      	mov	r4, r3
 800b054:	bb44      	cbnz	r4, 800b0a8 <_malloc_r+0x88>
 800b056:	4629      	mov	r1, r5
 800b058:	4630      	mov	r0, r6
 800b05a:	f7ff ffbf 	bl	800afdc <sbrk_aligned>
 800b05e:	1c43      	adds	r3, r0, #1
 800b060:	4604      	mov	r4, r0
 800b062:	d158      	bne.n	800b116 <_malloc_r+0xf6>
 800b064:	f8d8 4000 	ldr.w	r4, [r8]
 800b068:	4627      	mov	r7, r4
 800b06a:	2f00      	cmp	r7, #0
 800b06c:	d143      	bne.n	800b0f6 <_malloc_r+0xd6>
 800b06e:	2c00      	cmp	r4, #0
 800b070:	d04b      	beq.n	800b10a <_malloc_r+0xea>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	4639      	mov	r1, r7
 800b076:	4630      	mov	r0, r6
 800b078:	eb04 0903 	add.w	r9, r4, r3
 800b07c:	f000 fb70 	bl	800b760 <_sbrk_r>
 800b080:	4581      	cmp	r9, r0
 800b082:	d142      	bne.n	800b10a <_malloc_r+0xea>
 800b084:	6821      	ldr	r1, [r4, #0]
 800b086:	1a6d      	subs	r5, r5, r1
 800b088:	4629      	mov	r1, r5
 800b08a:	4630      	mov	r0, r6
 800b08c:	f7ff ffa6 	bl	800afdc <sbrk_aligned>
 800b090:	3001      	adds	r0, #1
 800b092:	d03a      	beq.n	800b10a <_malloc_r+0xea>
 800b094:	6823      	ldr	r3, [r4, #0]
 800b096:	442b      	add	r3, r5
 800b098:	6023      	str	r3, [r4, #0]
 800b09a:	f8d8 3000 	ldr.w	r3, [r8]
 800b09e:	685a      	ldr	r2, [r3, #4]
 800b0a0:	bb62      	cbnz	r2, 800b0fc <_malloc_r+0xdc>
 800b0a2:	f8c8 7000 	str.w	r7, [r8]
 800b0a6:	e00f      	b.n	800b0c8 <_malloc_r+0xa8>
 800b0a8:	6822      	ldr	r2, [r4, #0]
 800b0aa:	1b52      	subs	r2, r2, r5
 800b0ac:	d420      	bmi.n	800b0f0 <_malloc_r+0xd0>
 800b0ae:	2a0b      	cmp	r2, #11
 800b0b0:	d917      	bls.n	800b0e2 <_malloc_r+0xc2>
 800b0b2:	1961      	adds	r1, r4, r5
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	6025      	str	r5, [r4, #0]
 800b0b8:	bf18      	it	ne
 800b0ba:	6059      	strne	r1, [r3, #4]
 800b0bc:	6863      	ldr	r3, [r4, #4]
 800b0be:	bf08      	it	eq
 800b0c0:	f8c8 1000 	streq.w	r1, [r8]
 800b0c4:	5162      	str	r2, [r4, r5]
 800b0c6:	604b      	str	r3, [r1, #4]
 800b0c8:	4630      	mov	r0, r6
 800b0ca:	f000 f82f 	bl	800b12c <__malloc_unlock>
 800b0ce:	f104 000b 	add.w	r0, r4, #11
 800b0d2:	1d23      	adds	r3, r4, #4
 800b0d4:	f020 0007 	bic.w	r0, r0, #7
 800b0d8:	1ac2      	subs	r2, r0, r3
 800b0da:	bf1c      	itt	ne
 800b0dc:	1a1b      	subne	r3, r3, r0
 800b0de:	50a3      	strne	r3, [r4, r2]
 800b0e0:	e7af      	b.n	800b042 <_malloc_r+0x22>
 800b0e2:	6862      	ldr	r2, [r4, #4]
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	bf0c      	ite	eq
 800b0e8:	f8c8 2000 	streq.w	r2, [r8]
 800b0ec:	605a      	strne	r2, [r3, #4]
 800b0ee:	e7eb      	b.n	800b0c8 <_malloc_r+0xa8>
 800b0f0:	4623      	mov	r3, r4
 800b0f2:	6864      	ldr	r4, [r4, #4]
 800b0f4:	e7ae      	b.n	800b054 <_malloc_r+0x34>
 800b0f6:	463c      	mov	r4, r7
 800b0f8:	687f      	ldr	r7, [r7, #4]
 800b0fa:	e7b6      	b.n	800b06a <_malloc_r+0x4a>
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	42a3      	cmp	r3, r4
 800b102:	d1fb      	bne.n	800b0fc <_malloc_r+0xdc>
 800b104:	2300      	movs	r3, #0
 800b106:	6053      	str	r3, [r2, #4]
 800b108:	e7de      	b.n	800b0c8 <_malloc_r+0xa8>
 800b10a:	230c      	movs	r3, #12
 800b10c:	6033      	str	r3, [r6, #0]
 800b10e:	4630      	mov	r0, r6
 800b110:	f000 f80c 	bl	800b12c <__malloc_unlock>
 800b114:	e794      	b.n	800b040 <_malloc_r+0x20>
 800b116:	6005      	str	r5, [r0, #0]
 800b118:	e7d6      	b.n	800b0c8 <_malloc_r+0xa8>
 800b11a:	bf00      	nop
 800b11c:	200009b8 	.word	0x200009b8

0800b120 <__malloc_lock>:
 800b120:	4801      	ldr	r0, [pc, #4]	@ (800b128 <__malloc_lock+0x8>)
 800b122:	f000 bb6a 	b.w	800b7fa <__retarget_lock_acquire_recursive>
 800b126:	bf00      	nop
 800b128:	20000afc 	.word	0x20000afc

0800b12c <__malloc_unlock>:
 800b12c:	4801      	ldr	r0, [pc, #4]	@ (800b134 <__malloc_unlock+0x8>)
 800b12e:	f000 bb65 	b.w	800b7fc <__retarget_lock_release_recursive>
 800b132:	bf00      	nop
 800b134:	20000afc 	.word	0x20000afc

0800b138 <std>:
 800b138:	2300      	movs	r3, #0
 800b13a:	b510      	push	{r4, lr}
 800b13c:	4604      	mov	r4, r0
 800b13e:	e9c0 3300 	strd	r3, r3, [r0]
 800b142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b146:	6083      	str	r3, [r0, #8]
 800b148:	8181      	strh	r1, [r0, #12]
 800b14a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b14c:	81c2      	strh	r2, [r0, #14]
 800b14e:	6183      	str	r3, [r0, #24]
 800b150:	4619      	mov	r1, r3
 800b152:	2208      	movs	r2, #8
 800b154:	305c      	adds	r0, #92	@ 0x5c
 800b156:	f000 fac7 	bl	800b6e8 <memset>
 800b15a:	4b0d      	ldr	r3, [pc, #52]	@ (800b190 <std+0x58>)
 800b15c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b15e:	4b0d      	ldr	r3, [pc, #52]	@ (800b194 <std+0x5c>)
 800b160:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b162:	4b0d      	ldr	r3, [pc, #52]	@ (800b198 <std+0x60>)
 800b164:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b166:	4b0d      	ldr	r3, [pc, #52]	@ (800b19c <std+0x64>)
 800b168:	6323      	str	r3, [r4, #48]	@ 0x30
 800b16a:	4b0d      	ldr	r3, [pc, #52]	@ (800b1a0 <std+0x68>)
 800b16c:	6224      	str	r4, [r4, #32]
 800b16e:	429c      	cmp	r4, r3
 800b170:	d006      	beq.n	800b180 <std+0x48>
 800b172:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b176:	4294      	cmp	r4, r2
 800b178:	d002      	beq.n	800b180 <std+0x48>
 800b17a:	33d0      	adds	r3, #208	@ 0xd0
 800b17c:	429c      	cmp	r4, r3
 800b17e:	d105      	bne.n	800b18c <std+0x54>
 800b180:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b188:	f000 bb36 	b.w	800b7f8 <__retarget_lock_init_recursive>
 800b18c:	bd10      	pop	{r4, pc}
 800b18e:	bf00      	nop
 800b190:	0800b539 	.word	0x0800b539
 800b194:	0800b55b 	.word	0x0800b55b
 800b198:	0800b593 	.word	0x0800b593
 800b19c:	0800b5b7 	.word	0x0800b5b7
 800b1a0:	200009bc 	.word	0x200009bc

0800b1a4 <stdio_exit_handler>:
 800b1a4:	4a02      	ldr	r2, [pc, #8]	@ (800b1b0 <stdio_exit_handler+0xc>)
 800b1a6:	4903      	ldr	r1, [pc, #12]	@ (800b1b4 <stdio_exit_handler+0x10>)
 800b1a8:	4803      	ldr	r0, [pc, #12]	@ (800b1b8 <stdio_exit_handler+0x14>)
 800b1aa:	f000 b87b 	b.w	800b2a4 <_fwalk_sglue>
 800b1ae:	bf00      	nop
 800b1b0:	2000002c 	.word	0x2000002c
 800b1b4:	0800bf61 	.word	0x0800bf61
 800b1b8:	2000003c 	.word	0x2000003c

0800b1bc <cleanup_stdio>:
 800b1bc:	6841      	ldr	r1, [r0, #4]
 800b1be:	4b0c      	ldr	r3, [pc, #48]	@ (800b1f0 <cleanup_stdio+0x34>)
 800b1c0:	4299      	cmp	r1, r3
 800b1c2:	b510      	push	{r4, lr}
 800b1c4:	4604      	mov	r4, r0
 800b1c6:	d001      	beq.n	800b1cc <cleanup_stdio+0x10>
 800b1c8:	f000 feca 	bl	800bf60 <_fflush_r>
 800b1cc:	68a1      	ldr	r1, [r4, #8]
 800b1ce:	4b09      	ldr	r3, [pc, #36]	@ (800b1f4 <cleanup_stdio+0x38>)
 800b1d0:	4299      	cmp	r1, r3
 800b1d2:	d002      	beq.n	800b1da <cleanup_stdio+0x1e>
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f000 fec3 	bl	800bf60 <_fflush_r>
 800b1da:	68e1      	ldr	r1, [r4, #12]
 800b1dc:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <cleanup_stdio+0x3c>)
 800b1de:	4299      	cmp	r1, r3
 800b1e0:	d004      	beq.n	800b1ec <cleanup_stdio+0x30>
 800b1e2:	4620      	mov	r0, r4
 800b1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b1e8:	f000 beba 	b.w	800bf60 <_fflush_r>
 800b1ec:	bd10      	pop	{r4, pc}
 800b1ee:	bf00      	nop
 800b1f0:	200009bc 	.word	0x200009bc
 800b1f4:	20000a24 	.word	0x20000a24
 800b1f8:	20000a8c 	.word	0x20000a8c

0800b1fc <global_stdio_init.part.0>:
 800b1fc:	b510      	push	{r4, lr}
 800b1fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b22c <global_stdio_init.part.0+0x30>)
 800b200:	4c0b      	ldr	r4, [pc, #44]	@ (800b230 <global_stdio_init.part.0+0x34>)
 800b202:	4a0c      	ldr	r2, [pc, #48]	@ (800b234 <global_stdio_init.part.0+0x38>)
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	4620      	mov	r0, r4
 800b208:	2200      	movs	r2, #0
 800b20a:	2104      	movs	r1, #4
 800b20c:	f7ff ff94 	bl	800b138 <std>
 800b210:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b214:	2201      	movs	r2, #1
 800b216:	2109      	movs	r1, #9
 800b218:	f7ff ff8e 	bl	800b138 <std>
 800b21c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b220:	2202      	movs	r2, #2
 800b222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b226:	2112      	movs	r1, #18
 800b228:	f7ff bf86 	b.w	800b138 <std>
 800b22c:	20000af4 	.word	0x20000af4
 800b230:	200009bc 	.word	0x200009bc
 800b234:	0800b1a5 	.word	0x0800b1a5

0800b238 <__sfp_lock_acquire>:
 800b238:	4801      	ldr	r0, [pc, #4]	@ (800b240 <__sfp_lock_acquire+0x8>)
 800b23a:	f000 bade 	b.w	800b7fa <__retarget_lock_acquire_recursive>
 800b23e:	bf00      	nop
 800b240:	20000afd 	.word	0x20000afd

0800b244 <__sfp_lock_release>:
 800b244:	4801      	ldr	r0, [pc, #4]	@ (800b24c <__sfp_lock_release+0x8>)
 800b246:	f000 bad9 	b.w	800b7fc <__retarget_lock_release_recursive>
 800b24a:	bf00      	nop
 800b24c:	20000afd 	.word	0x20000afd

0800b250 <__sinit>:
 800b250:	b510      	push	{r4, lr}
 800b252:	4604      	mov	r4, r0
 800b254:	f7ff fff0 	bl	800b238 <__sfp_lock_acquire>
 800b258:	6a23      	ldr	r3, [r4, #32]
 800b25a:	b11b      	cbz	r3, 800b264 <__sinit+0x14>
 800b25c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b260:	f7ff bff0 	b.w	800b244 <__sfp_lock_release>
 800b264:	4b04      	ldr	r3, [pc, #16]	@ (800b278 <__sinit+0x28>)
 800b266:	6223      	str	r3, [r4, #32]
 800b268:	4b04      	ldr	r3, [pc, #16]	@ (800b27c <__sinit+0x2c>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2b00      	cmp	r3, #0
 800b26e:	d1f5      	bne.n	800b25c <__sinit+0xc>
 800b270:	f7ff ffc4 	bl	800b1fc <global_stdio_init.part.0>
 800b274:	e7f2      	b.n	800b25c <__sinit+0xc>
 800b276:	bf00      	nop
 800b278:	0800b1bd 	.word	0x0800b1bd
 800b27c:	20000af4 	.word	0x20000af4

0800b280 <fiprintf>:
 800b280:	b40e      	push	{r1, r2, r3}
 800b282:	b503      	push	{r0, r1, lr}
 800b284:	4601      	mov	r1, r0
 800b286:	ab03      	add	r3, sp, #12
 800b288:	4805      	ldr	r0, [pc, #20]	@ (800b2a0 <fiprintf+0x20>)
 800b28a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b28e:	6800      	ldr	r0, [r0, #0]
 800b290:	9301      	str	r3, [sp, #4]
 800b292:	f000 fb3d 	bl	800b910 <_vfiprintf_r>
 800b296:	b002      	add	sp, #8
 800b298:	f85d eb04 	ldr.w	lr, [sp], #4
 800b29c:	b003      	add	sp, #12
 800b29e:	4770      	bx	lr
 800b2a0:	20000038 	.word	0x20000038

0800b2a4 <_fwalk_sglue>:
 800b2a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2a8:	4607      	mov	r7, r0
 800b2aa:	4688      	mov	r8, r1
 800b2ac:	4614      	mov	r4, r2
 800b2ae:	2600      	movs	r6, #0
 800b2b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b2b4:	f1b9 0901 	subs.w	r9, r9, #1
 800b2b8:	d505      	bpl.n	800b2c6 <_fwalk_sglue+0x22>
 800b2ba:	6824      	ldr	r4, [r4, #0]
 800b2bc:	2c00      	cmp	r4, #0
 800b2be:	d1f7      	bne.n	800b2b0 <_fwalk_sglue+0xc>
 800b2c0:	4630      	mov	r0, r6
 800b2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2c6:	89ab      	ldrh	r3, [r5, #12]
 800b2c8:	2b01      	cmp	r3, #1
 800b2ca:	d907      	bls.n	800b2dc <_fwalk_sglue+0x38>
 800b2cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b2d0:	3301      	adds	r3, #1
 800b2d2:	d003      	beq.n	800b2dc <_fwalk_sglue+0x38>
 800b2d4:	4629      	mov	r1, r5
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	47c0      	blx	r8
 800b2da:	4306      	orrs	r6, r0
 800b2dc:	3568      	adds	r5, #104	@ 0x68
 800b2de:	e7e9      	b.n	800b2b4 <_fwalk_sglue+0x10>

0800b2e0 <iprintf>:
 800b2e0:	b40f      	push	{r0, r1, r2, r3}
 800b2e2:	b507      	push	{r0, r1, r2, lr}
 800b2e4:	4906      	ldr	r1, [pc, #24]	@ (800b300 <iprintf+0x20>)
 800b2e6:	ab04      	add	r3, sp, #16
 800b2e8:	6808      	ldr	r0, [r1, #0]
 800b2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ee:	6881      	ldr	r1, [r0, #8]
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	f000 fb0d 	bl	800b910 <_vfiprintf_r>
 800b2f6:	b003      	add	sp, #12
 800b2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b2fc:	b004      	add	sp, #16
 800b2fe:	4770      	bx	lr
 800b300:	20000038 	.word	0x20000038

0800b304 <putchar>:
 800b304:	4b02      	ldr	r3, [pc, #8]	@ (800b310 <putchar+0xc>)
 800b306:	4601      	mov	r1, r0
 800b308:	6818      	ldr	r0, [r3, #0]
 800b30a:	6882      	ldr	r2, [r0, #8]
 800b30c:	f000 beb2 	b.w	800c074 <_putc_r>
 800b310:	20000038 	.word	0x20000038

0800b314 <_puts_r>:
 800b314:	6a03      	ldr	r3, [r0, #32]
 800b316:	b570      	push	{r4, r5, r6, lr}
 800b318:	6884      	ldr	r4, [r0, #8]
 800b31a:	4605      	mov	r5, r0
 800b31c:	460e      	mov	r6, r1
 800b31e:	b90b      	cbnz	r3, 800b324 <_puts_r+0x10>
 800b320:	f7ff ff96 	bl	800b250 <__sinit>
 800b324:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b326:	07db      	lsls	r3, r3, #31
 800b328:	d405      	bmi.n	800b336 <_puts_r+0x22>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	0598      	lsls	r0, r3, #22
 800b32e:	d402      	bmi.n	800b336 <_puts_r+0x22>
 800b330:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b332:	f000 fa62 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800b336:	89a3      	ldrh	r3, [r4, #12]
 800b338:	0719      	lsls	r1, r3, #28
 800b33a:	d502      	bpl.n	800b342 <_puts_r+0x2e>
 800b33c:	6923      	ldr	r3, [r4, #16]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d135      	bne.n	800b3ae <_puts_r+0x9a>
 800b342:	4621      	mov	r1, r4
 800b344:	4628      	mov	r0, r5
 800b346:	f000 f979 	bl	800b63c <__swsetup_r>
 800b34a:	b380      	cbz	r0, 800b3ae <_puts_r+0x9a>
 800b34c:	f04f 35ff 	mov.w	r5, #4294967295
 800b350:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b352:	07da      	lsls	r2, r3, #31
 800b354:	d405      	bmi.n	800b362 <_puts_r+0x4e>
 800b356:	89a3      	ldrh	r3, [r4, #12]
 800b358:	059b      	lsls	r3, r3, #22
 800b35a:	d402      	bmi.n	800b362 <_puts_r+0x4e>
 800b35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b35e:	f000 fa4d 	bl	800b7fc <__retarget_lock_release_recursive>
 800b362:	4628      	mov	r0, r5
 800b364:	bd70      	pop	{r4, r5, r6, pc}
 800b366:	2b00      	cmp	r3, #0
 800b368:	da04      	bge.n	800b374 <_puts_r+0x60>
 800b36a:	69a2      	ldr	r2, [r4, #24]
 800b36c:	429a      	cmp	r2, r3
 800b36e:	dc17      	bgt.n	800b3a0 <_puts_r+0x8c>
 800b370:	290a      	cmp	r1, #10
 800b372:	d015      	beq.n	800b3a0 <_puts_r+0x8c>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	1c5a      	adds	r2, r3, #1
 800b378:	6022      	str	r2, [r4, #0]
 800b37a:	7019      	strb	r1, [r3, #0]
 800b37c:	68a3      	ldr	r3, [r4, #8]
 800b37e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b382:	3b01      	subs	r3, #1
 800b384:	60a3      	str	r3, [r4, #8]
 800b386:	2900      	cmp	r1, #0
 800b388:	d1ed      	bne.n	800b366 <_puts_r+0x52>
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	da11      	bge.n	800b3b2 <_puts_r+0x9e>
 800b38e:	4622      	mov	r2, r4
 800b390:	210a      	movs	r1, #10
 800b392:	4628      	mov	r0, r5
 800b394:	f000 f913 	bl	800b5be <__swbuf_r>
 800b398:	3001      	adds	r0, #1
 800b39a:	d0d7      	beq.n	800b34c <_puts_r+0x38>
 800b39c:	250a      	movs	r5, #10
 800b39e:	e7d7      	b.n	800b350 <_puts_r+0x3c>
 800b3a0:	4622      	mov	r2, r4
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f000 f90b 	bl	800b5be <__swbuf_r>
 800b3a8:	3001      	adds	r0, #1
 800b3aa:	d1e7      	bne.n	800b37c <_puts_r+0x68>
 800b3ac:	e7ce      	b.n	800b34c <_puts_r+0x38>
 800b3ae:	3e01      	subs	r6, #1
 800b3b0:	e7e4      	b.n	800b37c <_puts_r+0x68>
 800b3b2:	6823      	ldr	r3, [r4, #0]
 800b3b4:	1c5a      	adds	r2, r3, #1
 800b3b6:	6022      	str	r2, [r4, #0]
 800b3b8:	220a      	movs	r2, #10
 800b3ba:	701a      	strb	r2, [r3, #0]
 800b3bc:	e7ee      	b.n	800b39c <_puts_r+0x88>
	...

0800b3c0 <puts>:
 800b3c0:	4b02      	ldr	r3, [pc, #8]	@ (800b3cc <puts+0xc>)
 800b3c2:	4601      	mov	r1, r0
 800b3c4:	6818      	ldr	r0, [r3, #0]
 800b3c6:	f7ff bfa5 	b.w	800b314 <_puts_r>
 800b3ca:	bf00      	nop
 800b3cc:	20000038 	.word	0x20000038

0800b3d0 <setvbuf>:
 800b3d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b3d4:	461d      	mov	r5, r3
 800b3d6:	4b57      	ldr	r3, [pc, #348]	@ (800b534 <setvbuf+0x164>)
 800b3d8:	681f      	ldr	r7, [r3, #0]
 800b3da:	4604      	mov	r4, r0
 800b3dc:	460e      	mov	r6, r1
 800b3de:	4690      	mov	r8, r2
 800b3e0:	b127      	cbz	r7, 800b3ec <setvbuf+0x1c>
 800b3e2:	6a3b      	ldr	r3, [r7, #32]
 800b3e4:	b913      	cbnz	r3, 800b3ec <setvbuf+0x1c>
 800b3e6:	4638      	mov	r0, r7
 800b3e8:	f7ff ff32 	bl	800b250 <__sinit>
 800b3ec:	f1b8 0f02 	cmp.w	r8, #2
 800b3f0:	d006      	beq.n	800b400 <setvbuf+0x30>
 800b3f2:	f1b8 0f01 	cmp.w	r8, #1
 800b3f6:	f200 809a 	bhi.w	800b52e <setvbuf+0x15e>
 800b3fa:	2d00      	cmp	r5, #0
 800b3fc:	f2c0 8097 	blt.w	800b52e <setvbuf+0x15e>
 800b400:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b402:	07d9      	lsls	r1, r3, #31
 800b404:	d405      	bmi.n	800b412 <setvbuf+0x42>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	059a      	lsls	r2, r3, #22
 800b40a:	d402      	bmi.n	800b412 <setvbuf+0x42>
 800b40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b40e:	f000 f9f4 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800b412:	4621      	mov	r1, r4
 800b414:	4638      	mov	r0, r7
 800b416:	f000 fda3 	bl	800bf60 <_fflush_r>
 800b41a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b41c:	b141      	cbz	r1, 800b430 <setvbuf+0x60>
 800b41e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b422:	4299      	cmp	r1, r3
 800b424:	d002      	beq.n	800b42c <setvbuf+0x5c>
 800b426:	4638      	mov	r0, r7
 800b428:	f000 f9fe 	bl	800b828 <_free_r>
 800b42c:	2300      	movs	r3, #0
 800b42e:	6363      	str	r3, [r4, #52]	@ 0x34
 800b430:	2300      	movs	r3, #0
 800b432:	61a3      	str	r3, [r4, #24]
 800b434:	6063      	str	r3, [r4, #4]
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	061b      	lsls	r3, r3, #24
 800b43a:	d503      	bpl.n	800b444 <setvbuf+0x74>
 800b43c:	6921      	ldr	r1, [r4, #16]
 800b43e:	4638      	mov	r0, r7
 800b440:	f000 f9f2 	bl	800b828 <_free_r>
 800b444:	89a3      	ldrh	r3, [r4, #12]
 800b446:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	f1b8 0f02 	cmp.w	r8, #2
 800b452:	81a3      	strh	r3, [r4, #12]
 800b454:	d061      	beq.n	800b51a <setvbuf+0x14a>
 800b456:	ab01      	add	r3, sp, #4
 800b458:	466a      	mov	r2, sp
 800b45a:	4621      	mov	r1, r4
 800b45c:	4638      	mov	r0, r7
 800b45e:	f000 fda7 	bl	800bfb0 <__swhatbuf_r>
 800b462:	89a3      	ldrh	r3, [r4, #12]
 800b464:	4318      	orrs	r0, r3
 800b466:	81a0      	strh	r0, [r4, #12]
 800b468:	bb2d      	cbnz	r5, 800b4b6 <setvbuf+0xe6>
 800b46a:	9d00      	ldr	r5, [sp, #0]
 800b46c:	4628      	mov	r0, r5
 800b46e:	f7ff fda5 	bl	800afbc <malloc>
 800b472:	4606      	mov	r6, r0
 800b474:	2800      	cmp	r0, #0
 800b476:	d152      	bne.n	800b51e <setvbuf+0x14e>
 800b478:	f8dd 9000 	ldr.w	r9, [sp]
 800b47c:	45a9      	cmp	r9, r5
 800b47e:	d140      	bne.n	800b502 <setvbuf+0x132>
 800b480:	f04f 35ff 	mov.w	r5, #4294967295
 800b484:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b488:	f043 0202 	orr.w	r2, r3, #2
 800b48c:	81a2      	strh	r2, [r4, #12]
 800b48e:	2200      	movs	r2, #0
 800b490:	60a2      	str	r2, [r4, #8]
 800b492:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800b496:	6022      	str	r2, [r4, #0]
 800b498:	6122      	str	r2, [r4, #16]
 800b49a:	2201      	movs	r2, #1
 800b49c:	6162      	str	r2, [r4, #20]
 800b49e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4a0:	07d6      	lsls	r6, r2, #31
 800b4a2:	d404      	bmi.n	800b4ae <setvbuf+0xde>
 800b4a4:	0598      	lsls	r0, r3, #22
 800b4a6:	d402      	bmi.n	800b4ae <setvbuf+0xde>
 800b4a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b4aa:	f000 f9a7 	bl	800b7fc <__retarget_lock_release_recursive>
 800b4ae:	4628      	mov	r0, r5
 800b4b0:	b003      	add	sp, #12
 800b4b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4b6:	2e00      	cmp	r6, #0
 800b4b8:	d0d8      	beq.n	800b46c <setvbuf+0x9c>
 800b4ba:	6a3b      	ldr	r3, [r7, #32]
 800b4bc:	b913      	cbnz	r3, 800b4c4 <setvbuf+0xf4>
 800b4be:	4638      	mov	r0, r7
 800b4c0:	f7ff fec6 	bl	800b250 <__sinit>
 800b4c4:	f1b8 0f01 	cmp.w	r8, #1
 800b4c8:	bf08      	it	eq
 800b4ca:	89a3      	ldrheq	r3, [r4, #12]
 800b4cc:	6026      	str	r6, [r4, #0]
 800b4ce:	bf04      	itt	eq
 800b4d0:	f043 0301 	orreq.w	r3, r3, #1
 800b4d4:	81a3      	strheq	r3, [r4, #12]
 800b4d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b4da:	f013 0208 	ands.w	r2, r3, #8
 800b4de:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b4e2:	d01e      	beq.n	800b522 <setvbuf+0x152>
 800b4e4:	07d9      	lsls	r1, r3, #31
 800b4e6:	bf41      	itttt	mi
 800b4e8:	2200      	movmi	r2, #0
 800b4ea:	426d      	negmi	r5, r5
 800b4ec:	60a2      	strmi	r2, [r4, #8]
 800b4ee:	61a5      	strmi	r5, [r4, #24]
 800b4f0:	bf58      	it	pl
 800b4f2:	60a5      	strpl	r5, [r4, #8]
 800b4f4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b4f6:	07d2      	lsls	r2, r2, #31
 800b4f8:	d401      	bmi.n	800b4fe <setvbuf+0x12e>
 800b4fa:	059b      	lsls	r3, r3, #22
 800b4fc:	d513      	bpl.n	800b526 <setvbuf+0x156>
 800b4fe:	2500      	movs	r5, #0
 800b500:	e7d5      	b.n	800b4ae <setvbuf+0xde>
 800b502:	4648      	mov	r0, r9
 800b504:	f7ff fd5a 	bl	800afbc <malloc>
 800b508:	4606      	mov	r6, r0
 800b50a:	2800      	cmp	r0, #0
 800b50c:	d0b8      	beq.n	800b480 <setvbuf+0xb0>
 800b50e:	89a3      	ldrh	r3, [r4, #12]
 800b510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b514:	81a3      	strh	r3, [r4, #12]
 800b516:	464d      	mov	r5, r9
 800b518:	e7cf      	b.n	800b4ba <setvbuf+0xea>
 800b51a:	2500      	movs	r5, #0
 800b51c:	e7b2      	b.n	800b484 <setvbuf+0xb4>
 800b51e:	46a9      	mov	r9, r5
 800b520:	e7f5      	b.n	800b50e <setvbuf+0x13e>
 800b522:	60a2      	str	r2, [r4, #8]
 800b524:	e7e6      	b.n	800b4f4 <setvbuf+0x124>
 800b526:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b528:	f000 f968 	bl	800b7fc <__retarget_lock_release_recursive>
 800b52c:	e7e7      	b.n	800b4fe <setvbuf+0x12e>
 800b52e:	f04f 35ff 	mov.w	r5, #4294967295
 800b532:	e7bc      	b.n	800b4ae <setvbuf+0xde>
 800b534:	20000038 	.word	0x20000038

0800b538 <__sread>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	460c      	mov	r4, r1
 800b53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b540:	f000 f8fc 	bl	800b73c <_read_r>
 800b544:	2800      	cmp	r0, #0
 800b546:	bfab      	itete	ge
 800b548:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b54a:	89a3      	ldrhlt	r3, [r4, #12]
 800b54c:	181b      	addge	r3, r3, r0
 800b54e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b552:	bfac      	ite	ge
 800b554:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b556:	81a3      	strhlt	r3, [r4, #12]
 800b558:	bd10      	pop	{r4, pc}

0800b55a <__swrite>:
 800b55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b55e:	461f      	mov	r7, r3
 800b560:	898b      	ldrh	r3, [r1, #12]
 800b562:	05db      	lsls	r3, r3, #23
 800b564:	4605      	mov	r5, r0
 800b566:	460c      	mov	r4, r1
 800b568:	4616      	mov	r6, r2
 800b56a:	d505      	bpl.n	800b578 <__swrite+0x1e>
 800b56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b570:	2302      	movs	r3, #2
 800b572:	2200      	movs	r2, #0
 800b574:	f000 f8d0 	bl	800b718 <_lseek_r>
 800b578:	89a3      	ldrh	r3, [r4, #12]
 800b57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b57e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b582:	81a3      	strh	r3, [r4, #12]
 800b584:	4632      	mov	r2, r6
 800b586:	463b      	mov	r3, r7
 800b588:	4628      	mov	r0, r5
 800b58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b58e:	f000 b8f7 	b.w	800b780 <_write_r>

0800b592 <__sseek>:
 800b592:	b510      	push	{r4, lr}
 800b594:	460c      	mov	r4, r1
 800b596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b59a:	f000 f8bd 	bl	800b718 <_lseek_r>
 800b59e:	1c43      	adds	r3, r0, #1
 800b5a0:	89a3      	ldrh	r3, [r4, #12]
 800b5a2:	bf15      	itete	ne
 800b5a4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b5a6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b5aa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b5ae:	81a3      	strheq	r3, [r4, #12]
 800b5b0:	bf18      	it	ne
 800b5b2:	81a3      	strhne	r3, [r4, #12]
 800b5b4:	bd10      	pop	{r4, pc}

0800b5b6 <__sclose>:
 800b5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b5ba:	f000 b89d 	b.w	800b6f8 <_close_r>

0800b5be <__swbuf_r>:
 800b5be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5c0:	460e      	mov	r6, r1
 800b5c2:	4614      	mov	r4, r2
 800b5c4:	4605      	mov	r5, r0
 800b5c6:	b118      	cbz	r0, 800b5d0 <__swbuf_r+0x12>
 800b5c8:	6a03      	ldr	r3, [r0, #32]
 800b5ca:	b90b      	cbnz	r3, 800b5d0 <__swbuf_r+0x12>
 800b5cc:	f7ff fe40 	bl	800b250 <__sinit>
 800b5d0:	69a3      	ldr	r3, [r4, #24]
 800b5d2:	60a3      	str	r3, [r4, #8]
 800b5d4:	89a3      	ldrh	r3, [r4, #12]
 800b5d6:	071a      	lsls	r2, r3, #28
 800b5d8:	d501      	bpl.n	800b5de <__swbuf_r+0x20>
 800b5da:	6923      	ldr	r3, [r4, #16]
 800b5dc:	b943      	cbnz	r3, 800b5f0 <__swbuf_r+0x32>
 800b5de:	4621      	mov	r1, r4
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f000 f82b 	bl	800b63c <__swsetup_r>
 800b5e6:	b118      	cbz	r0, 800b5f0 <__swbuf_r+0x32>
 800b5e8:	f04f 37ff 	mov.w	r7, #4294967295
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b5f0:	6823      	ldr	r3, [r4, #0]
 800b5f2:	6922      	ldr	r2, [r4, #16]
 800b5f4:	1a98      	subs	r0, r3, r2
 800b5f6:	6963      	ldr	r3, [r4, #20]
 800b5f8:	b2f6      	uxtb	r6, r6
 800b5fa:	4283      	cmp	r3, r0
 800b5fc:	4637      	mov	r7, r6
 800b5fe:	dc05      	bgt.n	800b60c <__swbuf_r+0x4e>
 800b600:	4621      	mov	r1, r4
 800b602:	4628      	mov	r0, r5
 800b604:	f000 fcac 	bl	800bf60 <_fflush_r>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d1ed      	bne.n	800b5e8 <__swbuf_r+0x2a>
 800b60c:	68a3      	ldr	r3, [r4, #8]
 800b60e:	3b01      	subs	r3, #1
 800b610:	60a3      	str	r3, [r4, #8]
 800b612:	6823      	ldr	r3, [r4, #0]
 800b614:	1c5a      	adds	r2, r3, #1
 800b616:	6022      	str	r2, [r4, #0]
 800b618:	701e      	strb	r6, [r3, #0]
 800b61a:	6962      	ldr	r2, [r4, #20]
 800b61c:	1c43      	adds	r3, r0, #1
 800b61e:	429a      	cmp	r2, r3
 800b620:	d004      	beq.n	800b62c <__swbuf_r+0x6e>
 800b622:	89a3      	ldrh	r3, [r4, #12]
 800b624:	07db      	lsls	r3, r3, #31
 800b626:	d5e1      	bpl.n	800b5ec <__swbuf_r+0x2e>
 800b628:	2e0a      	cmp	r6, #10
 800b62a:	d1df      	bne.n	800b5ec <__swbuf_r+0x2e>
 800b62c:	4621      	mov	r1, r4
 800b62e:	4628      	mov	r0, r5
 800b630:	f000 fc96 	bl	800bf60 <_fflush_r>
 800b634:	2800      	cmp	r0, #0
 800b636:	d0d9      	beq.n	800b5ec <__swbuf_r+0x2e>
 800b638:	e7d6      	b.n	800b5e8 <__swbuf_r+0x2a>
	...

0800b63c <__swsetup_r>:
 800b63c:	b538      	push	{r3, r4, r5, lr}
 800b63e:	4b29      	ldr	r3, [pc, #164]	@ (800b6e4 <__swsetup_r+0xa8>)
 800b640:	4605      	mov	r5, r0
 800b642:	6818      	ldr	r0, [r3, #0]
 800b644:	460c      	mov	r4, r1
 800b646:	b118      	cbz	r0, 800b650 <__swsetup_r+0x14>
 800b648:	6a03      	ldr	r3, [r0, #32]
 800b64a:	b90b      	cbnz	r3, 800b650 <__swsetup_r+0x14>
 800b64c:	f7ff fe00 	bl	800b250 <__sinit>
 800b650:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b654:	0719      	lsls	r1, r3, #28
 800b656:	d422      	bmi.n	800b69e <__swsetup_r+0x62>
 800b658:	06da      	lsls	r2, r3, #27
 800b65a:	d407      	bmi.n	800b66c <__swsetup_r+0x30>
 800b65c:	2209      	movs	r2, #9
 800b65e:	602a      	str	r2, [r5, #0]
 800b660:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b664:	81a3      	strh	r3, [r4, #12]
 800b666:	f04f 30ff 	mov.w	r0, #4294967295
 800b66a:	e033      	b.n	800b6d4 <__swsetup_r+0x98>
 800b66c:	0758      	lsls	r0, r3, #29
 800b66e:	d512      	bpl.n	800b696 <__swsetup_r+0x5a>
 800b670:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b672:	b141      	cbz	r1, 800b686 <__swsetup_r+0x4a>
 800b674:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b678:	4299      	cmp	r1, r3
 800b67a:	d002      	beq.n	800b682 <__swsetup_r+0x46>
 800b67c:	4628      	mov	r0, r5
 800b67e:	f000 f8d3 	bl	800b828 <_free_r>
 800b682:	2300      	movs	r3, #0
 800b684:	6363      	str	r3, [r4, #52]	@ 0x34
 800b686:	89a3      	ldrh	r3, [r4, #12]
 800b688:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b68c:	81a3      	strh	r3, [r4, #12]
 800b68e:	2300      	movs	r3, #0
 800b690:	6063      	str	r3, [r4, #4]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	6023      	str	r3, [r4, #0]
 800b696:	89a3      	ldrh	r3, [r4, #12]
 800b698:	f043 0308 	orr.w	r3, r3, #8
 800b69c:	81a3      	strh	r3, [r4, #12]
 800b69e:	6923      	ldr	r3, [r4, #16]
 800b6a0:	b94b      	cbnz	r3, 800b6b6 <__swsetup_r+0x7a>
 800b6a2:	89a3      	ldrh	r3, [r4, #12]
 800b6a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6ac:	d003      	beq.n	800b6b6 <__swsetup_r+0x7a>
 800b6ae:	4621      	mov	r1, r4
 800b6b0:	4628      	mov	r0, r5
 800b6b2:	f000 fca3 	bl	800bffc <__smakebuf_r>
 800b6b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6ba:	f013 0201 	ands.w	r2, r3, #1
 800b6be:	d00a      	beq.n	800b6d6 <__swsetup_r+0x9a>
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	60a2      	str	r2, [r4, #8]
 800b6c4:	6962      	ldr	r2, [r4, #20]
 800b6c6:	4252      	negs	r2, r2
 800b6c8:	61a2      	str	r2, [r4, #24]
 800b6ca:	6922      	ldr	r2, [r4, #16]
 800b6cc:	b942      	cbnz	r2, 800b6e0 <__swsetup_r+0xa4>
 800b6ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b6d2:	d1c5      	bne.n	800b660 <__swsetup_r+0x24>
 800b6d4:	bd38      	pop	{r3, r4, r5, pc}
 800b6d6:	0799      	lsls	r1, r3, #30
 800b6d8:	bf58      	it	pl
 800b6da:	6962      	ldrpl	r2, [r4, #20]
 800b6dc:	60a2      	str	r2, [r4, #8]
 800b6de:	e7f4      	b.n	800b6ca <__swsetup_r+0x8e>
 800b6e0:	2000      	movs	r0, #0
 800b6e2:	e7f7      	b.n	800b6d4 <__swsetup_r+0x98>
 800b6e4:	20000038 	.word	0x20000038

0800b6e8 <memset>:
 800b6e8:	4402      	add	r2, r0
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	4293      	cmp	r3, r2
 800b6ee:	d100      	bne.n	800b6f2 <memset+0xa>
 800b6f0:	4770      	bx	lr
 800b6f2:	f803 1b01 	strb.w	r1, [r3], #1
 800b6f6:	e7f9      	b.n	800b6ec <memset+0x4>

0800b6f8 <_close_r>:
 800b6f8:	b538      	push	{r3, r4, r5, lr}
 800b6fa:	4d06      	ldr	r5, [pc, #24]	@ (800b714 <_close_r+0x1c>)
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	4604      	mov	r4, r0
 800b700:	4608      	mov	r0, r1
 800b702:	602b      	str	r3, [r5, #0]
 800b704:	f7f7 f93a 	bl	800297c <_close>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d102      	bne.n	800b712 <_close_r+0x1a>
 800b70c:	682b      	ldr	r3, [r5, #0]
 800b70e:	b103      	cbz	r3, 800b712 <_close_r+0x1a>
 800b710:	6023      	str	r3, [r4, #0]
 800b712:	bd38      	pop	{r3, r4, r5, pc}
 800b714:	20000af8 	.word	0x20000af8

0800b718 <_lseek_r>:
 800b718:	b538      	push	{r3, r4, r5, lr}
 800b71a:	4d07      	ldr	r5, [pc, #28]	@ (800b738 <_lseek_r+0x20>)
 800b71c:	4604      	mov	r4, r0
 800b71e:	4608      	mov	r0, r1
 800b720:	4611      	mov	r1, r2
 800b722:	2200      	movs	r2, #0
 800b724:	602a      	str	r2, [r5, #0]
 800b726:	461a      	mov	r2, r3
 800b728:	f7f7 f94f 	bl	80029ca <_lseek>
 800b72c:	1c43      	adds	r3, r0, #1
 800b72e:	d102      	bne.n	800b736 <_lseek_r+0x1e>
 800b730:	682b      	ldr	r3, [r5, #0]
 800b732:	b103      	cbz	r3, 800b736 <_lseek_r+0x1e>
 800b734:	6023      	str	r3, [r4, #0]
 800b736:	bd38      	pop	{r3, r4, r5, pc}
 800b738:	20000af8 	.word	0x20000af8

0800b73c <_read_r>:
 800b73c:	b538      	push	{r3, r4, r5, lr}
 800b73e:	4d07      	ldr	r5, [pc, #28]	@ (800b75c <_read_r+0x20>)
 800b740:	4604      	mov	r4, r0
 800b742:	4608      	mov	r0, r1
 800b744:	4611      	mov	r1, r2
 800b746:	2200      	movs	r2, #0
 800b748:	602a      	str	r2, [r5, #0]
 800b74a:	461a      	mov	r2, r3
 800b74c:	f7f7 f8f9 	bl	8002942 <_read>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_read_r+0x1e>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_read_r+0x1e>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	20000af8 	.word	0x20000af8

0800b760 <_sbrk_r>:
 800b760:	b538      	push	{r3, r4, r5, lr}
 800b762:	4d06      	ldr	r5, [pc, #24]	@ (800b77c <_sbrk_r+0x1c>)
 800b764:	2300      	movs	r3, #0
 800b766:	4604      	mov	r4, r0
 800b768:	4608      	mov	r0, r1
 800b76a:	602b      	str	r3, [r5, #0]
 800b76c:	f7f7 f93a 	bl	80029e4 <_sbrk>
 800b770:	1c43      	adds	r3, r0, #1
 800b772:	d102      	bne.n	800b77a <_sbrk_r+0x1a>
 800b774:	682b      	ldr	r3, [r5, #0]
 800b776:	b103      	cbz	r3, 800b77a <_sbrk_r+0x1a>
 800b778:	6023      	str	r3, [r4, #0]
 800b77a:	bd38      	pop	{r3, r4, r5, pc}
 800b77c:	20000af8 	.word	0x20000af8

0800b780 <_write_r>:
 800b780:	b538      	push	{r3, r4, r5, lr}
 800b782:	4d07      	ldr	r5, [pc, #28]	@ (800b7a0 <_write_r+0x20>)
 800b784:	4604      	mov	r4, r0
 800b786:	4608      	mov	r0, r1
 800b788:	4611      	mov	r1, r2
 800b78a:	2200      	movs	r2, #0
 800b78c:	602a      	str	r2, [r5, #0]
 800b78e:	461a      	mov	r2, r3
 800b790:	f7f5 f9ca 	bl	8000b28 <_write>
 800b794:	1c43      	adds	r3, r0, #1
 800b796:	d102      	bne.n	800b79e <_write_r+0x1e>
 800b798:	682b      	ldr	r3, [r5, #0]
 800b79a:	b103      	cbz	r3, 800b79e <_write_r+0x1e>
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	bd38      	pop	{r3, r4, r5, pc}
 800b7a0:	20000af8 	.word	0x20000af8

0800b7a4 <__errno>:
 800b7a4:	4b01      	ldr	r3, [pc, #4]	@ (800b7ac <__errno+0x8>)
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	4770      	bx	lr
 800b7aa:	bf00      	nop
 800b7ac:	20000038 	.word	0x20000038

0800b7b0 <__libc_init_array>:
 800b7b0:	b570      	push	{r4, r5, r6, lr}
 800b7b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b7e8 <__libc_init_array+0x38>)
 800b7b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b7ec <__libc_init_array+0x3c>)
 800b7b6:	1b64      	subs	r4, r4, r5
 800b7b8:	10a4      	asrs	r4, r4, #2
 800b7ba:	2600      	movs	r6, #0
 800b7bc:	42a6      	cmp	r6, r4
 800b7be:	d109      	bne.n	800b7d4 <__libc_init_array+0x24>
 800b7c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b7f0 <__libc_init_array+0x40>)
 800b7c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b7f4 <__libc_init_array+0x44>)
 800b7c4:	f000 fcf0 	bl	800c1a8 <_init>
 800b7c8:	1b64      	subs	r4, r4, r5
 800b7ca:	10a4      	asrs	r4, r4, #2
 800b7cc:	2600      	movs	r6, #0
 800b7ce:	42a6      	cmp	r6, r4
 800b7d0:	d105      	bne.n	800b7de <__libc_init_array+0x2e>
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7d8:	4798      	blx	r3
 800b7da:	3601      	adds	r6, #1
 800b7dc:	e7ee      	b.n	800b7bc <__libc_init_array+0xc>
 800b7de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b7e2:	4798      	blx	r3
 800b7e4:	3601      	adds	r6, #1
 800b7e6:	e7f2      	b.n	800b7ce <__libc_init_array+0x1e>
 800b7e8:	0800c804 	.word	0x0800c804
 800b7ec:	0800c804 	.word	0x0800c804
 800b7f0:	0800c804 	.word	0x0800c804
 800b7f4:	0800c808 	.word	0x0800c808

0800b7f8 <__retarget_lock_init_recursive>:
 800b7f8:	4770      	bx	lr

0800b7fa <__retarget_lock_acquire_recursive>:
 800b7fa:	4770      	bx	lr

0800b7fc <__retarget_lock_release_recursive>:
 800b7fc:	4770      	bx	lr

0800b7fe <memcpy>:
 800b7fe:	440a      	add	r2, r1
 800b800:	4291      	cmp	r1, r2
 800b802:	f100 33ff 	add.w	r3, r0, #4294967295
 800b806:	d100      	bne.n	800b80a <memcpy+0xc>
 800b808:	4770      	bx	lr
 800b80a:	b510      	push	{r4, lr}
 800b80c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b810:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b814:	4291      	cmp	r1, r2
 800b816:	d1f9      	bne.n	800b80c <memcpy+0xe>
 800b818:	bd10      	pop	{r4, pc}

0800b81a <abort>:
 800b81a:	b508      	push	{r3, lr}
 800b81c:	2006      	movs	r0, #6
 800b81e:	f000 fc85 	bl	800c12c <raise>
 800b822:	2001      	movs	r0, #1
 800b824:	f7f7 f882 	bl	800292c <_exit>

0800b828 <_free_r>:
 800b828:	b538      	push	{r3, r4, r5, lr}
 800b82a:	4605      	mov	r5, r0
 800b82c:	2900      	cmp	r1, #0
 800b82e:	d041      	beq.n	800b8b4 <_free_r+0x8c>
 800b830:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b834:	1f0c      	subs	r4, r1, #4
 800b836:	2b00      	cmp	r3, #0
 800b838:	bfb8      	it	lt
 800b83a:	18e4      	addlt	r4, r4, r3
 800b83c:	f7ff fc70 	bl	800b120 <__malloc_lock>
 800b840:	4a1d      	ldr	r2, [pc, #116]	@ (800b8b8 <_free_r+0x90>)
 800b842:	6813      	ldr	r3, [r2, #0]
 800b844:	b933      	cbnz	r3, 800b854 <_free_r+0x2c>
 800b846:	6063      	str	r3, [r4, #4]
 800b848:	6014      	str	r4, [r2, #0]
 800b84a:	4628      	mov	r0, r5
 800b84c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b850:	f7ff bc6c 	b.w	800b12c <__malloc_unlock>
 800b854:	42a3      	cmp	r3, r4
 800b856:	d908      	bls.n	800b86a <_free_r+0x42>
 800b858:	6820      	ldr	r0, [r4, #0]
 800b85a:	1821      	adds	r1, r4, r0
 800b85c:	428b      	cmp	r3, r1
 800b85e:	bf01      	itttt	eq
 800b860:	6819      	ldreq	r1, [r3, #0]
 800b862:	685b      	ldreq	r3, [r3, #4]
 800b864:	1809      	addeq	r1, r1, r0
 800b866:	6021      	streq	r1, [r4, #0]
 800b868:	e7ed      	b.n	800b846 <_free_r+0x1e>
 800b86a:	461a      	mov	r2, r3
 800b86c:	685b      	ldr	r3, [r3, #4]
 800b86e:	b10b      	cbz	r3, 800b874 <_free_r+0x4c>
 800b870:	42a3      	cmp	r3, r4
 800b872:	d9fa      	bls.n	800b86a <_free_r+0x42>
 800b874:	6811      	ldr	r1, [r2, #0]
 800b876:	1850      	adds	r0, r2, r1
 800b878:	42a0      	cmp	r0, r4
 800b87a:	d10b      	bne.n	800b894 <_free_r+0x6c>
 800b87c:	6820      	ldr	r0, [r4, #0]
 800b87e:	4401      	add	r1, r0
 800b880:	1850      	adds	r0, r2, r1
 800b882:	4283      	cmp	r3, r0
 800b884:	6011      	str	r1, [r2, #0]
 800b886:	d1e0      	bne.n	800b84a <_free_r+0x22>
 800b888:	6818      	ldr	r0, [r3, #0]
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	6053      	str	r3, [r2, #4]
 800b88e:	4408      	add	r0, r1
 800b890:	6010      	str	r0, [r2, #0]
 800b892:	e7da      	b.n	800b84a <_free_r+0x22>
 800b894:	d902      	bls.n	800b89c <_free_r+0x74>
 800b896:	230c      	movs	r3, #12
 800b898:	602b      	str	r3, [r5, #0]
 800b89a:	e7d6      	b.n	800b84a <_free_r+0x22>
 800b89c:	6820      	ldr	r0, [r4, #0]
 800b89e:	1821      	adds	r1, r4, r0
 800b8a0:	428b      	cmp	r3, r1
 800b8a2:	bf04      	itt	eq
 800b8a4:	6819      	ldreq	r1, [r3, #0]
 800b8a6:	685b      	ldreq	r3, [r3, #4]
 800b8a8:	6063      	str	r3, [r4, #4]
 800b8aa:	bf04      	itt	eq
 800b8ac:	1809      	addeq	r1, r1, r0
 800b8ae:	6021      	streq	r1, [r4, #0]
 800b8b0:	6054      	str	r4, [r2, #4]
 800b8b2:	e7ca      	b.n	800b84a <_free_r+0x22>
 800b8b4:	bd38      	pop	{r3, r4, r5, pc}
 800b8b6:	bf00      	nop
 800b8b8:	200009b8 	.word	0x200009b8

0800b8bc <__sfputc_r>:
 800b8bc:	6893      	ldr	r3, [r2, #8]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	b410      	push	{r4}
 800b8c4:	6093      	str	r3, [r2, #8]
 800b8c6:	da08      	bge.n	800b8da <__sfputc_r+0x1e>
 800b8c8:	6994      	ldr	r4, [r2, #24]
 800b8ca:	42a3      	cmp	r3, r4
 800b8cc:	db01      	blt.n	800b8d2 <__sfputc_r+0x16>
 800b8ce:	290a      	cmp	r1, #10
 800b8d0:	d103      	bne.n	800b8da <__sfputc_r+0x1e>
 800b8d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8d6:	f7ff be72 	b.w	800b5be <__swbuf_r>
 800b8da:	6813      	ldr	r3, [r2, #0]
 800b8dc:	1c58      	adds	r0, r3, #1
 800b8de:	6010      	str	r0, [r2, #0]
 800b8e0:	7019      	strb	r1, [r3, #0]
 800b8e2:	4608      	mov	r0, r1
 800b8e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <__sfputs_r>:
 800b8ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8ec:	4606      	mov	r6, r0
 800b8ee:	460f      	mov	r7, r1
 800b8f0:	4614      	mov	r4, r2
 800b8f2:	18d5      	adds	r5, r2, r3
 800b8f4:	42ac      	cmp	r4, r5
 800b8f6:	d101      	bne.n	800b8fc <__sfputs_r+0x12>
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	e007      	b.n	800b90c <__sfputs_r+0x22>
 800b8fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b900:	463a      	mov	r2, r7
 800b902:	4630      	mov	r0, r6
 800b904:	f7ff ffda 	bl	800b8bc <__sfputc_r>
 800b908:	1c43      	adds	r3, r0, #1
 800b90a:	d1f3      	bne.n	800b8f4 <__sfputs_r+0xa>
 800b90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b910 <_vfiprintf_r>:
 800b910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b914:	460d      	mov	r5, r1
 800b916:	b09d      	sub	sp, #116	@ 0x74
 800b918:	4614      	mov	r4, r2
 800b91a:	4698      	mov	r8, r3
 800b91c:	4606      	mov	r6, r0
 800b91e:	b118      	cbz	r0, 800b928 <_vfiprintf_r+0x18>
 800b920:	6a03      	ldr	r3, [r0, #32]
 800b922:	b90b      	cbnz	r3, 800b928 <_vfiprintf_r+0x18>
 800b924:	f7ff fc94 	bl	800b250 <__sinit>
 800b928:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b92a:	07d9      	lsls	r1, r3, #31
 800b92c:	d405      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b92e:	89ab      	ldrh	r3, [r5, #12]
 800b930:	059a      	lsls	r2, r3, #22
 800b932:	d402      	bmi.n	800b93a <_vfiprintf_r+0x2a>
 800b934:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b936:	f7ff ff60 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800b93a:	89ab      	ldrh	r3, [r5, #12]
 800b93c:	071b      	lsls	r3, r3, #28
 800b93e:	d501      	bpl.n	800b944 <_vfiprintf_r+0x34>
 800b940:	692b      	ldr	r3, [r5, #16]
 800b942:	b99b      	cbnz	r3, 800b96c <_vfiprintf_r+0x5c>
 800b944:	4629      	mov	r1, r5
 800b946:	4630      	mov	r0, r6
 800b948:	f7ff fe78 	bl	800b63c <__swsetup_r>
 800b94c:	b170      	cbz	r0, 800b96c <_vfiprintf_r+0x5c>
 800b94e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b950:	07dc      	lsls	r4, r3, #31
 800b952:	d504      	bpl.n	800b95e <_vfiprintf_r+0x4e>
 800b954:	f04f 30ff 	mov.w	r0, #4294967295
 800b958:	b01d      	add	sp, #116	@ 0x74
 800b95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b95e:	89ab      	ldrh	r3, [r5, #12]
 800b960:	0598      	lsls	r0, r3, #22
 800b962:	d4f7      	bmi.n	800b954 <_vfiprintf_r+0x44>
 800b964:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b966:	f7ff ff49 	bl	800b7fc <__retarget_lock_release_recursive>
 800b96a:	e7f3      	b.n	800b954 <_vfiprintf_r+0x44>
 800b96c:	2300      	movs	r3, #0
 800b96e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b970:	2320      	movs	r3, #32
 800b972:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b976:	f8cd 800c 	str.w	r8, [sp, #12]
 800b97a:	2330      	movs	r3, #48	@ 0x30
 800b97c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bb2c <_vfiprintf_r+0x21c>
 800b980:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b984:	f04f 0901 	mov.w	r9, #1
 800b988:	4623      	mov	r3, r4
 800b98a:	469a      	mov	sl, r3
 800b98c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b990:	b10a      	cbz	r2, 800b996 <_vfiprintf_r+0x86>
 800b992:	2a25      	cmp	r2, #37	@ 0x25
 800b994:	d1f9      	bne.n	800b98a <_vfiprintf_r+0x7a>
 800b996:	ebba 0b04 	subs.w	fp, sl, r4
 800b99a:	d00b      	beq.n	800b9b4 <_vfiprintf_r+0xa4>
 800b99c:	465b      	mov	r3, fp
 800b99e:	4622      	mov	r2, r4
 800b9a0:	4629      	mov	r1, r5
 800b9a2:	4630      	mov	r0, r6
 800b9a4:	f7ff ffa1 	bl	800b8ea <__sfputs_r>
 800b9a8:	3001      	adds	r0, #1
 800b9aa:	f000 80a7 	beq.w	800bafc <_vfiprintf_r+0x1ec>
 800b9ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b9b0:	445a      	add	r2, fp
 800b9b2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b9b4:	f89a 3000 	ldrb.w	r3, [sl]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 809f 	beq.w	800bafc <_vfiprintf_r+0x1ec>
 800b9be:	2300      	movs	r3, #0
 800b9c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b9c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b9c8:	f10a 0a01 	add.w	sl, sl, #1
 800b9cc:	9304      	str	r3, [sp, #16]
 800b9ce:	9307      	str	r3, [sp, #28]
 800b9d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b9d4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b9d6:	4654      	mov	r4, sl
 800b9d8:	2205      	movs	r2, #5
 800b9da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9de:	4853      	ldr	r0, [pc, #332]	@ (800bb2c <_vfiprintf_r+0x21c>)
 800b9e0:	f7f4 fbf6 	bl	80001d0 <memchr>
 800b9e4:	9a04      	ldr	r2, [sp, #16]
 800b9e6:	b9d8      	cbnz	r0, 800ba20 <_vfiprintf_r+0x110>
 800b9e8:	06d1      	lsls	r1, r2, #27
 800b9ea:	bf44      	itt	mi
 800b9ec:	2320      	movmi	r3, #32
 800b9ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9f2:	0713      	lsls	r3, r2, #28
 800b9f4:	bf44      	itt	mi
 800b9f6:	232b      	movmi	r3, #43	@ 0x2b
 800b9f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b9fc:	f89a 3000 	ldrb.w	r3, [sl]
 800ba00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba02:	d015      	beq.n	800ba30 <_vfiprintf_r+0x120>
 800ba04:	9a07      	ldr	r2, [sp, #28]
 800ba06:	4654      	mov	r4, sl
 800ba08:	2000      	movs	r0, #0
 800ba0a:	f04f 0c0a 	mov.w	ip, #10
 800ba0e:	4621      	mov	r1, r4
 800ba10:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ba14:	3b30      	subs	r3, #48	@ 0x30
 800ba16:	2b09      	cmp	r3, #9
 800ba18:	d94b      	bls.n	800bab2 <_vfiprintf_r+0x1a2>
 800ba1a:	b1b0      	cbz	r0, 800ba4a <_vfiprintf_r+0x13a>
 800ba1c:	9207      	str	r2, [sp, #28]
 800ba1e:	e014      	b.n	800ba4a <_vfiprintf_r+0x13a>
 800ba20:	eba0 0308 	sub.w	r3, r0, r8
 800ba24:	fa09 f303 	lsl.w	r3, r9, r3
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	9304      	str	r3, [sp, #16]
 800ba2c:	46a2      	mov	sl, r4
 800ba2e:	e7d2      	b.n	800b9d6 <_vfiprintf_r+0xc6>
 800ba30:	9b03      	ldr	r3, [sp, #12]
 800ba32:	1d19      	adds	r1, r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	9103      	str	r1, [sp, #12]
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	bfbb      	ittet	lt
 800ba3c:	425b      	neglt	r3, r3
 800ba3e:	f042 0202 	orrlt.w	r2, r2, #2
 800ba42:	9307      	strge	r3, [sp, #28]
 800ba44:	9307      	strlt	r3, [sp, #28]
 800ba46:	bfb8      	it	lt
 800ba48:	9204      	strlt	r2, [sp, #16]
 800ba4a:	7823      	ldrb	r3, [r4, #0]
 800ba4c:	2b2e      	cmp	r3, #46	@ 0x2e
 800ba4e:	d10a      	bne.n	800ba66 <_vfiprintf_r+0x156>
 800ba50:	7863      	ldrb	r3, [r4, #1]
 800ba52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ba54:	d132      	bne.n	800babc <_vfiprintf_r+0x1ac>
 800ba56:	9b03      	ldr	r3, [sp, #12]
 800ba58:	1d1a      	adds	r2, r3, #4
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	9203      	str	r2, [sp, #12]
 800ba5e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ba62:	3402      	adds	r4, #2
 800ba64:	9305      	str	r3, [sp, #20]
 800ba66:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bb3c <_vfiprintf_r+0x22c>
 800ba6a:	7821      	ldrb	r1, [r4, #0]
 800ba6c:	2203      	movs	r2, #3
 800ba6e:	4650      	mov	r0, sl
 800ba70:	f7f4 fbae 	bl	80001d0 <memchr>
 800ba74:	b138      	cbz	r0, 800ba86 <_vfiprintf_r+0x176>
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	eba0 000a 	sub.w	r0, r0, sl
 800ba7c:	2240      	movs	r2, #64	@ 0x40
 800ba7e:	4082      	lsls	r2, r0
 800ba80:	4313      	orrs	r3, r2
 800ba82:	3401      	adds	r4, #1
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba8a:	4829      	ldr	r0, [pc, #164]	@ (800bb30 <_vfiprintf_r+0x220>)
 800ba8c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ba90:	2206      	movs	r2, #6
 800ba92:	f7f4 fb9d 	bl	80001d0 <memchr>
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d03f      	beq.n	800bb1a <_vfiprintf_r+0x20a>
 800ba9a:	4b26      	ldr	r3, [pc, #152]	@ (800bb34 <_vfiprintf_r+0x224>)
 800ba9c:	bb1b      	cbnz	r3, 800bae6 <_vfiprintf_r+0x1d6>
 800ba9e:	9b03      	ldr	r3, [sp, #12]
 800baa0:	3307      	adds	r3, #7
 800baa2:	f023 0307 	bic.w	r3, r3, #7
 800baa6:	3308      	adds	r3, #8
 800baa8:	9303      	str	r3, [sp, #12]
 800baaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800baac:	443b      	add	r3, r7
 800baae:	9309      	str	r3, [sp, #36]	@ 0x24
 800bab0:	e76a      	b.n	800b988 <_vfiprintf_r+0x78>
 800bab2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bab6:	460c      	mov	r4, r1
 800bab8:	2001      	movs	r0, #1
 800baba:	e7a8      	b.n	800ba0e <_vfiprintf_r+0xfe>
 800babc:	2300      	movs	r3, #0
 800babe:	3401      	adds	r4, #1
 800bac0:	9305      	str	r3, [sp, #20]
 800bac2:	4619      	mov	r1, r3
 800bac4:	f04f 0c0a 	mov.w	ip, #10
 800bac8:	4620      	mov	r0, r4
 800baca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bace:	3a30      	subs	r2, #48	@ 0x30
 800bad0:	2a09      	cmp	r2, #9
 800bad2:	d903      	bls.n	800badc <_vfiprintf_r+0x1cc>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d0c6      	beq.n	800ba66 <_vfiprintf_r+0x156>
 800bad8:	9105      	str	r1, [sp, #20]
 800bada:	e7c4      	b.n	800ba66 <_vfiprintf_r+0x156>
 800badc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bae0:	4604      	mov	r4, r0
 800bae2:	2301      	movs	r3, #1
 800bae4:	e7f0      	b.n	800bac8 <_vfiprintf_r+0x1b8>
 800bae6:	ab03      	add	r3, sp, #12
 800bae8:	9300      	str	r3, [sp, #0]
 800baea:	462a      	mov	r2, r5
 800baec:	4b12      	ldr	r3, [pc, #72]	@ (800bb38 <_vfiprintf_r+0x228>)
 800baee:	a904      	add	r1, sp, #16
 800baf0:	4630      	mov	r0, r6
 800baf2:	f3af 8000 	nop.w
 800baf6:	4607      	mov	r7, r0
 800baf8:	1c78      	adds	r0, r7, #1
 800bafa:	d1d6      	bne.n	800baaa <_vfiprintf_r+0x19a>
 800bafc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bafe:	07d9      	lsls	r1, r3, #31
 800bb00:	d405      	bmi.n	800bb0e <_vfiprintf_r+0x1fe>
 800bb02:	89ab      	ldrh	r3, [r5, #12]
 800bb04:	059a      	lsls	r2, r3, #22
 800bb06:	d402      	bmi.n	800bb0e <_vfiprintf_r+0x1fe>
 800bb08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bb0a:	f7ff fe77 	bl	800b7fc <__retarget_lock_release_recursive>
 800bb0e:	89ab      	ldrh	r3, [r5, #12]
 800bb10:	065b      	lsls	r3, r3, #25
 800bb12:	f53f af1f 	bmi.w	800b954 <_vfiprintf_r+0x44>
 800bb16:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bb18:	e71e      	b.n	800b958 <_vfiprintf_r+0x48>
 800bb1a:	ab03      	add	r3, sp, #12
 800bb1c:	9300      	str	r3, [sp, #0]
 800bb1e:	462a      	mov	r2, r5
 800bb20:	4b05      	ldr	r3, [pc, #20]	@ (800bb38 <_vfiprintf_r+0x228>)
 800bb22:	a904      	add	r1, sp, #16
 800bb24:	4630      	mov	r0, r6
 800bb26:	f000 f879 	bl	800bc1c <_printf_i>
 800bb2a:	e7e4      	b.n	800baf6 <_vfiprintf_r+0x1e6>
 800bb2c:	0800c7c8 	.word	0x0800c7c8
 800bb30:	0800c7d2 	.word	0x0800c7d2
 800bb34:	00000000 	.word	0x00000000
 800bb38:	0800b8eb 	.word	0x0800b8eb
 800bb3c:	0800c7ce 	.word	0x0800c7ce

0800bb40 <_printf_common>:
 800bb40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb44:	4616      	mov	r6, r2
 800bb46:	4698      	mov	r8, r3
 800bb48:	688a      	ldr	r2, [r1, #8]
 800bb4a:	690b      	ldr	r3, [r1, #16]
 800bb4c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bb50:	4293      	cmp	r3, r2
 800bb52:	bfb8      	it	lt
 800bb54:	4613      	movlt	r3, r2
 800bb56:	6033      	str	r3, [r6, #0]
 800bb58:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bb5c:	4607      	mov	r7, r0
 800bb5e:	460c      	mov	r4, r1
 800bb60:	b10a      	cbz	r2, 800bb66 <_printf_common+0x26>
 800bb62:	3301      	adds	r3, #1
 800bb64:	6033      	str	r3, [r6, #0]
 800bb66:	6823      	ldr	r3, [r4, #0]
 800bb68:	0699      	lsls	r1, r3, #26
 800bb6a:	bf42      	ittt	mi
 800bb6c:	6833      	ldrmi	r3, [r6, #0]
 800bb6e:	3302      	addmi	r3, #2
 800bb70:	6033      	strmi	r3, [r6, #0]
 800bb72:	6825      	ldr	r5, [r4, #0]
 800bb74:	f015 0506 	ands.w	r5, r5, #6
 800bb78:	d106      	bne.n	800bb88 <_printf_common+0x48>
 800bb7a:	f104 0a19 	add.w	sl, r4, #25
 800bb7e:	68e3      	ldr	r3, [r4, #12]
 800bb80:	6832      	ldr	r2, [r6, #0]
 800bb82:	1a9b      	subs	r3, r3, r2
 800bb84:	42ab      	cmp	r3, r5
 800bb86:	dc26      	bgt.n	800bbd6 <_printf_common+0x96>
 800bb88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bb8c:	6822      	ldr	r2, [r4, #0]
 800bb8e:	3b00      	subs	r3, #0
 800bb90:	bf18      	it	ne
 800bb92:	2301      	movne	r3, #1
 800bb94:	0692      	lsls	r2, r2, #26
 800bb96:	d42b      	bmi.n	800bbf0 <_printf_common+0xb0>
 800bb98:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bb9c:	4641      	mov	r1, r8
 800bb9e:	4638      	mov	r0, r7
 800bba0:	47c8      	blx	r9
 800bba2:	3001      	adds	r0, #1
 800bba4:	d01e      	beq.n	800bbe4 <_printf_common+0xa4>
 800bba6:	6823      	ldr	r3, [r4, #0]
 800bba8:	6922      	ldr	r2, [r4, #16]
 800bbaa:	f003 0306 	and.w	r3, r3, #6
 800bbae:	2b04      	cmp	r3, #4
 800bbb0:	bf02      	ittt	eq
 800bbb2:	68e5      	ldreq	r5, [r4, #12]
 800bbb4:	6833      	ldreq	r3, [r6, #0]
 800bbb6:	1aed      	subeq	r5, r5, r3
 800bbb8:	68a3      	ldr	r3, [r4, #8]
 800bbba:	bf0c      	ite	eq
 800bbbc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bbc0:	2500      	movne	r5, #0
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	bfc4      	itt	gt
 800bbc6:	1a9b      	subgt	r3, r3, r2
 800bbc8:	18ed      	addgt	r5, r5, r3
 800bbca:	2600      	movs	r6, #0
 800bbcc:	341a      	adds	r4, #26
 800bbce:	42b5      	cmp	r5, r6
 800bbd0:	d11a      	bne.n	800bc08 <_printf_common+0xc8>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	e008      	b.n	800bbe8 <_printf_common+0xa8>
 800bbd6:	2301      	movs	r3, #1
 800bbd8:	4652      	mov	r2, sl
 800bbda:	4641      	mov	r1, r8
 800bbdc:	4638      	mov	r0, r7
 800bbde:	47c8      	blx	r9
 800bbe0:	3001      	adds	r0, #1
 800bbe2:	d103      	bne.n	800bbec <_printf_common+0xac>
 800bbe4:	f04f 30ff 	mov.w	r0, #4294967295
 800bbe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbec:	3501      	adds	r5, #1
 800bbee:	e7c6      	b.n	800bb7e <_printf_common+0x3e>
 800bbf0:	18e1      	adds	r1, r4, r3
 800bbf2:	1c5a      	adds	r2, r3, #1
 800bbf4:	2030      	movs	r0, #48	@ 0x30
 800bbf6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bbfa:	4422      	add	r2, r4
 800bbfc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bc00:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bc04:	3302      	adds	r3, #2
 800bc06:	e7c7      	b.n	800bb98 <_printf_common+0x58>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	4622      	mov	r2, r4
 800bc0c:	4641      	mov	r1, r8
 800bc0e:	4638      	mov	r0, r7
 800bc10:	47c8      	blx	r9
 800bc12:	3001      	adds	r0, #1
 800bc14:	d0e6      	beq.n	800bbe4 <_printf_common+0xa4>
 800bc16:	3601      	adds	r6, #1
 800bc18:	e7d9      	b.n	800bbce <_printf_common+0x8e>
	...

0800bc1c <_printf_i>:
 800bc1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc20:	7e0f      	ldrb	r7, [r1, #24]
 800bc22:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bc24:	2f78      	cmp	r7, #120	@ 0x78
 800bc26:	4691      	mov	r9, r2
 800bc28:	4680      	mov	r8, r0
 800bc2a:	460c      	mov	r4, r1
 800bc2c:	469a      	mov	sl, r3
 800bc2e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bc32:	d807      	bhi.n	800bc44 <_printf_i+0x28>
 800bc34:	2f62      	cmp	r7, #98	@ 0x62
 800bc36:	d80a      	bhi.n	800bc4e <_printf_i+0x32>
 800bc38:	2f00      	cmp	r7, #0
 800bc3a:	f000 80d1 	beq.w	800bde0 <_printf_i+0x1c4>
 800bc3e:	2f58      	cmp	r7, #88	@ 0x58
 800bc40:	f000 80b8 	beq.w	800bdb4 <_printf_i+0x198>
 800bc44:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bc48:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bc4c:	e03a      	b.n	800bcc4 <_printf_i+0xa8>
 800bc4e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bc52:	2b15      	cmp	r3, #21
 800bc54:	d8f6      	bhi.n	800bc44 <_printf_i+0x28>
 800bc56:	a101      	add	r1, pc, #4	@ (adr r1, 800bc5c <_printf_i+0x40>)
 800bc58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bc5c:	0800bcb5 	.word	0x0800bcb5
 800bc60:	0800bcc9 	.word	0x0800bcc9
 800bc64:	0800bc45 	.word	0x0800bc45
 800bc68:	0800bc45 	.word	0x0800bc45
 800bc6c:	0800bc45 	.word	0x0800bc45
 800bc70:	0800bc45 	.word	0x0800bc45
 800bc74:	0800bcc9 	.word	0x0800bcc9
 800bc78:	0800bc45 	.word	0x0800bc45
 800bc7c:	0800bc45 	.word	0x0800bc45
 800bc80:	0800bc45 	.word	0x0800bc45
 800bc84:	0800bc45 	.word	0x0800bc45
 800bc88:	0800bdc7 	.word	0x0800bdc7
 800bc8c:	0800bcf3 	.word	0x0800bcf3
 800bc90:	0800bd81 	.word	0x0800bd81
 800bc94:	0800bc45 	.word	0x0800bc45
 800bc98:	0800bc45 	.word	0x0800bc45
 800bc9c:	0800bde9 	.word	0x0800bde9
 800bca0:	0800bc45 	.word	0x0800bc45
 800bca4:	0800bcf3 	.word	0x0800bcf3
 800bca8:	0800bc45 	.word	0x0800bc45
 800bcac:	0800bc45 	.word	0x0800bc45
 800bcb0:	0800bd89 	.word	0x0800bd89
 800bcb4:	6833      	ldr	r3, [r6, #0]
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	6032      	str	r2, [r6, #0]
 800bcbc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcc0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bcc4:	2301      	movs	r3, #1
 800bcc6:	e09c      	b.n	800be02 <_printf_i+0x1e6>
 800bcc8:	6833      	ldr	r3, [r6, #0]
 800bcca:	6820      	ldr	r0, [r4, #0]
 800bccc:	1d19      	adds	r1, r3, #4
 800bcce:	6031      	str	r1, [r6, #0]
 800bcd0:	0606      	lsls	r6, r0, #24
 800bcd2:	d501      	bpl.n	800bcd8 <_printf_i+0xbc>
 800bcd4:	681d      	ldr	r5, [r3, #0]
 800bcd6:	e003      	b.n	800bce0 <_printf_i+0xc4>
 800bcd8:	0645      	lsls	r5, r0, #25
 800bcda:	d5fb      	bpl.n	800bcd4 <_printf_i+0xb8>
 800bcdc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bce0:	2d00      	cmp	r5, #0
 800bce2:	da03      	bge.n	800bcec <_printf_i+0xd0>
 800bce4:	232d      	movs	r3, #45	@ 0x2d
 800bce6:	426d      	negs	r5, r5
 800bce8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcec:	4858      	ldr	r0, [pc, #352]	@ (800be50 <_printf_i+0x234>)
 800bcee:	230a      	movs	r3, #10
 800bcf0:	e011      	b.n	800bd16 <_printf_i+0xfa>
 800bcf2:	6821      	ldr	r1, [r4, #0]
 800bcf4:	6833      	ldr	r3, [r6, #0]
 800bcf6:	0608      	lsls	r0, r1, #24
 800bcf8:	f853 5b04 	ldr.w	r5, [r3], #4
 800bcfc:	d402      	bmi.n	800bd04 <_printf_i+0xe8>
 800bcfe:	0649      	lsls	r1, r1, #25
 800bd00:	bf48      	it	mi
 800bd02:	b2ad      	uxthmi	r5, r5
 800bd04:	2f6f      	cmp	r7, #111	@ 0x6f
 800bd06:	4852      	ldr	r0, [pc, #328]	@ (800be50 <_printf_i+0x234>)
 800bd08:	6033      	str	r3, [r6, #0]
 800bd0a:	bf14      	ite	ne
 800bd0c:	230a      	movne	r3, #10
 800bd0e:	2308      	moveq	r3, #8
 800bd10:	2100      	movs	r1, #0
 800bd12:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd16:	6866      	ldr	r6, [r4, #4]
 800bd18:	60a6      	str	r6, [r4, #8]
 800bd1a:	2e00      	cmp	r6, #0
 800bd1c:	db05      	blt.n	800bd2a <_printf_i+0x10e>
 800bd1e:	6821      	ldr	r1, [r4, #0]
 800bd20:	432e      	orrs	r6, r5
 800bd22:	f021 0104 	bic.w	r1, r1, #4
 800bd26:	6021      	str	r1, [r4, #0]
 800bd28:	d04b      	beq.n	800bdc2 <_printf_i+0x1a6>
 800bd2a:	4616      	mov	r6, r2
 800bd2c:	fbb5 f1f3 	udiv	r1, r5, r3
 800bd30:	fb03 5711 	mls	r7, r3, r1, r5
 800bd34:	5dc7      	ldrb	r7, [r0, r7]
 800bd36:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bd3a:	462f      	mov	r7, r5
 800bd3c:	42bb      	cmp	r3, r7
 800bd3e:	460d      	mov	r5, r1
 800bd40:	d9f4      	bls.n	800bd2c <_printf_i+0x110>
 800bd42:	2b08      	cmp	r3, #8
 800bd44:	d10b      	bne.n	800bd5e <_printf_i+0x142>
 800bd46:	6823      	ldr	r3, [r4, #0]
 800bd48:	07df      	lsls	r7, r3, #31
 800bd4a:	d508      	bpl.n	800bd5e <_printf_i+0x142>
 800bd4c:	6923      	ldr	r3, [r4, #16]
 800bd4e:	6861      	ldr	r1, [r4, #4]
 800bd50:	4299      	cmp	r1, r3
 800bd52:	bfde      	ittt	le
 800bd54:	2330      	movle	r3, #48	@ 0x30
 800bd56:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bd5a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bd5e:	1b92      	subs	r2, r2, r6
 800bd60:	6122      	str	r2, [r4, #16]
 800bd62:	f8cd a000 	str.w	sl, [sp]
 800bd66:	464b      	mov	r3, r9
 800bd68:	aa03      	add	r2, sp, #12
 800bd6a:	4621      	mov	r1, r4
 800bd6c:	4640      	mov	r0, r8
 800bd6e:	f7ff fee7 	bl	800bb40 <_printf_common>
 800bd72:	3001      	adds	r0, #1
 800bd74:	d14a      	bne.n	800be0c <_printf_i+0x1f0>
 800bd76:	f04f 30ff 	mov.w	r0, #4294967295
 800bd7a:	b004      	add	sp, #16
 800bd7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd80:	6823      	ldr	r3, [r4, #0]
 800bd82:	f043 0320 	orr.w	r3, r3, #32
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	4832      	ldr	r0, [pc, #200]	@ (800be54 <_printf_i+0x238>)
 800bd8a:	2778      	movs	r7, #120	@ 0x78
 800bd8c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bd90:	6823      	ldr	r3, [r4, #0]
 800bd92:	6831      	ldr	r1, [r6, #0]
 800bd94:	061f      	lsls	r7, r3, #24
 800bd96:	f851 5b04 	ldr.w	r5, [r1], #4
 800bd9a:	d402      	bmi.n	800bda2 <_printf_i+0x186>
 800bd9c:	065f      	lsls	r7, r3, #25
 800bd9e:	bf48      	it	mi
 800bda0:	b2ad      	uxthmi	r5, r5
 800bda2:	6031      	str	r1, [r6, #0]
 800bda4:	07d9      	lsls	r1, r3, #31
 800bda6:	bf44      	itt	mi
 800bda8:	f043 0320 	orrmi.w	r3, r3, #32
 800bdac:	6023      	strmi	r3, [r4, #0]
 800bdae:	b11d      	cbz	r5, 800bdb8 <_printf_i+0x19c>
 800bdb0:	2310      	movs	r3, #16
 800bdb2:	e7ad      	b.n	800bd10 <_printf_i+0xf4>
 800bdb4:	4826      	ldr	r0, [pc, #152]	@ (800be50 <_printf_i+0x234>)
 800bdb6:	e7e9      	b.n	800bd8c <_printf_i+0x170>
 800bdb8:	6823      	ldr	r3, [r4, #0]
 800bdba:	f023 0320 	bic.w	r3, r3, #32
 800bdbe:	6023      	str	r3, [r4, #0]
 800bdc0:	e7f6      	b.n	800bdb0 <_printf_i+0x194>
 800bdc2:	4616      	mov	r6, r2
 800bdc4:	e7bd      	b.n	800bd42 <_printf_i+0x126>
 800bdc6:	6833      	ldr	r3, [r6, #0]
 800bdc8:	6825      	ldr	r5, [r4, #0]
 800bdca:	6961      	ldr	r1, [r4, #20]
 800bdcc:	1d18      	adds	r0, r3, #4
 800bdce:	6030      	str	r0, [r6, #0]
 800bdd0:	062e      	lsls	r6, r5, #24
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	d501      	bpl.n	800bdda <_printf_i+0x1be>
 800bdd6:	6019      	str	r1, [r3, #0]
 800bdd8:	e002      	b.n	800bde0 <_printf_i+0x1c4>
 800bdda:	0668      	lsls	r0, r5, #25
 800bddc:	d5fb      	bpl.n	800bdd6 <_printf_i+0x1ba>
 800bdde:	8019      	strh	r1, [r3, #0]
 800bde0:	2300      	movs	r3, #0
 800bde2:	6123      	str	r3, [r4, #16]
 800bde4:	4616      	mov	r6, r2
 800bde6:	e7bc      	b.n	800bd62 <_printf_i+0x146>
 800bde8:	6833      	ldr	r3, [r6, #0]
 800bdea:	1d1a      	adds	r2, r3, #4
 800bdec:	6032      	str	r2, [r6, #0]
 800bdee:	681e      	ldr	r6, [r3, #0]
 800bdf0:	6862      	ldr	r2, [r4, #4]
 800bdf2:	2100      	movs	r1, #0
 800bdf4:	4630      	mov	r0, r6
 800bdf6:	f7f4 f9eb 	bl	80001d0 <memchr>
 800bdfa:	b108      	cbz	r0, 800be00 <_printf_i+0x1e4>
 800bdfc:	1b80      	subs	r0, r0, r6
 800bdfe:	6060      	str	r0, [r4, #4]
 800be00:	6863      	ldr	r3, [r4, #4]
 800be02:	6123      	str	r3, [r4, #16]
 800be04:	2300      	movs	r3, #0
 800be06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be0a:	e7aa      	b.n	800bd62 <_printf_i+0x146>
 800be0c:	6923      	ldr	r3, [r4, #16]
 800be0e:	4632      	mov	r2, r6
 800be10:	4649      	mov	r1, r9
 800be12:	4640      	mov	r0, r8
 800be14:	47d0      	blx	sl
 800be16:	3001      	adds	r0, #1
 800be18:	d0ad      	beq.n	800bd76 <_printf_i+0x15a>
 800be1a:	6823      	ldr	r3, [r4, #0]
 800be1c:	079b      	lsls	r3, r3, #30
 800be1e:	d413      	bmi.n	800be48 <_printf_i+0x22c>
 800be20:	68e0      	ldr	r0, [r4, #12]
 800be22:	9b03      	ldr	r3, [sp, #12]
 800be24:	4298      	cmp	r0, r3
 800be26:	bfb8      	it	lt
 800be28:	4618      	movlt	r0, r3
 800be2a:	e7a6      	b.n	800bd7a <_printf_i+0x15e>
 800be2c:	2301      	movs	r3, #1
 800be2e:	4632      	mov	r2, r6
 800be30:	4649      	mov	r1, r9
 800be32:	4640      	mov	r0, r8
 800be34:	47d0      	blx	sl
 800be36:	3001      	adds	r0, #1
 800be38:	d09d      	beq.n	800bd76 <_printf_i+0x15a>
 800be3a:	3501      	adds	r5, #1
 800be3c:	68e3      	ldr	r3, [r4, #12]
 800be3e:	9903      	ldr	r1, [sp, #12]
 800be40:	1a5b      	subs	r3, r3, r1
 800be42:	42ab      	cmp	r3, r5
 800be44:	dcf2      	bgt.n	800be2c <_printf_i+0x210>
 800be46:	e7eb      	b.n	800be20 <_printf_i+0x204>
 800be48:	2500      	movs	r5, #0
 800be4a:	f104 0619 	add.w	r6, r4, #25
 800be4e:	e7f5      	b.n	800be3c <_printf_i+0x220>
 800be50:	0800c7d9 	.word	0x0800c7d9
 800be54:	0800c7ea 	.word	0x0800c7ea

0800be58 <__sflush_r>:
 800be58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800be5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be60:	0716      	lsls	r6, r2, #28
 800be62:	4605      	mov	r5, r0
 800be64:	460c      	mov	r4, r1
 800be66:	d454      	bmi.n	800bf12 <__sflush_r+0xba>
 800be68:	684b      	ldr	r3, [r1, #4]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	dc02      	bgt.n	800be74 <__sflush_r+0x1c>
 800be6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800be70:	2b00      	cmp	r3, #0
 800be72:	dd48      	ble.n	800bf06 <__sflush_r+0xae>
 800be74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800be76:	2e00      	cmp	r6, #0
 800be78:	d045      	beq.n	800bf06 <__sflush_r+0xae>
 800be7a:	2300      	movs	r3, #0
 800be7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800be80:	682f      	ldr	r7, [r5, #0]
 800be82:	6a21      	ldr	r1, [r4, #32]
 800be84:	602b      	str	r3, [r5, #0]
 800be86:	d030      	beq.n	800beea <__sflush_r+0x92>
 800be88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800be8a:	89a3      	ldrh	r3, [r4, #12]
 800be8c:	0759      	lsls	r1, r3, #29
 800be8e:	d505      	bpl.n	800be9c <__sflush_r+0x44>
 800be90:	6863      	ldr	r3, [r4, #4]
 800be92:	1ad2      	subs	r2, r2, r3
 800be94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800be96:	b10b      	cbz	r3, 800be9c <__sflush_r+0x44>
 800be98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800be9a:	1ad2      	subs	r2, r2, r3
 800be9c:	2300      	movs	r3, #0
 800be9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bea0:	6a21      	ldr	r1, [r4, #32]
 800bea2:	4628      	mov	r0, r5
 800bea4:	47b0      	blx	r6
 800bea6:	1c43      	adds	r3, r0, #1
 800bea8:	89a3      	ldrh	r3, [r4, #12]
 800beaa:	d106      	bne.n	800beba <__sflush_r+0x62>
 800beac:	6829      	ldr	r1, [r5, #0]
 800beae:	291d      	cmp	r1, #29
 800beb0:	d82b      	bhi.n	800bf0a <__sflush_r+0xb2>
 800beb2:	4a2a      	ldr	r2, [pc, #168]	@ (800bf5c <__sflush_r+0x104>)
 800beb4:	40ca      	lsrs	r2, r1
 800beb6:	07d6      	lsls	r6, r2, #31
 800beb8:	d527      	bpl.n	800bf0a <__sflush_r+0xb2>
 800beba:	2200      	movs	r2, #0
 800bebc:	6062      	str	r2, [r4, #4]
 800bebe:	04d9      	lsls	r1, r3, #19
 800bec0:	6922      	ldr	r2, [r4, #16]
 800bec2:	6022      	str	r2, [r4, #0]
 800bec4:	d504      	bpl.n	800bed0 <__sflush_r+0x78>
 800bec6:	1c42      	adds	r2, r0, #1
 800bec8:	d101      	bne.n	800bece <__sflush_r+0x76>
 800beca:	682b      	ldr	r3, [r5, #0]
 800becc:	b903      	cbnz	r3, 800bed0 <__sflush_r+0x78>
 800bece:	6560      	str	r0, [r4, #84]	@ 0x54
 800bed0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bed2:	602f      	str	r7, [r5, #0]
 800bed4:	b1b9      	cbz	r1, 800bf06 <__sflush_r+0xae>
 800bed6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800beda:	4299      	cmp	r1, r3
 800bedc:	d002      	beq.n	800bee4 <__sflush_r+0x8c>
 800bede:	4628      	mov	r0, r5
 800bee0:	f7ff fca2 	bl	800b828 <_free_r>
 800bee4:	2300      	movs	r3, #0
 800bee6:	6363      	str	r3, [r4, #52]	@ 0x34
 800bee8:	e00d      	b.n	800bf06 <__sflush_r+0xae>
 800beea:	2301      	movs	r3, #1
 800beec:	4628      	mov	r0, r5
 800beee:	47b0      	blx	r6
 800bef0:	4602      	mov	r2, r0
 800bef2:	1c50      	adds	r0, r2, #1
 800bef4:	d1c9      	bne.n	800be8a <__sflush_r+0x32>
 800bef6:	682b      	ldr	r3, [r5, #0]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d0c6      	beq.n	800be8a <__sflush_r+0x32>
 800befc:	2b1d      	cmp	r3, #29
 800befe:	d001      	beq.n	800bf04 <__sflush_r+0xac>
 800bf00:	2b16      	cmp	r3, #22
 800bf02:	d11e      	bne.n	800bf42 <__sflush_r+0xea>
 800bf04:	602f      	str	r7, [r5, #0]
 800bf06:	2000      	movs	r0, #0
 800bf08:	e022      	b.n	800bf50 <__sflush_r+0xf8>
 800bf0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf0e:	b21b      	sxth	r3, r3
 800bf10:	e01b      	b.n	800bf4a <__sflush_r+0xf2>
 800bf12:	690f      	ldr	r7, [r1, #16]
 800bf14:	2f00      	cmp	r7, #0
 800bf16:	d0f6      	beq.n	800bf06 <__sflush_r+0xae>
 800bf18:	0793      	lsls	r3, r2, #30
 800bf1a:	680e      	ldr	r6, [r1, #0]
 800bf1c:	bf08      	it	eq
 800bf1e:	694b      	ldreq	r3, [r1, #20]
 800bf20:	600f      	str	r7, [r1, #0]
 800bf22:	bf18      	it	ne
 800bf24:	2300      	movne	r3, #0
 800bf26:	eba6 0807 	sub.w	r8, r6, r7
 800bf2a:	608b      	str	r3, [r1, #8]
 800bf2c:	f1b8 0f00 	cmp.w	r8, #0
 800bf30:	dde9      	ble.n	800bf06 <__sflush_r+0xae>
 800bf32:	6a21      	ldr	r1, [r4, #32]
 800bf34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bf36:	4643      	mov	r3, r8
 800bf38:	463a      	mov	r2, r7
 800bf3a:	4628      	mov	r0, r5
 800bf3c:	47b0      	blx	r6
 800bf3e:	2800      	cmp	r0, #0
 800bf40:	dc08      	bgt.n	800bf54 <__sflush_r+0xfc>
 800bf42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf4a:	81a3      	strh	r3, [r4, #12]
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf54:	4407      	add	r7, r0
 800bf56:	eba8 0800 	sub.w	r8, r8, r0
 800bf5a:	e7e7      	b.n	800bf2c <__sflush_r+0xd4>
 800bf5c:	20400001 	.word	0x20400001

0800bf60 <_fflush_r>:
 800bf60:	b538      	push	{r3, r4, r5, lr}
 800bf62:	690b      	ldr	r3, [r1, #16]
 800bf64:	4605      	mov	r5, r0
 800bf66:	460c      	mov	r4, r1
 800bf68:	b913      	cbnz	r3, 800bf70 <_fflush_r+0x10>
 800bf6a:	2500      	movs	r5, #0
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	b118      	cbz	r0, 800bf7a <_fflush_r+0x1a>
 800bf72:	6a03      	ldr	r3, [r0, #32]
 800bf74:	b90b      	cbnz	r3, 800bf7a <_fflush_r+0x1a>
 800bf76:	f7ff f96b 	bl	800b250 <__sinit>
 800bf7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d0f3      	beq.n	800bf6a <_fflush_r+0xa>
 800bf82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bf84:	07d0      	lsls	r0, r2, #31
 800bf86:	d404      	bmi.n	800bf92 <_fflush_r+0x32>
 800bf88:	0599      	lsls	r1, r3, #22
 800bf8a:	d402      	bmi.n	800bf92 <_fflush_r+0x32>
 800bf8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf8e:	f7ff fc34 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800bf92:	4628      	mov	r0, r5
 800bf94:	4621      	mov	r1, r4
 800bf96:	f7ff ff5f 	bl	800be58 <__sflush_r>
 800bf9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf9c:	07da      	lsls	r2, r3, #31
 800bf9e:	4605      	mov	r5, r0
 800bfa0:	d4e4      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfa2:	89a3      	ldrh	r3, [r4, #12]
 800bfa4:	059b      	lsls	r3, r3, #22
 800bfa6:	d4e1      	bmi.n	800bf6c <_fflush_r+0xc>
 800bfa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfaa:	f7ff fc27 	bl	800b7fc <__retarget_lock_release_recursive>
 800bfae:	e7dd      	b.n	800bf6c <_fflush_r+0xc>

0800bfb0 <__swhatbuf_r>:
 800bfb0:	b570      	push	{r4, r5, r6, lr}
 800bfb2:	460c      	mov	r4, r1
 800bfb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bfb8:	2900      	cmp	r1, #0
 800bfba:	b096      	sub	sp, #88	@ 0x58
 800bfbc:	4615      	mov	r5, r2
 800bfbe:	461e      	mov	r6, r3
 800bfc0:	da0d      	bge.n	800bfde <__swhatbuf_r+0x2e>
 800bfc2:	89a3      	ldrh	r3, [r4, #12]
 800bfc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bfc8:	f04f 0100 	mov.w	r1, #0
 800bfcc:	bf14      	ite	ne
 800bfce:	2340      	movne	r3, #64	@ 0x40
 800bfd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bfd4:	2000      	movs	r0, #0
 800bfd6:	6031      	str	r1, [r6, #0]
 800bfd8:	602b      	str	r3, [r5, #0]
 800bfda:	b016      	add	sp, #88	@ 0x58
 800bfdc:	bd70      	pop	{r4, r5, r6, pc}
 800bfde:	466a      	mov	r2, sp
 800bfe0:	f000 f8ac 	bl	800c13c <_fstat_r>
 800bfe4:	2800      	cmp	r0, #0
 800bfe6:	dbec      	blt.n	800bfc2 <__swhatbuf_r+0x12>
 800bfe8:	9901      	ldr	r1, [sp, #4]
 800bfea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bfee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bff2:	4259      	negs	r1, r3
 800bff4:	4159      	adcs	r1, r3
 800bff6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bffa:	e7eb      	b.n	800bfd4 <__swhatbuf_r+0x24>

0800bffc <__smakebuf_r>:
 800bffc:	898b      	ldrh	r3, [r1, #12]
 800bffe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c000:	079d      	lsls	r5, r3, #30
 800c002:	4606      	mov	r6, r0
 800c004:	460c      	mov	r4, r1
 800c006:	d507      	bpl.n	800c018 <__smakebuf_r+0x1c>
 800c008:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c00c:	6023      	str	r3, [r4, #0]
 800c00e:	6123      	str	r3, [r4, #16]
 800c010:	2301      	movs	r3, #1
 800c012:	6163      	str	r3, [r4, #20]
 800c014:	b003      	add	sp, #12
 800c016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c018:	ab01      	add	r3, sp, #4
 800c01a:	466a      	mov	r2, sp
 800c01c:	f7ff ffc8 	bl	800bfb0 <__swhatbuf_r>
 800c020:	9f00      	ldr	r7, [sp, #0]
 800c022:	4605      	mov	r5, r0
 800c024:	4639      	mov	r1, r7
 800c026:	4630      	mov	r0, r6
 800c028:	f7fe fffa 	bl	800b020 <_malloc_r>
 800c02c:	b948      	cbnz	r0, 800c042 <__smakebuf_r+0x46>
 800c02e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c032:	059a      	lsls	r2, r3, #22
 800c034:	d4ee      	bmi.n	800c014 <__smakebuf_r+0x18>
 800c036:	f023 0303 	bic.w	r3, r3, #3
 800c03a:	f043 0302 	orr.w	r3, r3, #2
 800c03e:	81a3      	strh	r3, [r4, #12]
 800c040:	e7e2      	b.n	800c008 <__smakebuf_r+0xc>
 800c042:	89a3      	ldrh	r3, [r4, #12]
 800c044:	6020      	str	r0, [r4, #0]
 800c046:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c04a:	81a3      	strh	r3, [r4, #12]
 800c04c:	9b01      	ldr	r3, [sp, #4]
 800c04e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c052:	b15b      	cbz	r3, 800c06c <__smakebuf_r+0x70>
 800c054:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c058:	4630      	mov	r0, r6
 800c05a:	f000 f881 	bl	800c160 <_isatty_r>
 800c05e:	b128      	cbz	r0, 800c06c <__smakebuf_r+0x70>
 800c060:	89a3      	ldrh	r3, [r4, #12]
 800c062:	f023 0303 	bic.w	r3, r3, #3
 800c066:	f043 0301 	orr.w	r3, r3, #1
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	89a3      	ldrh	r3, [r4, #12]
 800c06e:	431d      	orrs	r5, r3
 800c070:	81a5      	strh	r5, [r4, #12]
 800c072:	e7cf      	b.n	800c014 <__smakebuf_r+0x18>

0800c074 <_putc_r>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	460d      	mov	r5, r1
 800c078:	4614      	mov	r4, r2
 800c07a:	4606      	mov	r6, r0
 800c07c:	b118      	cbz	r0, 800c086 <_putc_r+0x12>
 800c07e:	6a03      	ldr	r3, [r0, #32]
 800c080:	b90b      	cbnz	r3, 800c086 <_putc_r+0x12>
 800c082:	f7ff f8e5 	bl	800b250 <__sinit>
 800c086:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c088:	07d8      	lsls	r0, r3, #31
 800c08a:	d405      	bmi.n	800c098 <_putc_r+0x24>
 800c08c:	89a3      	ldrh	r3, [r4, #12]
 800c08e:	0599      	lsls	r1, r3, #22
 800c090:	d402      	bmi.n	800c098 <_putc_r+0x24>
 800c092:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c094:	f7ff fbb1 	bl	800b7fa <__retarget_lock_acquire_recursive>
 800c098:	68a3      	ldr	r3, [r4, #8]
 800c09a:	3b01      	subs	r3, #1
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	60a3      	str	r3, [r4, #8]
 800c0a0:	da05      	bge.n	800c0ae <_putc_r+0x3a>
 800c0a2:	69a2      	ldr	r2, [r4, #24]
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	db12      	blt.n	800c0ce <_putc_r+0x5a>
 800c0a8:	b2eb      	uxtb	r3, r5
 800c0aa:	2b0a      	cmp	r3, #10
 800c0ac:	d00f      	beq.n	800c0ce <_putc_r+0x5a>
 800c0ae:	6823      	ldr	r3, [r4, #0]
 800c0b0:	1c5a      	adds	r2, r3, #1
 800c0b2:	6022      	str	r2, [r4, #0]
 800c0b4:	701d      	strb	r5, [r3, #0]
 800c0b6:	b2ed      	uxtb	r5, r5
 800c0b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0ba:	07da      	lsls	r2, r3, #31
 800c0bc:	d405      	bmi.n	800c0ca <_putc_r+0x56>
 800c0be:	89a3      	ldrh	r3, [r4, #12]
 800c0c0:	059b      	lsls	r3, r3, #22
 800c0c2:	d402      	bmi.n	800c0ca <_putc_r+0x56>
 800c0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0c6:	f7ff fb99 	bl	800b7fc <__retarget_lock_release_recursive>
 800c0ca:	4628      	mov	r0, r5
 800c0cc:	bd70      	pop	{r4, r5, r6, pc}
 800c0ce:	4629      	mov	r1, r5
 800c0d0:	4622      	mov	r2, r4
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7ff fa73 	bl	800b5be <__swbuf_r>
 800c0d8:	4605      	mov	r5, r0
 800c0da:	e7ed      	b.n	800c0b8 <_putc_r+0x44>

0800c0dc <_raise_r>:
 800c0dc:	291f      	cmp	r1, #31
 800c0de:	b538      	push	{r3, r4, r5, lr}
 800c0e0:	4605      	mov	r5, r0
 800c0e2:	460c      	mov	r4, r1
 800c0e4:	d904      	bls.n	800c0f0 <_raise_r+0x14>
 800c0e6:	2316      	movs	r3, #22
 800c0e8:	6003      	str	r3, [r0, #0]
 800c0ea:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ee:	bd38      	pop	{r3, r4, r5, pc}
 800c0f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c0f2:	b112      	cbz	r2, 800c0fa <_raise_r+0x1e>
 800c0f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c0f8:	b94b      	cbnz	r3, 800c10e <_raise_r+0x32>
 800c0fa:	4628      	mov	r0, r5
 800c0fc:	f000 f852 	bl	800c1a4 <_getpid_r>
 800c100:	4622      	mov	r2, r4
 800c102:	4601      	mov	r1, r0
 800c104:	4628      	mov	r0, r5
 800c106:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c10a:	f000 b839 	b.w	800c180 <_kill_r>
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d00a      	beq.n	800c128 <_raise_r+0x4c>
 800c112:	1c59      	adds	r1, r3, #1
 800c114:	d103      	bne.n	800c11e <_raise_r+0x42>
 800c116:	2316      	movs	r3, #22
 800c118:	6003      	str	r3, [r0, #0]
 800c11a:	2001      	movs	r0, #1
 800c11c:	e7e7      	b.n	800c0ee <_raise_r+0x12>
 800c11e:	2100      	movs	r1, #0
 800c120:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c124:	4620      	mov	r0, r4
 800c126:	4798      	blx	r3
 800c128:	2000      	movs	r0, #0
 800c12a:	e7e0      	b.n	800c0ee <_raise_r+0x12>

0800c12c <raise>:
 800c12c:	4b02      	ldr	r3, [pc, #8]	@ (800c138 <raise+0xc>)
 800c12e:	4601      	mov	r1, r0
 800c130:	6818      	ldr	r0, [r3, #0]
 800c132:	f7ff bfd3 	b.w	800c0dc <_raise_r>
 800c136:	bf00      	nop
 800c138:	20000038 	.word	0x20000038

0800c13c <_fstat_r>:
 800c13c:	b538      	push	{r3, r4, r5, lr}
 800c13e:	4d07      	ldr	r5, [pc, #28]	@ (800c15c <_fstat_r+0x20>)
 800c140:	2300      	movs	r3, #0
 800c142:	4604      	mov	r4, r0
 800c144:	4608      	mov	r0, r1
 800c146:	4611      	mov	r1, r2
 800c148:	602b      	str	r3, [r5, #0]
 800c14a:	f7f6 fc23 	bl	8002994 <_fstat>
 800c14e:	1c43      	adds	r3, r0, #1
 800c150:	d102      	bne.n	800c158 <_fstat_r+0x1c>
 800c152:	682b      	ldr	r3, [r5, #0]
 800c154:	b103      	cbz	r3, 800c158 <_fstat_r+0x1c>
 800c156:	6023      	str	r3, [r4, #0]
 800c158:	bd38      	pop	{r3, r4, r5, pc}
 800c15a:	bf00      	nop
 800c15c:	20000af8 	.word	0x20000af8

0800c160 <_isatty_r>:
 800c160:	b538      	push	{r3, r4, r5, lr}
 800c162:	4d06      	ldr	r5, [pc, #24]	@ (800c17c <_isatty_r+0x1c>)
 800c164:	2300      	movs	r3, #0
 800c166:	4604      	mov	r4, r0
 800c168:	4608      	mov	r0, r1
 800c16a:	602b      	str	r3, [r5, #0]
 800c16c:	f7f6 fc22 	bl	80029b4 <_isatty>
 800c170:	1c43      	adds	r3, r0, #1
 800c172:	d102      	bne.n	800c17a <_isatty_r+0x1a>
 800c174:	682b      	ldr	r3, [r5, #0]
 800c176:	b103      	cbz	r3, 800c17a <_isatty_r+0x1a>
 800c178:	6023      	str	r3, [r4, #0]
 800c17a:	bd38      	pop	{r3, r4, r5, pc}
 800c17c:	20000af8 	.word	0x20000af8

0800c180 <_kill_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d07      	ldr	r5, [pc, #28]	@ (800c1a0 <_kill_r+0x20>)
 800c184:	2300      	movs	r3, #0
 800c186:	4604      	mov	r4, r0
 800c188:	4608      	mov	r0, r1
 800c18a:	4611      	mov	r1, r2
 800c18c:	602b      	str	r3, [r5, #0]
 800c18e:	f7f6 fbbd 	bl	800290c <_kill>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	d102      	bne.n	800c19c <_kill_r+0x1c>
 800c196:	682b      	ldr	r3, [r5, #0]
 800c198:	b103      	cbz	r3, 800c19c <_kill_r+0x1c>
 800c19a:	6023      	str	r3, [r4, #0]
 800c19c:	bd38      	pop	{r3, r4, r5, pc}
 800c19e:	bf00      	nop
 800c1a0:	20000af8 	.word	0x20000af8

0800c1a4 <_getpid_r>:
 800c1a4:	f7f6 bbaa 	b.w	80028fc <_getpid>

0800c1a8 <_init>:
 800c1a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1aa:	bf00      	nop
 800c1ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ae:	bc08      	pop	{r3}
 800c1b0:	469e      	mov	lr, r3
 800c1b2:	4770      	bx	lr

0800c1b4 <_fini>:
 800c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b6:	bf00      	nop
 800c1b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ba:	bc08      	pop	{r3}
 800c1bc:	469e      	mov	lr, r3
 800c1be:	4770      	bx	lr
