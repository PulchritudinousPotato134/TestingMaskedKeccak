
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a990  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c0  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afe0  0800afe0  0000c088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800afe0  0800afe0  0000bfe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afe8  0800afe8  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afe8  0800afe8  0000bfe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800afec  0800afec  0000bfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800aff0  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000c088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000c088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aa9b  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004247  00000000  00000000  00026b53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0002ada0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010bc  00000000  00000000  0002c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005d16  00000000  00000000  0002d414  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d486  00000000  00000000  0003312a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1af3  00000000  00000000  000505b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001220a3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000063d8  00000000  00000000  001220e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001284c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab08 	.word	0x0800ab08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800ab08 	.word	0x0800ab08

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <get_random64>:
#include "global_rng.h"
#include "stm32f4xx_hal.h"

extern RNG_HandleTypeDef hrng;  // defined in your HAL setup

uint64_t get_random64(void) {
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4815      	ldr	r0, [pc, #84]	@ (8000600 <get_random64+0x64>)
 80005aa:	f005 f8d9 	bl	8005760 <HAL_RNG_GenerateRandomNumber>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <get_random64+0x1c>
        Error_Handler(); // or fail securely
 80005b4:	f000 fdb4 	bl	8001120 <Error_Handler>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4810      	ldr	r0, [pc, #64]	@ (8000600 <get_random64+0x64>)
 80005be:	f005 f8cf 	bl	8005760 <HAL_RNG_GenerateRandomNumber>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <get_random64+0x30>
        Error_Handler();
 80005c8:	f000 fdaa 	bl	8001120 <Error_Handler>
    }
    return ((uint64_t)r1 << 32) | r2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	469a      	mov	sl, r3
 80005d2:	4693      	mov	fp, r2
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	4653      	mov	r3, sl
 80005de:	2200      	movs	r2, #0
 80005e0:	6839      	ldr	r1, [r7, #0]
 80005e2:	2000      	movs	r0, #0
 80005e4:	460c      	mov	r4, r1
 80005e6:	4605      	mov	r5, r0
 80005e8:	ea42 0804 	orr.w	r8, r2, r4
 80005ec:	ea43 0905 	orr.w	r9, r3, r5
 80005f0:	4642      	mov	r2, r8
 80005f2:	464b      	mov	r3, r9
}
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000600:	20000140 	.word	0x20000140

08000604 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0
 800060a:	60f8      	str	r0, [r7, #12]
 800060c:	60b9      	str	r1, [r7, #8]
 800060e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	b29a      	uxth	r2, r3
 8000614:	f04f 33ff 	mov.w	r3, #4294967295
 8000618:	68b9      	ldr	r1, [r7, #8]
 800061a:	4804      	ldr	r0, [pc, #16]	@ (800062c <_write+0x28>)
 800061c:	f005 f9cf 	bl	80059be <HAL_UART_Transmit>
    return len;
 8000620:	687b      	ldr	r3, [r7, #4]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200001a8 	.word	0x200001a8

08000630 <boolean_mask>:
    printf("PASS: SHA3-512 masked output matches reference\n");
}



void boolean_mask(uint64_t out[MASKING_N], uint64_t value) {
 8000630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000632:	b089      	sub	sp, #36	@ 0x24
 8000634:	af00      	add	r7, sp, #0
 8000636:	60f8      	str	r0, [r7, #12]
 8000638:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t tmp = value;
 800063c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000640:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 0; i < MASKING_N - 1; i++) {
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	e01a      	b.n	8000680 <boolean_mask+0x50>
        out[i] = get_random64();  // MUST produce unique value each time
 800064a:	697b      	ldr	r3, [r7, #20]
 800064c:	00db      	lsls	r3, r3, #3
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	18d6      	adds	r6, r2, r3
 8000652:	f7ff ffa3 	bl	800059c <get_random64>
 8000656:	4602      	mov	r2, r0
 8000658:	460b      	mov	r3, r1
 800065a:	e9c6 2300 	strd	r2, r3, [r6]
        tmp ^= out[i];
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	00db      	lsls	r3, r3, #3
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800066a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800066e:	ea80 0402 	eor.w	r4, r0, r2
 8000672:	ea81 0503 	eor.w	r5, r1, r3
 8000676:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 0; i < MASKING_N - 1; i++) {
 800067a:	697b      	ldr	r3, [r7, #20]
 800067c:	3301      	adds	r3, #1
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
 8000682:	2b02      	cmp	r3, #2
 8000684:	dde1      	ble.n	800064a <boolean_mask+0x1a>
    }
    out[MASKING_N - 1] = tmp;  // Final share fixes the XOR
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f103 0118 	add.w	r1, r3, #24
 800068c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000690:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000694:	bf00      	nop
 8000696:	3724      	adds	r7, #36	@ 0x24
 8000698:	46bd      	mov	sp, r7
 800069a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800069c <refresh_xor_partial>:

void refresh_xor_partial(uint64_t *shares, size_t n) {
 800069c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80006a0:	b089      	sub	sp, #36	@ 0x24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
 80006a6:	6039      	str	r1, [r7, #0]
    uint64_t acc = 0;
 80006a8:	f04f 0200 	mov.w	r2, #0
 80006ac:	f04f 0300 	mov.w	r3, #0
 80006b0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (size_t i = 0; i < n - 1; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
 80006b8:	e022      	b.n	8000700 <refresh_xor_partial+0x64>
        uint64_t r = get_random64();
 80006ba:	f7ff ff6f 	bl	800059c <get_random64>
 80006be:	e9c7 0102 	strd	r0, r1, [r7, #8]
        shares[i] ^= r;
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	00db      	lsls	r3, r3, #3
 80006c6:	687a      	ldr	r2, [r7, #4]
 80006c8:	4413      	add	r3, r2
 80006ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	00db      	lsls	r3, r3, #3
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	18d6      	adds	r6, r2, r3
 80006d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006da:	ea80 0802 	eor.w	r8, r0, r2
 80006de:	ea81 0903 	eor.w	r9, r1, r3
 80006e2:	e9c6 8900 	strd	r8, r9, [r6]
        acc ^= r;
 80006e6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80006ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80006ee:	ea80 0a02 	eor.w	sl, r0, r2
 80006f2:	ea81 0b03 	eor.w	fp, r1, r3
 80006f6:	e9c7 ab06 	strd	sl, fp, [r7, #24]
    for (size_t i = 0; i < n - 1; i++) {
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3301      	adds	r3, #1
 80006fe:	617b      	str	r3, [r7, #20]
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	3b01      	subs	r3, #1
 8000704:	697a      	ldr	r2, [r7, #20]
 8000706:	429a      	cmp	r2, r3
 8000708:	d3d7      	bcc.n	80006ba <refresh_xor_partial+0x1e>
    }
    shares[n - 1] ^= acc;
 800070a:	683b      	ldr	r3, [r7, #0]
 800070c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000710:	3b01      	subs	r3, #1
 8000712:	00db      	lsls	r3, r3, #3
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8000722:	3b01      	subs	r3, #1
 8000724:	00db      	lsls	r3, r3, #3
 8000726:	687a      	ldr	r2, [r7, #4]
 8000728:	18d6      	adds	r6, r2, r3
 800072a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800072e:	ea80 0402 	eor.w	r4, r0, r2
 8000732:	ea81 0503 	eor.w	r5, r1, r3
 8000736:	e9c6 4500 	strd	r4, r5, [r6]
}
 800073a:	bf00      	nop
 800073c:	3724      	adds	r7, #36	@ 0x24
 800073e:	46bd      	mov	sp, r7
 8000740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000744 <SecAddModp>:

}
void SecAddModp(uint64_t out[MASKING_N],
                const uint64_t a[MASKING_N],
                const uint64_t b[MASKING_N],
                uint64_t q) {
 8000744:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000748:	b08c      	sub	sp, #48	@ 0x30
 800074a:	af00      	add	r7, sp, #0
 800074c:	60f8      	str	r0, [r7, #12]
 800074e:	60b9      	str	r1, [r7, #8]
 8000750:	607a      	str	r2, [r7, #4]
    if (q == 0) {
 8000752:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8000756:	4313      	orrs	r3, r2
 8000758:	d101      	bne.n	800075e <SecAddModp+0x1a>
        while (1) {}  // hard fault: invalid modulus
 800075a:	bf00      	nop
 800075c:	e7fd      	b.n	800075a <SecAddModp+0x16>
    }

    uint64_t x = 0, y_val = 0;
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (int i = 0; i < MASKING_N; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	61fb      	str	r3, [r7, #28]
 800077a:	e01e      	b.n	80007ba <SecAddModp+0x76>
        x ^= a[i];
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	00db      	lsls	r3, r3, #3
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4413      	add	r3, r2
 8000784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000788:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800078c:	ea80 0402 	eor.w	r4, r0, r2
 8000790:	ea81 0503 	eor.w	r5, r1, r3
 8000794:	e9c7 450a 	strd	r4, r5, [r7, #40]	@ 0x28
        y_val ^= b[i];
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	4413      	add	r3, r2
 80007a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007a4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80007a8:	ea80 0802 	eor.w	r8, r0, r2
 80007ac:	ea81 0903 	eor.w	r9, r1, r3
 80007b0:	e9c7 8908 	strd	r8, r9, [r7, #32]
    for (int i = 0; i < MASKING_N; i++) {
 80007b4:	69fb      	ldr	r3, [r7, #28]
 80007b6:	3301      	adds	r3, #1
 80007b8:	61fb      	str	r3, [r7, #28]
 80007ba:	69fb      	ldr	r3, [r7, #28]
 80007bc:	2b03      	cmp	r3, #3
 80007be:	dddd      	ble.n	800077c <SecAddModp+0x38>
    }

    uint64_t result = (x + y_val) % q;
 80007c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80007c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80007c8:	eb10 0a02 	adds.w	sl, r0, r2
 80007cc:	eb41 0b03 	adc.w	fp, r1, r3
 80007d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80007d4:	4650      	mov	r0, sl
 80007d6:	4659      	mov	r1, fp
 80007d8:	f7ff fd4a 	bl	8000270 <__aeabi_uldivmod>
 80007dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    boolean_mask(out, result);
 80007e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	f7ff ff23 	bl	8000630 <boolean_mask>
}
 80007ea:	bf00      	nop
 80007ec:	3730      	adds	r7, #48	@ 0x30
 80007ee:	46bd      	mov	sp, r7
 80007f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080007f4 <SecA2Bq_debug>:
    }

    printf("Original: %lu, Recovered: %lu\n", x, recovered);
}

void SecA2Bq_debug(uint64_t *out, const uint64_t *in, size_t n, uint64_t q) {
 80007f4:	b590      	push	{r4, r7, lr}
 80007f6:	b099      	sub	sp, #100	@ 0x64
 80007f8:	af02      	add	r7, sp, #8
 80007fa:	60f8      	str	r0, [r7, #12]
 80007fc:	60b9      	str	r1, [r7, #8]
 80007fe:	607a      	str	r2, [r7, #4]
    if (n == 1) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d11d      	bne.n	8000842 <SecA2Bq_debug+0x4e>
        out[0] = in[0] % q;
 8000806:	68bb      	ldr	r3, [r7, #8]
 8000808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800080c:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8000810:	f7ff fd2e 	bl	8000270 <__aeabi_uldivmod>
 8000814:	68f9      	ldr	r1, [r7, #12]
 8000816:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t i = 1; i < MASKING_N; i++) out[i] = 0;
 800081a:	2301      	movs	r3, #1
 800081c:	657b      	str	r3, [r7, #84]	@ 0x54
 800081e:	e00c      	b.n	800083a <SecA2Bq_debug+0x46>
 8000820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	68fa      	ldr	r2, [r7, #12]
 8000826:	18d1      	adds	r1, r2, r3
 8000828:	f04f 0200 	mov.w	r2, #0
 800082c:	f04f 0300 	mov.w	r3, #0
 8000830:	e9c1 2300 	strd	r2, r3, [r1]
 8000834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000836:	3301      	adds	r3, #1
 8000838:	657b      	str	r3, [r7, #84]	@ 0x54
 800083a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800083c:	2b03      	cmp	r3, #3
 800083e:	d9ef      	bls.n	8000820 <SecA2Bq_debug+0x2c>
        return;
 8000840:	e045      	b.n	80008ce <SecA2Bq_debug+0xda>
    }

    size_t half = n / 2;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	653b      	str	r3, [r7, #80]	@ 0x50

    uint64_t y[MASKING_N] = {0};
 8000848:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800084c:	2220      	movs	r2, #32
 800084e:	2100      	movs	r1, #0
 8000850:	4618      	mov	r0, r3
 8000852:	f009 fc85 	bl	800a160 <memset>
    uint64_t z[MASKING_N] = {0};
 8000856:	f107 0310 	add.w	r3, r7, #16
 800085a:	2220      	movs	r2, #32
 800085c:	2100      	movs	r1, #0
 800085e:	4618      	mov	r0, r3
 8000860:	f009 fc7e 	bl	800a160 <memset>

    SecA2Bq_debug(y, in, half, q);
 8000864:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000868:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800086c:	e9cd 2300 	strd	r2, r3, [sp]
 8000870:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000872:	68b9      	ldr	r1, [r7, #8]
 8000874:	f7ff ffbe 	bl	80007f4 <SecA2Bq_debug>
    SecA2Bq_debug(z, in + half, n - half, q);
 8000878:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800087a:	00db      	lsls	r3, r3, #3
 800087c:	68ba      	ldr	r2, [r7, #8]
 800087e:	18d1      	adds	r1, r2, r3
 8000880:	687a      	ldr	r2, [r7, #4]
 8000882:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000884:	1ad4      	subs	r4, r2, r3
 8000886:	f107 0010 	add.w	r0, r7, #16
 800088a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800088e:	e9cd 2300 	strd	r2, r3, [sp]
 8000892:	4622      	mov	r2, r4
 8000894:	f7ff ffae 	bl	80007f4 <SecA2Bq_debug>

    refresh_xor_partial(y, half);
 8000898:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800089c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fefc 	bl	800069c <refresh_xor_partial>
    refresh_xor_partial(z, n - half);
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80008a8:	1ad2      	subs	r2, r2, r3
 80008aa:	f107 0310 	add.w	r3, r7, #16
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f7ff fef3 	bl	800069c <refresh_xor_partial>


    SecAddModp(out, y, z, q);
 80008b6:	f107 0010 	add.w	r0, r7, #16
 80008ba:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80008be:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80008c2:	e9cd 2300 	strd	r2, r3, [sp]
 80008c6:	4602      	mov	r2, r0
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff3b 	bl	8000744 <SecAddModp>
}
 80008ce:	375c      	adds	r7, #92	@ 0x5c
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd90      	pop	{r4, r7, pc}

080008d4 <SecB2Aq>:
    } else {
        printf("PASS: A2B x = %lu\n", (uint32_t)x);
    }
}

void SecB2Aq(uint64_t *out, const uint64_t *in, size_t n, uint64_t q) {
 80008d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008d8:	b08f      	sub	sp, #60	@ 0x3c
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6178      	str	r0, [r7, #20]
 80008de:	6139      	str	r1, [r7, #16]
 80008e0:	60fa      	str	r2, [r7, #12]
    // Recombine Boolean value
    uint64_t x = in[0];
 80008e2:	693b      	ldr	r3, [r7, #16]
 80008e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008e8:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 1; i < n; i++) {
 80008ec:	2301      	movs	r3, #1
 80008ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80008f0:	e010      	b.n	8000914 <SecB2Aq+0x40>
        x ^= in[i];  // Full 64-bit XOR
 80008f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80008f4:	00db      	lsls	r3, r3, #3
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	4413      	add	r3, r2
 80008fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fe:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000902:	ea80 0802 	eor.w	r8, r0, r2
 8000906:	ea81 0903 	eor.w	r9, r1, r3
 800090a:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
    for (size_t i = 1; i < n; i++) {
 800090e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000910:	3301      	adds	r3, #1
 8000912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000914:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	429a      	cmp	r2, r3
 800091a:	d3ea      	bcc.n	80008f2 <SecB2Aq+0x1e>
    }

    x = x % q;  // Properly reduce into F_q
 800091c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000920:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000924:	f7ff fca4 	bl	8000270 <__aeabi_uldivmod>
 8000928:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    // Generate additive shares of x in F_q
    uint64_t sum = 0;
 800092c:	f04f 0200 	mov.w	r2, #0
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (size_t i = 0; i < n - 1; i++) {
 8000938:	2300      	movs	r3, #0
 800093a:	61fb      	str	r3, [r7, #28]
 800093c:	e023      	b.n	8000986 <SecB2Aq+0xb2>
        out[i] = get_random64() % q;
 800093e:	f7ff fe2d 	bl	800059c <get_random64>
 8000942:	69fb      	ldr	r3, [r7, #28]
 8000944:	00db      	lsls	r3, r3, #3
 8000946:	697a      	ldr	r2, [r7, #20]
 8000948:	18d6      	adds	r6, r2, r3
 800094a:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800094e:	f7ff fc8f 	bl	8000270 <__aeabi_uldivmod>
 8000952:	e9c6 2300 	strd	r2, r3, [r6]
        sum = (sum + out[i]) % q;
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	00db      	lsls	r3, r3, #3
 800095a:	697a      	ldr	r2, [r7, #20]
 800095c:	4413      	add	r3, r2
 800095e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000962:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000966:	1886      	adds	r6, r0, r2
 8000968:	603e      	str	r6, [r7, #0]
 800096a:	eb41 0303 	adc.w	r3, r1, r3
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000974:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000978:	f7ff fc7a 	bl	8000270 <__aeabi_uldivmod>
 800097c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    for (size_t i = 0; i < n - 1; i++) {
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	3301      	adds	r3, #1
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	3b01      	subs	r3, #1
 800098a:	69fa      	ldr	r2, [r7, #28]
 800098c:	429a      	cmp	r2, r3
 800098e:	d3d6      	bcc.n	800093e <SecB2Aq+0x6a>
    }
    out[n - 1] = (x + q - sum) % q;
 8000990:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8000994:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8000998:	1884      	adds	r4, r0, r2
 800099a:	eb41 0503 	adc.w	r5, r1, r3
 800099e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80009a2:	ebb4 0a02 	subs.w	sl, r4, r2
 80009a6:	eb65 0b03 	sbc.w	fp, r5, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80009b0:	3b01      	subs	r3, #1
 80009b2:	00db      	lsls	r3, r3, #3
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	18d4      	adds	r4, r2, r3
 80009b8:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80009bc:	4650      	mov	r0, sl
 80009be:	4659      	mov	r1, fp
 80009c0:	f7ff fc56 	bl	8000270 <__aeabi_uldivmod>
 80009c4:	e9c4 2300 	strd	r2, r3, [r4]
}
 80009c8:	bf00      	nop
 80009ca:	373c      	adds	r7, #60	@ 0x3c
 80009cc:	46bd      	mov	sp, r7
 80009ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009d4 <test_roundtrip>:
        printf("PASS: B2A x = %lu\n", (uint32_t)x);
    }
}

// A → B → A should preserve input
void test_roundtrip(uint64_t x, uint64_t q) {
 80009d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	b0a9      	sub	sp, #164	@ 0xa4
 80009da:	af02      	add	r7, sp, #8
 80009dc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80009e0:	e9c7 2302 	strd	r2, r3, [r7, #8]
    masked_uint64_t A = {0};
 80009e4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80009e8:	2220      	movs	r2, #32
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f009 fbb7 	bl	800a160 <memset>
    uint64_t bshares[MASKING_N] = {0};
 80009f2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80009f6:	2220      	movs	r2, #32
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f009 fbb0 	bl	800a160 <memset>
    uint64_t ashare2[MASKING_N] = {0};
 8000a00:	f107 0318 	add.w	r3, r7, #24
 8000a04:	2220      	movs	r2, #32
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f009 fba9 	bl	800a160 <memset>

    // Arithmetic mask
    uint64_t sum = 0;
 8000a0e:	f04f 0200 	mov.w	r2, #0
 8000a12:	f04f 0300 	mov.w	r3, #0
 8000a16:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    for (int i = 0; i < MASKING_N - 1; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a20:	e02d      	b.n	8000a7e <test_roundtrip+0xaa>
        A.share[i] = get_random64() % q;
 8000a22:	f7ff fdbb 	bl	800059c <get_random64>
 8000a26:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a2a:	f7ff fc21 	bl	8000270 <__aeabi_uldivmod>
 8000a2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8000a32:	00c9      	lsls	r1, r1, #3
 8000a34:	3190      	adds	r1, #144	@ 0x90
 8000a36:	f107 0008 	add.w	r0, r7, #8
 8000a3a:	4401      	add	r1, r0
 8000a3c:	3940      	subs	r1, #64	@ 0x40
 8000a3e:	e9c1 2300 	strd	r2, r3, [r1]
        sum = (sum + A.share[i]) % q;
 8000a42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a46:	00db      	lsls	r3, r3, #3
 8000a48:	3390      	adds	r3, #144	@ 0x90
 8000a4a:	f107 0208 	add.w	r2, r7, #8
 8000a4e:	4413      	add	r3, r2
 8000a50:	3b40      	subs	r3, #64	@ 0x40
 8000a52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a56:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8000a5a:	1886      	adds	r6, r0, r2
 8000a5c:	603e      	str	r6, [r7, #0]
 8000a5e:	eb41 0303 	adc.w	r3, r1, r3
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000a6c:	f7ff fc00 	bl	8000270 <__aeabi_uldivmod>
 8000a70:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    for (int i = 0; i < MASKING_N - 1; i++) {
 8000a74:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a78:	3301      	adds	r3, #1
 8000a7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8000a7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8000a82:	2b02      	cmp	r3, #2
 8000a84:	ddcd      	ble.n	8000a22 <test_roundtrip+0x4e>
    }
    A.share[MASKING_N - 1] = (x + q - sum) % q;
 8000a86:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000a8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000a8e:	1884      	adds	r4, r0, r2
 8000a90:	eb41 0503 	adc.w	r5, r1, r3
 8000a94:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8000a98:	ebb4 0a02 	subs.w	sl, r4, r2
 8000a9c:	eb65 0b03 	sbc.w	fp, r5, r3
 8000aa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000aa4:	4650      	mov	r0, sl
 8000aa6:	4659      	mov	r1, fp
 8000aa8:	f7ff fbe2 	bl	8000270 <__aeabi_uldivmod>
 8000aac:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70

    // A → B
    SecA2Bq_debug(bshares, A.share, MASKING_N, q);
 8000ab0:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8000ab4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 8000ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000abc:	e9cd 2300 	strd	r2, r3, [sp]
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	f7ff fe97 	bl	80007f4 <SecA2Bq_debug>

    // B → A
    SecB2Aq(ashare2, bshares, MASKING_N, q);
 8000ac6:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8000aca:	f107 0018 	add.w	r0, r7, #24
 8000ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000ad2:	e9cd 2300 	strd	r2, r3, [sp]
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	f7ff fefc 	bl	80008d4 <SecB2Aq>

    uint64_t final = 0;
 8000adc:	f04f 0200 	mov.w	r2, #0
 8000ae0:	f04f 0300 	mov.w	r3, #0
 8000ae4:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    for (int i = 0; i < MASKING_N; i++) {
 8000ae8:	2300      	movs	r3, #0
 8000aea:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000aec:	e019      	b.n	8000b22 <test_roundtrip+0x14e>
        final = (final + ashare2[i]) % q;
 8000aee:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000af0:	00db      	lsls	r3, r3, #3
 8000af2:	3390      	adds	r3, #144	@ 0x90
 8000af4:	f107 0208 	add.w	r2, r7, #8
 8000af8:	4413      	add	r3, r2
 8000afa:	3b80      	subs	r3, #128	@ 0x80
 8000afc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b00:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000b04:	eb10 0802 	adds.w	r8, r0, r2
 8000b08:	eb41 0903 	adc.w	r9, r1, r3
 8000b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b10:	4640      	mov	r0, r8
 8000b12:	4649      	mov	r1, r9
 8000b14:	f7ff fbac 	bl	8000270 <__aeabi_uldivmod>
 8000b18:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
    for (int i = 0; i < MASKING_N; i++) {
 8000b1c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b1e:	3301      	adds	r3, #1
 8000b20:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000b22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000b24:	2b03      	cmp	r3, #3
 8000b26:	dde2      	ble.n	8000aee <test_roundtrip+0x11a>
    }

    if (final != (x % q)) {
 8000b28:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000b2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b30:	f7ff fb9e 	bl	8000270 <__aeabi_uldivmod>
 8000b34:	4610      	mov	r0, r2
 8000b36:	4619      	mov	r1, r3
 8000b38:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf08      	it	eq
 8000b40:	4282      	cmpeq	r2, r0
 8000b42:	d008      	beq.n	8000b56 <test_roundtrip+0x182>
        printf("FAIL: roundtrip x = %lu, final = %lu\n", (uint32_t)x, (uint32_t)final);
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4807      	ldr	r0, [pc, #28]	@ (8000b6c <test_roundtrip+0x198>)
 8000b4e:	f009 f969 	bl	8009e24 <iprintf>
        while (1);
 8000b52:	bf00      	nop
 8000b54:	e7fd      	b.n	8000b52 <test_roundtrip+0x17e>
    } else {
        printf("PASS: roundtrip x = %lu\n", (uint32_t)x);
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4805      	ldr	r0, [pc, #20]	@ (8000b70 <test_roundtrip+0x19c>)
 8000b5c:	f009 f962 	bl	8009e24 <iprintf>
    }
}
 8000b60:	bf00      	nop
 8000b62:	379c      	adds	r7, #156	@ 0x9c
 8000b64:	46bd      	mov	sp, r7
 8000b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b6a:	bf00      	nop
 8000b6c:	0800af4c 	.word	0x0800af4c
 8000b70:	0800af74 	.word	0x0800af74

08000b74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b7a:	f000 fd77 	bl	800166c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7e:	f000 f895 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 f9cf 	bl	8000f24 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000b86:	f000 f8fb 	bl	8000d80 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000b8a:	f000 f927 	bl	8000ddc <MX_I2S3_Init>
  MX_SPI1_Init();
 8000b8e:	f000 f969 	bl	8000e64 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8000b92:	f008 fcbd 	bl	8009510 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8000b96:	f000 f951 	bl	8000e3c <MX_RNG_Init>
  MX_USART2_UART_Init();
 8000b9a:	f000 f999 	bl	8000ed0 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	4b3f      	ldr	r3, [pc, #252]	@ (8000ca0 <main+0x12c>)
 8000ba4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8000ca0 <main+0x12c>)
 8000ba8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bac:	6353      	str	r3, [r2, #52]	@ 0x34
 8000bae:	4b3c      	ldr	r3, [pc, #240]	@ (8000ca0 <main+0x12c>)
 8000bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8000bba:	483a      	ldr	r0, [pc, #232]	@ (8000ca4 <main+0x130>)
 8000bbc:	f004 fda6 	bl	800570c <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8000bc0:	4b39      	ldr	r3, [pc, #228]	@ (8000ca8 <main+0x134>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	6898      	ldr	r0, [r3, #8]
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	2202      	movs	r2, #2
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f009 f93c 	bl	8009e48 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_roundtrip(0, 3329);
 8000bd0:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000bd4:	f04f 0300 	mov.w	r3, #0
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	f04f 0100 	mov.w	r1, #0
 8000be0:	f7ff fef8 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(1, 3329);
 8000be4:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	f04f 0001 	mov.w	r0, #1
 8000bf0:	f04f 0100 	mov.w	r1, #0
 8000bf4:	f7ff feee 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(2, 3329);
 8000bf8:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000bfc:	f04f 0300 	mov.w	r3, #0
 8000c00:	f04f 0002 	mov.w	r0, #2
 8000c04:	f04f 0100 	mov.w	r1, #0
 8000c08:	f7ff fee4 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(123, 3329);
 8000c0c:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	f04f 007b 	mov.w	r0, #123	@ 0x7b
 8000c18:	f04f 0100 	mov.w	r1, #0
 8000c1c:	f7ff feda 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(456, 3329);
 8000c20:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	f44f 70e4 	mov.w	r0, #456	@ 0x1c8
 8000c2c:	f04f 0100 	mov.w	r1, #0
 8000c30:	f7ff fed0 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(2048, 3329);
 8000c34:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c38:	f04f 0300 	mov.w	r3, #0
 8000c3c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000c40:	f04f 0100 	mov.w	r1, #0
 8000c44:	f7ff fec6 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(3328, 3329);
 8000c48:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	f44f 6050 	mov.w	r0, #3328	@ 0xd00
 8000c54:	f04f 0100 	mov.w	r1, #0
 8000c58:	f7ff febc 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(3329 + 1, 3329); // x ≡ 1 mod q
 8000c5c:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	f640 5002 	movw	r0, #3330	@ 0xd02
 8000c68:	f04f 0100 	mov.w	r1, #0
 8000c6c:	f7ff feb2 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(6658, 3329);    // x ≡ 0 mod q again
 8000c70:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c74:	f04f 0300 	mov.w	r3, #0
 8000c78:	f641 2002 	movw	r0, #6658	@ 0x1a02
 8000c7c:	f04f 0100 	mov.w	r1, #0
 8000c80:	f7ff fea8 	bl	80009d4 <test_roundtrip>
	  test_roundtrip(UINT64_MAX, 3329); // large x
 8000c84:	f640 5201 	movw	r2, #3329	@ 0xd01
 8000c88:	f04f 0300 	mov.w	r3, #0
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f04f 31ff 	mov.w	r1, #4294967295
 8000c94:	f7ff fe9e 	bl	80009d4 <test_roundtrip>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000c98:	f008 fc60 	bl	800955c <MX_USB_HOST_Process>
	  test_roundtrip(0, 3329);
 8000c9c:	bf00      	nop
 8000c9e:	e797      	b.n	8000bd0 <main+0x5c>
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	20000140 	.word	0x20000140
 8000ca8:	20000038 	.word	0x20000038

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	@ 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	@ 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f009 fa50 	bl	800a160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b28      	ldr	r3, [pc, #160]	@ (8000d78 <SystemClock_Config+0xcc>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd8:	4a27      	ldr	r2, [pc, #156]	@ (8000d78 <SystemClock_Config+0xcc>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce0:	4b25      	ldr	r3, [pc, #148]	@ (8000d78 <SystemClock_Config+0xcc>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <SystemClock_Config+0xd0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a21      	ldr	r2, [pc, #132]	@ (8000d7c <SystemClock_Config+0xd0>)
 8000cf6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <SystemClock_Config+0xd0>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d10:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000d1c:	2308      	movs	r3, #8
 8000d1e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000d20:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000d24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d26:	2302      	movs	r3, #2
 8000d28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d2a:	2307      	movs	r3, #7
 8000d2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	4618      	mov	r0, r3
 8000d34:	f003 ff10 	bl	8004b58 <HAL_RCC_OscConfig>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000d3e:	f000 f9ef 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d42:	230f      	movs	r3, #15
 8000d44:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d46:	2302      	movs	r3, #2
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d4e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000d52:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d58:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	2105      	movs	r1, #5
 8000d60:	4618      	mov	r0, r3
 8000d62:	f004 f971 	bl	8005048 <HAL_RCC_ClockConfig>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d6c:	f000 f9d8 	bl	8001120 <Error_Handler>
  }
}
 8000d70:	bf00      	nop
 8000d72:	3750      	adds	r7, #80	@ 0x50
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40023800 	.word	0x40023800
 8000d7c:	40007000 	.word	0x40007000

08000d80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000d84:	4b12      	ldr	r3, [pc, #72]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d86:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <MX_I2C1_Init+0x54>)
 8000d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000d8a:	4b11      	ldr	r3, [pc, #68]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d8c:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <MX_I2C1_Init+0x58>)
 8000d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000d96:	4b0e      	ldr	r3, [pc, #56]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000d9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000da4:	4b0a      	ldr	r3, [pc, #40]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000daa:	4b09      	ldr	r3, [pc, #36]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000db6:	4b06      	ldr	r3, [pc, #24]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_I2C1_Init+0x50>)
 8000dbe:	f003 f8e7 	bl	8003f90 <HAL_I2C_Init>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000dc8:	f000 f9aa 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	200000a4 	.word	0x200000a4
 8000dd4:	40005400 	.word	0x40005400
 8000dd8:	000186a0 	.word	0x000186a0

08000ddc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000de0:	4b13      	ldr	r3, [pc, #76]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000de2:	4a14      	ldr	r2, [pc, #80]	@ (8000e34 <MX_I2S3_Init+0x58>)
 8000de4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000de6:	4b12      	ldr	r3, [pc, #72]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000de8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000dee:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000df4:	4b0e      	ldr	r3, [pc, #56]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000dfc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e00:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e04:	4a0c      	ldr	r2, [pc, #48]	@ (8000e38 <MX_I2S3_Init+0x5c>)
 8000e06:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000e08:	4b09      	ldr	r3, [pc, #36]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000e14:	4b06      	ldr	r3, [pc, #24]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	@ (8000e30 <MX_I2S3_Init+0x54>)
 8000e1c:	f003 f9fc 	bl	8004218 <HAL_I2S_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000e26:	f000 f97b 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000f8 	.word	0x200000f8
 8000e34:	40003c00 	.word	0x40003c00
 8000e38:	00017700 	.word	0x00017700

08000e3c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000e40:	4b06      	ldr	r3, [pc, #24]	@ (8000e5c <MX_RNG_Init+0x20>)
 8000e42:	4a07      	ldr	r2, [pc, #28]	@ (8000e60 <MX_RNG_Init+0x24>)
 8000e44:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_RNG_Init+0x20>)
 8000e48:	f004 fc60 	bl	800570c <HAL_RNG_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000e52:	f000 f965 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000140 	.word	0x20000140
 8000e60:	50060800 	.word	0x50060800

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb6:	f004 fca9 	bl	800580c <HAL_SPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f000 f92e 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000150 	.word	0x20000150
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_USART2_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f08:	f004 fd09 	bl	800591e <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f000 f905 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200001a8 	.word	0x200001a8
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08c      	sub	sp, #48	@ 0x30
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 031c 	add.w	r3, r7, #28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b72      	ldr	r3, [pc, #456]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a71      	ldr	r2, [pc, #452]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b6f      	ldr	r3, [pc, #444]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b6b      	ldr	r3, [pc, #428]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a6a      	ldr	r2, [pc, #424]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f60:	f043 0304 	orr.w	r3, r3, #4
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b68      	ldr	r3, [pc, #416]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0304 	and.w	r3, r3, #4
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	4b64      	ldr	r3, [pc, #400]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a63      	ldr	r2, [pc, #396]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f7c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b61      	ldr	r3, [pc, #388]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f8a:	613b      	str	r3, [r7, #16]
 8000f8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	60fb      	str	r3, [r7, #12]
 8000f92:	4b5d      	ldr	r3, [pc, #372]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f96:	4a5c      	ldr	r2, [pc, #368]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000f98:	f043 0301 	orr.w	r3, r3, #1
 8000f9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9e:	4b5a      	ldr	r3, [pc, #360]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	f003 0301 	and.w	r3, r3, #1
 8000fa6:	60fb      	str	r3, [r7, #12]
 8000fa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	60bb      	str	r3, [r7, #8]
 8000fae:	4b56      	ldr	r3, [pc, #344]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a55      	ldr	r2, [pc, #340]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fb4:	f043 0302 	orr.w	r3, r3, #2
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b53      	ldr	r3, [pc, #332]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0302 	and.w	r3, r3, #2
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	607b      	str	r3, [r7, #4]
 8000fca:	4b4f      	ldr	r3, [pc, #316]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a4e      	ldr	r2, [pc, #312]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fd0:	f043 0308 	orr.w	r3, r3, #8
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b4c      	ldr	r3, [pc, #304]	@ (8001108 <MX_GPIO_Init+0x1e4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0308 	and.w	r3, r3, #8
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2108      	movs	r1, #8
 8000fe6:	4849      	ldr	r0, [pc, #292]	@ (800110c <MX_GPIO_Init+0x1e8>)
 8000fe8:	f000 fe84 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2101      	movs	r1, #1
 8000ff0:	4847      	ldr	r0, [pc, #284]	@ (8001110 <MX_GPIO_Init+0x1ec>)
 8000ff2:	f000 fe7f 	bl	8001cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000ffc:	4845      	ldr	r0, [pc, #276]	@ (8001114 <MX_GPIO_Init+0x1f0>)
 8000ffe:	f000 fe79 	bl	8001cf4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001002:	2308      	movs	r3, #8
 8001004:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001006:	2301      	movs	r3, #1
 8001008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100e:	2300      	movs	r3, #0
 8001010:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	4619      	mov	r1, r3
 8001018:	483c      	ldr	r0, [pc, #240]	@ (800110c <MX_GPIO_Init+0x1e8>)
 800101a:	f000 fccf 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800101e:	2301      	movs	r3, #1
 8001020:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001022:	2301      	movs	r3, #1
 8001024:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800102e:	f107 031c 	add.w	r3, r7, #28
 8001032:	4619      	mov	r1, r3
 8001034:	4836      	ldr	r0, [pc, #216]	@ (8001110 <MX_GPIO_Init+0x1ec>)
 8001036:	f000 fcc1 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800103a:	2308      	movs	r3, #8
 800103c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103e:	2302      	movs	r3, #2
 8001040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001042:	2300      	movs	r3, #0
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001046:	2300      	movs	r3, #0
 8001048:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800104a:	2305      	movs	r3, #5
 800104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800104e:	f107 031c 	add.w	r3, r7, #28
 8001052:	4619      	mov	r1, r3
 8001054:	482e      	ldr	r0, [pc, #184]	@ (8001110 <MX_GPIO_Init+0x1ec>)
 8001056:	f000 fcb1 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105a:	2301      	movs	r3, #1
 800105c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800105e:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 031c 	add.w	r3, r7, #28
 800106c:	4619      	mov	r1, r3
 800106e:	482a      	ldr	r0, [pc, #168]	@ (8001118 <MX_GPIO_Init+0x1f4>)
 8001070:	f000 fca4 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001074:	2304      	movs	r3, #4
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001080:	f107 031c 	add.w	r3, r7, #28
 8001084:	4619      	mov	r1, r3
 8001086:	4825      	ldr	r0, [pc, #148]	@ (800111c <MX_GPIO_Init+0x1f8>)
 8001088:	f000 fc98 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800108c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001090:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800109e:	2305      	movs	r3, #5
 80010a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80010a2:	f107 031c 	add.w	r3, r7, #28
 80010a6:	4619      	mov	r1, r3
 80010a8:	481c      	ldr	r0, [pc, #112]	@ (800111c <MX_GPIO_Init+0x1f8>)
 80010aa:	f000 fc87 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80010ae:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80010b2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010c0:	f107 031c 	add.w	r3, r7, #28
 80010c4:	4619      	mov	r1, r3
 80010c6:	4813      	ldr	r0, [pc, #76]	@ (8001114 <MX_GPIO_Init+0x1f0>)
 80010c8:	f000 fc78 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80010cc:	2320      	movs	r3, #32
 80010ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 031c 	add.w	r3, r7, #28
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x1f0>)
 80010e0:	f000 fc6c 	bl	80019bc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80010e4:	2302      	movs	r3, #2
 80010e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80010e8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ee:	2300      	movs	r3, #0
 80010f0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 031c 	add.w	r3, r7, #28
 80010f6:	4619      	mov	r1, r3
 80010f8:	4804      	ldr	r0, [pc, #16]	@ (800110c <MX_GPIO_Init+0x1e8>)
 80010fa:	f000 fc5f 	bl	80019bc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80010fe:	bf00      	nop
 8001100:	3730      	adds	r7, #48	@ 0x30
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40021000 	.word	0x40021000
 8001110:	40020800 	.word	0x40020800
 8001114:	40020c00 	.word	0x40020c00
 8001118:	40020000 	.word	0x40020000
 800111c:	40020400 	.word	0x40020400

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
 8001136:	4b10      	ldr	r3, [pc, #64]	@ (8001178 <HAL_MspInit+0x4c>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800113a:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <HAL_MspInit+0x4c>)
 800113c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001140:	6453      	str	r3, [r2, #68]	@ 0x44
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <HAL_MspInit+0x4c>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114e:	2300      	movs	r3, #0
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <HAL_MspInit+0x4c>)
 8001154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001156:	4a08      	ldr	r2, [pc, #32]	@ (8001178 <HAL_MspInit+0x4c>)
 8001158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800115c:	6413      	str	r3, [r2, #64]	@ 0x40
 800115e:	4b06      	ldr	r3, [pc, #24]	@ (8001178 <HAL_MspInit+0x4c>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800116a:	2007      	movs	r0, #7
 800116c:	f000 fbe4 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	40023800 	.word	0x40023800

0800117c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	@ 0x28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4a19      	ldr	r2, [pc, #100]	@ (8001200 <HAL_I2C_MspInit+0x84>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d12c      	bne.n	80011f8 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	4b18      	ldr	r3, [pc, #96]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a17      	ldr	r2, [pc, #92]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b15      	ldr	r3, [pc, #84]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	613b      	str	r3, [r7, #16]
 80011b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80011ba:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80011be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c0:	2312      	movs	r3, #18
 80011c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011c4:	2301      	movs	r3, #1
 80011c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c8:	2300      	movs	r3, #0
 80011ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80011cc:	2304      	movs	r3, #4
 80011ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	f107 0314 	add.w	r3, r7, #20
 80011d4:	4619      	mov	r1, r3
 80011d6:	480c      	ldr	r0, [pc, #48]	@ (8001208 <HAL_I2C_MspInit+0x8c>)
 80011d8:	f000 fbf0 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	4b08      	ldr	r3, [pc, #32]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a07      	ldr	r2, [pc, #28]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011e6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ec:	4b05      	ldr	r3, [pc, #20]	@ (8001204 <HAL_I2C_MspInit+0x88>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011f8:	bf00      	nop
 80011fa:	3728      	adds	r7, #40	@ 0x28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40005400 	.word	0x40005400
 8001204:	40023800 	.word	0x40023800
 8001208:	40020400 	.word	0x40020400

0800120c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b08e      	sub	sp, #56	@ 0x38
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001214:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]
 800122c:	605a      	str	r2, [r3, #4]
 800122e:	609a      	str	r2, [r3, #8]
 8001230:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a31      	ldr	r2, [pc, #196]	@ (80012fc <HAL_I2S_MspInit+0xf0>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d15a      	bne.n	80012f2 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001240:	23c0      	movs	r3, #192	@ 0xc0
 8001242:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001244:	2302      	movs	r3, #2
 8001246:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4618      	mov	r0, r3
 800124e:	f004 f91b 	bl	8005488 <HAL_RCCEx_PeriphCLKConfig>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001258:	f7ff ff62 	bl	8001120 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	4b27      	ldr	r3, [pc, #156]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 8001262:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001264:	4a26      	ldr	r2, [pc, #152]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 8001266:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800126a:	6413      	str	r3, [r2, #64]	@ 0x40
 800126c:	4b24      	ldr	r3, [pc, #144]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001274:	613b      	str	r3, [r7, #16]
 8001276:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	2300      	movs	r3, #0
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	4b20      	ldr	r3, [pc, #128]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001280:	4a1f      	ldr	r2, [pc, #124]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 8001282:	f043 0301 	orr.w	r3, r3, #1
 8001286:	6313      	str	r3, [r2, #48]	@ 0x30
 8001288:	4b1d      	ldr	r3, [pc, #116]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128c:	f003 0301 	and.w	r3, r3, #1
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001294:	2300      	movs	r3, #0
 8001296:	60bb      	str	r3, [r7, #8]
 8001298:	4b19      	ldr	r3, [pc, #100]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129c:	4a18      	ldr	r2, [pc, #96]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 800129e:	f043 0304 	orr.w	r3, r3, #4
 80012a2:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a4:	4b16      	ldr	r3, [pc, #88]	@ (8001300 <HAL_I2S_MspInit+0xf4>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a8:	f003 0304 	and.w	r3, r3, #4
 80012ac:	60bb      	str	r3, [r7, #8]
 80012ae:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80012b0:	2310      	movs	r3, #16
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b4:	2302      	movs	r3, #2
 80012b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012bc:	2300      	movs	r3, #0
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012c0:	2306      	movs	r3, #6
 80012c2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012c8:	4619      	mov	r1, r3
 80012ca:	480e      	ldr	r0, [pc, #56]	@ (8001304 <HAL_I2S_MspInit+0xf8>)
 80012cc:	f000 fb76 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80012d0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80012d4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d6:	2302      	movs	r3, #2
 80012d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012da:	2300      	movs	r3, #0
 80012dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012de:	2300      	movs	r3, #0
 80012e0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80012e2:	2306      	movs	r3, #6
 80012e4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ea:	4619      	mov	r1, r3
 80012ec:	4806      	ldr	r0, [pc, #24]	@ (8001308 <HAL_I2S_MspInit+0xfc>)
 80012ee:	f000 fb65 	bl	80019bc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80012f2:	bf00      	nop
 80012f4:	3738      	adds	r7, #56	@ 0x38
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40003c00 	.word	0x40003c00
 8001300:	40023800 	.word	0x40023800
 8001304:	40020000 	.word	0x40020000
 8001308:	40020800 	.word	0x40020800

0800130c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0b      	ldr	r2, [pc, #44]	@ (8001348 <HAL_RNG_MspInit+0x3c>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d10d      	bne.n	800133a <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
 8001322:	4b0a      	ldr	r3, [pc, #40]	@ (800134c <HAL_RNG_MspInit+0x40>)
 8001324:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001326:	4a09      	ldr	r2, [pc, #36]	@ (800134c <HAL_RNG_MspInit+0x40>)
 8001328:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800132c:	6353      	str	r3, [r2, #52]	@ 0x34
 800132e:	4b07      	ldr	r3, [pc, #28]	@ (800134c <HAL_RNG_MspInit+0x40>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800133a:	bf00      	nop
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	50060800 	.word	0x50060800
 800134c:	40023800 	.word	0x40023800

08001350 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08a      	sub	sp, #40	@ 0x28
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001358:	f107 0314 	add.w	r3, r7, #20
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	609a      	str	r2, [r3, #8]
 8001364:	60da      	str	r2, [r3, #12]
 8001366:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a19      	ldr	r2, [pc, #100]	@ (80013d4 <HAL_SPI_MspInit+0x84>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d12b      	bne.n	80013ca <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800137a:	4a17      	ldr	r2, [pc, #92]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 800137c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001380:	6453      	str	r3, [r2, #68]	@ 0x44
 8001382:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001386:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800138a:	613b      	str	r3, [r7, #16]
 800138c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	4b11      	ldr	r3, [pc, #68]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001396:	4a10      	ldr	r2, [pc, #64]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	6313      	str	r3, [r2, #48]	@ 0x30
 800139e:	4b0e      	ldr	r3, [pc, #56]	@ (80013d8 <HAL_SPI_MspInit+0x88>)
 80013a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a2:	f003 0301 	and.w	r3, r3, #1
 80013a6:	60fb      	str	r3, [r7, #12]
 80013a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80013aa:	23e0      	movs	r3, #224	@ 0xe0
 80013ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	2302      	movs	r3, #2
 80013b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ba:	2305      	movs	r3, #5
 80013bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	f107 0314 	add.w	r3, r7, #20
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	@ (80013dc <HAL_SPI_MspInit+0x8c>)
 80013c6:	f000 faf9 	bl	80019bc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80013ca:	bf00      	nop
 80013cc:	3728      	adds	r7, #40	@ 0x28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40013000 	.word	0x40013000
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40020000 	.word	0x40020000

080013e0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a19      	ldr	r2, [pc, #100]	@ (8001464 <HAL_UART_MspInit+0x84>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d12b      	bne.n	800145a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4b18      	ldr	r3, [pc, #96]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800140a:	4a17      	ldr	r2, [pc, #92]	@ (8001468 <HAL_UART_MspInit+0x88>)
 800140c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001410:	6413      	str	r3, [r2, #64]	@ 0x40
 8001412:	4b15      	ldr	r3, [pc, #84]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	613b      	str	r3, [r7, #16]
 800141c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a10      	ldr	r2, [pc, #64]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_UART_MspInit+0x88>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
 8001438:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800143a:	230c      	movs	r3, #12
 800143c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800143e:	2302      	movs	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001446:	2303      	movs	r3, #3
 8001448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800144a:	2307      	movs	r3, #7
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800144e:	f107 0314 	add.w	r3, r7, #20
 8001452:	4619      	mov	r1, r3
 8001454:	4805      	ldr	r0, [pc, #20]	@ (800146c <HAL_UART_MspInit+0x8c>)
 8001456:	f000 fab1 	bl	80019bc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800145a:	bf00      	nop
 800145c:	3728      	adds	r7, #40	@ 0x28
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	40004400 	.word	0x40004400
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001474:	bf00      	nop
 8001476:	e7fd      	b.n	8001474 <NMI_Handler+0x4>

08001478 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800147c:	bf00      	nop
 800147e:	e7fd      	b.n	800147c <HardFault_Handler+0x4>

08001480 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001484:	bf00      	nop
 8001486:	e7fd      	b.n	8001484 <MemManage_Handler+0x4>

08001488 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <BusFault_Handler+0x4>

08001490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001494:	bf00      	nop
 8001496:	e7fd      	b.n	8001494 <UsageFault_Handler+0x4>

08001498 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr

080014b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c6:	f000 f923 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ca:	bf00      	nop
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <OTG_FS_IRQHandler+0x10>)
 80014d6:	f000 ff07 	bl	80022e8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	200005d4 	.word	0x200005d4

080014e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	60f8      	str	r0, [r7, #12]
 80014ec:	60b9      	str	r1, [r7, #8]
 80014ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f0:	2300      	movs	r3, #0
 80014f2:	617b      	str	r3, [r7, #20]
 80014f4:	e00a      	b.n	800150c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f6:	f3af 8000 	nop.w
 80014fa:	4601      	mov	r1, r0
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	1c5a      	adds	r2, r3, #1
 8001500:	60ba      	str	r2, [r7, #8]
 8001502:	b2ca      	uxtb	r2, r1
 8001504:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	3301      	adds	r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	429a      	cmp	r2, r3
 8001512:	dbf0      	blt.n	80014f6 <_read+0x12>
  }

  return len;
 8001514:	687b      	ldr	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}

0800151e <_close>:
  }
  return len;
}

int _close(int file)
{
 800151e:	b480      	push	{r7}
 8001520:	b083      	sub	sp, #12
 8001522:	af00      	add	r7, sp, #0
 8001524:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800152a:	4618      	mov	r0, r3
 800152c:	370c      	adds	r7, #12
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr

08001536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001536:	b480      	push	{r7}
 8001538:	b083      	sub	sp, #12
 800153a:	af00      	add	r7, sp, #0
 800153c:	6078      	str	r0, [r7, #4]
 800153e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001546:	605a      	str	r2, [r3, #4]
  return 0;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr

08001556 <_isatty>:

int _isatty(int file)
{
 8001556:	b480      	push	{r7}
 8001558:	b083      	sub	sp, #12
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr

0800156c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800156c:	b480      	push	{r7}
 800156e:	b085      	sub	sp, #20
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3714      	adds	r7, #20
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
	...

08001588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b086      	sub	sp, #24
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001590:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <_sbrk+0x5c>)
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <_sbrk+0x60>)
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800159c:	4b13      	ldr	r3, [pc, #76]	@ (80015ec <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d102      	bne.n	80015aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <_sbrk+0x64>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <_sbrk+0x68>)
 80015a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <_sbrk+0x64>)
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4413      	add	r3, r2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	d207      	bcs.n	80015c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015b8:	f008 fe30 	bl	800a21c <__errno>
 80015bc:	4603      	mov	r3, r0
 80015be:	220c      	movs	r2, #12
 80015c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295
 80015c6:	e009      	b.n	80015dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015c8:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015ce:	4b07      	ldr	r3, [pc, #28]	@ (80015ec <_sbrk+0x64>)
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4413      	add	r3, r2
 80015d6:	4a05      	ldr	r2, [pc, #20]	@ (80015ec <_sbrk+0x64>)
 80015d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015da:	68fb      	ldr	r3, [r7, #12]
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3718      	adds	r7, #24
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	20020000 	.word	0x20020000
 80015e8:	00000400 	.word	0x00000400
 80015ec:	200001f0 	.word	0x200001f0
 80015f0:	20000b00 	.word	0x20000b00

080015f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015f8:	4b06      	ldr	r3, [pc, #24]	@ (8001614 <SystemInit+0x20>)
 80015fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015fe:	4a05      	ldr	r2, [pc, #20]	@ (8001614 <SystemInit+0x20>)
 8001600:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001604:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001608:	bf00      	nop
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001650 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800161c:	f7ff ffea 	bl	80015f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001620:	480c      	ldr	r0, [pc, #48]	@ (8001654 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001622:	490d      	ldr	r1, [pc, #52]	@ (8001658 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001626:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001628:	e002      	b.n	8001630 <LoopCopyDataInit>

0800162a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800162a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800162c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162e:	3304      	adds	r3, #4

08001630 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001630:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001632:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001634:	d3f9      	bcc.n	800162a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001636:	4a0a      	ldr	r2, [pc, #40]	@ (8001660 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001638:	4c0a      	ldr	r4, [pc, #40]	@ (8001664 <LoopFillZerobss+0x22>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800163c:	e001      	b.n	8001642 <LoopFillZerobss>

0800163e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001640:	3204      	adds	r2, #4

08001642 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001642:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001644:	d3fb      	bcc.n	800163e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001646:	f008 fdef 	bl	800a228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fa93 	bl	8000b74 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800165c:	0800aff0 	.word	0x0800aff0
  ldr r2, =_sbss
 8001660:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001664:	20000b00 	.word	0x20000b00

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	@ (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	@ (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	@ (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	@ (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	@ (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	@ (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f94f 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	2000      	movs	r0, #0
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fd44 	bl	800112c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	@ (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f967 	bl	80019a2 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f92f 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	@ (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	@ (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	@ (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	200001f4 	.word	0x200001f4

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	@ (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200001f4 	.word	0x200001f4

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	@ (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	@ (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	@ (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	@ (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	@ (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	@ (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	@ 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	@ 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	@ (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	@ (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	@ (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff29 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff3e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff31 	bl	80017fc <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019bc:	b480      	push	{r7}
 80019be:	b089      	sub	sp, #36	@ 0x24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019c6:	2300      	movs	r3, #0
 80019c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019ce:	2300      	movs	r3, #0
 80019d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019d2:	2300      	movs	r3, #0
 80019d4:	61fb      	str	r3, [r7, #28]
 80019d6:	e16b      	b.n	8001cb0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019d8:	2201      	movs	r2, #1
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4013      	ands	r3, r2
 80019ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f040 815a 	bne.w	8001caa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f003 0303 	and.w	r3, r3, #3
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d005      	beq.n	8001a0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d130      	bne.n	8001a70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2203      	movs	r2, #3
 8001a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	4013      	ands	r3, r2
 8001a24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	68da      	ldr	r2, [r3, #12]
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	005b      	lsls	r3, r3, #1
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	69ba      	ldr	r2, [r7, #24]
 8001a3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	43db      	mvns	r3, r3
 8001a4e:	69ba      	ldr	r2, [r7, #24]
 8001a50:	4013      	ands	r3, r2
 8001a52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	091b      	lsrs	r3, r3, #4
 8001a5a:	f003 0201 	and.w	r2, r3, #1
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4313      	orrs	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	69ba      	ldr	r2, [r7, #24]
 8001a6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0303 	and.w	r3, r3, #3
 8001a78:	2b03      	cmp	r3, #3
 8001a7a:	d017      	beq.n	8001aac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	005b      	lsls	r3, r3, #1
 8001a86:	2203      	movs	r2, #3
 8001a88:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	69ba      	ldr	r2, [r7, #24]
 8001a90:	4013      	ands	r3, r2
 8001a92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	689a      	ldr	r2, [r3, #8]
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	005b      	lsls	r3, r3, #1
 8001a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d123      	bne.n	8001b00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	08da      	lsrs	r2, r3, #3
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	3208      	adds	r2, #8
 8001ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	69ba      	ldr	r2, [r7, #24]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	691a      	ldr	r2, [r3, #16]
 8001ae0:	69fb      	ldr	r3, [r7, #28]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	009b      	lsls	r3, r3, #2
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001af2:	69fb      	ldr	r3, [r7, #28]
 8001af4:	08da      	lsrs	r2, r3, #3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	3208      	adds	r2, #8
 8001afa:	69b9      	ldr	r1, [r7, #24]
 8001afc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	2203      	movs	r2, #3
 8001b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b10:	43db      	mvns	r3, r3
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	4013      	ands	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0203 	and.w	r2, r3, #3
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69ba      	ldr	r2, [r7, #24]
 8001b32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 80b4 	beq.w	8001caa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
 8001b46:	4b60      	ldr	r3, [pc, #384]	@ (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b4a:	4a5f      	ldr	r2, [pc, #380]	@ (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b50:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b52:	4b5d      	ldr	r3, [pc, #372]	@ (8001cc8 <HAL_GPIO_Init+0x30c>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b5e:	4a5b      	ldr	r2, [pc, #364]	@ (8001ccc <HAL_GPIO_Init+0x310>)
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	089b      	lsrs	r3, r3, #2
 8001b64:	3302      	adds	r3, #2
 8001b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f003 0303 	and.w	r3, r3, #3
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	220f      	movs	r2, #15
 8001b76:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7a:	43db      	mvns	r3, r3
 8001b7c:	69ba      	ldr	r2, [r7, #24]
 8001b7e:	4013      	ands	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a52      	ldr	r2, [pc, #328]	@ (8001cd0 <HAL_GPIO_Init+0x314>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d02b      	beq.n	8001be2 <HAL_GPIO_Init+0x226>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	4a51      	ldr	r2, [pc, #324]	@ (8001cd4 <HAL_GPIO_Init+0x318>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d025      	beq.n	8001bde <HAL_GPIO_Init+0x222>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	4a50      	ldr	r2, [pc, #320]	@ (8001cd8 <HAL_GPIO_Init+0x31c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d01f      	beq.n	8001bda <HAL_GPIO_Init+0x21e>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4a4f      	ldr	r2, [pc, #316]	@ (8001cdc <HAL_GPIO_Init+0x320>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d019      	beq.n	8001bd6 <HAL_GPIO_Init+0x21a>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce0 <HAL_GPIO_Init+0x324>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0x216>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce4 <HAL_GPIO_Init+0x328>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d00d      	beq.n	8001bce <HAL_GPIO_Init+0x212>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a4c      	ldr	r2, [pc, #304]	@ (8001ce8 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d007      	beq.n	8001bca <HAL_GPIO_Init+0x20e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a4b      	ldr	r2, [pc, #300]	@ (8001cec <HAL_GPIO_Init+0x330>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d101      	bne.n	8001bc6 <HAL_GPIO_Init+0x20a>
 8001bc2:	2307      	movs	r3, #7
 8001bc4:	e00e      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bc6:	2308      	movs	r3, #8
 8001bc8:	e00c      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bca:	2306      	movs	r3, #6
 8001bcc:	e00a      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bce:	2305      	movs	r3, #5
 8001bd0:	e008      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	e006      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e004      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bda:	2302      	movs	r3, #2
 8001bdc:	e002      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x228>
 8001be2:	2300      	movs	r3, #0
 8001be4:	69fa      	ldr	r2, [r7, #28]
 8001be6:	f002 0203 	and.w	r2, r2, #3
 8001bea:	0092      	lsls	r2, r2, #2
 8001bec:	4093      	lsls	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bf4:	4935      	ldr	r1, [pc, #212]	@ (8001ccc <HAL_GPIO_Init+0x310>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	089b      	lsrs	r3, r3, #2
 8001bfa:	3302      	adds	r3, #2
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c02:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c26:	4a32      	ldr	r2, [pc, #200]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c2c:	4b30      	ldr	r3, [pc, #192]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c50:	4a27      	ldr	r2, [pc, #156]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c56:	4b26      	ldr	r3, [pc, #152]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c80:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c86:	693b      	ldr	r3, [r7, #16]
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d003      	beq.n	8001ca4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ca4:	4a12      	ldr	r2, [pc, #72]	@ (8001cf0 <HAL_GPIO_Init+0x334>)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61fb      	str	r3, [r7, #28]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	2b0f      	cmp	r3, #15
 8001cb4:	f67f ae90 	bls.w	80019d8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001cb8:	bf00      	nop
 8001cba:	bf00      	nop
 8001cbc:	3724      	adds	r7, #36	@ 0x24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40013800 	.word	0x40013800
 8001cd0:	40020000 	.word	0x40020000
 8001cd4:	40020400 	.word	0x40020400
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	40020c00 	.word	0x40020c00
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	40021400 	.word	0x40021400
 8001ce8:	40021800 	.word	0x40021800
 8001cec:	40021c00 	.word	0x40021c00
 8001cf0:	40013c00 	.word	0x40013c00

08001cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	807b      	strh	r3, [r7, #2]
 8001d00:	4613      	mov	r3, r2
 8001d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d04:	787b      	ldrb	r3, [r7, #1]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d10:	e003      	b.n	8001d1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d12:	887b      	ldrh	r3, [r7, #2]
 8001d14:	041a      	lsls	r2, r3, #16
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	619a      	str	r2, [r3, #24]
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b086      	sub	sp, #24
 8001d2a:	af02      	add	r7, sp, #8
 8001d2c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e059      	b.n	8001dec <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f007 fc3a 	bl	80095cc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2203      	movs	r2, #3
 8001d5c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d66:	d102      	bne.n	8001d6e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4618      	mov	r0, r3
 8001d74:	f004 fa53 	bl	800621e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7c1a      	ldrb	r2, [r3, #16]
 8001d80:	f88d 2000 	strb.w	r2, [sp]
 8001d84:	3304      	adds	r3, #4
 8001d86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d88:	f004 f9d4 	bl	8006134 <USB_CoreInit>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d005      	beq.n	8001d9e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2202      	movs	r2, #2
 8001d96:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e026      	b.n	8001dec <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fa4b 	bl	8006240 <USB_SetCurrentMode>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d005      	beq.n	8001dbc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2202      	movs	r2, #2
 8001db4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e017      	b.n	8001dec <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	7c1a      	ldrb	r2, [r3, #16]
 8001dc4:	f88d 2000 	strb.w	r2, [sp]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001dcc:	f004 fbee 	bl	80065ac <USB_HostInit>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d005      	beq.n	8001de2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2202      	movs	r2, #2
 8001dda:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e004      	b.n	8001dec <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2201      	movs	r2, #1
 8001de6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3710      	adds	r7, #16
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}

08001df4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001df4:	b590      	push	{r4, r7, lr}
 8001df6:	b08b      	sub	sp, #44	@ 0x2c
 8001df8:	af04      	add	r7, sp, #16
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	4608      	mov	r0, r1
 8001dfe:	4611      	mov	r1, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	4603      	mov	r3, r0
 8001e04:	70fb      	strb	r3, [r7, #3]
 8001e06:	460b      	mov	r3, r1
 8001e08:	70bb      	strb	r3, [r7, #2]
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001e0e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001e10:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d101      	bne.n	8001e20 <HAL_HCD_HC_Init+0x2c>
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	e09d      	b.n	8001f5c <HAL_HCD_HC_Init+0x168>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2201      	movs	r2, #1
 8001e24:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001e28:	78fa      	ldrb	r2, [r7, #3]
 8001e2a:	6879      	ldr	r1, [r7, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	011b      	lsls	r3, r3, #4
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	3319      	adds	r3, #25
 8001e38:	2200      	movs	r2, #0
 8001e3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001e3c:	78fa      	ldrb	r2, [r7, #3]
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	4613      	mov	r3, r2
 8001e42:	011b      	lsls	r3, r3, #4
 8001e44:	1a9b      	subs	r3, r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	440b      	add	r3, r1
 8001e4a:	3314      	adds	r3, #20
 8001e4c:	787a      	ldrb	r2, [r7, #1]
 8001e4e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001e50:	78fa      	ldrb	r2, [r7, #3]
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	440b      	add	r3, r1
 8001e5e:	3315      	adds	r3, #21
 8001e60:	78fa      	ldrb	r2, [r7, #3]
 8001e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001e64:	78fa      	ldrb	r2, [r7, #3]
 8001e66:	6879      	ldr	r1, [r7, #4]
 8001e68:	4613      	mov	r3, r2
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	1a9b      	subs	r3, r3, r2
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	440b      	add	r3, r1
 8001e72:	3326      	adds	r3, #38	@ 0x26
 8001e74:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001e78:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001e7a:	78fa      	ldrb	r2, [r7, #3]
 8001e7c:	78bb      	ldrb	r3, [r7, #2]
 8001e7e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e82:	b2d8      	uxtb	r0, r3
 8001e84:	6879      	ldr	r1, [r7, #4]
 8001e86:	4613      	mov	r3, r2
 8001e88:	011b      	lsls	r3, r3, #4
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	440b      	add	r3, r1
 8001e90:	3316      	adds	r3, #22
 8001e92:	4602      	mov	r2, r0
 8001e94:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001e96:	78fb      	ldrb	r3, [r7, #3]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 fbc8 	bl	8002630 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001ea0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	da0a      	bge.n	8001ebe <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001ea8:	78fa      	ldrb	r2, [r7, #3]
 8001eaa:	6879      	ldr	r1, [r7, #4]
 8001eac:	4613      	mov	r3, r2
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	1a9b      	subs	r3, r3, r2
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	3317      	adds	r3, #23
 8001eb8:	2201      	movs	r2, #1
 8001eba:	701a      	strb	r2, [r3, #0]
 8001ebc:	e009      	b.n	8001ed2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ebe:	78fa      	ldrb	r2, [r7, #3]
 8001ec0:	6879      	ldr	r1, [r7, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	011b      	lsls	r3, r3, #4
 8001ec6:	1a9b      	subs	r3, r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	440b      	add	r3, r1
 8001ecc:	3317      	adds	r3, #23
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f004 fccc 	bl	8006874 <USB_GetHostSpeed>
 8001edc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001ede:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d10b      	bne.n	8001efe <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d107      	bne.n	8001efe <HAL_HCD_HC_Init+0x10a>
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d104      	bne.n	8001efe <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	2bbc      	cmp	r3, #188	@ 0xbc
 8001ef8:	d901      	bls.n	8001efe <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001efa:	23bc      	movs	r3, #188	@ 0xbc
 8001efc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001efe:	78fa      	ldrb	r2, [r7, #3]
 8001f00:	6879      	ldr	r1, [r7, #4]
 8001f02:	4613      	mov	r3, r2
 8001f04:	011b      	lsls	r3, r3, #4
 8001f06:	1a9b      	subs	r3, r3, r2
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	440b      	add	r3, r1
 8001f0c:	3318      	adds	r3, #24
 8001f0e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	b298      	uxth	r0, r3
 8001f1a:	6879      	ldr	r1, [r7, #4]
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	011b      	lsls	r3, r3, #4
 8001f20:	1a9b      	subs	r3, r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	440b      	add	r3, r1
 8001f26:	3328      	adds	r3, #40	@ 0x28
 8001f28:	4602      	mov	r2, r0
 8001f2a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6818      	ldr	r0, [r3, #0]
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	787c      	ldrb	r4, [r7, #1]
 8001f36:	78ba      	ldrb	r2, [r7, #2]
 8001f38:	78f9      	ldrb	r1, [r7, #3]
 8001f3a:	9302      	str	r3, [sp, #8]
 8001f3c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	4623      	mov	r3, r4
 8001f4a:	f004 fcbb 	bl	80068c4 <USB_HC_Init>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	371c      	adds	r7, #28
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd90      	pop	{r4, r7, pc}

08001f64 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001f70:	2300      	movs	r3, #0
 8001f72:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d101      	bne.n	8001f82 <HAL_HCD_HC_Halt+0x1e>
 8001f7e:	2302      	movs	r3, #2
 8001f80:	e00f      	b.n	8001fa2 <HAL_HCD_HC_Halt+0x3e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2201      	movs	r2, #1
 8001f86:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	78fa      	ldrb	r2, [r7, #3]
 8001f90:	4611      	mov	r1, r2
 8001f92:	4618      	mov	r0, r3
 8001f94:	f005 f84d 	bl	8007032 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3710      	adds	r7, #16
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	4608      	mov	r0, r1
 8001fb6:	4611      	mov	r1, r2
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4603      	mov	r3, r0
 8001fbc:	70fb      	strb	r3, [r7, #3]
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	70bb      	strb	r3, [r7, #2]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001fc6:	78fa      	ldrb	r2, [r7, #3]
 8001fc8:	6879      	ldr	r1, [r7, #4]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	011b      	lsls	r3, r3, #4
 8001fce:	1a9b      	subs	r3, r3, r2
 8001fd0:	009b      	lsls	r3, r3, #2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	3317      	adds	r3, #23
 8001fd6:	78ba      	ldrb	r2, [r7, #2]
 8001fd8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	3326      	adds	r3, #38	@ 0x26
 8001fea:	787a      	ldrb	r2, [r7, #1]
 8001fec:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001fee:	7c3b      	ldrb	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d114      	bne.n	800201e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001ff4:	78fa      	ldrb	r2, [r7, #3]
 8001ff6:	6879      	ldr	r1, [r7, #4]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	440b      	add	r3, r1
 8002002:	332a      	adds	r3, #42	@ 0x2a
 8002004:	2203      	movs	r2, #3
 8002006:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	3319      	adds	r3, #25
 8002018:	7f3a      	ldrb	r2, [r7, #28]
 800201a:	701a      	strb	r2, [r3, #0]
 800201c:	e009      	b.n	8002032 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	332a      	adds	r3, #42	@ 0x2a
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002032:	787b      	ldrb	r3, [r7, #1]
 8002034:	2b03      	cmp	r3, #3
 8002036:	f200 8102 	bhi.w	800223e <HAL_HCD_HC_SubmitRequest+0x292>
 800203a:	a201      	add	r2, pc, #4	@ (adr r2, 8002040 <HAL_HCD_HC_SubmitRequest+0x94>)
 800203c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002040:	08002051 	.word	0x08002051
 8002044:	08002229 	.word	0x08002229
 8002048:	08002115 	.word	0x08002115
 800204c:	0800219f 	.word	0x0800219f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002050:	7c3b      	ldrb	r3, [r7, #16]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 80f5 	bne.w	8002242 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002058:	78bb      	ldrb	r3, [r7, #2]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d12d      	bne.n	80020ba <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800205e:	8b3b      	ldrh	r3, [r7, #24]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d109      	bne.n	8002078 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002064:	78fa      	ldrb	r2, [r7, #3]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	011b      	lsls	r3, r3, #4
 800206c:	1a9b      	subs	r3, r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	333d      	adds	r3, #61	@ 0x3d
 8002074:	2201      	movs	r2, #1
 8002076:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002078:	78fa      	ldrb	r2, [r7, #3]
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	011b      	lsls	r3, r3, #4
 8002080:	1a9b      	subs	r3, r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	333d      	adds	r3, #61	@ 0x3d
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10a      	bne.n	80020a4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800208e:	78fa      	ldrb	r2, [r7, #3]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	1a9b      	subs	r3, r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	332a      	adds	r3, #42	@ 0x2a
 800209e:	2200      	movs	r2, #0
 80020a0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80020a2:	e0ce      	b.n	8002242 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	011b      	lsls	r3, r3, #4
 80020ac:	1a9b      	subs	r3, r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	332a      	adds	r3, #42	@ 0x2a
 80020b4:	2202      	movs	r2, #2
 80020b6:	701a      	strb	r2, [r3, #0]
      break;
 80020b8:	e0c3      	b.n	8002242 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	331a      	adds	r3, #26
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	f040 80b8 	bne.w	8002242 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80020d2:	78fa      	ldrb	r2, [r7, #3]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	011b      	lsls	r3, r3, #4
 80020da:	1a9b      	subs	r3, r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	333c      	adds	r3, #60	@ 0x3c
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10a      	bne.n	80020fe <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	332a      	adds	r3, #42	@ 0x2a
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]
      break;
 80020fc:	e0a1      	b.n	8002242 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	332a      	adds	r3, #42	@ 0x2a
 800210e:	2202      	movs	r2, #2
 8002110:	701a      	strb	r2, [r3, #0]
      break;
 8002112:	e096      	b.n	8002242 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002114:	78bb      	ldrb	r3, [r7, #2]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d120      	bne.n	800215c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800211a:	78fa      	ldrb	r2, [r7, #3]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	011b      	lsls	r3, r3, #4
 8002122:	1a9b      	subs	r3, r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	333d      	adds	r3, #61	@ 0x3d
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d10a      	bne.n	8002146 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002130:	78fa      	ldrb	r2, [r7, #3]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	1a9b      	subs	r3, r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	332a      	adds	r3, #42	@ 0x2a
 8002140:	2200      	movs	r2, #0
 8002142:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002144:	e07e      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002146:	78fa      	ldrb	r2, [r7, #3]
 8002148:	6879      	ldr	r1, [r7, #4]
 800214a:	4613      	mov	r3, r2
 800214c:	011b      	lsls	r3, r3, #4
 800214e:	1a9b      	subs	r3, r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	440b      	add	r3, r1
 8002154:	332a      	adds	r3, #42	@ 0x2a
 8002156:	2202      	movs	r2, #2
 8002158:	701a      	strb	r2, [r3, #0]
      break;
 800215a:	e073      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800215c:	78fa      	ldrb	r2, [r7, #3]
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	011b      	lsls	r3, r3, #4
 8002164:	1a9b      	subs	r3, r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	440b      	add	r3, r1
 800216a:	333c      	adds	r3, #60	@ 0x3c
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10a      	bne.n	8002188 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002172:	78fa      	ldrb	r2, [r7, #3]
 8002174:	6879      	ldr	r1, [r7, #4]
 8002176:	4613      	mov	r3, r2
 8002178:	011b      	lsls	r3, r3, #4
 800217a:	1a9b      	subs	r3, r3, r2
 800217c:	009b      	lsls	r3, r3, #2
 800217e:	440b      	add	r3, r1
 8002180:	332a      	adds	r3, #42	@ 0x2a
 8002182:	2200      	movs	r2, #0
 8002184:	701a      	strb	r2, [r3, #0]
      break;
 8002186:	e05d      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002188:	78fa      	ldrb	r2, [r7, #3]
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	4613      	mov	r3, r2
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	1a9b      	subs	r3, r3, r2
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	440b      	add	r3, r1
 8002196:	332a      	adds	r3, #42	@ 0x2a
 8002198:	2202      	movs	r2, #2
 800219a:	701a      	strb	r2, [r3, #0]
      break;
 800219c:	e052      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800219e:	78bb      	ldrb	r3, [r7, #2]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d120      	bne.n	80021e6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	333d      	adds	r3, #61	@ 0x3d
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d10a      	bne.n	80021d0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	332a      	adds	r3, #42	@ 0x2a
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021ce:	e039      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021d0:	78fa      	ldrb	r2, [r7, #3]
 80021d2:	6879      	ldr	r1, [r7, #4]
 80021d4:	4613      	mov	r3, r2
 80021d6:	011b      	lsls	r3, r3, #4
 80021d8:	1a9b      	subs	r3, r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	332a      	adds	r3, #42	@ 0x2a
 80021e0:	2202      	movs	r2, #2
 80021e2:	701a      	strb	r2, [r3, #0]
      break;
 80021e4:	e02e      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021e6:	78fa      	ldrb	r2, [r7, #3]
 80021e8:	6879      	ldr	r1, [r7, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	011b      	lsls	r3, r3, #4
 80021ee:	1a9b      	subs	r3, r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	440b      	add	r3, r1
 80021f4:	333c      	adds	r3, #60	@ 0x3c
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d10a      	bne.n	8002212 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021fc:	78fa      	ldrb	r2, [r7, #3]
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	1a9b      	subs	r3, r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	440b      	add	r3, r1
 800220a:	332a      	adds	r3, #42	@ 0x2a
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
      break;
 8002210:	e018      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	332a      	adds	r3, #42	@ 0x2a
 8002222:	2202      	movs	r2, #2
 8002224:	701a      	strb	r2, [r3, #0]
      break;
 8002226:	e00d      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	4613      	mov	r3, r2
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	1a9b      	subs	r3, r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	440b      	add	r3, r1
 8002236:	332a      	adds	r3, #42	@ 0x2a
 8002238:	2200      	movs	r2, #0
 800223a:	701a      	strb	r2, [r3, #0]
      break;
 800223c:	e002      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800223e:	bf00      	nop
 8002240:	e000      	b.n	8002244 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002242:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002244:	78fa      	ldrb	r2, [r7, #3]
 8002246:	6879      	ldr	r1, [r7, #4]
 8002248:	4613      	mov	r3, r2
 800224a:	011b      	lsls	r3, r3, #4
 800224c:	1a9b      	subs	r3, r3, r2
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	440b      	add	r3, r1
 8002252:	332c      	adds	r3, #44	@ 0x2c
 8002254:	697a      	ldr	r2, [r7, #20]
 8002256:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	8b39      	ldrh	r1, [r7, #24]
 800225c:	6878      	ldr	r0, [r7, #4]
 800225e:	4613      	mov	r3, r2
 8002260:	011b      	lsls	r3, r3, #4
 8002262:	1a9b      	subs	r3, r3, r2
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4403      	add	r3, r0
 8002268:	3334      	adds	r3, #52	@ 0x34
 800226a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	334c      	adds	r3, #76	@ 0x4c
 800227c:	2200      	movs	r2, #0
 800227e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002280:	78fa      	ldrb	r2, [r7, #3]
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	4613      	mov	r3, r2
 8002286:	011b      	lsls	r3, r3, #4
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	440b      	add	r3, r1
 800228e:	3338      	adds	r3, #56	@ 0x38
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002294:	78fa      	ldrb	r2, [r7, #3]
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	4613      	mov	r3, r2
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	1a9b      	subs	r3, r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	3315      	adds	r3, #21
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	6879      	ldr	r1, [r7, #4]
 80022ac:	4613      	mov	r3, r2
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	1a9b      	subs	r3, r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	440b      	add	r3, r1
 80022b6:	334d      	adds	r3, #77	@ 0x4d
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	78fa      	ldrb	r2, [r7, #3]
 80022c2:	4613      	mov	r3, r2
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	1a9b      	subs	r3, r3, r2
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	3310      	adds	r3, #16
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	4413      	add	r3, r2
 80022d0:	1d19      	adds	r1, r3, #4
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	799b      	ldrb	r3, [r3, #6]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f004 fc20 	bl	8006b1c <USB_HC_StartXfer>
 80022dc:	4603      	mov	r3, r0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop

080022e8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f004 f914 	bl	800652c <USB_GetMode>
 8002304:	4603      	mov	r3, r0
 8002306:	2b01      	cmp	r3, #1
 8002308:	f040 80fb 	bne.w	8002502 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f004 f8d7 	bl	80064c4 <USB_ReadInterrupts>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 80f1 	beq.w	8002500 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4618      	mov	r0, r3
 8002324:	f004 f8ce 	bl	80064c4 <USB_ReadInterrupts>
 8002328:	4603      	mov	r3, r0
 800232a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800232e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002332:	d104      	bne.n	800233e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800233c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f004 f8be 	bl	80064c4 <USB_ReadInterrupts>
 8002348:	4603      	mov	r3, r0
 800234a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800234e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002352:	d104      	bne.n	800235e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800235c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4618      	mov	r0, r3
 8002364:	f004 f8ae 	bl	80064c4 <USB_ReadInterrupts>
 8002368:	4603      	mov	r3, r0
 800236a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800236e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002372:	d104      	bne.n	800237e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800237c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4618      	mov	r0, r3
 8002384:	f004 f89e 	bl	80064c4 <USB_ReadInterrupts>
 8002388:	4603      	mov	r3, r0
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b02      	cmp	r3, #2
 8002390:	d103      	bne.n	800239a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2202      	movs	r2, #2
 8002398:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f004 f890 	bl	80064c4 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80023aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80023ae:	d120      	bne.n	80023f2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80023b8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0301 	and.w	r3, r3, #1
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d113      	bne.n	80023f2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023ca:	2110      	movs	r1, #16
 80023cc:	6938      	ldr	r0, [r7, #16]
 80023ce:	f003 ff83 	bl	80062d8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023d2:	6938      	ldr	r0, [r7, #16]
 80023d4:	f003 ffb2 	bl	800633c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7a5b      	ldrb	r3, [r3, #9]
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d105      	bne.n	80023ec <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2101      	movs	r1, #1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f004 f9a4 	bl	8006734 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f007 f96b 	bl	80096c8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f004 f864 	bl	80064c4 <USB_ReadInterrupts>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002402:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002406:	d102      	bne.n	800240e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 fd4d 	bl	8003ea8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f004 f856 	bl	80064c4 <USB_ReadInterrupts>
 8002418:	4603      	mov	r3, r0
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	2b08      	cmp	r3, #8
 8002420:	d106      	bne.n	8002430 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f007 f934 	bl	8009690 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2208      	movs	r2, #8
 800242e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f004 f845 	bl	80064c4 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002444:	d139      	bne.n	80024ba <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f004 fde0 	bl	8007010 <USB_HC_ReadInterrupt>
 8002450:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	e025      	b.n	80024a4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	fa22 f303 	lsr.w	r3, r2, r3
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b00      	cmp	r3, #0
 800246a:	d018      	beq.n	800249e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	015a      	lsls	r2, r3, #5
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	4413      	add	r3, r2
 8002474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800247e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002482:	d106      	bne.n	8002492 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	b2db      	uxtb	r3, r3
 8002488:	4619      	mov	r1, r3
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f000 f905 	bl	800269a <HCD_HC_IN_IRQHandler>
 8002490:	e005      	b.n	800249e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4619      	mov	r1, r3
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 ff67 	bl	800336c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3301      	adds	r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	795b      	ldrb	r3, [r3, #5]
 80024a8:	461a      	mov	r2, r3
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d3d3      	bcc.n	8002458 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80024b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f004 f800 	bl	80064c4 <USB_ReadInterrupts>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d101      	bne.n	80024d2 <HAL_HCD_IRQHandler+0x1ea>
 80024ce:	2301      	movs	r3, #1
 80024d0:	e000      	b.n	80024d4 <HAL_HCD_IRQHandler+0x1ec>
 80024d2:	2300      	movs	r3, #0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d014      	beq.n	8002502 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0210 	bic.w	r2, r2, #16
 80024e6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80024e8:	6878      	ldr	r0, [r7, #4]
 80024ea:	f001 fbfe 	bl	8003cea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f042 0210 	orr.w	r2, r2, #16
 80024fc:	619a      	str	r2, [r3, #24]
 80024fe:	e000      	b.n	8002502 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002500:	bf00      	nop
    }
  }
}
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002516:	2b01      	cmp	r3, #1
 8002518:	d101      	bne.n	800251e <HAL_HCD_Start+0x16>
 800251a:	2302      	movs	r3, #2
 800251c:	e013      	b.n	8002546 <HAL_HCD_Start+0x3e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2201      	movs	r2, #1
 8002522:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	2101      	movs	r1, #1
 800252c:	4618      	mov	r0, r3
 800252e:	f004 f968 	bl	8006802 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f003 fe60 	bl	80061fc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002544:	2300      	movs	r3, #0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800255c:	2b01      	cmp	r3, #1
 800255e:	d101      	bne.n	8002564 <HAL_HCD_Stop+0x16>
 8002560:	2302      	movs	r3, #2
 8002562:	e00d      	b.n	8002580 <HAL_HCD_Stop+0x32>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f004 febb 	bl	80072ec <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3708      	adds	r7, #8
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f004 f90a 	bl	80067ae <USB_ResetPort>
 800259a:	4603      	mov	r3, r0
}
 800259c:	4618      	mov	r0, r3
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
 80025ac:	460b      	mov	r3, r1
 80025ae:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025b0:	78fa      	ldrb	r2, [r7, #3]
 80025b2:	6879      	ldr	r1, [r7, #4]
 80025b4:	4613      	mov	r3, r2
 80025b6:	011b      	lsls	r3, r3, #4
 80025b8:	1a9b      	subs	r3, r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	440b      	add	r3, r1
 80025be:	334c      	adds	r3, #76	@ 0x4c
 80025c0:	781b      	ldrb	r3, [r3, #0]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr

080025ce <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
 80025d6:	460b      	mov	r3, r1
 80025d8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025da:	78fa      	ldrb	r2, [r7, #3]
 80025dc:	6879      	ldr	r1, [r7, #4]
 80025de:	4613      	mov	r3, r2
 80025e0:	011b      	lsls	r3, r3, #4
 80025e2:	1a9b      	subs	r3, r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	440b      	add	r3, r1
 80025e8:	3338      	adds	r3, #56	@ 0x38
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4618      	mov	r0, r3
 8002606:	f004 f94c 	bl	80068a2 <USB_GetCurrentFrame>
 800260a:	4603      	mov	r3, r0
}
 800260c:	4618      	mov	r0, r3
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4618      	mov	r0, r3
 8002622:	f004 f927 	bl	8006874 <USB_GetHostSpeed>
 8002626:	4603      	mov	r3, r0
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}

08002630 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002630:	b480      	push	{r7}
 8002632:	b083      	sub	sp, #12
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	460b      	mov	r3, r1
 800263a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800263c:	78fa      	ldrb	r2, [r7, #3]
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	4613      	mov	r3, r2
 8002642:	011b      	lsls	r3, r3, #4
 8002644:	1a9b      	subs	r3, r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	440b      	add	r3, r1
 800264a:	331a      	adds	r3, #26
 800264c:	2200      	movs	r2, #0
 800264e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002650:	78fa      	ldrb	r2, [r7, #3]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	011b      	lsls	r3, r3, #4
 8002658:	1a9b      	subs	r3, r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	331b      	adds	r3, #27
 8002660:	2200      	movs	r2, #0
 8002662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	6879      	ldr	r1, [r7, #4]
 8002668:	4613      	mov	r3, r2
 800266a:	011b      	lsls	r3, r3, #4
 800266c:	1a9b      	subs	r3, r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	3325      	adds	r3, #37	@ 0x25
 8002674:	2200      	movs	r2, #0
 8002676:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	4613      	mov	r3, r2
 800267e:	011b      	lsls	r3, r3, #4
 8002680:	1a9b      	subs	r3, r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	440b      	add	r3, r1
 8002686:	3324      	adds	r3, #36	@ 0x24
 8002688:	2200      	movs	r2, #0
 800268a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	460b      	mov	r3, r1
 80026a4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	78fa      	ldrb	r2, [r7, #3]
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f003 ff16 	bl	80064ea <USB_ReadChInterrupts>
 80026be:	4603      	mov	r3, r0
 80026c0:	f003 0304 	and.w	r3, r3, #4
 80026c4:	2b04      	cmp	r3, #4
 80026c6:	d11a      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80026c8:	78fb      	ldrb	r3, [r7, #3]
 80026ca:	015a      	lsls	r2, r3, #5
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	4413      	add	r3, r2
 80026d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d4:	461a      	mov	r2, r3
 80026d6:	2304      	movs	r3, #4
 80026d8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80026da:	78fa      	ldrb	r2, [r7, #3]
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	4613      	mov	r3, r2
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	1a9b      	subs	r3, r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	440b      	add	r3, r1
 80026e8:	334d      	adds	r3, #77	@ 0x4d
 80026ea:	2207      	movs	r2, #7
 80026ec:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	78fa      	ldrb	r2, [r7, #3]
 80026f4:	4611      	mov	r1, r2
 80026f6:	4618      	mov	r0, r3
 80026f8:	f004 fc9b 	bl	8007032 <USB_HC_Halt>
 80026fc:	e09e      	b.n	800283c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	4611      	mov	r1, r2
 8002706:	4618      	mov	r0, r3
 8002708:	f003 feef 	bl	80064ea <USB_ReadChInterrupts>
 800270c:	4603      	mov	r3, r0
 800270e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002712:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002716:	d11b      	bne.n	8002750 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002718:	78fb      	ldrb	r3, [r7, #3]
 800271a:	015a      	lsls	r2, r3, #5
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	4413      	add	r3, r2
 8002720:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002724:	461a      	mov	r2, r3
 8002726:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800272a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	2208      	movs	r2, #8
 800273e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	4611      	mov	r1, r2
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fc72 	bl	8007032 <USB_HC_Halt>
 800274e:	e075      	b.n	800283c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	78fa      	ldrb	r2, [r7, #3]
 8002756:	4611      	mov	r1, r2
 8002758:	4618      	mov	r0, r3
 800275a:	f003 fec6 	bl	80064ea <USB_ReadChInterrupts>
 800275e:	4603      	mov	r3, r0
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b08      	cmp	r3, #8
 8002766:	d11a      	bne.n	800279e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002768:	78fb      	ldrb	r3, [r7, #3]
 800276a:	015a      	lsls	r2, r3, #5
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	4413      	add	r3, r2
 8002770:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002774:	461a      	mov	r2, r3
 8002776:	2308      	movs	r3, #8
 8002778:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	6879      	ldr	r1, [r7, #4]
 800277e:	4613      	mov	r3, r2
 8002780:	011b      	lsls	r3, r3, #4
 8002782:	1a9b      	subs	r3, r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	440b      	add	r3, r1
 8002788:	334d      	adds	r3, #77	@ 0x4d
 800278a:	2206      	movs	r2, #6
 800278c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	4611      	mov	r1, r2
 8002796:	4618      	mov	r0, r3
 8002798:	f004 fc4b 	bl	8007032 <USB_HC_Halt>
 800279c:	e04e      	b.n	800283c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	78fa      	ldrb	r2, [r7, #3]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f003 fe9f 	bl	80064ea <USB_ReadChInterrupts>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b6:	d11b      	bne.n	80027f0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c4:	461a      	mov	r2, r3
 80027c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80027cc:	78fa      	ldrb	r2, [r7, #3]
 80027ce:	6879      	ldr	r1, [r7, #4]
 80027d0:	4613      	mov	r3, r2
 80027d2:	011b      	lsls	r3, r3, #4
 80027d4:	1a9b      	subs	r3, r3, r2
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	440b      	add	r3, r1
 80027da:	334d      	adds	r3, #77	@ 0x4d
 80027dc:	2209      	movs	r2, #9
 80027de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	78fa      	ldrb	r2, [r7, #3]
 80027e6:	4611      	mov	r1, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	f004 fc22 	bl	8007032 <USB_HC_Halt>
 80027ee:	e025      	b.n	800283c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 fe76 	bl	80064ea <USB_ReadChInterrupts>
 80027fe:	4603      	mov	r3, r0
 8002800:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002804:	2b80      	cmp	r3, #128	@ 0x80
 8002806:	d119      	bne.n	800283c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002808:	78fb      	ldrb	r3, [r7, #3]
 800280a:	015a      	lsls	r2, r3, #5
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	4413      	add	r3, r2
 8002810:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002814:	461a      	mov	r2, r3
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334d      	adds	r3, #77	@ 0x4d
 800282a:	2207      	movs	r2, #7
 800282c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	78fa      	ldrb	r2, [r7, #3]
 8002834:	4611      	mov	r1, r2
 8002836:	4618      	mov	r0, r3
 8002838:	f004 fbfb 	bl	8007032 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	78fa      	ldrb	r2, [r7, #3]
 8002842:	4611      	mov	r1, r2
 8002844:	4618      	mov	r0, r3
 8002846:	f003 fe50 	bl	80064ea <USB_ReadChInterrupts>
 800284a:	4603      	mov	r3, r0
 800284c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002850:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002854:	d112      	bne.n	800287c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	4611      	mov	r1, r2
 800285e:	4618      	mov	r0, r3
 8002860:	f004 fbe7 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002864:	78fb      	ldrb	r3, [r7, #3]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002870:	461a      	mov	r2, r3
 8002872:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002876:	6093      	str	r3, [r2, #8]
 8002878:	f000 bd75 	b.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	78fa      	ldrb	r2, [r7, #3]
 8002882:	4611      	mov	r1, r2
 8002884:	4618      	mov	r0, r3
 8002886:	f003 fe30 	bl	80064ea <USB_ReadChInterrupts>
 800288a:	4603      	mov	r3, r0
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	f040 8128 	bne.w	8002ae6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002896:	78fb      	ldrb	r3, [r7, #3]
 8002898:	015a      	lsls	r2, r3, #5
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	4413      	add	r3, r2
 800289e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a2:	461a      	mov	r2, r3
 80028a4:	2320      	movs	r3, #32
 80028a6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	331b      	adds	r3, #27
 80028b8:	781b      	ldrb	r3, [r3, #0]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d119      	bne.n	80028f2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80028be:	78fa      	ldrb	r2, [r7, #3]
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	1a9b      	subs	r3, r3, r2
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	440b      	add	r3, r1
 80028cc:	331b      	adds	r3, #27
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	015a      	lsls	r2, r3, #5
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	4413      	add	r3, r2
 80028da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	78fa      	ldrb	r2, [r7, #3]
 80028e2:	0151      	lsls	r1, r2, #5
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	440a      	add	r2, r1
 80028e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028f0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	799b      	ldrb	r3, [r3, #6]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01b      	beq.n	8002932 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028fa:	78fa      	ldrb	r2, [r7, #3]
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	4613      	mov	r3, r2
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	1a9b      	subs	r3, r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3330      	adds	r3, #48	@ 0x30
 800290a:	6819      	ldr	r1, [r3, #0]
 800290c:	78fb      	ldrb	r3, [r7, #3]
 800290e:	015a      	lsls	r2, r3, #5
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4413      	add	r3, r2
 8002914:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	78fa      	ldrb	r2, [r7, #3]
 8002920:	1ac9      	subs	r1, r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	4613      	mov	r3, r2
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	1a9b      	subs	r3, r3, r2
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4403      	add	r3, r0
 800292e:	3338      	adds	r3, #56	@ 0x38
 8002930:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	011b      	lsls	r3, r3, #4
 800293a:	1a9b      	subs	r3, r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	334d      	adds	r3, #77	@ 0x4d
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002946:	78fa      	ldrb	r2, [r7, #3]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	011b      	lsls	r3, r3, #4
 800294e:	1a9b      	subs	r3, r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3344      	adds	r3, #68	@ 0x44
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800295a:	78fb      	ldrb	r3, [r7, #3]
 800295c:	015a      	lsls	r2, r3, #5
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4413      	add	r3, r2
 8002962:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002966:	461a      	mov	r2, r3
 8002968:	2301      	movs	r3, #1
 800296a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3326      	adds	r3, #38	@ 0x26
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00a      	beq.n	8002998 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002982:	78fa      	ldrb	r2, [r7, #3]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	011b      	lsls	r3, r3, #4
 800298a:	1a9b      	subs	r3, r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	3326      	adds	r3, #38	@ 0x26
 8002992:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002994:	2b02      	cmp	r3, #2
 8002996:	d110      	bne.n	80029ba <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	4611      	mov	r1, r2
 80029a0:	4618      	mov	r0, r3
 80029a2:	f004 fb46 	bl	8007032 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029a6:	78fb      	ldrb	r3, [r7, #3]
 80029a8:	015a      	lsls	r2, r3, #5
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	4413      	add	r3, r2
 80029ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b2:	461a      	mov	r2, r3
 80029b4:	2310      	movs	r3, #16
 80029b6:	6093      	str	r3, [r2, #8]
 80029b8:	e03d      	b.n	8002a36 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029ba:	78fa      	ldrb	r2, [r7, #3]
 80029bc:	6879      	ldr	r1, [r7, #4]
 80029be:	4613      	mov	r3, r2
 80029c0:	011b      	lsls	r3, r3, #4
 80029c2:	1a9b      	subs	r3, r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	440b      	add	r3, r1
 80029c8:	3326      	adds	r3, #38	@ 0x26
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	2b03      	cmp	r3, #3
 80029ce:	d00a      	beq.n	80029e6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80029d0:	78fa      	ldrb	r2, [r7, #3]
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	4613      	mov	r3, r2
 80029d6:	011b      	lsls	r3, r3, #4
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	3326      	adds	r3, #38	@ 0x26
 80029e0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d127      	bne.n	8002a36 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	015a      	lsls	r2, r3, #5
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	4413      	add	r3, r2
 80029ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	78fa      	ldrb	r2, [r7, #3]
 80029f6:	0151      	lsls	r1, r2, #5
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	440a      	add	r2, r1
 80029fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a04:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	011b      	lsls	r3, r3, #4
 8002a0e:	1a9b      	subs	r3, r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	334c      	adds	r3, #76	@ 0x4c
 8002a16:	2201      	movs	r2, #1
 8002a18:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a1a:	78fa      	ldrb	r2, [r7, #3]
 8002a1c:	6879      	ldr	r1, [r7, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	1a9b      	subs	r3, r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	440b      	add	r3, r1
 8002a28:	334c      	adds	r3, #76	@ 0x4c
 8002a2a:	781a      	ldrb	r2, [r3, #0]
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	4619      	mov	r1, r3
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f006 fe57 	bl	80096e4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	799b      	ldrb	r3, [r3, #6]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d13b      	bne.n	8002ab6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a3e:	78fa      	ldrb	r2, [r7, #3]
 8002a40:	6879      	ldr	r1, [r7, #4]
 8002a42:	4613      	mov	r3, r2
 8002a44:	011b      	lsls	r3, r3, #4
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	440b      	add	r3, r1
 8002a4c:	3338      	adds	r3, #56	@ 0x38
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4403      	add	r3, r0
 8002a5e:	3328      	adds	r3, #40	@ 0x28
 8002a60:	881b      	ldrh	r3, [r3, #0]
 8002a62:	440b      	add	r3, r1
 8002a64:	1e59      	subs	r1, r3, #1
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4403      	add	r3, r0
 8002a74:	3328      	adds	r3, #40	@ 0x28
 8002a76:	881b      	ldrh	r3, [r3, #0]
 8002a78:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8470 	beq.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	011b      	lsls	r3, r3, #4
 8002a8e:	1a9b      	subs	r3, r3, r2
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	440b      	add	r3, r1
 8002a94:	333c      	adds	r3, #60	@ 0x3c
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	78fa      	ldrb	r2, [r7, #3]
 8002a9a:	f083 0301 	eor.w	r3, r3, #1
 8002a9e:	b2d8      	uxtb	r0, r3
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	333c      	adds	r3, #60	@ 0x3c
 8002aae:	4602      	mov	r2, r0
 8002ab0:	701a      	strb	r2, [r3, #0]
 8002ab2:	f000 bc58 	b.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	6879      	ldr	r1, [r7, #4]
 8002aba:	4613      	mov	r3, r2
 8002abc:	011b      	lsls	r3, r3, #4
 8002abe:	1a9b      	subs	r3, r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	333c      	adds	r3, #60	@ 0x3c
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2d8      	uxtb	r0, r3
 8002ad0:	6879      	ldr	r1, [r7, #4]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	011b      	lsls	r3, r3, #4
 8002ad6:	1a9b      	subs	r3, r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	440b      	add	r3, r1
 8002adc:	333c      	adds	r3, #60	@ 0x3c
 8002ade:	4602      	mov	r2, r0
 8002ae0:	701a      	strb	r2, [r3, #0]
 8002ae2:	f000 bc40 	b.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	78fa      	ldrb	r2, [r7, #3]
 8002aec:	4611      	mov	r1, r2
 8002aee:	4618      	mov	r0, r3
 8002af0:	f003 fcfb 	bl	80064ea <USB_ReadChInterrupts>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f003 0320 	and.w	r3, r3, #32
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d131      	bne.n	8002b62 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002afe:	78fb      	ldrb	r3, [r7, #3]
 8002b00:	015a      	lsls	r2, r3, #5
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4413      	add	r3, r2
 8002b06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	2320      	movs	r3, #32
 8002b0e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b10:	78fa      	ldrb	r2, [r7, #3]
 8002b12:	6879      	ldr	r1, [r7, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	1a9b      	subs	r3, r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	440b      	add	r3, r1
 8002b1e:	331a      	adds	r3, #26
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	f040 841f 	bne.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	331b      	adds	r3, #27
 8002b38:	2201      	movs	r2, #1
 8002b3a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	334d      	adds	r3, #77	@ 0x4d
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 fa6a 	bl	8007032 <USB_HC_Halt>
 8002b5e:	f000 bc02 	b.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	78fa      	ldrb	r2, [r7, #3]
 8002b68:	4611      	mov	r1, r2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f003 fcbd 	bl	80064ea <USB_ReadChInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	f040 8305 	bne.w	8003186 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002b7c:	78fb      	ldrb	r3, [r7, #3]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002b8e:	78fa      	ldrb	r2, [r7, #3]
 8002b90:	6879      	ldr	r1, [r7, #4]
 8002b92:	4613      	mov	r3, r2
 8002b94:	011b      	lsls	r3, r3, #4
 8002b96:	1a9b      	subs	r3, r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	440b      	add	r3, r1
 8002b9c:	334d      	adds	r3, #77	@ 0x4d
 8002b9e:	781b      	ldrb	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d114      	bne.n	8002bce <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	6879      	ldr	r1, [r7, #4]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	011b      	lsls	r3, r3, #4
 8002bac:	1a9b      	subs	r3, r3, r2
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	440b      	add	r3, r1
 8002bb2:	334d      	adds	r3, #77	@ 0x4d
 8002bb4:	2202      	movs	r2, #2
 8002bb6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	334c      	adds	r3, #76	@ 0x4c
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
 8002bcc:	e2cc      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	334d      	adds	r3, #77	@ 0x4d
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b06      	cmp	r3, #6
 8002be2:	d114      	bne.n	8002c0e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002be4:	78fa      	ldrb	r2, [r7, #3]
 8002be6:	6879      	ldr	r1, [r7, #4]
 8002be8:	4613      	mov	r3, r2
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	1a9b      	subs	r3, r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	334d      	adds	r3, #77	@ 0x4d
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002bf8:	78fa      	ldrb	r2, [r7, #3]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	011b      	lsls	r3, r3, #4
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	334c      	adds	r3, #76	@ 0x4c
 8002c08:	2205      	movs	r2, #5
 8002c0a:	701a      	strb	r2, [r3, #0]
 8002c0c:	e2ac      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	334d      	adds	r3, #77	@ 0x4d
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b07      	cmp	r3, #7
 8002c22:	d00b      	beq.n	8002c3c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334d      	adds	r3, #77	@ 0x4d
 8002c34:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c36:	2b09      	cmp	r3, #9
 8002c38:	f040 80a6 	bne.w	8002d88 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	334d      	adds	r3, #77	@ 0x4d
 8002c4c:	2202      	movs	r2, #2
 8002c4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c50:	78fa      	ldrb	r2, [r7, #3]
 8002c52:	6879      	ldr	r1, [r7, #4]
 8002c54:	4613      	mov	r3, r2
 8002c56:	011b      	lsls	r3, r3, #4
 8002c58:	1a9b      	subs	r3, r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	440b      	add	r3, r1
 8002c5e:	3344      	adds	r3, #68	@ 0x44
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	1c59      	adds	r1, r3, #1
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4403      	add	r3, r0
 8002c70:	3344      	adds	r3, #68	@ 0x44
 8002c72:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c74:	78fa      	ldrb	r2, [r7, #3]
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	4613      	mov	r3, r2
 8002c7a:	011b      	lsls	r3, r3, #4
 8002c7c:	1a9b      	subs	r3, r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3344      	adds	r3, #68	@ 0x44
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d943      	bls.n	8002d12 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3344      	adds	r3, #68	@ 0x44
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c9e:	78fa      	ldrb	r2, [r7, #3]
 8002ca0:	6879      	ldr	r1, [r7, #4]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	011b      	lsls	r3, r3, #4
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	440b      	add	r3, r1
 8002cac:	331a      	adds	r3, #26
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d123      	bne.n	8002cfc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002cb4:	78fa      	ldrb	r2, [r7, #3]
 8002cb6:	6879      	ldr	r1, [r7, #4]
 8002cb8:	4613      	mov	r3, r2
 8002cba:	011b      	lsls	r3, r3, #4
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	440b      	add	r3, r1
 8002cc2:	331b      	adds	r3, #27
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	6879      	ldr	r1, [r7, #4]
 8002ccc:	4613      	mov	r3, r2
 8002cce:	011b      	lsls	r3, r3, #4
 8002cd0:	1a9b      	subs	r3, r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	331c      	adds	r3, #28
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cdc:	78fb      	ldrb	r3, [r7, #3]
 8002cde:	015a      	lsls	r2, r3, #5
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	78fa      	ldrb	r2, [r7, #3]
 8002cec:	0151      	lsls	r1, r2, #5
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	440a      	add	r2, r1
 8002cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cfa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cfc:	78fa      	ldrb	r2, [r7, #3]
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4613      	mov	r3, r2
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	1a9b      	subs	r3, r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	440b      	add	r3, r1
 8002d0a:	334c      	adds	r3, #76	@ 0x4c
 8002d0c:	2204      	movs	r2, #4
 8002d0e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d10:	e229      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d12:	78fa      	ldrb	r2, [r7, #3]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	011b      	lsls	r3, r3, #4
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	334c      	adds	r3, #76	@ 0x4c
 8002d22:	2202      	movs	r2, #2
 8002d24:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3326      	adds	r3, #38	@ 0x26
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00b      	beq.n	8002d54 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3326      	adds	r3, #38	@ 0x26
 8002d4c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	f040 8209 	bne.w	8003166 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	015a      	lsls	r2, r3, #5
 8002d58:	693b      	ldr	r3, [r7, #16]
 8002d5a:	4413      	add	r3, r2
 8002d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d6a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d72:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d80:	461a      	mov	r2, r3
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d86:	e1ee      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	2b05      	cmp	r3, #5
 8002d9c:	f040 80c8 	bne.w	8002f30 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4613      	mov	r3, r2
 8002da6:	011b      	lsls	r3, r3, #4
 8002da8:	1a9b      	subs	r3, r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	334d      	adds	r3, #77	@ 0x4d
 8002db0:	2202      	movs	r2, #2
 8002db2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002db4:	78fa      	ldrb	r2, [r7, #3]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	1a9b      	subs	r3, r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	331b      	adds	r3, #27
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	f040 81ce 	bne.w	8003168 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	3326      	adds	r3, #38	@ 0x26
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	d16b      	bne.n	8002eba <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	3348      	adds	r3, #72	@ 0x48
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	1c59      	adds	r1, r3, #1
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	4613      	mov	r3, r2
 8002dfa:	011b      	lsls	r3, r3, #4
 8002dfc:	1a9b      	subs	r3, r3, r2
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4403      	add	r3, r0
 8002e02:	3348      	adds	r3, #72	@ 0x48
 8002e04:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	3348      	adds	r3, #72	@ 0x48
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b02      	cmp	r3, #2
 8002e1a:	d943      	bls.n	8002ea4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e1c:	78fa      	ldrb	r2, [r7, #3]
 8002e1e:	6879      	ldr	r1, [r7, #4]
 8002e20:	4613      	mov	r3, r2
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	3348      	adds	r3, #72	@ 0x48
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	331b      	adds	r3, #27
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	3344      	adds	r3, #68	@ 0x44
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d809      	bhi.n	8002e6e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	331c      	adds	r3, #28
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e6e:	78fb      	ldrb	r3, [r7, #3]
 8002e70:	015a      	lsls	r2, r3, #5
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4413      	add	r3, r2
 8002e76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	0151      	lsls	r1, r2, #5
 8002e80:	693a      	ldr	r2, [r7, #16]
 8002e82:	440a      	add	r2, r1
 8002e84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	334c      	adds	r3, #76	@ 0x4c
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	701a      	strb	r2, [r3, #0]
 8002ea2:	e014      	b.n	8002ece <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea4:	78fa      	ldrb	r2, [r7, #3]
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	1a9b      	subs	r3, r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	334c      	adds	r3, #76	@ 0x4c
 8002eb4:	2202      	movs	r2, #2
 8002eb6:	701a      	strb	r2, [r3, #0]
 8002eb8:	e009      	b.n	8002ece <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002eba:	78fa      	ldrb	r2, [r7, #3]
 8002ebc:	6879      	ldr	r1, [r7, #4]
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	011b      	lsls	r3, r3, #4
 8002ec2:	1a9b      	subs	r3, r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	334c      	adds	r3, #76	@ 0x4c
 8002eca:	2202      	movs	r2, #2
 8002ecc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ece:	78fa      	ldrb	r2, [r7, #3]
 8002ed0:	6879      	ldr	r1, [r7, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	011b      	lsls	r3, r3, #4
 8002ed6:	1a9b      	subs	r3, r3, r2
 8002ed8:	009b      	lsls	r3, r3, #2
 8002eda:	440b      	add	r3, r1
 8002edc:	3326      	adds	r3, #38	@ 0x26
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	6879      	ldr	r1, [r7, #4]
 8002ee8:	4613      	mov	r3, r2
 8002eea:	011b      	lsls	r3, r3, #4
 8002eec:	1a9b      	subs	r3, r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	440b      	add	r3, r1
 8002ef2:	3326      	adds	r3, #38	@ 0x26
 8002ef4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	f040 8136 	bne.w	8003168 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002efc:	78fb      	ldrb	r3, [r7, #3]
 8002efe:	015a      	lsls	r2, r3, #5
 8002f00:	693b      	ldr	r3, [r7, #16]
 8002f02:	4413      	add	r3, r2
 8002f04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f12:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f1a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f1c:	78fb      	ldrb	r3, [r7, #3]
 8002f1e:	015a      	lsls	r2, r3, #5
 8002f20:	693b      	ldr	r3, [r7, #16]
 8002f22:	4413      	add	r3, r2
 8002f24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f28:	461a      	mov	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e11b      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	334d      	adds	r3, #77	@ 0x4d
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	2b03      	cmp	r3, #3
 8002f44:	f040 8081 	bne.w	800304a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334d      	adds	r3, #77	@ 0x4d
 8002f58:	2202      	movs	r2, #2
 8002f5a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	6879      	ldr	r1, [r7, #4]
 8002f60:	4613      	mov	r3, r2
 8002f62:	011b      	lsls	r3, r3, #4
 8002f64:	1a9b      	subs	r3, r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	331b      	adds	r3, #27
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	f040 80fa 	bne.w	8003168 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f74:	78fa      	ldrb	r2, [r7, #3]
 8002f76:	6879      	ldr	r1, [r7, #4]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	1a9b      	subs	r3, r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	334c      	adds	r3, #76	@ 0x4c
 8002f84:	2202      	movs	r2, #2
 8002f86:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	015a      	lsls	r2, r3, #5
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4413      	add	r3, r2
 8002f90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	0151      	lsls	r1, r2, #5
 8002f9a:	693a      	ldr	r2, [r7, #16]
 8002f9c:	440a      	add	r2, r1
 8002f9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002fa8:	78fb      	ldrb	r3, [r7, #3]
 8002faa:	015a      	lsls	r2, r3, #5
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4413      	add	r3, r2
 8002fb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	0151      	lsls	r1, r2, #5
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	440a      	add	r2, r1
 8002fbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	015a      	lsls	r2, r3, #5
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4413      	add	r3, r2
 8002fd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	78fa      	ldrb	r2, [r7, #3]
 8002fd8:	0151      	lsls	r1, r2, #5
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	440a      	add	r2, r1
 8002fde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fe2:	f023 0320 	bic.w	r3, r3, #32
 8002fe6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fe8:	78fa      	ldrb	r2, [r7, #3]
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	4613      	mov	r3, r2
 8002fee:	011b      	lsls	r3, r3, #4
 8002ff0:	1a9b      	subs	r3, r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	3326      	adds	r3, #38	@ 0x26
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00b      	beq.n	8003016 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	6879      	ldr	r1, [r7, #4]
 8003002:	4613      	mov	r3, r2
 8003004:	011b      	lsls	r3, r3, #4
 8003006:	1a9b      	subs	r3, r3, r2
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	440b      	add	r3, r1
 800300c:	3326      	adds	r3, #38	@ 0x26
 800300e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003010:	2b02      	cmp	r3, #2
 8003012:	f040 80a9 	bne.w	8003168 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003016:	78fb      	ldrb	r3, [r7, #3]
 8003018:	015a      	lsls	r2, r3, #5
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4413      	add	r3, r2
 800301e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800302c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003034:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003036:	78fb      	ldrb	r3, [r7, #3]
 8003038:	015a      	lsls	r2, r3, #5
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	4413      	add	r3, r2
 800303e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6013      	str	r3, [r2, #0]
 8003048:	e08e      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800304a:	78fa      	ldrb	r2, [r7, #3]
 800304c:	6879      	ldr	r1, [r7, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	011b      	lsls	r3, r3, #4
 8003052:	1a9b      	subs	r3, r3, r2
 8003054:	009b      	lsls	r3, r3, #2
 8003056:	440b      	add	r3, r1
 8003058:	334d      	adds	r3, #77	@ 0x4d
 800305a:	781b      	ldrb	r3, [r3, #0]
 800305c:	2b04      	cmp	r3, #4
 800305e:	d143      	bne.n	80030e8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003060:	78fa      	ldrb	r2, [r7, #3]
 8003062:	6879      	ldr	r1, [r7, #4]
 8003064:	4613      	mov	r3, r2
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	009b      	lsls	r3, r3, #2
 800306c:	440b      	add	r3, r1
 800306e:	334d      	adds	r3, #77	@ 0x4d
 8003070:	2202      	movs	r2, #2
 8003072:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003074:	78fa      	ldrb	r2, [r7, #3]
 8003076:	6879      	ldr	r1, [r7, #4]
 8003078:	4613      	mov	r3, r2
 800307a:	011b      	lsls	r3, r3, #4
 800307c:	1a9b      	subs	r3, r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	334c      	adds	r3, #76	@ 0x4c
 8003084:	2202      	movs	r2, #2
 8003086:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	3326      	adds	r3, #38	@ 0x26
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00a      	beq.n	80030b4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800309e:	78fa      	ldrb	r2, [r7, #3]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	011b      	lsls	r3, r3, #4
 80030a6:	1a9b      	subs	r3, r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3326      	adds	r3, #38	@ 0x26
 80030ae:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d159      	bne.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030b4:	78fb      	ldrb	r3, [r7, #3]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030d4:	78fb      	ldrb	r3, [r7, #3]
 80030d6:	015a      	lsls	r2, r3, #5
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4413      	add	r3, r2
 80030dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030e0:	461a      	mov	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e03f      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334d      	adds	r3, #77	@ 0x4d
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d126      	bne.n	800314c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030fe:	78fa      	ldrb	r2, [r7, #3]
 8003100:	6879      	ldr	r1, [r7, #4]
 8003102:	4613      	mov	r3, r2
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	1a9b      	subs	r3, r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	334d      	adds	r3, #77	@ 0x4d
 800310e:	2202      	movs	r2, #2
 8003110:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	011b      	lsls	r3, r3, #4
 800311a:	1a9b      	subs	r3, r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3344      	adds	r3, #68	@ 0x44
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1c59      	adds	r1, r3, #1
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	011b      	lsls	r3, r3, #4
 800312c:	1a9b      	subs	r3, r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	4403      	add	r3, r0
 8003132:	3344      	adds	r3, #68	@ 0x44
 8003134:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	011b      	lsls	r3, r3, #4
 800313e:	1a9b      	subs	r3, r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	440b      	add	r3, r1
 8003144:	334c      	adds	r3, #76	@ 0x4c
 8003146:	2204      	movs	r2, #4
 8003148:	701a      	strb	r2, [r3, #0]
 800314a:	e00d      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	334d      	adds	r3, #77	@ 0x4d
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	f000 8100 	beq.w	8003364 <HCD_HC_IN_IRQHandler+0xcca>
 8003164:	e000      	b.n	8003168 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003166:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	@ 0x4c
 8003178:	781a      	ldrb	r2, [r3, #0]
 800317a:	78fb      	ldrb	r3, [r7, #3]
 800317c:	4619      	mov	r1, r3
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f006 fab0 	bl	80096e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003184:	e0ef      	b.n	8003366 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	78fa      	ldrb	r2, [r7, #3]
 800318c:	4611      	mov	r1, r2
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f9ab 	bl	80064ea <USB_ReadChInterrupts>
 8003194:	4603      	mov	r3, r0
 8003196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	d12f      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800319e:	78fb      	ldrb	r3, [r7, #3]
 80031a0:	015a      	lsls	r2, r3, #5
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4413      	add	r3, r2
 80031a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031aa:	461a      	mov	r2, r3
 80031ac:	2340      	movs	r3, #64	@ 0x40
 80031ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	6879      	ldr	r1, [r7, #4]
 80031b4:	4613      	mov	r3, r2
 80031b6:	011b      	lsls	r3, r3, #4
 80031b8:	1a9b      	subs	r3, r3, r2
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	440b      	add	r3, r1
 80031be:	334d      	adds	r3, #77	@ 0x4d
 80031c0:	2205      	movs	r2, #5
 80031c2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031c4:	78fa      	ldrb	r2, [r7, #3]
 80031c6:	6879      	ldr	r1, [r7, #4]
 80031c8:	4613      	mov	r3, r2
 80031ca:	011b      	lsls	r3, r3, #4
 80031cc:	1a9b      	subs	r3, r3, r2
 80031ce:	009b      	lsls	r3, r3, #2
 80031d0:	440b      	add	r3, r1
 80031d2:	331a      	adds	r3, #26
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d109      	bne.n	80031ee <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80031da:	78fa      	ldrb	r2, [r7, #3]
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	4613      	mov	r3, r2
 80031e0:	011b      	lsls	r3, r3, #4
 80031e2:	1a9b      	subs	r3, r3, r2
 80031e4:	009b      	lsls	r3, r3, #2
 80031e6:	440b      	add	r3, r1
 80031e8:	3344      	adds	r3, #68	@ 0x44
 80031ea:	2200      	movs	r2, #0
 80031ec:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	4611      	mov	r1, r2
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 ff1b 	bl	8007032 <USB_HC_Halt>
 80031fc:	e0b3      	b.n	8003366 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	4611      	mov	r1, r2
 8003206:	4618      	mov	r0, r3
 8003208:	f003 f96f 	bl	80064ea <USB_ReadChInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f003 0310 	and.w	r3, r3, #16
 8003212:	2b10      	cmp	r3, #16
 8003214:	f040 80a7 	bne.w	8003366 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003218:	78fa      	ldrb	r2, [r7, #3]
 800321a:	6879      	ldr	r1, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	440b      	add	r3, r1
 8003226:	3326      	adds	r3, #38	@ 0x26
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b03      	cmp	r3, #3
 800322c:	d11b      	bne.n	8003266 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800322e:	78fa      	ldrb	r2, [r7, #3]
 8003230:	6879      	ldr	r1, [r7, #4]
 8003232:	4613      	mov	r3, r2
 8003234:	011b      	lsls	r3, r3, #4
 8003236:	1a9b      	subs	r3, r3, r2
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	440b      	add	r3, r1
 800323c:	3344      	adds	r3, #68	@ 0x44
 800323e:	2200      	movs	r2, #0
 8003240:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	6879      	ldr	r1, [r7, #4]
 8003246:	4613      	mov	r3, r2
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	1a9b      	subs	r3, r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	440b      	add	r3, r1
 8003250:	334d      	adds	r3, #77	@ 0x4d
 8003252:	2204      	movs	r2, #4
 8003254:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f003 fee7 	bl	8007032 <USB_HC_Halt>
 8003264:	e03f      	b.n	80032e6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3326      	adds	r3, #38	@ 0x26
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d00a      	beq.n	8003292 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800327c:	78fa      	ldrb	r2, [r7, #3]
 800327e:	6879      	ldr	r1, [r7, #4]
 8003280:	4613      	mov	r3, r2
 8003282:	011b      	lsls	r3, r3, #4
 8003284:	1a9b      	subs	r3, r3, r2
 8003286:	009b      	lsls	r3, r3, #2
 8003288:	440b      	add	r3, r1
 800328a:	3326      	adds	r3, #38	@ 0x26
 800328c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800328e:	2b02      	cmp	r3, #2
 8003290:	d129      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003292:	78fa      	ldrb	r2, [r7, #3]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	4613      	mov	r3, r2
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	1a9b      	subs	r3, r3, r2
 800329c:	009b      	lsls	r3, r3, #2
 800329e:	440b      	add	r3, r1
 80032a0:	3344      	adds	r3, #68	@ 0x44
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	799b      	ldrb	r3, [r3, #6]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <HCD_HC_IN_IRQHandler+0xc2a>
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	331b      	adds	r3, #27
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d110      	bne.n	80032e6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	334d      	adds	r3, #77	@ 0x4d
 80032d4:	2204      	movs	r2, #4
 80032d6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	78fa      	ldrb	r2, [r7, #3]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f003 fea6 	bl	8007032 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	6879      	ldr	r1, [r7, #4]
 80032ea:	4613      	mov	r3, r2
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	1a9b      	subs	r3, r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	440b      	add	r3, r1
 80032f4:	331b      	adds	r3, #27
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d129      	bne.n	8003350 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	331b      	adds	r3, #27
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	015a      	lsls	r2, r3, #5
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	4413      	add	r3, r2
 8003318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	0151      	lsls	r1, r2, #5
 8003322:	693a      	ldr	r2, [r7, #16]
 8003324:	440a      	add	r2, r1
 8003326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800332a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	68db      	ldr	r3, [r3, #12]
 800333e:	78fa      	ldrb	r2, [r7, #3]
 8003340:	0151      	lsls	r1, r2, #5
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	440a      	add	r2, r1
 8003346:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800334a:	f043 0320 	orr.w	r3, r3, #32
 800334e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003350:	78fb      	ldrb	r3, [r7, #3]
 8003352:	015a      	lsls	r2, r3, #5
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	4413      	add	r3, r2
 8003358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335c:	461a      	mov	r2, r3
 800335e:	2310      	movs	r3, #16
 8003360:	6093      	str	r3, [r2, #8]
 8003362:	e000      	b.n	8003366 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003364:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003366:	3718      	adds	r7, #24
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	4611      	mov	r1, r2
 800338a:	4618      	mov	r0, r3
 800338c:	f003 f8ad 	bl	80064ea <USB_ReadChInterrupts>
 8003390:	4603      	mov	r3, r0
 8003392:	f003 0304 	and.w	r3, r3, #4
 8003396:	2b04      	cmp	r3, #4
 8003398:	d11b      	bne.n	80033d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800339a:	78fb      	ldrb	r3, [r7, #3]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a6:	461a      	mov	r2, r3
 80033a8:	2304      	movs	r3, #4
 80033aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033ac:	78fa      	ldrb	r2, [r7, #3]
 80033ae:	6879      	ldr	r1, [r7, #4]
 80033b0:	4613      	mov	r3, r2
 80033b2:	011b      	lsls	r3, r3, #4
 80033b4:	1a9b      	subs	r3, r3, r2
 80033b6:	009b      	lsls	r3, r3, #2
 80033b8:	440b      	add	r3, r1
 80033ba:	334d      	adds	r3, #77	@ 0x4d
 80033bc:	2207      	movs	r2, #7
 80033be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	4611      	mov	r1, r2
 80033c8:	4618      	mov	r0, r3
 80033ca:	f003 fe32 	bl	8007032 <USB_HC_Halt>
 80033ce:	f000 bc89 	b.w	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 f885 	bl	80064ea <USB_ReadChInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f003 0320 	and.w	r3, r3, #32
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	f040 8082 	bne.w	80034f0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	015a      	lsls	r2, r3, #5
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	4413      	add	r3, r2
 80033f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f8:	461a      	mov	r2, r3
 80033fa:	2320      	movs	r3, #32
 80033fc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	6879      	ldr	r1, [r7, #4]
 8003402:	4613      	mov	r3, r2
 8003404:	011b      	lsls	r3, r3, #4
 8003406:	1a9b      	subs	r3, r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	440b      	add	r3, r1
 800340c:	3319      	adds	r3, #25
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d124      	bne.n	800345e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3319      	adds	r3, #25
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	334c      	adds	r3, #76	@ 0x4c
 8003438:	2202      	movs	r2, #2
 800343a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	334d      	adds	r3, #77	@ 0x4d
 800344c:	2203      	movs	r2, #3
 800344e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	78fa      	ldrb	r2, [r7, #3]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f003 fdea 	bl	8007032 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	331a      	adds	r3, #26
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b01      	cmp	r3, #1
 8003472:	f040 8437 	bne.w	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
 8003476:	78fa      	ldrb	r2, [r7, #3]
 8003478:	6879      	ldr	r1, [r7, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	011b      	lsls	r3, r3, #4
 800347e:	1a9b      	subs	r3, r3, r2
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	440b      	add	r3, r1
 8003484:	331b      	adds	r3, #27
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	f040 842b 	bne.w	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	3326      	adds	r3, #38	@ 0x26
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d009      	beq.n	80034b8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	331b      	adds	r3, #27
 80034b4:	2201      	movs	r2, #1
 80034b6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	334d      	adds	r3, #77	@ 0x4d
 80034c8:	2203      	movs	r2, #3
 80034ca:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	78fa      	ldrb	r2, [r7, #3]
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f003 fdac 	bl	8007032 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	6879      	ldr	r1, [r7, #4]
 80034de:	4613      	mov	r3, r2
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	1a9b      	subs	r3, r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	440b      	add	r3, r1
 80034e8:	3344      	adds	r3, #68	@ 0x44
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	e3f9      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	4611      	mov	r1, r2
 80034f8:	4618      	mov	r0, r3
 80034fa:	f002 fff6 	bl	80064ea <USB_ReadChInterrupts>
 80034fe:	4603      	mov	r3, r0
 8003500:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003504:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003508:	d111      	bne.n	800352e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800350a:	78fb      	ldrb	r3, [r7, #3]
 800350c:	015a      	lsls	r2, r3, #5
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	4413      	add	r3, r2
 8003512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003516:	461a      	mov	r2, r3
 8003518:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800351c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	78fa      	ldrb	r2, [r7, #3]
 8003524:	4611      	mov	r1, r2
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fd83 	bl	8007032 <USB_HC_Halt>
 800352c:	e3da      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	4611      	mov	r1, r2
 8003536:	4618      	mov	r0, r3
 8003538:	f002 ffd7 	bl	80064ea <USB_ReadChInterrupts>
 800353c:	4603      	mov	r3, r0
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b01      	cmp	r3, #1
 8003544:	d168      	bne.n	8003618 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003546:	78fa      	ldrb	r2, [r7, #3]
 8003548:	6879      	ldr	r1, [r7, #4]
 800354a:	4613      	mov	r3, r2
 800354c:	011b      	lsls	r3, r3, #4
 800354e:	1a9b      	subs	r3, r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	440b      	add	r3, r1
 8003554:	3344      	adds	r3, #68	@ 0x44
 8003556:	2200      	movs	r2, #0
 8003558:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	78fa      	ldrb	r2, [r7, #3]
 8003560:	4611      	mov	r1, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f002 ffc1 	bl	80064ea <USB_ReadChInterrupts>
 8003568:	4603      	mov	r3, r0
 800356a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356e:	2b40      	cmp	r3, #64	@ 0x40
 8003570:	d112      	bne.n	8003598 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003572:	78fa      	ldrb	r2, [r7, #3]
 8003574:	6879      	ldr	r1, [r7, #4]
 8003576:	4613      	mov	r3, r2
 8003578:	011b      	lsls	r3, r3, #4
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	3319      	adds	r3, #25
 8003582:	2201      	movs	r2, #1
 8003584:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003592:	461a      	mov	r2, r3
 8003594:	2340      	movs	r3, #64	@ 0x40
 8003596:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	331b      	adds	r3, #27
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d019      	beq.n	80035e2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035ae:	78fa      	ldrb	r2, [r7, #3]
 80035b0:	6879      	ldr	r1, [r7, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	1a9b      	subs	r3, r3, r2
 80035b8:	009b      	lsls	r3, r3, #2
 80035ba:	440b      	add	r3, r1
 80035bc:	331b      	adds	r3, #27
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035c2:	78fb      	ldrb	r3, [r7, #3]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	0151      	lsls	r1, r2, #5
 80035d4:	693a      	ldr	r2, [r7, #16]
 80035d6:	440a      	add	r2, r1
 80035d8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035e0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80035e2:	78fb      	ldrb	r3, [r7, #3]
 80035e4:	015a      	lsls	r2, r3, #5
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4413      	add	r3, r2
 80035ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ee:	461a      	mov	r2, r3
 80035f0:	2301      	movs	r3, #1
 80035f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	334d      	adds	r3, #77	@ 0x4d
 8003604:	2201      	movs	r2, #1
 8003606:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	78fa      	ldrb	r2, [r7, #3]
 800360e:	4611      	mov	r1, r2
 8003610:	4618      	mov	r0, r3
 8003612:	f003 fd0e 	bl	8007032 <USB_HC_Halt>
 8003616:	e365      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	78fa      	ldrb	r2, [r7, #3]
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f002 ff62 	bl	80064ea <USB_ReadChInterrupts>
 8003626:	4603      	mov	r3, r0
 8003628:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362c:	2b40      	cmp	r3, #64	@ 0x40
 800362e:	d139      	bne.n	80036a4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003630:	78fa      	ldrb	r2, [r7, #3]
 8003632:	6879      	ldr	r1, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	011b      	lsls	r3, r3, #4
 8003638:	1a9b      	subs	r3, r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	440b      	add	r3, r1
 800363e:	334d      	adds	r3, #77	@ 0x4d
 8003640:	2205      	movs	r2, #5
 8003642:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	331a      	adds	r3, #26
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d109      	bne.n	800366e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	6879      	ldr	r1, [r7, #4]
 800365e:	4613      	mov	r3, r2
 8003660:	011b      	lsls	r3, r3, #4
 8003662:	1a9b      	subs	r3, r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	3319      	adds	r3, #25
 800366a:	2201      	movs	r2, #1
 800366c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800366e:	78fa      	ldrb	r2, [r7, #3]
 8003670:	6879      	ldr	r1, [r7, #4]
 8003672:	4613      	mov	r3, r2
 8003674:	011b      	lsls	r3, r3, #4
 8003676:	1a9b      	subs	r3, r3, r2
 8003678:	009b      	lsls	r3, r3, #2
 800367a:	440b      	add	r3, r1
 800367c:	3344      	adds	r3, #68	@ 0x44
 800367e:	2200      	movs	r2, #0
 8003680:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	4611      	mov	r1, r2
 800368a:	4618      	mov	r0, r3
 800368c:	f003 fcd1 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003690:	78fb      	ldrb	r3, [r7, #3]
 8003692:	015a      	lsls	r2, r3, #5
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	4413      	add	r3, r2
 8003698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369c:	461a      	mov	r2, r3
 800369e:	2340      	movs	r3, #64	@ 0x40
 80036a0:	6093      	str	r3, [r2, #8]
 80036a2:	e31f      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f002 ff1c 	bl	80064ea <USB_ReadChInterrupts>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f003 0308 	and.w	r3, r3, #8
 80036b8:	2b08      	cmp	r3, #8
 80036ba:	d11a      	bne.n	80036f2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036bc:	78fb      	ldrb	r3, [r7, #3]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	2308      	movs	r3, #8
 80036cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	6879      	ldr	r1, [r7, #4]
 80036d2:	4613      	mov	r3, r2
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	1a9b      	subs	r3, r3, r2
 80036d8:	009b      	lsls	r3, r3, #2
 80036da:	440b      	add	r3, r1
 80036dc:	334d      	adds	r3, #77	@ 0x4d
 80036de:	2206      	movs	r2, #6
 80036e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	78fa      	ldrb	r2, [r7, #3]
 80036e8:	4611      	mov	r1, r2
 80036ea:	4618      	mov	r0, r3
 80036ec:	f003 fca1 	bl	8007032 <USB_HC_Halt>
 80036f0:	e2f8      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f002 fef5 	bl	80064ea <USB_ReadChInterrupts>
 8003700:	4603      	mov	r3, r0
 8003702:	f003 0310 	and.w	r3, r3, #16
 8003706:	2b10      	cmp	r3, #16
 8003708:	d144      	bne.n	8003794 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	3344      	adds	r3, #68	@ 0x44
 800371a:	2200      	movs	r2, #0
 800371c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	334d      	adds	r3, #77	@ 0x4d
 800372e:	2204      	movs	r2, #4
 8003730:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003732:	78fa      	ldrb	r2, [r7, #3]
 8003734:	6879      	ldr	r1, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	011b      	lsls	r3, r3, #4
 800373a:	1a9b      	subs	r3, r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	3319      	adds	r3, #25
 8003742:	781b      	ldrb	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d114      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	3318      	adds	r3, #24
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d109      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800375e:	78fa      	ldrb	r2, [r7, #3]
 8003760:	6879      	ldr	r1, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	1a9b      	subs	r3, r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	440b      	add	r3, r1
 800376c:	3319      	adds	r3, #25
 800376e:	2201      	movs	r2, #1
 8003770:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	78fa      	ldrb	r2, [r7, #3]
 8003778:	4611      	mov	r1, r2
 800377a:	4618      	mov	r0, r3
 800377c:	f003 fc59 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003780:	78fb      	ldrb	r3, [r7, #3]
 8003782:	015a      	lsls	r2, r3, #5
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4413      	add	r3, r2
 8003788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378c:	461a      	mov	r2, r3
 800378e:	2310      	movs	r3, #16
 8003790:	6093      	str	r3, [r2, #8]
 8003792:	e2a7      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	78fa      	ldrb	r2, [r7, #3]
 800379a:	4611      	mov	r1, r2
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fea4 	bl	80064ea <USB_ReadChInterrupts>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a8:	2b80      	cmp	r3, #128	@ 0x80
 80037aa:	f040 8083 	bne.w	80038b4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	799b      	ldrb	r3, [r3, #6]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d111      	bne.n	80037da <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80037b6:	78fa      	ldrb	r2, [r7, #3]
 80037b8:	6879      	ldr	r1, [r7, #4]
 80037ba:	4613      	mov	r3, r2
 80037bc:	011b      	lsls	r3, r3, #4
 80037be:	1a9b      	subs	r3, r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	334d      	adds	r3, #77	@ 0x4d
 80037c6:	2207      	movs	r2, #7
 80037c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f003 fc2d 	bl	8007032 <USB_HC_Halt>
 80037d8:	e062      	b.n	80038a0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	6879      	ldr	r1, [r7, #4]
 80037de:	4613      	mov	r3, r2
 80037e0:	011b      	lsls	r3, r3, #4
 80037e2:	1a9b      	subs	r3, r3, r2
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	3344      	adds	r3, #68	@ 0x44
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	1c59      	adds	r1, r3, #1
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	4613      	mov	r3, r2
 80037f2:	011b      	lsls	r3, r3, #4
 80037f4:	1a9b      	subs	r3, r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4403      	add	r3, r0
 80037fa:	3344      	adds	r3, #68	@ 0x44
 80037fc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	@ 0x44
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b02      	cmp	r3, #2
 8003812:	d922      	bls.n	800385a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	6879      	ldr	r1, [r7, #4]
 8003818:	4613      	mov	r3, r2
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	1a9b      	subs	r3, r3, r2
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	440b      	add	r3, r1
 8003822:	3344      	adds	r3, #68	@ 0x44
 8003824:	2200      	movs	r2, #0
 8003826:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	334c      	adds	r3, #76	@ 0x4c
 8003838:	2204      	movs	r2, #4
 800383a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	334c      	adds	r3, #76	@ 0x4c
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	78fb      	ldrb	r3, [r7, #3]
 8003850:	4619      	mov	r1, r3
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f005 ff46 	bl	80096e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003858:	e022      	b.n	80038a0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	334c      	adds	r3, #76	@ 0x4c
 800386a:	2202      	movs	r2, #2
 800386c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800386e:	78fb      	ldrb	r3, [r7, #3]
 8003870:	015a      	lsls	r2, r3, #5
 8003872:	693b      	ldr	r3, [r7, #16]
 8003874:	4413      	add	r3, r2
 8003876:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003884:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800388c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	015a      	lsls	r2, r3, #5
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	4413      	add	r3, r2
 8003896:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800389a:	461a      	mov	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038a0:	78fb      	ldrb	r3, [r7, #3]
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038ac:	461a      	mov	r2, r3
 80038ae:	2380      	movs	r3, #128	@ 0x80
 80038b0:	6093      	str	r3, [r2, #8]
 80038b2:	e217      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	4611      	mov	r1, r2
 80038bc:	4618      	mov	r0, r3
 80038be:	f002 fe14 	bl	80064ea <USB_ReadChInterrupts>
 80038c2:	4603      	mov	r3, r0
 80038c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038cc:	d11b      	bne.n	8003906 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80038ce:	78fa      	ldrb	r2, [r7, #3]
 80038d0:	6879      	ldr	r1, [r7, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	334d      	adds	r3, #77	@ 0x4d
 80038de:	2209      	movs	r2, #9
 80038e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	78fa      	ldrb	r2, [r7, #3]
 80038e8:	4611      	mov	r1, r2
 80038ea:	4618      	mov	r0, r3
 80038ec:	f003 fba1 	bl	8007032 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fc:	461a      	mov	r2, r3
 80038fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003902:	6093      	str	r3, [r2, #8]
 8003904:	e1ee      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	78fa      	ldrb	r2, [r7, #3]
 800390c:	4611      	mov	r1, r2
 800390e:	4618      	mov	r0, r3
 8003910:	f002 fdeb 	bl	80064ea <USB_ReadChInterrupts>
 8003914:	4603      	mov	r3, r0
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b02      	cmp	r3, #2
 800391c:	f040 81df 	bne.w	8003cde <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003920:	78fb      	ldrb	r3, [r7, #3]
 8003922:	015a      	lsls	r2, r3, #5
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392c:	461a      	mov	r2, r3
 800392e:	2302      	movs	r3, #2
 8003930:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	4613      	mov	r3, r2
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	1a9b      	subs	r3, r3, r2
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	440b      	add	r3, r1
 8003940:	334d      	adds	r3, #77	@ 0x4d
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	f040 8093 	bne.w	8003a70 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	334d      	adds	r3, #77	@ 0x4d
 800395a:	2202      	movs	r2, #2
 800395c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800395e:	78fa      	ldrb	r2, [r7, #3]
 8003960:	6879      	ldr	r1, [r7, #4]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	334c      	adds	r3, #76	@ 0x4c
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003972:	78fa      	ldrb	r2, [r7, #3]
 8003974:	6879      	ldr	r1, [r7, #4]
 8003976:	4613      	mov	r3, r2
 8003978:	011b      	lsls	r3, r3, #4
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3326      	adds	r3, #38	@ 0x26
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b02      	cmp	r3, #2
 8003986:	d00b      	beq.n	80039a0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003988:	78fa      	ldrb	r2, [r7, #3]
 800398a:	6879      	ldr	r1, [r7, #4]
 800398c:	4613      	mov	r3, r2
 800398e:	011b      	lsls	r3, r3, #4
 8003990:	1a9b      	subs	r3, r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	3326      	adds	r3, #38	@ 0x26
 8003998:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800399a:	2b03      	cmp	r3, #3
 800399c:	f040 8190 	bne.w	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	799b      	ldrb	r3, [r3, #6]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d115      	bne.n	80039d4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039a8:	78fa      	ldrb	r2, [r7, #3]
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	4613      	mov	r3, r2
 80039ae:	011b      	lsls	r3, r3, #4
 80039b0:	1a9b      	subs	r3, r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	440b      	add	r3, r1
 80039b6:	333d      	adds	r3, #61	@ 0x3d
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	f083 0301 	eor.w	r3, r3, #1
 80039c0:	b2d8      	uxtb	r0, r3
 80039c2:	6879      	ldr	r1, [r7, #4]
 80039c4:	4613      	mov	r3, r2
 80039c6:	011b      	lsls	r3, r3, #4
 80039c8:	1a9b      	subs	r3, r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	333d      	adds	r3, #61	@ 0x3d
 80039d0:	4602      	mov	r2, r0
 80039d2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	799b      	ldrb	r3, [r3, #6]
 80039d8:	2b01      	cmp	r3, #1
 80039da:	f040 8171 	bne.w	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
 80039de:	78fa      	ldrb	r2, [r7, #3]
 80039e0:	6879      	ldr	r1, [r7, #4]
 80039e2:	4613      	mov	r3, r2
 80039e4:	011b      	lsls	r3, r3, #4
 80039e6:	1a9b      	subs	r3, r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	440b      	add	r3, r1
 80039ec:	3334      	adds	r3, #52	@ 0x34
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 8165 	beq.w	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	6879      	ldr	r1, [r7, #4]
 80039fa:	4613      	mov	r3, r2
 80039fc:	011b      	lsls	r3, r3, #4
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3334      	adds	r3, #52	@ 0x34
 8003a06:	6819      	ldr	r1, [r3, #0]
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	4403      	add	r3, r0
 8003a16:	3328      	adds	r3, #40	@ 0x28
 8003a18:	881b      	ldrh	r3, [r3, #0]
 8003a1a:	440b      	add	r3, r1
 8003a1c:	1e59      	subs	r1, r3, #1
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4403      	add	r3, r0
 8003a2c:	3328      	adds	r3, #40	@ 0x28
 8003a2e:	881b      	ldrh	r3, [r3, #0]
 8003a30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a34:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	f000 813f 	beq.w	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a42:	78fa      	ldrb	r2, [r7, #3]
 8003a44:	6879      	ldr	r1, [r7, #4]
 8003a46:	4613      	mov	r3, r2
 8003a48:	011b      	lsls	r3, r3, #4
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	440b      	add	r3, r1
 8003a50:	333d      	adds	r3, #61	@ 0x3d
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	78fa      	ldrb	r2, [r7, #3]
 8003a56:	f083 0301 	eor.w	r3, r3, #1
 8003a5a:	b2d8      	uxtb	r0, r3
 8003a5c:	6879      	ldr	r1, [r7, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	1a9b      	subs	r3, r3, r2
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	440b      	add	r3, r1
 8003a68:	333d      	adds	r3, #61	@ 0x3d
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	701a      	strb	r2, [r3, #0]
 8003a6e:	e127      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a70:	78fa      	ldrb	r2, [r7, #3]
 8003a72:	6879      	ldr	r1, [r7, #4]
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	440b      	add	r3, r1
 8003a7e:	334d      	adds	r3, #77	@ 0x4d
 8003a80:	781b      	ldrb	r3, [r3, #0]
 8003a82:	2b03      	cmp	r3, #3
 8003a84:	d120      	bne.n	8003ac8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a86:	78fa      	ldrb	r2, [r7, #3]
 8003a88:	6879      	ldr	r1, [r7, #4]
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	1a9b      	subs	r3, r3, r2
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	440b      	add	r3, r1
 8003a94:	334d      	adds	r3, #77	@ 0x4d
 8003a96:	2202      	movs	r2, #2
 8003a98:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	6879      	ldr	r1, [r7, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	1a9b      	subs	r3, r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	440b      	add	r3, r1
 8003aa8:	331b      	adds	r3, #27
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	f040 8107 	bne.w	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ab2:	78fa      	ldrb	r2, [r7, #3]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	011b      	lsls	r3, r3, #4
 8003aba:	1a9b      	subs	r3, r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334c      	adds	r3, #76	@ 0x4c
 8003ac2:	2202      	movs	r2, #2
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	e0fb      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6879      	ldr	r1, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	440b      	add	r3, r1
 8003ad6:	334d      	adds	r3, #77	@ 0x4d
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b04      	cmp	r3, #4
 8003adc:	d13a      	bne.n	8003b54 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334d      	adds	r3, #77	@ 0x4d
 8003aee:	2202      	movs	r2, #2
 8003af0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003af2:	78fa      	ldrb	r2, [r7, #3]
 8003af4:	6879      	ldr	r1, [r7, #4]
 8003af6:	4613      	mov	r3, r2
 8003af8:	011b      	lsls	r3, r3, #4
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	440b      	add	r3, r1
 8003b00:	334c      	adds	r3, #76	@ 0x4c
 8003b02:	2202      	movs	r2, #2
 8003b04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	331b      	adds	r3, #27
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	f040 80d1 	bne.w	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	331b      	adds	r3, #27
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b32:	78fb      	ldrb	r3, [r7, #3]
 8003b34:	015a      	lsls	r2, r3, #5
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	78fa      	ldrb	r2, [r7, #3]
 8003b42:	0151      	lsls	r1, r2, #5
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	440a      	add	r2, r1
 8003b48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b50:	6053      	str	r3, [r2, #4]
 8003b52:	e0b5      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b54:	78fa      	ldrb	r2, [r7, #3]
 8003b56:	6879      	ldr	r1, [r7, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	440b      	add	r3, r1
 8003b62:	334d      	adds	r3, #77	@ 0x4d
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b05      	cmp	r3, #5
 8003b68:	d114      	bne.n	8003b94 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b6a:	78fa      	ldrb	r2, [r7, #3]
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	011b      	lsls	r3, r3, #4
 8003b72:	1a9b      	subs	r3, r3, r2
 8003b74:	009b      	lsls	r3, r3, #2
 8003b76:	440b      	add	r3, r1
 8003b78:	334d      	adds	r3, #77	@ 0x4d
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334c      	adds	r3, #76	@ 0x4c
 8003b8e:	2202      	movs	r2, #2
 8003b90:	701a      	strb	r2, [r3, #0]
 8003b92:	e095      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003b94:	78fa      	ldrb	r2, [r7, #3]
 8003b96:	6879      	ldr	r1, [r7, #4]
 8003b98:	4613      	mov	r3, r2
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	440b      	add	r3, r1
 8003ba2:	334d      	adds	r3, #77	@ 0x4d
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	2b06      	cmp	r3, #6
 8003ba8:	d114      	bne.n	8003bd4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	334d      	adds	r3, #77	@ 0x4d
 8003bba:	2202      	movs	r2, #2
 8003bbc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	334c      	adds	r3, #76	@ 0x4c
 8003bce:	2205      	movs	r2, #5
 8003bd0:	701a      	strb	r2, [r3, #0]
 8003bd2:	e075      	b.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	334d      	adds	r3, #77	@ 0x4d
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	2b07      	cmp	r3, #7
 8003be8:	d00a      	beq.n	8003c00 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bfc:	2b09      	cmp	r3, #9
 8003bfe:	d170      	bne.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	334d      	adds	r3, #77	@ 0x4d
 8003c10:	2202      	movs	r2, #2
 8003c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	3344      	adds	r3, #68	@ 0x44
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	1c59      	adds	r1, r3, #1
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	011b      	lsls	r3, r3, #4
 8003c2e:	1a9b      	subs	r3, r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	4403      	add	r3, r0
 8003c34:	3344      	adds	r3, #68	@ 0x44
 8003c36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	6879      	ldr	r1, [r7, #4]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	011b      	lsls	r3, r3, #4
 8003c40:	1a9b      	subs	r3, r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	440b      	add	r3, r1
 8003c46:	3344      	adds	r3, #68	@ 0x44
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d914      	bls.n	8003c78 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c4e:	78fa      	ldrb	r2, [r7, #3]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	011b      	lsls	r3, r3, #4
 8003c56:	1a9b      	subs	r3, r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3344      	adds	r3, #68	@ 0x44
 8003c5e:	2200      	movs	r2, #0
 8003c60:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c62:	78fa      	ldrb	r2, [r7, #3]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	1a9b      	subs	r3, r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	334c      	adds	r3, #76	@ 0x4c
 8003c72:	2204      	movs	r2, #4
 8003c74:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c76:	e022      	b.n	8003cbe <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	334c      	adds	r3, #76	@ 0x4c
 8003c88:	2202      	movs	r2, #2
 8003c8a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c8c:	78fb      	ldrb	r3, [r7, #3]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ca2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003caa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cac:	78fb      	ldrb	r3, [r7, #3]
 8003cae:	015a      	lsls	r2, r3, #5
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb8:	461a      	mov	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cbe:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	334c      	adds	r3, #76	@ 0x4c
 8003cd0:	781a      	ldrb	r2, [r3, #0]
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f005 fd04 	bl	80096e4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cdc:	e002      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003ce2:	bf00      	nop
  }
}
 8003ce4:	3718      	adds	r7, #24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b08a      	sub	sp, #40	@ 0x28
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	f003 030f 	and.w	r3, r3, #15
 8003d0a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	0c5b      	lsrs	r3, r3, #17
 8003d10:	f003 030f 	and.w	r3, r3, #15
 8003d14:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d004      	beq.n	8003d30 <HCD_RXQLVL_IRQHandler+0x46>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b05      	cmp	r3, #5
 8003d2a:	f000 80b6 	beq.w	8003e9a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d2e:	e0b7      	b.n	8003ea0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 80b3 	beq.w	8003e9e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	332c      	adds	r3, #44	@ 0x2c
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 80a7 	beq.w	8003e9e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d50:	6879      	ldr	r1, [r7, #4]
 8003d52:	69ba      	ldr	r2, [r7, #24]
 8003d54:	4613      	mov	r3, r2
 8003d56:	011b      	lsls	r3, r3, #4
 8003d58:	1a9b      	subs	r3, r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3338      	adds	r3, #56	@ 0x38
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	18d1      	adds	r1, r2, r3
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	011b      	lsls	r3, r3, #4
 8003d6e:	1a9b      	subs	r3, r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4403      	add	r3, r0
 8003d74:	3334      	adds	r3, #52	@ 0x34
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4299      	cmp	r1, r3
 8003d7a:	f200 8083 	bhi.w	8003e84 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	4613      	mov	r3, r2
 8003d88:	011b      	lsls	r3, r3, #4
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	332c      	adds	r3, #44	@ 0x2c
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	b292      	uxth	r2, r2
 8003d98:	4619      	mov	r1, r3
 8003d9a:	f002 fb3b 	bl	8006414 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	4613      	mov	r3, r2
 8003da4:	011b      	lsls	r3, r3, #4
 8003da6:	1a9b      	subs	r3, r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	440b      	add	r3, r1
 8003dac:	332c      	adds	r3, #44	@ 0x2c
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	18d1      	adds	r1, r2, r3
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4613      	mov	r3, r2
 8003dba:	011b      	lsls	r3, r3, #4
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	4403      	add	r3, r0
 8003dc2:	332c      	adds	r3, #44	@ 0x2c
 8003dc4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	3338      	adds	r3, #56	@ 0x38
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	18d1      	adds	r1, r2, r3
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	69ba      	ldr	r2, [r7, #24]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	4403      	add	r3, r0
 8003dea:	3338      	adds	r3, #56	@ 0x38
 8003dec:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	6a3b      	ldr	r3, [r7, #32]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	0cdb      	lsrs	r3, r3, #19
 8003dfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e02:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	011b      	lsls	r3, r3, #4
 8003e0c:	1a9b      	subs	r3, r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	3328      	adds	r3, #40	@ 0x28
 8003e14:	881b      	ldrh	r3, [r3, #0]
 8003e16:	461a      	mov	r2, r3
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d13f      	bne.n	8003e9e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d03c      	beq.n	8003e9e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	015a      	lsls	r2, r3, #5
 8003e28:	6a3b      	ldr	r3, [r7, #32]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e3a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e42:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e44:	69bb      	ldr	r3, [r7, #24]
 8003e46:	015a      	lsls	r2, r3, #5
 8003e48:	6a3b      	ldr	r3, [r7, #32]
 8003e4a:	4413      	add	r3, r2
 8003e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e50:	461a      	mov	r2, r3
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e56:	6879      	ldr	r1, [r7, #4]
 8003e58:	69ba      	ldr	r2, [r7, #24]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	011b      	lsls	r3, r3, #4
 8003e5e:	1a9b      	subs	r3, r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	333c      	adds	r3, #60	@ 0x3c
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f083 0301 	eor.w	r3, r3, #1
 8003e6c:	b2d8      	uxtb	r0, r3
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	333c      	adds	r3, #60	@ 0x3c
 8003e7e:	4602      	mov	r2, r0
 8003e80:	701a      	strb	r2, [r3, #0]
      break;
 8003e82:	e00c      	b.n	8003e9e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	69ba      	ldr	r2, [r7, #24]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	334c      	adds	r3, #76	@ 0x4c
 8003e94:	2204      	movs	r2, #4
 8003e96:	701a      	strb	r2, [r3, #0]
      break;
 8003e98:	e001      	b.n	8003e9e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e000      	b.n	8003ea0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003e9e:	bf00      	nop
  }
}
 8003ea0:	bf00      	nop
 8003ea2:	3728      	adds	r7, #40	@ 0x28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}

08003ea8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003ed4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f003 0302 	and.w	r3, r3, #2
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d10b      	bne.n	8003ef8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d102      	bne.n	8003ef0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f005 fbde 	bl	80096ac <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	f043 0302 	orr.w	r3, r3, #2
 8003ef6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f003 0308 	and.w	r3, r3, #8
 8003efe:	2b08      	cmp	r3, #8
 8003f00:	d132      	bne.n	8003f68 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f043 0308 	orr.w	r3, r3, #8
 8003f08:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f003 0304 	and.w	r3, r3, #4
 8003f10:	2b04      	cmp	r3, #4
 8003f12:	d126      	bne.n	8003f62 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	7a5b      	ldrb	r3, [r3, #9]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d113      	bne.n	8003f44 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f22:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f26:	d106      	bne.n	8003f36 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2102      	movs	r1, #2
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f002 fc00 	bl	8006734 <USB_InitFSLSPClkSel>
 8003f34:	e011      	b.n	8003f5a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f002 fbf9 	bl	8006734 <USB_InitFSLSPClkSel>
 8003f42:	e00a      	b.n	8003f5a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	79db      	ldrb	r3, [r3, #7]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d106      	bne.n	8003f5a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f52:	461a      	mov	r2, r3
 8003f54:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f58:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f005 fbd0 	bl	8009700 <HAL_HCD_PortEnabled_Callback>
 8003f60:	e002      	b.n	8003f68 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f005 fbda 	bl	800971c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 0320 	and.w	r3, r3, #32
 8003f6e:	2b20      	cmp	r3, #32
 8003f70:	d103      	bne.n	8003f7a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	f043 0320 	orr.w	r3, r3, #32
 8003f78:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f80:	461a      	mov	r2, r3
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6013      	str	r3, [r2, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
	...

08003f90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e12b      	b.n	80041fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d106      	bne.n	8003fbc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7fd f8e0 	bl	800117c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2224      	movs	r2, #36	@ 0x24
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f022 0201 	bic.w	r2, r2, #1
 8003fd2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fe2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ff2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff4:	f001 fa20 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8003ff8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	4a81      	ldr	r2, [pc, #516]	@ (8004204 <HAL_I2C_Init+0x274>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d807      	bhi.n	8004014 <HAL_I2C_Init+0x84>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a80      	ldr	r2, [pc, #512]	@ (8004208 <HAL_I2C_Init+0x278>)
 8004008:	4293      	cmp	r3, r2
 800400a:	bf94      	ite	ls
 800400c:	2301      	movls	r3, #1
 800400e:	2300      	movhi	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	e006      	b.n	8004022 <HAL_I2C_Init+0x92>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	4a7d      	ldr	r2, [pc, #500]	@ (800420c <HAL_I2C_Init+0x27c>)
 8004018:	4293      	cmp	r3, r2
 800401a:	bf94      	ite	ls
 800401c:	2301      	movls	r3, #1
 800401e:	2300      	movhi	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0e7      	b.n	80041fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	4a78      	ldr	r2, [pc, #480]	@ (8004210 <HAL_I2C_Init+0x280>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	0c9b      	lsrs	r3, r3, #18
 8004034:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	430a      	orrs	r2, r1
 8004048:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6a1b      	ldr	r3, [r3, #32]
 8004050:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	4a6a      	ldr	r2, [pc, #424]	@ (8004204 <HAL_I2C_Init+0x274>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d802      	bhi.n	8004064 <HAL_I2C_Init+0xd4>
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	3301      	adds	r3, #1
 8004062:	e009      	b.n	8004078 <HAL_I2C_Init+0xe8>
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	4a69      	ldr	r2, [pc, #420]	@ (8004214 <HAL_I2C_Init+0x284>)
 8004070:	fba2 2303 	umull	r2, r3, r2, r3
 8004074:	099b      	lsrs	r3, r3, #6
 8004076:	3301      	adds	r3, #1
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	6812      	ldr	r2, [r2, #0]
 800407c:	430b      	orrs	r3, r1
 800407e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69db      	ldr	r3, [r3, #28]
 8004086:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800408a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	495c      	ldr	r1, [pc, #368]	@ (8004204 <HAL_I2C_Init+0x274>)
 8004094:	428b      	cmp	r3, r1
 8004096:	d819      	bhi.n	80040cc <HAL_I2C_Init+0x13c>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	1e59      	subs	r1, r3, #1
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	685b      	ldr	r3, [r3, #4]
 80040a0:	005b      	lsls	r3, r3, #1
 80040a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040ac:	400b      	ands	r3, r1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_I2C_Init+0x138>
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1e59      	subs	r1, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	005b      	lsls	r3, r3, #1
 80040bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80040c0:	3301      	adds	r3, #1
 80040c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c6:	e051      	b.n	800416c <HAL_I2C_Init+0x1dc>
 80040c8:	2304      	movs	r3, #4
 80040ca:	e04f      	b.n	800416c <HAL_I2C_Init+0x1dc>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d111      	bne.n	80040f8 <HAL_I2C_Init+0x168>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	1e58      	subs	r0, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6859      	ldr	r1, [r3, #4]
 80040dc:	460b      	mov	r3, r1
 80040de:	005b      	lsls	r3, r3, #1
 80040e0:	440b      	add	r3, r1
 80040e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e6:	3301      	adds	r3, #1
 80040e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	bf0c      	ite	eq
 80040f0:	2301      	moveq	r3, #1
 80040f2:	2300      	movne	r3, #0
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	e012      	b.n	800411e <HAL_I2C_Init+0x18e>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	1e58      	subs	r0, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6859      	ldr	r1, [r3, #4]
 8004100:	460b      	mov	r3, r1
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	0099      	lsls	r1, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	fbb0 f3f3 	udiv	r3, r0, r3
 800410e:	3301      	adds	r3, #1
 8004110:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_I2C_Init+0x196>
 8004122:	2301      	movs	r3, #1
 8004124:	e022      	b.n	800416c <HAL_I2C_Init+0x1dc>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10e      	bne.n	800414c <HAL_I2C_Init+0x1bc>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1e58      	subs	r0, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6859      	ldr	r1, [r3, #4]
 8004136:	460b      	mov	r3, r1
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	440b      	add	r3, r1
 800413c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004140:	3301      	adds	r3, #1
 8004142:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004146:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800414a:	e00f      	b.n	800416c <HAL_I2C_Init+0x1dc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	1e58      	subs	r0, r3, #1
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6859      	ldr	r1, [r3, #4]
 8004154:	460b      	mov	r3, r1
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	0099      	lsls	r1, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	6809      	ldr	r1, [r1, #0]
 8004170:	4313      	orrs	r3, r2
 8004172:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	69da      	ldr	r2, [r3, #28]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a1b      	ldr	r3, [r3, #32]
 8004186:	431a      	orrs	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	430a      	orrs	r2, r1
 800418e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800419a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	6911      	ldr	r1, [r2, #16]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	68d2      	ldr	r2, [r2, #12]
 80041a6:	4311      	orrs	r1, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6812      	ldr	r2, [r2, #0]
 80041ac:	430b      	orrs	r3, r1
 80041ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68db      	ldr	r3, [r3, #12]
 80041b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0201 	orr.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2220      	movs	r2, #32
 80041e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	000186a0 	.word	0x000186a0
 8004208:	001e847f 	.word	0x001e847f
 800420c:	003d08ff 	.word	0x003d08ff
 8004210:	431bde83 	.word	0x431bde83
 8004214:	10624dd3 	.word	0x10624dd3

08004218 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b088      	sub	sp, #32
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d101      	bne.n	800422a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e128      	b.n	800447c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004230:	b2db      	uxtb	r3, r3
 8004232:	2b00      	cmp	r3, #0
 8004234:	d109      	bne.n	800424a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a90      	ldr	r2, [pc, #576]	@ (8004484 <HAL_I2S_Init+0x26c>)
 8004242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f7fc ffe1 	bl	800120c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2202      	movs	r2, #2
 800424e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69db      	ldr	r3, [r3, #28]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004260:	f023 030f 	bic.w	r3, r3, #15
 8004264:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2202      	movs	r2, #2
 800426c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b02      	cmp	r3, #2
 8004274:	d060      	beq.n	8004338 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800427e:	2310      	movs	r3, #16
 8004280:	617b      	str	r3, [r7, #20]
 8004282:	e001      	b.n	8004288 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004284:	2320      	movs	r3, #32
 8004286:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	2b20      	cmp	r3, #32
 800428e:	d802      	bhi.n	8004296 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004296:	2001      	movs	r0, #1
 8004298:	f001 f9d8 	bl	800564c <HAL_RCCEx_GetPeriphCLKFreq>
 800429c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a6:	d125      	bne.n	80042f4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d010      	beq.n	80042d2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	fbb2 f2f3 	udiv	r2, r2, r3
 80042ba:	4613      	mov	r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	4413      	add	r3, r2
 80042c0:	005b      	lsls	r3, r3, #1
 80042c2:	461a      	mov	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	695b      	ldr	r3, [r3, #20]
 80042c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80042cc:	3305      	adds	r3, #5
 80042ce:	613b      	str	r3, [r7, #16]
 80042d0:	e01f      	b.n	8004312 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	00db      	lsls	r3, r3, #3
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	461a      	mov	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	695b      	ldr	r3, [r3, #20]
 80042ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80042ee:	3305      	adds	r3, #5
 80042f0:	613b      	str	r3, [r7, #16]
 80042f2:	e00e      	b.n	8004312 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80042f4:	68fa      	ldr	r2, [r7, #12]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	461a      	mov	r2, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	fbb2 f3f3 	udiv	r3, r2, r3
 800430e:	3305      	adds	r3, #5
 8004310:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	4a5c      	ldr	r2, [pc, #368]	@ (8004488 <HAL_I2S_Init+0x270>)
 8004316:	fba2 2303 	umull	r2, r3, r2, r3
 800431a:	08db      	lsrs	r3, r3, #3
 800431c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	f003 0301 	and.w	r3, r3, #1
 8004324:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	085b      	lsrs	r3, r3, #1
 800432e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	021b      	lsls	r3, r3, #8
 8004334:	61bb      	str	r3, [r7, #24]
 8004336:	e003      	b.n	8004340 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004338:	2302      	movs	r3, #2
 800433a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d902      	bls.n	800434c <HAL_I2S_Init+0x134>
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	2bff      	cmp	r3, #255	@ 0xff
 800434a:	d907      	bls.n	800435c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004350:	f043 0210 	orr.w	r2, r3, #16
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e08f      	b.n	800447c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691a      	ldr	r2, [r3, #16]
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	ea42 0103 	orr.w	r1, r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	430a      	orrs	r2, r1
 800436e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	69db      	ldr	r3, [r3, #28]
 8004376:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800437a:	f023 030f 	bic.w	r3, r3, #15
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	6851      	ldr	r1, [r2, #4]
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6892      	ldr	r2, [r2, #8]
 8004386:	4311      	orrs	r1, r2
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	68d2      	ldr	r2, [r2, #12]
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6992      	ldr	r2, [r2, #24]
 8004392:	430a      	orrs	r2, r1
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800439e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d161      	bne.n	800446c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	4a38      	ldr	r2, [pc, #224]	@ (800448c <HAL_I2S_Init+0x274>)
 80043ac:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a37      	ldr	r2, [pc, #220]	@ (8004490 <HAL_I2S_Init+0x278>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d101      	bne.n	80043bc <HAL_I2S_Init+0x1a4>
 80043b8:	4b36      	ldr	r3, [pc, #216]	@ (8004494 <HAL_I2S_Init+0x27c>)
 80043ba:	e001      	b.n	80043c0 <HAL_I2S_Init+0x1a8>
 80043bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	6812      	ldr	r2, [r2, #0]
 80043c6:	4932      	ldr	r1, [pc, #200]	@ (8004490 <HAL_I2S_Init+0x278>)
 80043c8:	428a      	cmp	r2, r1
 80043ca:	d101      	bne.n	80043d0 <HAL_I2S_Init+0x1b8>
 80043cc:	4a31      	ldr	r2, [pc, #196]	@ (8004494 <HAL_I2S_Init+0x27c>)
 80043ce:	e001      	b.n	80043d4 <HAL_I2S_Init+0x1bc>
 80043d0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80043d4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80043d8:	f023 030f 	bic.w	r3, r3, #15
 80043dc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004490 <HAL_I2S_Init+0x278>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_I2S_Init+0x1d4>
 80043e8:	4b2a      	ldr	r3, [pc, #168]	@ (8004494 <HAL_I2S_Init+0x27c>)
 80043ea:	e001      	b.n	80043f0 <HAL_I2S_Init+0x1d8>
 80043ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80043f0:	2202      	movs	r2, #2
 80043f2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a25      	ldr	r2, [pc, #148]	@ (8004490 <HAL_I2S_Init+0x278>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d101      	bne.n	8004402 <HAL_I2S_Init+0x1ea>
 80043fe:	4b25      	ldr	r3, [pc, #148]	@ (8004494 <HAL_I2S_Init+0x27c>)
 8004400:	e001      	b.n	8004406 <HAL_I2S_Init+0x1ee>
 8004402:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004412:	d003      	beq.n	800441c <HAL_I2S_Init+0x204>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	685b      	ldr	r3, [r3, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800441c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004420:	613b      	str	r3, [r7, #16]
 8004422:	e001      	b.n	8004428 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004424:	2300      	movs	r3, #0
 8004426:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004432:	4313      	orrs	r3, r2
 8004434:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800443c:	4313      	orrs	r3, r2
 800443e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004446:	4313      	orrs	r3, r2
 8004448:	b29a      	uxth	r2, r3
 800444a:	897b      	ldrh	r3, [r7, #10]
 800444c:	4313      	orrs	r3, r2
 800444e:	b29b      	uxth	r3, r3
 8004450:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004454:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	4a0d      	ldr	r2, [pc, #52]	@ (8004490 <HAL_I2S_Init+0x278>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d101      	bne.n	8004464 <HAL_I2S_Init+0x24c>
 8004460:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <HAL_I2S_Init+0x27c>)
 8004462:	e001      	b.n	8004468 <HAL_I2S_Init+0x250>
 8004464:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004468:	897a      	ldrh	r2, [r7, #10]
 800446a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800447a:	2300      	movs	r3, #0
}
 800447c:	4618      	mov	r0, r3
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	0800458f 	.word	0x0800458f
 8004488:	cccccccd 	.word	0xcccccccd
 800448c:	080046a5 	.word	0x080046a5
 8004490:	40003800 	.word	0x40003800
 8004494:	40003400 	.word	0x40003400

08004498 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004498:	b480      	push	{r7}
 800449a:	b083      	sub	sp, #12
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80044b4:	bf00      	nop
 80044b6:	370c      	adds	r7, #12
 80044b8:	46bd      	mov	sp, r7
 80044ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044be:	4770      	bx	lr

080044c0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b083      	sub	sp, #12
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80044c8:	bf00      	nop
 80044ca:	370c      	adds	r7, #12
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e0:	881a      	ldrh	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	1c9a      	adds	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044f6:	b29b      	uxth	r3, r3
 80044f8:	3b01      	subs	r3, #1
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d10e      	bne.n	8004528 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004518:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ffb8 	bl	8004498 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004528:	bf00      	nop
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b082      	sub	sp, #8
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004542:	b292      	uxth	r2, r2
 8004544:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454a:	1c9a      	adds	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004554:	b29b      	uxth	r3, r3
 8004556:	3b01      	subs	r3, #1
 8004558:	b29a      	uxth	r2, r3
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004562:	b29b      	uxth	r3, r3
 8004564:	2b00      	cmp	r3, #0
 8004566:	d10e      	bne.n	8004586 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004576:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff ff93 	bl	80044ac <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004586:	bf00      	nop
 8004588:	3708      	adds	r7, #8
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800458e:	b580      	push	{r7, lr}
 8004590:	b086      	sub	sp, #24
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d13a      	bne.n	8004620 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f003 0301 	and.w	r3, r3, #1
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d109      	bne.n	80045c8 <I2S_IRQHandler+0x3a>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045be:	2b40      	cmp	r3, #64	@ 0x40
 80045c0:	d102      	bne.n	80045c8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f7ff ffb4 	bl	8004530 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045ce:	2b40      	cmp	r3, #64	@ 0x40
 80045d0:	d126      	bne.n	8004620 <I2S_IRQHandler+0x92>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d11f      	bne.n	8004620 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685a      	ldr	r2, [r3, #4]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045ee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004612:	f043 0202 	orr.w	r2, r3, #2
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f7ff ff50 	bl	80044c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b03      	cmp	r3, #3
 800462a:	d136      	bne.n	800469a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b02      	cmp	r3, #2
 8004634:	d109      	bne.n	800464a <I2S_IRQHandler+0xbc>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004640:	2b80      	cmp	r3, #128	@ 0x80
 8004642:	d102      	bne.n	800464a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f7ff ff45 	bl	80044d4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b08      	cmp	r3, #8
 8004652:	d122      	bne.n	800469a <I2S_IRQHandler+0x10c>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f003 0320 	and.w	r3, r3, #32
 800465e:	2b20      	cmp	r3, #32
 8004660:	d11b      	bne.n	800469a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004670:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	60fb      	str	r3, [r7, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800468c:	f043 0204 	orr.w	r2, r3, #4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff ff13 	bl	80044c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800469a:	bf00      	nop
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b088      	sub	sp, #32
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a92      	ldr	r2, [pc, #584]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d101      	bne.n	80046c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80046be:	4b92      	ldr	r3, [pc, #584]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046c0:	e001      	b.n	80046c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80046c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a8b      	ldr	r2, [pc, #556]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d101      	bne.n	80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80046dc:	4b8a      	ldr	r3, [pc, #552]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046de:	e001      	b.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046f0:	d004      	beq.n	80046fc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	f040 8099 	bne.w	800482e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80046fc:	69fb      	ldr	r3, [r7, #28]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	d107      	bne.n	8004716 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f925 	bl	8004960 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b01      	cmp	r3, #1
 800471e:	d107      	bne.n	8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9c8 	bl	8004ac0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004736:	2b40      	cmp	r3, #64	@ 0x40
 8004738:	d13a      	bne.n	80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0320 	and.w	r3, r3, #32
 8004740:	2b00      	cmp	r3, #0
 8004742:	d035      	beq.n	80047b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a6e      	ldr	r2, [pc, #440]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d101      	bne.n	8004752 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800474e:	4b6e      	ldr	r3, [pc, #440]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004750:	e001      	b.n	8004756 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004752:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4969      	ldr	r1, [pc, #420]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800475e:	428b      	cmp	r3, r1
 8004760:	d101      	bne.n	8004766 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004762:	4b69      	ldr	r3, [pc, #420]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004764:	e001      	b.n	800476a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004766:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800476a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800476e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800477e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	60fb      	str	r3, [r7, #12]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	60fb      	str	r3, [r7, #12]
 8004794:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047a2:	f043 0202 	orr.w	r2, r3, #2
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f7ff fe88 	bl	80044c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	f003 0308 	and.w	r3, r3, #8
 80047b6:	2b08      	cmp	r3, #8
 80047b8:	f040 80c3 	bne.w	8004942 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	f003 0320 	and.w	r3, r3, #32
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	f000 80bd 	beq.w	8004942 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047d6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a49      	ldr	r2, [pc, #292]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d101      	bne.n	80047e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80047e2:	4b49      	ldr	r3, [pc, #292]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047e4:	e001      	b.n	80047ea <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80047e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4944      	ldr	r1, [pc, #272]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047f2:	428b      	cmp	r3, r1
 80047f4:	d101      	bne.n	80047fa <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80047f6:	4b44      	ldr	r3, [pc, #272]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047f8:	e001      	b.n	80047fe <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80047fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047fe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004802:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	60bb      	str	r3, [r7, #8]
 8004810:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2201      	movs	r2, #1
 8004816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800481e:	f043 0204 	orr.w	r2, r3, #4
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f7ff fe4a 	bl	80044c0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800482c:	e089      	b.n	8004942 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b02      	cmp	r3, #2
 8004836:	d107      	bne.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d002      	beq.n	8004848 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f000 f8be 	bl	80049c4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	2b01      	cmp	r3, #1
 8004850:	d107      	bne.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d002      	beq.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8fd 	bl	8004a5c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004868:	2b40      	cmp	r3, #64	@ 0x40
 800486a:	d12f      	bne.n	80048cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f003 0320 	and.w	r3, r3, #32
 8004872:	2b00      	cmp	r3, #0
 8004874:	d02a      	beq.n	80048cc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	685a      	ldr	r2, [r3, #4]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004884:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a1e      	ldr	r2, [pc, #120]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800488c:	4293      	cmp	r3, r2
 800488e:	d101      	bne.n	8004894 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004890:	4b1d      	ldr	r3, [pc, #116]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004892:	e001      	b.n	8004898 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004894:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	4919      	ldr	r1, [pc, #100]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048a0:	428b      	cmp	r3, r1
 80048a2:	d101      	bne.n	80048a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80048a4:	4b18      	ldr	r3, [pc, #96]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048a6:	e001      	b.n	80048ac <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80048a8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048ac:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048b0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f7ff fdfa 	bl	80044c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b08      	cmp	r3, #8
 80048d4:	d136      	bne.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	f003 0320 	and.w	r3, r3, #32
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d031      	beq.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a07      	ldr	r2, [pc, #28]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d101      	bne.n	80048ee <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80048ea:	4b07      	ldr	r3, [pc, #28]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80048ec:	e001      	b.n	80048f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80048ee:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80048f2:	685a      	ldr	r2, [r3, #4]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4902      	ldr	r1, [pc, #8]	@ (8004904 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80048fa:	428b      	cmp	r3, r1
 80048fc:	d106      	bne.n	800490c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80048fe:	4b02      	ldr	r3, [pc, #8]	@ (8004908 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004900:	e006      	b.n	8004910 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004902:	bf00      	nop
 8004904:	40003800 	.word	0x40003800
 8004908:	40003400 	.word	0x40003400
 800490c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004910:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004914:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685a      	ldr	r2, [r3, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004924:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2201      	movs	r2, #1
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004932:	f043 0204 	orr.w	r2, r3, #4
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7ff fdc0 	bl	80044c0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004940:	e000      	b.n	8004944 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004942:	bf00      	nop
}
 8004944:	bf00      	nop
 8004946:	3720      	adds	r7, #32
 8004948:	46bd      	mov	sp, r7
 800494a:	bd80      	pop	{r7, pc}

0800494c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800496c:	1c99      	adds	r1, r3, #2
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	6251      	str	r1, [r2, #36]	@ 0x24
 8004972:	881a      	ldrh	r2, [r3, #0]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800497e:	b29b      	uxth	r3, r3
 8004980:	3b01      	subs	r3, #1
 8004982:	b29a      	uxth	r2, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800498c:	b29b      	uxth	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d113      	bne.n	80049ba <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d106      	bne.n	80049ba <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ffc9 	bl	800494c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049ba:	bf00      	nop
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
	...

080049c4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049d0:	1c99      	adds	r1, r3, #2
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	6251      	str	r1, [r2, #36]	@ 0x24
 80049d6:	8819      	ldrh	r1, [r3, #0]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a1d      	ldr	r2, [pc, #116]	@ (8004a54 <I2SEx_TxISR_I2SExt+0x90>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d101      	bne.n	80049e6 <I2SEx_TxISR_I2SExt+0x22>
 80049e2:	4b1d      	ldr	r3, [pc, #116]	@ (8004a58 <I2SEx_TxISR_I2SExt+0x94>)
 80049e4:	e001      	b.n	80049ea <I2SEx_TxISR_I2SExt+0x26>
 80049e6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049ea:	460a      	mov	r2, r1
 80049ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d121      	bne.n	8004a4a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a12      	ldr	r2, [pc, #72]	@ (8004a54 <I2SEx_TxISR_I2SExt+0x90>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <I2SEx_TxISR_I2SExt+0x50>
 8004a10:	4b11      	ldr	r3, [pc, #68]	@ (8004a58 <I2SEx_TxISR_I2SExt+0x94>)
 8004a12:	e001      	b.n	8004a18 <I2SEx_TxISR_I2SExt+0x54>
 8004a14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	490d      	ldr	r1, [pc, #52]	@ (8004a54 <I2SEx_TxISR_I2SExt+0x90>)
 8004a20:	428b      	cmp	r3, r1
 8004a22:	d101      	bne.n	8004a28 <I2SEx_TxISR_I2SExt+0x64>
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <I2SEx_TxISR_I2SExt+0x94>)
 8004a26:	e001      	b.n	8004a2c <I2SEx_TxISR_I2SExt+0x68>
 8004a28:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a2c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a30:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d106      	bne.n	8004a4a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f7ff ff81 	bl	800494c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	40003800 	.word	0x40003800
 8004a58:	40003400 	.word	0x40003400

08004a5c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b082      	sub	sp, #8
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68d8      	ldr	r0, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6e:	1c99      	adds	r1, r3, #2
 8004a70:	687a      	ldr	r2, [r7, #4]
 8004a72:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a74:	b282      	uxth	r2, r0
 8004a76:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a8a:	b29b      	uxth	r3, r3
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d113      	bne.n	8004ab8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a9e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004aa4:	b29b      	uxth	r3, r3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7ff ff4a 	bl	800494c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ab8:	bf00      	nop
 8004aba:	3708      	adds	r7, #8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a20      	ldr	r2, [pc, #128]	@ (8004b50 <I2SEx_RxISR_I2SExt+0x90>)
 8004ace:	4293      	cmp	r3, r2
 8004ad0:	d101      	bne.n	8004ad6 <I2SEx_RxISR_I2SExt+0x16>
 8004ad2:	4b20      	ldr	r3, [pc, #128]	@ (8004b54 <I2SEx_RxISR_I2SExt+0x94>)
 8004ad4:	e001      	b.n	8004ada <I2SEx_RxISR_I2SExt+0x1a>
 8004ad6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ada:	68d8      	ldr	r0, [r3, #12]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae0:	1c99      	adds	r1, r3, #2
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004ae6:	b282      	uxth	r2, r0
 8004ae8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004afc:	b29b      	uxth	r3, r3
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d121      	bne.n	8004b46 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a12      	ldr	r2, [pc, #72]	@ (8004b50 <I2SEx_RxISR_I2SExt+0x90>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d101      	bne.n	8004b10 <I2SEx_RxISR_I2SExt+0x50>
 8004b0c:	4b11      	ldr	r3, [pc, #68]	@ (8004b54 <I2SEx_RxISR_I2SExt+0x94>)
 8004b0e:	e001      	b.n	8004b14 <I2SEx_RxISR_I2SExt+0x54>
 8004b10:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b14:	685a      	ldr	r2, [r3, #4]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	490d      	ldr	r1, [pc, #52]	@ (8004b50 <I2SEx_RxISR_I2SExt+0x90>)
 8004b1c:	428b      	cmp	r3, r1
 8004b1e:	d101      	bne.n	8004b24 <I2SEx_RxISR_I2SExt+0x64>
 8004b20:	4b0c      	ldr	r3, [pc, #48]	@ (8004b54 <I2SEx_RxISR_I2SExt+0x94>)
 8004b22:	e001      	b.n	8004b28 <I2SEx_RxISR_I2SExt+0x68>
 8004b24:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b28:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b2c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d106      	bne.n	8004b46 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff03 	bl	800494c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b46:	bf00      	nop
 8004b48:	3708      	adds	r7, #8
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	bf00      	nop
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40003400 	.word	0x40003400

08004b58 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d101      	bne.n	8004b6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e267      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d075      	beq.n	8004c62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b76:	4b88      	ldr	r3, [pc, #544]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 030c 	and.w	r3, r3, #12
 8004b7e:	2b04      	cmp	r3, #4
 8004b80:	d00c      	beq.n	8004b9c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b82:	4b85      	ldr	r3, [pc, #532]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004b8a:	2b08      	cmp	r3, #8
 8004b8c:	d112      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b8e:	4b82      	ldr	r3, [pc, #520]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b96:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b9a:	d10b      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b9c:	4b7e      	ldr	r3, [pc, #504]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d05b      	beq.n	8004c60 <HAL_RCC_OscConfig+0x108>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d157      	bne.n	8004c60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e242      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bbc:	d106      	bne.n	8004bcc <HAL_RCC_OscConfig+0x74>
 8004bbe:	4b76      	ldr	r3, [pc, #472]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a75      	ldr	r2, [pc, #468]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	e01d      	b.n	8004c08 <HAL_RCC_OscConfig+0xb0>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bd4:	d10c      	bne.n	8004bf0 <HAL_RCC_OscConfig+0x98>
 8004bd6:	4b70      	ldr	r3, [pc, #448]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a6f      	ldr	r2, [pc, #444]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b6d      	ldr	r3, [pc, #436]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a6c      	ldr	r2, [pc, #432]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bec:	6013      	str	r3, [r2, #0]
 8004bee:	e00b      	b.n	8004c08 <HAL_RCC_OscConfig+0xb0>
 8004bf0:	4b69      	ldr	r3, [pc, #420]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a68      	ldr	r2, [pc, #416]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bf6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	4b66      	ldr	r3, [pc, #408]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a65      	ldr	r2, [pc, #404]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d013      	beq.n	8004c38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c10:	f7fc fd92 	bl	8001738 <HAL_GetTick>
 8004c14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c16:	e008      	b.n	8004c2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c18:	f7fc fd8e 	bl	8001738 <HAL_GetTick>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	2b64      	cmp	r3, #100	@ 0x64
 8004c24:	d901      	bls.n	8004c2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e207      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c2a:	4b5b      	ldr	r3, [pc, #364]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d0f0      	beq.n	8004c18 <HAL_RCC_OscConfig+0xc0>
 8004c36:	e014      	b.n	8004c62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c38:	f7fc fd7e 	bl	8001738 <HAL_GetTick>
 8004c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c3e:	e008      	b.n	8004c52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c40:	f7fc fd7a 	bl	8001738 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	693b      	ldr	r3, [r7, #16]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b64      	cmp	r3, #100	@ 0x64
 8004c4c:	d901      	bls.n	8004c52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	e1f3      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c52:	4b51      	ldr	r3, [pc, #324]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f0      	bne.n	8004c40 <HAL_RCC_OscConfig+0xe8>
 8004c5e:	e000      	b.n	8004c62 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d063      	beq.n	8004d36 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c6e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	f003 030c 	and.w	r3, r3, #12
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d00b      	beq.n	8004c92 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7a:	4b47      	ldr	r3, [pc, #284]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c82:	2b08      	cmp	r3, #8
 8004c84:	d11c      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c86:	4b44      	ldr	r3, [pc, #272]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d116      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c92:	4b41      	ldr	r3, [pc, #260]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d005      	beq.n	8004caa <HAL_RCC_OscConfig+0x152>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d001      	beq.n	8004caa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e1c7      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004caa:	4b3b      	ldr	r3, [pc, #236]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	00db      	lsls	r3, r3, #3
 8004cb8:	4937      	ldr	r1, [pc, #220]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cbe:	e03a      	b.n	8004d36 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc8:	4b34      	ldr	r3, [pc, #208]	@ (8004d9c <HAL_RCC_OscConfig+0x244>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cce:	f7fc fd33 	bl	8001738 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd6:	f7fc fd2f 	bl	8001738 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e1a8      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf4:	4b28      	ldr	r3, [pc, #160]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	691b      	ldr	r3, [r3, #16]
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	4925      	ldr	r1, [pc, #148]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]
 8004d08:	e015      	b.n	8004d36 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d0a:	4b24      	ldr	r3, [pc, #144]	@ (8004d9c <HAL_RCC_OscConfig+0x244>)
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d10:	f7fc fd12 	bl	8001738 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d18:	f7fc fd0e 	bl	8001738 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e187      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1f0      	bne.n	8004d18 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0308 	and.w	r3, r3, #8
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d036      	beq.n	8004db0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d016      	beq.n	8004d78 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4a:	4b15      	ldr	r3, [pc, #84]	@ (8004da0 <HAL_RCC_OscConfig+0x248>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fc fcf2 	bl	8001738 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d58:	f7fc fcee 	bl	8001738 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e167      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <HAL_RCC_OscConfig+0x240>)
 8004d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d6e:	f003 0302 	and.w	r3, r3, #2
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x200>
 8004d76:	e01b      	b.n	8004db0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d78:	4b09      	ldr	r3, [pc, #36]	@ (8004da0 <HAL_RCC_OscConfig+0x248>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d7e:	f7fc fcdb 	bl	8001738 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d84:	e00e      	b.n	8004da4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d86:	f7fc fcd7 	bl	8001738 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d907      	bls.n	8004da4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e150      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
 8004d98:	40023800 	.word	0x40023800
 8004d9c:	42470000 	.word	0x42470000
 8004da0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004da4:	4b88      	ldr	r3, [pc, #544]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004da6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004da8:	f003 0302 	and.w	r3, r3, #2
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d1ea      	bne.n	8004d86 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	f000 8097 	beq.w	8004eec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dc2:	4b81      	ldr	r3, [pc, #516]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d10f      	bne.n	8004dee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dce:	2300      	movs	r3, #0
 8004dd0:	60bb      	str	r3, [r7, #8]
 8004dd2:	4b7d      	ldr	r3, [pc, #500]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dd6:	4a7c      	ldr	r2, [pc, #496]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dde:	4b7a      	ldr	r3, [pc, #488]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004de2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004de6:	60bb      	str	r3, [r7, #8]
 8004de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004dea:	2301      	movs	r3, #1
 8004dec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dee:	4b77      	ldr	r3, [pc, #476]	@ (8004fcc <HAL_RCC_OscConfig+0x474>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d118      	bne.n	8004e2c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dfa:	4b74      	ldr	r3, [pc, #464]	@ (8004fcc <HAL_RCC_OscConfig+0x474>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a73      	ldr	r2, [pc, #460]	@ (8004fcc <HAL_RCC_OscConfig+0x474>)
 8004e00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e06:	f7fc fc97 	bl	8001738 <HAL_GetTick>
 8004e0a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e0c:	e008      	b.n	8004e20 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e0e:	f7fc fc93 	bl	8001738 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	693b      	ldr	r3, [r7, #16]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e10c      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e20:	4b6a      	ldr	r3, [pc, #424]	@ (8004fcc <HAL_RCC_OscConfig+0x474>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d106      	bne.n	8004e42 <HAL_RCC_OscConfig+0x2ea>
 8004e34:	4b64      	ldr	r3, [pc, #400]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e38:	4a63      	ldr	r2, [pc, #396]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e3a:	f043 0301 	orr.w	r3, r3, #1
 8004e3e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e40:	e01c      	b.n	8004e7c <HAL_RCC_OscConfig+0x324>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	2b05      	cmp	r3, #5
 8004e48:	d10c      	bne.n	8004e64 <HAL_RCC_OscConfig+0x30c>
 8004e4a:	4b5f      	ldr	r3, [pc, #380]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e4e:	4a5e      	ldr	r2, [pc, #376]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e50:	f043 0304 	orr.w	r3, r3, #4
 8004e54:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e56:	4b5c      	ldr	r3, [pc, #368]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e5a:	4a5b      	ldr	r2, [pc, #364]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e5c:	f043 0301 	orr.w	r3, r3, #1
 8004e60:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e62:	e00b      	b.n	8004e7c <HAL_RCC_OscConfig+0x324>
 8004e64:	4b58      	ldr	r3, [pc, #352]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	4a57      	ldr	r2, [pc, #348]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	f023 0301 	bic.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e70:	4b55      	ldr	r3, [pc, #340]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e74:	4a54      	ldr	r2, [pc, #336]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004e76:	f023 0304 	bic.w	r3, r3, #4
 8004e7a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d015      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e84:	f7fc fc58 	bl	8001738 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e8a:	e00a      	b.n	8004ea2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e8c:	f7fc fc54 	bl	8001738 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e0cb      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ea2:	4b49      	ldr	r3, [pc, #292]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d0ee      	beq.n	8004e8c <HAL_RCC_OscConfig+0x334>
 8004eae:	e014      	b.n	8004eda <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004eb0:	f7fc fc42 	bl	8001738 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eb6:	e00a      	b.n	8004ece <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb8:	f7fc fc3e 	bl	8001738 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e0b5      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ece:	4b3e      	ldr	r3, [pc, #248]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed2:	f003 0302 	and.w	r3, r3, #2
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1ee      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004eda:	7dfb      	ldrb	r3, [r7, #23]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d105      	bne.n	8004eec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ee0:	4b39      	ldr	r3, [pc, #228]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee4:	4a38      	ldr	r2, [pc, #224]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004ee6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004eea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	f000 80a1 	beq.w	8005038 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ef6:	4b34      	ldr	r3, [pc, #208]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b08      	cmp	r3, #8
 8004f00:	d05c      	beq.n	8004fbc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	699b      	ldr	r3, [r3, #24]
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d141      	bne.n	8004f8e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f0a:	4b31      	ldr	r3, [pc, #196]	@ (8004fd0 <HAL_RCC_OscConfig+0x478>)
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f10:	f7fc fc12 	bl	8001738 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fc fc0e 	bl	8001738 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e087      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f2a:	4b27      	ldr	r3, [pc, #156]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	69da      	ldr	r2, [r3, #28]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f44:	019b      	lsls	r3, r3, #6
 8004f46:	431a      	orrs	r2, r3
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f4c:	085b      	lsrs	r3, r3, #1
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	041b      	lsls	r3, r3, #16
 8004f52:	431a      	orrs	r2, r3
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f58:	061b      	lsls	r3, r3, #24
 8004f5a:	491b      	ldr	r1, [pc, #108]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f60:	4b1b      	ldr	r3, [pc, #108]	@ (8004fd0 <HAL_RCC_OscConfig+0x478>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f66:	f7fc fbe7 	bl	8001738 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f6e:	f7fc fbe3 	bl	8001738 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e05c      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f80:	4b11      	ldr	r3, [pc, #68]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d0f0      	beq.n	8004f6e <HAL_RCC_OscConfig+0x416>
 8004f8c:	e054      	b.n	8005038 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f8e:	4b10      	ldr	r3, [pc, #64]	@ (8004fd0 <HAL_RCC_OscConfig+0x478>)
 8004f90:	2200      	movs	r2, #0
 8004f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f94:	f7fc fbd0 	bl	8001738 <HAL_GetTick>
 8004f98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f9a:	e008      	b.n	8004fae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9c:	f7fc fbcc 	bl	8001738 <HAL_GetTick>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	1ad3      	subs	r3, r2, r3
 8004fa6:	2b02      	cmp	r3, #2
 8004fa8:	d901      	bls.n	8004fae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e045      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fae:	4b06      	ldr	r3, [pc, #24]	@ (8004fc8 <HAL_RCC_OscConfig+0x470>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d1f0      	bne.n	8004f9c <HAL_RCC_OscConfig+0x444>
 8004fba:	e03d      	b.n	8005038 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e038      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40007000 	.word	0x40007000
 8004fd0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005044 <HAL_RCC_OscConfig+0x4ec>)
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	699b      	ldr	r3, [r3, #24]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d028      	beq.n	8005034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fec:	429a      	cmp	r2, r3
 8004fee:	d121      	bne.n	8005034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d11a      	bne.n	8005034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800500a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	085b      	lsrs	r3, r3, #1
 800501c:	3b01      	subs	r3, #1
 800501e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005020:	429a      	cmp	r2, r3
 8005022:	d107      	bne.n	8005034 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800502e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005030:	429a      	cmp	r2, r3
 8005032:	d001      	beq.n	8005038 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005034:	2301      	movs	r3, #1
 8005036:	e000      	b.n	800503a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005038:	2300      	movs	r3, #0
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	40023800 	.word	0x40023800

08005048 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b084      	sub	sp, #16
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d101      	bne.n	800505c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e0cc      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800505c:	4b68      	ldr	r3, [pc, #416]	@ (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0307 	and.w	r3, r3, #7
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d90c      	bls.n	8005084 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800506a:	4b65      	ldr	r3, [pc, #404]	@ (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	683a      	ldr	r2, [r7, #0]
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005072:	4b63      	ldr	r3, [pc, #396]	@ (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	429a      	cmp	r2, r3
 800507e:	d001      	beq.n	8005084 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005080:	2301      	movs	r3, #1
 8005082:	e0b8      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 0302 	and.w	r3, r3, #2
 800508c:	2b00      	cmp	r3, #0
 800508e:	d020      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0304 	and.w	r3, r3, #4
 8005098:	2b00      	cmp	r3, #0
 800509a:	d005      	beq.n	80050a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800509c:	4b59      	ldr	r3, [pc, #356]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	4a58      	ldr	r2, [pc, #352]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	f003 0308 	and.w	r3, r3, #8
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d005      	beq.n	80050c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050b4:	4b53      	ldr	r3, [pc, #332]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	4a52      	ldr	r2, [pc, #328]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050c0:	4b50      	ldr	r3, [pc, #320]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	494d      	ldr	r1, [pc, #308]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	4313      	orrs	r3, r2
 80050d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d044      	beq.n	8005168 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d107      	bne.n	80050f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050e6:	4b47      	ldr	r3, [pc, #284]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d119      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e07f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d003      	beq.n	8005106 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005102:	2b03      	cmp	r3, #3
 8005104:	d107      	bne.n	8005116 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005106:	4b3f      	ldr	r3, [pc, #252]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800510e:	2b00      	cmp	r3, #0
 8005110:	d109      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	e06f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005116:	4b3b      	ldr	r3, [pc, #236]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f003 0302 	and.w	r3, r3, #2
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e067      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005126:	4b37      	ldr	r3, [pc, #220]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	f023 0203 	bic.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	4934      	ldr	r1, [pc, #208]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005134:	4313      	orrs	r3, r2
 8005136:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005138:	f7fc fafe 	bl	8001738 <HAL_GetTick>
 800513c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800513e:	e00a      	b.n	8005156 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005140:	f7fc fafa 	bl	8001738 <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800514e:	4293      	cmp	r3, r2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e04f      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005156:	4b2b      	ldr	r3, [pc, #172]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f003 020c 	and.w	r2, r3, #12
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	429a      	cmp	r2, r3
 8005166:	d1eb      	bne.n	8005140 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005168:	4b25      	ldr	r3, [pc, #148]	@ (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0307 	and.w	r3, r3, #7
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	429a      	cmp	r2, r3
 8005174:	d20c      	bcs.n	8005190 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005176:	4b22      	ldr	r3, [pc, #136]	@ (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	683a      	ldr	r2, [r7, #0]
 800517a:	b2d2      	uxtb	r2, r2
 800517c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517e:	4b20      	ldr	r3, [pc, #128]	@ (8005200 <HAL_RCC_ClockConfig+0x1b8>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	683a      	ldr	r2, [r7, #0]
 8005188:	429a      	cmp	r2, r3
 800518a:	d001      	beq.n	8005190 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e032      	b.n	80051f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0304 	and.w	r3, r3, #4
 8005198:	2b00      	cmp	r3, #0
 800519a:	d008      	beq.n	80051ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800519c:	4b19      	ldr	r3, [pc, #100]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	4916      	ldr	r1, [pc, #88]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051aa:	4313      	orrs	r3, r2
 80051ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d009      	beq.n	80051ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ba:	4b12      	ldr	r3, [pc, #72]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	490e      	ldr	r1, [pc, #56]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051ce:	f000 f821 	bl	8005214 <HAL_RCC_GetSysClockFreq>
 80051d2:	4602      	mov	r2, r0
 80051d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <HAL_RCC_ClockConfig+0x1bc>)
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	091b      	lsrs	r3, r3, #4
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	490a      	ldr	r1, [pc, #40]	@ (8005208 <HAL_RCC_ClockConfig+0x1c0>)
 80051e0:	5ccb      	ldrb	r3, [r1, r3]
 80051e2:	fa22 f303 	lsr.w	r3, r2, r3
 80051e6:	4a09      	ldr	r2, [pc, #36]	@ (800520c <HAL_RCC_ClockConfig+0x1c4>)
 80051e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80051ea:	4b09      	ldr	r3, [pc, #36]	@ (8005210 <HAL_RCC_ClockConfig+0x1c8>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4618      	mov	r0, r3
 80051f0:	f7fc fa5e 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 80051f4:	2300      	movs	r3, #0
}
 80051f6:	4618      	mov	r0, r3
 80051f8:	3710      	adds	r7, #16
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	40023c00 	.word	0x40023c00
 8005204:	40023800 	.word	0x40023800
 8005208:	0800af94 	.word	0x0800af94
 800520c:	20000000 	.word	0x20000000
 8005210:	20000004 	.word	0x20000004

08005214 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005214:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005218:	b094      	sub	sp, #80	@ 0x50
 800521a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800521c:	2300      	movs	r3, #0
 800521e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005224:	2300      	movs	r3, #0
 8005226:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800522c:	4b79      	ldr	r3, [pc, #484]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x200>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	f003 030c 	and.w	r3, r3, #12
 8005234:	2b08      	cmp	r3, #8
 8005236:	d00d      	beq.n	8005254 <HAL_RCC_GetSysClockFreq+0x40>
 8005238:	2b08      	cmp	r3, #8
 800523a:	f200 80e1 	bhi.w	8005400 <HAL_RCC_GetSysClockFreq+0x1ec>
 800523e:	2b00      	cmp	r3, #0
 8005240:	d002      	beq.n	8005248 <HAL_RCC_GetSysClockFreq+0x34>
 8005242:	2b04      	cmp	r3, #4
 8005244:	d003      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x3a>
 8005246:	e0db      	b.n	8005400 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005248:	4b73      	ldr	r3, [pc, #460]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x204>)
 800524a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800524c:	e0db      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800524e:	4b73      	ldr	r3, [pc, #460]	@ (800541c <HAL_RCC_GetSysClockFreq+0x208>)
 8005250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005252:	e0d8      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005254:	4b6f      	ldr	r3, [pc, #444]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x200>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800525c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800525e:	4b6d      	ldr	r3, [pc, #436]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x200>)
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005266:	2b00      	cmp	r3, #0
 8005268:	d063      	beq.n	8005332 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800526a:	4b6a      	ldr	r3, [pc, #424]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x200>)
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	099b      	lsrs	r3, r3, #6
 8005270:	2200      	movs	r2, #0
 8005272:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005274:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005276:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005278:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800527c:	633b      	str	r3, [r7, #48]	@ 0x30
 800527e:	2300      	movs	r3, #0
 8005280:	637b      	str	r3, [r7, #52]	@ 0x34
 8005282:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005286:	4622      	mov	r2, r4
 8005288:	462b      	mov	r3, r5
 800528a:	f04f 0000 	mov.w	r0, #0
 800528e:	f04f 0100 	mov.w	r1, #0
 8005292:	0159      	lsls	r1, r3, #5
 8005294:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005298:	0150      	lsls	r0, r2, #5
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4621      	mov	r1, r4
 80052a0:	1a51      	subs	r1, r2, r1
 80052a2:	6139      	str	r1, [r7, #16]
 80052a4:	4629      	mov	r1, r5
 80052a6:	eb63 0301 	sbc.w	r3, r3, r1
 80052aa:	617b      	str	r3, [r7, #20]
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052b8:	4659      	mov	r1, fp
 80052ba:	018b      	lsls	r3, r1, #6
 80052bc:	4651      	mov	r1, sl
 80052be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052c2:	4651      	mov	r1, sl
 80052c4:	018a      	lsls	r2, r1, #6
 80052c6:	4651      	mov	r1, sl
 80052c8:	ebb2 0801 	subs.w	r8, r2, r1
 80052cc:	4659      	mov	r1, fp
 80052ce:	eb63 0901 	sbc.w	r9, r3, r1
 80052d2:	f04f 0200 	mov.w	r2, #0
 80052d6:	f04f 0300 	mov.w	r3, #0
 80052da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052e6:	4690      	mov	r8, r2
 80052e8:	4699      	mov	r9, r3
 80052ea:	4623      	mov	r3, r4
 80052ec:	eb18 0303 	adds.w	r3, r8, r3
 80052f0:	60bb      	str	r3, [r7, #8]
 80052f2:	462b      	mov	r3, r5
 80052f4:	eb49 0303 	adc.w	r3, r9, r3
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	f04f 0200 	mov.w	r2, #0
 80052fe:	f04f 0300 	mov.w	r3, #0
 8005302:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005306:	4629      	mov	r1, r5
 8005308:	024b      	lsls	r3, r1, #9
 800530a:	4621      	mov	r1, r4
 800530c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005310:	4621      	mov	r1, r4
 8005312:	024a      	lsls	r2, r1, #9
 8005314:	4610      	mov	r0, r2
 8005316:	4619      	mov	r1, r3
 8005318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800531a:	2200      	movs	r2, #0
 800531c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800531e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005320:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005324:	f7fa ffa4 	bl	8000270 <__aeabi_uldivmod>
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	4613      	mov	r3, r2
 800532e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005330:	e058      	b.n	80053e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005332:	4b38      	ldr	r3, [pc, #224]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x200>)
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	099b      	lsrs	r3, r3, #6
 8005338:	2200      	movs	r2, #0
 800533a:	4618      	mov	r0, r3
 800533c:	4611      	mov	r1, r2
 800533e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005342:	623b      	str	r3, [r7, #32]
 8005344:	2300      	movs	r3, #0
 8005346:	627b      	str	r3, [r7, #36]	@ 0x24
 8005348:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800534c:	4642      	mov	r2, r8
 800534e:	464b      	mov	r3, r9
 8005350:	f04f 0000 	mov.w	r0, #0
 8005354:	f04f 0100 	mov.w	r1, #0
 8005358:	0159      	lsls	r1, r3, #5
 800535a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800535e:	0150      	lsls	r0, r2, #5
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4641      	mov	r1, r8
 8005366:	ebb2 0a01 	subs.w	sl, r2, r1
 800536a:	4649      	mov	r1, r9
 800536c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005370:	f04f 0200 	mov.w	r2, #0
 8005374:	f04f 0300 	mov.w	r3, #0
 8005378:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800537c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005380:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005384:	ebb2 040a 	subs.w	r4, r2, sl
 8005388:	eb63 050b 	sbc.w	r5, r3, fp
 800538c:	f04f 0200 	mov.w	r2, #0
 8005390:	f04f 0300 	mov.w	r3, #0
 8005394:	00eb      	lsls	r3, r5, #3
 8005396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800539a:	00e2      	lsls	r2, r4, #3
 800539c:	4614      	mov	r4, r2
 800539e:	461d      	mov	r5, r3
 80053a0:	4643      	mov	r3, r8
 80053a2:	18e3      	adds	r3, r4, r3
 80053a4:	603b      	str	r3, [r7, #0]
 80053a6:	464b      	mov	r3, r9
 80053a8:	eb45 0303 	adc.w	r3, r5, r3
 80053ac:	607b      	str	r3, [r7, #4]
 80053ae:	f04f 0200 	mov.w	r2, #0
 80053b2:	f04f 0300 	mov.w	r3, #0
 80053b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053ba:	4629      	mov	r1, r5
 80053bc:	028b      	lsls	r3, r1, #10
 80053be:	4621      	mov	r1, r4
 80053c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053c4:	4621      	mov	r1, r4
 80053c6:	028a      	lsls	r2, r1, #10
 80053c8:	4610      	mov	r0, r2
 80053ca:	4619      	mov	r1, r3
 80053cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ce:	2200      	movs	r2, #0
 80053d0:	61bb      	str	r3, [r7, #24]
 80053d2:	61fa      	str	r2, [r7, #28]
 80053d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d8:	f7fa ff4a 	bl	8000270 <__aeabi_uldivmod>
 80053dc:	4602      	mov	r2, r0
 80053de:	460b      	mov	r3, r1
 80053e0:	4613      	mov	r3, r2
 80053e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80053e4:	4b0b      	ldr	r3, [pc, #44]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x200>)
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	0c1b      	lsrs	r3, r3, #16
 80053ea:	f003 0303 	and.w	r3, r3, #3
 80053ee:	3301      	adds	r3, #1
 80053f0:	005b      	lsls	r3, r3, #1
 80053f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80053f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80053f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053fe:	e002      	b.n	8005406 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005400:	4b05      	ldr	r3, [pc, #20]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x204>)
 8005402:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005404:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005406:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005408:	4618      	mov	r0, r3
 800540a:	3750      	adds	r7, #80	@ 0x50
 800540c:	46bd      	mov	sp, r7
 800540e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005412:	bf00      	nop
 8005414:	40023800 	.word	0x40023800
 8005418:	00f42400 	.word	0x00f42400
 800541c:	007a1200 	.word	0x007a1200

08005420 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <HAL_RCC_GetHCLKFreq+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000000 	.word	0x20000000

08005438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800543c:	f7ff fff0 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b05      	ldr	r3, [pc, #20]	@ (8005458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0a9b      	lsrs	r3, r3, #10
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4903      	ldr	r1, [pc, #12]	@ (800545c <HAL_RCC_GetPCLK1Freq+0x24>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005454:	4618      	mov	r0, r3
 8005456:	bd80      	pop	{r7, pc}
 8005458:	40023800 	.word	0x40023800
 800545c:	0800afa4 	.word	0x0800afa4

08005460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005464:	f7ff ffdc 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005468:	4602      	mov	r2, r0
 800546a:	4b05      	ldr	r3, [pc, #20]	@ (8005480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	0b5b      	lsrs	r3, r3, #13
 8005470:	f003 0307 	and.w	r3, r3, #7
 8005474:	4903      	ldr	r1, [pc, #12]	@ (8005484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005476:	5ccb      	ldrb	r3, [r1, r3]
 8005478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800547c:	4618      	mov	r0, r3
 800547e:	bd80      	pop	{r7, pc}
 8005480:	40023800 	.word	0x40023800
 8005484:	0800afa4 	.word	0x0800afa4

08005488 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d035      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80054b0:	4b62      	ldr	r3, [pc, #392]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054b2:	2200      	movs	r2, #0
 80054b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054b6:	f7fc f93f 	bl	8001738 <HAL_GetTick>
 80054ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054bc:	e008      	b.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054be:	f7fc f93b 	bl	8001738 <HAL_GetTick>
 80054c2:	4602      	mov	r2, r0
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d901      	bls.n	80054d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054cc:	2303      	movs	r3, #3
 80054ce:	e0b0      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80054d0:	4b5b      	ldr	r3, [pc, #364]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d1f0      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	019a      	lsls	r2, r3, #6
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	689b      	ldr	r3, [r3, #8]
 80054e6:	071b      	lsls	r3, r3, #28
 80054e8:	4955      	ldr	r1, [pc, #340]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054f0:	4b52      	ldr	r3, [pc, #328]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f6:	f7fc f91f 	bl	8001738 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054fe:	f7fc f91b 	bl	8001738 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e090      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005510:	4b4b      	ldr	r3, [pc, #300]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0302 	and.w	r3, r3, #2
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8083 	beq.w	8005630 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800552a:	2300      	movs	r3, #0
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	4b44      	ldr	r3, [pc, #272]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005532:	4a43      	ldr	r2, [pc, #268]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005534:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005538:	6413      	str	r3, [r2, #64]	@ 0x40
 800553a:	4b41      	ldr	r3, [pc, #260]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800553c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800553e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005542:	60fb      	str	r3, [r7, #12]
 8005544:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005546:	4b3f      	ldr	r3, [pc, #252]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a3e      	ldr	r2, [pc, #248]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800554c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005550:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005552:	f7fc f8f1 	bl	8001738 <HAL_GetTick>
 8005556:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005558:	e008      	b.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800555a:	f7fc f8ed 	bl	8001738 <HAL_GetTick>
 800555e:	4602      	mov	r2, r0
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	2b02      	cmp	r3, #2
 8005566:	d901      	bls.n	800556c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e062      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800556c:	4b35      	ldr	r3, [pc, #212]	@ (8005644 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005574:	2b00      	cmp	r3, #0
 8005576:	d0f0      	beq.n	800555a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005578:	4b31      	ldr	r3, [pc, #196]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800557a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800557c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005580:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d02f      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	429a      	cmp	r2, r3
 8005594:	d028      	beq.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005596:	4b2a      	ldr	r3, [pc, #168]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800559a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800559e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80055a0:	4b29      	ldr	r3, [pc, #164]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80055a6:	4b28      	ldr	r3, [pc, #160]	@ (8005648 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80055a8:	2200      	movs	r2, #0
 80055aa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80055ac:	4a24      	ldr	r2, [pc, #144]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055b2:	4b23      	ldr	r3, [pc, #140]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d114      	bne.n	80055e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80055be:	f7fc f8bb 	bl	8001738 <HAL_GetTick>
 80055c2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055c4:	e00a      	b.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055c6:	f7fc f8b7 	bl	8001738 <HAL_GetTick>
 80055ca:	4602      	mov	r2, r0
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	1ad3      	subs	r3, r2, r3
 80055d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d901      	bls.n	80055dc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80055d8:	2303      	movs	r3, #3
 80055da:	e02a      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055dc:	4b18      	ldr	r3, [pc, #96]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0ee      	beq.n	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055f4:	d10d      	bne.n	8005612 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80055f6:	4b12      	ldr	r3, [pc, #72]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005606:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800560a:	490d      	ldr	r1, [pc, #52]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800560c:	4313      	orrs	r3, r2
 800560e:	608b      	str	r3, [r1, #8]
 8005610:	e005      	b.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005612:	4b0b      	ldr	r3, [pc, #44]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	4a0a      	ldr	r2, [pc, #40]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005618:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800561c:	6093      	str	r3, [r2, #8]
 800561e:	4b08      	ldr	r3, [pc, #32]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005620:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800562a:	4905      	ldr	r1, [pc, #20]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800562c:	4313      	orrs	r3, r2
 800562e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	42470068 	.word	0x42470068
 8005640:	40023800 	.word	0x40023800
 8005644:	40007000 	.word	0x40007000
 8005648:	42470e40 	.word	0x42470e40

0800564c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005660:	2300      	movs	r3, #0
 8005662:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d13f      	bne.n	80056ea <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800566a:	4b24      	ldr	r3, [pc, #144]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005672:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d006      	beq.n	8005688 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005680:	d12f      	bne.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005682:	4b1f      	ldr	r3, [pc, #124]	@ (8005700 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005684:	617b      	str	r3, [r7, #20]
          break;
 8005686:	e02f      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005688:	4b1c      	ldr	r3, [pc, #112]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005694:	d108      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005696:	4b19      	ldr	r3, [pc, #100]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800569e:	4a19      	ldr	r2, [pc, #100]	@ (8005704 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80056a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a4:	613b      	str	r3, [r7, #16]
 80056a6:	e007      	b.n	80056b8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80056a8:	4b14      	ldr	r3, [pc, #80]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056b0:	4a15      	ldr	r2, [pc, #84]	@ (8005708 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80056b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80056b8:	4b10      	ldr	r3, [pc, #64]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	fb02 f303 	mul.w	r3, r2, r3
 80056ca:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80056cc:	4b0b      	ldr	r3, [pc, #44]	@ (80056fc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80056ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056d2:	0f1b      	lsrs	r3, r3, #28
 80056d4:	f003 0307 	and.w	r3, r3, #7
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	fbb2 f3f3 	udiv	r3, r2, r3
 80056de:	617b      	str	r3, [r7, #20]
          break;
 80056e0:	e002      	b.n	80056e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80056e2:	2300      	movs	r3, #0
 80056e4:	617b      	str	r3, [r7, #20]
          break;
 80056e6:	bf00      	nop
        }
      }
      break;
 80056e8:	e000      	b.n	80056ec <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80056ea:	bf00      	nop
    }
  }
  return frequency;
 80056ec:	697b      	ldr	r3, [r7, #20]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	371c      	adds	r7, #28
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	40023800 	.word	0x40023800
 8005700:	00bb8000 	.word	0x00bb8000
 8005704:	007a1200 	.word	0x007a1200
 8005708:	00f42400 	.word	0x00f42400

0800570c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d101      	bne.n	800571e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e01c      	b.n	8005758 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	795b      	ldrb	r3, [r3, #5]
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d105      	bne.n	8005734 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7fb fdec 	bl	800130c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2202      	movs	r2, #2
 8005738:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f042 0204 	orr.w	r2, r2, #4
 8005748:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2201      	movs	r2, #1
 800574e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2200      	movs	r2, #0
 8005754:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005756:	2300      	movs	r3, #0
}
 8005758:	4618      	mov	r0, r3
 800575a:	3708      	adds	r7, #8
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b084      	sub	sp, #16
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800576a:	2300      	movs	r3, #0
 800576c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	791b      	ldrb	r3, [r3, #4]
 8005772:	2b01      	cmp	r3, #1
 8005774:	d101      	bne.n	800577a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005776:	2302      	movs	r3, #2
 8005778:	e044      	b.n	8005804 <HAL_RNG_GenerateRandomNumber+0xa4>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2201      	movs	r2, #1
 800577e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	795b      	ldrb	r3, [r3, #5]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b01      	cmp	r3, #1
 8005788:	d133      	bne.n	80057f2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2202      	movs	r2, #2
 800578e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005790:	f7fb ffd2 	bl	8001738 <HAL_GetTick>
 8005794:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005796:	e018      	b.n	80057ca <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005798:	f7fb ffce 	bl	8001738 <HAL_GetTick>
 800579c:	4602      	mov	r2, r0
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	1ad3      	subs	r3, r2, r3
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d911      	bls.n	80057ca <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d00a      	beq.n	80057ca <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2202      	movs	r2, #2
 80057be:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e01c      	b.n	8005804 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	f003 0301 	and.w	r3, r3, #1
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d1df      	bne.n	8005798 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689a      	ldr	r2, [r3, #8]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68da      	ldr	r2, [r3, #12]
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	715a      	strb	r2, [r3, #5]
 80057f0:	e004      	b.n	80057fc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2204      	movs	r2, #4
 80057f6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	711a      	strb	r2, [r3, #4]

  return status;
 8005802:	7bfb      	ldrb	r3, [r7, #15]
}
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e07b      	b.n	8005916 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005822:	2b00      	cmp	r3, #0
 8005824:	d108      	bne.n	8005838 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800582e:	d009      	beq.n	8005844 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	61da      	str	r2, [r3, #28]
 8005836:	e005      	b.n	8005844 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005850:	b2db      	uxtb	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d106      	bne.n	8005864 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800585e:	6878      	ldr	r0, [r7, #4]
 8005860:	f7fb fd76 	bl	8001350 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2202      	movs	r2, #2
 8005868:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800587a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800588c:	431a      	orrs	r2, r3
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	f003 0302 	and.w	r3, r3, #2
 80058a0:	431a      	orrs	r2, r3
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	f003 0301 	and.w	r3, r3, #1
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	699b      	ldr	r3, [r3, #24]
 80058b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b4:	431a      	orrs	r2, r3
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	69db      	ldr	r3, [r3, #28]
 80058ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058be:	431a      	orrs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c8:	ea42 0103 	orr.w	r1, r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	0c1b      	lsrs	r3, r3, #16
 80058e2:	f003 0104 	and.w	r1, r3, #4
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ea:	f003 0210 	and.w	r2, r3, #16
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005904:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b082      	sub	sp, #8
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d101      	bne.n	8005930 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e042      	b.n	80059b6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7fb fd4b 	bl	80013e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2224      	movs	r2, #36	@ 0x24
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68da      	ldr	r2, [r3, #12]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005960:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f972 	bl	8005c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	691a      	ldr	r2, [r3, #16]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005976:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	695a      	ldr	r2, [r3, #20]
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005986:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68da      	ldr	r2, [r3, #12]
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005996:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2220      	movs	r2, #32
 80059aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80059b4:	2300      	movs	r3, #0
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3708      	adds	r7, #8
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b08a      	sub	sp, #40	@ 0x28
 80059c2:	af02      	add	r7, sp, #8
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4613      	mov	r3, r2
 80059cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b20      	cmp	r3, #32
 80059dc:	d175      	bne.n	8005aca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80059de:	68bb      	ldr	r3, [r7, #8]
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d002      	beq.n	80059ea <HAL_UART_Transmit+0x2c>
 80059e4:	88fb      	ldrh	r3, [r7, #6]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e06e      	b.n	8005acc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	2200      	movs	r2, #0
 80059f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2221      	movs	r2, #33	@ 0x21
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059fc:	f7fb fe9c 	bl	8001738 <HAL_GetTick>
 8005a00:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	88fa      	ldrh	r2, [r7, #6]
 8005a06:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	88fa      	ldrh	r2, [r7, #6]
 8005a0c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a16:	d108      	bne.n	8005a2a <HAL_UART_Transmit+0x6c>
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	691b      	ldr	r3, [r3, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d104      	bne.n	8005a2a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	61bb      	str	r3, [r7, #24]
 8005a28:	e003      	b.n	8005a32 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a32:	e02e      	b.n	8005a92 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	9300      	str	r3, [sp, #0]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	2180      	movs	r1, #128	@ 0x80
 8005a3e:	68f8      	ldr	r0, [r7, #12]
 8005a40:	f000 f848 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2220      	movs	r2, #32
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e03a      	b.n	8005acc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d10b      	bne.n	8005a74 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a5c:	69bb      	ldr	r3, [r7, #24]
 8005a5e:	881b      	ldrh	r3, [r3, #0]
 8005a60:	461a      	mov	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a6a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	3302      	adds	r3, #2
 8005a70:	61bb      	str	r3, [r7, #24]
 8005a72:	e007      	b.n	8005a84 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	781a      	ldrb	r2, [r3, #0]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	3301      	adds	r3, #1
 8005a82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1cb      	bne.n	8005a34 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	9300      	str	r3, [sp, #0]
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	2140      	movs	r1, #64	@ 0x40
 8005aa6:	68f8      	ldr	r0, [r7, #12]
 8005aa8:	f000 f814 	bl	8005ad4 <UART_WaitOnFlagUntilTimeout>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2220      	movs	r2, #32
 8005ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e006      	b.n	8005acc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e000      	b.n	8005acc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005aca:	2302      	movs	r3, #2
  }
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3720      	adds	r7, #32
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b086      	sub	sp, #24
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	603b      	str	r3, [r7, #0]
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae4:	e03b      	b.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aec:	d037      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aee:	f7fb fe23 	bl	8001738 <HAL_GetTick>
 8005af2:	4602      	mov	r2, r0
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	1ad3      	subs	r3, r2, r3
 8005af8:	6a3a      	ldr	r2, [r7, #32]
 8005afa:	429a      	cmp	r2, r3
 8005afc:	d302      	bcc.n	8005b04 <UART_WaitOnFlagUntilTimeout+0x30>
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b04:	2303      	movs	r3, #3
 8005b06:	e03a      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f003 0304 	and.w	r3, r3, #4
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d023      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	2b80      	cmp	r3, #128	@ 0x80
 8005b1a:	d020      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b40      	cmp	r3, #64	@ 0x40
 8005b20:	d01d      	beq.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d116      	bne.n	8005b5e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b30:	2300      	movs	r3, #0
 8005b32:	617b      	str	r3, [r7, #20]
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	617b      	str	r3, [r7, #20]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f81d 	bl	8005b86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	2208      	movs	r2, #8
 8005b50:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	e00f      	b.n	8005b7e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	4013      	ands	r3, r2
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	429a      	cmp	r2, r3
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	461a      	mov	r2, r3
 8005b76:	79fb      	ldrb	r3, [r7, #7]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d0b4      	beq.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b7c:	2300      	movs	r3, #0
}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3718      	adds	r7, #24
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}

08005b86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b095      	sub	sp, #84	@ 0x54
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005ba4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bae:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3314      	adds	r3, #20
 8005bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005be2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005be4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005be8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d119      	bne.n	8005c32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f023 0310 	bic.w	r3, r3, #16
 8005c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c1e:	61ba      	str	r2, [r7, #24]
 8005c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c40:	bf00      	nop
 8005c42:	3754      	adds	r7, #84	@ 0x54
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c50:	b0c0      	sub	sp, #256	@ 0x100
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	68d9      	ldr	r1, [r3, #12]
 8005c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	ea40 0301 	orr.w	r3, r0, r1
 8005c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	431a      	orrs	r2, r3
 8005c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	431a      	orrs	r2, r3
 8005c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c90:	69db      	ldr	r3, [r3, #28]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68db      	ldr	r3, [r3, #12]
 8005ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005ca4:	f021 010c 	bic.w	r1, r1, #12
 8005ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cac:	681a      	ldr	r2, [r3, #0]
 8005cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cb2:	430b      	orrs	r3, r1
 8005cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	695b      	ldr	r3, [r3, #20]
 8005cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc6:	6999      	ldr	r1, [r3, #24]
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	ea40 0301 	orr.w	r3, r0, r1
 8005cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	4b8f      	ldr	r3, [pc, #572]	@ (8005f18 <UART_SetConfig+0x2cc>)
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d005      	beq.n	8005cec <UART_SetConfig+0xa0>
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8005f1c <UART_SetConfig+0x2d0>)
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d104      	bne.n	8005cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cec:	f7ff fbb8 	bl	8005460 <HAL_RCC_GetPCLK2Freq>
 8005cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005cf4:	e003      	b.n	8005cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005cf6:	f7ff fb9f 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8005cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d08:	f040 810c 	bne.w	8005f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d10:	2200      	movs	r2, #0
 8005d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d1e:	4622      	mov	r2, r4
 8005d20:	462b      	mov	r3, r5
 8005d22:	1891      	adds	r1, r2, r2
 8005d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d26:	415b      	adcs	r3, r3
 8005d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d2e:	4621      	mov	r1, r4
 8005d30:	eb12 0801 	adds.w	r8, r2, r1
 8005d34:	4629      	mov	r1, r5
 8005d36:	eb43 0901 	adc.w	r9, r3, r1
 8005d3a:	f04f 0200 	mov.w	r2, #0
 8005d3e:	f04f 0300 	mov.w	r3, #0
 8005d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d4e:	4690      	mov	r8, r2
 8005d50:	4699      	mov	r9, r3
 8005d52:	4623      	mov	r3, r4
 8005d54:	eb18 0303 	adds.w	r3, r8, r3
 8005d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d5c:	462b      	mov	r3, r5
 8005d5e:	eb49 0303 	adc.w	r3, r9, r3
 8005d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	18db      	adds	r3, r3, r3
 8005d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d80:	4613      	mov	r3, r2
 8005d82:	eb42 0303 	adc.w	r3, r2, r3
 8005d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d90:	f7fa fa6e 	bl	8000270 <__aeabi_uldivmod>
 8005d94:	4602      	mov	r2, r0
 8005d96:	460b      	mov	r3, r1
 8005d98:	4b61      	ldr	r3, [pc, #388]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9e:	095b      	lsrs	r3, r3, #5
 8005da0:	011c      	lsls	r4, r3, #4
 8005da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005da6:	2200      	movs	r2, #0
 8005da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005db4:	4642      	mov	r2, r8
 8005db6:	464b      	mov	r3, r9
 8005db8:	1891      	adds	r1, r2, r2
 8005dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dbc:	415b      	adcs	r3, r3
 8005dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dc4:	4641      	mov	r1, r8
 8005dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8005dca:	4649      	mov	r1, r9
 8005dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8005dd0:	f04f 0200 	mov.w	r2, #0
 8005dd4:	f04f 0300 	mov.w	r3, #0
 8005dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005de4:	4692      	mov	sl, r2
 8005de6:	469b      	mov	fp, r3
 8005de8:	4643      	mov	r3, r8
 8005dea:	eb1a 0303 	adds.w	r3, sl, r3
 8005dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005df2:	464b      	mov	r3, r9
 8005df4:	eb4b 0303 	adc.w	r3, fp, r3
 8005df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e10:	460b      	mov	r3, r1
 8005e12:	18db      	adds	r3, r3, r3
 8005e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e16:	4613      	mov	r3, r2
 8005e18:	eb42 0303 	adc.w	r3, r2, r3
 8005e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e26:	f7fa fa23 	bl	8000270 <__aeabi_uldivmod>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	4611      	mov	r1, r2
 8005e30:	4b3b      	ldr	r3, [pc, #236]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005e32:	fba3 2301 	umull	r2, r3, r3, r1
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	2264      	movs	r2, #100	@ 0x64
 8005e3a:	fb02 f303 	mul.w	r3, r2, r3
 8005e3e:	1acb      	subs	r3, r1, r3
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e46:	4b36      	ldr	r3, [pc, #216]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005e48:	fba3 2302 	umull	r2, r3, r3, r2
 8005e4c:	095b      	lsrs	r3, r3, #5
 8005e4e:	005b      	lsls	r3, r3, #1
 8005e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e54:	441c      	add	r4, r3
 8005e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e68:	4642      	mov	r2, r8
 8005e6a:	464b      	mov	r3, r9
 8005e6c:	1891      	adds	r1, r2, r2
 8005e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e70:	415b      	adcs	r3, r3
 8005e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e78:	4641      	mov	r1, r8
 8005e7a:	1851      	adds	r1, r2, r1
 8005e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e7e:	4649      	mov	r1, r9
 8005e80:	414b      	adcs	r3, r1
 8005e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e84:	f04f 0200 	mov.w	r2, #0
 8005e88:	f04f 0300 	mov.w	r3, #0
 8005e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e90:	4659      	mov	r1, fp
 8005e92:	00cb      	lsls	r3, r1, #3
 8005e94:	4651      	mov	r1, sl
 8005e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e9a:	4651      	mov	r1, sl
 8005e9c:	00ca      	lsls	r2, r1, #3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	4642      	mov	r2, r8
 8005ea6:	189b      	adds	r3, r3, r2
 8005ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eac:	464b      	mov	r3, r9
 8005eae:	460a      	mov	r2, r1
 8005eb0:	eb42 0303 	adc.w	r3, r2, r3
 8005eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ecc:	460b      	mov	r3, r1
 8005ece:	18db      	adds	r3, r3, r3
 8005ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	eb42 0303 	adc.w	r3, r2, r3
 8005ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005ee2:	f7fa f9c5 	bl	8000270 <__aeabi_uldivmod>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	460b      	mov	r3, r1
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005eec:	fba3 1302 	umull	r1, r3, r3, r2
 8005ef0:	095b      	lsrs	r3, r3, #5
 8005ef2:	2164      	movs	r1, #100	@ 0x64
 8005ef4:	fb01 f303 	mul.w	r3, r1, r3
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	00db      	lsls	r3, r3, #3
 8005efc:	3332      	adds	r3, #50	@ 0x32
 8005efe:	4a08      	ldr	r2, [pc, #32]	@ (8005f20 <UART_SetConfig+0x2d4>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	095b      	lsrs	r3, r3, #5
 8005f06:	f003 0207 	and.w	r2, r3, #7
 8005f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4422      	add	r2, r4
 8005f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f14:	e106      	b.n	8006124 <UART_SetConfig+0x4d8>
 8005f16:	bf00      	nop
 8005f18:	40011000 	.word	0x40011000
 8005f1c:	40011400 	.word	0x40011400
 8005f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f36:	4642      	mov	r2, r8
 8005f38:	464b      	mov	r3, r9
 8005f3a:	1891      	adds	r1, r2, r2
 8005f3c:	6239      	str	r1, [r7, #32]
 8005f3e:	415b      	adcs	r3, r3
 8005f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f46:	4641      	mov	r1, r8
 8005f48:	1854      	adds	r4, r2, r1
 8005f4a:	4649      	mov	r1, r9
 8005f4c:	eb43 0501 	adc.w	r5, r3, r1
 8005f50:	f04f 0200 	mov.w	r2, #0
 8005f54:	f04f 0300 	mov.w	r3, #0
 8005f58:	00eb      	lsls	r3, r5, #3
 8005f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f5e:	00e2      	lsls	r2, r4, #3
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	4643      	mov	r3, r8
 8005f66:	18e3      	adds	r3, r4, r3
 8005f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f6c:	464b      	mov	r3, r9
 8005f6e:	eb45 0303 	adc.w	r3, r5, r3
 8005f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f86:	f04f 0200 	mov.w	r2, #0
 8005f8a:	f04f 0300 	mov.w	r3, #0
 8005f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f92:	4629      	mov	r1, r5
 8005f94:	008b      	lsls	r3, r1, #2
 8005f96:	4621      	mov	r1, r4
 8005f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f9c:	4621      	mov	r1, r4
 8005f9e:	008a      	lsls	r2, r1, #2
 8005fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fa4:	f7fa f964 	bl	8000270 <__aeabi_uldivmod>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	460b      	mov	r3, r1
 8005fac:	4b60      	ldr	r3, [pc, #384]	@ (8006130 <UART_SetConfig+0x4e4>)
 8005fae:	fba3 2302 	umull	r2, r3, r3, r2
 8005fb2:	095b      	lsrs	r3, r3, #5
 8005fb4:	011c      	lsls	r4, r3, #4
 8005fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fc8:	4642      	mov	r2, r8
 8005fca:	464b      	mov	r3, r9
 8005fcc:	1891      	adds	r1, r2, r2
 8005fce:	61b9      	str	r1, [r7, #24]
 8005fd0:	415b      	adcs	r3, r3
 8005fd2:	61fb      	str	r3, [r7, #28]
 8005fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fd8:	4641      	mov	r1, r8
 8005fda:	1851      	adds	r1, r2, r1
 8005fdc:	6139      	str	r1, [r7, #16]
 8005fde:	4649      	mov	r1, r9
 8005fe0:	414b      	adcs	r3, r1
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	f04f 0200 	mov.w	r2, #0
 8005fe8:	f04f 0300 	mov.w	r3, #0
 8005fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ff0:	4659      	mov	r1, fp
 8005ff2:	00cb      	lsls	r3, r1, #3
 8005ff4:	4651      	mov	r1, sl
 8005ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffa:	4651      	mov	r1, sl
 8005ffc:	00ca      	lsls	r2, r1, #3
 8005ffe:	4610      	mov	r0, r2
 8006000:	4619      	mov	r1, r3
 8006002:	4603      	mov	r3, r0
 8006004:	4642      	mov	r2, r8
 8006006:	189b      	adds	r3, r3, r2
 8006008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800600c:	464b      	mov	r3, r9
 800600e:	460a      	mov	r2, r1
 8006010:	eb42 0303 	adc.w	r3, r2, r3
 8006014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006030:	4649      	mov	r1, r9
 8006032:	008b      	lsls	r3, r1, #2
 8006034:	4641      	mov	r1, r8
 8006036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800603a:	4641      	mov	r1, r8
 800603c:	008a      	lsls	r2, r1, #2
 800603e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006042:	f7fa f915 	bl	8000270 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4611      	mov	r1, r2
 800604c:	4b38      	ldr	r3, [pc, #224]	@ (8006130 <UART_SetConfig+0x4e4>)
 800604e:	fba3 2301 	umull	r2, r3, r3, r1
 8006052:	095b      	lsrs	r3, r3, #5
 8006054:	2264      	movs	r2, #100	@ 0x64
 8006056:	fb02 f303 	mul.w	r3, r2, r3
 800605a:	1acb      	subs	r3, r1, r3
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	3332      	adds	r3, #50	@ 0x32
 8006060:	4a33      	ldr	r2, [pc, #204]	@ (8006130 <UART_SetConfig+0x4e4>)
 8006062:	fba2 2303 	umull	r2, r3, r2, r3
 8006066:	095b      	lsrs	r3, r3, #5
 8006068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800606c:	441c      	add	r4, r3
 800606e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006072:	2200      	movs	r2, #0
 8006074:	673b      	str	r3, [r7, #112]	@ 0x70
 8006076:	677a      	str	r2, [r7, #116]	@ 0x74
 8006078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800607c:	4642      	mov	r2, r8
 800607e:	464b      	mov	r3, r9
 8006080:	1891      	adds	r1, r2, r2
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	415b      	adcs	r3, r3
 8006086:	60fb      	str	r3, [r7, #12]
 8006088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800608c:	4641      	mov	r1, r8
 800608e:	1851      	adds	r1, r2, r1
 8006090:	6039      	str	r1, [r7, #0]
 8006092:	4649      	mov	r1, r9
 8006094:	414b      	adcs	r3, r1
 8006096:	607b      	str	r3, [r7, #4]
 8006098:	f04f 0200 	mov.w	r2, #0
 800609c:	f04f 0300 	mov.w	r3, #0
 80060a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060a4:	4659      	mov	r1, fp
 80060a6:	00cb      	lsls	r3, r1, #3
 80060a8:	4651      	mov	r1, sl
 80060aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ae:	4651      	mov	r1, sl
 80060b0:	00ca      	lsls	r2, r1, #3
 80060b2:	4610      	mov	r0, r2
 80060b4:	4619      	mov	r1, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	4642      	mov	r2, r8
 80060ba:	189b      	adds	r3, r3, r2
 80060bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060be:	464b      	mov	r3, r9
 80060c0:	460a      	mov	r2, r1
 80060c2:	eb42 0303 	adc.w	r3, r2, r3
 80060c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80060d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80060d4:	f04f 0200 	mov.w	r2, #0
 80060d8:	f04f 0300 	mov.w	r3, #0
 80060dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060e0:	4649      	mov	r1, r9
 80060e2:	008b      	lsls	r3, r1, #2
 80060e4:	4641      	mov	r1, r8
 80060e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ea:	4641      	mov	r1, r8
 80060ec:	008a      	lsls	r2, r1, #2
 80060ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060f2:	f7fa f8bd 	bl	8000270 <__aeabi_uldivmod>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4b0d      	ldr	r3, [pc, #52]	@ (8006130 <UART_SetConfig+0x4e4>)
 80060fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006100:	095b      	lsrs	r3, r3, #5
 8006102:	2164      	movs	r1, #100	@ 0x64
 8006104:	fb01 f303 	mul.w	r3, r1, r3
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	3332      	adds	r3, #50	@ 0x32
 800610e:	4a08      	ldr	r2, [pc, #32]	@ (8006130 <UART_SetConfig+0x4e4>)
 8006110:	fba2 2303 	umull	r2, r3, r2, r3
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	f003 020f 	and.w	r2, r3, #15
 800611a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	4422      	add	r2, r4
 8006122:	609a      	str	r2, [r3, #8]
}
 8006124:	bf00      	nop
 8006126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006130:	51eb851f 	.word	0x51eb851f

08006134 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006134:	b084      	sub	sp, #16
 8006136:	b580      	push	{r7, lr}
 8006138:	b084      	sub	sp, #16
 800613a:	af00      	add	r7, sp, #0
 800613c:	6078      	str	r0, [r7, #4]
 800613e:	f107 001c 	add.w	r0, r7, #28
 8006142:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006146:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800614a:	2b01      	cmp	r3, #1
 800614c:	d123      	bne.n	8006196 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006152:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006162:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006176:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800617a:	2b01      	cmp	r3, #1
 800617c:	d105      	bne.n	800618a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f000 f9dc 	bl	8006548 <USB_CoreReset>
 8006190:	4603      	mov	r3, r0
 8006192:	73fb      	strb	r3, [r7, #15]
 8006194:	e01b      	b.n	80061ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f9d0 	bl	8006548 <USB_CoreReset>
 80061a8:	4603      	mov	r3, r0
 80061aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80061ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d106      	bne.n	80061c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	639a      	str	r2, [r3, #56]	@ 0x38
 80061c0:	e005      	b.n	80061ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80061ce:	7fbb      	ldrb	r3, [r7, #30]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d10b      	bne.n	80061ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f043 0206 	orr.w	r2, r3, #6
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f043 0220 	orr.w	r2, r3, #32
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80061ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061f8:	b004      	add	sp, #16
 80061fa:	4770      	bx	lr

080061fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b083      	sub	sp, #12
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	689b      	ldr	r3, [r3, #8]
 8006208:	f043 0201 	orr.w	r2, r3, #1
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	370c      	adds	r7, #12
 8006216:	46bd      	mov	sp, r7
 8006218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621c:	4770      	bx	lr

0800621e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800621e:	b480      	push	{r7}
 8006220:	b083      	sub	sp, #12
 8006222:	af00      	add	r7, sp, #0
 8006224:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	f023 0201 	bic.w	r2, r3, #1
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	460b      	mov	r3, r1
 800624a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	68db      	ldr	r3, [r3, #12]
 8006254:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d115      	bne.n	800628e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800626e:	200a      	movs	r0, #10
 8006270:	f7fb fa6e 	bl	8001750 <HAL_Delay>
      ms += 10U;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	330a      	adds	r3, #10
 8006278:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f956 	bl	800652c <USB_GetMode>
 8006280:	4603      	mov	r3, r0
 8006282:	2b01      	cmp	r3, #1
 8006284:	d01e      	beq.n	80062c4 <USB_SetCurrentMode+0x84>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2bc7      	cmp	r3, #199	@ 0xc7
 800628a:	d9f0      	bls.n	800626e <USB_SetCurrentMode+0x2e>
 800628c:	e01a      	b.n	80062c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800628e:	78fb      	ldrb	r3, [r7, #3]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d115      	bne.n	80062c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80062a0:	200a      	movs	r0, #10
 80062a2:	f7fb fa55 	bl	8001750 <HAL_Delay>
      ms += 10U;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	330a      	adds	r3, #10
 80062aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f93d 	bl	800652c <USB_GetMode>
 80062b2:	4603      	mov	r3, r0
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d005      	beq.n	80062c4 <USB_SetCurrentMode+0x84>
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2bc7      	cmp	r3, #199	@ 0xc7
 80062bc:	d9f0      	bls.n	80062a0 <USB_SetCurrentMode+0x60>
 80062be:	e001      	b.n	80062c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	e005      	b.n	80062d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2bc8      	cmp	r3, #200	@ 0xc8
 80062c8:	d101      	bne.n	80062ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}

080062d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
 80062e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80062e2:	2300      	movs	r3, #0
 80062e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	3301      	adds	r3, #1
 80062ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80062f2:	d901      	bls.n	80062f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80062f4:	2303      	movs	r3, #3
 80062f6:	e01b      	b.n	8006330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	daf2      	bge.n	80062e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	019b      	lsls	r3, r3, #6
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800631c:	d901      	bls.n	8006322 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e006      	b.n	8006330 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	f003 0320 	and.w	r3, r3, #32
 800632a:	2b20      	cmp	r3, #32
 800632c:	d0f0      	beq.n	8006310 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3714      	adds	r7, #20
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800633c:	b480      	push	{r7}
 800633e:	b085      	sub	sp, #20
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006344:	2300      	movs	r3, #0
 8006346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	3301      	adds	r3, #1
 800634c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006354:	d901      	bls.n	800635a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006356:	2303      	movs	r3, #3
 8006358:	e018      	b.n	800638c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	daf2      	bge.n	8006348 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006362:	2300      	movs	r3, #0
 8006364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2210      	movs	r2, #16
 800636a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	3301      	adds	r3, #1
 8006370:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006378:	d901      	bls.n	800637e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800637a:	2303      	movs	r3, #3
 800637c:	e006      	b.n	800638c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0310 	and.w	r3, r3, #16
 8006386:	2b10      	cmp	r3, #16
 8006388:	d0f0      	beq.n	800636c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006398:	b480      	push	{r7}
 800639a:	b089      	sub	sp, #36	@ 0x24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	4611      	mov	r1, r2
 80063a4:	461a      	mov	r2, r3
 80063a6:	460b      	mov	r3, r1
 80063a8:	71fb      	strb	r3, [r7, #7]
 80063aa:	4613      	mov	r3, r2
 80063ac:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80063b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d123      	bne.n	8006406 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80063be:	88bb      	ldrh	r3, [r7, #4]
 80063c0:	3303      	adds	r3, #3
 80063c2:	089b      	lsrs	r3, r3, #2
 80063c4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80063c6:	2300      	movs	r3, #0
 80063c8:	61bb      	str	r3, [r7, #24]
 80063ca:	e018      	b.n	80063fe <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80063cc:	79fb      	ldrb	r3, [r7, #7]
 80063ce:	031a      	lsls	r2, r3, #12
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80063d8:	461a      	mov	r2, r3
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6013      	str	r3, [r2, #0]
      pSrc++;
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	3301      	adds	r3, #1
 80063e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063e6:	69fb      	ldr	r3, [r7, #28]
 80063e8:	3301      	adds	r3, #1
 80063ea:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063ec:	69fb      	ldr	r3, [r7, #28]
 80063ee:	3301      	adds	r3, #1
 80063f0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3301      	adds	r3, #1
 80063f6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	3301      	adds	r3, #1
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	693b      	ldr	r3, [r7, #16]
 8006402:	429a      	cmp	r2, r3
 8006404:	d3e2      	bcc.n	80063cc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3724      	adds	r7, #36	@ 0x24
 800640c:	46bd      	mov	sp, r7
 800640e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006412:	4770      	bx	lr

08006414 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006414:	b480      	push	{r7}
 8006416:	b08b      	sub	sp, #44	@ 0x2c
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	60b9      	str	r1, [r7, #8]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800642a:	88fb      	ldrh	r3, [r7, #6]
 800642c:	089b      	lsrs	r3, r3, #2
 800642e:	b29b      	uxth	r3, r3
 8006430:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006432:	88fb      	ldrh	r3, [r7, #6]
 8006434:	f003 0303 	and.w	r3, r3, #3
 8006438:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800643a:	2300      	movs	r3, #0
 800643c:	623b      	str	r3, [r7, #32]
 800643e:	e014      	b.n	800646a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644a:	601a      	str	r2, [r3, #0]
    pDest++;
 800644c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800644e:	3301      	adds	r3, #1
 8006450:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006454:	3301      	adds	r3, #1
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006458:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800645a:	3301      	adds	r3, #1
 800645c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800645e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006460:	3301      	adds	r3, #1
 8006462:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006464:	6a3b      	ldr	r3, [r7, #32]
 8006466:	3301      	adds	r3, #1
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	6a3a      	ldr	r2, [r7, #32]
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	429a      	cmp	r2, r3
 8006470:	d3e6      	bcc.n	8006440 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006472:	8bfb      	ldrh	r3, [r7, #30]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d01e      	beq.n	80064b6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006478:	2300      	movs	r3, #0
 800647a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006482:	461a      	mov	r2, r3
 8006484:	f107 0310 	add.w	r3, r7, #16
 8006488:	6812      	ldr	r2, [r2, #0]
 800648a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800648c:	693a      	ldr	r2, [r7, #16]
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	b2db      	uxtb	r3, r3
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	fa22 f303 	lsr.w	r3, r2, r3
 8006498:	b2da      	uxtb	r2, r3
 800649a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649c:	701a      	strb	r2, [r3, #0]
      i++;
 800649e:	6a3b      	ldr	r3, [r7, #32]
 80064a0:	3301      	adds	r3, #1
 80064a2:	623b      	str	r3, [r7, #32]
      pDest++;
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	3301      	adds	r3, #1
 80064a8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80064aa:	8bfb      	ldrh	r3, [r7, #30]
 80064ac:	3b01      	subs	r3, #1
 80064ae:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80064b0:	8bfb      	ldrh	r3, [r7, #30]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d1ea      	bne.n	800648c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80064b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	372c      	adds	r7, #44	@ 0x2c
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	695b      	ldr	r3, [r3, #20]
 80064d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	4013      	ands	r3, r2
 80064da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80064dc:	68fb      	ldr	r3, [r7, #12]
}
 80064de:	4618      	mov	r0, r3
 80064e0:	3714      	adds	r7, #20
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr

080064ea <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b085      	sub	sp, #20
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
 80064f2:	460b      	mov	r3, r1
 80064f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800650a:	78fb      	ldrb	r3, [r7, #3]
 800650c:	015a      	lsls	r2, r3, #5
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	4413      	add	r3, r2
 8006512:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	68ba      	ldr	r2, [r7, #8]
 800651a:	4013      	ands	r3, r2
 800651c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800651e:	68bb      	ldr	r3, [r7, #8]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f003 0301 	and.w	r3, r3, #1
}
 800653c:	4618      	mov	r0, r3
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006550:	2300      	movs	r3, #0
 8006552:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	3301      	adds	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006560:	d901      	bls.n	8006566 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006562:	2303      	movs	r3, #3
 8006564:	e01b      	b.n	800659e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	691b      	ldr	r3, [r3, #16]
 800656a:	2b00      	cmp	r3, #0
 800656c:	daf2      	bge.n	8006554 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800656e:	2300      	movs	r3, #0
 8006570:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f043 0201 	orr.w	r2, r3, #1
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	3301      	adds	r3, #1
 8006582:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800658a:	d901      	bls.n	8006590 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800658c:	2303      	movs	r3, #3
 800658e:	e006      	b.n	800659e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	f003 0301 	and.w	r3, r3, #1
 8006598:	2b01      	cmp	r3, #1
 800659a:	d0f0      	beq.n	800657e <USB_CoreReset+0x36>

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3714      	adds	r7, #20
 80065a2:	46bd      	mov	sp, r7
 80065a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a8:	4770      	bx	lr
	...

080065ac <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065ac:	b084      	sub	sp, #16
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b086      	sub	sp, #24
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
 80065b6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80065ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80065cc:	461a      	mov	r2, r3
 80065ce:	2300      	movs	r3, #0
 80065d0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ee:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d119      	bne.n	8006636 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006602:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006606:	2b01      	cmp	r3, #1
 8006608:	d10a      	bne.n	8006620 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	68fa      	ldr	r2, [r7, #12]
 8006614:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006618:	f043 0304 	orr.w	r3, r3, #4
 800661c:	6013      	str	r3, [r2, #0]
 800661e:	e014      	b.n	800664a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800662e:	f023 0304 	bic.w	r3, r3, #4
 8006632:	6013      	str	r3, [r2, #0]
 8006634:	e009      	b.n	800664a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68fa      	ldr	r2, [r7, #12]
 8006640:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006644:	f023 0304 	bic.w	r3, r3, #4
 8006648:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800664a:	2110      	movs	r1, #16
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f7ff fe43 	bl	80062d8 <USB_FlushTxFifo>
 8006652:	4603      	mov	r3, r0
 8006654:	2b00      	cmp	r3, #0
 8006656:	d001      	beq.n	800665c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8006658:	2301      	movs	r3, #1
 800665a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f7ff fe6d 	bl	800633c <USB_FlushRxFifo>
 8006662:	4603      	mov	r3, r0
 8006664:	2b00      	cmp	r3, #0
 8006666:	d001      	beq.n	800666c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800666c:	2300      	movs	r3, #0
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e015      	b.n	800669e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	4413      	add	r3, r2
 800667a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800667e:	461a      	mov	r2, r3
 8006680:	f04f 33ff 	mov.w	r3, #4294967295
 8006684:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	015a      	lsls	r2, r3, #5
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	4413      	add	r3, r2
 800668e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006692:	461a      	mov	r2, r3
 8006694:	2300      	movs	r3, #0
 8006696:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006698:	693b      	ldr	r3, [r7, #16]
 800669a:	3301      	adds	r3, #1
 800669c:	613b      	str	r3, [r7, #16]
 800669e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80066a2:	461a      	mov	r2, r3
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d3e3      	bcc.n	8006672 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	f04f 32ff 	mov.w	r2, #4294967295
 80066b6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	4a18      	ldr	r2, [pc, #96]	@ (800671c <USB_HostInit+0x170>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d10b      	bne.n	80066d8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80066c6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a15      	ldr	r2, [pc, #84]	@ (8006720 <USB_HostInit+0x174>)
 80066cc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a14      	ldr	r2, [pc, #80]	@ (8006724 <USB_HostInit+0x178>)
 80066d2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80066d6:	e009      	b.n	80066ec <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2280      	movs	r2, #128	@ 0x80
 80066dc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a11      	ldr	r2, [pc, #68]	@ (8006728 <USB_HostInit+0x17c>)
 80066e2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	4a11      	ldr	r2, [pc, #68]	@ (800672c <USB_HostInit+0x180>)
 80066e8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80066ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d105      	bne.n	8006700 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	f043 0210 	orr.w	r2, r3, #16
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699a      	ldr	r2, [r3, #24]
 8006704:	4b0a      	ldr	r3, [pc, #40]	@ (8006730 <USB_HostInit+0x184>)
 8006706:	4313      	orrs	r3, r2
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006718:	b004      	add	sp, #16
 800671a:	4770      	bx	lr
 800671c:	40040000 	.word	0x40040000
 8006720:	01000200 	.word	0x01000200
 8006724:	00e00300 	.word	0x00e00300
 8006728:	00600080 	.word	0x00600080
 800672c:	004000e0 	.word	0x004000e0
 8006730:	a3200008 	.word	0xa3200008

08006734 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006734:	b480      	push	{r7}
 8006736:	b085      	sub	sp, #20
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	78fb      	ldrb	r3, [r7, #3]
 8006762:	f003 0303 	and.w	r3, r3, #3
 8006766:	68f9      	ldr	r1, [r7, #12]
 8006768:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800676c:	4313      	orrs	r3, r2
 800676e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006770:	78fb      	ldrb	r3, [r7, #3]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d107      	bne.n	8006786 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800677c:	461a      	mov	r2, r3
 800677e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8006782:	6053      	str	r3, [r2, #4]
 8006784:	e00c      	b.n	80067a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8006786:	78fb      	ldrb	r3, [r7, #3]
 8006788:	2b02      	cmp	r3, #2
 800678a:	d107      	bne.n	800679c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006792:	461a      	mov	r2, r3
 8006794:	f241 7370 	movw	r3, #6000	@ 0x1770
 8006798:	6053      	str	r3, [r2, #4]
 800679a:	e001      	b.n	80067a0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e000      	b.n	80067a2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80067a0:	2300      	movs	r3, #0
}
 80067a2:	4618      	mov	r0, r3
 80067a4:	3714      	adds	r7, #20
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr

080067ae <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80067ae:	b580      	push	{r7, lr}
 80067b0:	b084      	sub	sp, #16
 80067b2:	af00      	add	r7, sp, #0
 80067b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80067ba:	2300      	movs	r3, #0
 80067bc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80067ce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	68fa      	ldr	r2, [r7, #12]
 80067d4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80067d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067dc:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80067de:	2064      	movs	r0, #100	@ 0x64
 80067e0:	f7fa ffb6 	bl	8001750 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80067ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80067f0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80067f2:	200a      	movs	r0, #10
 80067f4:	f7fa ffac 	bl	8001750 <HAL_Delay>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	460b      	mov	r3, r1
 800680c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006812:	2300      	movs	r3, #0
 8006814:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006826:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <USB_DriveVbus+0x44>
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d106      	bne.n	8006846 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006840:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8006844:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006850:	d109      	bne.n	8006866 <USB_DriveVbus+0x64>
 8006852:	78fb      	ldrb	r3, [r7, #3]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d106      	bne.n	8006866 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	68fa      	ldr	r2, [r7, #12]
 800685c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006860:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006864:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3714      	adds	r7, #20
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8006874:	b480      	push	{r7}
 8006876:	b085      	sub	sp, #20
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	0c5b      	lsrs	r3, r3, #17
 8006892:	f003 0303 	and.w	r3, r3, #3
}
 8006896:	4618      	mov	r0, r3
 8006898:	3714      	adds	r7, #20
 800689a:	46bd      	mov	sp, r7
 800689c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a0:	4770      	bx	lr

080068a2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80068a2:	b480      	push	{r7}
 80068a4:	b085      	sub	sp, #20
 80068a6:	af00      	add	r7, sp, #0
 80068a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068b4:	689b      	ldr	r3, [r3, #8]
 80068b6:	b29b      	uxth	r3, r3
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3714      	adds	r7, #20
 80068bc:	46bd      	mov	sp, r7
 80068be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c2:	4770      	bx	lr

080068c4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	4608      	mov	r0, r1
 80068ce:	4611      	mov	r1, r2
 80068d0:	461a      	mov	r2, r3
 80068d2:	4603      	mov	r3, r0
 80068d4:	70fb      	strb	r3, [r7, #3]
 80068d6:	460b      	mov	r3, r1
 80068d8:	70bb      	strb	r3, [r7, #2]
 80068da:	4613      	mov	r3, r2
 80068dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80068de:	2300      	movs	r3, #0
 80068e0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80068e6:	78fb      	ldrb	r3, [r7, #3]
 80068e8:	015a      	lsls	r2, r3, #5
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	4413      	add	r3, r2
 80068ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068f2:	461a      	mov	r2, r3
 80068f4:	f04f 33ff 	mov.w	r3, #4294967295
 80068f8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80068fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80068fe:	2b03      	cmp	r3, #3
 8006900:	d87c      	bhi.n	80069fc <USB_HC_Init+0x138>
 8006902:	a201      	add	r2, pc, #4	@ (adr r2, 8006908 <USB_HC_Init+0x44>)
 8006904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006908:	08006919 	.word	0x08006919
 800690c:	080069bf 	.word	0x080069bf
 8006910:	08006919 	.word	0x08006919
 8006914:	08006981 	.word	0x08006981
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	015a      	lsls	r2, r3, #5
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	4413      	add	r3, r2
 8006920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006924:	461a      	mov	r2, r3
 8006926:	f240 439d 	movw	r3, #1181	@ 0x49d
 800692a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800692c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006930:	2b00      	cmp	r3, #0
 8006932:	da10      	bge.n	8006956 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006934:	78fb      	ldrb	r3, [r7, #3]
 8006936:	015a      	lsls	r2, r3, #5
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	4413      	add	r3, r2
 800693c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	78fa      	ldrb	r2, [r7, #3]
 8006944:	0151      	lsls	r1, r2, #5
 8006946:	693a      	ldr	r2, [r7, #16]
 8006948:	440a      	add	r2, r1
 800694a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800694e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006952:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8006954:	e055      	b.n	8006a02 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a6f      	ldr	r2, [pc, #444]	@ (8006b18 <USB_HC_Init+0x254>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d151      	bne.n	8006a02 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800695e:	78fb      	ldrb	r3, [r7, #3]
 8006960:	015a      	lsls	r2, r3, #5
 8006962:	693b      	ldr	r3, [r7, #16]
 8006964:	4413      	add	r3, r2
 8006966:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	78fa      	ldrb	r2, [r7, #3]
 800696e:	0151      	lsls	r1, r2, #5
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	440a      	add	r2, r1
 8006974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006978:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800697c:	60d3      	str	r3, [r2, #12]
      break;
 800697e:	e040      	b.n	8006a02 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006980:	78fb      	ldrb	r3, [r7, #3]
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	4413      	add	r3, r2
 8006988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800698c:	461a      	mov	r2, r3
 800698e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006992:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006994:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006998:	2b00      	cmp	r3, #0
 800699a:	da34      	bge.n	8006a06 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800699c:	78fb      	ldrb	r3, [r7, #3]
 800699e:	015a      	lsls	r2, r3, #5
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	4413      	add	r3, r2
 80069a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069a8:	68db      	ldr	r3, [r3, #12]
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	0151      	lsls	r1, r2, #5
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	440a      	add	r2, r1
 80069b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80069ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80069bc:	e023      	b.n	8006a06 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80069be:	78fb      	ldrb	r3, [r7, #3]
 80069c0:	015a      	lsls	r2, r3, #5
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	4413      	add	r3, r2
 80069c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069ca:	461a      	mov	r2, r3
 80069cc:	f240 2325 	movw	r3, #549	@ 0x225
 80069d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80069d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	da17      	bge.n	8006a0a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80069da:	78fb      	ldrb	r3, [r7, #3]
 80069dc:	015a      	lsls	r2, r3, #5
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	4413      	add	r3, r2
 80069e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e6:	68db      	ldr	r3, [r3, #12]
 80069e8:	78fa      	ldrb	r2, [r7, #3]
 80069ea:	0151      	lsls	r1, r2, #5
 80069ec:	693a      	ldr	r2, [r7, #16]
 80069ee:	440a      	add	r2, r1
 80069f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069f4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80069f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80069fa:	e006      	b.n	8006a0a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80069fc:	2301      	movs	r3, #1
 80069fe:	77fb      	strb	r3, [r7, #31]
      break;
 8006a00:	e004      	b.n	8006a0c <USB_HC_Init+0x148>
      break;
 8006a02:	bf00      	nop
 8006a04:	e002      	b.n	8006a0c <USB_HC_Init+0x148>
      break;
 8006a06:	bf00      	nop
 8006a08:	e000      	b.n	8006a0c <USB_HC_Init+0x148>
      break;
 8006a0a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	015a      	lsls	r2, r3, #5
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	4413      	add	r3, r2
 8006a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a18:	461a      	mov	r2, r3
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006a1e:	78fb      	ldrb	r3, [r7, #3]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	0151      	lsls	r1, r2, #5
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	440a      	add	r2, r1
 8006a34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006a38:	f043 0302 	orr.w	r3, r3, #2
 8006a3c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006a44:	699a      	ldr	r2, [r3, #24]
 8006a46:	78fb      	ldrb	r3, [r7, #3]
 8006a48:	f003 030f 	and.w	r3, r3, #15
 8006a4c:	2101      	movs	r1, #1
 8006a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a52:	6939      	ldr	r1, [r7, #16]
 8006a54:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	699b      	ldr	r3, [r3, #24]
 8006a60:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006a68:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	da03      	bge.n	8006a78 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006a70:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a74:	61bb      	str	r3, [r7, #24]
 8006a76:	e001      	b.n	8006a7c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f7ff fef9 	bl	8006874 <USB_GetHostSpeed>
 8006a82:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006a84:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006a88:	2b02      	cmp	r3, #2
 8006a8a:	d106      	bne.n	8006a9a <USB_HC_Init+0x1d6>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d003      	beq.n	8006a9a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006a92:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8006a96:	617b      	str	r3, [r7, #20]
 8006a98:	e001      	b.n	8006a9e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006a9e:	787b      	ldrb	r3, [r7, #1]
 8006aa0:	059b      	lsls	r3, r3, #22
 8006aa2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006aa6:	78bb      	ldrb	r3, [r7, #2]
 8006aa8:	02db      	lsls	r3, r3, #11
 8006aaa:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006aae:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ab0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ab4:	049b      	lsls	r3, r3, #18
 8006ab6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006aba:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006abc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006abe:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006ac2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	431a      	orrs	r2, r3
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006ad8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006adc:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006ade:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d003      	beq.n	8006aee <USB_HC_Init+0x22a>
 8006ae6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d10f      	bne.n	8006b0e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006aee:	78fb      	ldrb	r3, [r7, #3]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	693a      	ldr	r2, [r7, #16]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b0c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006b0e:	7ffb      	ldrb	r3, [r7, #31]
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3720      	adds	r7, #32
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	40040000 	.word	0x40040000

08006b1c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b08c      	sub	sp, #48	@ 0x30
 8006b20:	af02      	add	r7, sp, #8
 8006b22:	60f8      	str	r0, [r7, #12]
 8006b24:	60b9      	str	r1, [r7, #8]
 8006b26:	4613      	mov	r3, r2
 8006b28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	785b      	ldrb	r3, [r3, #1]
 8006b32:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8006b34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b38:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a5d      	ldr	r2, [pc, #372]	@ (8006cb4 <USB_HC_StartXfer+0x198>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d12f      	bne.n	8006ba2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d11c      	bne.n	8006b82 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	7c9b      	ldrb	r3, [r3, #18]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d003      	beq.n	8006b58 <USB_HC_StartXfer+0x3c>
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	7c9b      	ldrb	r3, [r3, #18]
 8006b54:	2b02      	cmp	r3, #2
 8006b56:	d124      	bne.n	8006ba2 <USB_HC_StartXfer+0x86>
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	799b      	ldrb	r3, [r3, #6]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d120      	bne.n	8006ba2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	015a      	lsls	r2, r3, #5
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	4413      	add	r3, r2
 8006b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	69fa      	ldr	r2, [r7, #28]
 8006b70:	0151      	lsls	r1, r2, #5
 8006b72:	6a3a      	ldr	r2, [r7, #32]
 8006b74:	440a      	add	r2, r1
 8006b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006b7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b7e:	60d3      	str	r3, [r2, #12]
 8006b80:	e00f      	b.n	8006ba2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	791b      	ldrb	r3, [r3, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d10b      	bne.n	8006ba2 <USB_HC_StartXfer+0x86>
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	795b      	ldrb	r3, [r3, #5]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d107      	bne.n	8006ba2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	785b      	ldrb	r3, [r3, #1]
 8006b96:	4619      	mov	r1, r3
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 fb6b 	bl	8007274 <USB_DoPing>
        return HAL_OK;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	e232      	b.n	8007008 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006ba2:	68bb      	ldr	r3, [r7, #8]
 8006ba4:	799b      	ldrb	r3, [r3, #6]
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d158      	bne.n	8006c5c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006baa:	2301      	movs	r3, #1
 8006bac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	78db      	ldrb	r3, [r3, #3]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d007      	beq.n	8006bc6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006bb6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006bb8:	68ba      	ldr	r2, [r7, #8]
 8006bba:	8a92      	ldrh	r2, [r2, #20]
 8006bbc:	fb03 f202 	mul.w	r2, r3, r2
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	61da      	str	r2, [r3, #28]
 8006bc4:	e07c      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7c9b      	ldrb	r3, [r3, #18]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d130      	bne.n	8006c30 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	2bbc      	cmp	r3, #188	@ 0xbc
 8006bd4:	d918      	bls.n	8006c08 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	8a9b      	ldrh	r3, [r3, #20]
 8006bda:	461a      	mov	r2, r3
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	69da      	ldr	r2, [r3, #28]
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d003      	beq.n	8006bf8 <USB_HC_StartXfer+0xdc>
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	2b02      	cmp	r3, #2
 8006bf6:	d103      	bne.n	8006c00 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	60da      	str	r2, [r3, #12]
 8006bfe:	e05f      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	2201      	movs	r2, #1
 8006c04:	60da      	str	r2, [r3, #12]
 8006c06:	e05b      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	6a1a      	ldr	r2, [r3, #32]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	68db      	ldr	r3, [r3, #12]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d007      	beq.n	8006c28 <USB_HC_StartXfer+0x10c>
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	68db      	ldr	r3, [r3, #12]
 8006c1c:	2b02      	cmp	r3, #2
 8006c1e:	d003      	beq.n	8006c28 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2204      	movs	r2, #4
 8006c24:	60da      	str	r2, [r3, #12]
 8006c26:	e04b      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	2203      	movs	r2, #3
 8006c2c:	60da      	str	r2, [r3, #12]
 8006c2e:	e047      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006c30:	79fb      	ldrb	r3, [r7, #7]
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d10d      	bne.n	8006c52 <USB_HC_StartXfer+0x136>
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	8a92      	ldrh	r2, [r2, #20]
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d907      	bls.n	8006c52 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	8a92      	ldrh	r2, [r2, #20]
 8006c48:	fb03 f202 	mul.w	r2, r3, r2
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	61da      	str	r2, [r3, #28]
 8006c50:	e036      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	6a1a      	ldr	r2, [r3, #32]
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	61da      	str	r2, [r3, #28]
 8006c5a:	e031      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	6a1b      	ldr	r3, [r3, #32]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d018      	beq.n	8006c96 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	6a1b      	ldr	r3, [r3, #32]
 8006c68:	68ba      	ldr	r2, [r7, #8]
 8006c6a:	8a92      	ldrh	r2, [r2, #20]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	68ba      	ldr	r2, [r7, #8]
 8006c72:	8a92      	ldrh	r2, [r2, #20]
 8006c74:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c78:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006c7a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006c7c:	8b7b      	ldrh	r3, [r7, #26]
 8006c7e:	429a      	cmp	r2, r3
 8006c80:	d90b      	bls.n	8006c9a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006c82:	8b7b      	ldrh	r3, [r7, #26]
 8006c84:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006c86:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	8a92      	ldrh	r2, [r2, #20]
 8006c8c:	fb03 f202 	mul.w	r2, r3, r2
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	61da      	str	r2, [r3, #28]
 8006c94:	e001      	b.n	8006c9a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006c96:	2301      	movs	r3, #1
 8006c98:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	78db      	ldrb	r3, [r3, #3]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ca2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	8a92      	ldrh	r2, [r2, #20]
 8006ca8:	fb03 f202 	mul.w	r2, r3, r2
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	61da      	str	r2, [r3, #28]
 8006cb0:	e006      	b.n	8006cc0 <USB_HC_StartXfer+0x1a4>
 8006cb2:	bf00      	nop
 8006cb4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	6a1a      	ldr	r2, [r3, #32]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006cc8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cca:	04d9      	lsls	r1, r3, #19
 8006ccc:	4ba3      	ldr	r3, [pc, #652]	@ (8006f5c <USB_HC_StartXfer+0x440>)
 8006cce:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cd0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	7d9b      	ldrb	r3, [r3, #22]
 8006cd6:	075b      	lsls	r3, r3, #29
 8006cd8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cdc:	69f9      	ldr	r1, [r7, #28]
 8006cde:	0148      	lsls	r0, r1, #5
 8006ce0:	6a39      	ldr	r1, [r7, #32]
 8006ce2:	4401      	add	r1, r0
 8006ce4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006ce8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006cea:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006cec:	79fb      	ldrb	r3, [r7, #7]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d009      	beq.n	8006d06 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	6999      	ldr	r1, [r3, #24]
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	015a      	lsls	r2, r3, #5
 8006cfa:	6a3b      	ldr	r3, [r7, #32]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d02:	460a      	mov	r2, r1
 8006d04:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d06:	6a3b      	ldr	r3, [r7, #32]
 8006d08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	bf0c      	ite	eq
 8006d16:	2301      	moveq	r3, #1
 8006d18:	2300      	movne	r3, #0
 8006d1a:	b2db      	uxtb	r3, r3
 8006d1c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	6a3b      	ldr	r3, [r7, #32]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	69fa      	ldr	r2, [r7, #28]
 8006d2e:	0151      	lsls	r1, r2, #5
 8006d30:	6a3a      	ldr	r2, [r7, #32]
 8006d32:	440a      	add	r2, r1
 8006d34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d3c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
 8006d40:	015a      	lsls	r2, r3, #5
 8006d42:	6a3b      	ldr	r3, [r7, #32]
 8006d44:	4413      	add	r3, r2
 8006d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	7e7b      	ldrb	r3, [r7, #25]
 8006d4e:	075b      	lsls	r3, r3, #29
 8006d50:	69f9      	ldr	r1, [r7, #28]
 8006d52:	0148      	lsls	r0, r1, #5
 8006d54:	6a39      	ldr	r1, [r7, #32]
 8006d56:	4401      	add	r1, r0
 8006d58:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	799b      	ldrb	r3, [r3, #6]
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	f040 80c3 	bne.w	8006ef0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	7c5b      	ldrb	r3, [r3, #17]
 8006d6e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006d70:	68ba      	ldr	r2, [r7, #8]
 8006d72:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006d74:	4313      	orrs	r3, r2
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	0151      	lsls	r1, r2, #5
 8006d7a:	6a3a      	ldr	r2, [r7, #32]
 8006d7c:	440a      	add	r2, r1
 8006d7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006d82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006d86:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	015a      	lsls	r2, r3, #5
 8006d8c:	6a3b      	ldr	r3, [r7, #32]
 8006d8e:	4413      	add	r3, r2
 8006d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	69fa      	ldr	r2, [r7, #28]
 8006d98:	0151      	lsls	r1, r2, #5
 8006d9a:	6a3a      	ldr	r2, [r7, #32]
 8006d9c:	440a      	add	r2, r1
 8006d9e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006da2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006da6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	79db      	ldrb	r3, [r3, #7]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d123      	bne.n	8006df8 <USB_HC_StartXfer+0x2dc>
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	78db      	ldrb	r3, [r3, #3]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11f      	bne.n	8006df8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	6a3b      	ldr	r3, [r7, #32]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	69fa      	ldr	r2, [r7, #28]
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	6a3a      	ldr	r2, [r7, #32]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006dd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dd6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006dd8:	69fb      	ldr	r3, [r7, #28]
 8006dda:	015a      	lsls	r2, r3, #5
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	4413      	add	r3, r2
 8006de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	69fa      	ldr	r2, [r7, #28]
 8006de8:	0151      	lsls	r1, r2, #5
 8006dea:	6a3a      	ldr	r2, [r7, #32]
 8006dec:	440a      	add	r2, r1
 8006dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006df2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006df6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	7c9b      	ldrb	r3, [r3, #18]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	d003      	beq.n	8006e08 <USB_HC_StartXfer+0x2ec>
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	7c9b      	ldrb	r3, [r3, #18]
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	d117      	bne.n	8006e38 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006e0c:	2b01      	cmp	r3, #1
 8006e0e:	d113      	bne.n	8006e38 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	78db      	ldrb	r3, [r3, #3]
 8006e14:	2b01      	cmp	r3, #1
 8006e16:	d10f      	bne.n	8006e38 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	015a      	lsls	r2, r3, #5
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	0151      	lsls	r1, r2, #5
 8006e2a:	6a3a      	ldr	r2, [r7, #32]
 8006e2c:	440a      	add	r2, r1
 8006e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006e36:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	7c9b      	ldrb	r3, [r3, #18]
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d162      	bne.n	8006f06 <USB_HC_StartXfer+0x3ea>
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	78db      	ldrb	r3, [r3, #3]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d15e      	bne.n	8006f06 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006e48:	68bb      	ldr	r3, [r7, #8]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	2b03      	cmp	r3, #3
 8006e50:	d858      	bhi.n	8006f04 <USB_HC_StartXfer+0x3e8>
 8006e52:	a201      	add	r2, pc, #4	@ (adr r2, 8006e58 <USB_HC_StartXfer+0x33c>)
 8006e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e8b 	.word	0x08006e8b
 8006e60:	08006ead 	.word	0x08006ead
 8006e64:	08006ecf 	.word	0x08006ecf
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006e68:	69fb      	ldr	r3, [r7, #28]
 8006e6a:	015a      	lsls	r2, r3, #5
 8006e6c:	6a3b      	ldr	r3, [r7, #32]
 8006e6e:	4413      	add	r3, r2
 8006e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	69fa      	ldr	r2, [r7, #28]
 8006e78:	0151      	lsls	r1, r2, #5
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	440a      	add	r2, r1
 8006e7e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006e82:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006e86:	6053      	str	r3, [r2, #4]
          break;
 8006e88:	e03d      	b.n	8006f06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	015a      	lsls	r2, r3, #5
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	4413      	add	r3, r2
 8006e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	69fa      	ldr	r2, [r7, #28]
 8006e9a:	0151      	lsls	r1, r2, #5
 8006e9c:	6a3a      	ldr	r2, [r7, #32]
 8006e9e:	440a      	add	r2, r1
 8006ea0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ea4:	f043 030e 	orr.w	r3, r3, #14
 8006ea8:	6053      	str	r3, [r2, #4]
          break;
 8006eaa:	e02c      	b.n	8006f06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006eac:	69fb      	ldr	r3, [r7, #28]
 8006eae:	015a      	lsls	r2, r3, #5
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	69fa      	ldr	r2, [r7, #28]
 8006ebc:	0151      	lsls	r1, r2, #5
 8006ebe:	6a3a      	ldr	r2, [r7, #32]
 8006ec0:	440a      	add	r2, r1
 8006ec2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006eca:	6053      	str	r3, [r2, #4]
          break;
 8006ecc:	e01b      	b.n	8006f06 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006ece:	69fb      	ldr	r3, [r7, #28]
 8006ed0:	015a      	lsls	r2, r3, #5
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	69fa      	ldr	r2, [r7, #28]
 8006ede:	0151      	lsls	r1, r2, #5
 8006ee0:	6a3a      	ldr	r2, [r7, #32]
 8006ee2:	440a      	add	r2, r1
 8006ee4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ee8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006eec:	6053      	str	r3, [r2, #4]
          break;
 8006eee:	e00a      	b.n	8006f06 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	015a      	lsls	r2, r3, #5
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006efc:	461a      	mov	r2, r3
 8006efe:	2300      	movs	r3, #0
 8006f00:	6053      	str	r3, [r2, #4]
 8006f02:	e000      	b.n	8006f06 <USB_HC_StartXfer+0x3ea>
          break;
 8006f04:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	6a3b      	ldr	r3, [r7, #32]
 8006f0c:	4413      	add	r3, r2
 8006f0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006f16:	693b      	ldr	r3, [r7, #16]
 8006f18:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006f1c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	78db      	ldrb	r3, [r3, #3]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d004      	beq.n	8006f30 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006f2c:	613b      	str	r3, [r7, #16]
 8006f2e:	e003      	b.n	8006f38 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006f36:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006f3e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	6a3b      	ldr	r3, [r7, #32]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006f52:	79fb      	ldrb	r3, [r7, #7]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d003      	beq.n	8006f60 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	e055      	b.n	8007008 <USB_HC_StartXfer+0x4ec>
 8006f5c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	78db      	ldrb	r3, [r3, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d14e      	bne.n	8007006 <USB_HC_StartXfer+0x4ea>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	6a1b      	ldr	r3, [r3, #32]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d04a      	beq.n	8007006 <USB_HC_StartXfer+0x4ea>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	79db      	ldrb	r3, [r3, #7]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d146      	bne.n	8007006 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	7c9b      	ldrb	r3, [r3, #18]
 8006f7c:	2b03      	cmp	r3, #3
 8006f7e:	d831      	bhi.n	8006fe4 <USB_HC_StartXfer+0x4c8>
 8006f80:	a201      	add	r2, pc, #4	@ (adr r2, 8006f88 <USB_HC_StartXfer+0x46c>)
 8006f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f86:	bf00      	nop
 8006f88:	08006f99 	.word	0x08006f99
 8006f8c:	08006fbd 	.word	0x08006fbd
 8006f90:	08006f99 	.word	0x08006f99
 8006f94:	08006fbd 	.word	0x08006fbd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006f98:	68bb      	ldr	r3, [r7, #8]
 8006f9a:	6a1b      	ldr	r3, [r3, #32]
 8006f9c:	3303      	adds	r3, #3
 8006f9e:	089b      	lsrs	r3, r3, #2
 8006fa0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006fa2:	8afa      	ldrh	r2, [r7, #22]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa8:	b29b      	uxth	r3, r3
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d91c      	bls.n	8006fe8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	f043 0220 	orr.w	r2, r3, #32
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fba:	e015      	b.n	8006fe8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	6a1b      	ldr	r3, [r3, #32]
 8006fc0:	3303      	adds	r3, #3
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006fc6:	8afa      	ldrh	r2, [r7, #22]
 8006fc8:	6a3b      	ldr	r3, [r7, #32]
 8006fca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006fce:	691b      	ldr	r3, [r3, #16]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	429a      	cmp	r2, r3
 8006fd4:	d90a      	bls.n	8006fec <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	619a      	str	r2, [r3, #24]
        }
        break;
 8006fe2:	e003      	b.n	8006fec <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006fe4:	bf00      	nop
 8006fe6:	e002      	b.n	8006fee <USB_HC_StartXfer+0x4d2>
        break;
 8006fe8:	bf00      	nop
 8006fea:	e000      	b.n	8006fee <USB_HC_StartXfer+0x4d2>
        break;
 8006fec:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	6999      	ldr	r1, [r3, #24]
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	785a      	ldrb	r2, [r3, #1]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	b29b      	uxth	r3, r3
 8006ffc:	2000      	movs	r0, #0
 8006ffe:	9000      	str	r0, [sp, #0]
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f7ff f9c9 	bl	8006398 <USB_WritePacket>
  }

  return HAL_OK;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3728      	adds	r7, #40	@ 0x28
 800700c:	46bd      	mov	sp, r7
 800700e:	bd80      	pop	{r7, pc}

08007010 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007022:	695b      	ldr	r3, [r3, #20]
 8007024:	b29b      	uxth	r3, r3
}
 8007026:	4618      	mov	r0, r3
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr

08007032 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007032:	b480      	push	{r7}
 8007034:	b089      	sub	sp, #36	@ 0x24
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
 800703a:	460b      	mov	r3, r1
 800703c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007046:	2300      	movs	r3, #0
 8007048:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800704a:	69bb      	ldr	r3, [r7, #24]
 800704c:	015a      	lsls	r2, r3, #5
 800704e:	69fb      	ldr	r3, [r7, #28]
 8007050:	4413      	add	r3, r2
 8007052:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	0c9b      	lsrs	r3, r3, #18
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	0fdb      	lsrs	r3, r3, #31
 8007070:	f003 0301 	and.w	r3, r3, #1
 8007074:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007076:	69bb      	ldr	r3, [r7, #24]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	0fdb      	lsrs	r3, r3, #31
 8007086:	f003 0301 	and.w	r3, r3, #1
 800708a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b20      	cmp	r3, #32
 8007096:	d10d      	bne.n	80070b4 <USB_HC_Halt+0x82>
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d10a      	bne.n	80070b4 <USB_HC_Halt+0x82>
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d005      	beq.n	80070b0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d002      	beq.n	80070b0 <USB_HC_Halt+0x7e>
 80070aa:	697b      	ldr	r3, [r7, #20]
 80070ac:	2b03      	cmp	r3, #3
 80070ae:	d101      	bne.n	80070b4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80070b0:	2300      	movs	r3, #0
 80070b2:	e0d8      	b.n	8007266 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d002      	beq.n	80070c0 <USB_HC_Halt+0x8e>
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d173      	bne.n	80071a8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80070c0:	69bb      	ldr	r3, [r7, #24]
 80070c2:	015a      	lsls	r2, r3, #5
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	4413      	add	r3, r2
 80070c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	0151      	lsls	r1, r2, #5
 80070d2:	69fa      	ldr	r2, [r7, #28]
 80070d4:	440a      	add	r2, r1
 80070d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80070de:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0320 	and.w	r3, r3, #32
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d14a      	bne.n	8007182 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d133      	bne.n	8007160 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80070f8:	69bb      	ldr	r3, [r7, #24]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	69fa      	ldr	r2, [r7, #28]
 800710c:	440a      	add	r2, r1
 800710e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007112:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007116:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	69fb      	ldr	r3, [r7, #28]
 800711e:	4413      	add	r3, r2
 8007120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	0151      	lsls	r1, r2, #5
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	440a      	add	r2, r1
 800712e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007132:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007136:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3301      	adds	r3, #1
 800713c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800713e:	68bb      	ldr	r3, [r7, #8]
 8007140:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007144:	d82e      	bhi.n	80071a4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007146:	69bb      	ldr	r3, [r7, #24]
 8007148:	015a      	lsls	r2, r3, #5
 800714a:	69fb      	ldr	r3, [r7, #28]
 800714c:	4413      	add	r3, r2
 800714e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007158:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800715c:	d0ec      	beq.n	8007138 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800715e:	e081      	b.n	8007264 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	015a      	lsls	r2, r3, #5
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	4413      	add	r3, r2
 8007168:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	69ba      	ldr	r2, [r7, #24]
 8007170:	0151      	lsls	r1, r2, #5
 8007172:	69fa      	ldr	r2, [r7, #28]
 8007174:	440a      	add	r2, r1
 8007176:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800717a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800717e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007180:	e070      	b.n	8007264 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	440a      	add	r2, r1
 8007198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800719c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80071a0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071a2:	e05f      	b.n	8007264 <USB_HC_Halt+0x232>
            break;
 80071a4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80071a6:	e05d      	b.n	8007264 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80071a8:	69bb      	ldr	r3, [r7, #24]
 80071aa:	015a      	lsls	r2, r3, #5
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	4413      	add	r3, r2
 80071b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69ba      	ldr	r2, [r7, #24]
 80071b8:	0151      	lsls	r1, r2, #5
 80071ba:	69fa      	ldr	r2, [r7, #28]
 80071bc:	440a      	add	r2, r1
 80071be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071c6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071ce:	691b      	ldr	r3, [r3, #16]
 80071d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d133      	bne.n	8007240 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80071f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071f6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69ba      	ldr	r2, [r7, #24]
 8007208:	0151      	lsls	r1, r2, #5
 800720a:	69fa      	ldr	r2, [r7, #28]
 800720c:	440a      	add	r2, r1
 800720e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007212:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007216:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	3301      	adds	r3, #1
 800721c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007224:	d81d      	bhi.n	8007262 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007238:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800723c:	d0ec      	beq.n	8007218 <USB_HC_Halt+0x1e6>
 800723e:	e011      	b.n	8007264 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007240:	69bb      	ldr	r3, [r7, #24]
 8007242:	015a      	lsls	r2, r3, #5
 8007244:	69fb      	ldr	r3, [r7, #28]
 8007246:	4413      	add	r3, r2
 8007248:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	69ba      	ldr	r2, [r7, #24]
 8007250:	0151      	lsls	r1, r2, #5
 8007252:	69fa      	ldr	r2, [r7, #28]
 8007254:	440a      	add	r2, r1
 8007256:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800725a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	e000      	b.n	8007264 <USB_HC_Halt+0x232>
          break;
 8007262:	bf00      	nop
    }
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	3724      	adds	r7, #36	@ 0x24
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
	...

08007274 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	460b      	mov	r3, r1
 800727e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007284:	78fb      	ldrb	r3, [r7, #3]
 8007286:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007288:	2301      	movs	r3, #1
 800728a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	04da      	lsls	r2, r3, #19
 8007290:	4b15      	ldr	r3, [pc, #84]	@ (80072e8 <USB_DoPing+0x74>)
 8007292:	4013      	ands	r3, r2
 8007294:	693a      	ldr	r2, [r7, #16]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	697a      	ldr	r2, [r7, #20]
 800729a:	440a      	add	r2, r1
 800729c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80072a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072a4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	015a      	lsls	r2, r3, #5
 80072aa:	697b      	ldr	r3, [r7, #20]
 80072ac:	4413      	add	r3, r2
 80072ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80072bc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80072be:	68bb      	ldr	r3, [r7, #8]
 80072c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80072c4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	015a      	lsls	r2, r3, #5
 80072ca:	697b      	ldr	r3, [r7, #20]
 80072cc:	4413      	add	r3, r2
 80072ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072d2:	461a      	mov	r2, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	371c      	adds	r7, #28
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	1ff80000 	.word	0x1ff80000

080072ec <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b088      	sub	sp, #32
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80072f4:	2300      	movs	r3, #0
 80072f6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80072fc:	2300      	movs	r3, #0
 80072fe:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fe ff8c 	bl	800621e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007306:	2110      	movs	r1, #16
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f7fe ffe5 	bl	80062d8 <USB_FlushTxFifo>
 800730e:	4603      	mov	r3, r0
 8007310:	2b00      	cmp	r3, #0
 8007312:	d001      	beq.n	8007318 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f7ff f80f 	bl	800633c <USB_FlushRxFifo>
 800731e:	4603      	mov	r3, r0
 8007320:	2b00      	cmp	r3, #0
 8007322:	d001      	beq.n	8007328 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007324:	2301      	movs	r3, #1
 8007326:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007328:	2300      	movs	r3, #0
 800732a:	61bb      	str	r3, [r7, #24]
 800732c:	e01f      	b.n	800736e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	697b      	ldr	r3, [r7, #20]
 8007334:	4413      	add	r3, r2
 8007336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800733e:	693b      	ldr	r3, [r7, #16]
 8007340:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007344:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007346:	693b      	ldr	r3, [r7, #16]
 8007348:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800734c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007354:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007356:	69bb      	ldr	r3, [r7, #24]
 8007358:	015a      	lsls	r2, r3, #5
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	4413      	add	r3, r2
 800735e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007362:	461a      	mov	r2, r3
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	3301      	adds	r3, #1
 800736c:	61bb      	str	r3, [r7, #24]
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	2b0f      	cmp	r3, #15
 8007372:	d9dc      	bls.n	800732e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007374:	2300      	movs	r3, #0
 8007376:	61bb      	str	r3, [r7, #24]
 8007378:	e034      	b.n	80073e4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	4413      	add	r3, r2
 8007382:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007390:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007398:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80073a0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80073a2:	69bb      	ldr	r3, [r7, #24]
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ae:	461a      	mov	r2, r3
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	3301      	adds	r3, #1
 80073b8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80073c0:	d80c      	bhi.n	80073dc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	015a      	lsls	r2, r3, #5
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	4413      	add	r3, r2
 80073ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80073d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80073d8:	d0ec      	beq.n	80073b4 <USB_StopHost+0xc8>
 80073da:	e000      	b.n	80073de <USB_StopHost+0xf2>
        break;
 80073dc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	3301      	adds	r3, #1
 80073e2:	61bb      	str	r3, [r7, #24]
 80073e4:	69bb      	ldr	r3, [r7, #24]
 80073e6:	2b0f      	cmp	r3, #15
 80073e8:	d9c7      	bls.n	800737a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073f0:	461a      	mov	r2, r3
 80073f2:	f04f 33ff 	mov.w	r3, #4294967295
 80073f6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f04f 32ff 	mov.w	r2, #4294967295
 80073fe:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007400:	6878      	ldr	r0, [r7, #4]
 8007402:	f7fe fefb 	bl	80061fc <USB_EnableGlobalInt>

  return ret;
 8007406:	7ffb      	ldrb	r3, [r7, #31]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3720      	adds	r7, #32
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}

08007410 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007410:	b590      	push	{r4, r7, lr}
 8007412:	b089      	sub	sp, #36	@ 0x24
 8007414:	af04      	add	r7, sp, #16
 8007416:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007418:	2301      	movs	r3, #1
 800741a:	2202      	movs	r2, #2
 800741c:	2102      	movs	r1, #2
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fc85 	bl	8007d2e <USBH_FindInterface>
 8007424:	4603      	mov	r3, r0
 8007426:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007428:	7bfb      	ldrb	r3, [r7, #15]
 800742a:	2bff      	cmp	r3, #255	@ 0xff
 800742c:	d002      	beq.n	8007434 <USBH_CDC_InterfaceInit+0x24>
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	2b01      	cmp	r3, #1
 8007432:	d901      	bls.n	8007438 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007434:	2302      	movs	r3, #2
 8007436:	e13d      	b.n	80076b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	4619      	mov	r1, r3
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fc5a 	bl	8007cf6 <USBH_SelectInterface>
 8007442:	4603      	mov	r3, r0
 8007444:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007446:	7bbb      	ldrb	r3, [r7, #14]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d001      	beq.n	8007450 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800744c:	2302      	movs	r3, #2
 800744e:	e131      	b.n	80076b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007456:	2050      	movs	r0, #80	@ 0x50
 8007458:	f002 fb64 	bl	8009b24 <malloc>
 800745c:	4603      	mov	r3, r0
 800745e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007466:	69db      	ldr	r3, [r3, #28]
 8007468:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d101      	bne.n	8007474 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007470:	2302      	movs	r3, #2
 8007472:	e11f      	b.n	80076b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007474:	2250      	movs	r2, #80	@ 0x50
 8007476:	2100      	movs	r1, #0
 8007478:	68b8      	ldr	r0, [r7, #8]
 800747a:	f002 fe71 	bl	800a160 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800747e:	7bfb      	ldrb	r3, [r7, #15]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	211a      	movs	r1, #26
 8007484:	fb01 f303 	mul.w	r3, r1, r3
 8007488:	4413      	add	r3, r2
 800748a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800748e:	781b      	ldrb	r3, [r3, #0]
 8007490:	b25b      	sxtb	r3, r3
 8007492:	2b00      	cmp	r3, #0
 8007494:	da15      	bge.n	80074c2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007496:	7bfb      	ldrb	r3, [r7, #15]
 8007498:	687a      	ldr	r2, [r7, #4]
 800749a:	211a      	movs	r1, #26
 800749c:	fb01 f303 	mul.w	r3, r1, r3
 80074a0:	4413      	add	r3, r2
 80074a2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80074a6:	781a      	ldrb	r2, [r3, #0]
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80074ac:	7bfb      	ldrb	r3, [r7, #15]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	211a      	movs	r1, #26
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80074bc:	881a      	ldrh	r2, [r3, #0]
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	785b      	ldrb	r3, [r3, #1]
 80074c6:	4619      	mov	r1, r3
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f001 ffbe 	bl	800944a <USBH_AllocPipe>
 80074ce:	4603      	mov	r3, r0
 80074d0:	461a      	mov	r2, r3
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	7819      	ldrb	r1, [r3, #0]
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	7858      	ldrb	r0, [r3, #1]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	8952      	ldrh	r2, [r2, #10]
 80074ee:	9202      	str	r2, [sp, #8]
 80074f0:	2203      	movs	r2, #3
 80074f2:	9201      	str	r2, [sp, #4]
 80074f4:	9300      	str	r3, [sp, #0]
 80074f6:	4623      	mov	r3, r4
 80074f8:	4602      	mov	r2, r0
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f001 ff76 	bl	80093ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	781b      	ldrb	r3, [r3, #0]
 8007504:	2200      	movs	r2, #0
 8007506:	4619      	mov	r1, r3
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f002 fa85 	bl	8009a18 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800750e:	2300      	movs	r3, #0
 8007510:	2200      	movs	r2, #0
 8007512:	210a      	movs	r1, #10
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f000 fc0a 	bl	8007d2e <USBH_FindInterface>
 800751a:	4603      	mov	r3, r0
 800751c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800751e:	7bfb      	ldrb	r3, [r7, #15]
 8007520:	2bff      	cmp	r3, #255	@ 0xff
 8007522:	d002      	beq.n	800752a <USBH_CDC_InterfaceInit+0x11a>
 8007524:	7bfb      	ldrb	r3, [r7, #15]
 8007526:	2b01      	cmp	r3, #1
 8007528:	d901      	bls.n	800752e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	e0c2      	b.n	80076b4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800752e:	7bfb      	ldrb	r3, [r7, #15]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	211a      	movs	r1, #26
 8007534:	fb01 f303 	mul.w	r3, r1, r3
 8007538:	4413      	add	r3, r2
 800753a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800753e:	781b      	ldrb	r3, [r3, #0]
 8007540:	b25b      	sxtb	r3, r3
 8007542:	2b00      	cmp	r3, #0
 8007544:	da16      	bge.n	8007574 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007546:	7bfb      	ldrb	r3, [r7, #15]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	211a      	movs	r1, #26
 800754c:	fb01 f303 	mul.w	r3, r1, r3
 8007550:	4413      	add	r3, r2
 8007552:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007556:	781a      	ldrb	r2, [r3, #0]
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
 800755e:	687a      	ldr	r2, [r7, #4]
 8007560:	211a      	movs	r1, #26
 8007562:	fb01 f303 	mul.w	r3, r1, r3
 8007566:	4413      	add	r3, r2
 8007568:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800756c:	881a      	ldrh	r2, [r3, #0]
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	835a      	strh	r2, [r3, #26]
 8007572:	e015      	b.n	80075a0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	211a      	movs	r1, #26
 800757a:	fb01 f303 	mul.w	r3, r1, r3
 800757e:	4413      	add	r3, r2
 8007580:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	211a      	movs	r1, #26
 8007590:	fb01 f303 	mul.w	r3, r1, r3
 8007594:	4413      	add	r3, r2
 8007596:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800759a:	881a      	ldrh	r2, [r3, #0]
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	687a      	ldr	r2, [r7, #4]
 80075a4:	211a      	movs	r1, #26
 80075a6:	fb01 f303 	mul.w	r3, r1, r3
 80075aa:	4413      	add	r3, r2
 80075ac:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80075b0:	781b      	ldrb	r3, [r3, #0]
 80075b2:	b25b      	sxtb	r3, r3
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	da16      	bge.n	80075e6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075b8:	7bfb      	ldrb	r3, [r7, #15]
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	211a      	movs	r1, #26
 80075be:	fb01 f303 	mul.w	r3, r1, r3
 80075c2:	4413      	add	r3, r2
 80075c4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80075c8:	781a      	ldrb	r2, [r3, #0]
 80075ca:	68bb      	ldr	r3, [r7, #8]
 80075cc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075ce:	7bfb      	ldrb	r3, [r7, #15]
 80075d0:	687a      	ldr	r2, [r7, #4]
 80075d2:	211a      	movs	r1, #26
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	4413      	add	r3, r2
 80075da:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80075de:	881a      	ldrh	r2, [r3, #0]
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	835a      	strh	r2, [r3, #26]
 80075e4:	e015      	b.n	8007612 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	211a      	movs	r1, #26
 80075ec:	fb01 f303 	mul.w	r3, r1, r3
 80075f0:	4413      	add	r3, r2
 80075f2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	687a      	ldr	r2, [r7, #4]
 8007600:	211a      	movs	r1, #26
 8007602:	fb01 f303 	mul.w	r3, r1, r3
 8007606:	4413      	add	r3, r2
 8007608:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800760c:	881a      	ldrh	r2, [r3, #0]
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	7b9b      	ldrb	r3, [r3, #14]
 8007616:	4619      	mov	r1, r3
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f001 ff16 	bl	800944a <USBH_AllocPipe>
 800761e:	4603      	mov	r3, r0
 8007620:	461a      	mov	r2, r3
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	7bdb      	ldrb	r3, [r3, #15]
 800762a:	4619      	mov	r1, r3
 800762c:	6878      	ldr	r0, [r7, #4]
 800762e:	f001 ff0c 	bl	800944a <USBH_AllocPipe>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	7b59      	ldrb	r1, [r3, #13]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	7b98      	ldrb	r0, [r3, #14]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800764e:	68ba      	ldr	r2, [r7, #8]
 8007650:	8b12      	ldrh	r2, [r2, #24]
 8007652:	9202      	str	r2, [sp, #8]
 8007654:	2202      	movs	r2, #2
 8007656:	9201      	str	r2, [sp, #4]
 8007658:	9300      	str	r3, [sp, #0]
 800765a:	4623      	mov	r3, r4
 800765c:	4602      	mov	r2, r0
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f001 fec4 	bl	80093ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	7b19      	ldrb	r1, [r3, #12]
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	7bd8      	ldrb	r0, [r3, #15]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	8b52      	ldrh	r2, [r2, #26]
 800767c:	9202      	str	r2, [sp, #8]
 800767e:	2202      	movs	r2, #2
 8007680:	9201      	str	r2, [sp, #4]
 8007682:	9300      	str	r3, [sp, #0]
 8007684:	4623      	mov	r3, r4
 8007686:	4602      	mov	r2, r0
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 feaf 	bl	80093ec <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	7b5b      	ldrb	r3, [r3, #13]
 800769a:	2200      	movs	r2, #0
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f002 f9ba 	bl	8009a18 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	7b1b      	ldrb	r3, [r3, #12]
 80076a8:	2200      	movs	r2, #0
 80076aa:	4619      	mov	r1, r3
 80076ac:	6878      	ldr	r0, [r7, #4]
 80076ae:	f002 f9b3 	bl	8009a18 <USBH_LL_SetToggle>

  return USBH_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd90      	pop	{r4, r7, pc}

080076bc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00e      	beq.n	80076f4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	4619      	mov	r1, r3
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f001 fea4 	bl	800942a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f001 fecf 	bl	800948c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2200      	movs	r2, #0
 80076f2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	7b1b      	ldrb	r3, [r3, #12]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d00e      	beq.n	800771a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	7b1b      	ldrb	r3, [r3, #12]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f001 fe91 	bl	800942a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	7b1b      	ldrb	r3, [r3, #12]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 febc 	bl	800948c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	2200      	movs	r2, #0
 8007718:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	7b5b      	ldrb	r3, [r3, #13]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d00e      	beq.n	8007740 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	7b5b      	ldrb	r3, [r3, #13]
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f001 fe7e 	bl	800942a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	7b5b      	ldrb	r3, [r3, #13]
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f001 fea9 	bl	800948c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007746:	69db      	ldr	r3, [r3, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007752:	69db      	ldr	r3, [r3, #28]
 8007754:	4618      	mov	r0, r3
 8007756:	f002 f9ed 	bl	8009b34 <free>
    phost->pActiveClass->pData = 0U;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007760:	2200      	movs	r2, #0
 8007762:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3710      	adds	r7, #16
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800777c:	69db      	ldr	r3, [r3, #28]
 800777e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	3340      	adds	r3, #64	@ 0x40
 8007784:	4619      	mov	r1, r3
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f8b1 	bl	80078ee <GetLineCoding>
 800778c:	4603      	mov	r3, r0
 800778e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007790:	7afb      	ldrb	r3, [r7, #11]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d105      	bne.n	80077a2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800779c:	2102      	movs	r1, #2
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80077a2:	7afb      	ldrb	r3, [r7, #11]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3710      	adds	r7, #16
 80077a8:	46bd      	mov	sp, r7
 80077aa:	bd80      	pop	{r7, pc}

080077ac <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80077b4:	2301      	movs	r3, #1
 80077b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80077b8:	2300      	movs	r3, #0
 80077ba:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077c2:	69db      	ldr	r3, [r3, #28]
 80077c4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d877      	bhi.n	80078c0 <USBH_CDC_Process+0x114>
 80077d0:	a201      	add	r2, pc, #4	@ (adr r2, 80077d8 <USBH_CDC_Process+0x2c>)
 80077d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077d6:	bf00      	nop
 80077d8:	080077ed 	.word	0x080077ed
 80077dc:	080077f3 	.word	0x080077f3
 80077e0:	08007823 	.word	0x08007823
 80077e4:	08007897 	.word	0x08007897
 80077e8:	080078a5 	.word	0x080078a5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	73fb      	strb	r3, [r7, #15]
      break;
 80077f0:	e06d      	b.n	80078ce <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f6:	4619      	mov	r1, r3
 80077f8:	6878      	ldr	r0, [r7, #4]
 80077fa:	f000 f897 	bl	800792c <SetLineCoding>
 80077fe:	4603      	mov	r3, r0
 8007800:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007802:	7bbb      	ldrb	r3, [r7, #14]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d104      	bne.n	8007812 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	2202      	movs	r2, #2
 800780c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007810:	e058      	b.n	80078c4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007812:	7bbb      	ldrb	r3, [r7, #14]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d055      	beq.n	80078c4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	2204      	movs	r2, #4
 800781c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007820:	e050      	b.n	80078c4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	3340      	adds	r3, #64	@ 0x40
 8007826:	4619      	mov	r1, r3
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f860 	bl	80078ee <GetLineCoding>
 800782e:	4603      	mov	r3, r0
 8007830:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007832:	7bbb      	ldrb	r3, [r7, #14]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d126      	bne.n	8007886 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	2200      	movs	r2, #0
 800783c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800784a:	791b      	ldrb	r3, [r3, #4]
 800784c:	429a      	cmp	r2, r3
 800784e:	d13b      	bne.n	80078c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800785a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800785c:	429a      	cmp	r2, r3
 800785e:	d133      	bne.n	80078c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800786a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800786c:	429a      	cmp	r2, r3
 800786e:	d12b      	bne.n	80078c8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007874:	68bb      	ldr	r3, [r7, #8]
 8007876:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007878:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800787a:	429a      	cmp	r2, r3
 800787c:	d124      	bne.n	80078c8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 f958 	bl	8007b34 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007884:	e020      	b.n	80078c8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007886:	7bbb      	ldrb	r3, [r7, #14]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d01d      	beq.n	80078c8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2204      	movs	r2, #4
 8007890:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007894:	e018      	b.n	80078c8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f867 	bl	800796a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f8da 	bl	8007a56 <CDC_ProcessReception>
      break;
 80078a2:	e014      	b.n	80078ce <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80078a4:	2100      	movs	r1, #0
 80078a6:	6878      	ldr	r0, [r7, #4]
 80078a8:	f001 f81a 	bl	80088e0 <USBH_ClrFeature>
 80078ac:	4603      	mov	r3, r0
 80078ae:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078b0:	7bbb      	ldrb	r3, [r7, #14]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d10a      	bne.n	80078cc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80078be:	e005      	b.n	80078cc <USBH_CDC_Process+0x120>

    default:
      break;
 80078c0:	bf00      	nop
 80078c2:	e004      	b.n	80078ce <USBH_CDC_Process+0x122>
      break;
 80078c4:	bf00      	nop
 80078c6:	e002      	b.n	80078ce <USBH_CDC_Process+0x122>
      break;
 80078c8:	bf00      	nop
 80078ca:	e000      	b.n	80078ce <USBH_CDC_Process+0x122>
      break;
 80078cc:	bf00      	nop

  }

  return status;
 80078ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80078d8:	b480      	push	{r7}
 80078da:	b083      	sub	sp, #12
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	370c      	adds	r7, #12
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr

080078ee <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b082      	sub	sp, #8
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	6078      	str	r0, [r7, #4]
 80078f6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	22a1      	movs	r2, #161	@ 0xa1
 80078fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2221      	movs	r2, #33	@ 0x21
 8007902:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2207      	movs	r2, #7
 8007914:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2207      	movs	r2, #7
 800791a:	4619      	mov	r1, r3
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f001 fb14 	bl	8008f4a <USBH_CtlReq>
 8007922:	4603      	mov	r3, r0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2221      	movs	r2, #33	@ 0x21
 800793a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2220      	movs	r2, #32
 8007940:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2207      	movs	r2, #7
 8007952:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007954:	683b      	ldr	r3, [r7, #0]
 8007956:	2207      	movs	r2, #7
 8007958:	4619      	mov	r1, r3
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f001 faf5 	bl	8008f4a <USBH_CtlReq>
 8007960:	4603      	mov	r3, r0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3708      	adds	r7, #8
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b086      	sub	sp, #24
 800796e:	af02      	add	r7, sp, #8
 8007970:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007978:	69db      	ldr	r3, [r3, #28]
 800797a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800797c:	2300      	movs	r3, #0
 800797e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007986:	2b01      	cmp	r3, #1
 8007988:	d002      	beq.n	8007990 <CDC_ProcessTransmission+0x26>
 800798a:	2b02      	cmp	r3, #2
 800798c:	d023      	beq.n	80079d6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800798e:	e05e      	b.n	8007a4e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007994:	68fa      	ldr	r2, [r7, #12]
 8007996:	8b12      	ldrh	r2, [r2, #24]
 8007998:	4293      	cmp	r3, r2
 800799a:	d90b      	bls.n	80079b4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	69d9      	ldr	r1, [r3, #28]
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	8b1a      	ldrh	r2, [r3, #24]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	7b5b      	ldrb	r3, [r3, #13]
 80079a8:	2001      	movs	r0, #1
 80079aa:	9000      	str	r0, [sp, #0]
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f001 fcda 	bl	8009366 <USBH_BulkSendData>
 80079b2:	e00b      	b.n	80079cc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80079bc:	b29a      	uxth	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	7b5b      	ldrb	r3, [r3, #13]
 80079c2:	2001      	movs	r0, #1
 80079c4:	9000      	str	r0, [sp, #0]
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 fccd 	bl	8009366 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2202      	movs	r2, #2
 80079d0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80079d4:	e03b      	b.n	8007a4e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	7b5b      	ldrb	r3, [r3, #13]
 80079da:	4619      	mov	r1, r3
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 fff1 	bl	80099c4 <USBH_LL_GetURBState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80079e6:	7afb      	ldrb	r3, [r7, #11]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d128      	bne.n	8007a3e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079f0:	68fa      	ldr	r2, [r7, #12]
 80079f2:	8b12      	ldrh	r2, [r2, #24]
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d90e      	bls.n	8007a16 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	8b12      	ldrh	r2, [r2, #24]
 8007a00:	1a9a      	subs	r2, r3, r2
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	69db      	ldr	r3, [r3, #28]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	8b12      	ldrh	r2, [r2, #24]
 8007a0e:	441a      	add	r2, r3
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	61da      	str	r2, [r3, #28]
 8007a14:	e002      	b.n	8007a1c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d004      	beq.n	8007a2e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a2c:	e00e      	b.n	8007a4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f868 	bl	8007b0c <USBH_CDC_TransmitCallback>
      break;
 8007a3c:	e006      	b.n	8007a4c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007a3e:	7afb      	ldrb	r3, [r7, #11]
 8007a40:	2b02      	cmp	r3, #2
 8007a42:	d103      	bne.n	8007a4c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007a4c:	bf00      	nop
  }
}
 8007a4e:	bf00      	nop
 8007a50:	3710      	adds	r7, #16
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}

08007a56 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b086      	sub	sp, #24
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007a6c:	697b      	ldr	r3, [r7, #20]
 8007a6e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d002      	beq.n	8007a7c <CDC_ProcessReception+0x26>
 8007a76:	2b04      	cmp	r3, #4
 8007a78:	d00e      	beq.n	8007a98 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007a7a:	e043      	b.n	8007b04 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007a7c:	697b      	ldr	r3, [r7, #20]
 8007a7e:	6a19      	ldr	r1, [r3, #32]
 8007a80:	697b      	ldr	r3, [r7, #20]
 8007a82:	8b5a      	ldrh	r2, [r3, #26]
 8007a84:	697b      	ldr	r3, [r7, #20]
 8007a86:	7b1b      	ldrb	r3, [r3, #12]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f001 fc91 	bl	80093b0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2204      	movs	r2, #4
 8007a92:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007a96:	e035      	b.n	8007b04 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	7b1b      	ldrb	r3, [r3, #12]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 ff90 	bl	80099c4 <USBH_LL_GetURBState>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007aa8:	7cfb      	ldrb	r3, [r7, #19]
 8007aaa:	2b01      	cmp	r3, #1
 8007aac:	d129      	bne.n	8007b02 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	7b1b      	ldrb	r3, [r3, #12]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f001 fef3 	bl	80098a0 <USBH_LL_GetLastXferSize>
 8007aba:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ac0:	68fa      	ldr	r2, [r7, #12]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d016      	beq.n	8007af4 <CDC_ProcessReception+0x9e>
 8007ac6:	697b      	ldr	r3, [r7, #20]
 8007ac8:	8b5b      	ldrh	r3, [r3, #26]
 8007aca:	461a      	mov	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d110      	bne.n	8007af4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007ad2:	697b      	ldr	r3, [r7, #20]
 8007ad4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	1ad2      	subs	r2, r2, r3
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	6a1a      	ldr	r2, [r3, #32]
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	697b      	ldr	r3, [r7, #20]
 8007ae8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007aea:	697b      	ldr	r3, [r7, #20]
 8007aec:	2203      	movs	r2, #3
 8007aee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007af2:	e006      	b.n	8007b02 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007af4:	697b      	ldr	r3, [r7, #20]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f80f 	bl	8007b20 <USBH_CDC_ReceiveCallback>
      break;
 8007b02:	bf00      	nop
  }
}
 8007b04:	bf00      	nop
 8007b06:	3718      	adds	r7, #24
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007b20:	b480      	push	{r7}
 8007b22:	b083      	sub	sp, #12
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b28:	bf00      	nop
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007b3c:	bf00      	nop
 8007b3e:	370c      	adds	r7, #12
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	60f8      	str	r0, [r7, #12]
 8007b50:	60b9      	str	r1, [r7, #8]
 8007b52:	4613      	mov	r3, r2
 8007b54:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d101      	bne.n	8007b60 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007b5c:	2302      	movs	r3, #2
 8007b5e:	e029      	b.n	8007bb4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	79fa      	ldrb	r2, [r7, #7]
 8007b64:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2200      	movs	r2, #0
 8007b74:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007b78:	68f8      	ldr	r0, [r7, #12]
 8007b7a:	f000 f81f 	bl	8007bbc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d003      	beq.n	8007bac <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007bac:	68f8      	ldr	r0, [r7, #12]
 8007bae:	f001 fdc3 	bl	8009738 <USBH_LL_Init>

  return USBH_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3710      	adds	r7, #16
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b084      	sub	sp, #16
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	e009      	b.n	8007be2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007bce:	687a      	ldr	r2, [r7, #4]
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	33e0      	adds	r3, #224	@ 0xe0
 8007bd4:	009b      	lsls	r3, r3, #2
 8007bd6:	4413      	add	r3, r2
 8007bd8:	2200      	movs	r2, #0
 8007bda:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	3301      	adds	r3, #1
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	2b0f      	cmp	r3, #15
 8007be6:	d9f2      	bls.n	8007bce <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007be8:	2300      	movs	r3, #0
 8007bea:	60fb      	str	r3, [r7, #12]
 8007bec:	e009      	b.n	8007c02 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	4413      	add	r3, r2
 8007bf4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	3301      	adds	r3, #1
 8007c00:	60fb      	str	r3, [r7, #12]
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c08:	d3f1      	bcc.n	8007bee <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2200      	movs	r2, #0
 8007c14:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2200      	movs	r2, #0
 8007c20:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2240      	movs	r2, #64	@ 0x40
 8007c2e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	331c      	adds	r3, #28
 8007c5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007c5e:	2100      	movs	r1, #0
 8007c60:	4618      	mov	r0, r3
 8007c62:	f002 fa7d 	bl	800a160 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c70:	2100      	movs	r1, #0
 8007c72:	4618      	mov	r0, r3
 8007c74:	f002 fa74 	bl	800a160 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007c7e:	2212      	movs	r2, #18
 8007c80:	2100      	movs	r1, #0
 8007c82:	4618      	mov	r0, r3
 8007c84:	f002 fa6c 	bl	800a160 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007c8e:	223e      	movs	r2, #62	@ 0x3e
 8007c90:	2100      	movs	r1, #0
 8007c92:	4618      	mov	r0, r3
 8007c94:	f002 fa64 	bl	800a160 <memset>

  return USBH_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007ca2:	b480      	push	{r7}
 8007ca4:	b085      	sub	sp, #20
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d016      	beq.n	8007ce4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d10e      	bne.n	8007cde <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007cc6:	1c59      	adds	r1, r3, #1
 8007cc8:	687a      	ldr	r2, [r7, #4]
 8007cca:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	33de      	adds	r3, #222	@ 0xde
 8007cd2:	6839      	ldr	r1, [r7, #0]
 8007cd4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	73fb      	strb	r3, [r7, #15]
 8007cdc:	e004      	b.n	8007ce8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007cde:	2302      	movs	r3, #2
 8007ce0:	73fb      	strb	r3, [r7, #15]
 8007ce2:	e001      	b.n	8007ce8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007ce4:	2302      	movs	r3, #2
 8007ce6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3714      	adds	r7, #20
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr

08007cf6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007cf6:	b480      	push	{r7}
 8007cf8:	b085      	sub	sp, #20
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007d0c:	78fa      	ldrb	r2, [r7, #3]
 8007d0e:	429a      	cmp	r2, r3
 8007d10:	d204      	bcs.n	8007d1c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	78fa      	ldrb	r2, [r7, #3]
 8007d16:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007d1a:	e001      	b.n	8007d20 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007d1c:	2302      	movs	r3, #2
 8007d1e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	3714      	adds	r7, #20
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007d2e:	b480      	push	{r7}
 8007d30:	b087      	sub	sp, #28
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	6078      	str	r0, [r7, #4]
 8007d36:	4608      	mov	r0, r1
 8007d38:	4611      	mov	r1, r2
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	70fb      	strb	r3, [r7, #3]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70bb      	strb	r3, [r7, #2]
 8007d44:	4613      	mov	r3, r2
 8007d46:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007d56:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007d58:	e025      	b.n	8007da6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007d5a:	7dfb      	ldrb	r3, [r7, #23]
 8007d5c:	221a      	movs	r2, #26
 8007d5e:	fb02 f303 	mul.w	r3, r2, r3
 8007d62:	3308      	adds	r3, #8
 8007d64:	68fa      	ldr	r2, [r7, #12]
 8007d66:	4413      	add	r3, r2
 8007d68:	3302      	adds	r3, #2
 8007d6a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	795b      	ldrb	r3, [r3, #5]
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d002      	beq.n	8007d7c <USBH_FindInterface+0x4e>
 8007d76:	78fb      	ldrb	r3, [r7, #3]
 8007d78:	2bff      	cmp	r3, #255	@ 0xff
 8007d7a:	d111      	bne.n	8007da0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007d80:	78ba      	ldrb	r2, [r7, #2]
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d002      	beq.n	8007d8c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d86:	78bb      	ldrb	r3, [r7, #2]
 8007d88:	2bff      	cmp	r3, #255	@ 0xff
 8007d8a:	d109      	bne.n	8007da0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007d90:	787a      	ldrb	r2, [r7, #1]
 8007d92:	429a      	cmp	r2, r3
 8007d94:	d002      	beq.n	8007d9c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007d96:	787b      	ldrb	r3, [r7, #1]
 8007d98:	2bff      	cmp	r3, #255	@ 0xff
 8007d9a:	d101      	bne.n	8007da0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	e006      	b.n	8007dae <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	3301      	adds	r3, #1
 8007da4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d9d6      	bls.n	8007d5a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007dac:	23ff      	movs	r3, #255	@ 0xff
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	371c      	adds	r7, #28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db8:	4770      	bx	lr

08007dba <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f001 fcf4 	bl	80097b0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007dc8:	2101      	movs	r1, #1
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f001 fe0d 	bl	80099ea <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007dd0:	2300      	movs	r3, #0
}
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	3708      	adds	r7, #8
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}
	...

08007ddc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007de4:	2302      	movs	r3, #2
 8007de6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007de8:	2300      	movs	r3, #0
 8007dea:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d102      	bne.n	8007dfe <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2203      	movs	r2, #3
 8007dfc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	b2db      	uxtb	r3, r3
 8007e04:	2b0b      	cmp	r3, #11
 8007e06:	f200 81bb 	bhi.w	8008180 <USBH_Process+0x3a4>
 8007e0a:	a201      	add	r2, pc, #4	@ (adr r2, 8007e10 <USBH_Process+0x34>)
 8007e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e10:	08007e41 	.word	0x08007e41
 8007e14:	08007e73 	.word	0x08007e73
 8007e18:	08007edb 	.word	0x08007edb
 8007e1c:	0800811b 	.word	0x0800811b
 8007e20:	08008181 	.word	0x08008181
 8007e24:	08007f7b 	.word	0x08007f7b
 8007e28:	080080c1 	.word	0x080080c1
 8007e2c:	08007fb1 	.word	0x08007fb1
 8007e30:	08007fd1 	.word	0x08007fd1
 8007e34:	08007fef 	.word	0x08007fef
 8007e38:	08008033 	.word	0x08008033
 8007e3c:	08008103 	.word	0x08008103
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	f000 819b 	beq.w	8008184 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007e54:	20c8      	movs	r0, #200	@ 0xc8
 8007e56:	f001 fe12 	bl	8009a7e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007e5a:	6878      	ldr	r0, [r7, #4]
 8007e5c:	f001 fd05 	bl	800986a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2200      	movs	r2, #0
 8007e64:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2200      	movs	r2, #0
 8007e6c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e70:	e188      	b.n	8008184 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d107      	bne.n	8007e8c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2202      	movs	r2, #2
 8007e88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e8a:	e18a      	b.n	80081a2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007e92:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e96:	d914      	bls.n	8007ec2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	b2da      	uxtb	r2, r3
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d903      	bls.n	8007eba <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	220d      	movs	r2, #13
 8007eb6:	701a      	strb	r2, [r3, #0]
      break;
 8007eb8:	e173      	b.n	80081a2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	701a      	strb	r2, [r3, #0]
      break;
 8007ec0:	e16f      	b.n	80081a2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007ec8:	f103 020a 	add.w	r2, r3, #10
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007ed2:	200a      	movs	r0, #10
 8007ed4:	f001 fdd3 	bl	8009a7e <USBH_Delay>
      break;
 8007ed8:	e163      	b.n	80081a2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d005      	beq.n	8007ef0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007eea:	2104      	movs	r1, #4
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007ef0:	2064      	movs	r0, #100	@ 0x64
 8007ef2:	f001 fdc4 	bl	8009a7e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	f001 fc90 	bl	800981c <USBH_LL_GetSpeed>
 8007efc:	4603      	mov	r3, r0
 8007efe:	461a      	mov	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2205      	movs	r2, #5
 8007f0a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fa9b 	bl	800944a <USBH_AllocPipe>
 8007f14:	4603      	mov	r3, r0
 8007f16:	461a      	mov	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007f1c:	2180      	movs	r1, #128	@ 0x80
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f001 fa93 	bl	800944a <USBH_AllocPipe>
 8007f24:	4603      	mov	r3, r0
 8007f26:	461a      	mov	r2, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	7919      	ldrb	r1, [r3, #4]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f3c:	687a      	ldr	r2, [r7, #4]
 8007f3e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007f40:	9202      	str	r2, [sp, #8]
 8007f42:	2200      	movs	r2, #0
 8007f44:	9201      	str	r2, [sp, #4]
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2280      	movs	r2, #128	@ 0x80
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f001 fa4d 	bl	80093ec <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	7959      	ldrb	r1, [r3, #5]
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007f62:	687a      	ldr	r2, [r7, #4]
 8007f64:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007f66:	9202      	str	r2, [sp, #8]
 8007f68:	2200      	movs	r2, #0
 8007f6a:	9201      	str	r2, [sp, #4]
 8007f6c:	9300      	str	r3, [sp, #0]
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2200      	movs	r2, #0
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f001 fa3a 	bl	80093ec <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f78:	e113      	b.n	80081a2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f916 	bl	80081ac <USBH_HandleEnum>
 8007f80:	4603      	mov	r3, r0
 8007f82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007f84:	7bbb      	ldrb	r3, [r7, #14]
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 80fd 	bne.w	8008188 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007f9c:	2b01      	cmp	r3, #1
 8007f9e:	d103      	bne.n	8007fa8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2208      	movs	r2, #8
 8007fa4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007fa6:	e0ef      	b.n	8008188 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2207      	movs	r2, #7
 8007fac:	701a      	strb	r2, [r3, #0]
      break;
 8007fae:	e0eb      	b.n	8008188 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 80e8 	beq.w	800818c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2208      	movs	r2, #8
 8007fcc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007fce:	e0dd      	b.n	800818c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	6878      	ldr	r0, [r7, #4]
 8007fda:	f000 fc3a 	bl	8008852 <USBH_SetCfg>
 8007fde:	4603      	mov	r3, r0
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f040 80d5 	bne.w	8008190 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2209      	movs	r2, #9
 8007fea:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fec:	e0d0      	b.n	8008190 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007ff4:	f003 0320 	and.w	r3, r3, #32
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d016      	beq.n	800802a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007ffc:	2101      	movs	r1, #1
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fc4a 	bl	8008898 <USBH_SetFeature>
 8008004:	4603      	mov	r3, r0
 8008006:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008008:	7bbb      	ldrb	r3, [r7, #14]
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d103      	bne.n	8008018 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	220a      	movs	r2, #10
 8008014:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008016:	e0bd      	b.n	8008194 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008018:	7bbb      	ldrb	r3, [r7, #14]
 800801a:	b2db      	uxtb	r3, r3
 800801c:	2b03      	cmp	r3, #3
 800801e:	f040 80b9 	bne.w	8008194 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	220a      	movs	r2, #10
 8008026:	701a      	strb	r2, [r3, #0]
      break;
 8008028:	e0b4      	b.n	8008194 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	220a      	movs	r2, #10
 800802e:	701a      	strb	r2, [r3, #0]
      break;
 8008030:	e0b0      	b.n	8008194 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 80ad 	beq.w	8008198 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008046:	2300      	movs	r3, #0
 8008048:	73fb      	strb	r3, [r7, #15]
 800804a:	e016      	b.n	800807a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800804c:	7bfa      	ldrb	r2, [r7, #15]
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	32de      	adds	r2, #222	@ 0xde
 8008052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008056:	791a      	ldrb	r2, [r3, #4]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800805e:	429a      	cmp	r2, r3
 8008060:	d108      	bne.n	8008074 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008062:	7bfa      	ldrb	r2, [r7, #15]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	32de      	adds	r2, #222	@ 0xde
 8008068:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008072:	e005      	b.n	8008080 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008074:	7bfb      	ldrb	r3, [r7, #15]
 8008076:	3301      	adds	r3, #1
 8008078:	73fb      	strb	r3, [r7, #15]
 800807a:	7bfb      	ldrb	r3, [r7, #15]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d0e5      	beq.n	800804c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008086:	2b00      	cmp	r3, #0
 8008088:	d016      	beq.n	80080b8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	4798      	blx	r3
 8008096:	4603      	mov	r3, r0
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2206      	movs	r2, #6
 80080a0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80080a8:	2103      	movs	r1, #3
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080ae:	e073      	b.n	8008198 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	220d      	movs	r2, #13
 80080b4:	701a      	strb	r2, [r3, #0]
      break;
 80080b6:	e06f      	b.n	8008198 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	220d      	movs	r2, #13
 80080bc:	701a      	strb	r2, [r3, #0]
      break;
 80080be:	e06b      	b.n	8008198 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d017      	beq.n	80080fa <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080d0:	691b      	ldr	r3, [r3, #16]
 80080d2:	6878      	ldr	r0, [r7, #4]
 80080d4:	4798      	blx	r3
 80080d6:	4603      	mov	r3, r0
 80080d8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80080da:	7bbb      	ldrb	r3, [r7, #14]
 80080dc:	b2db      	uxtb	r3, r3
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d103      	bne.n	80080ea <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	220b      	movs	r2, #11
 80080e6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080e8:	e058      	b.n	800819c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 80080ea:	7bbb      	ldrb	r3, [r7, #14]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	2b02      	cmp	r3, #2
 80080f0:	d154      	bne.n	800819c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	220d      	movs	r2, #13
 80080f6:	701a      	strb	r2, [r3, #0]
      break;
 80080f8:	e050      	b.n	800819c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	220d      	movs	r2, #13
 80080fe:	701a      	strb	r2, [r3, #0]
      break;
 8008100:	e04c      	b.n	800819c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008108:	2b00      	cmp	r3, #0
 800810a:	d049      	beq.n	80081a0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008112:	695b      	ldr	r3, [r3, #20]
 8008114:	6878      	ldr	r0, [r7, #4]
 8008116:	4798      	blx	r3
      }
      break;
 8008118:	e042      	b.n	80081a0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f7ff fd4a 	bl	8007bbc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800812e:	2b00      	cmp	r3, #0
 8008130:	d009      	beq.n	8008146 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008138:	68db      	ldr	r3, [r3, #12]
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800814c:	2b00      	cmp	r3, #0
 800814e:	d005      	beq.n	800815c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008156:	2105      	movs	r1, #5
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008162:	b2db      	uxtb	r3, r3
 8008164:	2b01      	cmp	r3, #1
 8008166:	d107      	bne.n	8008178 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f7ff fe22 	bl	8007dba <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008176:	e014      	b.n	80081a2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f001 fb19 	bl	80097b0 <USBH_LL_Start>
      break;
 800817e:	e010      	b.n	80081a2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008180:	bf00      	nop
 8008182:	e00e      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 8008184:	bf00      	nop
 8008186:	e00c      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 8008188:	bf00      	nop
 800818a:	e00a      	b.n	80081a2 <USBH_Process+0x3c6>
    break;
 800818c:	bf00      	nop
 800818e:	e008      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 8008190:	bf00      	nop
 8008192:	e006      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 8008194:	bf00      	nop
 8008196:	e004      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 8008198:	bf00      	nop
 800819a:	e002      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 800819c:	bf00      	nop
 800819e:	e000      	b.n	80081a2 <USBH_Process+0x3c6>
      break;
 80081a0:	bf00      	nop
  }
  return USBH_OK;
 80081a2:	2300      	movs	r3, #0
}
 80081a4:	4618      	mov	r0, r3
 80081a6:	3710      	adds	r7, #16
 80081a8:	46bd      	mov	sp, r7
 80081aa:	bd80      	pop	{r7, pc}

080081ac <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af04      	add	r7, sp, #16
 80081b2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 80081b8:	2301      	movs	r3, #1
 80081ba:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	785b      	ldrb	r3, [r3, #1]
 80081c0:	2b07      	cmp	r3, #7
 80081c2:	f200 81bd 	bhi.w	8008540 <USBH_HandleEnum+0x394>
 80081c6:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <USBH_HandleEnum+0x20>)
 80081c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081cc:	080081ed 	.word	0x080081ed
 80081d0:	080082a7 	.word	0x080082a7
 80081d4:	08008311 	.word	0x08008311
 80081d8:	0800839b 	.word	0x0800839b
 80081dc:	08008405 	.word	0x08008405
 80081e0:	08008475 	.word	0x08008475
 80081e4:	080084bb 	.word	0x080084bb
 80081e8:	08008501 	.word	0x08008501
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80081ec:	2108      	movs	r1, #8
 80081ee:	6878      	ldr	r0, [r7, #4]
 80081f0:	f000 fa4c 	bl	800868c <USBH_Get_DevDesc>
 80081f4:	4603      	mov	r3, r0
 80081f6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d12e      	bne.n	800825c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	7919      	ldrb	r1, [r3, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800821e:	687a      	ldr	r2, [r7, #4]
 8008220:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008222:	9202      	str	r2, [sp, #8]
 8008224:	2200      	movs	r2, #0
 8008226:	9201      	str	r2, [sp, #4]
 8008228:	9300      	str	r3, [sp, #0]
 800822a:	4603      	mov	r3, r0
 800822c:	2280      	movs	r2, #128	@ 0x80
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f001 f8dc 	bl	80093ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	7959      	ldrb	r1, [r3, #5]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008244:	687a      	ldr	r2, [r7, #4]
 8008246:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008248:	9202      	str	r2, [sp, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	9201      	str	r2, [sp, #4]
 800824e:	9300      	str	r3, [sp, #0]
 8008250:	4603      	mov	r3, r0
 8008252:	2200      	movs	r2, #0
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	f001 f8c9 	bl	80093ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800825a:	e173      	b.n	8008544 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800825c:	7bbb      	ldrb	r3, [r7, #14]
 800825e:	2b03      	cmp	r3, #3
 8008260:	f040 8170 	bne.w	8008544 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800826a:	3301      	adds	r3, #1
 800826c:	b2da      	uxtb	r2, r3
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800827a:	2b03      	cmp	r3, #3
 800827c:	d903      	bls.n	8008286 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	220d      	movs	r2, #13
 8008282:	701a      	strb	r2, [r3, #0]
      break;
 8008284:	e15e      	b.n	8008544 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	795b      	ldrb	r3, [r3, #5]
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f001 f8fd 	bl	800948c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	791b      	ldrb	r3, [r3, #4]
 8008296:	4619      	mov	r1, r3
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f001 f8f7 	bl	800948c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	701a      	strb	r2, [r3, #0]
      break;
 80082a4:	e14e      	b.n	8008544 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 80082a6:	2112      	movs	r1, #18
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f9ef 	bl	800868c <USBH_Get_DevDesc>
 80082ae:	4603      	mov	r3, r0
 80082b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d103      	bne.n	80082c0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2202      	movs	r2, #2
 80082bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80082be:	e143      	b.n	8008548 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	f040 8140 	bne.w	8008548 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082ce:	3301      	adds	r3, #1
 80082d0:	b2da      	uxtb	r2, r3
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d903      	bls.n	80082ea <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	220d      	movs	r2, #13
 80082e6:	701a      	strb	r2, [r3, #0]
      break;
 80082e8:	e12e      	b.n	8008548 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	795b      	ldrb	r3, [r3, #5]
 80082ee:	4619      	mov	r1, r3
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 f8cb 	bl	800948c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	791b      	ldrb	r3, [r3, #4]
 80082fa:	4619      	mov	r1, r3
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 f8c5 	bl	800948c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	701a      	strb	r2, [r3, #0]
      break;
 800830e:	e11b      	b.n	8008548 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008310:	2101      	movs	r1, #1
 8008312:	6878      	ldr	r0, [r7, #4]
 8008314:	f000 fa79 	bl	800880a <USBH_SetAddress>
 8008318:	4603      	mov	r3, r0
 800831a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d130      	bne.n	8008384 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008322:	2002      	movs	r0, #2
 8008324:	f001 fbab 	bl	8009a7e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2203      	movs	r2, #3
 8008334:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	7919      	ldrb	r1, [r3, #4]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800834a:	9202      	str	r2, [sp, #8]
 800834c:	2200      	movs	r2, #0
 800834e:	9201      	str	r2, [sp, #4]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	4603      	mov	r3, r0
 8008354:	2280      	movs	r2, #128	@ 0x80
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f001 f848 	bl	80093ec <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	7959      	ldrb	r1, [r3, #5]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008370:	9202      	str	r2, [sp, #8]
 8008372:	2200      	movs	r2, #0
 8008374:	9201      	str	r2, [sp, #4]
 8008376:	9300      	str	r3, [sp, #0]
 8008378:	4603      	mov	r3, r0
 800837a:	2200      	movs	r2, #0
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f001 f835 	bl	80093ec <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008382:	e0e3      	b.n	800854c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008384:	7bbb      	ldrb	r3, [r7, #14]
 8008386:	2b03      	cmp	r3, #3
 8008388:	f040 80e0 	bne.w	800854c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	220d      	movs	r2, #13
 8008390:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	705a      	strb	r2, [r3, #1]
      break;
 8008398:	e0d8      	b.n	800854c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800839a:	2109      	movs	r1, #9
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f9a1 	bl	80086e4 <USBH_Get_CfgDesc>
 80083a2:	4603      	mov	r3, r0
 80083a4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80083a6:	7bbb      	ldrb	r3, [r7, #14]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d103      	bne.n	80083b4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2204      	movs	r2, #4
 80083b0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80083b2:	e0cd      	b.n	8008550 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2b03      	cmp	r3, #3
 80083b8:	f040 80ca 	bne.w	8008550 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083c2:	3301      	adds	r3, #1
 80083c4:	b2da      	uxtb	r2, r3
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80083d2:	2b03      	cmp	r3, #3
 80083d4:	d903      	bls.n	80083de <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	220d      	movs	r2, #13
 80083da:	701a      	strb	r2, [r3, #0]
      break;
 80083dc:	e0b8      	b.n	8008550 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	795b      	ldrb	r3, [r3, #5]
 80083e2:	4619      	mov	r1, r3
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f001 f851 	bl	800948c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	791b      	ldrb	r3, [r3, #4]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 f84b 	bl	800948c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	2200      	movs	r2, #0
 80083fa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	701a      	strb	r2, [r3, #0]
      break;
 8008402:	e0a5      	b.n	8008550 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800840a:	4619      	mov	r1, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 f969 	bl	80086e4 <USBH_Get_CfgDesc>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008416:	7bbb      	ldrb	r3, [r7, #14]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d103      	bne.n	8008424 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2205      	movs	r2, #5
 8008420:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008422:	e097      	b.n	8008554 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008424:	7bbb      	ldrb	r3, [r7, #14]
 8008426:	2b03      	cmp	r3, #3
 8008428:	f040 8094 	bne.w	8008554 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008432:	3301      	adds	r3, #1
 8008434:	b2da      	uxtb	r2, r3
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008442:	2b03      	cmp	r3, #3
 8008444:	d903      	bls.n	800844e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	220d      	movs	r2, #13
 800844a:	701a      	strb	r2, [r3, #0]
      break;
 800844c:	e082      	b.n	8008554 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	795b      	ldrb	r3, [r3, #5]
 8008452:	4619      	mov	r1, r3
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f001 f819 	bl	800948c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	791b      	ldrb	r3, [r3, #4]
 800845e:	4619      	mov	r1, r3
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 f813 	bl	800948c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
      break;
 8008472:	e06f      	b.n	8008554 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800847a:	2b00      	cmp	r3, #0
 800847c:	d019      	beq.n	80084b2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800848a:	23ff      	movs	r3, #255	@ 0xff
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 f953 	bl	8008738 <USBH_Get_StringDesc>
 8008492:	4603      	mov	r3, r0
 8008494:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008496:	7bbb      	ldrb	r3, [r7, #14]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d103      	bne.n	80084a4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2206      	movs	r2, #6
 80084a0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084a2:	e059      	b.n	8008558 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084a4:	7bbb      	ldrb	r3, [r7, #14]
 80084a6:	2b03      	cmp	r3, #3
 80084a8:	d156      	bne.n	8008558 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2206      	movs	r2, #6
 80084ae:	705a      	strb	r2, [r3, #1]
      break;
 80084b0:	e052      	b.n	8008558 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2206      	movs	r2, #6
 80084b6:	705a      	strb	r2, [r3, #1]
      break;
 80084b8:	e04e      	b.n	8008558 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d019      	beq.n	80084f8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80084d0:	23ff      	movs	r3, #255	@ 0xff
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 f930 	bl	8008738 <USBH_Get_StringDesc>
 80084d8:	4603      	mov	r3, r0
 80084da:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d103      	bne.n	80084ea <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2207      	movs	r2, #7
 80084e6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80084e8:	e038      	b.n	800855c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80084ea:	7bbb      	ldrb	r3, [r7, #14]
 80084ec:	2b03      	cmp	r3, #3
 80084ee:	d135      	bne.n	800855c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2207      	movs	r2, #7
 80084f4:	705a      	strb	r2, [r3, #1]
      break;
 80084f6:	e031      	b.n	800855c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2207      	movs	r2, #7
 80084fc:	705a      	strb	r2, [r3, #1]
      break;
 80084fe:	e02d      	b.n	800855c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008506:	2b00      	cmp	r3, #0
 8008508:	d017      	beq.n	800853a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008516:	23ff      	movs	r3, #255	@ 0xff
 8008518:	6878      	ldr	r0, [r7, #4]
 800851a:	f000 f90d 	bl	8008738 <USBH_Get_StringDesc>
 800851e:	4603      	mov	r3, r0
 8008520:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b00      	cmp	r3, #0
 8008526:	d102      	bne.n	800852e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800852c:	e018      	b.n	8008560 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800852e:	7bbb      	ldrb	r3, [r7, #14]
 8008530:	2b03      	cmp	r3, #3
 8008532:	d115      	bne.n	8008560 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008534:	2300      	movs	r3, #0
 8008536:	73fb      	strb	r3, [r7, #15]
      break;
 8008538:	e012      	b.n	8008560 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800853a:	2300      	movs	r3, #0
 800853c:	73fb      	strb	r3, [r7, #15]
      break;
 800853e:	e00f      	b.n	8008560 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008540:	bf00      	nop
 8008542:	e00e      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 8008544:	bf00      	nop
 8008546:	e00c      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 8008548:	bf00      	nop
 800854a:	e00a      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 800854c:	bf00      	nop
 800854e:	e008      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 8008550:	bf00      	nop
 8008552:	e006      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 8008554:	bf00      	nop
 8008556:	e004      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 8008558:	bf00      	nop
 800855a:	e002      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 800855c:	bf00      	nop
 800855e:	e000      	b.n	8008562 <USBH_HandleEnum+0x3b6>
      break;
 8008560:	bf00      	nop
  }
  return Status;
 8008562:	7bfb      	ldrb	r3, [r7, #15]
}
 8008564:	4618      	mov	r0, r3
 8008566:	3710      	adds	r7, #16
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}

0800856c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
 8008574:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	683a      	ldr	r2, [r7, #0]
 800857a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800857e:	bf00      	nop
 8008580:	370c      	adds	r7, #12
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr

0800858a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008598:	1c5a      	adds	r2, r3, #1
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f804 	bl	80085ae <USBH_HandleSof>
}
 80085a6:	bf00      	nop
 80085a8:	3708      	adds	r7, #8
 80085aa:	46bd      	mov	sp, r7
 80085ac:	bd80      	pop	{r7, pc}

080085ae <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80085ae:	b580      	push	{r7, lr}
 80085b0:	b082      	sub	sp, #8
 80085b2:	af00      	add	r7, sp, #0
 80085b4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	781b      	ldrb	r3, [r3, #0]
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	2b0b      	cmp	r3, #11
 80085be:	d10a      	bne.n	80085d6 <USBH_HandleSof+0x28>
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
  }
}
 80085d6:	bf00      	nop
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80085de:	b480      	push	{r7}
 80085e0:	b083      	sub	sp, #12
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80085ee:	bf00      	nop
}
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr

080085fa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80085fa:	b480      	push	{r7}
 80085fc:	b083      	sub	sp, #12
 80085fe:	af00      	add	r7, sp, #0
 8008600:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800860a:	bf00      	nop
}
 800860c:	370c      	adds	r7, #12
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8008616:	b480      	push	{r7}
 8008618:	b083      	sub	sp, #12
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2201      	movs	r2, #1
 8008622:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2200      	movs	r2, #0
 800862a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2200      	movs	r2, #0
 8008632:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008636:	2300      	movs	r3, #0
}
 8008638:	4618      	mov	r0, r3
 800863a:	370c      	adds	r7, #12
 800863c:	46bd      	mov	sp, r7
 800863e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008642:	4770      	bx	lr

08008644 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b082      	sub	sp, #8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2201      	movs	r2, #1
 8008650:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f001 f8be 	bl	80097e6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	791b      	ldrb	r3, [r3, #4]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 ff0b 	bl	800948c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	795b      	ldrb	r3, [r3, #5]
 800867a:	4619      	mov	r1, r3
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 ff05 	bl	800948c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8008682:	2300      	movs	r3, #0
}
 8008684:	4618      	mov	r0, r3
 8008686:	3708      	adds	r7, #8
 8008688:	46bd      	mov	sp, r7
 800868a:	bd80      	pop	{r7, pc}

0800868c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b086      	sub	sp, #24
 8008690:	af02      	add	r7, sp, #8
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	460b      	mov	r3, r1
 8008696:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8008698:	887b      	ldrh	r3, [r7, #2]
 800869a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800869e:	d901      	bls.n	80086a4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80086a0:	2303      	movs	r3, #3
 80086a2:	e01b      	b.n	80086dc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80086aa:	887b      	ldrh	r3, [r7, #2]
 80086ac:	9300      	str	r3, [sp, #0]
 80086ae:	4613      	mov	r3, r2
 80086b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086b4:	2100      	movs	r1, #0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f872 	bl	80087a0 <USBH_GetDescriptor>
 80086bc:	4603      	mov	r3, r0
 80086be:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80086c0:	7bfb      	ldrb	r3, [r7, #15]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d109      	bne.n	80086da <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086cc:	887a      	ldrh	r2, [r7, #2]
 80086ce:	4619      	mov	r1, r3
 80086d0:	6878      	ldr	r0, [r7, #4]
 80086d2:	f000 f929 	bl	8008928 <USBH_ParseDevDesc>
 80086d6:	4603      	mov	r3, r0
 80086d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086da:	7bfb      	ldrb	r3, [r7, #15]
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3710      	adds	r7, #16
 80086e0:	46bd      	mov	sp, r7
 80086e2:	bd80      	pop	{r7, pc}

080086e4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b086      	sub	sp, #24
 80086e8:	af02      	add	r7, sp, #8
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	460b      	mov	r3, r1
 80086ee:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	331c      	adds	r3, #28
 80086f4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80086f6:	887b      	ldrh	r3, [r7, #2]
 80086f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80086fc:	d901      	bls.n	8008702 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80086fe:	2303      	movs	r3, #3
 8008700:	e016      	b.n	8008730 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008702:	887b      	ldrh	r3, [r7, #2]
 8008704:	9300      	str	r3, [sp, #0]
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800870c:	2100      	movs	r1, #0
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f846 	bl	80087a0 <USBH_GetDescriptor>
 8008714:	4603      	mov	r3, r0
 8008716:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d107      	bne.n	800872e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800871e:	887b      	ldrh	r3, [r7, #2]
 8008720:	461a      	mov	r2, r3
 8008722:	68b9      	ldr	r1, [r7, #8]
 8008724:	6878      	ldr	r0, [r7, #4]
 8008726:	f000 f9af 	bl	8008a88 <USBH_ParseCfgDesc>
 800872a:	4603      	mov	r3, r0
 800872c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800872e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008730:	4618      	mov	r0, r3
 8008732:	3710      	adds	r7, #16
 8008734:	46bd      	mov	sp, r7
 8008736:	bd80      	pop	{r7, pc}

08008738 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b088      	sub	sp, #32
 800873c:	af02      	add	r7, sp, #8
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	607a      	str	r2, [r7, #4]
 8008742:	461a      	mov	r2, r3
 8008744:	460b      	mov	r3, r1
 8008746:	72fb      	strb	r3, [r7, #11]
 8008748:	4613      	mov	r3, r2
 800874a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800874c:	893b      	ldrh	r3, [r7, #8]
 800874e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008752:	d802      	bhi.n	800875a <USBH_Get_StringDesc+0x22>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d101      	bne.n	800875e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800875a:	2303      	movs	r3, #3
 800875c:	e01c      	b.n	8008798 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800875e:	7afb      	ldrb	r3, [r7, #11]
 8008760:	b29b      	uxth	r3, r3
 8008762:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8008766:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800876e:	893b      	ldrh	r3, [r7, #8]
 8008770:	9300      	str	r3, [sp, #0]
 8008772:	460b      	mov	r3, r1
 8008774:	2100      	movs	r1, #0
 8008776:	68f8      	ldr	r0, [r7, #12]
 8008778:	f000 f812 	bl	80087a0 <USBH_GetDescriptor>
 800877c:	4603      	mov	r3, r0
 800877e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8008780:	7dfb      	ldrb	r3, [r7, #23]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d107      	bne.n	8008796 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800878c:	893a      	ldrh	r2, [r7, #8]
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	4618      	mov	r0, r3
 8008792:	f000 fb8d 	bl	8008eb0 <USBH_ParseStringDesc>
  }

  return status;
 8008796:	7dfb      	ldrb	r3, [r7, #23]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3718      	adds	r7, #24
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	607b      	str	r3, [r7, #4]
 80087aa:	460b      	mov	r3, r1
 80087ac:	72fb      	strb	r3, [r7, #11]
 80087ae:	4613      	mov	r3, r2
 80087b0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	789b      	ldrb	r3, [r3, #2]
 80087b6:	2b01      	cmp	r3, #1
 80087b8:	d11c      	bne.n	80087f4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80087ba:	7afb      	ldrb	r3, [r7, #11]
 80087bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2206      	movs	r2, #6
 80087ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	893a      	ldrh	r2, [r7, #8]
 80087d0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80087d2:	893b      	ldrh	r3, [r7, #8]
 80087d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80087d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087dc:	d104      	bne.n	80087e8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f240 4209 	movw	r2, #1033	@ 0x409
 80087e4:	829a      	strh	r2, [r3, #20]
 80087e6:	e002      	b.n	80087ee <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	2200      	movs	r2, #0
 80087ec:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8b3a      	ldrh	r2, [r7, #24]
 80087f2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80087f4:	8b3b      	ldrh	r3, [r7, #24]
 80087f6:	461a      	mov	r2, r3
 80087f8:	6879      	ldr	r1, [r7, #4]
 80087fa:	68f8      	ldr	r0, [r7, #12]
 80087fc:	f000 fba5 	bl	8008f4a <USBH_CtlReq>
 8008800:	4603      	mov	r3, r0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3710      	adds	r7, #16
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b082      	sub	sp, #8
 800880e:	af00      	add	r7, sp, #0
 8008810:	6078      	str	r0, [r7, #4]
 8008812:	460b      	mov	r3, r1
 8008814:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	789b      	ldrb	r3, [r3, #2]
 800881a:	2b01      	cmp	r3, #1
 800881c:	d10f      	bne.n	800883e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2205      	movs	r2, #5
 8008828:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800882a:	78fb      	ldrb	r3, [r7, #3]
 800882c:	b29a      	uxth	r2, r3
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2200      	movs	r2, #0
 800883c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800883e:	2200      	movs	r2, #0
 8008840:	2100      	movs	r1, #0
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f000 fb81 	bl	8008f4a <USBH_CtlReq>
 8008848:	4603      	mov	r3, r0
}
 800884a:	4618      	mov	r0, r3
 800884c:	3708      	adds	r7, #8
 800884e:	46bd      	mov	sp, r7
 8008850:	bd80      	pop	{r7, pc}

08008852 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008852:	b580      	push	{r7, lr}
 8008854:	b082      	sub	sp, #8
 8008856:	af00      	add	r7, sp, #0
 8008858:	6078      	str	r0, [r7, #4]
 800885a:	460b      	mov	r3, r1
 800885c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	789b      	ldrb	r3, [r3, #2]
 8008862:	2b01      	cmp	r3, #1
 8008864:	d10e      	bne.n	8008884 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	2209      	movs	r2, #9
 8008870:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	887a      	ldrh	r2, [r7, #2]
 8008876:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	2200      	movs	r2, #0
 8008882:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008884:	2200      	movs	r2, #0
 8008886:	2100      	movs	r1, #0
 8008888:	6878      	ldr	r0, [r7, #4]
 800888a:	f000 fb5e 	bl	8008f4a <USBH_CtlReq>
 800888e:	4603      	mov	r3, r0
}
 8008890:	4618      	mov	r0, r3
 8008892:	3708      	adds	r7, #8
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	789b      	ldrb	r3, [r3, #2]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d10f      	bne.n	80088cc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2203      	movs	r2, #3
 80088b6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80088b8:	78fb      	ldrb	r3, [r7, #3]
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	2200      	movs	r2, #0
 80088c4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2200      	movs	r2, #0
 80088ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80088cc:	2200      	movs	r2, #0
 80088ce:	2100      	movs	r1, #0
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f000 fb3a 	bl	8008f4a <USBH_CtlReq>
 80088d6:	4603      	mov	r3, r0
}
 80088d8:	4618      	mov	r0, r3
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	789b      	ldrb	r3, [r3, #2]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10f      	bne.n	8008914 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2200      	movs	r2, #0
 8008904:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8008906:	78fb      	ldrb	r3, [r7, #3]
 8008908:	b29a      	uxth	r2, r3
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2200      	movs	r2, #0
 8008912:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008914:	2200      	movs	r2, #0
 8008916:	2100      	movs	r1, #0
 8008918:	6878      	ldr	r0, [r7, #4]
 800891a:	f000 fb16 	bl	8008f4a <USBH_CtlReq>
 800891e:	4603      	mov	r3, r0
}
 8008920:	4618      	mov	r0, r3
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008928:	b480      	push	{r7}
 800892a:	b087      	sub	sp, #28
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	4613      	mov	r3, r2
 8008934:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800893c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800893e:	2300      	movs	r3, #0
 8008940:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d101      	bne.n	800894c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8008948:	2302      	movs	r3, #2
 800894a:	e094      	b.n	8008a76 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	781a      	ldrb	r2, [r3, #0]
 8008950:	693b      	ldr	r3, [r7, #16]
 8008952:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	785a      	ldrb	r2, [r3, #1]
 8008958:	693b      	ldr	r3, [r7, #16]
 800895a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	3302      	adds	r3, #2
 8008960:	781b      	ldrb	r3, [r3, #0]
 8008962:	461a      	mov	r2, r3
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	3303      	adds	r3, #3
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	b29b      	uxth	r3, r3
 800896e:	4313      	orrs	r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	693b      	ldr	r3, [r7, #16]
 8008974:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	791a      	ldrb	r2, [r3, #4]
 800897a:	693b      	ldr	r3, [r7, #16]
 800897c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	795a      	ldrb	r2, [r3, #5]
 8008982:	693b      	ldr	r3, [r7, #16]
 8008984:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	799a      	ldrb	r2, [r3, #6]
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	79da      	ldrb	r2, [r3, #7]
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800899c:	2b00      	cmp	r3, #0
 800899e:	d004      	beq.n	80089aa <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d11b      	bne.n	80089e2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	79db      	ldrb	r3, [r3, #7]
 80089ae:	2b20      	cmp	r3, #32
 80089b0:	dc0f      	bgt.n	80089d2 <USBH_ParseDevDesc+0xaa>
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	db0f      	blt.n	80089d6 <USBH_ParseDevDesc+0xae>
 80089b6:	3b08      	subs	r3, #8
 80089b8:	4a32      	ldr	r2, [pc, #200]	@ (8008a84 <USBH_ParseDevDesc+0x15c>)
 80089ba:	fa22 f303 	lsr.w	r3, r2, r3
 80089be:	f003 0301 	and.w	r3, r3, #1
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	bf14      	ite	ne
 80089c6:	2301      	movne	r3, #1
 80089c8:	2300      	moveq	r3, #0
 80089ca:	b2db      	uxtb	r3, r3
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d106      	bne.n	80089de <USBH_ParseDevDesc+0xb6>
 80089d0:	e001      	b.n	80089d6 <USBH_ParseDevDesc+0xae>
 80089d2:	2b40      	cmp	r3, #64	@ 0x40
 80089d4:	d003      	beq.n	80089de <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80089d6:	693b      	ldr	r3, [r7, #16]
 80089d8:	2208      	movs	r2, #8
 80089da:	71da      	strb	r2, [r3, #7]
        break;
 80089dc:	e000      	b.n	80089e0 <USBH_ParseDevDesc+0xb8>
        break;
 80089de:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80089e0:	e00e      	b.n	8008a00 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d107      	bne.n	80089fc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	79db      	ldrb	r3, [r3, #7]
 80089f0:	2b08      	cmp	r3, #8
 80089f2:	d005      	beq.n	8008a00 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	2208      	movs	r2, #8
 80089f8:	71da      	strb	r2, [r3, #7]
 80089fa:	e001      	b.n	8008a00 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80089fc:	2303      	movs	r3, #3
 80089fe:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	2b08      	cmp	r3, #8
 8008a04:	d936      	bls.n	8008a74 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	3308      	adds	r3, #8
 8008a0a:	781b      	ldrb	r3, [r3, #0]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	3309      	adds	r3, #9
 8008a12:	781b      	ldrb	r3, [r3, #0]
 8008a14:	021b      	lsls	r3, r3, #8
 8008a16:	b29b      	uxth	r3, r3
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	b29a      	uxth	r2, r3
 8008a1c:	693b      	ldr	r3, [r7, #16]
 8008a1e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	330a      	adds	r3, #10
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	461a      	mov	r2, r3
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	330b      	adds	r3, #11
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	021b      	lsls	r3, r3, #8
 8008a30:	b29b      	uxth	r3, r3
 8008a32:	4313      	orrs	r3, r2
 8008a34:	b29a      	uxth	r2, r3
 8008a36:	693b      	ldr	r3, [r7, #16]
 8008a38:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8008a3a:	68bb      	ldr	r3, [r7, #8]
 8008a3c:	330c      	adds	r3, #12
 8008a3e:	781b      	ldrb	r3, [r3, #0]
 8008a40:	461a      	mov	r2, r3
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	330d      	adds	r3, #13
 8008a46:	781b      	ldrb	r3, [r3, #0]
 8008a48:	021b      	lsls	r3, r3, #8
 8008a4a:	b29b      	uxth	r3, r3
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	b29a      	uxth	r2, r3
 8008a50:	693b      	ldr	r3, [r7, #16]
 8008a52:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8008a54:	68bb      	ldr	r3, [r7, #8]
 8008a56:	7b9a      	ldrb	r2, [r3, #14]
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	7bda      	ldrb	r2, [r3, #15]
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	7c1a      	ldrb	r2, [r3, #16]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	7c5a      	ldrb	r2, [r3, #17]
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8008a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	371c      	adds	r7, #28
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	01000101 	.word	0x01000101

08008a88 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b08c      	sub	sp, #48	@ 0x30
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	60f8      	str	r0, [r7, #12]
 8008a90:	60b9      	str	r1, [r7, #8]
 8008a92:	4613      	mov	r3, r2
 8008a94:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a9c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008ab0:	68bb      	ldr	r3, [r7, #8]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	e0da      	b.n	8008c70 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac0:	781b      	ldrb	r3, [r3, #0]
 8008ac2:	2b09      	cmp	r3, #9
 8008ac4:	d002      	beq.n	8008acc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8008ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac8:	2209      	movs	r2, #9
 8008aca:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	781a      	ldrb	r2, [r3, #0]
 8008ad0:	6a3b      	ldr	r3, [r7, #32]
 8008ad2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	785a      	ldrb	r2, [r3, #1]
 8008ad8:	6a3b      	ldr	r3, [r7, #32]
 8008ada:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	3302      	adds	r3, #2
 8008ae0:	781b      	ldrb	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	3303      	adds	r3, #3
 8008ae8:	781b      	ldrb	r3, [r3, #0]
 8008aea:	021b      	lsls	r3, r3, #8
 8008aec:	b29b      	uxth	r3, r3
 8008aee:	4313      	orrs	r3, r2
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008af6:	bf28      	it	cs
 8008af8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008afc:	b29a      	uxth	r2, r3
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	791a      	ldrb	r2, [r3, #4]
 8008b06:	6a3b      	ldr	r3, [r7, #32]
 8008b08:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	795a      	ldrb	r2, [r3, #5]
 8008b0e:	6a3b      	ldr	r3, [r7, #32]
 8008b10:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	799a      	ldrb	r2, [r3, #6]
 8008b16:	6a3b      	ldr	r3, [r7, #32]
 8008b18:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	79da      	ldrb	r2, [r3, #7]
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008b22:	68bb      	ldr	r3, [r7, #8]
 8008b24:	7a1a      	ldrb	r2, [r3, #8]
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	2b09      	cmp	r3, #9
 8008b2e:	f240 809d 	bls.w	8008c6c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8008b32:	2309      	movs	r3, #9
 8008b34:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008b3a:	e081      	b.n	8008c40 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b3c:	f107 0316 	add.w	r3, r7, #22
 8008b40:	4619      	mov	r1, r3
 8008b42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b44:	f000 f9e7 	bl	8008f16 <USBH_GetNextDesc>
 8008b48:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8008b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4c:	785b      	ldrb	r3, [r3, #1]
 8008b4e:	2b04      	cmp	r3, #4
 8008b50:	d176      	bne.n	8008c40 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8008b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	2b09      	cmp	r3, #9
 8008b58:	d002      	beq.n	8008b60 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8008b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b5c:	2209      	movs	r2, #9
 8008b5e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8008b60:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008b64:	221a      	movs	r2, #26
 8008b66:	fb02 f303 	mul.w	r3, r2, r3
 8008b6a:	3308      	adds	r3, #8
 8008b6c:	6a3a      	ldr	r2, [r7, #32]
 8008b6e:	4413      	add	r3, r2
 8008b70:	3302      	adds	r3, #2
 8008b72:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8008b74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b76:	69f8      	ldr	r0, [r7, #28]
 8008b78:	f000 f87e 	bl	8008c78 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8008b82:	2300      	movs	r3, #0
 8008b84:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008b86:	e043      	b.n	8008c10 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008b88:	f107 0316 	add.w	r3, r7, #22
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b90:	f000 f9c1 	bl	8008f16 <USBH_GetNextDesc>
 8008b94:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b98:	785b      	ldrb	r3, [r3, #1]
 8008b9a:	2b05      	cmp	r3, #5
 8008b9c:	d138      	bne.n	8008c10 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008b9e:	69fb      	ldr	r3, [r7, #28]
 8008ba0:	795b      	ldrb	r3, [r3, #5]
 8008ba2:	2b01      	cmp	r3, #1
 8008ba4:	d113      	bne.n	8008bce <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d003      	beq.n	8008bb6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008bae:	69fb      	ldr	r3, [r7, #28]
 8008bb0:	799b      	ldrb	r3, [r3, #6]
 8008bb2:	2b03      	cmp	r3, #3
 8008bb4:	d10b      	bne.n	8008bce <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bb6:	69fb      	ldr	r3, [r7, #28]
 8008bb8:	79db      	ldrb	r3, [r3, #7]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d10b      	bne.n	8008bd6 <USBH_ParseCfgDesc+0x14e>
 8008bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc0:	781b      	ldrb	r3, [r3, #0]
 8008bc2:	2b09      	cmp	r3, #9
 8008bc4:	d007      	beq.n	8008bd6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc8:	2209      	movs	r2, #9
 8008bca:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bcc:	e003      	b.n	8008bd6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd0:	2207      	movs	r2, #7
 8008bd2:	701a      	strb	r2, [r3, #0]
 8008bd4:	e000      	b.n	8008bd8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008bd6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bdc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008be0:	3201      	adds	r2, #1
 8008be2:	00d2      	lsls	r2, r2, #3
 8008be4:	211a      	movs	r1, #26
 8008be6:	fb01 f303 	mul.w	r3, r1, r3
 8008bea:	4413      	add	r3, r2
 8008bec:	3308      	adds	r3, #8
 8008bee:	6a3a      	ldr	r2, [r7, #32]
 8008bf0:	4413      	add	r3, r2
 8008bf2:	3304      	adds	r3, #4
 8008bf4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008bf6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f000 f870 	bl	8008ce0 <USBH_ParseEPDesc>
 8008c00:	4603      	mov	r3, r0
 8008c02:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008c06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008c10:	69fb      	ldr	r3, [r7, #28]
 8008c12:	791b      	ldrb	r3, [r3, #4]
 8008c14:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c18:	429a      	cmp	r2, r3
 8008c1a:	d204      	bcs.n	8008c26 <USBH_ParseCfgDesc+0x19e>
 8008c1c:	6a3b      	ldr	r3, [r7, #32]
 8008c1e:	885a      	ldrh	r2, [r3, #2]
 8008c20:	8afb      	ldrh	r3, [r7, #22]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d8b0      	bhi.n	8008b88 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008c26:	69fb      	ldr	r3, [r7, #28]
 8008c28:	791b      	ldrb	r3, [r3, #4]
 8008c2a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008c2e:	429a      	cmp	r2, r3
 8008c30:	d201      	bcs.n	8008c36 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008c32:	2303      	movs	r3, #3
 8008c34:	e01c      	b.n	8008c70 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008c36:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008c40:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d805      	bhi.n	8008c54 <USBH_ParseCfgDesc+0x1cc>
 8008c48:	6a3b      	ldr	r3, [r7, #32]
 8008c4a:	885a      	ldrh	r2, [r3, #2]
 8008c4c:	8afb      	ldrh	r3, [r7, #22]
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	f63f af74 	bhi.w	8008b3c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	791b      	ldrb	r3, [r3, #4]
 8008c58:	2b02      	cmp	r3, #2
 8008c5a:	bf28      	it	cs
 8008c5c:	2302      	movcs	r3, #2
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008c64:	429a      	cmp	r2, r3
 8008c66:	d201      	bcs.n	8008c6c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	e001      	b.n	8008c70 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008c6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008c70:	4618      	mov	r0, r3
 8008c72:	3730      	adds	r7, #48	@ 0x30
 8008c74:	46bd      	mov	sp, r7
 8008c76:	bd80      	pop	{r7, pc}

08008c78 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	781a      	ldrb	r2, [r3, #0]
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	785a      	ldrb	r2, [r3, #1]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	789a      	ldrb	r2, [r3, #2]
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	78da      	ldrb	r2, [r3, #3]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	3304      	adds	r3, #4
 8008ca6:	781b      	ldrb	r3, [r3, #0]
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	bf28      	it	cs
 8008cac:	2302      	movcs	r3, #2
 8008cae:	b2da      	uxtb	r2, r3
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	795a      	ldrb	r2, [r3, #5]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008cbc:	683b      	ldr	r3, [r7, #0]
 8008cbe:	799a      	ldrb	r2, [r3, #6]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	79da      	ldrb	r2, [r3, #7]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	7a1a      	ldrb	r2, [r3, #8]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	721a      	strb	r2, [r3, #8]
}
 8008cd4:	bf00      	nop
 8008cd6:	370c      	adds	r7, #12
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cde:	4770      	bx	lr

08008ce0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008ce0:	b480      	push	{r7}
 8008ce2:	b087      	sub	sp, #28
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	60f8      	str	r0, [r7, #12]
 8008ce8:	60b9      	str	r1, [r7, #8]
 8008cea:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008cec:	2300      	movs	r3, #0
 8008cee:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	781a      	ldrb	r2, [r3, #0]
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	785a      	ldrb	r2, [r3, #1]
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	789a      	ldrb	r2, [r3, #2]
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	78da      	ldrb	r2, [r3, #3]
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3304      	adds	r3, #4
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	3305      	adds	r3, #5
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	021b      	lsls	r3, r3, #8
 8008d20:	b29b      	uxth	r3, r3
 8008d22:	4313      	orrs	r3, r2
 8008d24:	b29a      	uxth	r2, r3
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	799a      	ldrb	r2, [r3, #6]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	889b      	ldrh	r3, [r3, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d009      	beq.n	8008d4e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008d3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008d42:	d804      	bhi.n	8008d4e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008d48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d4c:	d901      	bls.n	8008d52 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d136      	bne.n	8008dca <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	78db      	ldrb	r3, [r3, #3]
 8008d60:	f003 0303 	and.w	r3, r3, #3
 8008d64:	2b02      	cmp	r3, #2
 8008d66:	d108      	bne.n	8008d7a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	889b      	ldrh	r3, [r3, #4]
 8008d6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d70:	f240 8097 	bls.w	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d74:	2303      	movs	r3, #3
 8008d76:	75fb      	strb	r3, [r7, #23]
 8008d78:	e093      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	78db      	ldrb	r3, [r3, #3]
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d107      	bne.n	8008d96 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	889b      	ldrh	r3, [r3, #4]
 8008d8a:	2b40      	cmp	r3, #64	@ 0x40
 8008d8c:	f240 8089 	bls.w	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d90:	2303      	movs	r3, #3
 8008d92:	75fb      	strb	r3, [r7, #23]
 8008d94:	e085      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	78db      	ldrb	r3, [r3, #3]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d005      	beq.n	8008dae <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	78db      	ldrb	r3, [r3, #3]
 8008da6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008daa:	2b03      	cmp	r3, #3
 8008dac:	d10a      	bne.n	8008dc4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	799b      	ldrb	r3, [r3, #6]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d003      	beq.n	8008dbe <USBH_ParseEPDesc+0xde>
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	799b      	ldrb	r3, [r3, #6]
 8008dba:	2b10      	cmp	r3, #16
 8008dbc:	d970      	bls.n	8008ea0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008dbe:	2303      	movs	r3, #3
 8008dc0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008dc2:	e06d      	b.n	8008ea0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	75fb      	strb	r3, [r7, #23]
 8008dc8:	e06b      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d13c      	bne.n	8008e4e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	78db      	ldrb	r3, [r3, #3]
 8008dd8:	f003 0303 	and.w	r3, r3, #3
 8008ddc:	2b02      	cmp	r3, #2
 8008dde:	d005      	beq.n	8008dec <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	78db      	ldrb	r3, [r3, #3]
 8008de4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d106      	bne.n	8008dfa <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	889b      	ldrh	r3, [r3, #4]
 8008df0:	2b40      	cmp	r3, #64	@ 0x40
 8008df2:	d956      	bls.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008df4:	2303      	movs	r3, #3
 8008df6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008df8:	e053      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	78db      	ldrb	r3, [r3, #3]
 8008dfe:	f003 0303 	and.w	r3, r3, #3
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d10e      	bne.n	8008e24 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	799b      	ldrb	r3, [r3, #6]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d007      	beq.n	8008e1e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008e12:	2b10      	cmp	r3, #16
 8008e14:	d803      	bhi.n	8008e1e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008e1a:	2b40      	cmp	r3, #64	@ 0x40
 8008e1c:	d941      	bls.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	75fb      	strb	r3, [r7, #23]
 8008e22:	e03e      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	78db      	ldrb	r3, [r3, #3]
 8008e28:	f003 0303 	and.w	r3, r3, #3
 8008e2c:	2b03      	cmp	r3, #3
 8008e2e:	d10b      	bne.n	8008e48 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008e30:	68bb      	ldr	r3, [r7, #8]
 8008e32:	799b      	ldrb	r3, [r3, #6]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d004      	beq.n	8008e42 <USBH_ParseEPDesc+0x162>
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	889b      	ldrh	r3, [r3, #4]
 8008e3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008e40:	d32f      	bcc.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e42:	2303      	movs	r3, #3
 8008e44:	75fb      	strb	r3, [r7, #23]
 8008e46:	e02c      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e48:	2303      	movs	r3, #3
 8008e4a:	75fb      	strb	r3, [r7, #23]
 8008e4c:	e029      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e54:	2b02      	cmp	r3, #2
 8008e56:	d120      	bne.n	8008e9a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	78db      	ldrb	r3, [r3, #3]
 8008e5c:	f003 0303 	and.w	r3, r3, #3
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d106      	bne.n	8008e72 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	889b      	ldrh	r3, [r3, #4]
 8008e68:	2b08      	cmp	r3, #8
 8008e6a:	d01a      	beq.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e6c:	2303      	movs	r3, #3
 8008e6e:	75fb      	strb	r3, [r7, #23]
 8008e70:	e017      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	78db      	ldrb	r3, [r3, #3]
 8008e76:	f003 0303 	and.w	r3, r3, #3
 8008e7a:	2b03      	cmp	r3, #3
 8008e7c:	d10a      	bne.n	8008e94 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	799b      	ldrb	r3, [r3, #6]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d003      	beq.n	8008e8e <USBH_ParseEPDesc+0x1ae>
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	889b      	ldrh	r3, [r3, #4]
 8008e8a:	2b08      	cmp	r3, #8
 8008e8c:	d909      	bls.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008e8e:	2303      	movs	r3, #3
 8008e90:	75fb      	strb	r3, [r7, #23]
 8008e92:	e006      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008e94:	2303      	movs	r3, #3
 8008e96:	75fb      	strb	r3, [r7, #23]
 8008e98:	e003      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008e9a:	2303      	movs	r3, #3
 8008e9c:	75fb      	strb	r3, [r7, #23]
 8008e9e:	e000      	b.n	8008ea2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008ea0:	bf00      	nop
  }

  return status;
 8008ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	3301      	adds	r3, #1
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	2b03      	cmp	r3, #3
 8008ec6:	d120      	bne.n	8008f0a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	781b      	ldrb	r3, [r3, #0]
 8008ecc:	1e9a      	subs	r2, r3, #2
 8008ece:	88fb      	ldrh	r3, [r7, #6]
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	bf28      	it	cs
 8008ed4:	4613      	movcs	r3, r2
 8008ed6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	3302      	adds	r3, #2
 8008edc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008ede:	2300      	movs	r3, #0
 8008ee0:	82fb      	strh	r3, [r7, #22]
 8008ee2:	e00b      	b.n	8008efc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008ee4:	8afb      	ldrh	r3, [r7, #22]
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4413      	add	r3, r2
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008ef6:	8afb      	ldrh	r3, [r7, #22]
 8008ef8:	3302      	adds	r3, #2
 8008efa:	82fb      	strh	r3, [r7, #22]
 8008efc:	8afa      	ldrh	r2, [r7, #22]
 8008efe:	8abb      	ldrh	r3, [r7, #20]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d3ef      	bcc.n	8008ee4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	2200      	movs	r2, #0
 8008f08:	701a      	strb	r2, [r3, #0]
  }
}
 8008f0a:	bf00      	nop
 8008f0c:	371c      	adds	r7, #28
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b085      	sub	sp, #20
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
 8008f1e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	687a      	ldr	r2, [r7, #4]
 8008f26:	7812      	ldrb	r2, [r2, #0]
 8008f28:	4413      	add	r3, r2
 8008f2a:	b29a      	uxth	r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	781b      	ldrb	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	4413      	add	r3, r2
 8008f3a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	3714      	adds	r7, #20
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr

08008f4a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b086      	sub	sp, #24
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	4613      	mov	r3, r2
 8008f56:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008f58:	2301      	movs	r3, #1
 8008f5a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	789b      	ldrb	r3, [r3, #2]
 8008f60:	2b01      	cmp	r3, #1
 8008f62:	d002      	beq.n	8008f6a <USBH_CtlReq+0x20>
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d00f      	beq.n	8008f88 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008f68:	e027      	b.n	8008fba <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	68ba      	ldr	r2, [r7, #8]
 8008f6e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	88fa      	ldrh	r2, [r7, #6]
 8008f74:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008f82:	2301      	movs	r3, #1
 8008f84:	75fb      	strb	r3, [r7, #23]
      break;
 8008f86:	e018      	b.n	8008fba <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008f88:	68f8      	ldr	r0, [r7, #12]
 8008f8a:	f000 f81b 	bl	8008fc4 <USBH_HandleControl>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008f92:	7dfb      	ldrb	r3, [r7, #23]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d002      	beq.n	8008f9e <USBH_CtlReq+0x54>
 8008f98:	7dfb      	ldrb	r3, [r7, #23]
 8008f9a:	2b03      	cmp	r3, #3
 8008f9c:	d106      	bne.n	8008fac <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	761a      	strb	r2, [r3, #24]
      break;
 8008faa:	e005      	b.n	8008fb8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
 8008fae:	2b02      	cmp	r3, #2
 8008fb0:	d102      	bne.n	8008fb8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	2201      	movs	r2, #1
 8008fb6:	709a      	strb	r2, [r3, #2]
      break;
 8008fb8:	bf00      	nop
  }
  return status;
 8008fba:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3718      	adds	r7, #24
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af02      	add	r7, sp, #8
 8008fca:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	7e1b      	ldrb	r3, [r3, #24]
 8008fd8:	3b01      	subs	r3, #1
 8008fda:	2b0a      	cmp	r3, #10
 8008fdc:	f200 8156 	bhi.w	800928c <USBH_HandleControl+0x2c8>
 8008fe0:	a201      	add	r2, pc, #4	@ (adr r2, 8008fe8 <USBH_HandleControl+0x24>)
 8008fe2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fe6:	bf00      	nop
 8008fe8:	08009015 	.word	0x08009015
 8008fec:	0800902f 	.word	0x0800902f
 8008ff0:	08009099 	.word	0x08009099
 8008ff4:	080090bf 	.word	0x080090bf
 8008ff8:	080090f7 	.word	0x080090f7
 8008ffc:	08009121 	.word	0x08009121
 8009000:	08009173 	.word	0x08009173
 8009004:	08009195 	.word	0x08009195
 8009008:	080091d1 	.word	0x080091d1
 800900c:	080091f7 	.word	0x080091f7
 8009010:	08009235 	.word	0x08009235
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f103 0110 	add.w	r1, r3, #16
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	795b      	ldrb	r3, [r3, #5]
 800901e:	461a      	mov	r2, r3
 8009020:	6878      	ldr	r0, [r7, #4]
 8009022:	f000 f943 	bl	80092ac <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2202      	movs	r2, #2
 800902a:	761a      	strb	r2, [r3, #24]
      break;
 800902c:	e139      	b.n	80092a2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	795b      	ldrb	r3, [r3, #5]
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 fcc5 	bl	80099c4 <USBH_LL_GetURBState>
 800903a:	4603      	mov	r3, r0
 800903c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800903e:	7bbb      	ldrb	r3, [r7, #14]
 8009040:	2b01      	cmp	r3, #1
 8009042:	d11e      	bne.n	8009082 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	7c1b      	ldrb	r3, [r3, #16]
 8009048:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800904c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	8adb      	ldrh	r3, [r3, #22]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d00a      	beq.n	800906c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009056:	7b7b      	ldrb	r3, [r7, #13]
 8009058:	2b80      	cmp	r3, #128	@ 0x80
 800905a:	d103      	bne.n	8009064 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2203      	movs	r2, #3
 8009060:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009062:	e115      	b.n	8009290 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2205      	movs	r2, #5
 8009068:	761a      	strb	r2, [r3, #24]
      break;
 800906a:	e111      	b.n	8009290 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800906c:	7b7b      	ldrb	r3, [r7, #13]
 800906e:	2b80      	cmp	r3, #128	@ 0x80
 8009070:	d103      	bne.n	800907a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2209      	movs	r2, #9
 8009076:	761a      	strb	r2, [r3, #24]
      break;
 8009078:	e10a      	b.n	8009290 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2207      	movs	r2, #7
 800907e:	761a      	strb	r2, [r3, #24]
      break;
 8009080:	e106      	b.n	8009290 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009082:	7bbb      	ldrb	r3, [r7, #14]
 8009084:	2b04      	cmp	r3, #4
 8009086:	d003      	beq.n	8009090 <USBH_HandleControl+0xcc>
 8009088:	7bbb      	ldrb	r3, [r7, #14]
 800908a:	2b02      	cmp	r3, #2
 800908c:	f040 8100 	bne.w	8009290 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	220b      	movs	r2, #11
 8009094:	761a      	strb	r2, [r3, #24]
      break;
 8009096:	e0fb      	b.n	8009290 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800909e:	b29a      	uxth	r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6899      	ldr	r1, [r3, #8]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	899a      	ldrh	r2, [r3, #12]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	791b      	ldrb	r3, [r3, #4]
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f000 f93a 	bl	800932a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2204      	movs	r2, #4
 80090ba:	761a      	strb	r2, [r3, #24]
      break;
 80090bc:	e0f1      	b.n	80092a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	791b      	ldrb	r3, [r3, #4]
 80090c2:	4619      	mov	r1, r3
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fc7d 	bl	80099c4 <USBH_LL_GetURBState>
 80090ca:	4603      	mov	r3, r0
 80090cc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80090ce:	7bbb      	ldrb	r3, [r7, #14]
 80090d0:	2b01      	cmp	r3, #1
 80090d2:	d102      	bne.n	80090da <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	2209      	movs	r2, #9
 80090d8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80090da:	7bbb      	ldrb	r3, [r7, #14]
 80090dc:	2b05      	cmp	r3, #5
 80090de:	d102      	bne.n	80090e6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80090e0:	2303      	movs	r3, #3
 80090e2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80090e4:	e0d6      	b.n	8009294 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80090e6:	7bbb      	ldrb	r3, [r7, #14]
 80090e8:	2b04      	cmp	r3, #4
 80090ea:	f040 80d3 	bne.w	8009294 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	220b      	movs	r2, #11
 80090f2:	761a      	strb	r2, [r3, #24]
      break;
 80090f4:	e0ce      	b.n	8009294 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6899      	ldr	r1, [r3, #8]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	899a      	ldrh	r2, [r3, #12]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	795b      	ldrb	r3, [r3, #5]
 8009102:	2001      	movs	r0, #1
 8009104:	9000      	str	r0, [sp, #0]
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 f8ea 	bl	80092e0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009112:	b29a      	uxth	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2206      	movs	r2, #6
 800911c:	761a      	strb	r2, [r3, #24]
      break;
 800911e:	e0c0      	b.n	80092a2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	795b      	ldrb	r3, [r3, #5]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fc4c 	bl	80099c4 <USBH_LL_GetURBState>
 800912c:	4603      	mov	r3, r0
 800912e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009130:	7bbb      	ldrb	r3, [r7, #14]
 8009132:	2b01      	cmp	r3, #1
 8009134:	d103      	bne.n	800913e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2207      	movs	r2, #7
 800913a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800913c:	e0ac      	b.n	8009298 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800913e:	7bbb      	ldrb	r3, [r7, #14]
 8009140:	2b05      	cmp	r3, #5
 8009142:	d105      	bne.n	8009150 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	220c      	movs	r2, #12
 8009148:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800914a:	2303      	movs	r3, #3
 800914c:	73fb      	strb	r3, [r7, #15]
      break;
 800914e:	e0a3      	b.n	8009298 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009150:	7bbb      	ldrb	r3, [r7, #14]
 8009152:	2b02      	cmp	r3, #2
 8009154:	d103      	bne.n	800915e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2205      	movs	r2, #5
 800915a:	761a      	strb	r2, [r3, #24]
      break;
 800915c:	e09c      	b.n	8009298 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800915e:	7bbb      	ldrb	r3, [r7, #14]
 8009160:	2b04      	cmp	r3, #4
 8009162:	f040 8099 	bne.w	8009298 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	220b      	movs	r2, #11
 800916a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800916c:	2302      	movs	r3, #2
 800916e:	73fb      	strb	r3, [r7, #15]
      break;
 8009170:	e092      	b.n	8009298 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	791b      	ldrb	r3, [r3, #4]
 8009176:	2200      	movs	r2, #0
 8009178:	2100      	movs	r1, #0
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f000 f8d5 	bl	800932a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009186:	b29a      	uxth	r2, r3
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2208      	movs	r2, #8
 8009190:	761a      	strb	r2, [r3, #24]

      break;
 8009192:	e086      	b.n	80092a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	791b      	ldrb	r3, [r3, #4]
 8009198:	4619      	mov	r1, r3
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f000 fc12 	bl	80099c4 <USBH_LL_GetURBState>
 80091a0:	4603      	mov	r3, r0
 80091a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80091a4:	7bbb      	ldrb	r3, [r7, #14]
 80091a6:	2b01      	cmp	r3, #1
 80091a8:	d105      	bne.n	80091b6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	220d      	movs	r2, #13
 80091ae:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80091b0:	2300      	movs	r3, #0
 80091b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091b4:	e072      	b.n	800929c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80091b6:	7bbb      	ldrb	r3, [r7, #14]
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d103      	bne.n	80091c4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	220b      	movs	r2, #11
 80091c0:	761a      	strb	r2, [r3, #24]
      break;
 80091c2:	e06b      	b.n	800929c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80091c4:	7bbb      	ldrb	r3, [r7, #14]
 80091c6:	2b05      	cmp	r3, #5
 80091c8:	d168      	bne.n	800929c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80091ca:	2303      	movs	r3, #3
 80091cc:	73fb      	strb	r3, [r7, #15]
      break;
 80091ce:	e065      	b.n	800929c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	795b      	ldrb	r3, [r3, #5]
 80091d4:	2201      	movs	r2, #1
 80091d6:	9200      	str	r2, [sp, #0]
 80091d8:	2200      	movs	r2, #0
 80091da:	2100      	movs	r1, #0
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f000 f87f 	bl	80092e0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80091e8:	b29a      	uxth	r2, r3
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	220a      	movs	r2, #10
 80091f2:	761a      	strb	r2, [r3, #24]
      break;
 80091f4:	e055      	b.n	80092a2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	795b      	ldrb	r3, [r3, #5]
 80091fa:	4619      	mov	r1, r3
 80091fc:	6878      	ldr	r0, [r7, #4]
 80091fe:	f000 fbe1 	bl	80099c4 <USBH_LL_GetURBState>
 8009202:	4603      	mov	r3, r0
 8009204:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	2b01      	cmp	r3, #1
 800920a:	d105      	bne.n	8009218 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800920c:	2300      	movs	r3, #0
 800920e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	220d      	movs	r2, #13
 8009214:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009216:	e043      	b.n	80092a0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009218:	7bbb      	ldrb	r3, [r7, #14]
 800921a:	2b02      	cmp	r3, #2
 800921c:	d103      	bne.n	8009226 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2209      	movs	r2, #9
 8009222:	761a      	strb	r2, [r3, #24]
      break;
 8009224:	e03c      	b.n	80092a0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b04      	cmp	r3, #4
 800922a:	d139      	bne.n	80092a0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220b      	movs	r2, #11
 8009230:	761a      	strb	r2, [r3, #24]
      break;
 8009232:	e035      	b.n	80092a0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	7e5b      	ldrb	r3, [r3, #25]
 8009238:	3301      	adds	r3, #1
 800923a:	b2da      	uxtb	r2, r3
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	765a      	strb	r2, [r3, #25]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	7e5b      	ldrb	r3, [r3, #25]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d806      	bhi.n	8009256 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2201      	movs	r2, #1
 8009252:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009254:	e025      	b.n	80092a2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800925c:	2106      	movs	r1, #6
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	795b      	ldrb	r3, [r3, #5]
 800926c:	4619      	mov	r1, r3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f90c 	bl	800948c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	791b      	ldrb	r3, [r3, #4]
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 f906 	bl	800948c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2200      	movs	r2, #0
 8009284:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009286:	2302      	movs	r3, #2
 8009288:	73fb      	strb	r3, [r7, #15]
      break;
 800928a:	e00a      	b.n	80092a2 <USBH_HandleControl+0x2de>

    default:
      break;
 800928c:	bf00      	nop
 800928e:	e008      	b.n	80092a2 <USBH_HandleControl+0x2de>
      break;
 8009290:	bf00      	nop
 8009292:	e006      	b.n	80092a2 <USBH_HandleControl+0x2de>
      break;
 8009294:	bf00      	nop
 8009296:	e004      	b.n	80092a2 <USBH_HandleControl+0x2de>
      break;
 8009298:	bf00      	nop
 800929a:	e002      	b.n	80092a2 <USBH_HandleControl+0x2de>
      break;
 800929c:	bf00      	nop
 800929e:	e000      	b.n	80092a2 <USBH_HandleControl+0x2de>
      break;
 80092a0:	bf00      	nop
  }

  return status;
 80092a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3710      	adds	r7, #16
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd80      	pop	{r7, pc}

080092ac <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af04      	add	r7, sp, #16
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	60b9      	str	r1, [r7, #8]
 80092b6:	4613      	mov	r3, r2
 80092b8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80092ba:	79f9      	ldrb	r1, [r7, #7]
 80092bc:	2300      	movs	r3, #0
 80092be:	9303      	str	r3, [sp, #12]
 80092c0:	2308      	movs	r3, #8
 80092c2:	9302      	str	r3, [sp, #8]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	9301      	str	r3, [sp, #4]
 80092c8:	2300      	movs	r3, #0
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	2300      	movs	r3, #0
 80092ce:	2200      	movs	r2, #0
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 fb46 	bl	8009962 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b088      	sub	sp, #32
 80092e4:	af04      	add	r7, sp, #16
 80092e6:	60f8      	str	r0, [r7, #12]
 80092e8:	60b9      	str	r1, [r7, #8]
 80092ea:	4611      	mov	r1, r2
 80092ec:	461a      	mov	r2, r3
 80092ee:	460b      	mov	r3, r1
 80092f0:	80fb      	strh	r3, [r7, #6]
 80092f2:	4613      	mov	r3, r2
 80092f4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009300:	2300      	movs	r3, #0
 8009302:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009304:	7979      	ldrb	r1, [r7, #5]
 8009306:	7e3b      	ldrb	r3, [r7, #24]
 8009308:	9303      	str	r3, [sp, #12]
 800930a:	88fb      	ldrh	r3, [r7, #6]
 800930c:	9302      	str	r3, [sp, #8]
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	9301      	str	r3, [sp, #4]
 8009312:	2301      	movs	r3, #1
 8009314:	9300      	str	r3, [sp, #0]
 8009316:	2300      	movs	r3, #0
 8009318:	2200      	movs	r2, #0
 800931a:	68f8      	ldr	r0, [r7, #12]
 800931c:	f000 fb21 	bl	8009962 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009320:	2300      	movs	r3, #0
}
 8009322:	4618      	mov	r0, r3
 8009324:	3710      	adds	r7, #16
 8009326:	46bd      	mov	sp, r7
 8009328:	bd80      	pop	{r7, pc}

0800932a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b088      	sub	sp, #32
 800932e:	af04      	add	r7, sp, #16
 8009330:	60f8      	str	r0, [r7, #12]
 8009332:	60b9      	str	r1, [r7, #8]
 8009334:	4611      	mov	r1, r2
 8009336:	461a      	mov	r2, r3
 8009338:	460b      	mov	r3, r1
 800933a:	80fb      	strh	r3, [r7, #6]
 800933c:	4613      	mov	r3, r2
 800933e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009340:	7979      	ldrb	r1, [r7, #5]
 8009342:	2300      	movs	r3, #0
 8009344:	9303      	str	r3, [sp, #12]
 8009346:	88fb      	ldrh	r3, [r7, #6]
 8009348:	9302      	str	r3, [sp, #8]
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	9301      	str	r3, [sp, #4]
 800934e:	2301      	movs	r3, #1
 8009350:	9300      	str	r3, [sp, #0]
 8009352:	2300      	movs	r3, #0
 8009354:	2201      	movs	r2, #1
 8009356:	68f8      	ldr	r0, [r7, #12]
 8009358:	f000 fb03 	bl	8009962 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800935c:	2300      	movs	r3, #0

}
 800935e:	4618      	mov	r0, r3
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009366:	b580      	push	{r7, lr}
 8009368:	b088      	sub	sp, #32
 800936a:	af04      	add	r7, sp, #16
 800936c:	60f8      	str	r0, [r7, #12]
 800936e:	60b9      	str	r1, [r7, #8]
 8009370:	4611      	mov	r1, r2
 8009372:	461a      	mov	r2, r3
 8009374:	460b      	mov	r3, r1
 8009376:	80fb      	strh	r3, [r7, #6]
 8009378:	4613      	mov	r3, r2
 800937a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009382:	2b00      	cmp	r3, #0
 8009384:	d001      	beq.n	800938a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800938a:	7979      	ldrb	r1, [r7, #5]
 800938c:	7e3b      	ldrb	r3, [r7, #24]
 800938e:	9303      	str	r3, [sp, #12]
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	9302      	str	r3, [sp, #8]
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	9301      	str	r3, [sp, #4]
 8009398:	2301      	movs	r3, #1
 800939a:	9300      	str	r3, [sp, #0]
 800939c:	2302      	movs	r3, #2
 800939e:	2200      	movs	r2, #0
 80093a0:	68f8      	ldr	r0, [r7, #12]
 80093a2:	f000 fade 	bl	8009962 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80093a6:	2300      	movs	r3, #0
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3710      	adds	r7, #16
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b088      	sub	sp, #32
 80093b4:	af04      	add	r7, sp, #16
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	4611      	mov	r1, r2
 80093bc:	461a      	mov	r2, r3
 80093be:	460b      	mov	r3, r1
 80093c0:	80fb      	strh	r3, [r7, #6]
 80093c2:	4613      	mov	r3, r2
 80093c4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80093c6:	7979      	ldrb	r1, [r7, #5]
 80093c8:	2300      	movs	r3, #0
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	88fb      	ldrh	r3, [r7, #6]
 80093ce:	9302      	str	r3, [sp, #8]
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	9301      	str	r3, [sp, #4]
 80093d4:	2301      	movs	r3, #1
 80093d6:	9300      	str	r3, [sp, #0]
 80093d8:	2302      	movs	r3, #2
 80093da:	2201      	movs	r2, #1
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f000 fac0 	bl	8009962 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80093e2:	2300      	movs	r3, #0
}
 80093e4:	4618      	mov	r0, r3
 80093e6:	3710      	adds	r7, #16
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bd80      	pop	{r7, pc}

080093ec <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af04      	add	r7, sp, #16
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	4608      	mov	r0, r1
 80093f6:	4611      	mov	r1, r2
 80093f8:	461a      	mov	r2, r3
 80093fa:	4603      	mov	r3, r0
 80093fc:	70fb      	strb	r3, [r7, #3]
 80093fe:	460b      	mov	r3, r1
 8009400:	70bb      	strb	r3, [r7, #2]
 8009402:	4613      	mov	r3, r2
 8009404:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009406:	7878      	ldrb	r0, [r7, #1]
 8009408:	78ba      	ldrb	r2, [r7, #2]
 800940a:	78f9      	ldrb	r1, [r7, #3]
 800940c:	8b3b      	ldrh	r3, [r7, #24]
 800940e:	9302      	str	r3, [sp, #8]
 8009410:	7d3b      	ldrb	r3, [r7, #20]
 8009412:	9301      	str	r3, [sp, #4]
 8009414:	7c3b      	ldrb	r3, [r7, #16]
 8009416:	9300      	str	r3, [sp, #0]
 8009418:	4603      	mov	r3, r0
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f000 fa53 	bl	80098c6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009420:	2300      	movs	r3, #0
}
 8009422:	4618      	mov	r0, r3
 8009424:	3708      	adds	r7, #8
 8009426:	46bd      	mov	sp, r7
 8009428:	bd80      	pop	{r7, pc}

0800942a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
 8009432:	460b      	mov	r3, r1
 8009434:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009436:	78fb      	ldrb	r3, [r7, #3]
 8009438:	4619      	mov	r1, r3
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f000 fa72 	bl	8009924 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009440:	2300      	movs	r3, #0
}
 8009442:	4618      	mov	r0, r3
 8009444:	3708      	adds	r7, #8
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f000 f836 	bl	80094c8 <USBH_GetFreePipe>
 800945c:	4603      	mov	r3, r0
 800945e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009460:	89fb      	ldrh	r3, [r7, #14]
 8009462:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009466:	4293      	cmp	r3, r2
 8009468:	d00a      	beq.n	8009480 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800946a:	78fa      	ldrb	r2, [r7, #3]
 800946c:	89fb      	ldrh	r3, [r7, #14]
 800946e:	f003 030f 	and.w	r3, r3, #15
 8009472:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	33e0      	adds	r3, #224	@ 0xe0
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	440b      	add	r3, r1
 800947e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009480:	89fb      	ldrh	r3, [r7, #14]
 8009482:	b2db      	uxtb	r3, r3
}
 8009484:	4618      	mov	r0, r3
 8009486:	3710      	adds	r7, #16
 8009488:	46bd      	mov	sp, r7
 800948a:	bd80      	pop	{r7, pc}

0800948c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009498:	78fb      	ldrb	r3, [r7, #3]
 800949a:	2b0f      	cmp	r3, #15
 800949c:	d80d      	bhi.n	80094ba <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800949e:	78fb      	ldrb	r3, [r7, #3]
 80094a0:	687a      	ldr	r2, [r7, #4]
 80094a2:	33e0      	adds	r3, #224	@ 0xe0
 80094a4:	009b      	lsls	r3, r3, #2
 80094a6:	4413      	add	r3, r2
 80094a8:	685a      	ldr	r2, [r3, #4]
 80094aa:	78fb      	ldrb	r3, [r7, #3]
 80094ac:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	33e0      	adds	r3, #224	@ 0xe0
 80094b4:	009b      	lsls	r3, r3, #2
 80094b6:	440b      	add	r3, r1
 80094b8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	370c      	adds	r7, #12
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr

080094c8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80094c8:	b480      	push	{r7}
 80094ca:	b085      	sub	sp, #20
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80094d0:	2300      	movs	r3, #0
 80094d2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80094d4:	2300      	movs	r3, #0
 80094d6:	73fb      	strb	r3, [r7, #15]
 80094d8:	e00f      	b.n	80094fa <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80094da:	7bfb      	ldrb	r3, [r7, #15]
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	33e0      	adds	r3, #224	@ 0xe0
 80094e0:	009b      	lsls	r3, r3, #2
 80094e2:	4413      	add	r3, r2
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d102      	bne.n	80094f4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	b29b      	uxth	r3, r3
 80094f2:	e007      	b.n	8009504 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80094f4:	7bfb      	ldrb	r3, [r7, #15]
 80094f6:	3301      	adds	r3, #1
 80094f8:	73fb      	strb	r3, [r7, #15]
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
 80094fc:	2b0f      	cmp	r3, #15
 80094fe:	d9ec      	bls.n	80094da <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009500:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009504:	4618      	mov	r0, r3
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950e:	4770      	bx	lr

08009510 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009514:	2201      	movs	r2, #1
 8009516:	490e      	ldr	r1, [pc, #56]	@ (8009550 <MX_USB_HOST_Init+0x40>)
 8009518:	480e      	ldr	r0, [pc, #56]	@ (8009554 <MX_USB_HOST_Init+0x44>)
 800951a:	f7fe fb15 	bl	8007b48 <USBH_Init>
 800951e:	4603      	mov	r3, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	d001      	beq.n	8009528 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009524:	f7f7 fdfc 	bl	8001120 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009528:	490b      	ldr	r1, [pc, #44]	@ (8009558 <MX_USB_HOST_Init+0x48>)
 800952a:	480a      	ldr	r0, [pc, #40]	@ (8009554 <MX_USB_HOST_Init+0x44>)
 800952c:	f7fe fbb9 	bl	8007ca2 <USBH_RegisterClass>
 8009530:	4603      	mov	r3, r0
 8009532:	2b00      	cmp	r3, #0
 8009534:	d001      	beq.n	800953a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009536:	f7f7 fdf3 	bl	8001120 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800953a:	4806      	ldr	r0, [pc, #24]	@ (8009554 <MX_USB_HOST_Init+0x44>)
 800953c:	f7fe fc3d 	bl	8007dba <USBH_Start>
 8009540:	4603      	mov	r3, r0
 8009542:	2b00      	cmp	r3, #0
 8009544:	d001      	beq.n	800954a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009546:	f7f7 fdeb 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800954a:	bf00      	nop
 800954c:	bd80      	pop	{r7, pc}
 800954e:	bf00      	nop
 8009550:	08009571 	.word	0x08009571
 8009554:	200001f8 	.word	0x200001f8
 8009558:	2000000c 	.word	0x2000000c

0800955c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009560:	4802      	ldr	r0, [pc, #8]	@ (800956c <MX_USB_HOST_Process+0x10>)
 8009562:	f7fe fc3b 	bl	8007ddc <USBH_Process>
}
 8009566:	bf00      	nop
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	200001f8 	.word	0x200001f8

08009570 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800957c:	78fb      	ldrb	r3, [r7, #3]
 800957e:	3b01      	subs	r3, #1
 8009580:	2b04      	cmp	r3, #4
 8009582:	d819      	bhi.n	80095b8 <USBH_UserProcess+0x48>
 8009584:	a201      	add	r2, pc, #4	@ (adr r2, 800958c <USBH_UserProcess+0x1c>)
 8009586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800958a:	bf00      	nop
 800958c:	080095b9 	.word	0x080095b9
 8009590:	080095a9 	.word	0x080095a9
 8009594:	080095b9 	.word	0x080095b9
 8009598:	080095b1 	.word	0x080095b1
 800959c:	080095a1 	.word	0x080095a1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80095a0:	4b09      	ldr	r3, [pc, #36]	@ (80095c8 <USBH_UserProcess+0x58>)
 80095a2:	2203      	movs	r2, #3
 80095a4:	701a      	strb	r2, [r3, #0]
  break;
 80095a6:	e008      	b.n	80095ba <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80095a8:	4b07      	ldr	r3, [pc, #28]	@ (80095c8 <USBH_UserProcess+0x58>)
 80095aa:	2202      	movs	r2, #2
 80095ac:	701a      	strb	r2, [r3, #0]
  break;
 80095ae:	e004      	b.n	80095ba <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80095b0:	4b05      	ldr	r3, [pc, #20]	@ (80095c8 <USBH_UserProcess+0x58>)
 80095b2:	2201      	movs	r2, #1
 80095b4:	701a      	strb	r2, [r3, #0]
  break;
 80095b6:	e000      	b.n	80095ba <USBH_UserProcess+0x4a>

  default:
  break;
 80095b8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80095ba:	bf00      	nop
 80095bc:	370c      	adds	r7, #12
 80095be:	46bd      	mov	sp, r7
 80095c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c4:	4770      	bx	lr
 80095c6:	bf00      	nop
 80095c8:	200005d0 	.word	0x200005d0

080095cc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	@ 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095d4:	f107 0314 	add.w	r3, r7, #20
 80095d8:	2200      	movs	r2, #0
 80095da:	601a      	str	r2, [r3, #0]
 80095dc:	605a      	str	r2, [r3, #4]
 80095de:	609a      	str	r2, [r3, #8]
 80095e0:	60da      	str	r2, [r3, #12]
 80095e2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80095ec:	d147      	bne.n	800967e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80095ee:	2300      	movs	r3, #0
 80095f0:	613b      	str	r3, [r7, #16]
 80095f2:	4b25      	ldr	r3, [pc, #148]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 80095f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80095f6:	4a24      	ldr	r2, [pc, #144]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 80095f8:	f043 0301 	orr.w	r3, r3, #1
 80095fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80095fe:	4b22      	ldr	r3, [pc, #136]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 8009600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009602:	f003 0301 	and.w	r3, r3, #1
 8009606:	613b      	str	r3, [r7, #16]
 8009608:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800960a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800960e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009610:	2300      	movs	r3, #0
 8009612:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009614:	2300      	movs	r3, #0
 8009616:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8009618:	f107 0314 	add.w	r3, r7, #20
 800961c:	4619      	mov	r1, r3
 800961e:	481b      	ldr	r0, [pc, #108]	@ (800968c <HAL_HCD_MspInit+0xc0>)
 8009620:	f7f8 f9cc 	bl	80019bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009624:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8009628:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800962a:	2302      	movs	r3, #2
 800962c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800962e:	2300      	movs	r3, #0
 8009630:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009632:	2300      	movs	r3, #0
 8009634:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009636:	230a      	movs	r3, #10
 8009638:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800963a:	f107 0314 	add.w	r3, r7, #20
 800963e:	4619      	mov	r1, r3
 8009640:	4812      	ldr	r0, [pc, #72]	@ (800968c <HAL_HCD_MspInit+0xc0>)
 8009642:	f7f8 f9bb 	bl	80019bc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009646:	4b10      	ldr	r3, [pc, #64]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 8009648:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800964a:	4a0f      	ldr	r2, [pc, #60]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 800964c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009650:	6353      	str	r3, [r2, #52]	@ 0x34
 8009652:	2300      	movs	r3, #0
 8009654:	60fb      	str	r3, [r7, #12]
 8009656:	4b0c      	ldr	r3, [pc, #48]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 8009658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800965a:	4a0b      	ldr	r2, [pc, #44]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 800965c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009660:	6453      	str	r3, [r2, #68]	@ 0x44
 8009662:	4b09      	ldr	r3, [pc, #36]	@ (8009688 <HAL_HCD_MspInit+0xbc>)
 8009664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009666:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800966e:	2200      	movs	r2, #0
 8009670:	2100      	movs	r1, #0
 8009672:	2043      	movs	r0, #67	@ 0x43
 8009674:	f7f8 f96b 	bl	800194e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009678:	2043      	movs	r0, #67	@ 0x43
 800967a:	f7f8 f984 	bl	8001986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800967e:	bf00      	nop
 8009680:	3728      	adds	r7, #40	@ 0x28
 8009682:	46bd      	mov	sp, r7
 8009684:	bd80      	pop	{r7, pc}
 8009686:	bf00      	nop
 8009688:	40023800 	.word	0x40023800
 800968c:	40020000 	.word	0x40020000

08009690 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800969e:	4618      	mov	r0, r3
 80096a0:	f7fe ff73 	bl	800858a <USBH_LL_IncTimer>
}
 80096a4:	bf00      	nop
 80096a6:	3708      	adds	r7, #8
 80096a8:	46bd      	mov	sp, r7
 80096aa:	bd80      	pop	{r7, pc}

080096ac <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b082      	sub	sp, #8
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80096ba:	4618      	mov	r0, r3
 80096bc:	f7fe ffab 	bl	8008616 <USBH_LL_Connect>
}
 80096c0:	bf00      	nop
 80096c2:	3708      	adds	r7, #8
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b082      	sub	sp, #8
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7fe ffb4 	bl	8008644 <USBH_LL_Disconnect>
}
 80096dc:	bf00      	nop
 80096de:	3708      	adds	r7, #8
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80096e4:	b480      	push	{r7}
 80096e6:	b083      	sub	sp, #12
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
 80096ec:	460b      	mov	r3, r1
 80096ee:	70fb      	strb	r3, [r7, #3]
 80096f0:	4613      	mov	r3, r2
 80096f2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80096f4:	bf00      	nop
 80096f6:	370c      	adds	r7, #12
 80096f8:	46bd      	mov	sp, r7
 80096fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fe:	4770      	bx	lr

08009700 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800970e:	4618      	mov	r0, r3
 8009710:	f7fe ff65 	bl	80085de <USBH_LL_PortEnabled>
}
 8009714:	bf00      	nop
 8009716:	3708      	adds	r7, #8
 8009718:	46bd      	mov	sp, r7
 800971a:	bd80      	pop	{r7, pc}

0800971c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b082      	sub	sp, #8
 8009720:	af00      	add	r7, sp, #0
 8009722:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800972a:	4618      	mov	r0, r3
 800972c:	f7fe ff65 	bl	80085fa <USBH_LL_PortDisabled>
}
 8009730:	bf00      	nop
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009746:	2b01      	cmp	r3, #1
 8009748:	d12a      	bne.n	80097a0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800974a:	4a18      	ldr	r2, [pc, #96]	@ (80097ac <USBH_LL_Init+0x74>)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a15      	ldr	r2, [pc, #84]	@ (80097ac <USBH_LL_Init+0x74>)
 8009756:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800975a:	4b14      	ldr	r3, [pc, #80]	@ (80097ac <USBH_LL_Init+0x74>)
 800975c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009760:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009762:	4b12      	ldr	r3, [pc, #72]	@ (80097ac <USBH_LL_Init+0x74>)
 8009764:	2208      	movs	r2, #8
 8009766:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009768:	4b10      	ldr	r3, [pc, #64]	@ (80097ac <USBH_LL_Init+0x74>)
 800976a:	2201      	movs	r2, #1
 800976c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800976e:	4b0f      	ldr	r3, [pc, #60]	@ (80097ac <USBH_LL_Init+0x74>)
 8009770:	2200      	movs	r2, #0
 8009772:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009774:	4b0d      	ldr	r3, [pc, #52]	@ (80097ac <USBH_LL_Init+0x74>)
 8009776:	2202      	movs	r2, #2
 8009778:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800977a:	4b0c      	ldr	r3, [pc, #48]	@ (80097ac <USBH_LL_Init+0x74>)
 800977c:	2200      	movs	r2, #0
 800977e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009780:	480a      	ldr	r0, [pc, #40]	@ (80097ac <USBH_LL_Init+0x74>)
 8009782:	f7f8 fad0 	bl	8001d26 <HAL_HCD_Init>
 8009786:	4603      	mov	r3, r0
 8009788:	2b00      	cmp	r3, #0
 800978a:	d001      	beq.n	8009790 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800978c:	f7f7 fcc8 	bl	8001120 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009790:	4806      	ldr	r0, [pc, #24]	@ (80097ac <USBH_LL_Init+0x74>)
 8009792:	f7f8 ff31 	bl	80025f8 <HAL_HCD_GetCurrentFrame>
 8009796:	4603      	mov	r3, r0
 8009798:	4619      	mov	r1, r3
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7fe fee6 	bl	800856c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80097a0:	2300      	movs	r3, #0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	200005d4 	.word	0x200005d4

080097b0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097b8:	2300      	movs	r3, #0
 80097ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097bc:	2300      	movs	r3, #0
 80097be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097c6:	4618      	mov	r0, r3
 80097c8:	f7f8 fe9e 	bl	8002508 <HAL_HCD_Start>
 80097cc:	4603      	mov	r3, r0
 80097ce:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097d0:	7bfb      	ldrb	r3, [r7, #15]
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 f95e 	bl	8009a94 <USBH_Get_USB_Status>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}

080097e6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80097e6:	b580      	push	{r7, lr}
 80097e8:	b084      	sub	sp, #16
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097f2:	2300      	movs	r3, #0
 80097f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097fc:	4618      	mov	r0, r3
 80097fe:	f7f8 fea6 	bl	800254e <HAL_HCD_Stop>
 8009802:	4603      	mov	r3, r0
 8009804:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009806:	7bfb      	ldrb	r3, [r7, #15]
 8009808:	4618      	mov	r0, r3
 800980a:	f000 f943 	bl	8009a94 <USBH_Get_USB_Status>
 800980e:	4603      	mov	r3, r0
 8009810:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009812:	7bbb      	ldrb	r3, [r7, #14]
}
 8009814:	4618      	mov	r0, r3
 8009816:	3710      	adds	r7, #16
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}

0800981c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009824:	2301      	movs	r3, #1
 8009826:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800982e:	4618      	mov	r0, r3
 8009830:	f7f8 fef0 	bl	8002614 <HAL_HCD_GetCurrentSpeed>
 8009834:	4603      	mov	r3, r0
 8009836:	2b02      	cmp	r3, #2
 8009838:	d00c      	beq.n	8009854 <USBH_LL_GetSpeed+0x38>
 800983a:	2b02      	cmp	r3, #2
 800983c:	d80d      	bhi.n	800985a <USBH_LL_GetSpeed+0x3e>
 800983e:	2b00      	cmp	r3, #0
 8009840:	d002      	beq.n	8009848 <USBH_LL_GetSpeed+0x2c>
 8009842:	2b01      	cmp	r3, #1
 8009844:	d003      	beq.n	800984e <USBH_LL_GetSpeed+0x32>
 8009846:	e008      	b.n	800985a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8009848:	2300      	movs	r3, #0
 800984a:	73fb      	strb	r3, [r7, #15]
    break;
 800984c:	e008      	b.n	8009860 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800984e:	2301      	movs	r3, #1
 8009850:	73fb      	strb	r3, [r7, #15]
    break;
 8009852:	e005      	b.n	8009860 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8009854:	2302      	movs	r3, #2
 8009856:	73fb      	strb	r3, [r7, #15]
    break;
 8009858:	e002      	b.n	8009860 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800985a:	2301      	movs	r3, #1
 800985c:	73fb      	strb	r3, [r7, #15]
    break;
 800985e:	bf00      	nop
  }
  return  speed;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b084      	sub	sp, #16
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009872:	2300      	movs	r3, #0
 8009874:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009880:	4618      	mov	r0, r3
 8009882:	f7f8 fe81 	bl	8002588 <HAL_HCD_ResetPort>
 8009886:	4603      	mov	r3, r0
 8009888:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800988a:	7bfb      	ldrb	r3, [r7, #15]
 800988c:	4618      	mov	r0, r3
 800988e:	f000 f901 	bl	8009a94 <USBH_Get_USB_Status>
 8009892:	4603      	mov	r3, r0
 8009894:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009896:	7bbb      	ldrb	r3, [r7, #14]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3710      	adds	r7, #16
 800989c:	46bd      	mov	sp, r7
 800989e:	bd80      	pop	{r7, pc}

080098a0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80098a0:	b580      	push	{r7, lr}
 80098a2:	b082      	sub	sp, #8
 80098a4:	af00      	add	r7, sp, #0
 80098a6:	6078      	str	r0, [r7, #4]
 80098a8:	460b      	mov	r3, r1
 80098aa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098b2:	78fa      	ldrb	r2, [r7, #3]
 80098b4:	4611      	mov	r1, r2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f7f8 fe89 	bl	80025ce <HAL_HCD_HC_GetXferCount>
 80098bc:	4603      	mov	r3, r0
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3708      	adds	r7, #8
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}

080098c6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80098c6:	b590      	push	{r4, r7, lr}
 80098c8:	b089      	sub	sp, #36	@ 0x24
 80098ca:	af04      	add	r7, sp, #16
 80098cc:	6078      	str	r0, [r7, #4]
 80098ce:	4608      	mov	r0, r1
 80098d0:	4611      	mov	r1, r2
 80098d2:	461a      	mov	r2, r3
 80098d4:	4603      	mov	r3, r0
 80098d6:	70fb      	strb	r3, [r7, #3]
 80098d8:	460b      	mov	r3, r1
 80098da:	70bb      	strb	r3, [r7, #2]
 80098dc:	4613      	mov	r3, r2
 80098de:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80098ee:	787c      	ldrb	r4, [r7, #1]
 80098f0:	78ba      	ldrb	r2, [r7, #2]
 80098f2:	78f9      	ldrb	r1, [r7, #3]
 80098f4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80098f6:	9302      	str	r3, [sp, #8]
 80098f8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098fc:	9301      	str	r3, [sp, #4]
 80098fe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009902:	9300      	str	r3, [sp, #0]
 8009904:	4623      	mov	r3, r4
 8009906:	f7f8 fa75 	bl	8001df4 <HAL_HCD_HC_Init>
 800990a:	4603      	mov	r3, r0
 800990c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800990e:	7bfb      	ldrb	r3, [r7, #15]
 8009910:	4618      	mov	r0, r3
 8009912:	f000 f8bf 	bl	8009a94 <USBH_Get_USB_Status>
 8009916:	4603      	mov	r3, r0
 8009918:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800991a:	7bbb      	ldrb	r3, [r7, #14]
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	bd90      	pop	{r4, r7, pc}

08009924 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b084      	sub	sp, #16
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009930:	2300      	movs	r3, #0
 8009932:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	4611      	mov	r1, r2
 8009942:	4618      	mov	r0, r3
 8009944:	f7f8 fb0e 	bl	8001f64 <HAL_HCD_HC_Halt>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	4618      	mov	r0, r3
 8009950:	f000 f8a0 	bl	8009a94 <USBH_Get_USB_Status>
 8009954:	4603      	mov	r3, r0
 8009956:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009958:	7bbb      	ldrb	r3, [r7, #14]
}
 800995a:	4618      	mov	r0, r3
 800995c:	3710      	adds	r7, #16
 800995e:	46bd      	mov	sp, r7
 8009960:	bd80      	pop	{r7, pc}

08009962 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8009962:	b590      	push	{r4, r7, lr}
 8009964:	b089      	sub	sp, #36	@ 0x24
 8009966:	af04      	add	r7, sp, #16
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	4608      	mov	r0, r1
 800996c:	4611      	mov	r1, r2
 800996e:	461a      	mov	r2, r3
 8009970:	4603      	mov	r3, r0
 8009972:	70fb      	strb	r3, [r7, #3]
 8009974:	460b      	mov	r3, r1
 8009976:	70bb      	strb	r3, [r7, #2]
 8009978:	4613      	mov	r3, r2
 800997a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800997c:	2300      	movs	r3, #0
 800997e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009980:	2300      	movs	r3, #0
 8009982:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800998a:	787c      	ldrb	r4, [r7, #1]
 800998c:	78ba      	ldrb	r2, [r7, #2]
 800998e:	78f9      	ldrb	r1, [r7, #3]
 8009990:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009994:	9303      	str	r3, [sp, #12]
 8009996:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009998:	9302      	str	r3, [sp, #8]
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	9301      	str	r3, [sp, #4]
 800999e:	f897 3020 	ldrb.w	r3, [r7, #32]
 80099a2:	9300      	str	r3, [sp, #0]
 80099a4:	4623      	mov	r3, r4
 80099a6:	f7f8 fb01 	bl	8001fac <HAL_HCD_HC_SubmitRequest>
 80099aa:	4603      	mov	r3, r0
 80099ac:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80099ae:	7bfb      	ldrb	r3, [r7, #15]
 80099b0:	4618      	mov	r0, r3
 80099b2:	f000 f86f 	bl	8009a94 <USBH_Get_USB_Status>
 80099b6:	4603      	mov	r3, r0
 80099b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80099ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3714      	adds	r7, #20
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd90      	pop	{r4, r7, pc}

080099c4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
 80099cc:	460b      	mov	r3, r1
 80099ce:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	4611      	mov	r1, r2
 80099da:	4618      	mov	r0, r3
 80099dc:	f7f8 fde2 	bl	80025a4 <HAL_HCD_HC_GetURBState>
 80099e0:	4603      	mov	r3, r0
}
 80099e2:	4618      	mov	r0, r3
 80099e4:	3708      	adds	r7, #8
 80099e6:	46bd      	mov	sp, r7
 80099e8:	bd80      	pop	{r7, pc}

080099ea <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80099ea:	b580      	push	{r7, lr}
 80099ec:	b082      	sub	sp, #8
 80099ee:	af00      	add	r7, sp, #0
 80099f0:	6078      	str	r0, [r7, #4]
 80099f2:	460b      	mov	r3, r1
 80099f4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80099fc:	2b01      	cmp	r3, #1
 80099fe:	d103      	bne.n	8009a08 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009a00:	78fb      	ldrb	r3, [r7, #3]
 8009a02:	4618      	mov	r0, r3
 8009a04:	f000 f872 	bl	8009aec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8009a08:	20c8      	movs	r0, #200	@ 0xc8
 8009a0a:	f7f7 fea1 	bl	8001750 <HAL_Delay>
  return USBH_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3708      	adds	r7, #8
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}

08009a18 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	460b      	mov	r3, r1
 8009a22:	70fb      	strb	r3, [r7, #3]
 8009a24:	4613      	mov	r3, r2
 8009a26:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009a2e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8009a30:	78fa      	ldrb	r2, [r7, #3]
 8009a32:	68f9      	ldr	r1, [r7, #12]
 8009a34:	4613      	mov	r3, r2
 8009a36:	011b      	lsls	r3, r3, #4
 8009a38:	1a9b      	subs	r3, r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	440b      	add	r3, r1
 8009a3e:	3317      	adds	r3, #23
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8009a46:	78fa      	ldrb	r2, [r7, #3]
 8009a48:	68f9      	ldr	r1, [r7, #12]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	011b      	lsls	r3, r3, #4
 8009a4e:	1a9b      	subs	r3, r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	333c      	adds	r3, #60	@ 0x3c
 8009a56:	78ba      	ldrb	r2, [r7, #2]
 8009a58:	701a      	strb	r2, [r3, #0]
 8009a5a:	e009      	b.n	8009a70 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8009a5c:	78fa      	ldrb	r2, [r7, #3]
 8009a5e:	68f9      	ldr	r1, [r7, #12]
 8009a60:	4613      	mov	r3, r2
 8009a62:	011b      	lsls	r3, r3, #4
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	009b      	lsls	r3, r3, #2
 8009a68:	440b      	add	r3, r1
 8009a6a:	333d      	adds	r3, #61	@ 0x3d
 8009a6c:	78ba      	ldrb	r2, [r7, #2]
 8009a6e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8009a70:	2300      	movs	r3, #0
}
 8009a72:	4618      	mov	r0, r3
 8009a74:	3714      	adds	r7, #20
 8009a76:	46bd      	mov	sp, r7
 8009a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7c:	4770      	bx	lr

08009a7e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8009a7e:	b580      	push	{r7, lr}
 8009a80:	b082      	sub	sp, #8
 8009a82:	af00      	add	r7, sp, #0
 8009a84:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7f7 fe62 	bl	8001750 <HAL_Delay>
}
 8009a8c:	bf00      	nop
 8009a8e:	3708      	adds	r7, #8
 8009a90:	46bd      	mov	sp, r7
 8009a92:	bd80      	pop	{r7, pc}

08009a94 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009a9e:	2300      	movs	r3, #0
 8009aa0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aa2:	79fb      	ldrb	r3, [r7, #7]
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d817      	bhi.n	8009ad8 <USBH_Get_USB_Status+0x44>
 8009aa8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ab0 <USBH_Get_USB_Status+0x1c>)
 8009aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aae:	bf00      	nop
 8009ab0:	08009ac1 	.word	0x08009ac1
 8009ab4:	08009ac7 	.word	0x08009ac7
 8009ab8:	08009acd 	.word	0x08009acd
 8009abc:	08009ad3 	.word	0x08009ad3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac4:	e00b      	b.n	8009ade <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8009ac6:	2302      	movs	r3, #2
 8009ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8009aca:	e008      	b.n	8009ade <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009acc:	2301      	movs	r3, #1
 8009ace:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad0:	e005      	b.n	8009ade <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009ad2:	2302      	movs	r3, #2
 8009ad4:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad6:	e002      	b.n	8009ade <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8009ad8:	2302      	movs	r3, #2
 8009ada:	73fb      	strb	r3, [r7, #15]
    break;
 8009adc:	bf00      	nop
  }
  return usb_status;
 8009ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3714      	adds	r7, #20
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aea:	4770      	bx	lr

08009aec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b084      	sub	sp, #16
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	4603      	mov	r3, r0
 8009af4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8009af6:	79fb      	ldrb	r3, [r7, #7]
 8009af8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8009afa:	79fb      	ldrb	r3, [r7, #7]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d102      	bne.n	8009b06 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009b00:	2300      	movs	r3, #0
 8009b02:	73fb      	strb	r3, [r7, #15]
 8009b04:	e001      	b.n	8009b0a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8009b06:	2301      	movs	r3, #1
 8009b08:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8009b0a:	7bfb      	ldrb	r3, [r7, #15]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	2101      	movs	r1, #1
 8009b10:	4803      	ldr	r0, [pc, #12]	@ (8009b20 <MX_DriverVbusFS+0x34>)
 8009b12:	f7f8 f8ef 	bl	8001cf4 <HAL_GPIO_WritePin>
}
 8009b16:	bf00      	nop
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}
 8009b1e:	bf00      	nop
 8009b20:	40020800 	.word	0x40020800

08009b24 <malloc>:
 8009b24:	4b02      	ldr	r3, [pc, #8]	@ (8009b30 <malloc+0xc>)
 8009b26:	4601      	mov	r1, r0
 8009b28:	6818      	ldr	r0, [r3, #0]
 8009b2a:	f000 b82d 	b.w	8009b88 <_malloc_r>
 8009b2e:	bf00      	nop
 8009b30:	20000038 	.word	0x20000038

08009b34 <free>:
 8009b34:	4b02      	ldr	r3, [pc, #8]	@ (8009b40 <free+0xc>)
 8009b36:	4601      	mov	r1, r0
 8009b38:	6818      	ldr	r0, [r3, #0]
 8009b3a:	f000 bb9d 	b.w	800a278 <_free_r>
 8009b3e:	bf00      	nop
 8009b40:	20000038 	.word	0x20000038

08009b44 <sbrk_aligned>:
 8009b44:	b570      	push	{r4, r5, r6, lr}
 8009b46:	4e0f      	ldr	r6, [pc, #60]	@ (8009b84 <sbrk_aligned+0x40>)
 8009b48:	460c      	mov	r4, r1
 8009b4a:	6831      	ldr	r1, [r6, #0]
 8009b4c:	4605      	mov	r5, r0
 8009b4e:	b911      	cbnz	r1, 8009b56 <sbrk_aligned+0x12>
 8009b50:	f000 fb42 	bl	800a1d8 <_sbrk_r>
 8009b54:	6030      	str	r0, [r6, #0]
 8009b56:	4621      	mov	r1, r4
 8009b58:	4628      	mov	r0, r5
 8009b5a:	f000 fb3d 	bl	800a1d8 <_sbrk_r>
 8009b5e:	1c43      	adds	r3, r0, #1
 8009b60:	d103      	bne.n	8009b6a <sbrk_aligned+0x26>
 8009b62:	f04f 34ff 	mov.w	r4, #4294967295
 8009b66:	4620      	mov	r0, r4
 8009b68:	bd70      	pop	{r4, r5, r6, pc}
 8009b6a:	1cc4      	adds	r4, r0, #3
 8009b6c:	f024 0403 	bic.w	r4, r4, #3
 8009b70:	42a0      	cmp	r0, r4
 8009b72:	d0f8      	beq.n	8009b66 <sbrk_aligned+0x22>
 8009b74:	1a21      	subs	r1, r4, r0
 8009b76:	4628      	mov	r0, r5
 8009b78:	f000 fb2e 	bl	800a1d8 <_sbrk_r>
 8009b7c:	3001      	adds	r0, #1
 8009b7e:	d1f2      	bne.n	8009b66 <sbrk_aligned+0x22>
 8009b80:	e7ef      	b.n	8009b62 <sbrk_aligned+0x1e>
 8009b82:	bf00      	nop
 8009b84:	200009b4 	.word	0x200009b4

08009b88 <_malloc_r>:
 8009b88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b8c:	1ccd      	adds	r5, r1, #3
 8009b8e:	f025 0503 	bic.w	r5, r5, #3
 8009b92:	3508      	adds	r5, #8
 8009b94:	2d0c      	cmp	r5, #12
 8009b96:	bf38      	it	cc
 8009b98:	250c      	movcc	r5, #12
 8009b9a:	2d00      	cmp	r5, #0
 8009b9c:	4606      	mov	r6, r0
 8009b9e:	db01      	blt.n	8009ba4 <_malloc_r+0x1c>
 8009ba0:	42a9      	cmp	r1, r5
 8009ba2:	d904      	bls.n	8009bae <_malloc_r+0x26>
 8009ba4:	230c      	movs	r3, #12
 8009ba6:	6033      	str	r3, [r6, #0]
 8009ba8:	2000      	movs	r0, #0
 8009baa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009c84 <_malloc_r+0xfc>
 8009bb2:	f000 f869 	bl	8009c88 <__malloc_lock>
 8009bb6:	f8d8 3000 	ldr.w	r3, [r8]
 8009bba:	461c      	mov	r4, r3
 8009bbc:	bb44      	cbnz	r4, 8009c10 <_malloc_r+0x88>
 8009bbe:	4629      	mov	r1, r5
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	f7ff ffbf 	bl	8009b44 <sbrk_aligned>
 8009bc6:	1c43      	adds	r3, r0, #1
 8009bc8:	4604      	mov	r4, r0
 8009bca:	d158      	bne.n	8009c7e <_malloc_r+0xf6>
 8009bcc:	f8d8 4000 	ldr.w	r4, [r8]
 8009bd0:	4627      	mov	r7, r4
 8009bd2:	2f00      	cmp	r7, #0
 8009bd4:	d143      	bne.n	8009c5e <_malloc_r+0xd6>
 8009bd6:	2c00      	cmp	r4, #0
 8009bd8:	d04b      	beq.n	8009c72 <_malloc_r+0xea>
 8009bda:	6823      	ldr	r3, [r4, #0]
 8009bdc:	4639      	mov	r1, r7
 8009bde:	4630      	mov	r0, r6
 8009be0:	eb04 0903 	add.w	r9, r4, r3
 8009be4:	f000 faf8 	bl	800a1d8 <_sbrk_r>
 8009be8:	4581      	cmp	r9, r0
 8009bea:	d142      	bne.n	8009c72 <_malloc_r+0xea>
 8009bec:	6821      	ldr	r1, [r4, #0]
 8009bee:	1a6d      	subs	r5, r5, r1
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	4630      	mov	r0, r6
 8009bf4:	f7ff ffa6 	bl	8009b44 <sbrk_aligned>
 8009bf8:	3001      	adds	r0, #1
 8009bfa:	d03a      	beq.n	8009c72 <_malloc_r+0xea>
 8009bfc:	6823      	ldr	r3, [r4, #0]
 8009bfe:	442b      	add	r3, r5
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	f8d8 3000 	ldr.w	r3, [r8]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	bb62      	cbnz	r2, 8009c64 <_malloc_r+0xdc>
 8009c0a:	f8c8 7000 	str.w	r7, [r8]
 8009c0e:	e00f      	b.n	8009c30 <_malloc_r+0xa8>
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	1b52      	subs	r2, r2, r5
 8009c14:	d420      	bmi.n	8009c58 <_malloc_r+0xd0>
 8009c16:	2a0b      	cmp	r2, #11
 8009c18:	d917      	bls.n	8009c4a <_malloc_r+0xc2>
 8009c1a:	1961      	adds	r1, r4, r5
 8009c1c:	42a3      	cmp	r3, r4
 8009c1e:	6025      	str	r5, [r4, #0]
 8009c20:	bf18      	it	ne
 8009c22:	6059      	strne	r1, [r3, #4]
 8009c24:	6863      	ldr	r3, [r4, #4]
 8009c26:	bf08      	it	eq
 8009c28:	f8c8 1000 	streq.w	r1, [r8]
 8009c2c:	5162      	str	r2, [r4, r5]
 8009c2e:	604b      	str	r3, [r1, #4]
 8009c30:	4630      	mov	r0, r6
 8009c32:	f000 f82f 	bl	8009c94 <__malloc_unlock>
 8009c36:	f104 000b 	add.w	r0, r4, #11
 8009c3a:	1d23      	adds	r3, r4, #4
 8009c3c:	f020 0007 	bic.w	r0, r0, #7
 8009c40:	1ac2      	subs	r2, r0, r3
 8009c42:	bf1c      	itt	ne
 8009c44:	1a1b      	subne	r3, r3, r0
 8009c46:	50a3      	strne	r3, [r4, r2]
 8009c48:	e7af      	b.n	8009baa <_malloc_r+0x22>
 8009c4a:	6862      	ldr	r2, [r4, #4]
 8009c4c:	42a3      	cmp	r3, r4
 8009c4e:	bf0c      	ite	eq
 8009c50:	f8c8 2000 	streq.w	r2, [r8]
 8009c54:	605a      	strne	r2, [r3, #4]
 8009c56:	e7eb      	b.n	8009c30 <_malloc_r+0xa8>
 8009c58:	4623      	mov	r3, r4
 8009c5a:	6864      	ldr	r4, [r4, #4]
 8009c5c:	e7ae      	b.n	8009bbc <_malloc_r+0x34>
 8009c5e:	463c      	mov	r4, r7
 8009c60:	687f      	ldr	r7, [r7, #4]
 8009c62:	e7b6      	b.n	8009bd2 <_malloc_r+0x4a>
 8009c64:	461a      	mov	r2, r3
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	42a3      	cmp	r3, r4
 8009c6a:	d1fb      	bne.n	8009c64 <_malloc_r+0xdc>
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	6053      	str	r3, [r2, #4]
 8009c70:	e7de      	b.n	8009c30 <_malloc_r+0xa8>
 8009c72:	230c      	movs	r3, #12
 8009c74:	6033      	str	r3, [r6, #0]
 8009c76:	4630      	mov	r0, r6
 8009c78:	f000 f80c 	bl	8009c94 <__malloc_unlock>
 8009c7c:	e794      	b.n	8009ba8 <_malloc_r+0x20>
 8009c7e:	6005      	str	r5, [r0, #0]
 8009c80:	e7d6      	b.n	8009c30 <_malloc_r+0xa8>
 8009c82:	bf00      	nop
 8009c84:	200009b8 	.word	0x200009b8

08009c88 <__malloc_lock>:
 8009c88:	4801      	ldr	r0, [pc, #4]	@ (8009c90 <__malloc_lock+0x8>)
 8009c8a:	f000 baf2 	b.w	800a272 <__retarget_lock_acquire_recursive>
 8009c8e:	bf00      	nop
 8009c90:	20000afc 	.word	0x20000afc

08009c94 <__malloc_unlock>:
 8009c94:	4801      	ldr	r0, [pc, #4]	@ (8009c9c <__malloc_unlock+0x8>)
 8009c96:	f000 baed 	b.w	800a274 <__retarget_lock_release_recursive>
 8009c9a:	bf00      	nop
 8009c9c:	20000afc 	.word	0x20000afc

08009ca0 <std>:
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	b510      	push	{r4, lr}
 8009ca4:	4604      	mov	r4, r0
 8009ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8009caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009cae:	6083      	str	r3, [r0, #8]
 8009cb0:	8181      	strh	r1, [r0, #12]
 8009cb2:	6643      	str	r3, [r0, #100]	@ 0x64
 8009cb4:	81c2      	strh	r2, [r0, #14]
 8009cb6:	6183      	str	r3, [r0, #24]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	2208      	movs	r2, #8
 8009cbc:	305c      	adds	r0, #92	@ 0x5c
 8009cbe:	f000 fa4f 	bl	800a160 <memset>
 8009cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8009cf8 <std+0x58>)
 8009cc4:	6263      	str	r3, [r4, #36]	@ 0x24
 8009cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8009cfc <std+0x5c>)
 8009cc8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009cca:	4b0d      	ldr	r3, [pc, #52]	@ (8009d00 <std+0x60>)
 8009ccc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009cce:	4b0d      	ldr	r3, [pc, #52]	@ (8009d04 <std+0x64>)
 8009cd0:	6323      	str	r3, [r4, #48]	@ 0x30
 8009cd2:	4b0d      	ldr	r3, [pc, #52]	@ (8009d08 <std+0x68>)
 8009cd4:	6224      	str	r4, [r4, #32]
 8009cd6:	429c      	cmp	r4, r3
 8009cd8:	d006      	beq.n	8009ce8 <std+0x48>
 8009cda:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009cde:	4294      	cmp	r4, r2
 8009ce0:	d002      	beq.n	8009ce8 <std+0x48>
 8009ce2:	33d0      	adds	r3, #208	@ 0xd0
 8009ce4:	429c      	cmp	r4, r3
 8009ce6:	d105      	bne.n	8009cf4 <std+0x54>
 8009ce8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cf0:	f000 babe 	b.w	800a270 <__retarget_lock_init_recursive>
 8009cf4:	bd10      	pop	{r4, pc}
 8009cf6:	bf00      	nop
 8009cf8:	08009fb1 	.word	0x08009fb1
 8009cfc:	08009fd3 	.word	0x08009fd3
 8009d00:	0800a00b 	.word	0x0800a00b
 8009d04:	0800a02f 	.word	0x0800a02f
 8009d08:	200009bc 	.word	0x200009bc

08009d0c <stdio_exit_handler>:
 8009d0c:	4a02      	ldr	r2, [pc, #8]	@ (8009d18 <stdio_exit_handler+0xc>)
 8009d0e:	4903      	ldr	r1, [pc, #12]	@ (8009d1c <stdio_exit_handler+0x10>)
 8009d10:	4803      	ldr	r0, [pc, #12]	@ (8009d20 <stdio_exit_handler+0x14>)
 8009d12:	f000 b869 	b.w	8009de8 <_fwalk_sglue>
 8009d16:	bf00      	nop
 8009d18:	2000002c 	.word	0x2000002c
 8009d1c:	0800a9b1 	.word	0x0800a9b1
 8009d20:	2000003c 	.word	0x2000003c

08009d24 <cleanup_stdio>:
 8009d24:	6841      	ldr	r1, [r0, #4]
 8009d26:	4b0c      	ldr	r3, [pc, #48]	@ (8009d58 <cleanup_stdio+0x34>)
 8009d28:	4299      	cmp	r1, r3
 8009d2a:	b510      	push	{r4, lr}
 8009d2c:	4604      	mov	r4, r0
 8009d2e:	d001      	beq.n	8009d34 <cleanup_stdio+0x10>
 8009d30:	f000 fe3e 	bl	800a9b0 <_fflush_r>
 8009d34:	68a1      	ldr	r1, [r4, #8]
 8009d36:	4b09      	ldr	r3, [pc, #36]	@ (8009d5c <cleanup_stdio+0x38>)
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d002      	beq.n	8009d42 <cleanup_stdio+0x1e>
 8009d3c:	4620      	mov	r0, r4
 8009d3e:	f000 fe37 	bl	800a9b0 <_fflush_r>
 8009d42:	68e1      	ldr	r1, [r4, #12]
 8009d44:	4b06      	ldr	r3, [pc, #24]	@ (8009d60 <cleanup_stdio+0x3c>)
 8009d46:	4299      	cmp	r1, r3
 8009d48:	d004      	beq.n	8009d54 <cleanup_stdio+0x30>
 8009d4a:	4620      	mov	r0, r4
 8009d4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d50:	f000 be2e 	b.w	800a9b0 <_fflush_r>
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	bf00      	nop
 8009d58:	200009bc 	.word	0x200009bc
 8009d5c:	20000a24 	.word	0x20000a24
 8009d60:	20000a8c 	.word	0x20000a8c

08009d64 <global_stdio_init.part.0>:
 8009d64:	b510      	push	{r4, lr}
 8009d66:	4b0b      	ldr	r3, [pc, #44]	@ (8009d94 <global_stdio_init.part.0+0x30>)
 8009d68:	4c0b      	ldr	r4, [pc, #44]	@ (8009d98 <global_stdio_init.part.0+0x34>)
 8009d6a:	4a0c      	ldr	r2, [pc, #48]	@ (8009d9c <global_stdio_init.part.0+0x38>)
 8009d6c:	601a      	str	r2, [r3, #0]
 8009d6e:	4620      	mov	r0, r4
 8009d70:	2200      	movs	r2, #0
 8009d72:	2104      	movs	r1, #4
 8009d74:	f7ff ff94 	bl	8009ca0 <std>
 8009d78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009d7c:	2201      	movs	r2, #1
 8009d7e:	2109      	movs	r1, #9
 8009d80:	f7ff ff8e 	bl	8009ca0 <std>
 8009d84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009d88:	2202      	movs	r2, #2
 8009d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d8e:	2112      	movs	r1, #18
 8009d90:	f7ff bf86 	b.w	8009ca0 <std>
 8009d94:	20000af4 	.word	0x20000af4
 8009d98:	200009bc 	.word	0x200009bc
 8009d9c:	08009d0d 	.word	0x08009d0d

08009da0 <__sfp_lock_acquire>:
 8009da0:	4801      	ldr	r0, [pc, #4]	@ (8009da8 <__sfp_lock_acquire+0x8>)
 8009da2:	f000 ba66 	b.w	800a272 <__retarget_lock_acquire_recursive>
 8009da6:	bf00      	nop
 8009da8:	20000afd 	.word	0x20000afd

08009dac <__sfp_lock_release>:
 8009dac:	4801      	ldr	r0, [pc, #4]	@ (8009db4 <__sfp_lock_release+0x8>)
 8009dae:	f000 ba61 	b.w	800a274 <__retarget_lock_release_recursive>
 8009db2:	bf00      	nop
 8009db4:	20000afd 	.word	0x20000afd

08009db8 <__sinit>:
 8009db8:	b510      	push	{r4, lr}
 8009dba:	4604      	mov	r4, r0
 8009dbc:	f7ff fff0 	bl	8009da0 <__sfp_lock_acquire>
 8009dc0:	6a23      	ldr	r3, [r4, #32]
 8009dc2:	b11b      	cbz	r3, 8009dcc <__sinit+0x14>
 8009dc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009dc8:	f7ff bff0 	b.w	8009dac <__sfp_lock_release>
 8009dcc:	4b04      	ldr	r3, [pc, #16]	@ (8009de0 <__sinit+0x28>)
 8009dce:	6223      	str	r3, [r4, #32]
 8009dd0:	4b04      	ldr	r3, [pc, #16]	@ (8009de4 <__sinit+0x2c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1f5      	bne.n	8009dc4 <__sinit+0xc>
 8009dd8:	f7ff ffc4 	bl	8009d64 <global_stdio_init.part.0>
 8009ddc:	e7f2      	b.n	8009dc4 <__sinit+0xc>
 8009dde:	bf00      	nop
 8009de0:	08009d25 	.word	0x08009d25
 8009de4:	20000af4 	.word	0x20000af4

08009de8 <_fwalk_sglue>:
 8009de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dec:	4607      	mov	r7, r0
 8009dee:	4688      	mov	r8, r1
 8009df0:	4614      	mov	r4, r2
 8009df2:	2600      	movs	r6, #0
 8009df4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009df8:	f1b9 0901 	subs.w	r9, r9, #1
 8009dfc:	d505      	bpl.n	8009e0a <_fwalk_sglue+0x22>
 8009dfe:	6824      	ldr	r4, [r4, #0]
 8009e00:	2c00      	cmp	r4, #0
 8009e02:	d1f7      	bne.n	8009df4 <_fwalk_sglue+0xc>
 8009e04:	4630      	mov	r0, r6
 8009e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e0a:	89ab      	ldrh	r3, [r5, #12]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d907      	bls.n	8009e20 <_fwalk_sglue+0x38>
 8009e10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e14:	3301      	adds	r3, #1
 8009e16:	d003      	beq.n	8009e20 <_fwalk_sglue+0x38>
 8009e18:	4629      	mov	r1, r5
 8009e1a:	4638      	mov	r0, r7
 8009e1c:	47c0      	blx	r8
 8009e1e:	4306      	orrs	r6, r0
 8009e20:	3568      	adds	r5, #104	@ 0x68
 8009e22:	e7e9      	b.n	8009df8 <_fwalk_sglue+0x10>

08009e24 <iprintf>:
 8009e24:	b40f      	push	{r0, r1, r2, r3}
 8009e26:	b507      	push	{r0, r1, r2, lr}
 8009e28:	4906      	ldr	r1, [pc, #24]	@ (8009e44 <iprintf+0x20>)
 8009e2a:	ab04      	add	r3, sp, #16
 8009e2c:	6808      	ldr	r0, [r1, #0]
 8009e2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e32:	6881      	ldr	r1, [r0, #8]
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	f000 fa93 	bl	800a360 <_vfiprintf_r>
 8009e3a:	b003      	add	sp, #12
 8009e3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e40:	b004      	add	sp, #16
 8009e42:	4770      	bx	lr
 8009e44:	20000038 	.word	0x20000038

08009e48 <setvbuf>:
 8009e48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009e4c:	461d      	mov	r5, r3
 8009e4e:	4b57      	ldr	r3, [pc, #348]	@ (8009fac <setvbuf+0x164>)
 8009e50:	681f      	ldr	r7, [r3, #0]
 8009e52:	4604      	mov	r4, r0
 8009e54:	460e      	mov	r6, r1
 8009e56:	4690      	mov	r8, r2
 8009e58:	b127      	cbz	r7, 8009e64 <setvbuf+0x1c>
 8009e5a:	6a3b      	ldr	r3, [r7, #32]
 8009e5c:	b913      	cbnz	r3, 8009e64 <setvbuf+0x1c>
 8009e5e:	4638      	mov	r0, r7
 8009e60:	f7ff ffaa 	bl	8009db8 <__sinit>
 8009e64:	f1b8 0f02 	cmp.w	r8, #2
 8009e68:	d006      	beq.n	8009e78 <setvbuf+0x30>
 8009e6a:	f1b8 0f01 	cmp.w	r8, #1
 8009e6e:	f200 809a 	bhi.w	8009fa6 <setvbuf+0x15e>
 8009e72:	2d00      	cmp	r5, #0
 8009e74:	f2c0 8097 	blt.w	8009fa6 <setvbuf+0x15e>
 8009e78:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009e7a:	07d9      	lsls	r1, r3, #31
 8009e7c:	d405      	bmi.n	8009e8a <setvbuf+0x42>
 8009e7e:	89a3      	ldrh	r3, [r4, #12]
 8009e80:	059a      	lsls	r2, r3, #22
 8009e82:	d402      	bmi.n	8009e8a <setvbuf+0x42>
 8009e84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e86:	f000 f9f4 	bl	800a272 <__retarget_lock_acquire_recursive>
 8009e8a:	4621      	mov	r1, r4
 8009e8c:	4638      	mov	r0, r7
 8009e8e:	f000 fd8f 	bl	800a9b0 <_fflush_r>
 8009e92:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009e94:	b141      	cbz	r1, 8009ea8 <setvbuf+0x60>
 8009e96:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009e9a:	4299      	cmp	r1, r3
 8009e9c:	d002      	beq.n	8009ea4 <setvbuf+0x5c>
 8009e9e:	4638      	mov	r0, r7
 8009ea0:	f000 f9ea 	bl	800a278 <_free_r>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	61a3      	str	r3, [r4, #24]
 8009eac:	6063      	str	r3, [r4, #4]
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	061b      	lsls	r3, r3, #24
 8009eb2:	d503      	bpl.n	8009ebc <setvbuf+0x74>
 8009eb4:	6921      	ldr	r1, [r4, #16]
 8009eb6:	4638      	mov	r0, r7
 8009eb8:	f000 f9de 	bl	800a278 <_free_r>
 8009ebc:	89a3      	ldrh	r3, [r4, #12]
 8009ebe:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009ec2:	f023 0303 	bic.w	r3, r3, #3
 8009ec6:	f1b8 0f02 	cmp.w	r8, #2
 8009eca:	81a3      	strh	r3, [r4, #12]
 8009ecc:	d061      	beq.n	8009f92 <setvbuf+0x14a>
 8009ece:	ab01      	add	r3, sp, #4
 8009ed0:	466a      	mov	r2, sp
 8009ed2:	4621      	mov	r1, r4
 8009ed4:	4638      	mov	r0, r7
 8009ed6:	f000 fd93 	bl	800aa00 <__swhatbuf_r>
 8009eda:	89a3      	ldrh	r3, [r4, #12]
 8009edc:	4318      	orrs	r0, r3
 8009ede:	81a0      	strh	r0, [r4, #12]
 8009ee0:	bb2d      	cbnz	r5, 8009f2e <setvbuf+0xe6>
 8009ee2:	9d00      	ldr	r5, [sp, #0]
 8009ee4:	4628      	mov	r0, r5
 8009ee6:	f7ff fe1d 	bl	8009b24 <malloc>
 8009eea:	4606      	mov	r6, r0
 8009eec:	2800      	cmp	r0, #0
 8009eee:	d152      	bne.n	8009f96 <setvbuf+0x14e>
 8009ef0:	f8dd 9000 	ldr.w	r9, [sp]
 8009ef4:	45a9      	cmp	r9, r5
 8009ef6:	d140      	bne.n	8009f7a <setvbuf+0x132>
 8009ef8:	f04f 35ff 	mov.w	r5, #4294967295
 8009efc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f00:	f043 0202 	orr.w	r2, r3, #2
 8009f04:	81a2      	strh	r2, [r4, #12]
 8009f06:	2200      	movs	r2, #0
 8009f08:	60a2      	str	r2, [r4, #8]
 8009f0a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009f0e:	6022      	str	r2, [r4, #0]
 8009f10:	6122      	str	r2, [r4, #16]
 8009f12:	2201      	movs	r2, #1
 8009f14:	6162      	str	r2, [r4, #20]
 8009f16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f18:	07d6      	lsls	r6, r2, #31
 8009f1a:	d404      	bmi.n	8009f26 <setvbuf+0xde>
 8009f1c:	0598      	lsls	r0, r3, #22
 8009f1e:	d402      	bmi.n	8009f26 <setvbuf+0xde>
 8009f20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009f22:	f000 f9a7 	bl	800a274 <__retarget_lock_release_recursive>
 8009f26:	4628      	mov	r0, r5
 8009f28:	b003      	add	sp, #12
 8009f2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f2e:	2e00      	cmp	r6, #0
 8009f30:	d0d8      	beq.n	8009ee4 <setvbuf+0x9c>
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	b913      	cbnz	r3, 8009f3c <setvbuf+0xf4>
 8009f36:	4638      	mov	r0, r7
 8009f38:	f7ff ff3e 	bl	8009db8 <__sinit>
 8009f3c:	f1b8 0f01 	cmp.w	r8, #1
 8009f40:	bf08      	it	eq
 8009f42:	89a3      	ldrheq	r3, [r4, #12]
 8009f44:	6026      	str	r6, [r4, #0]
 8009f46:	bf04      	itt	eq
 8009f48:	f043 0301 	orreq.w	r3, r3, #1
 8009f4c:	81a3      	strheq	r3, [r4, #12]
 8009f4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009f52:	f013 0208 	ands.w	r2, r3, #8
 8009f56:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009f5a:	d01e      	beq.n	8009f9a <setvbuf+0x152>
 8009f5c:	07d9      	lsls	r1, r3, #31
 8009f5e:	bf41      	itttt	mi
 8009f60:	2200      	movmi	r2, #0
 8009f62:	426d      	negmi	r5, r5
 8009f64:	60a2      	strmi	r2, [r4, #8]
 8009f66:	61a5      	strmi	r5, [r4, #24]
 8009f68:	bf58      	it	pl
 8009f6a:	60a5      	strpl	r5, [r4, #8]
 8009f6c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009f6e:	07d2      	lsls	r2, r2, #31
 8009f70:	d401      	bmi.n	8009f76 <setvbuf+0x12e>
 8009f72:	059b      	lsls	r3, r3, #22
 8009f74:	d513      	bpl.n	8009f9e <setvbuf+0x156>
 8009f76:	2500      	movs	r5, #0
 8009f78:	e7d5      	b.n	8009f26 <setvbuf+0xde>
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	f7ff fdd2 	bl	8009b24 <malloc>
 8009f80:	4606      	mov	r6, r0
 8009f82:	2800      	cmp	r0, #0
 8009f84:	d0b8      	beq.n	8009ef8 <setvbuf+0xb0>
 8009f86:	89a3      	ldrh	r3, [r4, #12]
 8009f88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f8c:	81a3      	strh	r3, [r4, #12]
 8009f8e:	464d      	mov	r5, r9
 8009f90:	e7cf      	b.n	8009f32 <setvbuf+0xea>
 8009f92:	2500      	movs	r5, #0
 8009f94:	e7b2      	b.n	8009efc <setvbuf+0xb4>
 8009f96:	46a9      	mov	r9, r5
 8009f98:	e7f5      	b.n	8009f86 <setvbuf+0x13e>
 8009f9a:	60a2      	str	r2, [r4, #8]
 8009f9c:	e7e6      	b.n	8009f6c <setvbuf+0x124>
 8009f9e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fa0:	f000 f968 	bl	800a274 <__retarget_lock_release_recursive>
 8009fa4:	e7e7      	b.n	8009f76 <setvbuf+0x12e>
 8009fa6:	f04f 35ff 	mov.w	r5, #4294967295
 8009faa:	e7bc      	b.n	8009f26 <setvbuf+0xde>
 8009fac:	20000038 	.word	0x20000038

08009fb0 <__sread>:
 8009fb0:	b510      	push	{r4, lr}
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fb8:	f000 f8fc 	bl	800a1b4 <_read_r>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	bfab      	itete	ge
 8009fc0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8009fc4:	181b      	addge	r3, r3, r0
 8009fc6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009fca:	bfac      	ite	ge
 8009fcc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009fce:	81a3      	strhlt	r3, [r4, #12]
 8009fd0:	bd10      	pop	{r4, pc}

08009fd2 <__swrite>:
 8009fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd6:	461f      	mov	r7, r3
 8009fd8:	898b      	ldrh	r3, [r1, #12]
 8009fda:	05db      	lsls	r3, r3, #23
 8009fdc:	4605      	mov	r5, r0
 8009fde:	460c      	mov	r4, r1
 8009fe0:	4616      	mov	r6, r2
 8009fe2:	d505      	bpl.n	8009ff0 <__swrite+0x1e>
 8009fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009fe8:	2302      	movs	r3, #2
 8009fea:	2200      	movs	r2, #0
 8009fec:	f000 f8d0 	bl	800a190 <_lseek_r>
 8009ff0:	89a3      	ldrh	r3, [r4, #12]
 8009ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ff6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	4632      	mov	r2, r6
 8009ffe:	463b      	mov	r3, r7
 800a000:	4628      	mov	r0, r5
 800a002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a006:	f000 b8f7 	b.w	800a1f8 <_write_r>

0800a00a <__sseek>:
 800a00a:	b510      	push	{r4, lr}
 800a00c:	460c      	mov	r4, r1
 800a00e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a012:	f000 f8bd 	bl	800a190 <_lseek_r>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	89a3      	ldrh	r3, [r4, #12]
 800a01a:	bf15      	itete	ne
 800a01c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a01e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a022:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a026:	81a3      	strheq	r3, [r4, #12]
 800a028:	bf18      	it	ne
 800a02a:	81a3      	strhne	r3, [r4, #12]
 800a02c:	bd10      	pop	{r4, pc}

0800a02e <__sclose>:
 800a02e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a032:	f000 b89d 	b.w	800a170 <_close_r>

0800a036 <__swbuf_r>:
 800a036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a038:	460e      	mov	r6, r1
 800a03a:	4614      	mov	r4, r2
 800a03c:	4605      	mov	r5, r0
 800a03e:	b118      	cbz	r0, 800a048 <__swbuf_r+0x12>
 800a040:	6a03      	ldr	r3, [r0, #32]
 800a042:	b90b      	cbnz	r3, 800a048 <__swbuf_r+0x12>
 800a044:	f7ff feb8 	bl	8009db8 <__sinit>
 800a048:	69a3      	ldr	r3, [r4, #24]
 800a04a:	60a3      	str	r3, [r4, #8]
 800a04c:	89a3      	ldrh	r3, [r4, #12]
 800a04e:	071a      	lsls	r2, r3, #28
 800a050:	d501      	bpl.n	800a056 <__swbuf_r+0x20>
 800a052:	6923      	ldr	r3, [r4, #16]
 800a054:	b943      	cbnz	r3, 800a068 <__swbuf_r+0x32>
 800a056:	4621      	mov	r1, r4
 800a058:	4628      	mov	r0, r5
 800a05a:	f000 f82b 	bl	800a0b4 <__swsetup_r>
 800a05e:	b118      	cbz	r0, 800a068 <__swbuf_r+0x32>
 800a060:	f04f 37ff 	mov.w	r7, #4294967295
 800a064:	4638      	mov	r0, r7
 800a066:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	6922      	ldr	r2, [r4, #16]
 800a06c:	1a98      	subs	r0, r3, r2
 800a06e:	6963      	ldr	r3, [r4, #20]
 800a070:	b2f6      	uxtb	r6, r6
 800a072:	4283      	cmp	r3, r0
 800a074:	4637      	mov	r7, r6
 800a076:	dc05      	bgt.n	800a084 <__swbuf_r+0x4e>
 800a078:	4621      	mov	r1, r4
 800a07a:	4628      	mov	r0, r5
 800a07c:	f000 fc98 	bl	800a9b0 <_fflush_r>
 800a080:	2800      	cmp	r0, #0
 800a082:	d1ed      	bne.n	800a060 <__swbuf_r+0x2a>
 800a084:	68a3      	ldr	r3, [r4, #8]
 800a086:	3b01      	subs	r3, #1
 800a088:	60a3      	str	r3, [r4, #8]
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	1c5a      	adds	r2, r3, #1
 800a08e:	6022      	str	r2, [r4, #0]
 800a090:	701e      	strb	r6, [r3, #0]
 800a092:	6962      	ldr	r2, [r4, #20]
 800a094:	1c43      	adds	r3, r0, #1
 800a096:	429a      	cmp	r2, r3
 800a098:	d004      	beq.n	800a0a4 <__swbuf_r+0x6e>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	07db      	lsls	r3, r3, #31
 800a09e:	d5e1      	bpl.n	800a064 <__swbuf_r+0x2e>
 800a0a0:	2e0a      	cmp	r6, #10
 800a0a2:	d1df      	bne.n	800a064 <__swbuf_r+0x2e>
 800a0a4:	4621      	mov	r1, r4
 800a0a6:	4628      	mov	r0, r5
 800a0a8:	f000 fc82 	bl	800a9b0 <_fflush_r>
 800a0ac:	2800      	cmp	r0, #0
 800a0ae:	d0d9      	beq.n	800a064 <__swbuf_r+0x2e>
 800a0b0:	e7d6      	b.n	800a060 <__swbuf_r+0x2a>
	...

0800a0b4 <__swsetup_r>:
 800a0b4:	b538      	push	{r3, r4, r5, lr}
 800a0b6:	4b29      	ldr	r3, [pc, #164]	@ (800a15c <__swsetup_r+0xa8>)
 800a0b8:	4605      	mov	r5, r0
 800a0ba:	6818      	ldr	r0, [r3, #0]
 800a0bc:	460c      	mov	r4, r1
 800a0be:	b118      	cbz	r0, 800a0c8 <__swsetup_r+0x14>
 800a0c0:	6a03      	ldr	r3, [r0, #32]
 800a0c2:	b90b      	cbnz	r3, 800a0c8 <__swsetup_r+0x14>
 800a0c4:	f7ff fe78 	bl	8009db8 <__sinit>
 800a0c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0cc:	0719      	lsls	r1, r3, #28
 800a0ce:	d422      	bmi.n	800a116 <__swsetup_r+0x62>
 800a0d0:	06da      	lsls	r2, r3, #27
 800a0d2:	d407      	bmi.n	800a0e4 <__swsetup_r+0x30>
 800a0d4:	2209      	movs	r2, #9
 800a0d6:	602a      	str	r2, [r5, #0]
 800a0d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a0dc:	81a3      	strh	r3, [r4, #12]
 800a0de:	f04f 30ff 	mov.w	r0, #4294967295
 800a0e2:	e033      	b.n	800a14c <__swsetup_r+0x98>
 800a0e4:	0758      	lsls	r0, r3, #29
 800a0e6:	d512      	bpl.n	800a10e <__swsetup_r+0x5a>
 800a0e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0ea:	b141      	cbz	r1, 800a0fe <__swsetup_r+0x4a>
 800a0ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0f0:	4299      	cmp	r1, r3
 800a0f2:	d002      	beq.n	800a0fa <__swsetup_r+0x46>
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	f000 f8bf 	bl	800a278 <_free_r>
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a104:	81a3      	strh	r3, [r4, #12]
 800a106:	2300      	movs	r3, #0
 800a108:	6063      	str	r3, [r4, #4]
 800a10a:	6923      	ldr	r3, [r4, #16]
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	89a3      	ldrh	r3, [r4, #12]
 800a110:	f043 0308 	orr.w	r3, r3, #8
 800a114:	81a3      	strh	r3, [r4, #12]
 800a116:	6923      	ldr	r3, [r4, #16]
 800a118:	b94b      	cbnz	r3, 800a12e <__swsetup_r+0x7a>
 800a11a:	89a3      	ldrh	r3, [r4, #12]
 800a11c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a120:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a124:	d003      	beq.n	800a12e <__swsetup_r+0x7a>
 800a126:	4621      	mov	r1, r4
 800a128:	4628      	mov	r0, r5
 800a12a:	f000 fc8f 	bl	800aa4c <__smakebuf_r>
 800a12e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a132:	f013 0201 	ands.w	r2, r3, #1
 800a136:	d00a      	beq.n	800a14e <__swsetup_r+0x9a>
 800a138:	2200      	movs	r2, #0
 800a13a:	60a2      	str	r2, [r4, #8]
 800a13c:	6962      	ldr	r2, [r4, #20]
 800a13e:	4252      	negs	r2, r2
 800a140:	61a2      	str	r2, [r4, #24]
 800a142:	6922      	ldr	r2, [r4, #16]
 800a144:	b942      	cbnz	r2, 800a158 <__swsetup_r+0xa4>
 800a146:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a14a:	d1c5      	bne.n	800a0d8 <__swsetup_r+0x24>
 800a14c:	bd38      	pop	{r3, r4, r5, pc}
 800a14e:	0799      	lsls	r1, r3, #30
 800a150:	bf58      	it	pl
 800a152:	6962      	ldrpl	r2, [r4, #20]
 800a154:	60a2      	str	r2, [r4, #8]
 800a156:	e7f4      	b.n	800a142 <__swsetup_r+0x8e>
 800a158:	2000      	movs	r0, #0
 800a15a:	e7f7      	b.n	800a14c <__swsetup_r+0x98>
 800a15c:	20000038 	.word	0x20000038

0800a160 <memset>:
 800a160:	4402      	add	r2, r0
 800a162:	4603      	mov	r3, r0
 800a164:	4293      	cmp	r3, r2
 800a166:	d100      	bne.n	800a16a <memset+0xa>
 800a168:	4770      	bx	lr
 800a16a:	f803 1b01 	strb.w	r1, [r3], #1
 800a16e:	e7f9      	b.n	800a164 <memset+0x4>

0800a170 <_close_r>:
 800a170:	b538      	push	{r3, r4, r5, lr}
 800a172:	4d06      	ldr	r5, [pc, #24]	@ (800a18c <_close_r+0x1c>)
 800a174:	2300      	movs	r3, #0
 800a176:	4604      	mov	r4, r0
 800a178:	4608      	mov	r0, r1
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	f7f7 f9cf 	bl	800151e <_close>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d102      	bne.n	800a18a <_close_r+0x1a>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	b103      	cbz	r3, 800a18a <_close_r+0x1a>
 800a188:	6023      	str	r3, [r4, #0]
 800a18a:	bd38      	pop	{r3, r4, r5, pc}
 800a18c:	20000af8 	.word	0x20000af8

0800a190 <_lseek_r>:
 800a190:	b538      	push	{r3, r4, r5, lr}
 800a192:	4d07      	ldr	r5, [pc, #28]	@ (800a1b0 <_lseek_r+0x20>)
 800a194:	4604      	mov	r4, r0
 800a196:	4608      	mov	r0, r1
 800a198:	4611      	mov	r1, r2
 800a19a:	2200      	movs	r2, #0
 800a19c:	602a      	str	r2, [r5, #0]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	f7f7 f9e4 	bl	800156c <_lseek>
 800a1a4:	1c43      	adds	r3, r0, #1
 800a1a6:	d102      	bne.n	800a1ae <_lseek_r+0x1e>
 800a1a8:	682b      	ldr	r3, [r5, #0]
 800a1aa:	b103      	cbz	r3, 800a1ae <_lseek_r+0x1e>
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	bd38      	pop	{r3, r4, r5, pc}
 800a1b0:	20000af8 	.word	0x20000af8

0800a1b4 <_read_r>:
 800a1b4:	b538      	push	{r3, r4, r5, lr}
 800a1b6:	4d07      	ldr	r5, [pc, #28]	@ (800a1d4 <_read_r+0x20>)
 800a1b8:	4604      	mov	r4, r0
 800a1ba:	4608      	mov	r0, r1
 800a1bc:	4611      	mov	r1, r2
 800a1be:	2200      	movs	r2, #0
 800a1c0:	602a      	str	r2, [r5, #0]
 800a1c2:	461a      	mov	r2, r3
 800a1c4:	f7f7 f98e 	bl	80014e4 <_read>
 800a1c8:	1c43      	adds	r3, r0, #1
 800a1ca:	d102      	bne.n	800a1d2 <_read_r+0x1e>
 800a1cc:	682b      	ldr	r3, [r5, #0]
 800a1ce:	b103      	cbz	r3, 800a1d2 <_read_r+0x1e>
 800a1d0:	6023      	str	r3, [r4, #0]
 800a1d2:	bd38      	pop	{r3, r4, r5, pc}
 800a1d4:	20000af8 	.word	0x20000af8

0800a1d8 <_sbrk_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4d06      	ldr	r5, [pc, #24]	@ (800a1f4 <_sbrk_r+0x1c>)
 800a1dc:	2300      	movs	r3, #0
 800a1de:	4604      	mov	r4, r0
 800a1e0:	4608      	mov	r0, r1
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	f7f7 f9d0 	bl	8001588 <_sbrk>
 800a1e8:	1c43      	adds	r3, r0, #1
 800a1ea:	d102      	bne.n	800a1f2 <_sbrk_r+0x1a>
 800a1ec:	682b      	ldr	r3, [r5, #0]
 800a1ee:	b103      	cbz	r3, 800a1f2 <_sbrk_r+0x1a>
 800a1f0:	6023      	str	r3, [r4, #0]
 800a1f2:	bd38      	pop	{r3, r4, r5, pc}
 800a1f4:	20000af8 	.word	0x20000af8

0800a1f8 <_write_r>:
 800a1f8:	b538      	push	{r3, r4, r5, lr}
 800a1fa:	4d07      	ldr	r5, [pc, #28]	@ (800a218 <_write_r+0x20>)
 800a1fc:	4604      	mov	r4, r0
 800a1fe:	4608      	mov	r0, r1
 800a200:	4611      	mov	r1, r2
 800a202:	2200      	movs	r2, #0
 800a204:	602a      	str	r2, [r5, #0]
 800a206:	461a      	mov	r2, r3
 800a208:	f7f6 f9fc 	bl	8000604 <_write>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	d102      	bne.n	800a216 <_write_r+0x1e>
 800a210:	682b      	ldr	r3, [r5, #0]
 800a212:	b103      	cbz	r3, 800a216 <_write_r+0x1e>
 800a214:	6023      	str	r3, [r4, #0]
 800a216:	bd38      	pop	{r3, r4, r5, pc}
 800a218:	20000af8 	.word	0x20000af8

0800a21c <__errno>:
 800a21c:	4b01      	ldr	r3, [pc, #4]	@ (800a224 <__errno+0x8>)
 800a21e:	6818      	ldr	r0, [r3, #0]
 800a220:	4770      	bx	lr
 800a222:	bf00      	nop
 800a224:	20000038 	.word	0x20000038

0800a228 <__libc_init_array>:
 800a228:	b570      	push	{r4, r5, r6, lr}
 800a22a:	4d0d      	ldr	r5, [pc, #52]	@ (800a260 <__libc_init_array+0x38>)
 800a22c:	4c0d      	ldr	r4, [pc, #52]	@ (800a264 <__libc_init_array+0x3c>)
 800a22e:	1b64      	subs	r4, r4, r5
 800a230:	10a4      	asrs	r4, r4, #2
 800a232:	2600      	movs	r6, #0
 800a234:	42a6      	cmp	r6, r4
 800a236:	d109      	bne.n	800a24c <__libc_init_array+0x24>
 800a238:	4d0b      	ldr	r5, [pc, #44]	@ (800a268 <__libc_init_array+0x40>)
 800a23a:	4c0c      	ldr	r4, [pc, #48]	@ (800a26c <__libc_init_array+0x44>)
 800a23c:	f000 fc64 	bl	800ab08 <_init>
 800a240:	1b64      	subs	r4, r4, r5
 800a242:	10a4      	asrs	r4, r4, #2
 800a244:	2600      	movs	r6, #0
 800a246:	42a6      	cmp	r6, r4
 800a248:	d105      	bne.n	800a256 <__libc_init_array+0x2e>
 800a24a:	bd70      	pop	{r4, r5, r6, pc}
 800a24c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a250:	4798      	blx	r3
 800a252:	3601      	adds	r6, #1
 800a254:	e7ee      	b.n	800a234 <__libc_init_array+0xc>
 800a256:	f855 3b04 	ldr.w	r3, [r5], #4
 800a25a:	4798      	blx	r3
 800a25c:	3601      	adds	r6, #1
 800a25e:	e7f2      	b.n	800a246 <__libc_init_array+0x1e>
 800a260:	0800afe8 	.word	0x0800afe8
 800a264:	0800afe8 	.word	0x0800afe8
 800a268:	0800afe8 	.word	0x0800afe8
 800a26c:	0800afec 	.word	0x0800afec

0800a270 <__retarget_lock_init_recursive>:
 800a270:	4770      	bx	lr

0800a272 <__retarget_lock_acquire_recursive>:
 800a272:	4770      	bx	lr

0800a274 <__retarget_lock_release_recursive>:
 800a274:	4770      	bx	lr
	...

0800a278 <_free_r>:
 800a278:	b538      	push	{r3, r4, r5, lr}
 800a27a:	4605      	mov	r5, r0
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d041      	beq.n	800a304 <_free_r+0x8c>
 800a280:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a284:	1f0c      	subs	r4, r1, #4
 800a286:	2b00      	cmp	r3, #0
 800a288:	bfb8      	it	lt
 800a28a:	18e4      	addlt	r4, r4, r3
 800a28c:	f7ff fcfc 	bl	8009c88 <__malloc_lock>
 800a290:	4a1d      	ldr	r2, [pc, #116]	@ (800a308 <_free_r+0x90>)
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	b933      	cbnz	r3, 800a2a4 <_free_r+0x2c>
 800a296:	6063      	str	r3, [r4, #4]
 800a298:	6014      	str	r4, [r2, #0]
 800a29a:	4628      	mov	r0, r5
 800a29c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a2a0:	f7ff bcf8 	b.w	8009c94 <__malloc_unlock>
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d908      	bls.n	800a2ba <_free_r+0x42>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	1821      	adds	r1, r4, r0
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	bf01      	itttt	eq
 800a2b0:	6819      	ldreq	r1, [r3, #0]
 800a2b2:	685b      	ldreq	r3, [r3, #4]
 800a2b4:	1809      	addeq	r1, r1, r0
 800a2b6:	6021      	streq	r1, [r4, #0]
 800a2b8:	e7ed      	b.n	800a296 <_free_r+0x1e>
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	b10b      	cbz	r3, 800a2c4 <_free_r+0x4c>
 800a2c0:	42a3      	cmp	r3, r4
 800a2c2:	d9fa      	bls.n	800a2ba <_free_r+0x42>
 800a2c4:	6811      	ldr	r1, [r2, #0]
 800a2c6:	1850      	adds	r0, r2, r1
 800a2c8:	42a0      	cmp	r0, r4
 800a2ca:	d10b      	bne.n	800a2e4 <_free_r+0x6c>
 800a2cc:	6820      	ldr	r0, [r4, #0]
 800a2ce:	4401      	add	r1, r0
 800a2d0:	1850      	adds	r0, r2, r1
 800a2d2:	4283      	cmp	r3, r0
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	d1e0      	bne.n	800a29a <_free_r+0x22>
 800a2d8:	6818      	ldr	r0, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	6053      	str	r3, [r2, #4]
 800a2de:	4408      	add	r0, r1
 800a2e0:	6010      	str	r0, [r2, #0]
 800a2e2:	e7da      	b.n	800a29a <_free_r+0x22>
 800a2e4:	d902      	bls.n	800a2ec <_free_r+0x74>
 800a2e6:	230c      	movs	r3, #12
 800a2e8:	602b      	str	r3, [r5, #0]
 800a2ea:	e7d6      	b.n	800a29a <_free_r+0x22>
 800a2ec:	6820      	ldr	r0, [r4, #0]
 800a2ee:	1821      	adds	r1, r4, r0
 800a2f0:	428b      	cmp	r3, r1
 800a2f2:	bf04      	itt	eq
 800a2f4:	6819      	ldreq	r1, [r3, #0]
 800a2f6:	685b      	ldreq	r3, [r3, #4]
 800a2f8:	6063      	str	r3, [r4, #4]
 800a2fa:	bf04      	itt	eq
 800a2fc:	1809      	addeq	r1, r1, r0
 800a2fe:	6021      	streq	r1, [r4, #0]
 800a300:	6054      	str	r4, [r2, #4]
 800a302:	e7ca      	b.n	800a29a <_free_r+0x22>
 800a304:	bd38      	pop	{r3, r4, r5, pc}
 800a306:	bf00      	nop
 800a308:	200009b8 	.word	0x200009b8

0800a30c <__sfputc_r>:
 800a30c:	6893      	ldr	r3, [r2, #8]
 800a30e:	3b01      	subs	r3, #1
 800a310:	2b00      	cmp	r3, #0
 800a312:	b410      	push	{r4}
 800a314:	6093      	str	r3, [r2, #8]
 800a316:	da08      	bge.n	800a32a <__sfputc_r+0x1e>
 800a318:	6994      	ldr	r4, [r2, #24]
 800a31a:	42a3      	cmp	r3, r4
 800a31c:	db01      	blt.n	800a322 <__sfputc_r+0x16>
 800a31e:	290a      	cmp	r1, #10
 800a320:	d103      	bne.n	800a32a <__sfputc_r+0x1e>
 800a322:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a326:	f7ff be86 	b.w	800a036 <__swbuf_r>
 800a32a:	6813      	ldr	r3, [r2, #0]
 800a32c:	1c58      	adds	r0, r3, #1
 800a32e:	6010      	str	r0, [r2, #0]
 800a330:	7019      	strb	r1, [r3, #0]
 800a332:	4608      	mov	r0, r1
 800a334:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a338:	4770      	bx	lr

0800a33a <__sfputs_r>:
 800a33a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a33c:	4606      	mov	r6, r0
 800a33e:	460f      	mov	r7, r1
 800a340:	4614      	mov	r4, r2
 800a342:	18d5      	adds	r5, r2, r3
 800a344:	42ac      	cmp	r4, r5
 800a346:	d101      	bne.n	800a34c <__sfputs_r+0x12>
 800a348:	2000      	movs	r0, #0
 800a34a:	e007      	b.n	800a35c <__sfputs_r+0x22>
 800a34c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a350:	463a      	mov	r2, r7
 800a352:	4630      	mov	r0, r6
 800a354:	f7ff ffda 	bl	800a30c <__sfputc_r>
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	d1f3      	bne.n	800a344 <__sfputs_r+0xa>
 800a35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a360 <_vfiprintf_r>:
 800a360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a364:	460d      	mov	r5, r1
 800a366:	b09d      	sub	sp, #116	@ 0x74
 800a368:	4614      	mov	r4, r2
 800a36a:	4698      	mov	r8, r3
 800a36c:	4606      	mov	r6, r0
 800a36e:	b118      	cbz	r0, 800a378 <_vfiprintf_r+0x18>
 800a370:	6a03      	ldr	r3, [r0, #32]
 800a372:	b90b      	cbnz	r3, 800a378 <_vfiprintf_r+0x18>
 800a374:	f7ff fd20 	bl	8009db8 <__sinit>
 800a378:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a37a:	07d9      	lsls	r1, r3, #31
 800a37c:	d405      	bmi.n	800a38a <_vfiprintf_r+0x2a>
 800a37e:	89ab      	ldrh	r3, [r5, #12]
 800a380:	059a      	lsls	r2, r3, #22
 800a382:	d402      	bmi.n	800a38a <_vfiprintf_r+0x2a>
 800a384:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a386:	f7ff ff74 	bl	800a272 <__retarget_lock_acquire_recursive>
 800a38a:	89ab      	ldrh	r3, [r5, #12]
 800a38c:	071b      	lsls	r3, r3, #28
 800a38e:	d501      	bpl.n	800a394 <_vfiprintf_r+0x34>
 800a390:	692b      	ldr	r3, [r5, #16]
 800a392:	b99b      	cbnz	r3, 800a3bc <_vfiprintf_r+0x5c>
 800a394:	4629      	mov	r1, r5
 800a396:	4630      	mov	r0, r6
 800a398:	f7ff fe8c 	bl	800a0b4 <__swsetup_r>
 800a39c:	b170      	cbz	r0, 800a3bc <_vfiprintf_r+0x5c>
 800a39e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a3a0:	07dc      	lsls	r4, r3, #31
 800a3a2:	d504      	bpl.n	800a3ae <_vfiprintf_r+0x4e>
 800a3a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3a8:	b01d      	add	sp, #116	@ 0x74
 800a3aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3ae:	89ab      	ldrh	r3, [r5, #12]
 800a3b0:	0598      	lsls	r0, r3, #22
 800a3b2:	d4f7      	bmi.n	800a3a4 <_vfiprintf_r+0x44>
 800a3b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a3b6:	f7ff ff5d 	bl	800a274 <__retarget_lock_release_recursive>
 800a3ba:	e7f3      	b.n	800a3a4 <_vfiprintf_r+0x44>
 800a3bc:	2300      	movs	r3, #0
 800a3be:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3c0:	2320      	movs	r3, #32
 800a3c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a3c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a3ca:	2330      	movs	r3, #48	@ 0x30
 800a3cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a57c <_vfiprintf_r+0x21c>
 800a3d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3d4:	f04f 0901 	mov.w	r9, #1
 800a3d8:	4623      	mov	r3, r4
 800a3da:	469a      	mov	sl, r3
 800a3dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3e0:	b10a      	cbz	r2, 800a3e6 <_vfiprintf_r+0x86>
 800a3e2:	2a25      	cmp	r2, #37	@ 0x25
 800a3e4:	d1f9      	bne.n	800a3da <_vfiprintf_r+0x7a>
 800a3e6:	ebba 0b04 	subs.w	fp, sl, r4
 800a3ea:	d00b      	beq.n	800a404 <_vfiprintf_r+0xa4>
 800a3ec:	465b      	mov	r3, fp
 800a3ee:	4622      	mov	r2, r4
 800a3f0:	4629      	mov	r1, r5
 800a3f2:	4630      	mov	r0, r6
 800a3f4:	f7ff ffa1 	bl	800a33a <__sfputs_r>
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f000 80a7 	beq.w	800a54c <_vfiprintf_r+0x1ec>
 800a3fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a400:	445a      	add	r2, fp
 800a402:	9209      	str	r2, [sp, #36]	@ 0x24
 800a404:	f89a 3000 	ldrb.w	r3, [sl]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	f000 809f 	beq.w	800a54c <_vfiprintf_r+0x1ec>
 800a40e:	2300      	movs	r3, #0
 800a410:	f04f 32ff 	mov.w	r2, #4294967295
 800a414:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a418:	f10a 0a01 	add.w	sl, sl, #1
 800a41c:	9304      	str	r3, [sp, #16]
 800a41e:	9307      	str	r3, [sp, #28]
 800a420:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a424:	931a      	str	r3, [sp, #104]	@ 0x68
 800a426:	4654      	mov	r4, sl
 800a428:	2205      	movs	r2, #5
 800a42a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a42e:	4853      	ldr	r0, [pc, #332]	@ (800a57c <_vfiprintf_r+0x21c>)
 800a430:	f7f5 fece 	bl	80001d0 <memchr>
 800a434:	9a04      	ldr	r2, [sp, #16]
 800a436:	b9d8      	cbnz	r0, 800a470 <_vfiprintf_r+0x110>
 800a438:	06d1      	lsls	r1, r2, #27
 800a43a:	bf44      	itt	mi
 800a43c:	2320      	movmi	r3, #32
 800a43e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a442:	0713      	lsls	r3, r2, #28
 800a444:	bf44      	itt	mi
 800a446:	232b      	movmi	r3, #43	@ 0x2b
 800a448:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a44c:	f89a 3000 	ldrb.w	r3, [sl]
 800a450:	2b2a      	cmp	r3, #42	@ 0x2a
 800a452:	d015      	beq.n	800a480 <_vfiprintf_r+0x120>
 800a454:	9a07      	ldr	r2, [sp, #28]
 800a456:	4654      	mov	r4, sl
 800a458:	2000      	movs	r0, #0
 800a45a:	f04f 0c0a 	mov.w	ip, #10
 800a45e:	4621      	mov	r1, r4
 800a460:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a464:	3b30      	subs	r3, #48	@ 0x30
 800a466:	2b09      	cmp	r3, #9
 800a468:	d94b      	bls.n	800a502 <_vfiprintf_r+0x1a2>
 800a46a:	b1b0      	cbz	r0, 800a49a <_vfiprintf_r+0x13a>
 800a46c:	9207      	str	r2, [sp, #28]
 800a46e:	e014      	b.n	800a49a <_vfiprintf_r+0x13a>
 800a470:	eba0 0308 	sub.w	r3, r0, r8
 800a474:	fa09 f303 	lsl.w	r3, r9, r3
 800a478:	4313      	orrs	r3, r2
 800a47a:	9304      	str	r3, [sp, #16]
 800a47c:	46a2      	mov	sl, r4
 800a47e:	e7d2      	b.n	800a426 <_vfiprintf_r+0xc6>
 800a480:	9b03      	ldr	r3, [sp, #12]
 800a482:	1d19      	adds	r1, r3, #4
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	9103      	str	r1, [sp, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	bfbb      	ittet	lt
 800a48c:	425b      	neglt	r3, r3
 800a48e:	f042 0202 	orrlt.w	r2, r2, #2
 800a492:	9307      	strge	r3, [sp, #28]
 800a494:	9307      	strlt	r3, [sp, #28]
 800a496:	bfb8      	it	lt
 800a498:	9204      	strlt	r2, [sp, #16]
 800a49a:	7823      	ldrb	r3, [r4, #0]
 800a49c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a49e:	d10a      	bne.n	800a4b6 <_vfiprintf_r+0x156>
 800a4a0:	7863      	ldrb	r3, [r4, #1]
 800a4a2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a4a4:	d132      	bne.n	800a50c <_vfiprintf_r+0x1ac>
 800a4a6:	9b03      	ldr	r3, [sp, #12]
 800a4a8:	1d1a      	adds	r2, r3, #4
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	9203      	str	r2, [sp, #12]
 800a4ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a4b2:	3402      	adds	r4, #2
 800a4b4:	9305      	str	r3, [sp, #20]
 800a4b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a58c <_vfiprintf_r+0x22c>
 800a4ba:	7821      	ldrb	r1, [r4, #0]
 800a4bc:	2203      	movs	r2, #3
 800a4be:	4650      	mov	r0, sl
 800a4c0:	f7f5 fe86 	bl	80001d0 <memchr>
 800a4c4:	b138      	cbz	r0, 800a4d6 <_vfiprintf_r+0x176>
 800a4c6:	9b04      	ldr	r3, [sp, #16]
 800a4c8:	eba0 000a 	sub.w	r0, r0, sl
 800a4cc:	2240      	movs	r2, #64	@ 0x40
 800a4ce:	4082      	lsls	r2, r0
 800a4d0:	4313      	orrs	r3, r2
 800a4d2:	3401      	adds	r4, #1
 800a4d4:	9304      	str	r3, [sp, #16]
 800a4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4da:	4829      	ldr	r0, [pc, #164]	@ (800a580 <_vfiprintf_r+0x220>)
 800a4dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4e0:	2206      	movs	r2, #6
 800a4e2:	f7f5 fe75 	bl	80001d0 <memchr>
 800a4e6:	2800      	cmp	r0, #0
 800a4e8:	d03f      	beq.n	800a56a <_vfiprintf_r+0x20a>
 800a4ea:	4b26      	ldr	r3, [pc, #152]	@ (800a584 <_vfiprintf_r+0x224>)
 800a4ec:	bb1b      	cbnz	r3, 800a536 <_vfiprintf_r+0x1d6>
 800a4ee:	9b03      	ldr	r3, [sp, #12]
 800a4f0:	3307      	adds	r3, #7
 800a4f2:	f023 0307 	bic.w	r3, r3, #7
 800a4f6:	3308      	adds	r3, #8
 800a4f8:	9303      	str	r3, [sp, #12]
 800a4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4fc:	443b      	add	r3, r7
 800a4fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a500:	e76a      	b.n	800a3d8 <_vfiprintf_r+0x78>
 800a502:	fb0c 3202 	mla	r2, ip, r2, r3
 800a506:	460c      	mov	r4, r1
 800a508:	2001      	movs	r0, #1
 800a50a:	e7a8      	b.n	800a45e <_vfiprintf_r+0xfe>
 800a50c:	2300      	movs	r3, #0
 800a50e:	3401      	adds	r4, #1
 800a510:	9305      	str	r3, [sp, #20]
 800a512:	4619      	mov	r1, r3
 800a514:	f04f 0c0a 	mov.w	ip, #10
 800a518:	4620      	mov	r0, r4
 800a51a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a51e:	3a30      	subs	r2, #48	@ 0x30
 800a520:	2a09      	cmp	r2, #9
 800a522:	d903      	bls.n	800a52c <_vfiprintf_r+0x1cc>
 800a524:	2b00      	cmp	r3, #0
 800a526:	d0c6      	beq.n	800a4b6 <_vfiprintf_r+0x156>
 800a528:	9105      	str	r1, [sp, #20]
 800a52a:	e7c4      	b.n	800a4b6 <_vfiprintf_r+0x156>
 800a52c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a530:	4604      	mov	r4, r0
 800a532:	2301      	movs	r3, #1
 800a534:	e7f0      	b.n	800a518 <_vfiprintf_r+0x1b8>
 800a536:	ab03      	add	r3, sp, #12
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	462a      	mov	r2, r5
 800a53c:	4b12      	ldr	r3, [pc, #72]	@ (800a588 <_vfiprintf_r+0x228>)
 800a53e:	a904      	add	r1, sp, #16
 800a540:	4630      	mov	r0, r6
 800a542:	f3af 8000 	nop.w
 800a546:	4607      	mov	r7, r0
 800a548:	1c78      	adds	r0, r7, #1
 800a54a:	d1d6      	bne.n	800a4fa <_vfiprintf_r+0x19a>
 800a54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a54e:	07d9      	lsls	r1, r3, #31
 800a550:	d405      	bmi.n	800a55e <_vfiprintf_r+0x1fe>
 800a552:	89ab      	ldrh	r3, [r5, #12]
 800a554:	059a      	lsls	r2, r3, #22
 800a556:	d402      	bmi.n	800a55e <_vfiprintf_r+0x1fe>
 800a558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a55a:	f7ff fe8b 	bl	800a274 <__retarget_lock_release_recursive>
 800a55e:	89ab      	ldrh	r3, [r5, #12]
 800a560:	065b      	lsls	r3, r3, #25
 800a562:	f53f af1f 	bmi.w	800a3a4 <_vfiprintf_r+0x44>
 800a566:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a568:	e71e      	b.n	800a3a8 <_vfiprintf_r+0x48>
 800a56a:	ab03      	add	r3, sp, #12
 800a56c:	9300      	str	r3, [sp, #0]
 800a56e:	462a      	mov	r2, r5
 800a570:	4b05      	ldr	r3, [pc, #20]	@ (800a588 <_vfiprintf_r+0x228>)
 800a572:	a904      	add	r1, sp, #16
 800a574:	4630      	mov	r0, r6
 800a576:	f000 f879 	bl	800a66c <_printf_i>
 800a57a:	e7e4      	b.n	800a546 <_vfiprintf_r+0x1e6>
 800a57c:	0800afac 	.word	0x0800afac
 800a580:	0800afb6 	.word	0x0800afb6
 800a584:	00000000 	.word	0x00000000
 800a588:	0800a33b 	.word	0x0800a33b
 800a58c:	0800afb2 	.word	0x0800afb2

0800a590 <_printf_common>:
 800a590:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a594:	4616      	mov	r6, r2
 800a596:	4698      	mov	r8, r3
 800a598:	688a      	ldr	r2, [r1, #8]
 800a59a:	690b      	ldr	r3, [r1, #16]
 800a59c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	bfb8      	it	lt
 800a5a4:	4613      	movlt	r3, r2
 800a5a6:	6033      	str	r3, [r6, #0]
 800a5a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a5ac:	4607      	mov	r7, r0
 800a5ae:	460c      	mov	r4, r1
 800a5b0:	b10a      	cbz	r2, 800a5b6 <_printf_common+0x26>
 800a5b2:	3301      	adds	r3, #1
 800a5b4:	6033      	str	r3, [r6, #0]
 800a5b6:	6823      	ldr	r3, [r4, #0]
 800a5b8:	0699      	lsls	r1, r3, #26
 800a5ba:	bf42      	ittt	mi
 800a5bc:	6833      	ldrmi	r3, [r6, #0]
 800a5be:	3302      	addmi	r3, #2
 800a5c0:	6033      	strmi	r3, [r6, #0]
 800a5c2:	6825      	ldr	r5, [r4, #0]
 800a5c4:	f015 0506 	ands.w	r5, r5, #6
 800a5c8:	d106      	bne.n	800a5d8 <_printf_common+0x48>
 800a5ca:	f104 0a19 	add.w	sl, r4, #25
 800a5ce:	68e3      	ldr	r3, [r4, #12]
 800a5d0:	6832      	ldr	r2, [r6, #0]
 800a5d2:	1a9b      	subs	r3, r3, r2
 800a5d4:	42ab      	cmp	r3, r5
 800a5d6:	dc26      	bgt.n	800a626 <_printf_common+0x96>
 800a5d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a5dc:	6822      	ldr	r2, [r4, #0]
 800a5de:	3b00      	subs	r3, #0
 800a5e0:	bf18      	it	ne
 800a5e2:	2301      	movne	r3, #1
 800a5e4:	0692      	lsls	r2, r2, #26
 800a5e6:	d42b      	bmi.n	800a640 <_printf_common+0xb0>
 800a5e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a5ec:	4641      	mov	r1, r8
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	47c8      	blx	r9
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d01e      	beq.n	800a634 <_printf_common+0xa4>
 800a5f6:	6823      	ldr	r3, [r4, #0]
 800a5f8:	6922      	ldr	r2, [r4, #16]
 800a5fa:	f003 0306 	and.w	r3, r3, #6
 800a5fe:	2b04      	cmp	r3, #4
 800a600:	bf02      	ittt	eq
 800a602:	68e5      	ldreq	r5, [r4, #12]
 800a604:	6833      	ldreq	r3, [r6, #0]
 800a606:	1aed      	subeq	r5, r5, r3
 800a608:	68a3      	ldr	r3, [r4, #8]
 800a60a:	bf0c      	ite	eq
 800a60c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a610:	2500      	movne	r5, #0
 800a612:	4293      	cmp	r3, r2
 800a614:	bfc4      	itt	gt
 800a616:	1a9b      	subgt	r3, r3, r2
 800a618:	18ed      	addgt	r5, r5, r3
 800a61a:	2600      	movs	r6, #0
 800a61c:	341a      	adds	r4, #26
 800a61e:	42b5      	cmp	r5, r6
 800a620:	d11a      	bne.n	800a658 <_printf_common+0xc8>
 800a622:	2000      	movs	r0, #0
 800a624:	e008      	b.n	800a638 <_printf_common+0xa8>
 800a626:	2301      	movs	r3, #1
 800a628:	4652      	mov	r2, sl
 800a62a:	4641      	mov	r1, r8
 800a62c:	4638      	mov	r0, r7
 800a62e:	47c8      	blx	r9
 800a630:	3001      	adds	r0, #1
 800a632:	d103      	bne.n	800a63c <_printf_common+0xac>
 800a634:	f04f 30ff 	mov.w	r0, #4294967295
 800a638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a63c:	3501      	adds	r5, #1
 800a63e:	e7c6      	b.n	800a5ce <_printf_common+0x3e>
 800a640:	18e1      	adds	r1, r4, r3
 800a642:	1c5a      	adds	r2, r3, #1
 800a644:	2030      	movs	r0, #48	@ 0x30
 800a646:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a64a:	4422      	add	r2, r4
 800a64c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a650:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a654:	3302      	adds	r3, #2
 800a656:	e7c7      	b.n	800a5e8 <_printf_common+0x58>
 800a658:	2301      	movs	r3, #1
 800a65a:	4622      	mov	r2, r4
 800a65c:	4641      	mov	r1, r8
 800a65e:	4638      	mov	r0, r7
 800a660:	47c8      	blx	r9
 800a662:	3001      	adds	r0, #1
 800a664:	d0e6      	beq.n	800a634 <_printf_common+0xa4>
 800a666:	3601      	adds	r6, #1
 800a668:	e7d9      	b.n	800a61e <_printf_common+0x8e>
	...

0800a66c <_printf_i>:
 800a66c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a670:	7e0f      	ldrb	r7, [r1, #24]
 800a672:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a674:	2f78      	cmp	r7, #120	@ 0x78
 800a676:	4691      	mov	r9, r2
 800a678:	4680      	mov	r8, r0
 800a67a:	460c      	mov	r4, r1
 800a67c:	469a      	mov	sl, r3
 800a67e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a682:	d807      	bhi.n	800a694 <_printf_i+0x28>
 800a684:	2f62      	cmp	r7, #98	@ 0x62
 800a686:	d80a      	bhi.n	800a69e <_printf_i+0x32>
 800a688:	2f00      	cmp	r7, #0
 800a68a:	f000 80d1 	beq.w	800a830 <_printf_i+0x1c4>
 800a68e:	2f58      	cmp	r7, #88	@ 0x58
 800a690:	f000 80b8 	beq.w	800a804 <_printf_i+0x198>
 800a694:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a698:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a69c:	e03a      	b.n	800a714 <_printf_i+0xa8>
 800a69e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a6a2:	2b15      	cmp	r3, #21
 800a6a4:	d8f6      	bhi.n	800a694 <_printf_i+0x28>
 800a6a6:	a101      	add	r1, pc, #4	@ (adr r1, 800a6ac <_printf_i+0x40>)
 800a6a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a6ac:	0800a705 	.word	0x0800a705
 800a6b0:	0800a719 	.word	0x0800a719
 800a6b4:	0800a695 	.word	0x0800a695
 800a6b8:	0800a695 	.word	0x0800a695
 800a6bc:	0800a695 	.word	0x0800a695
 800a6c0:	0800a695 	.word	0x0800a695
 800a6c4:	0800a719 	.word	0x0800a719
 800a6c8:	0800a695 	.word	0x0800a695
 800a6cc:	0800a695 	.word	0x0800a695
 800a6d0:	0800a695 	.word	0x0800a695
 800a6d4:	0800a695 	.word	0x0800a695
 800a6d8:	0800a817 	.word	0x0800a817
 800a6dc:	0800a743 	.word	0x0800a743
 800a6e0:	0800a7d1 	.word	0x0800a7d1
 800a6e4:	0800a695 	.word	0x0800a695
 800a6e8:	0800a695 	.word	0x0800a695
 800a6ec:	0800a839 	.word	0x0800a839
 800a6f0:	0800a695 	.word	0x0800a695
 800a6f4:	0800a743 	.word	0x0800a743
 800a6f8:	0800a695 	.word	0x0800a695
 800a6fc:	0800a695 	.word	0x0800a695
 800a700:	0800a7d9 	.word	0x0800a7d9
 800a704:	6833      	ldr	r3, [r6, #0]
 800a706:	1d1a      	adds	r2, r3, #4
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	6032      	str	r2, [r6, #0]
 800a70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a710:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a714:	2301      	movs	r3, #1
 800a716:	e09c      	b.n	800a852 <_printf_i+0x1e6>
 800a718:	6833      	ldr	r3, [r6, #0]
 800a71a:	6820      	ldr	r0, [r4, #0]
 800a71c:	1d19      	adds	r1, r3, #4
 800a71e:	6031      	str	r1, [r6, #0]
 800a720:	0606      	lsls	r6, r0, #24
 800a722:	d501      	bpl.n	800a728 <_printf_i+0xbc>
 800a724:	681d      	ldr	r5, [r3, #0]
 800a726:	e003      	b.n	800a730 <_printf_i+0xc4>
 800a728:	0645      	lsls	r5, r0, #25
 800a72a:	d5fb      	bpl.n	800a724 <_printf_i+0xb8>
 800a72c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a730:	2d00      	cmp	r5, #0
 800a732:	da03      	bge.n	800a73c <_printf_i+0xd0>
 800a734:	232d      	movs	r3, #45	@ 0x2d
 800a736:	426d      	negs	r5, r5
 800a738:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a73c:	4858      	ldr	r0, [pc, #352]	@ (800a8a0 <_printf_i+0x234>)
 800a73e:	230a      	movs	r3, #10
 800a740:	e011      	b.n	800a766 <_printf_i+0xfa>
 800a742:	6821      	ldr	r1, [r4, #0]
 800a744:	6833      	ldr	r3, [r6, #0]
 800a746:	0608      	lsls	r0, r1, #24
 800a748:	f853 5b04 	ldr.w	r5, [r3], #4
 800a74c:	d402      	bmi.n	800a754 <_printf_i+0xe8>
 800a74e:	0649      	lsls	r1, r1, #25
 800a750:	bf48      	it	mi
 800a752:	b2ad      	uxthmi	r5, r5
 800a754:	2f6f      	cmp	r7, #111	@ 0x6f
 800a756:	4852      	ldr	r0, [pc, #328]	@ (800a8a0 <_printf_i+0x234>)
 800a758:	6033      	str	r3, [r6, #0]
 800a75a:	bf14      	ite	ne
 800a75c:	230a      	movne	r3, #10
 800a75e:	2308      	moveq	r3, #8
 800a760:	2100      	movs	r1, #0
 800a762:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a766:	6866      	ldr	r6, [r4, #4]
 800a768:	60a6      	str	r6, [r4, #8]
 800a76a:	2e00      	cmp	r6, #0
 800a76c:	db05      	blt.n	800a77a <_printf_i+0x10e>
 800a76e:	6821      	ldr	r1, [r4, #0]
 800a770:	432e      	orrs	r6, r5
 800a772:	f021 0104 	bic.w	r1, r1, #4
 800a776:	6021      	str	r1, [r4, #0]
 800a778:	d04b      	beq.n	800a812 <_printf_i+0x1a6>
 800a77a:	4616      	mov	r6, r2
 800a77c:	fbb5 f1f3 	udiv	r1, r5, r3
 800a780:	fb03 5711 	mls	r7, r3, r1, r5
 800a784:	5dc7      	ldrb	r7, [r0, r7]
 800a786:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a78a:	462f      	mov	r7, r5
 800a78c:	42bb      	cmp	r3, r7
 800a78e:	460d      	mov	r5, r1
 800a790:	d9f4      	bls.n	800a77c <_printf_i+0x110>
 800a792:	2b08      	cmp	r3, #8
 800a794:	d10b      	bne.n	800a7ae <_printf_i+0x142>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	07df      	lsls	r7, r3, #31
 800a79a:	d508      	bpl.n	800a7ae <_printf_i+0x142>
 800a79c:	6923      	ldr	r3, [r4, #16]
 800a79e:	6861      	ldr	r1, [r4, #4]
 800a7a0:	4299      	cmp	r1, r3
 800a7a2:	bfde      	ittt	le
 800a7a4:	2330      	movle	r3, #48	@ 0x30
 800a7a6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a7aa:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a7ae:	1b92      	subs	r2, r2, r6
 800a7b0:	6122      	str	r2, [r4, #16]
 800a7b2:	f8cd a000 	str.w	sl, [sp]
 800a7b6:	464b      	mov	r3, r9
 800a7b8:	aa03      	add	r2, sp, #12
 800a7ba:	4621      	mov	r1, r4
 800a7bc:	4640      	mov	r0, r8
 800a7be:	f7ff fee7 	bl	800a590 <_printf_common>
 800a7c2:	3001      	adds	r0, #1
 800a7c4:	d14a      	bne.n	800a85c <_printf_i+0x1f0>
 800a7c6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ca:	b004      	add	sp, #16
 800a7cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7d0:	6823      	ldr	r3, [r4, #0]
 800a7d2:	f043 0320 	orr.w	r3, r3, #32
 800a7d6:	6023      	str	r3, [r4, #0]
 800a7d8:	4832      	ldr	r0, [pc, #200]	@ (800a8a4 <_printf_i+0x238>)
 800a7da:	2778      	movs	r7, #120	@ 0x78
 800a7dc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a7e0:	6823      	ldr	r3, [r4, #0]
 800a7e2:	6831      	ldr	r1, [r6, #0]
 800a7e4:	061f      	lsls	r7, r3, #24
 800a7e6:	f851 5b04 	ldr.w	r5, [r1], #4
 800a7ea:	d402      	bmi.n	800a7f2 <_printf_i+0x186>
 800a7ec:	065f      	lsls	r7, r3, #25
 800a7ee:	bf48      	it	mi
 800a7f0:	b2ad      	uxthmi	r5, r5
 800a7f2:	6031      	str	r1, [r6, #0]
 800a7f4:	07d9      	lsls	r1, r3, #31
 800a7f6:	bf44      	itt	mi
 800a7f8:	f043 0320 	orrmi.w	r3, r3, #32
 800a7fc:	6023      	strmi	r3, [r4, #0]
 800a7fe:	b11d      	cbz	r5, 800a808 <_printf_i+0x19c>
 800a800:	2310      	movs	r3, #16
 800a802:	e7ad      	b.n	800a760 <_printf_i+0xf4>
 800a804:	4826      	ldr	r0, [pc, #152]	@ (800a8a0 <_printf_i+0x234>)
 800a806:	e7e9      	b.n	800a7dc <_printf_i+0x170>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	f023 0320 	bic.w	r3, r3, #32
 800a80e:	6023      	str	r3, [r4, #0]
 800a810:	e7f6      	b.n	800a800 <_printf_i+0x194>
 800a812:	4616      	mov	r6, r2
 800a814:	e7bd      	b.n	800a792 <_printf_i+0x126>
 800a816:	6833      	ldr	r3, [r6, #0]
 800a818:	6825      	ldr	r5, [r4, #0]
 800a81a:	6961      	ldr	r1, [r4, #20]
 800a81c:	1d18      	adds	r0, r3, #4
 800a81e:	6030      	str	r0, [r6, #0]
 800a820:	062e      	lsls	r6, r5, #24
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	d501      	bpl.n	800a82a <_printf_i+0x1be>
 800a826:	6019      	str	r1, [r3, #0]
 800a828:	e002      	b.n	800a830 <_printf_i+0x1c4>
 800a82a:	0668      	lsls	r0, r5, #25
 800a82c:	d5fb      	bpl.n	800a826 <_printf_i+0x1ba>
 800a82e:	8019      	strh	r1, [r3, #0]
 800a830:	2300      	movs	r3, #0
 800a832:	6123      	str	r3, [r4, #16]
 800a834:	4616      	mov	r6, r2
 800a836:	e7bc      	b.n	800a7b2 <_printf_i+0x146>
 800a838:	6833      	ldr	r3, [r6, #0]
 800a83a:	1d1a      	adds	r2, r3, #4
 800a83c:	6032      	str	r2, [r6, #0]
 800a83e:	681e      	ldr	r6, [r3, #0]
 800a840:	6862      	ldr	r2, [r4, #4]
 800a842:	2100      	movs	r1, #0
 800a844:	4630      	mov	r0, r6
 800a846:	f7f5 fcc3 	bl	80001d0 <memchr>
 800a84a:	b108      	cbz	r0, 800a850 <_printf_i+0x1e4>
 800a84c:	1b80      	subs	r0, r0, r6
 800a84e:	6060      	str	r0, [r4, #4]
 800a850:	6863      	ldr	r3, [r4, #4]
 800a852:	6123      	str	r3, [r4, #16]
 800a854:	2300      	movs	r3, #0
 800a856:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a85a:	e7aa      	b.n	800a7b2 <_printf_i+0x146>
 800a85c:	6923      	ldr	r3, [r4, #16]
 800a85e:	4632      	mov	r2, r6
 800a860:	4649      	mov	r1, r9
 800a862:	4640      	mov	r0, r8
 800a864:	47d0      	blx	sl
 800a866:	3001      	adds	r0, #1
 800a868:	d0ad      	beq.n	800a7c6 <_printf_i+0x15a>
 800a86a:	6823      	ldr	r3, [r4, #0]
 800a86c:	079b      	lsls	r3, r3, #30
 800a86e:	d413      	bmi.n	800a898 <_printf_i+0x22c>
 800a870:	68e0      	ldr	r0, [r4, #12]
 800a872:	9b03      	ldr	r3, [sp, #12]
 800a874:	4298      	cmp	r0, r3
 800a876:	bfb8      	it	lt
 800a878:	4618      	movlt	r0, r3
 800a87a:	e7a6      	b.n	800a7ca <_printf_i+0x15e>
 800a87c:	2301      	movs	r3, #1
 800a87e:	4632      	mov	r2, r6
 800a880:	4649      	mov	r1, r9
 800a882:	4640      	mov	r0, r8
 800a884:	47d0      	blx	sl
 800a886:	3001      	adds	r0, #1
 800a888:	d09d      	beq.n	800a7c6 <_printf_i+0x15a>
 800a88a:	3501      	adds	r5, #1
 800a88c:	68e3      	ldr	r3, [r4, #12]
 800a88e:	9903      	ldr	r1, [sp, #12]
 800a890:	1a5b      	subs	r3, r3, r1
 800a892:	42ab      	cmp	r3, r5
 800a894:	dcf2      	bgt.n	800a87c <_printf_i+0x210>
 800a896:	e7eb      	b.n	800a870 <_printf_i+0x204>
 800a898:	2500      	movs	r5, #0
 800a89a:	f104 0619 	add.w	r6, r4, #25
 800a89e:	e7f5      	b.n	800a88c <_printf_i+0x220>
 800a8a0:	0800afbd 	.word	0x0800afbd
 800a8a4:	0800afce 	.word	0x0800afce

0800a8a8 <__sflush_r>:
 800a8a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a8ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b0:	0716      	lsls	r6, r2, #28
 800a8b2:	4605      	mov	r5, r0
 800a8b4:	460c      	mov	r4, r1
 800a8b6:	d454      	bmi.n	800a962 <__sflush_r+0xba>
 800a8b8:	684b      	ldr	r3, [r1, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	dc02      	bgt.n	800a8c4 <__sflush_r+0x1c>
 800a8be:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	dd48      	ble.n	800a956 <__sflush_r+0xae>
 800a8c4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d045      	beq.n	800a956 <__sflush_r+0xae>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a8d0:	682f      	ldr	r7, [r5, #0]
 800a8d2:	6a21      	ldr	r1, [r4, #32]
 800a8d4:	602b      	str	r3, [r5, #0]
 800a8d6:	d030      	beq.n	800a93a <__sflush_r+0x92>
 800a8d8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a8da:	89a3      	ldrh	r3, [r4, #12]
 800a8dc:	0759      	lsls	r1, r3, #29
 800a8de:	d505      	bpl.n	800a8ec <__sflush_r+0x44>
 800a8e0:	6863      	ldr	r3, [r4, #4]
 800a8e2:	1ad2      	subs	r2, r2, r3
 800a8e4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a8e6:	b10b      	cbz	r3, 800a8ec <__sflush_r+0x44>
 800a8e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a8ea:	1ad2      	subs	r2, r2, r3
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a8f0:	6a21      	ldr	r1, [r4, #32]
 800a8f2:	4628      	mov	r0, r5
 800a8f4:	47b0      	blx	r6
 800a8f6:	1c43      	adds	r3, r0, #1
 800a8f8:	89a3      	ldrh	r3, [r4, #12]
 800a8fa:	d106      	bne.n	800a90a <__sflush_r+0x62>
 800a8fc:	6829      	ldr	r1, [r5, #0]
 800a8fe:	291d      	cmp	r1, #29
 800a900:	d82b      	bhi.n	800a95a <__sflush_r+0xb2>
 800a902:	4a2a      	ldr	r2, [pc, #168]	@ (800a9ac <__sflush_r+0x104>)
 800a904:	40ca      	lsrs	r2, r1
 800a906:	07d6      	lsls	r6, r2, #31
 800a908:	d527      	bpl.n	800a95a <__sflush_r+0xb2>
 800a90a:	2200      	movs	r2, #0
 800a90c:	6062      	str	r2, [r4, #4]
 800a90e:	04d9      	lsls	r1, r3, #19
 800a910:	6922      	ldr	r2, [r4, #16]
 800a912:	6022      	str	r2, [r4, #0]
 800a914:	d504      	bpl.n	800a920 <__sflush_r+0x78>
 800a916:	1c42      	adds	r2, r0, #1
 800a918:	d101      	bne.n	800a91e <__sflush_r+0x76>
 800a91a:	682b      	ldr	r3, [r5, #0]
 800a91c:	b903      	cbnz	r3, 800a920 <__sflush_r+0x78>
 800a91e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a920:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a922:	602f      	str	r7, [r5, #0]
 800a924:	b1b9      	cbz	r1, 800a956 <__sflush_r+0xae>
 800a926:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a92a:	4299      	cmp	r1, r3
 800a92c:	d002      	beq.n	800a934 <__sflush_r+0x8c>
 800a92e:	4628      	mov	r0, r5
 800a930:	f7ff fca2 	bl	800a278 <_free_r>
 800a934:	2300      	movs	r3, #0
 800a936:	6363      	str	r3, [r4, #52]	@ 0x34
 800a938:	e00d      	b.n	800a956 <__sflush_r+0xae>
 800a93a:	2301      	movs	r3, #1
 800a93c:	4628      	mov	r0, r5
 800a93e:	47b0      	blx	r6
 800a940:	4602      	mov	r2, r0
 800a942:	1c50      	adds	r0, r2, #1
 800a944:	d1c9      	bne.n	800a8da <__sflush_r+0x32>
 800a946:	682b      	ldr	r3, [r5, #0]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d0c6      	beq.n	800a8da <__sflush_r+0x32>
 800a94c:	2b1d      	cmp	r3, #29
 800a94e:	d001      	beq.n	800a954 <__sflush_r+0xac>
 800a950:	2b16      	cmp	r3, #22
 800a952:	d11e      	bne.n	800a992 <__sflush_r+0xea>
 800a954:	602f      	str	r7, [r5, #0]
 800a956:	2000      	movs	r0, #0
 800a958:	e022      	b.n	800a9a0 <__sflush_r+0xf8>
 800a95a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a95e:	b21b      	sxth	r3, r3
 800a960:	e01b      	b.n	800a99a <__sflush_r+0xf2>
 800a962:	690f      	ldr	r7, [r1, #16]
 800a964:	2f00      	cmp	r7, #0
 800a966:	d0f6      	beq.n	800a956 <__sflush_r+0xae>
 800a968:	0793      	lsls	r3, r2, #30
 800a96a:	680e      	ldr	r6, [r1, #0]
 800a96c:	bf08      	it	eq
 800a96e:	694b      	ldreq	r3, [r1, #20]
 800a970:	600f      	str	r7, [r1, #0]
 800a972:	bf18      	it	ne
 800a974:	2300      	movne	r3, #0
 800a976:	eba6 0807 	sub.w	r8, r6, r7
 800a97a:	608b      	str	r3, [r1, #8]
 800a97c:	f1b8 0f00 	cmp.w	r8, #0
 800a980:	dde9      	ble.n	800a956 <__sflush_r+0xae>
 800a982:	6a21      	ldr	r1, [r4, #32]
 800a984:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a986:	4643      	mov	r3, r8
 800a988:	463a      	mov	r2, r7
 800a98a:	4628      	mov	r0, r5
 800a98c:	47b0      	blx	r6
 800a98e:	2800      	cmp	r0, #0
 800a990:	dc08      	bgt.n	800a9a4 <__sflush_r+0xfc>
 800a992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a99a:	81a3      	strh	r3, [r4, #12]
 800a99c:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a4:	4407      	add	r7, r0
 800a9a6:	eba8 0800 	sub.w	r8, r8, r0
 800a9aa:	e7e7      	b.n	800a97c <__sflush_r+0xd4>
 800a9ac:	20400001 	.word	0x20400001

0800a9b0 <_fflush_r>:
 800a9b0:	b538      	push	{r3, r4, r5, lr}
 800a9b2:	690b      	ldr	r3, [r1, #16]
 800a9b4:	4605      	mov	r5, r0
 800a9b6:	460c      	mov	r4, r1
 800a9b8:	b913      	cbnz	r3, 800a9c0 <_fflush_r+0x10>
 800a9ba:	2500      	movs	r5, #0
 800a9bc:	4628      	mov	r0, r5
 800a9be:	bd38      	pop	{r3, r4, r5, pc}
 800a9c0:	b118      	cbz	r0, 800a9ca <_fflush_r+0x1a>
 800a9c2:	6a03      	ldr	r3, [r0, #32]
 800a9c4:	b90b      	cbnz	r3, 800a9ca <_fflush_r+0x1a>
 800a9c6:	f7ff f9f7 	bl	8009db8 <__sinit>
 800a9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d0f3      	beq.n	800a9ba <_fflush_r+0xa>
 800a9d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a9d4:	07d0      	lsls	r0, r2, #31
 800a9d6:	d404      	bmi.n	800a9e2 <_fflush_r+0x32>
 800a9d8:	0599      	lsls	r1, r3, #22
 800a9da:	d402      	bmi.n	800a9e2 <_fflush_r+0x32>
 800a9dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9de:	f7ff fc48 	bl	800a272 <__retarget_lock_acquire_recursive>
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	f7ff ff5f 	bl	800a8a8 <__sflush_r>
 800a9ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a9ec:	07da      	lsls	r2, r3, #31
 800a9ee:	4605      	mov	r5, r0
 800a9f0:	d4e4      	bmi.n	800a9bc <_fflush_r+0xc>
 800a9f2:	89a3      	ldrh	r3, [r4, #12]
 800a9f4:	059b      	lsls	r3, r3, #22
 800a9f6:	d4e1      	bmi.n	800a9bc <_fflush_r+0xc>
 800a9f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a9fa:	f7ff fc3b 	bl	800a274 <__retarget_lock_release_recursive>
 800a9fe:	e7dd      	b.n	800a9bc <_fflush_r+0xc>

0800aa00 <__swhatbuf_r>:
 800aa00:	b570      	push	{r4, r5, r6, lr}
 800aa02:	460c      	mov	r4, r1
 800aa04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa08:	2900      	cmp	r1, #0
 800aa0a:	b096      	sub	sp, #88	@ 0x58
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	461e      	mov	r6, r3
 800aa10:	da0d      	bge.n	800aa2e <__swhatbuf_r+0x2e>
 800aa12:	89a3      	ldrh	r3, [r4, #12]
 800aa14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aa18:	f04f 0100 	mov.w	r1, #0
 800aa1c:	bf14      	ite	ne
 800aa1e:	2340      	movne	r3, #64	@ 0x40
 800aa20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aa24:	2000      	movs	r0, #0
 800aa26:	6031      	str	r1, [r6, #0]
 800aa28:	602b      	str	r3, [r5, #0]
 800aa2a:	b016      	add	sp, #88	@ 0x58
 800aa2c:	bd70      	pop	{r4, r5, r6, pc}
 800aa2e:	466a      	mov	r2, sp
 800aa30:	f000 f848 	bl	800aac4 <_fstat_r>
 800aa34:	2800      	cmp	r0, #0
 800aa36:	dbec      	blt.n	800aa12 <__swhatbuf_r+0x12>
 800aa38:	9901      	ldr	r1, [sp, #4]
 800aa3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aa3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aa42:	4259      	negs	r1, r3
 800aa44:	4159      	adcs	r1, r3
 800aa46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aa4a:	e7eb      	b.n	800aa24 <__swhatbuf_r+0x24>

0800aa4c <__smakebuf_r>:
 800aa4c:	898b      	ldrh	r3, [r1, #12]
 800aa4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa50:	079d      	lsls	r5, r3, #30
 800aa52:	4606      	mov	r6, r0
 800aa54:	460c      	mov	r4, r1
 800aa56:	d507      	bpl.n	800aa68 <__smakebuf_r+0x1c>
 800aa58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aa5c:	6023      	str	r3, [r4, #0]
 800aa5e:	6123      	str	r3, [r4, #16]
 800aa60:	2301      	movs	r3, #1
 800aa62:	6163      	str	r3, [r4, #20]
 800aa64:	b003      	add	sp, #12
 800aa66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa68:	ab01      	add	r3, sp, #4
 800aa6a:	466a      	mov	r2, sp
 800aa6c:	f7ff ffc8 	bl	800aa00 <__swhatbuf_r>
 800aa70:	9f00      	ldr	r7, [sp, #0]
 800aa72:	4605      	mov	r5, r0
 800aa74:	4639      	mov	r1, r7
 800aa76:	4630      	mov	r0, r6
 800aa78:	f7ff f886 	bl	8009b88 <_malloc_r>
 800aa7c:	b948      	cbnz	r0, 800aa92 <__smakebuf_r+0x46>
 800aa7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa82:	059a      	lsls	r2, r3, #22
 800aa84:	d4ee      	bmi.n	800aa64 <__smakebuf_r+0x18>
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	f043 0302 	orr.w	r3, r3, #2
 800aa8e:	81a3      	strh	r3, [r4, #12]
 800aa90:	e7e2      	b.n	800aa58 <__smakebuf_r+0xc>
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	6020      	str	r0, [r4, #0]
 800aa96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa9a:	81a3      	strh	r3, [r4, #12]
 800aa9c:	9b01      	ldr	r3, [sp, #4]
 800aa9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aaa2:	b15b      	cbz	r3, 800aabc <__smakebuf_r+0x70>
 800aaa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	f000 f81d 	bl	800aae8 <_isatty_r>
 800aaae:	b128      	cbz	r0, 800aabc <__smakebuf_r+0x70>
 800aab0:	89a3      	ldrh	r3, [r4, #12]
 800aab2:	f023 0303 	bic.w	r3, r3, #3
 800aab6:	f043 0301 	orr.w	r3, r3, #1
 800aaba:	81a3      	strh	r3, [r4, #12]
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	431d      	orrs	r5, r3
 800aac0:	81a5      	strh	r5, [r4, #12]
 800aac2:	e7cf      	b.n	800aa64 <__smakebuf_r+0x18>

0800aac4 <_fstat_r>:
 800aac4:	b538      	push	{r3, r4, r5, lr}
 800aac6:	4d07      	ldr	r5, [pc, #28]	@ (800aae4 <_fstat_r+0x20>)
 800aac8:	2300      	movs	r3, #0
 800aaca:	4604      	mov	r4, r0
 800aacc:	4608      	mov	r0, r1
 800aace:	4611      	mov	r1, r2
 800aad0:	602b      	str	r3, [r5, #0]
 800aad2:	f7f6 fd30 	bl	8001536 <_fstat>
 800aad6:	1c43      	adds	r3, r0, #1
 800aad8:	d102      	bne.n	800aae0 <_fstat_r+0x1c>
 800aada:	682b      	ldr	r3, [r5, #0]
 800aadc:	b103      	cbz	r3, 800aae0 <_fstat_r+0x1c>
 800aade:	6023      	str	r3, [r4, #0]
 800aae0:	bd38      	pop	{r3, r4, r5, pc}
 800aae2:	bf00      	nop
 800aae4:	20000af8 	.word	0x20000af8

0800aae8 <_isatty_r>:
 800aae8:	b538      	push	{r3, r4, r5, lr}
 800aaea:	4d06      	ldr	r5, [pc, #24]	@ (800ab04 <_isatty_r+0x1c>)
 800aaec:	2300      	movs	r3, #0
 800aaee:	4604      	mov	r4, r0
 800aaf0:	4608      	mov	r0, r1
 800aaf2:	602b      	str	r3, [r5, #0]
 800aaf4:	f7f6 fd2f 	bl	8001556 <_isatty>
 800aaf8:	1c43      	adds	r3, r0, #1
 800aafa:	d102      	bne.n	800ab02 <_isatty_r+0x1a>
 800aafc:	682b      	ldr	r3, [r5, #0]
 800aafe:	b103      	cbz	r3, 800ab02 <_isatty_r+0x1a>
 800ab00:	6023      	str	r3, [r4, #0]
 800ab02:	bd38      	pop	{r3, r4, r5, pc}
 800ab04:	20000af8 	.word	0x20000af8

0800ab08 <_init>:
 800ab08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab0a:	bf00      	nop
 800ab0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab0e:	bc08      	pop	{r3}
 800ab10:	469e      	mov	lr, r3
 800ab12:	4770      	bx	lr

0800ab14 <_fini>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr
