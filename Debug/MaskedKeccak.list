
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d12c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  0800d2c0  0800d2c0  0000e2c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d890  0800d890  0000f0f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d890  0800d890  0000e890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d898  0800d898  0000f0f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d898  0800d898  0000e898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d89c  0800d89c  0000e89c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000f8  20000000  0800d8a0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f0f8  2**0
                  CONTENTS
 10 .bss          00000a78  200000f8  200000f8  0000f0f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b70  20000b70  0000f0f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f0f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c4d9  00000000  00000000  0000f128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004aec  00000000  00000000  0002b601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001738  00000000  00000000  000300f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011cf  00000000  00000000  00031828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006fe6  00000000  00000000  000329f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020227  00000000  00000000  000399dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1dcf  00000000  00000000  00059c04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b9d3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ba4  00000000  00000000  0012ba18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  001325bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000f8 	.word	0x200000f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d2a4 	.word	0x0800d2a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000fc 	.word	0x200000fc
 80001cc:	0800d2a4 	.word	0x0800d2a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <get_random64>:
#include "global_rng.h"
#include "stm32f4xx_hal.h"

extern RNG_HandleTypeDef hrng;  // defined in your HAL setup

uint64_t get_random64(void) {
 80005ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005b0:	b082      	sub	sp, #8
 80005b2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	4619      	mov	r1, r3
 80005b8:	4815      	ldr	r0, [pc, #84]	@ (8000610 <get_random64+0x64>)
 80005ba:	f007 fbb9 	bl	8007d30 <HAL_RNG_GenerateRandomNumber>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <get_random64+0x1c>
        Error_Handler(); // or fail securely
 80005c4:	f001 fda0 	bl	8002108 <Error_Handler>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 80005c8:	463b      	mov	r3, r7
 80005ca:	4619      	mov	r1, r3
 80005cc:	4810      	ldr	r0, [pc, #64]	@ (8000610 <get_random64+0x64>)
 80005ce:	f007 fbaf 	bl	8007d30 <HAL_RNG_GenerateRandomNumber>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d001      	beq.n	80005dc <get_random64+0x30>
        Error_Handler();
 80005d8:	f001 fd96 	bl	8002108 <Error_Handler>
    }
    return ((uint64_t)r1 << 32) | r2;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	2200      	movs	r2, #0
 80005e0:	469a      	mov	sl, r3
 80005e2:	4693      	mov	fp, r2
 80005e4:	f04f 0200 	mov.w	r2, #0
 80005e8:	f04f 0300 	mov.w	r3, #0
 80005ec:	4653      	mov	r3, sl
 80005ee:	2200      	movs	r2, #0
 80005f0:	6839      	ldr	r1, [r7, #0]
 80005f2:	2000      	movs	r0, #0
 80005f4:	460c      	mov	r4, r1
 80005f6:	4605      	mov	r5, r0
 80005f8:	ea42 0804 	orr.w	r8, r2, r4
 80005fc:	ea43 0905 	orr.w	r9, r3, r5
 8000600:	4642      	mov	r2, r8
 8000602:	464b      	mov	r3, r9
}
 8000604:	4610      	mov	r0, r2
 8000606:	4619      	mov	r1, r3
 8000608:	3708      	adds	r7, #8
 800060a:	46bd      	mov	sp, r7
 800060c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000610:	200001b0 	.word	0x200001b0

08000614 <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 8000614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000618:	b0a0      	sub	sp, #128	@ 0x80
 800061a:	af00      	add	r7, sp, #0
 800061c:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 800061e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000622:	2328      	movs	r3, #40	@ 0x28
 8000624:	461a      	mov	r2, r3
 8000626:	2100      	movs	r1, #0
 8000628:	f00c f910 	bl	800c84c <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 800062c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000630:	2328      	movs	r3, #40	@ 0x28
 8000632:	461a      	mov	r2, r3
 8000634:	2100      	movs	r1, #0
 8000636:	f00c f909 	bl	800c84c <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 800063a:	2300      	movs	r3, #0
 800063c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800063e:	e043      	b.n	80006c8 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 8000640:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000642:	00da      	lsls	r2, r3, #3
 8000644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000646:	4413      	add	r3, r2
 8000648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800064c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800064e:	3305      	adds	r3, #5
 8000650:	00da      	lsls	r2, r3, #3
 8000652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000654:	4413      	add	r3, r2
 8000656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800065a:	ea80 0402 	eor.w	r4, r0, r2
 800065e:	ea81 0503 	eor.w	r5, r1, r3
 8000662:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000664:	330a      	adds	r3, #10
 8000666:	00da      	lsls	r2, r3, #3
 8000668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800066a:	4413      	add	r3, r2
 800066c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000670:	ea84 0a02 	eor.w	sl, r4, r2
 8000674:	ea85 0b03 	eor.w	fp, r5, r3
 8000678:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800067a:	330f      	adds	r3, #15
 800067c:	00da      	lsls	r2, r3, #3
 800067e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000680:	4413      	add	r3, r2
 8000682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000686:	ea8a 0102 	eor.w	r1, sl, r2
 800068a:	61b9      	str	r1, [r7, #24]
 800068c:	ea8b 0303 	eor.w	r3, fp, r3
 8000690:	61fb      	str	r3, [r7, #28]
 8000692:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000694:	3314      	adds	r3, #20
 8000696:	00da      	lsls	r2, r3, #3
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	4413      	add	r3, r2
 800069c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006a0:	69b9      	ldr	r1, [r7, #24]
 80006a2:	4051      	eors	r1, r2
 80006a4:	6139      	str	r1, [r7, #16]
 80006a6:	69f9      	ldr	r1, [r7, #28]
 80006a8:	404b      	eors	r3, r1
 80006aa:	617b      	str	r3, [r7, #20]
 80006ac:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ae:	00db      	lsls	r3, r3, #3
 80006b0:	3360      	adds	r3, #96	@ 0x60
 80006b2:	f107 0220 	add.w	r2, r7, #32
 80006b6:	4413      	add	r3, r2
 80006b8:	3b30      	subs	r3, #48	@ 0x30
 80006ba:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80006be:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 80006c2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006c4:	3301      	adds	r3, #1
 80006c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	ddb8      	ble.n	8000640 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 80006ce:	2300      	movs	r3, #0
 80006d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006d2:	e072      	b.n	80007ba <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 80006d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006d6:	1d19      	adds	r1, r3, #4
 80006d8:	4b3c      	ldr	r3, [pc, #240]	@ (80007cc <theta+0x1b8>)
 80006da:	fb83 2301 	smull	r2, r3, r3, r1
 80006de:	105a      	asrs	r2, r3, #1
 80006e0:	17cb      	asrs	r3, r1, #31
 80006e2:	1ad2      	subs	r2, r2, r3
 80006e4:	4613      	mov	r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	4413      	add	r3, r2
 80006ea:	1aca      	subs	r2, r1, r3
 80006ec:	00d3      	lsls	r3, r2, #3
 80006ee:	3360      	adds	r3, #96	@ 0x60
 80006f0:	f107 0220 	add.w	r2, r7, #32
 80006f4:	4413      	add	r3, r2
 80006f6:	3b30      	subs	r3, #48	@ 0x30
 80006f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006fc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fe:	1c5c      	adds	r4, r3, #1
 8000700:	4b32      	ldr	r3, [pc, #200]	@ (80007cc <theta+0x1b8>)
 8000702:	fb83 2304 	smull	r2, r3, r3, r4
 8000706:	105a      	asrs	r2, r3, #1
 8000708:	17e3      	asrs	r3, r4, #31
 800070a:	1ad2      	subs	r2, r2, r3
 800070c:	4613      	mov	r3, r2
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	4413      	add	r3, r2
 8000712:	1ae2      	subs	r2, r4, r3
 8000714:	00d3      	lsls	r3, r2, #3
 8000716:	3360      	adds	r3, #96	@ 0x60
 8000718:	f107 0220 	add.w	r2, r7, #32
 800071c:	4413      	add	r3, r2
 800071e:	3b30      	subs	r3, #48	@ 0x30
 8000720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000724:	0fd5      	lsrs	r5, r2, #31
 8000726:	005c      	lsls	r4, r3, #1
 8000728:	ea45 0904 	orr.w	r9, r5, r4
 800072c:	0fdc      	lsrs	r4, r3, #31
 800072e:	0053      	lsls	r3, r2, #1
 8000730:	ea44 0803 	orr.w	r8, r4, r3
 8000734:	ea80 0308 	eor.w	r3, r0, r8
 8000738:	60bb      	str	r3, [r7, #8]
 800073a:	ea81 0309 	eor.w	r3, r1, r9
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000742:	00db      	lsls	r3, r3, #3
 8000744:	3360      	adds	r3, #96	@ 0x60
 8000746:	f107 0220 	add.w	r2, r7, #32
 800074a:	4413      	add	r3, r2
 800074c:	3b58      	subs	r3, #88	@ 0x58
 800074e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000752:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 8000756:	2300      	movs	r3, #0
 8000758:	67bb      	str	r3, [r7, #120]	@ 0x78
 800075a:	e028      	b.n	80007ae <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 800075c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800075e:	4613      	mov	r3, r2
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	441a      	add	r2, r3
 8000764:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000766:	4413      	add	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800076c:	4413      	add	r3, r2
 800076e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000772:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000774:	00db      	lsls	r3, r3, #3
 8000776:	3360      	adds	r3, #96	@ 0x60
 8000778:	f107 0220 	add.w	r2, r7, #32
 800077c:	4413      	add	r3, r2
 800077e:	3b58      	subs	r3, #88	@ 0x58
 8000780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000784:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 8000786:	462c      	mov	r4, r5
 8000788:	00a4      	lsls	r4, r4, #2
 800078a:	4425      	add	r5, r4
 800078c:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800078e:	442c      	add	r4, r5
 8000790:	00e4      	lsls	r4, r4, #3
 8000792:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8000794:	442c      	add	r4, r5
 8000796:	ea80 0502 	eor.w	r5, r0, r2
 800079a:	603d      	str	r5, [r7, #0]
 800079c:	404b      	eors	r3, r1
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007a4:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 80007a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007aa:	3301      	adds	r3, #1
 80007ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80007ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007b0:	2b04      	cmp	r3, #4
 80007b2:	ddd3      	ble.n	800075c <theta+0x148>
  for (x = 0; x < 5; ++x) {
 80007b4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007b6:	3301      	adds	r3, #1
 80007b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80007ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007bc:	2b04      	cmp	r3, #4
 80007be:	dd89      	ble.n	80006d4 <theta+0xc0>
    }
  }
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3780      	adds	r7, #128	@ 0x80
 80007c6:	46bd      	mov	sp, r7
 80007c8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007cc:	66666667 	.word	0x66666667

080007d0 <rho>:

void rho(uint64_t* state)
{
 80007d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007d4:	b086      	sub	sp, #24
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 80007da:	2100      	movs	r1, #0
 80007dc:	6139      	str	r1, [r7, #16]
 80007de:	e062      	b.n	80008a6 <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 80007e0:	2100      	movs	r1, #0
 80007e2:	6179      	str	r1, [r7, #20]
 80007e4:	e059      	b.n	800089a <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 80007e6:	6938      	ldr	r0, [r7, #16]
 80007e8:	4601      	mov	r1, r0
 80007ea:	0089      	lsls	r1, r1, #2
 80007ec:	4408      	add	r0, r1
 80007ee:	6979      	ldr	r1, [r7, #20]
 80007f0:	4401      	add	r1, r0
 80007f2:	00c9      	lsls	r1, r1, #3
 80007f4:	68f8      	ldr	r0, [r7, #12]
 80007f6:	4401      	add	r1, r0
 80007f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007fc:	693e      	ldr	r6, [r7, #16]
 80007fe:	4634      	mov	r4, r6
 8000800:	4626      	mov	r6, r4
 8000802:	00b6      	lsls	r6, r6, #2
 8000804:	eb06 0c04 	add.w	ip, r6, r4
 8000808:	697e      	ldr	r6, [r7, #20]
 800080a:	4466      	add	r6, ip
 800080c:	4c2a      	ldr	r4, [pc, #168]	@ (80008b8 <rho+0xe8>)
 800080e:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000812:	693c      	ldr	r4, [r7, #16]
 8000814:	46a4      	mov	ip, r4
 8000816:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800081a:	44a4      	add	ip, r4
 800081c:	697c      	ldr	r4, [r7, #20]
 800081e:	44a4      	add	ip, r4
 8000820:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000824:	68fc      	ldr	r4, [r7, #12]
 8000826:	eb04 0a0c 	add.w	sl, r4, ip
 800082a:	f1a6 0e20 	sub.w	lr, r6, #32
 800082e:	f1c6 0c20 	rsb	ip, r6, #32
 8000832:	fa01 f406 	lsl.w	r4, r1, r6
 8000836:	607c      	str	r4, [r7, #4]
 8000838:	fa00 fe0e 	lsl.w	lr, r0, lr
 800083c:	687c      	ldr	r4, [r7, #4]
 800083e:	ea44 040e 	orr.w	r4, r4, lr
 8000842:	607c      	str	r4, [r7, #4]
 8000844:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000848:	687c      	ldr	r4, [r7, #4]
 800084a:	ea44 040c 	orr.w	r4, r4, ip
 800084e:	607c      	str	r4, [r7, #4]
 8000850:	fa00 f406 	lsl.w	r4, r0, r6
 8000854:	603c      	str	r4, [r7, #0]
 8000856:	4276      	negs	r6, r6
 8000858:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 800085c:	f1c6 0e20 	rsb	lr, r6, #32
 8000860:	f1a6 0c20 	sub.w	ip, r6, #32
 8000864:	fa20 f206 	lsr.w	r2, r0, r6
 8000868:	fa01 fe0e 	lsl.w	lr, r1, lr
 800086c:	ea42 020e 	orr.w	r2, r2, lr
 8000870:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000874:	ea42 020c 	orr.w	r2, r2, ip
 8000878:	fa21 f306 	lsr.w	r3, r1, r6
 800087c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000880:	4621      	mov	r1, r4
 8000882:	ea41 0802 	orr.w	r8, r1, r2
 8000886:	4629      	mov	r1, r5
 8000888:	ea41 0903 	orr.w	r9, r1, r3
 800088c:	4642      	mov	r2, r8
 800088e:	464b      	mov	r3, r9
 8000890:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 8000894:	6979      	ldr	r1, [r7, #20]
 8000896:	3101      	adds	r1, #1
 8000898:	6179      	str	r1, [r7, #20]
 800089a:	6979      	ldr	r1, [r7, #20]
 800089c:	2904      	cmp	r1, #4
 800089e:	dda2      	ble.n	80007e6 <rho+0x16>
  for (y = 0; y < 5; ++y) {
 80008a0:	6939      	ldr	r1, [r7, #16]
 80008a2:	3101      	adds	r1, #1
 80008a4:	6139      	str	r1, [r7, #16]
 80008a6:	6939      	ldr	r1, [r7, #16]
 80008a8:	2904      	cmp	r1, #4
 80008aa:	dd99      	ble.n	80007e0 <rho+0x10>
    }
  }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3718      	adds	r7, #24
 80008b2:	46bd      	mov	sp, r7
 80008b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008b8:	0800d5c4 	.word	0x0800d5c4

080008bc <pi>:

void pi(uint64_t* state)
{
 80008bc:	b480      	push	{r7}
 80008be:	b0b9      	sub	sp, #228	@ 0xe4
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80008c4:	2300      	movs	r3, #0
 80008c6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008ca:	e02c      	b.n	8000926 <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008d2:	e01f      	b.n	8000914 <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 80008d4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008d8:	4613      	mov	r3, r2
 80008da:	009b      	lsls	r3, r3, #2
 80008dc:	441a      	add	r2, r3
 80008de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008e2:	4413      	add	r3, r2
 80008e4:	00db      	lsls	r3, r3, #3
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	18d0      	adds	r0, r2, r3
 80008ea:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	441a      	add	r2, r3
 80008f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008f8:	18d1      	adds	r1, r2, r3
 80008fa:	e9d0 2300 	ldrd	r2, r3, [r0]
 80008fe:	00c9      	lsls	r1, r1, #3
 8000900:	31e0      	adds	r1, #224	@ 0xe0
 8000902:	4439      	add	r1, r7
 8000904:	39d8      	subs	r1, #216	@ 0xd8
 8000906:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 800090a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800090e:	3301      	adds	r3, #1
 8000910:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000914:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000918:	2b04      	cmp	r3, #4
 800091a:	dddb      	ble.n	80008d4 <pi+0x18>
  for (y = 0; y < 5; ++y) {
 800091c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000920:	3301      	adds	r3, #1
 8000922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800092a:	2b04      	cmp	r3, #4
 800092c:	ddce      	ble.n	80008cc <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 800092e:	2300      	movs	r3, #0
 8000930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000934:	e04f      	b.n	80009d6 <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 8000936:	2300      	movs	r3, #0
 8000938:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800093c:	e042      	b.n	80009c4 <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 800093e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000942:	4b2a      	ldr	r3, [pc, #168]	@ (80009ec <pi+0x130>)
 8000944:	fb83 1302 	smull	r1, r3, r3, r2
 8000948:	1059      	asrs	r1, r3, #1
 800094a:	17d3      	asrs	r3, r2, #31
 800094c:	1ac9      	subs	r1, r1, r3
 800094e:	460b      	mov	r3, r1
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	440b      	add	r3, r1
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 800095a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800095e:	0059      	lsls	r1, r3, #1
 8000960:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000964:	4613      	mov	r3, r2
 8000966:	005b      	lsls	r3, r3, #1
 8000968:	4413      	add	r3, r2
 800096a:	18ca      	adds	r2, r1, r3
 800096c:	4b1f      	ldr	r3, [pc, #124]	@ (80009ec <pi+0x130>)
 800096e:	fb83 1302 	smull	r1, r3, r3, r2
 8000972:	1059      	asrs	r1, r3, #1
 8000974:	17d3      	asrs	r3, r2, #31
 8000976:	1ac9      	subs	r1, r1, r3
 8000978:	460b      	mov	r3, r1
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	440b      	add	r3, r1
 800097e:	1ad3      	subs	r3, r2, r3
 8000980:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 8000984:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	441a      	add	r2, r3
 800098e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000992:	18d0      	adds	r0, r2, r3
 8000994:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000998:	4613      	mov	r3, r2
 800099a:	009b      	lsls	r3, r3, #2
 800099c:	441a      	add	r2, r3
 800099e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80009a2:	4413      	add	r3, r2
 80009a4:	00db      	lsls	r3, r3, #3
 80009a6:	687a      	ldr	r2, [r7, #4]
 80009a8:	18d1      	adds	r1, r2, r3
 80009aa:	00c3      	lsls	r3, r0, #3
 80009ac:	33e0      	adds	r3, #224	@ 0xe0
 80009ae:	443b      	add	r3, r7
 80009b0:	3bd8      	subs	r3, #216	@ 0xd8
 80009b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b6:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 80009ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009be:	3301      	adds	r3, #1
 80009c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80009c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009c8:	2b04      	cmp	r3, #4
 80009ca:	ddb8      	ble.n	800093e <pi+0x82>
  for (y = 0; y < 5; ++y) {
 80009cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009d0:	3301      	adds	r3, #1
 80009d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80009d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009da:	2b04      	cmp	r3, #4
 80009dc:	ddab      	ble.n	8000936 <pi+0x7a>
    }
  }
}
 80009de:	bf00      	nop
 80009e0:	bf00      	nop
 80009e2:	37e4      	adds	r7, #228	@ 0xe4
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	66666667 	.word	0x66666667

080009f0 <chi>:

void chi(uint64_t* state)
{
 80009f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009f4:	b08e      	sub	sp, #56	@ 0x38
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80009fa:	2100      	movs	r1, #0
 80009fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80009fe:	e072      	b.n	8000ae6 <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 8000a00:	2100      	movs	r1, #0
 8000a02:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a04:	e04e      	b.n	8000aa4 <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 8000a06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a08:	4601      	mov	r1, r0
 8000a0a:	0089      	lsls	r1, r1, #2
 8000a0c:	4408      	add	r0, r1
 8000a0e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a10:	4401      	add	r1, r0
 8000a12:	00c9      	lsls	r1, r1, #3
 8000a14:	6878      	ldr	r0, [r7, #4]
 8000a16:	4401      	add	r1, r0
 8000a18:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8000a1c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a1e:	4601      	mov	r1, r0
 8000a20:	0089      	lsls	r1, r1, #2
 8000a22:	eb01 0c00 	add.w	ip, r1, r0
 8000a26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a28:	1c4e      	adds	r6, r1, #1
 8000a2a:	4934      	ldr	r1, [pc, #208]	@ (8000afc <chi+0x10c>)
 8000a2c:	fb81 0106 	smull	r0, r1, r1, r6
 8000a30:	1048      	asrs	r0, r1, #1
 8000a32:	17f1      	asrs	r1, r6, #31
 8000a34:	1a40      	subs	r0, r0, r1
 8000a36:	4601      	mov	r1, r0
 8000a38:	0089      	lsls	r1, r1, #2
 8000a3a:	4401      	add	r1, r0
 8000a3c:	1a70      	subs	r0, r6, r1
 8000a3e:	eb0c 0100 	add.w	r1, ip, r0
 8000a42:	00c9      	lsls	r1, r1, #3
 8000a44:	6878      	ldr	r0, [r7, #4]
 8000a46:	4401      	add	r1, r0
 8000a48:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a4c:	43c2      	mvns	r2, r0
 8000a4e:	43cb      	mvns	r3, r1
 8000a50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a52:	4601      	mov	r1, r0
 8000a54:	0089      	lsls	r1, r1, #2
 8000a56:	eb01 0c00 	add.w	ip, r1, r0
 8000a5a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a5c:	1c8e      	adds	r6, r1, #2
 8000a5e:	4927      	ldr	r1, [pc, #156]	@ (8000afc <chi+0x10c>)
 8000a60:	fb81 0106 	smull	r0, r1, r1, r6
 8000a64:	1048      	asrs	r0, r1, #1
 8000a66:	17f1      	asrs	r1, r6, #31
 8000a68:	1a40      	subs	r0, r0, r1
 8000a6a:	4601      	mov	r1, r0
 8000a6c:	0089      	lsls	r1, r1, #2
 8000a6e:	4401      	add	r1, r0
 8000a70:	1a70      	subs	r0, r6, r1
 8000a72:	eb0c 0100 	add.w	r1, ip, r0
 8000a76:	00c9      	lsls	r1, r1, #3
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	4401      	add	r1, r0
 8000a7c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a80:	ea02 0400 	and.w	r4, r2, r0
 8000a84:	ea03 0501 	and.w	r5, r3, r1
 8000a88:	ea8a 0804 	eor.w	r8, sl, r4
 8000a8c:	ea8b 0905 	eor.w	r9, fp, r5
 8000a90:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a92:	00c9      	lsls	r1, r1, #3
 8000a94:	3138      	adds	r1, #56	@ 0x38
 8000a96:	4439      	add	r1, r7
 8000a98:	3930      	subs	r1, #48	@ 0x30
 8000a9a:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 8000a9e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000aa0:	3101      	adds	r1, #1
 8000aa2:	6379      	str	r1, [r7, #52]	@ 0x34
 8000aa4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000aa6:	2904      	cmp	r1, #4
 8000aa8:	ddad      	ble.n	8000a06 <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000aaa:	2100      	movs	r1, #0
 8000aac:	6379      	str	r1, [r7, #52]	@ 0x34
 8000aae:	e014      	b.n	8000ada <chi+0xea>
      state[y * 5 + x] = C[x];
 8000ab0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ab2:	4601      	mov	r1, r0
 8000ab4:	0089      	lsls	r1, r1, #2
 8000ab6:	4408      	add	r0, r1
 8000ab8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000aba:	4401      	add	r1, r0
 8000abc:	00c9      	lsls	r1, r1, #3
 8000abe:	6878      	ldr	r0, [r7, #4]
 8000ac0:	1846      	adds	r6, r0, r1
 8000ac2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac4:	00c9      	lsls	r1, r1, #3
 8000ac6:	3138      	adds	r1, #56	@ 0x38
 8000ac8:	4439      	add	r1, r7
 8000aca:	3930      	subs	r1, #48	@ 0x30
 8000acc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ad0:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000ad4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ad6:	3101      	adds	r1, #1
 8000ad8:	6379      	str	r1, [r7, #52]	@ 0x34
 8000ada:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000adc:	2904      	cmp	r1, #4
 8000ade:	dde7      	ble.n	8000ab0 <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 8000ae0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ae2:	3101      	adds	r1, #1
 8000ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8000ae6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ae8:	2904      	cmp	r1, #4
 8000aea:	dd89      	ble.n	8000a00 <chi+0x10>
    }
  }
}
 8000aec:	bf00      	nop
 8000aee:	bf00      	nop
 8000af0:	3738      	adds	r7, #56	@ 0x38
 8000af2:	46bd      	mov	sp, r7
 8000af4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	66666667 	.word	0x66666667

08000b00 <iota>:

void iota(uint64_t* state, int i)
{
 8000b00:	b4b0      	push	{r4, r5, r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
  /* Iota */
  /* XXX: truncate RC[i] if w < 64 */
  state[0] = state[0] ^ RC[i];
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000b10:	4808      	ldr	r0, [pc, #32]	@ (8000b34 <iota+0x34>)
 8000b12:	6839      	ldr	r1, [r7, #0]
 8000b14:	00c9      	lsls	r1, r1, #3
 8000b16:	4401      	add	r1, r0
 8000b18:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b1c:	ea84 0200 	eor.w	r2, r4, r0
 8000b20:	ea85 0301 	eor.w	r3, r5, r1
 8000b24:	6879      	ldr	r1, [r7, #4]
 8000b26:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bcb0      	pop	{r4, r5, r7}
 8000b32:	4770      	bx	lr
 8000b34:	0800d670 	.word	0x0800d670

08000b38 <keccakf>:

/* Keccak-F[b] function */
int keccakf(int rounds, uint64_t* state)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b084      	sub	sp, #16
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < rounds; ++i) {
 8000b42:	2300      	movs	r3, #0
 8000b44:	60fb      	str	r3, [r7, #12]
 8000b46:	e012      	b.n	8000b6e <keccakf+0x36>
    theta(state);
 8000b48:	6838      	ldr	r0, [r7, #0]
 8000b4a:	f7ff fd63 	bl	8000614 <theta>
    rho(state);
 8000b4e:	6838      	ldr	r0, [r7, #0]
 8000b50:	f7ff fe3e 	bl	80007d0 <rho>
    pi(state);
 8000b54:	6838      	ldr	r0, [r7, #0]
 8000b56:	f7ff feb1 	bl	80008bc <pi>
    chi(state);
 8000b5a:	6838      	ldr	r0, [r7, #0]
 8000b5c:	f7ff ff48 	bl	80009f0 <chi>
    iota(state, i);
 8000b60:	68f9      	ldr	r1, [r7, #12]
 8000b62:	6838      	ldr	r0, [r7, #0]
 8000b64:	f7ff ffcc 	bl	8000b00 <iota>
  for (i = 0; i < rounds; ++i) {
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	429a      	cmp	r2, r3
 8000b74:	dbe8      	blt.n	8000b48 <keccakf+0x10>
  }

  return 0;
 8000b76:	2300      	movs	r3, #0
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <sponge_absorb>:

void sponge_absorb(int nr, int r, int w, int l, uint64_t* A, uint8_t* P)
{
 8000b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b82:	b089      	sub	sp, #36	@ 0x24
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	60f8      	str	r0, [r7, #12]
 8000b88:	60b9      	str	r1, [r7, #8]
 8000b8a:	607a      	str	r2, [r7, #4]
 8000b8c:	603b      	str	r3, [r7, #0]
  /* absorbing phase */
  int x, y;
  int blocks = l / (r / 8);
 8000b8e:	68bb      	ldr	r3, [r7, #8]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da00      	bge.n	8000b96 <sponge_absorb+0x16>
 8000b94:	3307      	adds	r3, #7
 8000b96:	10db      	asrs	r3, r3, #3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	fb93 f3f2 	sdiv	r3, r3, r2
 8000ba0:	617b      	str	r3, [r7, #20]

  /* for every block Pi in P */
  for (y = 0; y < blocks; ++y) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	61bb      	str	r3, [r7, #24]
 8000ba6:	e035      	b.n	8000c14 <sponge_absorb+0x94>
    uint64_t* block = (uint64_t*)P + y * r/w;
 8000ba8:	69bb      	ldr	r3, [r7, #24]
 8000baa:	68ba      	ldr	r2, [r7, #8]
 8000bac:	fb03 f202 	mul.w	r2, r3, r2
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bb6:	00db      	lsls	r3, r3, #3
 8000bb8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000bba:	4413      	add	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]

    /* S[x, y] = S[x, y] ⊕ Pi[x + 5y],   ∀(x, y) such that x + 5y < r/w */
    for (x = 0; x < (r/w); ++x) {
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	61fb      	str	r3, [r7, #28]
 8000bc2:	e019      	b.n	8000bf8 <sponge_absorb+0x78>
      A[x] = A[x] ^ block[x];
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bca:	4413      	add	r3, r2
 8000bcc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bd0:	69fb      	ldr	r3, [r7, #28]
 8000bd2:	00db      	lsls	r3, r3, #3
 8000bd4:	693a      	ldr	r2, [r7, #16]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bdc:	69fe      	ldr	r6, [r7, #28]
 8000bde:	ea4f 0cc6 	mov.w	ip, r6, lsl #3
 8000be2:	6bbe      	ldr	r6, [r7, #56]	@ 0x38
 8000be4:	4466      	add	r6, ip
 8000be6:	ea80 0402 	eor.w	r4, r0, r2
 8000bea:	ea81 0503 	eor.w	r5, r1, r3
 8000bee:	e9c6 4500 	strd	r4, r5, [r6]
    for (x = 0; x < (r/w); ++x) {
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
 8000bf8:	68ba      	ldr	r2, [r7, #8]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c00:	69fa      	ldr	r2, [r7, #28]
 8000c02:	429a      	cmp	r2, r3
 8000c04:	dbde      	blt.n	8000bc4 <sponge_absorb+0x44>
    }

    /* S = Keccak-f[r + c](S) */
    keccakf(nr, A);
 8000c06:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000c08:	68f8      	ldr	r0, [r7, #12]
 8000c0a:	f7ff ff95 	bl	8000b38 <keccakf>
  for (y = 0; y < blocks; ++y) {
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	dbc5      	blt.n	8000ba8 <sponge_absorb+0x28>
  }
}
 8000c1c:	bf00      	nop
 8000c1e:	bf00      	nop
 8000c20:	3724      	adds	r7, #36	@ 0x24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c26 <sponge_squeeze>:

void sponge_squeeze(int nr, int r, int n, uint64_t* A, uint8_t* O)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	603b      	str	r3, [r7, #0]
  /*
    For SHA-3 we have r > n in any case, i.e., the squeezing phase
      consists of one round.
   */
  int i = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  while (n) {
 8000c38:	e020      	b.n	8000c7c <sponge_squeeze+0x56>
    size_t size = r;
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	613b      	str	r3, [r7, #16]

    if (r > n) {
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	dd01      	ble.n	8000c4a <sponge_squeeze+0x24>
        size = n;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	613b      	str	r3, [r7, #16]
    }

    /* Copies A[0:size/8] to O[i:i + size/8 - 1] */
    memcpy(&O[i], A, size/8);
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	6a3a      	ldr	r2, [r7, #32]
 8000c4e:	18d0      	adds	r0, r2, r3
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	08db      	lsrs	r3, r3, #3
 8000c54:	461a      	mov	r2, r3
 8000c56:	6839      	ldr	r1, [r7, #0]
 8000c58:	f00b fe83 	bl	800c962 <memcpy>
    i = i + size/8;
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	08da      	lsrs	r2, r3, #3
 8000c60:	697b      	ldr	r3, [r7, #20]
 8000c62:	4413      	add	r3, r2
 8000c64:	617b      	str	r3, [r7, #20]

    n = n - size;
 8000c66:	687a      	ldr	r2, [r7, #4]
 8000c68:	693b      	ldr	r3, [r7, #16]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	607b      	str	r3, [r7, #4]

    if (n > 0) {
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dd03      	ble.n	8000c7c <sponge_squeeze+0x56>
      keccakf(nr, A);
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	68f8      	ldr	r0, [r7, #12]
 8000c78:	f7ff ff5e 	bl	8000b38 <keccakf>
  while (n) {
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1db      	bne.n	8000c3a <sponge_squeeze+0x14>
    }
  }
}
 8000c82:	bf00      	nop
 8000c84:	bf00      	nop
 8000c86:	3718      	adds	r7, #24
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}

08000c8c <pad101>:

int pad101(int r, int blocks, int l, uint8_t* M, uint8_t* P)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60f8      	str	r0, [r7, #12]
 8000c94:	60b9      	str	r1, [r7, #8]
 8000c96:	607a      	str	r2, [r7, #4]
 8000c98:	603b      	str	r3, [r7, #0]
    int block_size = r / 8;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	da00      	bge.n	8000ca2 <pad101+0x16>
 8000ca0:	3307      	adds	r3, #7
 8000ca2:	10db      	asrs	r3, r3, #3
 8000ca4:	61bb      	str	r3, [r7, #24]

    /* length of the padded block */
    size_t block_len = (blocks + 1) * block_size;
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	69ba      	ldr	r2, [r7, #24]
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	617b      	str	r3, [r7, #20]

    /* zero out data and copy M into P */
    memset(P, 0, block_len * sizeof(uint8_t));
 8000cb2:	697a      	ldr	r2, [r7, #20]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8000cb8:	f00b fdc8 	bl	800c84c <memset>
    for (int i = 0; i < l; ++i) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	61fb      	str	r3, [r7, #28]
 8000cc0:	e00a      	b.n	8000cd8 <pad101+0x4c>
        P[i] = M[i];
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	683a      	ldr	r2, [r7, #0]
 8000cc6:	441a      	add	r2, r3
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000ccc:	440b      	add	r3, r1
 8000cce:	7812      	ldrb	r2, [r2, #0]
 8000cd0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < l; ++i) {
 8000cd2:	69fb      	ldr	r3, [r7, #28]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	61fb      	str	r3, [r7, #28]
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	429a      	cmp	r2, r3
 8000cde:	dbf0      	blt.n	8000cc2 <pad101+0x36>
    }

    /* CRYSTALS-style padding */
    P[l] ^= 0x06;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000ce4:	4413      	add	r3, r2
 8000ce6:	781a      	ldrb	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000cec:	440b      	add	r3, r1
 8000cee:	f082 0206 	eor.w	r2, r2, #6
 8000cf2:	b2d2      	uxtb	r2, r2
 8000cf4:	701a      	strb	r2, [r3, #0]
    P[block_len - 1] ^= 0x80;
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	3b01      	subs	r3, #1
 8000cfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	3a01      	subs	r2, #1
 8000d04:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000d06:	440a      	add	r2, r1
 8000d08:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8000d0c:	43db      	mvns	r3, r3
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	7013      	strb	r3, [r2, #0]

    return block_len;
 8000d12:	697b      	ldr	r3, [r7, #20]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3720      	adds	r7, #32
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <keccak>:
l = message length
M = message of bytes
O = output
*/
int keccak(int r, int c, int n, int l, uint8_t* M, uint8_t* O)
{
 8000d1c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d20:	b0c3      	sub	sp, #268	@ 0x10c
 8000d22:	af02      	add	r7, sp, #8
 8000d24:	60f8      	str	r0, [r7, #12]
 8000d26:	60b9      	str	r1, [r7, #8]
 8000d28:	607a      	str	r2, [r7, #4]
 8000d2a:	f507 7280 	add.w	r2, r7, #256	@ 0x100
 8000d2e:	f5a2 7280 	sub.w	r2, r2, #256	@ 0x100
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	466b      	mov	r3, sp
 8000d36:	461e      	mov	r6, r3
  /* check parameters */

  /* bit rate must be a multiple of the lane size */
  if (r < 0 || (r % 8 != 0)) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	db04      	blt.n	8000d48 <keccak+0x2c>
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	f003 0307 	and.w	r3, r3, #7
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d002      	beq.n	8000d4e <keccak+0x32>
    return -1;
 8000d48:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4c:	e0c0      	b.n	8000ed0 <keccak+0x1b4>
  }

  if (n % 8 != 0) {
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f003 0307 	and.w	r3, r3, #7
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <keccak+0x42>
    return -2;
 8000d58:	f06f 0301 	mvn.w	r3, #1
 8000d5c:	e0b8      	b.n	8000ed0 <keccak+0x1b4>
  }

  /* check permutation width */
  int b = r + c;
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	68bb      	ldr	r3, [r7, #8]
 8000d62:	4413      	add	r3, r2
 8000d64:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

  int i, j = -1;
 8000d68:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  for (i = 0; i < 7; ++i) {
 8000d70:	2300      	movs	r3, #0
 8000d72:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000d76:	e013      	b.n	8000da0 <keccak+0x84>
    if (b == perms[i].b) {
 8000d78:	4a59      	ldr	r2, [pc, #356]	@ (8000ee0 <keccak+0x1c4>)
 8000d7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d7e:	011b      	lsls	r3, r3, #4
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8000d88:	429a      	cmp	r2, r3
 8000d8a:	d104      	bne.n	8000d96 <keccak+0x7a>
      j = i;
 8000d8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d90:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
      break;
 8000d94:	e008      	b.n	8000da8 <keccak+0x8c>
  for (i = 0; i < 7; ++i) {
 8000d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000d9a:	3301      	adds	r3, #1
 8000d9c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8000da0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8000da4:	2b06      	cmp	r3, #6
 8000da6:	dde7      	ble.n	8000d78 <keccak+0x5c>
    }
  }

  if (j == -1) {
 8000da8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d102      	bne.n	8000db8 <keccak+0x9c>
    return -3;
 8000db2:	f06f 0302 	mvn.w	r3, #2
 8000db6:	e08b      	b.n	8000ed0 <keccak+0x1b4>
  }

  /* state of 5x5 lanes, each of length 64 (for Keccak-f[1600]) */
  uint64_t A[25];
  /* zero out the state */
  memset(A, 0, 25 * sizeof(uint64_t));
 8000db8:	f107 0310 	add.w	r3, r7, #16
 8000dbc:	22c8      	movs	r2, #200	@ 0xc8
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f00b fd43 	bl	800c84c <memset>

  /* lane width */
  int w = perms[j].w;
 8000dc6:	4a46      	ldr	r2, [pc, #280]	@ (8000ee0 <keccak+0x1c4>)
 8000dc8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000dcc:	011b      	lsls	r3, r3, #4
 8000dce:	4413      	add	r3, r2
 8000dd0:	3308      	adds	r3, #8
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  /* number of rounds */
  int nr = perms[j].nr;
 8000dd8:	4a41      	ldr	r2, [pc, #260]	@ (8000ee0 <keccak+0x1c4>)
 8000dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8000dde:	011b      	lsls	r3, r3, #4
 8000de0:	4413      	add	r3, r2
 8000de2:	330c      	adds	r3, #12
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  /* block size in bytes */
  int block_size = r/8;
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	da00      	bge.n	8000df2 <keccak+0xd6>
 8000df0:	3307      	adds	r3, #7
 8000df2:	10db      	asrs	r3, r3, #3
 8000df4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

  /* calculate how many blocks M consist of */
  int blocks = l / block_size;
 8000df8:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000dfc:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8000e06:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  /* make room for padding, if necessary */
  uint8_t P[block_size * (blocks + 1)];
 8000e0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8000e12:	3301      	adds	r3, #1
 8000e14:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8000e18:	fb02 f103 	mul.w	r1, r2, r3
 8000e1c:	1e4b      	subs	r3, r1, #1
 8000e1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8000e22:	460a      	mov	r2, r1
 8000e24:	2300      	movs	r3, #0
 8000e26:	4690      	mov	r8, r2
 8000e28:	4699      	mov	r9, r3
 8000e2a:	f04f 0200 	mov.w	r2, #0
 8000e2e:	f04f 0300 	mov.w	r3, #0
 8000e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000e3e:	460a      	mov	r2, r1
 8000e40:	2300      	movs	r3, #0
 8000e42:	4614      	mov	r4, r2
 8000e44:	461d      	mov	r5, r3
 8000e46:	f04f 0200 	mov.w	r2, #0
 8000e4a:	f04f 0300 	mov.w	r3, #0
 8000e4e:	00eb      	lsls	r3, r5, #3
 8000e50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000e54:	00e2      	lsls	r2, r4, #3
 8000e56:	460b      	mov	r3, r1
 8000e58:	3307      	adds	r3, #7
 8000e5a:	08db      	lsrs	r3, r3, #3
 8000e5c:	00db      	lsls	r3, r3, #3
 8000e5e:	ebad 0d03 	sub.w	sp, sp, r3
 8000e62:	ab02      	add	r3, sp, #8
 8000e64:	3300      	adds	r3, #0
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  /* padding */
  l = pad101(r, blocks, l, M, P);
 8000e6a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e6e:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8000e72:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e76:	f5a3 7280 	sub.w	r2, r3, #256	@ 0x100
 8000e7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000e7e:	9300      	str	r3, [sp, #0]
 8000e80:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	f8d7 10e4 	ldr.w	r1, [r7, #228]	@ 0xe4
 8000e8a:	68f8      	ldr	r0, [r7, #12]
 8000e8c:	f7ff fefe 	bl	8000c8c <pad101>
 8000e90:	6020      	str	r0, [r4, #0]

  sponge_absorb(nr, r, w, l, A, P);
 8000e92:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000e96:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000e9a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8000e9e:	9201      	str	r2, [sp, #4]
 8000ea0:	f107 0210 	add.w	r2, r7, #16
 8000ea4:	9200      	str	r2, [sp, #0]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8000eac:	68f9      	ldr	r1, [r7, #12]
 8000eae:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000eb2:	f7ff fe65 	bl	8000b80 <sponge_absorb>
  sponge_squeeze(nr, r, n, A, O);
 8000eb6:	f107 0210 	add.w	r2, r7, #16
 8000eba:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	4613      	mov	r3, r2
 8000ec2:	687a      	ldr	r2, [r7, #4]
 8000ec4:	68f9      	ldr	r1, [r7, #12]
 8000ec6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8000eca:	f7ff feac 	bl	8000c26 <sponge_squeeze>

  return 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	46b5      	mov	sp, r6
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <FIVEONETWO>:

int FIVEONETWO(uint8_t* M, int l, uint8_t* O)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af02      	add	r7, sp, #8
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  return keccak(576, 1024, 512, l, M, O);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	9301      	str	r3, [sp, #4]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	9300      	str	r3, [sp, #0]
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000efe:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f02:	f44f 7010 	mov.w	r0, #576	@ 0x240
 8000f06:	f7ff ff09 	bl	8000d1c <keccak>
 8000f0a:	4603      	mov	r3, r0
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3710      	adds	r7, #16
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <TWOFIVESIX>:
{
  return keccak(832, 768, 384, l, M, O);
}

int TWOFIVESIX(uint8_t* M, int l, uint8_t* O)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b086      	sub	sp, #24
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	60f8      	str	r0, [r7, #12]
 8000f1c:	60b9      	str	r1, [r7, #8]
 8000f1e:	607a      	str	r2, [r7, #4]
  return keccak(1088, 512, 256, l, M, O);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000f2e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f32:	f44f 6088 	mov.w	r0, #1088	@ 0x440
 8000f36:	f7ff fef1 	bl	8000d1c <keccak>
 8000f3a:	4603      	mov	r3, r0
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	4804      	ldr	r0, [pc, #16]	@ (8000f6c <_write+0x28>)
 8000f5c:	f007 f817 	bl	8007f8e <HAL_UART_Transmit>
    return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000218 	.word	0x20000218

08000f70 <fill_masked_state>:
    }
    char newline = '\n';
    HAL_UART_Transmit(&huart2, (uint8_t*)&newline, 1, HAL_MAX_DELAY);
}

void fill_masked_state(masked_uint64_t dst[5][5], const uint64_t ref[25]) {
 8000f70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f72:	b08b      	sub	sp, #44	@ 0x2c
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y) {
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f7e:	e060      	b.n	8001042 <fill_masked_state+0xd2>
        for (int x = 0; x < 5; ++x) {
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
 8000f84:	e057      	b.n	8001036 <fill_masked_state+0xc6>
            uint64_t val = ref[y * 5 + x];
 8000f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f88:	4613      	mov	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	441a      	add	r2, r3
 8000f8e:	6a3b      	ldr	r3, [r7, #32]
 8000f90:	4413      	add	r3, r2
 8000f92:	00db      	lsls	r3, r3, #3
 8000f94:	683a      	ldr	r2, [r7, #0]
 8000f96:	4413      	add	r3, r2
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	e9c7 2302 	strd	r2, r3, [r7, #8]
            uint64_t t = val;
 8000fa0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000fa4:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000fa8:	2301      	movs	r3, #1
 8000faa:	617b      	str	r3, [r7, #20]
 8000fac:	e02e      	b.n	800100c <fill_masked_state+0x9c>
                dst[x][y].share[i] = get_random64();
 8000fae:	6a3a      	ldr	r2, [r7, #32]
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	461a      	mov	r2, r3
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	189e      	adds	r6, r3, r2
 8000fbe:	f7ff faf5 	bl	80005ac <get_random64>
 8000fc2:	4602      	mov	r2, r0
 8000fc4:	460b      	mov	r3, r1
 8000fc6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000fc8:	0088      	lsls	r0, r1, #2
 8000fca:	6979      	ldr	r1, [r7, #20]
 8000fcc:	4401      	add	r1, r0
 8000fce:	00c9      	lsls	r1, r1, #3
 8000fd0:	4431      	add	r1, r6
 8000fd2:	e9c1 2300 	strd	r2, r3, [r1]
                t ^= dst[x][y].share[i];
 8000fd6:	6a3a      	ldr	r2, [r7, #32]
 8000fd8:	4613      	mov	r3, r2
 8000fda:	009b      	lsls	r3, r3, #2
 8000fdc:	4413      	add	r3, r2
 8000fde:	015b      	lsls	r3, r3, #5
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	441a      	add	r2, r3
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	0099      	lsls	r1, r3, #2
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	440b      	add	r3, r1
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000ffa:	ea80 0402 	eor.w	r4, r0, r2
 8000ffe:	ea81 0503 	eor.w	r5, r1, r3
 8001002:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	2b03      	cmp	r3, #3
 8001010:	ddcd      	ble.n	8000fae <fill_masked_state+0x3e>
            }
            dst[x][y].share[0] = t;
 8001012:	6a3a      	ldr	r2, [r7, #32]
 8001014:	4613      	mov	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	4413      	add	r3, r2
 800101a:	015b      	lsls	r3, r3, #5
 800101c:	461a      	mov	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	441a      	add	r2, r3
 8001022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001024:	015b      	lsls	r3, r3, #5
 8001026:	18d1      	adds	r1, r2, r3
 8001028:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800102c:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8001030:	6a3b      	ldr	r3, [r7, #32]
 8001032:	3301      	adds	r3, #1
 8001034:	623b      	str	r3, [r7, #32]
 8001036:	6a3b      	ldr	r3, [r7, #32]
 8001038:	2b04      	cmp	r3, #4
 800103a:	dda4      	ble.n	8000f86 <fill_masked_state+0x16>
    for (int y = 0; y < 5; ++y) {
 800103c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103e:	3301      	adds	r3, #1
 8001040:	627b      	str	r3, [r7, #36]	@ 0x24
 8001042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001044:	2b04      	cmp	r3, #4
 8001046:	dd9b      	ble.n	8000f80 <fill_masked_state+0x10>
        }
    }
}
 8001048:	bf00      	nop
 800104a:	bf00      	nop
 800104c:	372c      	adds	r7, #44	@ 0x2c
 800104e:	46bd      	mov	sp, r7
 8001050:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001052 <recombine_masked_state>:

void recombine_masked_state(uint64_t dst[25], const masked_uint64_t src[5][5]) {
 8001052:	b4b0      	push	{r4, r5, r7}
 8001054:	b089      	sub	sp, #36	@ 0x24
 8001056:	af00      	add	r7, sp, #0
 8001058:	6078      	str	r0, [r7, #4]
 800105a:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y)
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
 8001060:	e03f      	b.n	80010e2 <recombine_masked_state+0x90>
        for (int x = 0; x < 5; ++x) {
 8001062:	2300      	movs	r3, #0
 8001064:	61bb      	str	r3, [r7, #24]
 8001066:	e036      	b.n	80010d6 <recombine_masked_state+0x84>
            uint64_t val = 0;
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	f04f 0300 	mov.w	r3, #0
 8001070:	e9c7 2304 	strd	r2, r3, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8001074:	2300      	movs	r3, #0
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	e01a      	b.n	80010b0 <recombine_masked_state+0x5e>
                val ^= src[x][y].share[i];
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4613      	mov	r3, r2
 800107e:	009b      	lsls	r3, r3, #2
 8001080:	4413      	add	r3, r2
 8001082:	015b      	lsls	r3, r3, #5
 8001084:	461a      	mov	r2, r3
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	441a      	add	r2, r3
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	0099      	lsls	r1, r3, #2
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	440b      	add	r3, r1
 8001092:	00db      	lsls	r3, r3, #3
 8001094:	4413      	add	r3, r2
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800109e:	ea80 0402 	eor.w	r4, r0, r2
 80010a2:	ea81 0503 	eor.w	r5, r1, r3
 80010a6:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	3301      	adds	r3, #1
 80010ae:	60fb      	str	r3, [r7, #12]
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b03      	cmp	r3, #3
 80010b4:	dde1      	ble.n	800107a <recombine_masked_state+0x28>
            dst[y * 5 + x] = val;
 80010b6:	69fa      	ldr	r2, [r7, #28]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	441a      	add	r2, r3
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	687a      	ldr	r2, [r7, #4]
 80010c6:	18d1      	adds	r1, r2, r3
 80010c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80010cc:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	3301      	adds	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	2b04      	cmp	r3, #4
 80010da:	ddc5      	ble.n	8001068 <recombine_masked_state+0x16>
    for (int y = 0; y < 5; ++y)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	2b04      	cmp	r3, #4
 80010e6:	ddbc      	ble.n	8001062 <recombine_masked_state+0x10>
        }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	@ 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bcb0      	pop	{r4, r5, r7}
 80010f2:	4770      	bx	lr

080010f4 <print_diff>:

void print_diff(const char *label, const uint64_t *ref, const uint64_t *masked) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08e      	sub	sp, #56	@ 0x38
 80010f8:	af04      	add	r7, sp, #16
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
    int fail = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
 8001108:	e04d      	b.n	80011a6 <print_diff+0xb2>
        if (ref[i] != masked[i]) {
 800110a:	6a3b      	ldr	r3, [r7, #32]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	4413      	add	r3, r2
 8001112:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001116:	6a3b      	ldr	r3, [r7, #32]
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	687a      	ldr	r2, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001122:	4299      	cmp	r1, r3
 8001124:	bf08      	it	eq
 8001126:	4290      	cmpeq	r0, r2
 8001128:	d03a      	beq.n	80011a0 <print_diff+0xac>
            uint32_t rh = ref[i] >> 32, rl = ref[i] & 0xFFFFFFFF;
 800112a:	6a3b      	ldr	r3, [r7, #32]
 800112c:	00db      	lsls	r3, r3, #3
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001136:	f04f 0200 	mov.w	r2, #0
 800113a:	f04f 0300 	mov.w	r3, #0
 800113e:	000a      	movs	r2, r1
 8001140:	2300      	movs	r3, #0
 8001142:	4613      	mov	r3, r2
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	6a3b      	ldr	r3, [r7, #32]
 8001148:	00db      	lsls	r3, r3, #3
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	4413      	add	r3, r2
 800114e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001152:	4613      	mov	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
            uint32_t mh = masked[i] >> 32, ml = masked[i] & 0xFFFFFFFF;
 8001156:	6a3b      	ldr	r3, [r7, #32]
 8001158:	00db      	lsls	r3, r3, #3
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001162:	f04f 0200 	mov.w	r2, #0
 8001166:	f04f 0300 	mov.w	r3, #0
 800116a:	000a      	movs	r2, r1
 800116c:	2300      	movs	r3, #0
 800116e:	4613      	mov	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	00db      	lsls	r3, r3, #3
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	4413      	add	r3, r2
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	4613      	mov	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
            printf("Mismatch %s[%d]: ref = %08lX%08lX, masked = %08lX%08lX\n",
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	9302      	str	r3, [sp, #8]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	9301      	str	r3, [sp, #4]
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	6a3a      	ldr	r2, [r7, #32]
 8001192:	68f9      	ldr	r1, [r7, #12]
 8001194:	480b      	ldr	r0, [pc, #44]	@ (80011c4 <print_diff+0xd0>)
 8001196:	f00b f95d 	bl	800c454 <iprintf>
                   label, i,
                   (unsigned long)rh, (unsigned long)rl,
                   (unsigned long)mh, (unsigned long)ml);
            fail++;
 800119a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800119c:	3301      	adds	r3, #1
 800119e:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 80011a0:	6a3b      	ldr	r3, [r7, #32]
 80011a2:	3301      	adds	r3, #1
 80011a4:	623b      	str	r3, [r7, #32]
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	2b18      	cmp	r3, #24
 80011aa:	ddae      	ble.n	800110a <print_diff+0x16>
        }
    }
    if (fail == 0) {
 80011ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d103      	bne.n	80011ba <print_diff+0xc6>
        printf("SUCCESS: %s output matched reference.\n", label);
 80011b2:	68f9      	ldr	r1, [r7, #12]
 80011b4:	4804      	ldr	r0, [pc, #16]	@ (80011c8 <print_diff+0xd4>)
 80011b6:	f00b f94d 	bl	800c454 <iprintf>
    }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	@ 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	0800d2d0 	.word	0x0800d2d0
 80011c8:	0800d308 	.word	0x0800d308

080011cc <test_masked_vs_reference_step_by_step>:

void test_masked_vs_reference_step_by_step(void) {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	f5ad 5da9 	sub.w	sp, sp, #5408	@ 0x1520
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
    // === 1. Initial state setup ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 80011d6:	2400      	movs	r4, #0
 80011d8:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 80011dc:	f105 0504 	add.w	r5, r5, #4
 80011e0:	602c      	str	r4, [r5, #0]
 80011e2:	e02f      	b.n	8001244 <test_masked_vs_reference_step_by_step+0x78>
        ref_state[i] = i * 0x0F0F0F0F0F0F0F0FULL;
 80011e4:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 80011e8:	f104 0404 	add.w	r4, r4, #4
 80011ec:	6824      	ldr	r4, [r4, #0]
 80011ee:	17e5      	asrs	r5, r4, #31
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 80011f8:	fb04 f501 	mul.w	r5, r4, r1
 80011fc:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8001200:	fb00 f404 	mul.w	r4, r0, r4
 8001204:	442c      	add	r4, r5
 8001206:	f04f 350f 	mov.w	r5, #252645135	@ 0xf0f0f0f
 800120a:	fba0 2305 	umull	r2, r3, r0, r5
 800120e:	441c      	add	r4, r3
 8001210:	4623      	mov	r3, r4
 8001212:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8001216:	f104 0404 	add.w	r4, r4, #4
 800121a:	6824      	ldr	r4, [r4, #0]
 800121c:	00e4      	lsls	r4, r4, #3
 800121e:	f504 54a9 	add.w	r4, r4, #5408	@ 0x1520
 8001222:	f104 0408 	add.w	r4, r4, #8
 8001226:	443c      	add	r4, r7
 8001228:	3cd8      	subs	r4, #216	@ 0xd8
 800122a:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < 25; i++)
 800122e:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8001232:	f104 0404 	add.w	r4, r4, #4
 8001236:	6824      	ldr	r4, [r4, #0]
 8001238:	3401      	adds	r4, #1
 800123a:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 800123e:	f105 0504 	add.w	r5, r5, #4
 8001242:	602c      	str	r4, [r5, #0]
 8001244:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8001248:	f104 0404 	add.w	r4, r4, #4
 800124c:	6824      	ldr	r4, [r4, #0]
 800124e:	2c18      	cmp	r4, #24
 8001250:	ddc8      	ble.n	80011e4 <test_masked_vs_reference_step_by_step+0x18>

    masked_uint64_t masked_state[5][5];
    fill_masked_state(masked_state, ref_state);
 8001252:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8001256:	f102 0210 	add.w	r2, r2, #16
 800125a:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800125e:	f103 0310 	add.w	r3, r3, #16
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff fe83 	bl	8000f70 <fill_masked_state>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. THETA ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 800126a:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 800126e:	f103 0308 	add.w	r3, r3, #8
 8001272:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8001276:	4618      	mov	r0, r3
 8001278:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 800127c:	f103 0310 	add.w	r3, r3, #16
 8001280:	22c8      	movs	r2, #200	@ 0xc8
 8001282:	4619      	mov	r1, r3
 8001284:	f00b fb6d 	bl	800c962 <memcpy>
    theta(tmp_ref);
 8001288:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800128c:	f103 0308 	add.w	r3, r3, #8
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f9bf 	bl	8000614 <theta>

    masked_theta(masked_state);
 8001296:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800129a:	f103 0310 	add.w	r3, r3, #16
 800129e:	4618      	mov	r0, r3
 80012a0:	f001 f998 	bl	80025d4 <masked_theta>
    recombine_masked_state(tmp_masked, masked_state);
 80012a4:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80012a8:	f102 0210 	add.w	r2, r2, #16
 80012ac:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 80012b0:	4611      	mov	r1, r2
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fecd 	bl	8001052 <recombine_masked_state>
    print_diff("THETA", tmp_ref, tmp_masked);
 80012b8:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 80012bc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80012c0:	f103 0308 	add.w	r3, r3, #8
 80012c4:	4619      	mov	r1, r3
 80012c6:	4885      	ldr	r0, [pc, #532]	@ (80014dc <test_masked_vs_reference_step_by_step+0x310>)
 80012c8:	f7ff ff14 	bl	80010f4 <print_diff>

    // === 3. RHO ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked)); // set ref = masked out
 80012cc:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80012d0:	f103 0308 	add.w	r3, r3, #8
 80012d4:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 80012d8:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80012dc:	f103 0308 	add.w	r3, r3, #8
 80012e0:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 80012e4:	4610      	mov	r0, r2
 80012e6:	4619      	mov	r1, r3
 80012e8:	23c8      	movs	r3, #200	@ 0xc8
 80012ea:	461a      	mov	r2, r3
 80012ec:	f00b fb39 	bl	800c962 <memcpy>
    rho(tmp_ref);
 80012f0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80012f4:	f103 0308 	add.w	r3, r3, #8
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fa69 	bl	80007d0 <rho>

    masked_rho(masked_state);
 80012fe:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001302:	f103 0310 	add.w	r3, r3, #16
 8001306:	4618      	mov	r0, r3
 8001308:	f001 fabe 	bl	8002888 <masked_rho>
    recombine_masked_state(tmp_masked, masked_state);
 800130c:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001310:	f102 0210 	add.w	r2, r2, #16
 8001314:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8001318:	4611      	mov	r1, r2
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff fe99 	bl	8001052 <recombine_masked_state>
    print_diff("RHO", tmp_ref, tmp_masked);
 8001320:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8001324:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001328:	f103 0308 	add.w	r3, r3, #8
 800132c:	4619      	mov	r1, r3
 800132e:	486c      	ldr	r0, [pc, #432]	@ (80014e0 <test_masked_vs_reference_step_by_step+0x314>)
 8001330:	f7ff fee0 	bl	80010f4 <print_diff>

    // === 4. PI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8001334:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8001338:	f103 0308 	add.w	r3, r3, #8
 800133c:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8001340:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8001344:	f103 0308 	add.w	r3, r3, #8
 8001348:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 800134c:	4610      	mov	r0, r2
 800134e:	4619      	mov	r1, r3
 8001350:	23c8      	movs	r3, #200	@ 0xc8
 8001352:	461a      	mov	r2, r3
 8001354:	f00b fb05 	bl	800c962 <memcpy>
    pi(tmp_ref);
 8001358:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800135c:	f103 0308 	add.w	r3, r3, #8
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff faab 	bl	80008bc <pi>

    masked_pi(masked_state);
 8001366:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800136a:	f103 0310 	add.w	r3, r3, #16
 800136e:	4618      	mov	r0, r3
 8001370:	f001 fc0e 	bl	8002b90 <masked_pi>
    recombine_masked_state(tmp_masked, masked_state);
 8001374:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001378:	f102 0210 	add.w	r2, r2, #16
 800137c:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff fe65 	bl	8001052 <recombine_masked_state>
    print_diff("PI", tmp_ref, tmp_masked);
 8001388:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 800138c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001390:	f103 0308 	add.w	r3, r3, #8
 8001394:	4619      	mov	r1, r3
 8001396:	4853      	ldr	r0, [pc, #332]	@ (80014e4 <test_masked_vs_reference_step_by_step+0x318>)
 8001398:	f7ff feac 	bl	80010f4 <print_diff>

    int round_idx = 0;
 800139c:	2300      	movs	r3, #0
 800139e:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 80013a2:	f102 0218 	add.w	r2, r2, #24
 80013a6:	6013      	str	r3, [r2, #0]
    // === 5. CHI ===
    // === 5. CHI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 80013a8:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80013ac:	f103 0308 	add.w	r3, r3, #8
 80013b0:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 80013b4:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 80013b8:	f103 0308 	add.w	r3, r3, #8
 80013bc:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 80013c0:	4610      	mov	r0, r2
 80013c2:	4619      	mov	r1, r3
 80013c4:	23c8      	movs	r3, #200	@ 0xc8
 80013c6:	461a      	mov	r2, r3
 80013c8:	f00b facb 	bl	800c962 <memcpy>
    chi(tmp_ref);
 80013cc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80013d0:	f103 0308 	add.w	r3, r3, #8
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff fb0b 	bl	80009f0 <chi>

    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 80013da:	2300      	movs	r3, #0
 80013dc:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	e033      	b.n	800144c <test_masked_vs_reference_step_by_step+0x280>
        for (int x = 0; x < 5; ++x)
 80013e4:	2300      	movs	r3, #0
 80013e6:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 80013ea:	f102 021c 	add.w	r2, r2, #28
 80013ee:	6013      	str	r3, [r2, #0]
 80013f0:	e01e      	b.n	8001430 <test_masked_vs_reference_step_by_step+0x264>
            fill_random_matrix(r_chi[x][y]);
 80013f2:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 80013f6:	3a08      	subs	r2, #8
 80013f8:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 80013fc:	f103 031c 	add.w	r3, r3, #28
 8001400:	6819      	ldr	r1, [r3, #0]
 8001402:	460b      	mov	r3, r1
 8001404:	009b      	lsls	r3, r3, #2
 8001406:	440b      	add	r3, r1
 8001408:	f507 51a9 	add.w	r1, r7, #5408	@ 0x1520
 800140c:	6809      	ldr	r1, [r1, #0]
 800140e:	440b      	add	r3, r1
 8001410:	01db      	lsls	r3, r3, #7
 8001412:	4413      	add	r3, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fe7d 	bl	8002114 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 800141a:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800141e:	f103 031c 	add.w	r3, r3, #28
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3301      	adds	r3, #1
 8001426:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 800142a:	f102 021c 	add.w	r2, r2, #28
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8001434:	f103 031c 	add.w	r3, r3, #28
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b04      	cmp	r3, #4
 800143c:	ddd9      	ble.n	80013f2 <test_masked_vs_reference_step_by_step+0x226>
    for (int y = 0; y < 5; ++y)
 800143e:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3301      	adds	r3, #1
 8001446:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 800144a:	6013      	str	r3, [r2, #0]
 800144c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	2b04      	cmp	r3, #4
 8001454:	ddc6      	ble.n	80013e4 <test_masked_vs_reference_step_by_step+0x218>

    masked_uint64_t chi_out[5][5];
    masked_chi(chi_out, masked_state, r_chi);
 8001456:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 800145a:	3a08      	subs	r2, #8
 800145c:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 8001460:	f101 0110 	add.w	r1, r1, #16
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	3b08      	subs	r3, #8
 800146a:	4618      	mov	r0, r3
 800146c:	f001 fc3e 	bl	8002cec <masked_chi>

    // === 6. IOTA ===
    // Apply IOTA to both the reference and the masked CHI result
    iota(tmp_ref, round_idx);
 8001470:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001474:	f103 0308 	add.w	r3, r3, #8
 8001478:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 800147c:	f102 0218 	add.w	r2, r2, #24
 8001480:	6811      	ldr	r1, [r2, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fb3c 	bl	8000b00 <iota>
    masked_iota(chi_out, RC[round_idx]);
 8001488:	4a17      	ldr	r2, [pc, #92]	@ (80014e8 <test_masked_vs_reference_step_by_step+0x31c>)
 800148a:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800148e:	f103 0318 	add.w	r3, r3, #24
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	00db      	lsls	r3, r3, #3
 8001496:	4413      	add	r3, r2
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f107 0108 	add.w	r1, r7, #8
 80014a0:	3908      	subs	r1, #8
 80014a2:	4608      	mov	r0, r1
 80014a4:	f001 fca6 	bl	8002df4 <masked_iota>

    // Recombine the masked state AFTER both steps
    recombine_masked_state(tmp_masked, chi_out);
 80014a8:	f107 0308 	add.w	r3, r7, #8
 80014ac:	3b08      	subs	r3, #8
 80014ae:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 80014b2:	4619      	mov	r1, r3
 80014b4:	4610      	mov	r0, r2
 80014b6:	f7ff fdcc 	bl	8001052 <recombine_masked_state>

    // Compare both sides now that they're at the same stage
    print_diff("IOTA", tmp_ref, tmp_masked);
 80014ba:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 80014be:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80014c2:	f103 0308 	add.w	r3, r3, #8
 80014c6:	4619      	mov	r1, r3
 80014c8:	4808      	ldr	r0, [pc, #32]	@ (80014ec <test_masked_vs_reference_step_by_step+0x320>)
 80014ca:	f7ff fe13 	bl	80010f4 <print_diff>



}
 80014ce:	bf00      	nop
 80014d0:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bdb0      	pop	{r4, r5, r7, pc}
 80014da:	bf00      	nop
 80014dc:	0800d330 	.word	0x0800d330
 80014e0:	0800d338 	.word	0x0800d338
 80014e4:	0800d33c 	.word	0x0800d33c
 80014e8:	0800d670 	.word	0x0800d670
 80014ec:	0800d340 	.word	0x0800d340

080014f0 <masked_round>:
static void masked_round(masked_uint64_t S[5][5],
                         int r,
                         uint64_t Rchi[5][5][MASKING_N][MASKING_N])
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80014fc:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8001500:	6018      	str	r0, [r3, #0]
 8001502:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001506:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 800150a:	6019      	str	r1, [r3, #0]
 800150c:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001510:	f6a3 73bc 	subw	r3, r3, #4028	@ 0xfbc
 8001514:	601a      	str	r2, [r3, #0]
    masked_theta(S);
 8001516:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800151a:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800151e:	6818      	ldr	r0, [r3, #0]
 8001520:	f001 f858 	bl	80025d4 <masked_theta>
    masked_rho  (S);
 8001524:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001528:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800152c:	6818      	ldr	r0, [r3, #0]
 800152e:	f001 f9ab 	bl	8002888 <masked_rho>
    masked_pi   (S);
 8001532:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8001536:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800153a:	6818      	ldr	r0, [r3, #0]
 800153c:	f001 fb28 	bl	8002b90 <masked_pi>
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
      for (int y = 0; y < 5; ++y)
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8001546:	e020      	b.n	800158a <masked_round+0x9a>
          for (int x = 0; x < 5; ++x)
 8001548:	2300      	movs	r3, #0
 800154a:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 800154e:	e013      	b.n	8001578 <masked_round+0x88>
              fill_random_matrix(r_chi[x][y]);
 8001550:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8001554:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 8001562:	4413      	add	r3, r2
 8001564:	01db      	lsls	r3, r3, #7
 8001566:	440b      	add	r3, r1
 8001568:	4618      	mov	r0, r3
 800156a:	f000 fdd3 	bl	8002114 <fill_random_matrix>
          for (int x = 0; x < 5; ++x)
 800156e:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8001572:	3301      	adds	r3, #1
 8001574:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8001578:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 800157c:	2b04      	cmp	r3, #4
 800157e:	dde7      	ble.n	8001550 <masked_round+0x60>
      for (int y = 0; y < 5; ++y)
 8001580:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8001584:	3301      	adds	r3, #1
 8001586:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 800158a:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 800158e:	2b04      	cmp	r3, #4
 8001590:	ddda      	ble.n	8001548 <masked_round+0x58>

      masked_uint64_t chi_out[5][5];
      masked_chi(chi_out, S, r_chi);
 8001592:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8001596:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 800159a:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 800159e:	f107 0010 	add.w	r0, r7, #16
 80015a2:	6819      	ldr	r1, [r3, #0]
 80015a4:	f001 fba2 	bl	8002cec <masked_chi>
      masked_iota (chi_out, RC[r]);
 80015a8:	4a2a      	ldr	r2, [pc, #168]	@ (8001654 <masked_round+0x164>)
 80015aa:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80015ae:	f6a3 73b8 	subw	r3, r3, #4024	@ 0xfb8
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	00db      	lsls	r3, r3, #3
 80015b6:	4413      	add	r3, r2
 80015b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015bc:	f107 0110 	add.w	r1, r7, #16
 80015c0:	4608      	mov	r0, r1
 80015c2:	f001 fc17 	bl	8002df4 <masked_iota>

      for (int y = 0; y < 5; ++y)
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 80015cc:	e038      	b.n	8001640 <masked_round+0x150>
          for (int x = 0; x < 5; ++x)
 80015ce:	2300      	movs	r3, #0
 80015d0:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 80015d4:	e02b      	b.n	800162e <masked_round+0x13e>
              S[x][y] = chi_out[x][y];
 80015d6:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	461a      	mov	r2, r3
 80015e4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80015e8:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	441a      	add	r2, r3
 80015f0:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 80015f4:	015b      	lsls	r3, r3, #5
 80015f6:	18d0      	adds	r0, r2, r3
 80015f8:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 80015fc:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 8001600:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 800160e:	4413      	add	r3, r2
 8001610:	015b      	lsls	r3, r3, #5
 8001612:	440b      	add	r3, r1
 8001614:	4604      	mov	r4, r0
 8001616:	461d      	mov	r5, r3
 8001618:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800161a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800161c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001620:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
          for (int x = 0; x < 5; ++x)
 8001624:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8001628:	3301      	adds	r3, #1
 800162a:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 800162e:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8001632:	2b04      	cmp	r3, #4
 8001634:	ddcf      	ble.n	80015d6 <masked_round+0xe6>
      for (int y = 0; y < 5; ++y)
 8001636:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 800163a:	3301      	adds	r3, #1
 800163c:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8001640:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8001644:	2b04      	cmp	r3, #4
 8001646:	ddc2      	ble.n	80015ce <masked_round+0xde>
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 8001650:	46bd      	mov	sp, r7
 8001652:	bdb0      	pop	{r4, r5, r7, pc}
 8001654:	0800d670 	.word	0x0800d670

08001658 <reference_round>:

static void reference_round(uint64_t *A, int r)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
    theta(A);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe ffd6 	bl	8000614 <theta>
    rho  (A);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff f8b1 	bl	80007d0 <rho>
    pi   (A);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f7ff f924 	bl	80008bc <pi>
    chi  (A);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f7ff f9bb 	bl	80009f0 <chi>
    iota (A, r);
 800167a:	6839      	ldr	r1, [r7, #0]
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff fa3f 	bl	8000b00 <iota>
}
 8001682:	bf00      	nop
 8001684:	3708      	adds	r7, #8
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <test_full_keccak_rounds>:


void test_full_keccak_rounds(void)
{
 800168c:	b5b0      	push	{r4, r5, r7, lr}
 800168e:	f5ad 5d8a 	sub.w	sp, sp, #4416	@ 0x1140
 8001692:	b086      	sub	sp, #24
 8001694:	af04      	add	r7, sp, #16
    /* --- 1. fresh deterministic state -------------------------------- */
    uint64_t ref[25];
    for (int i=0;i<25;i++)
 8001696:	2400      	movs	r4, #0
 8001698:	f507 558a 	add.w	r5, r7, #4416	@ 0x1140
 800169c:	f105 0504 	add.w	r5, r5, #4
 80016a0:	602c      	str	r4, [r5, #0]
 80016a2:	e030      	b.n	8001706 <test_full_keccak_rounds+0x7a>
        ref[i] = 0x1111111111111111ULL * (i+1);   /* any pattern is fine */
 80016a4:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 80016a8:	f104 0404 	add.w	r4, r4, #4
 80016ac:	6824      	ldr	r4, [r4, #0]
 80016ae:	3401      	adds	r4, #1
 80016b0:	17e5      	asrs	r5, r4, #31
 80016b2:	4620      	mov	r0, r4
 80016b4:	4629      	mov	r1, r5
 80016b6:	f04f 3411 	mov.w	r4, #286331153	@ 0x11111111
 80016ba:	fb04 f501 	mul.w	r5, r4, r1
 80016be:	f04f 3411 	mov.w	r4, #286331153	@ 0x11111111
 80016c2:	fb00 f404 	mul.w	r4, r0, r4
 80016c6:	442c      	add	r4, r5
 80016c8:	f04f 3511 	mov.w	r5, #286331153	@ 0x11111111
 80016cc:	fba0 2305 	umull	r2, r3, r0, r5
 80016d0:	441c      	add	r4, r3
 80016d2:	4623      	mov	r3, r4
 80016d4:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 80016d8:	f104 0404 	add.w	r4, r4, #4
 80016dc:	6824      	ldr	r4, [r4, #0]
 80016de:	00e4      	lsls	r4, r4, #3
 80016e0:	f504 548a 	add.w	r4, r4, #4416	@ 0x1140
 80016e4:	f104 0408 	add.w	r4, r4, #8
 80016e8:	443c      	add	r4, r7
 80016ea:	3ce0      	subs	r4, #224	@ 0xe0
 80016ec:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i=0;i<25;i++)
 80016f0:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 80016f4:	f104 0404 	add.w	r4, r4, #4
 80016f8:	6824      	ldr	r4, [r4, #0]
 80016fa:	3401      	adds	r4, #1
 80016fc:	f507 558a 	add.w	r5, r7, #4416	@ 0x1140
 8001700:	f105 0504 	add.w	r5, r5, #4
 8001704:	602c      	str	r4, [r5, #0]
 8001706:	f507 548a 	add.w	r4, r7, #4416	@ 0x1140
 800170a:	f104 0404 	add.w	r4, r4, #4
 800170e:	6824      	ldr	r4, [r4, #0]
 8001710:	2c18      	cmp	r4, #24
 8001712:	ddc7      	ble.n	80016a4 <test_full_keccak_rounds+0x18>

    masked_uint64_t mstate[5][5];
    fill_masked_state(mstate, ref);
 8001714:	f507 5283 	add.w	r2, r7, #4192	@ 0x1060
 8001718:	f102 0208 	add.w	r2, r2, #8
 800171c:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fc24 	bl	8000f70 <fill_masked_state>

    /* --- 2. run every round ------------------------------------------ */
    for (int r = 0; r < 24; ++r) {
 8001728:	2300      	movs	r3, #0
 800172a:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	e0e6      	b.n	8001900 <test_full_keccak_rounds+0x274>

        /* randomness for χ – new every round, every lane --------------- */
        uint64_t Rchi[5][5][MASKING_N][MASKING_N];
        for (int y = 0; y < 5; ++y)
 8001732:	2300      	movs	r3, #0
 8001734:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001738:	f102 021c 	add.w	r2, r2, #28
 800173c:	6013      	str	r3, [r2, #0]
 800173e:	e038      	b.n	80017b2 <test_full_keccak_rounds+0x126>
            for (int x = 0; x < 5; ++x)
 8001740:	2300      	movs	r3, #0
 8001742:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001746:	f102 0218 	add.w	r2, r2, #24
 800174a:	6013      	str	r3, [r2, #0]
 800174c:	e01f      	b.n	800178e <test_full_keccak_rounds+0x102>
                fill_random_matrix(Rchi[x][y]);
 800174e:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 8001752:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001756:	f103 0318 	add.w	r3, r3, #24
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001766:	f102 021c 	add.w	r2, r2, #28
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	4413      	add	r3, r2
 800176e:	01db      	lsls	r3, r3, #7
 8001770:	440b      	add	r3, r1
 8001772:	4618      	mov	r0, r3
 8001774:	f000 fcce 	bl	8002114 <fill_random_matrix>
            for (int x = 0; x < 5; ++x)
 8001778:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 800177c:	f103 0318 	add.w	r3, r3, #24
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3301      	adds	r3, #1
 8001784:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001788:	f102 0218 	add.w	r2, r2, #24
 800178c:	6013      	str	r3, [r2, #0]
 800178e:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001792:	f103 0318 	add.w	r3, r3, #24
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b04      	cmp	r3, #4
 800179a:	ddd8      	ble.n	800174e <test_full_keccak_rounds+0xc2>
        for (int y = 0; y < 5; ++y)
 800179c:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80017a0:	f103 031c 	add.w	r3, r3, #28
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	3301      	adds	r3, #1
 80017a8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80017ac:	f102 021c 	add.w	r2, r2, #28
 80017b0:	6013      	str	r3, [r2, #0]
 80017b2:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80017b6:	f103 031c 	add.w	r3, r3, #28
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	ddbf      	ble.n	8001740 <test_full_keccak_rounds+0xb4>

        reference_round(ref, r);
 80017c0:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 80017c4:	f103 0308 	add.w	r3, r3, #8
 80017c8:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80017cc:	6811      	ldr	r1, [r2, #0]
 80017ce:	4618      	mov	r0, r3
 80017d0:	f7ff ff42 	bl	8001658 <reference_round>
        masked_round(mstate, r, Rchi);
 80017d4:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 80017d8:	f607 5348 	addw	r3, r7, #3400	@ 0xd48
 80017dc:	f507 518a 	add.w	r1, r7, #4416	@ 0x1140
 80017e0:	6809      	ldr	r1, [r1, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fe84 	bl	80014f0 <masked_round>

        uint64_t recon[25];
        recombine_masked_state(recon, mstate);
 80017e8:	f607 5248 	addw	r2, r7, #3400	@ 0xd48
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	3b08      	subs	r3, #8
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fc2c 	bl	8001052 <recombine_masked_state>

        /* --- 3. compare lane by lane --------------------------------- */
        int fail = 0;
 80017fa:	2300      	movs	r3, #0
 80017fc:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8001800:	f102 0214 	add.w	r2, r2, #20
 8001804:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 25; ++i) {
 8001806:	2300      	movs	r3, #0
 8001808:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 800180c:	f102 0210 	add.w	r2, r2, #16
 8001810:	6013      	str	r3, [r2, #0]
 8001812:	e059      	b.n	80018c8 <test_full_keccak_rounds+0x23c>
            if (recon[i] != ref[i]) {
 8001814:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8001818:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 800181c:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001820:	f103 0310 	add.w	r3, r3, #16
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	00db      	lsls	r3, r3, #3
 8001828:	4413      	add	r3, r2
 800182a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182e:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001832:	f103 0310 	add.w	r3, r3, #16
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	00db      	lsls	r3, r3, #3
 800183a:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 800183e:	f103 0308 	add.w	r3, r3, #8
 8001842:	443b      	add	r3, r7
 8001844:	3be0      	subs	r3, #224	@ 0xe0
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	4299      	cmp	r1, r3
 800184c:	bf08      	it	eq
 800184e:	4290      	cmpeq	r0, r2
 8001850:	d02f      	beq.n	80018b2 <test_full_keccak_rounds+0x226>
                printf("Round %2d lane %2d : ref=%016llX  mask=%016llX\n",
                       r, i,
                       (unsigned long long)ref[i],
 8001852:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001856:	f103 0310 	add.w	r3, r3, #16
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	f503 538a 	add.w	r3, r3, #4416	@ 0x1140
 8001862:	f103 0308 	add.w	r3, r3, #8
 8001866:	443b      	add	r3, r7
 8001868:	3be0      	subs	r3, #224	@ 0xe0
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
                       (unsigned long long)recon[i]);
 800186e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8001872:	f5a1 70a4 	sub.w	r0, r1, #328	@ 0x148
 8001876:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 800187a:	f101 0110 	add.w	r1, r1, #16
 800187e:	6809      	ldr	r1, [r1, #0]
 8001880:	00c9      	lsls	r1, r1, #3
 8001882:	4401      	add	r1, r0
 8001884:	e9d1 0100 	ldrd	r0, r1, [r1]
                printf("Round %2d lane %2d : ref=%016llX  mask=%016llX\n",
 8001888:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800188c:	e9cd 2300 	strd	r2, r3, [sp]
 8001890:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8001894:	f103 0310 	add.w	r3, r3, #16
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	481e      	ldr	r0, [pc, #120]	@ (800191c <test_full_keccak_rounds+0x290>)
 80018a2:	f00a fdd7 	bl	800c454 <iprintf>
                fail = 1;
 80018a6:	2301      	movs	r3, #1
 80018a8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80018ac:	f102 0214 	add.w	r2, r2, #20
 80018b0:	6013      	str	r3, [r2, #0]
        for (int i = 0; i < 25; ++i) {
 80018b2:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80018b6:	f103 0310 	add.w	r3, r3, #16
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	3301      	adds	r3, #1
 80018be:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 80018c2:	f102 0210 	add.w	r2, r2, #16
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80018cc:	f103 0310 	add.w	r3, r3, #16
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	2b18      	cmp	r3, #24
 80018d4:	dd9e      	ble.n	8001814 <test_full_keccak_rounds+0x188>
            }
        }
        if (fail) {
 80018d6:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 80018da:	f103 0314 	add.w	r3, r3, #20
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d006      	beq.n	80018f2 <test_full_keccak_rounds+0x266>
            printf("✗ round %d FAILED – stop early\n\n", r);
 80018e4:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	480d      	ldr	r0, [pc, #52]	@ (8001920 <test_full_keccak_rounds+0x294>)
 80018ec:	f00a fdb2 	bl	800c454 <iprintf>
 80018f0:	e00f      	b.n	8001912 <test_full_keccak_rounds+0x286>
    for (int r = 0; r < 24; ++r) {
 80018f2:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	3301      	adds	r3, #1
 80018fa:	f507 528a 	add.w	r2, r7, #4416	@ 0x1140
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	f507 538a 	add.w	r3, r7, #4416	@ 0x1140
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2b17      	cmp	r3, #23
 8001908:	f77f af13 	ble.w	8001732 <test_full_keccak_rounds+0xa6>
            return;
        }
    }

    printf("✓ all 24 masked rounds match reference Keccak-F[1600]\n");
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <test_full_keccak_rounds+0x298>)
 800190e:	f00a fe09 	bl	800c524 <puts>
}
 8001912:	f507 578a 	add.w	r7, r7, #4416	@ 0x1140
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bdb0      	pop	{r4, r5, r7, pc}
 800191c:	0800d348 	.word	0x0800d348
 8001920:	0800d378 	.word	0x0800d378
 8001924:	0800d3a0 	.word	0x0800d3a0

08001928 <test_masked_keccak_round_vs_reference>:

void test_masked_keccak_round_vs_reference(void) {
 8001928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800192c:	f2ad 5d94 	subw	sp, sp, #1428	@ 0x594
 8001930:	af00      	add	r7, sp, #0
    // === 1. Setup known input ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 8001932:	2300      	movs	r3, #0
 8001934:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 8001938:	e05c      	b.n	80019f4 <test_masked_keccak_round_vs_reference+0xcc>
        ref_state[i] = i * 0x0101010101010101ULL;
 800193a:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 800193e:	17da      	asrs	r2, r3, #31
 8001940:	469a      	mov	sl, r3
 8001942:	4693      	mov	fp, r2
 8001944:	4652      	mov	r2, sl
 8001946:	465b      	mov	r3, fp
 8001948:	f04f 0800 	mov.w	r8, #0
 800194c:	f04f 0900 	mov.w	r9, #0
 8001950:	021e      	lsls	r6, r3, #8
 8001952:	46b1      	mov	r9, r6
 8001954:	464e      	mov	r6, r9
 8001956:	ea46 6612 	orr.w	r6, r6, r2, lsr #24
 800195a:	46b1      	mov	r9, r6
 800195c:	0213      	lsls	r3, r2, #8
 800195e:	4698      	mov	r8, r3
 8001960:	4642      	mov	r2, r8
 8001962:	464b      	mov	r3, r9
 8001964:	eb12 000a 	adds.w	r0, r2, sl
 8001968:	eb43 010b 	adc.w	r1, r3, fp
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	f04f 0300 	mov.w	r3, #0
 8001974:	060b      	lsls	r3, r1, #24
 8001976:	ea43 2310 	orr.w	r3, r3, r0, lsr #8
 800197a:	0602      	lsls	r2, r0, #24
 800197c:	4610      	mov	r0, r2
 800197e:	4619      	mov	r1, r3
 8001980:	eb10 040a 	adds.w	r4, r0, sl
 8001984:	eb41 050b 	adc.w	r5, r1, fp
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	f04f 0300 	mov.w	r3, #0
 8001990:	022b      	lsls	r3, r5, #8
 8001992:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8001996:	0222      	lsls	r2, r4, #8
 8001998:	4614      	mov	r4, r2
 800199a:	461d      	mov	r5, r3
 800199c:	eb14 030a 	adds.w	r3, r4, sl
 80019a0:	603b      	str	r3, [r7, #0]
 80019a2:	eb45 030b 	adc.w	r3, r5, fp
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	f04f 0300 	mov.w	r3, #0
 80019b0:	e9d7 8900 	ldrd	r8, r9, [r7]
 80019b4:	464e      	mov	r6, r9
 80019b6:	0433      	lsls	r3, r6, #16
 80019b8:	4646      	mov	r6, r8
 80019ba:	ea43 4316 	orr.w	r3, r3, r6, lsr #16
 80019be:	4646      	mov	r6, r8
 80019c0:	0432      	lsls	r2, r6, #16
 80019c2:	4646      	mov	r6, r8
 80019c4:	18b6      	adds	r6, r6, r2
 80019c6:	60be      	str	r6, [r7, #8]
 80019c8:	464e      	mov	r6, r9
 80019ca:	eb46 0303 	adc.w	r3, r6, r3
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 80019d4:	00db      	lsls	r3, r3, #3
 80019d6:	f503 63b0 	add.w	r3, r3, #1408	@ 0x580
 80019da:	f107 0210 	add.w	r2, r7, #16
 80019de:	4413      	add	r3, r2
 80019e0:	3bd0      	subs	r3, #208	@ 0xd0
 80019e2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80019e6:	e9c3 8900 	strd	r8, r9, [r3]
    for (int i = 0; i < 25; i++)
 80019ea:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 80019ee:	3301      	adds	r3, #1
 80019f0:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 80019f4:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 80019f8:	2b18      	cmp	r3, #24
 80019fa:	dd9e      	ble.n	800193a <test_masked_keccak_round_vs_reference+0x12>

    masked_uint64_t masked_state[5][5];
    fill_masked_state(masked_state, ref_state);
 80019fc:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 8001a00:	f507 73d0 	add.w	r3, r7, #416	@ 0x1a0
 8001a04:	4611      	mov	r1, r2
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fab2 	bl	8000f70 <fill_masked_state>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. Apply reference round ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 8001a0c:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8001a10:	f5a3 6397 	sub.w	r3, r3, #1208	@ 0x4b8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8001a1a:	22c8      	movs	r2, #200	@ 0xc8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	f00a ffa0 	bl	800c962 <memcpy>
    theta(tmp_ref);
 8001a22:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7fe fdf4 	bl	8000614 <theta>
    rho(tmp_ref);
 8001a2c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7fe fecd 	bl	80007d0 <rho>
    pi(tmp_ref);
 8001a36:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7fe ff3e 	bl	80008bc <pi>
    chi(tmp_ref);
 8001a40:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe ffd3 	bl	80009f0 <chi>
    iota(tmp_ref, 0);
 8001a4a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a4e:	2100      	movs	r1, #0
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff f855 	bl	8000b00 <iota>

    // === 3. Apply masked round ===
    masked_keccak_round(masked_state, RC[0]);
 8001a56:	4b0f      	ldr	r3, [pc, #60]	@ (8001a94 <test_masked_keccak_round_vs_reference+0x16c>)
 8001a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5c:	f507 71d0 	add.w	r1, r7, #416	@ 0x1a0
 8001a60:	4608      	mov	r0, r1
 8001a62:	f001 fa24 	bl	8002eae <masked_keccak_round>
    recombine_masked_state(tmp_masked, masked_state);
 8001a66:	f507 72d0 	add.w	r2, r7, #416	@ 0x1a0
 8001a6a:	f107 0310 	add.w	r3, r7, #16
 8001a6e:	4611      	mov	r1, r2
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff faee 	bl	8001052 <recombine_masked_state>

    // === 4. Compare ===
    print_diff("Keccak-Round", tmp_ref, tmp_masked);
 8001a76:	f107 0210 	add.w	r2, r7, #16
 8001a7a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4805      	ldr	r0, [pc, #20]	@ (8001a98 <test_masked_keccak_round_vs_reference+0x170>)
 8001a82:	f7ff fb37 	bl	80010f4 <print_diff>
}
 8001a86:	bf00      	nop
 8001a88:	f207 5794 	addw	r7, r7, #1428	@ 0x594
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a92:	bf00      	nop
 8001a94:	0800d670 	.word	0x0800d670
 8001a98:	0800d3d8 	.word	0x0800d3d8

08001a9c <test_masked_vs_reference_sha3_256>:
extern int TWOFIVESIX(uint8_t* M, int l, uint8_t* O);
extern int FIVEONETWO(uint8_t* M, int l, uint8_t* O);

void test_masked_vs_reference_sha3_256(void) {
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b094      	sub	sp, #80	@ 0x50
 8001aa0:	af00      	add	r7, sp, #0
    const char *msg = "Masked Keccak Test Vector: SHA3-256";
 8001aa2:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <test_masked_vs_reference_sha3_256+0x90>)
 8001aa4:	64bb      	str	r3, [r7, #72]	@ 0x48
    size_t len = strlen(msg);
 8001aa6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001aa8:	f7fe fb92 	bl	80001d0 <strlen>
 8001aac:	6478      	str	r0, [r7, #68]	@ 0x44

    uint8_t ref_out[32];
    uint8_t masked_out[32];

    // Call reference implementation
    TWOFIVESIX((uint8_t *)msg, (int)len, ref_out);
 8001aae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ab0:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8001ab8:	f7ff fa2c 	bl	8000f14 <TWOFIVESIX>

    // Call masked implementation
    masked_sha3_256(masked_out, (const uint8_t *)msg, len);
 8001abc:	1d3b      	adds	r3, r7, #4
 8001abe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001ac0:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f001 fd2e 	bl	8003524 <masked_sha3_256>

    // Compare output
    for (int i = 0; i < 32; ++i) {
 8001ac8:	2300      	movs	r3, #0
 8001aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001acc:	e023      	b.n	8001b16 <test_masked_vs_reference_sha3_256+0x7a>
        if (ref_out[i] != masked_out[i]) {
 8001ace:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001ad2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001ad4:	4413      	add	r3, r2
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	1d39      	adds	r1, r7, #4
 8001ada:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001adc:	440b      	add	r3, r1
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d015      	beq.n	8001b10 <test_masked_vs_reference_sha3_256+0x74>
            printf("Mismatch SHA3-256 byte[%d]: ref=0x%02X, masked=0x%02X\n",
                   i, ref_out[i], masked_out[i]);
 8001ae4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001ae8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001aea:	4413      	add	r3, r2
 8001aec:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-256 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001aee:	4619      	mov	r1, r3
                   i, ref_out[i], masked_out[i]);
 8001af0:	1d3a      	adds	r2, r7, #4
 8001af2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001af4:	4413      	add	r3, r2
 8001af6:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-256 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001af8:	460a      	mov	r2, r1
 8001afa:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001afc:	480c      	ldr	r0, [pc, #48]	@ (8001b30 <test_masked_vs_reference_sha3_256+0x94>)
 8001afe:	f00a fca9 	bl	800c454 <iprintf>
            assert(0);
 8001b02:	4b0c      	ldr	r3, [pc, #48]	@ (8001b34 <test_masked_vs_reference_sha3_256+0x98>)
 8001b04:	4a0c      	ldr	r2, [pc, #48]	@ (8001b38 <test_masked_vs_reference_sha3_256+0x9c>)
 8001b06:	f240 1157 	movw	r1, #343	@ 0x157
 8001b0a:	480c      	ldr	r0, [pc, #48]	@ (8001b3c <test_masked_vs_reference_sha3_256+0xa0>)
 8001b0c:	f00a faf2 	bl	800c0f4 <__assert_func>
    for (int i = 0; i < 32; ++i) {
 8001b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b12:	3301      	adds	r3, #1
 8001b14:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001b18:	2b1f      	cmp	r3, #31
 8001b1a:	ddd8      	ble.n	8001ace <test_masked_vs_reference_sha3_256+0x32>
        }
    }
    printf("PASS: SHA3-256 masked output matches reference\n");
 8001b1c:	4808      	ldr	r0, [pc, #32]	@ (8001b40 <test_masked_vs_reference_sha3_256+0xa4>)
 8001b1e:	f00a fd01 	bl	800c524 <puts>
}
 8001b22:	bf00      	nop
 8001b24:	3750      	adds	r7, #80	@ 0x50
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	0800d3e8 	.word	0x0800d3e8
 8001b30:	0800d40c 	.word	0x0800d40c
 8001b34:	0800d444 	.word	0x0800d444
 8001b38:	0800d628 	.word	0x0800d628
 8001b3c:	0800d448 	.word	0x0800d448
 8001b40:	0800d45c 	.word	0x0800d45c

08001b44 <test_masked_vs_reference_sha3_512>:

void test_masked_vs_reference_sha3_512(void) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b0a4      	sub	sp, #144	@ 0x90
 8001b48:	af00      	add	r7, sp, #0
    const char *msg = "Masked Keccak Test Vector: SHA3-512";
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	@ (8001bf4 <test_masked_vs_reference_sha3_512+0xb0>)
 8001b4c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    size_t len = strlen(msg);
 8001b50:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001b54:	f7fe fb3c 	bl	80001d0 <strlen>
 8001b58:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84

    uint8_t ref_out[64];
    uint8_t masked_out[64];

    // Call reference implementation
    FIVEONETWO((uint8_t *)msg, (int)len, ref_out);
 8001b5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001b60:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001b64:	4619      	mov	r1, r3
 8001b66:	f8d7 0088 	ldr.w	r0, [r7, #136]	@ 0x88
 8001b6a:	f7ff f9bb 	bl	8000ee4 <FIVEONETWO>

    // Call masked implementation
    masked_sha3_512(masked_out, (const uint8_t *)msg, len);
 8001b6e:	1d3b      	adds	r3, r7, #4
 8001b70:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8001b74:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f001 fcfb 	bl	8003574 <masked_sha3_512>

    for (int i = 0; i < 64; ++i) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001b84:	e02a      	b.n	8001bdc <test_masked_vs_reference_sha3_512+0x98>
        if (ref_out[i] != masked_out[i]) {
 8001b86:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001b8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b8e:	4413      	add	r3, r2
 8001b90:	781a      	ldrb	r2, [r3, #0]
 8001b92:	1d39      	adds	r1, r7, #4
 8001b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001b98:	440b      	add	r3, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d018      	beq.n	8001bd2 <test_masked_vs_reference_sha3_512+0x8e>
            printf("Mismatch SHA3-512 byte[%d]: ref=0x%02X, masked=0x%02X\n",
                   i, ref_out[i], masked_out[i]);
 8001ba0:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 8001ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001ba8:	4413      	add	r3, r2
 8001baa:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-512 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001bac:	4619      	mov	r1, r3
                   i, ref_out[i], masked_out[i]);
 8001bae:	1d3a      	adds	r2, r7, #4
 8001bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bb4:	4413      	add	r3, r2
 8001bb6:	781b      	ldrb	r3, [r3, #0]
            printf("Mismatch SHA3-512 byte[%d]: ref=0x%02X, masked=0x%02X\n",
 8001bb8:	460a      	mov	r2, r1
 8001bba:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8001bbe:	480e      	ldr	r0, [pc, #56]	@ (8001bf8 <test_masked_vs_reference_sha3_512+0xb4>)
 8001bc0:	f00a fc48 	bl	800c454 <iprintf>
            assert(0);
 8001bc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001bfc <test_masked_vs_reference_sha3_512+0xb8>)
 8001bc6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c00 <test_masked_vs_reference_sha3_512+0xbc>)
 8001bc8:	f44f 71b7 	mov.w	r1, #366	@ 0x16e
 8001bcc:	480d      	ldr	r0, [pc, #52]	@ (8001c04 <test_masked_vs_reference_sha3_512+0xc0>)
 8001bce:	f00a fa91 	bl	800c0f4 <__assert_func>
    for (int i = 0; i < 64; ++i) {
 8001bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8001bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001be0:	2b3f      	cmp	r3, #63	@ 0x3f
 8001be2:	ddd0      	ble.n	8001b86 <test_masked_vs_reference_sha3_512+0x42>
        }
    }
    printf("PASS: SHA3-512 masked output matches reference\n");
 8001be4:	4808      	ldr	r0, [pc, #32]	@ (8001c08 <test_masked_vs_reference_sha3_512+0xc4>)
 8001be6:	f00a fc9d 	bl	800c524 <puts>
}
 8001bea:	bf00      	nop
 8001bec:	3790      	adds	r7, #144	@ 0x90
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	0800d48c 	.word	0x0800d48c
 8001bf8:	0800d4b0 	.word	0x0800d4b0
 8001bfc:	0800d444 	.word	0x0800d444
 8001c00:	0800d64c 	.word	0x0800d64c
 8001c04:	0800d448 	.word	0x0800d448
 8001c08:	0800d4e8 	.word	0x0800d4e8

08001c0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c12:	f002 f813 	bl	8003c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c16:	f000 f83d 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c1a:	f000 f977 	bl	8001f0c <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c1e:	f000 f8a3 	bl	8001d68 <MX_I2C1_Init>
  MX_I2S3_Init();
 8001c22:	f000 f8cf 	bl	8001dc4 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001c26:	f000 f911 	bl	8001e4c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001c2a:	f009 ff59 	bl	800bae0 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8001c2e:	f000 f8f9 	bl	8001e24 <MX_RNG_Init>
  MX_USART2_UART_Init();
 8001c32:	f000 f941 	bl	8001eb8 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	607b      	str	r3, [r7, #4]
 8001c3a:	4b13      	ldr	r3, [pc, #76]	@ (8001c88 <main+0x7c>)
 8001c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c3e:	4a12      	ldr	r2, [pc, #72]	@ (8001c88 <main+0x7c>)
 8001c40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c44:	6353      	str	r3, [r2, #52]	@ 0x34
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <main+0x7c>)
 8001c48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c4e:	607b      	str	r3, [r7, #4]
 8001c50:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8001c52:	480e      	ldr	r0, [pc, #56]	@ (8001c8c <main+0x80>)
 8001c54:	f006 f842 	bl	8007cdc <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8001c58:	4b0d      	ldr	r3, [pc, #52]	@ (8001c90 <main+0x84>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6898      	ldr	r0, [r3, #8]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	2202      	movs	r2, #2
 8001c62:	2100      	movs	r1, #0
 8001c64:	f00a fc66 	bl	800c534 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_vs_reference_step_by_step();
 8001c68:	f7ff fab0 	bl	80011cc <test_masked_vs_reference_step_by_step>
	  test_full_keccak_rounds();
 8001c6c:	f7ff fd0e 	bl	800168c <test_full_keccak_rounds>
	  test_masked_keccak_round_vs_reference();
 8001c70:	f7ff fe5a 	bl	8001928 <test_masked_keccak_round_vs_reference>
	    test_masked_vs_reference_sha3_256();
 8001c74:	f7ff ff12 	bl	8001a9c <test_masked_vs_reference_sha3_256>
	    test_masked_vs_reference_sha3_512();
 8001c78:	f7ff ff64 	bl	8001b44 <test_masked_vs_reference_sha3_512>
	    test_kat_sha3_all();
 8001c7c:	f001 ff6a 	bl	8003b54 <test_kat_sha3_all>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001c80:	f009 ff54 	bl	800bb2c <MX_USB_HOST_Process>
	  test_masked_vs_reference_step_by_step();
 8001c84:	bf00      	nop
 8001c86:	e7ef      	b.n	8001c68 <main+0x5c>
 8001c88:	40023800 	.word	0x40023800
 8001c8c:	200001b0 	.word	0x200001b0
 8001c90:	200000a8 	.word	0x200000a8

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b094      	sub	sp, #80	@ 0x50
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0320 	add.w	r3, r7, #32
 8001c9e:	2230      	movs	r2, #48	@ 0x30
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f00a fdd2 	bl	800c84c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60bb      	str	r3, [r7, #8]
 8001cbc:	4b28      	ldr	r3, [pc, #160]	@ (8001d60 <SystemClock_Config+0xcc>)
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc0:	4a27      	ldr	r2, [pc, #156]	@ (8001d60 <SystemClock_Config+0xcc>)
 8001cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cc6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cc8:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <SystemClock_Config+0xcc>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cf4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001cf8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001cfe:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001d02:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001d04:	2308      	movs	r3, #8
 8001d06:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001d08:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001d0c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d12:	2307      	movs	r3, #7
 8001d14:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d16:	f107 0320 	add.w	r3, r7, #32
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f005 fa04 	bl	8007128 <HAL_RCC_OscConfig>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001d26:	f000 f9ef 	bl	8002108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d2a:	230f      	movs	r3, #15
 8001d2c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d32:	2300      	movs	r3, #0
 8001d34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d36:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001d3a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2105      	movs	r1, #5
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f005 fc65 	bl	8007618 <HAL_RCC_ClockConfig>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001d54:	f000 f9d8 	bl	8002108 <Error_Handler>
  }
}
 8001d58:	bf00      	nop
 8001d5a:	3750      	adds	r7, #80	@ 0x50
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000

08001d68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d6e:	4a13      	ldr	r2, [pc, #76]	@ (8001dbc <MX_I2C1_Init+0x54>)
 8001d70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001d72:	4b11      	ldr	r3, [pc, #68]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d74:	4a12      	ldr	r2, [pc, #72]	@ (8001dc0 <MX_I2C1_Init+0x58>)
 8001d76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001d8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d92:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d98:	4b07      	ldr	r3, [pc, #28]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d9e:	4b06      	ldr	r3, [pc, #24]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001da4:	4804      	ldr	r0, [pc, #16]	@ (8001db8 <MX_I2C1_Init+0x50>)
 8001da6:	f004 fbdb 	bl	8006560 <HAL_I2C_Init>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001db0:	f000 f9aa 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	20000114 	.word	0x20000114
 8001dbc:	40005400 	.word	0x40005400
 8001dc0:	000186a0 	.word	0x000186a0

08001dc4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001dc8:	4b13      	ldr	r3, [pc, #76]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001dca:	4a14      	ldr	r2, [pc, #80]	@ (8001e1c <MX_I2S3_Init+0x58>)
 8001dcc:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001dce:	4b12      	ldr	r3, [pc, #72]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001dd0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dd4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001dd6:	4b10      	ldr	r3, [pc, #64]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001ddc:	4b0e      	ldr	r3, [pc, #56]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001de2:	4b0d      	ldr	r3, [pc, #52]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001de8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001dec:	4a0c      	ldr	r2, [pc, #48]	@ (8001e20 <MX_I2S3_Init+0x5c>)
 8001dee:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001df0:	4b09      	ldr	r3, [pc, #36]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001df6:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_I2S3_Init+0x54>)
 8001e04:	f004 fcf0 	bl	80067e8 <HAL_I2S_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001e0e:	f000 f97b 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000168 	.word	0x20000168
 8001e1c:	40003c00 	.word	0x40003c00
 8001e20:	00017700 	.word	0x00017700

08001e24 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001e28:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <MX_RNG_Init+0x20>)
 8001e2a:	4a07      	ldr	r2, [pc, #28]	@ (8001e48 <MX_RNG_Init+0x24>)
 8001e2c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001e2e:	4805      	ldr	r0, [pc, #20]	@ (8001e44 <MX_RNG_Init+0x20>)
 8001e30:	f005 ff54 	bl	8007cdc <HAL_RNG_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8001e3a:	f000 f965 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	200001b0 	.word	0x200001b0
 8001e48:	50060800 	.word	0x50060800

08001e4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e50:	4b17      	ldr	r3, [pc, #92]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e52:	4a18      	ldr	r2, [pc, #96]	@ (8001eb4 <MX_SPI1_Init+0x68>)
 8001e54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e56:	4b16      	ldr	r3, [pc, #88]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e5e:	4b14      	ldr	r3, [pc, #80]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e64:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e70:	4b0f      	ldr	r3, [pc, #60]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e84:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e8a:	4b09      	ldr	r3, [pc, #36]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e98:	220a      	movs	r2, #10
 8001e9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e9c:	4804      	ldr	r0, [pc, #16]	@ (8001eb0 <MX_SPI1_Init+0x64>)
 8001e9e:	f005 ff9d 	bl	8007ddc <HAL_SPI_Init>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001ea8:	f000 f92e 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001eac:	bf00      	nop
 8001eae:	bd80      	pop	{r7, pc}
 8001eb0:	200001c0 	.word	0x200001c0
 8001eb4:	40013000 	.word	0x40013000

08001eb8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ebc:	4b11      	ldr	r3, [pc, #68]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ebe:	4a12      	ldr	r2, [pc, #72]	@ (8001f08 <MX_USART2_UART_Init+0x50>)
 8001ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ec4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001eca:	4b0e      	ldr	r3, [pc, #56]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001ed6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001edc:	4b09      	ldr	r3, [pc, #36]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ede:	220c      	movs	r2, #12
 8001ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ee8:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eee:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <MX_USART2_UART_Init+0x4c>)
 8001ef0:	f005 fffd 	bl	8007eee <HAL_UART_Init>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001efa:	f000 f905 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001efe:	bf00      	nop
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	20000218 	.word	0x20000218
 8001f08:	40004400 	.word	0x40004400

08001f0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b08c      	sub	sp, #48	@ 0x30
 8001f10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	605a      	str	r2, [r3, #4]
 8001f1c:	609a      	str	r2, [r3, #8]
 8001f1e:	60da      	str	r2, [r3, #12]
 8001f20:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	4b72      	ldr	r3, [pc, #456]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	4a71      	ldr	r2, [pc, #452]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f2c:	f043 0310 	orr.w	r3, r3, #16
 8001f30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f32:	4b6f      	ldr	r3, [pc, #444]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f36:	f003 0310 	and.w	r3, r3, #16
 8001f3a:	61bb      	str	r3, [r7, #24]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	617b      	str	r3, [r7, #20]
 8001f42:	4b6b      	ldr	r3, [pc, #428]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f46:	4a6a      	ldr	r2, [pc, #424]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f48:	f043 0304 	orr.w	r3, r3, #4
 8001f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f4e:	4b68      	ldr	r3, [pc, #416]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
 8001f5e:	4b64      	ldr	r3, [pc, #400]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f62:	4a63      	ldr	r2, [pc, #396]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f6a:	4b61      	ldr	r3, [pc, #388]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f72:	613b      	str	r3, [r7, #16]
 8001f74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	4b5d      	ldr	r3, [pc, #372]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a5c      	ldr	r2, [pc, #368]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f80:	f043 0301 	orr.w	r3, r3, #1
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b5a      	ldr	r3, [pc, #360]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	60fb      	str	r3, [r7, #12]
 8001f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	60bb      	str	r3, [r7, #8]
 8001f96:	4b56      	ldr	r3, [pc, #344]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f9a:	4a55      	ldr	r2, [pc, #340]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa2:	4b53      	ldr	r3, [pc, #332]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	60bb      	str	r3, [r7, #8]
 8001fac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	607b      	str	r3, [r7, #4]
 8001fb2:	4b4f      	ldr	r3, [pc, #316]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	4a4e      	ldr	r2, [pc, #312]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001fb8:	f043 0308 	orr.w	r3, r3, #8
 8001fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbe:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <MX_GPIO_Init+0x1e4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	607b      	str	r3, [r7, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2108      	movs	r1, #8
 8001fce:	4849      	ldr	r0, [pc, #292]	@ (80020f4 <MX_GPIO_Init+0x1e8>)
 8001fd0:	f002 f978 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4847      	ldr	r0, [pc, #284]	@ (80020f8 <MX_GPIO_Init+0x1ec>)
 8001fda:	f002 f973 	bl	80042c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001fde:	2200      	movs	r2, #0
 8001fe0:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001fe4:	4845      	ldr	r0, [pc, #276]	@ (80020fc <MX_GPIO_Init+0x1f0>)
 8001fe6:	f002 f96d 	bl	80042c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001fea:	2308      	movs	r3, #8
 8001fec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f107 031c 	add.w	r3, r7, #28
 8001ffe:	4619      	mov	r1, r3
 8002000:	483c      	ldr	r0, [pc, #240]	@ (80020f4 <MX_GPIO_Init+0x1e8>)
 8002002:	f001 ffc3 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800200a:	2301      	movs	r3, #1
 800200c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200e:	2300      	movs	r3, #0
 8002010:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002012:	2300      	movs	r3, #0
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002016:	f107 031c 	add.w	r3, r7, #28
 800201a:	4619      	mov	r1, r3
 800201c:	4836      	ldr	r0, [pc, #216]	@ (80020f8 <MX_GPIO_Init+0x1ec>)
 800201e:	f001 ffb5 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002022:	2308      	movs	r3, #8
 8002024:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800202e:	2300      	movs	r3, #0
 8002030:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002032:	2305      	movs	r3, #5
 8002034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002036:	f107 031c 	add.w	r3, r7, #28
 800203a:	4619      	mov	r1, r3
 800203c:	482e      	ldr	r0, [pc, #184]	@ (80020f8 <MX_GPIO_Init+0x1ec>)
 800203e:	f001 ffa5 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002042:	2301      	movs	r3, #1
 8002044:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002046:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800204a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002050:	f107 031c 	add.w	r3, r7, #28
 8002054:	4619      	mov	r1, r3
 8002056:	482a      	ldr	r0, [pc, #168]	@ (8002100 <MX_GPIO_Init+0x1f4>)
 8002058:	f001 ff98 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 800205c:	2304      	movs	r3, #4
 800205e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002064:	2300      	movs	r3, #0
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 031c 	add.w	r3, r7, #28
 800206c:	4619      	mov	r1, r3
 800206e:	4825      	ldr	r0, [pc, #148]	@ (8002104 <MX_GPIO_Init+0x1f8>)
 8002070:	f001 ff8c 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002074:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002078:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800207a:	2302      	movs	r3, #2
 800207c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002082:	2300      	movs	r3, #0
 8002084:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002086:	2305      	movs	r3, #5
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	4619      	mov	r1, r3
 8002090:	481c      	ldr	r0, [pc, #112]	@ (8002104 <MX_GPIO_Init+0x1f8>)
 8002092:	f001 ff7b 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002096:	f24f 0310 	movw	r3, #61456	@ 0xf010
 800209a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800209c:	2301      	movs	r3, #1
 800209e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020a4:	2300      	movs	r3, #0
 80020a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	4619      	mov	r1, r3
 80020ae:	4813      	ldr	r0, [pc, #76]	@ (80020fc <MX_GPIO_Init+0x1f0>)
 80020b0:	f001 ff6c 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80020b4:	2320      	movs	r3, #32
 80020b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020bc:	2300      	movs	r3, #0
 80020be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80020c0:	f107 031c 	add.w	r3, r7, #28
 80020c4:	4619      	mov	r1, r3
 80020c6:	480d      	ldr	r0, [pc, #52]	@ (80020fc <MX_GPIO_Init+0x1f0>)
 80020c8:	f001 ff60 	bl	8003f8c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80020cc:	2302      	movs	r3, #2
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80020d0:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80020d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	4804      	ldr	r0, [pc, #16]	@ (80020f4 <MX_GPIO_Init+0x1e8>)
 80020e2:	f001 ff53 	bl	8003f8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80020e6:	bf00      	nop
 80020e8:	3730      	adds	r7, #48	@ 0x30
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40023800 	.word	0x40023800
 80020f4:	40021000 	.word	0x40021000
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40020000 	.word	0x40020000
 8002104:	40020400 	.word	0x40020400

08002108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800210c:	b672      	cpsid	i
}
 800210e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002110:	bf00      	nop
 8002112:	e7fd      	b.n	8002110 <Error_Handler+0x8>

08002114 <fill_random_matrix>:
#include <stdint.h>
#include <stdio.h>
#include "masked_gadgets.h"
#include "global_rng.h"

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]
 8002120:	e033      	b.n	800218a <fill_random_matrix+0x76>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	e01c      	b.n	8002164 <fill_random_matrix+0x50>
            uint64_t val = get_random64();
 800212a:	f7fe fa3f 	bl	80005ac <get_random64>
 800212e:	e9c7 0102 	strd	r0, r1, [r7, #8]
            r[i][j] = val;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	015b      	lsls	r3, r3, #5
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	441a      	add	r2, r3
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	00db      	lsls	r3, r3, #3
 800213e:	18d1      	adds	r1, r2, r3
 8002140:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002144:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	015b      	lsls	r3, r3, #5
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	441a      	add	r2, r3
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	00db      	lsls	r3, r3, #3
 8002154:	18d1      	adds	r1, r2, r3
 8002156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800215a:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	3301      	adds	r3, #1
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	2b03      	cmp	r3, #3
 8002168:	d9df      	bls.n	800212a <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	015b      	lsls	r3, r3, #5
 800216e:	687a      	ldr	r2, [r7, #4]
 8002170:	441a      	add	r2, r3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	18d1      	adds	r1, r2, r3
 8002178:	f04f 0200 	mov.w	r2, #0
 800217c:	f04f 0300 	mov.w	r3, #0
 8002180:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	3301      	adds	r3, #1
 8002188:	617b      	str	r3, [r7, #20]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d9c8      	bls.n	8002122 <fill_random_matrix+0xe>
    }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3718      	adds	r7, #24
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 800219a:	b4b0      	push	{r4, r5, r7}
 800219c:	b087      	sub	sp, #28
 800219e:	af00      	add	r7, sp, #0
 80021a0:	60f8      	str	r0, [r7, #12]
 80021a2:	60b9      	str	r1, [r7, #8]
 80021a4:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80021a6:	2300      	movs	r3, #0
 80021a8:	617b      	str	r3, [r7, #20]
 80021aa:	e018      	b.n	80021de <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 80021ac:	68ba      	ldr	r2, [r7, #8]
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	00db      	lsls	r3, r3, #3
 80021b2:	4413      	add	r3, r2
 80021b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	4413      	add	r3, r2
 80021c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c4:	ea80 0402 	eor.w	r4, r0, r2
 80021c8:	ea81 0503 	eor.w	r5, r1, r3
 80021cc:	68fa      	ldr	r2, [r7, #12]
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	00db      	lsls	r3, r3, #3
 80021d2:	4413      	add	r3, r2
 80021d4:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3301      	adds	r3, #1
 80021dc:	617b      	str	r3, [r7, #20]
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	2b03      	cmp	r3, #3
 80021e2:	d9e3      	bls.n	80021ac <masked_xor+0x12>
    }
}
 80021e4:	bf00      	nop
 80021e6:	bf00      	nop
 80021e8:	371c      	adds	r7, #28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bcb0      	pop	{r4, r5, r7}
 80021ee:	4770      	bx	lr

080021f0 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 80021f0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80021f4:	b092      	sub	sp, #72	@ 0x48
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80021fa:	62b9      	str	r1, [r7, #40]	@ 0x28
 80021fc:	627a      	str	r2, [r7, #36]	@ 0x24
 80021fe:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 8002200:	2300      	movs	r3, #0
 8002202:	647b      	str	r3, [r7, #68]	@ 0x44
 8002204:	e018      	b.n	8002238 <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 8002206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002208:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002216:	00db      	lsls	r3, r3, #3
 8002218:	4413      	add	r3, r2
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	ea00 0402 	and.w	r4, r0, r2
 8002222:	ea01 0503 	and.w	r5, r1, r3
 8002226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4413      	add	r3, r2
 800222e:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002234:	3301      	adds	r3, #1
 8002236:	647b      	str	r3, [r7, #68]	@ 0x44
 8002238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800223a:	2b03      	cmp	r3, #3
 800223c:	d9e3      	bls.n	8002206 <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 800223e:	2300      	movs	r3, #0
 8002240:	643b      	str	r3, [r7, #64]	@ 0x40
 8002242:	e078      	b.n	8002336 <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002244:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002246:	3301      	adds	r3, #1
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800224a:	e06e      	b.n	800232a <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 800224c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800224e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002258:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800225a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	4413      	add	r3, r2
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	ea00 0802 	and.w	r8, r0, r2
 8002268:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 800226c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800226e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	4413      	add	r3, r2
 8002274:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002278:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800227a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002284:	ea00 0a02 	and.w	sl, r0, r2
 8002288:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 800228c:	ea88 030a 	eor.w	r3, r8, sl
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	ea89 030b 	eor.w	r3, r9, fp
 8002296:	607b      	str	r3, [r7, #4]
 8002298:	e9d7 3400 	ldrd	r3, r4, [r7]
 800229c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 80022a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022a4:	00db      	lsls	r3, r3, #3
 80022a6:	4413      	add	r3, r2
 80022a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	441a      	add	r2, r3
 80022b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022b6:	00db      	lsls	r3, r3, #3
 80022b8:	4413      	add	r3, r2
 80022ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022be:	ea80 0402 	eor.w	r4, r0, r2
 80022c2:	61bc      	str	r4, [r7, #24]
 80022c4:	404b      	eors	r3, r1
 80022c6:	61fb      	str	r3, [r7, #28]
 80022c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80022d4:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 80022d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022dc:	00db      	lsls	r3, r3, #3
 80022de:	4413      	add	r3, r2
 80022e0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80022e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80022e6:	015a      	lsls	r2, r3, #5
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	441a      	add	r2, r3
 80022ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	4413      	add	r3, r2
 80022f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80022fa:	ea80 0602 	eor.w	r6, r0, r2
 80022fe:	613e      	str	r6, [r7, #16]
 8002300:	404b      	eors	r3, r1
 8002302:	617b      	str	r3, [r7, #20]
 8002304:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002308:	460b      	mov	r3, r1
 800230a:	4063      	eors	r3, r4
 800230c:	60bb      	str	r3, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	406b      	eors	r3, r5
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002316:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002318:	00db      	lsls	r3, r3, #3
 800231a:	4413      	add	r3, r2
 800231c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002320:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002326:	3301      	adds	r3, #1
 8002328:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800232a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800232c:	2b03      	cmp	r3, #3
 800232e:	d98d      	bls.n	800224c <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 8002330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002332:	3301      	adds	r3, #1
 8002334:	643b      	str	r3, [r7, #64]	@ 0x40
 8002336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002338:	2b03      	cmp	r3, #3
 800233a:	d983      	bls.n	8002244 <masked_and+0x54>
        }
    }
}
 800233c:	bf00      	nop
 800233e:	bf00      	nop
 8002340:	3748      	adds	r7, #72	@ 0x48
 8002342:	46bd      	mov	sp, r7
 8002344:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002348:	4770      	bx	lr

0800234a <masked_not>:


void masked_not(masked_uint64_t *dst, const masked_uint64_t *src) {
 800234a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800234e:	b092      	sub	sp, #72	@ 0x48
 8002350:	af00      	add	r7, sp, #0
 8002352:	61f8      	str	r0, [r7, #28]
 8002354:	61b9      	str	r1, [r7, #24]
    // Bitwise NOT of each share — safe for Boolean masking.
    for (size_t i = 0; i < MASKING_N; ++i)
 8002356:	2300      	movs	r3, #0
 8002358:	647b      	str	r3, [r7, #68]	@ 0x44
 800235a:	e012      	b.n	8002382 <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002360:	00db      	lsls	r3, r3, #3
 8002362:	4413      	add	r3, r2
 8002364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002368:	ea6f 0802 	mvn.w	r8, r2
 800236c:	ea6f 0903 	mvn.w	r9, r3
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	4413      	add	r3, r2
 8002378:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 800237c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800237e:	3301      	adds	r3, #1
 8002380:	647b      	str	r3, [r7, #68]	@ 0x44
 8002382:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002384:	2b03      	cmp	r3, #3
 8002386:	d9e9      	bls.n	800235c <masked_not+0x12>

    // Adjust one share so that the recombined NOT is correct.
    uint64_t orig_parity = 0, inv_parity = 0;
 8002388:	f04f 0200 	mov.w	r2, #0
 800238c:	f04f 0300 	mov.w	r3, #0
 8002390:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8002394:	f04f 0200 	mov.w	r2, #0
 8002398:	f04f 0300 	mov.w	r3, #0
 800239c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a4:	e024      	b.n	80023f0 <masked_not+0xa6>
        orig_parity ^= src->share[i];
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023aa:	00db      	lsls	r3, r3, #3
 80023ac:	4413      	add	r3, r2
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80023b6:	ea80 0602 	eor.w	r6, r0, r2
 80023ba:	613e      	str	r6, [r7, #16]
 80023bc:	404b      	eors	r3, r1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80023c4:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 80023c8:	69fa      	ldr	r2, [r7, #28]
 80023ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80023d8:	ea80 0602 	eor.w	r6, r0, r2
 80023dc:	60be      	str	r6, [r7, #8]
 80023de:	404b      	eors	r3, r1
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023e6:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 80023ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ec:	3301      	adds	r3, #1
 80023ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023f2:	2b03      	cmp	r3, #3
 80023f4:	d9d7      	bls.n	80023a6 <masked_not+0x5c>
    }
    uint64_t delta = inv_parity ^ ~orig_parity;
 80023f6:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80023fa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80023fe:	ea80 0402 	eor.w	r4, r0, r2
 8002402:	ea81 0503 	eor.w	r5, r1, r3
 8002406:	43e3      	mvns	r3, r4
 8002408:	603b      	str	r3, [r7, #0]
 800240a:	43eb      	mvns	r3, r5
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002412:	e9c7 3408 	strd	r3, r4, [r7, #32]
    dst->share[0] ^= delta;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	e9d3 0100 	ldrd	r0, r1, [r3]
 800241c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002420:	ea80 0a02 	eor.w	sl, r0, r2
 8002424:	ea81 0b03 	eor.w	fp, r1, r3
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	e9c3 ab00 	strd	sl, fp, [r3]
}
 800242e:	bf00      	nop
 8002430:	3748      	adds	r7, #72	@ 0x48
 8002432:	46bd      	mov	sp, r7
 8002434:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002438:	4770      	bx	lr

0800243a <masked_value_set>:
    out->share[0] = r0;
    out->share[1] = r1;
    out->share[2] = value ^ r0 ^ r1;
}
#elif MASKING_ORDER == 3
void masked_value_set(masked_uint64_t *out, uint64_t value) {
 800243a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800243e:	b08a      	sub	sp, #40	@ 0x28
 8002440:	af00      	add	r7, sp, #0
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t r0 = get_random64();
 8002448:	f7fe f8b0 	bl	80005ac <get_random64>
 800244c:	e9c7 0108 	strd	r0, r1, [r7, #32]
    uint64_t r1 = get_random64();
 8002450:	f7fe f8ac 	bl	80005ac <get_random64>
 8002454:	e9c7 0106 	strd	r0, r1, [r7, #24]
    uint64_t r2 = get_random64();
 8002458:	f7fe f8a8 	bl	80005ac <get_random64>
 800245c:	e9c7 0104 	strd	r0, r1, [r7, #16]
    out->share[0] = r0;
 8002460:	68f9      	ldr	r1, [r7, #12]
 8002462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002466:	e9c1 2300 	strd	r2, r3, [r1]
    out->share[1] = r1;
 800246a:	68f9      	ldr	r1, [r7, #12]
 800246c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002470:	e9c1 2302 	strd	r2, r3, [r1, #8]
    out->share[2] = r2;
 8002474:	68f9      	ldr	r1, [r7, #12]
 8002476:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800247a:	e9c1 2304 	strd	r2, r3, [r1, #16]
    out->share[3] = value ^ r0 ^ r1 ^ r2;
 800247e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002482:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002486:	ea80 0802 	eor.w	r8, r0, r2
 800248a:	ea81 0903 	eor.w	r9, r1, r3
 800248e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002492:	ea88 0402 	eor.w	r4, r8, r2
 8002496:	ea89 0503 	eor.w	r5, r9, r3
 800249a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800249e:	ea84 0a02 	eor.w	sl, r4, r2
 80024a2:	ea85 0b03 	eor.w	fp, r5, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	e9c3 ab06 	strd	sl, fp, [r3, #24]
}
 80024ac:	bf00      	nop
 80024ae:	3728      	adds	r7, #40	@ 0x28
 80024b0:	46bd      	mov	sp, r7
 80024b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080024b8 <masked_squeeze>:
 * @param output      Buffer to receive the output
 * @param output_len  Number of output bytes desired
 * @param state       5x5 masked state to squeeze from
 * @param rate        Sponge bitrate in bytes (e.g. 168 for SHAKE128)
 */
void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5], size_t rate) {
 80024b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80024bc:	b08d      	sub	sp, #52	@ 0x34
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
 80024c6:	603b      	str	r3, [r7, #0]
    size_t offset = 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 80024cc:	e076      	b.n	80025bc <masked_squeeze+0x104>
        // Pull up to ratebytes per round.
        // This maps each byte of the output to a specific lane+byte within the state.
        for (int i = 0; i < rate&& offset < output_len; i++) {
 80024ce:	2300      	movs	r3, #0
 80024d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024d2:	e064      	b.n	800259e <masked_squeeze+0xe6>
            size_t x = (i / 8) % 5;       // X coordinate in the 5×5 grid
 80024d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	da00      	bge.n	80024dc <masked_squeeze+0x24>
 80024da:	3307      	adds	r3, #7
 80024dc:	10db      	asrs	r3, r3, #3
 80024de:	4619      	mov	r1, r3
 80024e0:	4b3b      	ldr	r3, [pc, #236]	@ (80025d0 <masked_squeeze+0x118>)
 80024e2:	fb83 2301 	smull	r2, r3, r3, r1
 80024e6:	105a      	asrs	r2, r3, #1
 80024e8:	17cb      	asrs	r3, r1, #31
 80024ea:	1ad2      	subs	r2, r2, r3
 80024ec:	4613      	mov	r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4413      	add	r3, r2
 80024f2:	1aca      	subs	r2, r1, r3
 80024f4:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;       // Y coordinate in the 5×5 grid
 80024f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f8:	4a35      	ldr	r2, [pc, #212]	@ (80025d0 <masked_squeeze+0x118>)
 80024fa:	fb82 1203 	smull	r1, r2, r2, r3
 80024fe:	1112      	asrs	r2, r2, #4
 8002500:	17db      	asrs	r3, r3, #31
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;      // Byte index within the 64-bit lane
 8002506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002508:	425a      	negs	r2, r3
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	f002 0207 	and.w	r2, r2, #7
 8002512:	bf58      	it	pl
 8002514:	4253      	negpl	r3, r2
 8002516:	613b      	str	r3, [r7, #16]

            // === Recombine shares ===
            // Convert the masked lane back into a real value via XOR of all shares.
            uint64_t lane = 0;
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	f04f 0300 	mov.w	r3, #0
 8002520:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8002524:	2300      	movs	r3, #0
 8002526:	61fb      	str	r3, [r7, #28]
 8002528:	e01a      	b.n	8002560 <masked_squeeze+0xa8>
                lane ^= state[x][y].share[j];
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4613      	mov	r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	4413      	add	r3, r2
 8002532:	015b      	lsls	r3, r3, #5
 8002534:	461a      	mov	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	441a      	add	r2, r3
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	0099      	lsls	r1, r3, #2
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	440b      	add	r3, r1
 8002542:	00db      	lsls	r3, r3, #3
 8002544:	4413      	add	r3, r2
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800254e:	ea80 0802 	eor.w	r8, r0, r2
 8002552:	ea81 0903 	eor.w	r9, r1, r3
 8002556:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	3301      	adds	r3, #1
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	2b03      	cmp	r3, #3
 8002564:	dde1      	ble.n	800252a <masked_squeeze+0x72>
            }

            // Extract the correct byte from the lane.
            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	00d9      	lsls	r1, r3, #3
 800256a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800256e:	f1c1 0620 	rsb	r6, r1, #32
 8002572:	f1a1 0020 	sub.w	r0, r1, #32
 8002576:	fa22 f401 	lsr.w	r4, r2, r1
 800257a:	fa03 f606 	lsl.w	r6, r3, r6
 800257e:	4334      	orrs	r4, r6
 8002580:	fa23 f000 	lsr.w	r0, r3, r0
 8002584:	4304      	orrs	r4, r0
 8002586:	fa23 f501 	lsr.w	r5, r3, r1
 800258a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800258c:	1c5a      	adds	r2, r3, #1
 800258e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002590:	68fa      	ldr	r2, [r7, #12]
 8002592:	4413      	add	r3, r2
 8002594:	b2e2      	uxtb	r2, r4
 8002596:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < rate&& offset < output_len; i++) {
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	3301      	adds	r3, #1
 800259c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800259e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a0:	683a      	ldr	r2, [r7, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d903      	bls.n	80025ae <masked_squeeze+0xf6>
 80025a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d392      	bcc.n	80024d4 <masked_squeeze+0x1c>
        }

        // === If we need more output ===
        // Keccak is a sponge — we re-permute the state to squeeze more bytes out.
        if (offset < output_len) {
 80025ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	d202      	bcs.n	80025bc <masked_squeeze+0x104>
            masked_keccak_f1600(state);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fd1e 	bl	8002ff8 <masked_keccak_f1600>
    while (offset < output_len) {
 80025bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d384      	bcc.n	80024ce <masked_squeeze+0x16>
        }
    }
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop
 80025c8:	3734      	adds	r7, #52	@ 0x34
 80025ca:	46bd      	mov	sp, r7
 80025cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80025d0:	66666667 	.word	0x66666667

080025d4 <masked_theta>:
 * Apply the masked Theta step of Keccak.
 *
 * Theta mixes bits across columns using masked XORs to ensure diffusion.
 * Maintains share alignment (linear operation).
 */
void masked_theta(masked_uint64_t state[5][5]) {
 80025d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025d8:	b0e0      	sub	sp, #384	@ 0x180
 80025da:	af00      	add	r7, sp, #0
 80025dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80025e0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80025e4:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};  // Column parity
 80025e6:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80025ea:	22a0      	movs	r2, #160	@ 0xa0
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f00a f92c 	bl	800c84c <memset>
    masked_uint64_t D[5] = {0};  // Parity difference per column
 80025f4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80025f8:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80025fc:	4618      	mov	r0, r3
 80025fe:	23a0      	movs	r3, #160	@ 0xa0
 8002600:	461a      	mov	r2, r3
 8002602:	2100      	movs	r1, #0
 8002604:	f00a f922 	bl	800c84c <memset>

    // For each column, compute the parity across the 5 lanes.
    // We do this in masked space using XORs, which are safe.
    for (int x = 0; x < 5; x++) {
 8002608:	2300      	movs	r3, #0
 800260a:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 800260e:	e04f      	b.n	80026b0 <masked_theta+0xdc>
        C[x] = state[x][0];
 8002610:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	015b      	lsls	r3, r3, #5
 800261c:	461a      	mov	r2, r3
 800261e:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8002622:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	441a      	add	r2, r3
 800262a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800262e:	015b      	lsls	r3, r3, #5
 8002630:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002634:	f107 0108 	add.w	r1, r7, #8
 8002638:	440b      	add	r3, r1
 800263a:	3bd0      	subs	r3, #208	@ 0xd0
 800263c:	461c      	mov	r4, r3
 800263e:	4615      	mov	r5, r2
 8002640:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002642:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002644:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002648:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 800264c:	2301      	movs	r3, #1
 800264e:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8002652:	e024      	b.n	800269e <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 8002654:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8002658:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800265c:	015b      	lsls	r3, r3, #5
 800265e:	18d0      	adds	r0, r2, r3
 8002660:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8002664:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8002668:	015b      	lsls	r3, r3, #5
 800266a:	18d1      	adds	r1, r2, r3
 800266c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002670:	4613      	mov	r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4413      	add	r3, r2
 8002676:	015b      	lsls	r3, r3, #5
 8002678:	461a      	mov	r2, r3
 800267a:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800267e:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	441a      	add	r2, r3
 8002686:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800268a:	015b      	lsls	r3, r3, #5
 800268c:	4413      	add	r3, r2
 800268e:	461a      	mov	r2, r3
 8002690:	f7ff fd83 	bl	800219a <masked_xor>
        for (int y = 1; y < 5; y++) {
 8002694:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8002698:	3301      	adds	r3, #1
 800269a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800269e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80026a2:	2b04      	cmp	r3, #4
 80026a4:	ddd6      	ble.n	8002654 <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 80026a6:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80026aa:	3301      	adds	r3, #1
 80026ac:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80026b0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	ddab      	ble.n	8002610 <masked_theta+0x3c>
    }

    // Compute the D[x] value used to mix columns with each other.
    // Rotate C[x+1] by 1 bit before XORing with C[x-1].
    // This step spreads influence between adjacent columns.
    for (int x = 0; x < 5; x++) {
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80026be:	e06f      	b.n	80027a0 <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80026c6:	e062      	b.n	800278e <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 80026c8:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80026cc:	1c59      	adds	r1, r3, #1
 80026ce:	4b6d      	ldr	r3, [pc, #436]	@ (8002884 <masked_theta+0x2b0>)
 80026d0:	fb83 2301 	smull	r2, r3, r3, r1
 80026d4:	105a      	asrs	r2, r3, #1
 80026d6:	17cb      	asrs	r3, r1, #31
 80026d8:	1ad2      	subs	r2, r2, r3
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	1aca      	subs	r2, r1, r3
 80026e2:	0092      	lsls	r2, r2, #2
 80026e4:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80026e8:	4413      	add	r3, r2
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80026f0:	f107 0208 	add.w	r2, r7, #8
 80026f4:	4413      	add	r3, r2
 80026f6:	3bd0      	subs	r3, #208	@ 0xd0
 80026f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fc:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> 63);
 8002700:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002704:	0fda      	lsrs	r2, r3, #31
 8002706:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800270a:	005b      	lsls	r3, r3, #1
 800270c:	4313      	orrs	r3, r2
 800270e:	607b      	str	r3, [r7, #4]
 8002710:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002714:	0fda      	lsrs	r2, r3, #31
 8002716:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800271a:	005b      	lsls	r3, r3, #1
 800271c:	4313      	orrs	r3, r2
 800271e:	603b      	str	r3, [r7, #0]
 8002720:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002724:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 8002728:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800272c:	1d19      	adds	r1, r3, #4
 800272e:	4b55      	ldr	r3, [pc, #340]	@ (8002884 <masked_theta+0x2b0>)
 8002730:	fb83 2301 	smull	r2, r3, r3, r1
 8002734:	105a      	asrs	r2, r3, #1
 8002736:	17cb      	asrs	r3, r1, #31
 8002738:	1ad2      	subs	r2, r2, r3
 800273a:	4613      	mov	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	4413      	add	r3, r2
 8002740:	1aca      	subs	r2, r1, r3
 8002742:	0092      	lsls	r2, r2, #2
 8002744:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002748:	4413      	add	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8002750:	f107 0208 	add.w	r2, r7, #8
 8002754:	4413      	add	r3, r2
 8002756:	3bd0      	subs	r3, #208	@ 0xd0
 8002758:	e9d3 0100 	ldrd	r0, r1, [r3]
 800275c:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002760:	ea80 0a02 	eor.w	sl, r0, r2
 8002764:	ea81 0b03 	eor.w	fp, r1, r3
 8002768:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800276c:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8002770:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002774:	0099      	lsls	r1, r3, #2
 8002776:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800277a:	440b      	add	r3, r1
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8002784:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002788:	3301      	adds	r3, #1
 800278a:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 800278e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8002792:	2b03      	cmp	r3, #3
 8002794:	dd98      	ble.n	80026c8 <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 8002796:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800279a:	3301      	adds	r3, #1
 800279c:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80027a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80027a4:	2b04      	cmp	r3, #4
 80027a6:	dd8b      	ble.n	80026c0 <masked_theta+0xec>
        }
    }

    // Apply D[x] to every lane in each column to complete the mixing.
    for (int x = 0; x < 5; x++) {
 80027a8:	2300      	movs	r3, #0
 80027aa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80027ae:	e05e      	b.n	800286e <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80027b6:	e051      	b.n	800285c <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 80027b8:	2300      	movs	r3, #0
 80027ba:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80027be:	e044      	b.n	800284a <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 80027c0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80027c4:	4613      	mov	r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	4413      	add	r3, r2
 80027ca:	015b      	lsls	r3, r3, #5
 80027cc:	461a      	mov	r2, r3
 80027ce:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80027d2:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	441a      	add	r2, r3
 80027da:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80027de:	0099      	lsls	r1, r3, #2
 80027e0:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80027e4:	440b      	add	r3, r1
 80027e6:	00db      	lsls	r3, r3, #3
 80027e8:	4413      	add	r3, r2
 80027ea:	e9d3 4500 	ldrd	r4, r5, [r3]
 80027ee:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80027f2:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 80027f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80027fa:	0099      	lsls	r1, r3, #2
 80027fc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002800:	440b      	add	r3, r1
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	e9d3 0100 	ldrd	r0, r1, [r3]
 800280a:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800280e:	4613      	mov	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	015b      	lsls	r3, r3, #5
 8002816:	461a      	mov	r2, r3
 8002818:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800281c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	441a      	add	r2, r3
 8002824:	ea84 0800 	eor.w	r8, r4, r0
 8002828:	ea85 0901 	eor.w	r9, r5, r1
 800282c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002830:	0099      	lsls	r1, r3, #2
 8002832:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002836:	440b      	add	r3, r1
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8002840:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002844:	3301      	adds	r3, #1
 8002846:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800284a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800284e:	2b03      	cmp	r3, #3
 8002850:	ddb6      	ble.n	80027c0 <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 8002852:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002856:	3301      	adds	r3, #1
 8002858:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800285c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002860:	2b04      	cmp	r3, #4
 8002862:	dda9      	ble.n	80027b8 <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 8002864:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002868:	3301      	adds	r3, #1
 800286a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800286e:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002872:	2b04      	cmp	r3, #4
 8002874:	dd9c      	ble.n	80027b0 <masked_theta+0x1dc>
            }
        }
    }
}
 8002876:	bf00      	nop
 8002878:	bf00      	nop
 800287a:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 800287e:	46bd      	mov	sp, r7
 8002880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002884:	66666667 	.word	0x66666667

08002888 <masked_rho>:
 * Apply the masked Rho step of Keccak.
 *
 * Rho rotates each lane by a fixed constant offset (same across shares),
 * spreading bits to neighboring positions while preserving the mask structure.
 */
void masked_rho(masked_uint64_t state[5][5]) {
 8002888:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800288c:	b09a      	sub	sp, #104	@ 0x68
 800288e:	af00      	add	r7, sp, #0
 8002890:	6578      	str	r0, [r7, #84]	@ 0x54
    // Rho rotates each lane by a constant offset to scatter bits.
    // It’s important the same rotation is applied to every share
    // so the XOR mask relationship stays valid.
    for (int x = 0; x < 5; x++) {
 8002892:	2300      	movs	r3, #0
 8002894:	667b      	str	r3, [r7, #100]	@ 0x64
 8002896:	e16d      	b.n	8002b74 <masked_rho+0x2ec>
        for (int y = 0; y < 5; y++) {
 8002898:	2300      	movs	r3, #0
 800289a:	663b      	str	r3, [r7, #96]	@ 0x60
 800289c:	e163      	b.n	8002b66 <masked_rho+0x2de>
            uint8_t r = keccak_rho_offsets[x][y];
 800289e:	49bb      	ldr	r1, [pc, #748]	@ (8002b8c <masked_rho+0x304>)
 80028a0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80028a2:	4613      	mov	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	4413      	add	r3, r2
 80028a8:	18ca      	adds	r2, r1, r3
 80028aa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028ac:	4413      	add	r3, r2
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			#elif MASKING_N == 3
						state[x][y].share[0] = ROL64(state[x][y].share[0], r);
						state[x][y].share[1] = ROL64(state[x][y].share[1], r);
						state[x][y].share[2] = ROL64(state[x][y].share[2], r);
			#elif MASKING_N == 4
						state[x][y].share[0] = ROL64(state[x][y].share[0], r);
 80028b4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80028b6:	4613      	mov	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	015b      	lsls	r3, r3, #5
 80028be:	461a      	mov	r2, r3
 80028c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028c2:	441a      	add	r2, r3
 80028c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80028c6:	015b      	lsls	r3, r3, #5
 80028c8:	4413      	add	r3, r2
 80028ca:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028ce:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 80028d2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	015b      	lsls	r3, r3, #5
 80028dc:	461a      	mov	r2, r3
 80028de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e0:	eb03 0c02 	add.w	ip, r3, r2
 80028e4:	f1a4 0320 	sub.w	r3, r4, #32
 80028e8:	f1c4 0220 	rsb	r2, r4, #32
 80028ec:	fa01 f504 	lsl.w	r5, r1, r4
 80028f0:	63fd      	str	r5, [r7, #60]	@ 0x3c
 80028f2:	fa00 f303 	lsl.w	r3, r0, r3
 80028f6:	6bfd      	ldr	r5, [r7, #60]	@ 0x3c
 80028f8:	431d      	orrs	r5, r3
 80028fa:	63fd      	str	r5, [r7, #60]	@ 0x3c
 80028fc:	fa20 f202 	lsr.w	r2, r0, r2
 8002900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002902:	4313      	orrs	r3, r2
 8002904:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002906:	fa00 f304 	lsl.w	r3, r0, r4
 800290a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800290c:	4264      	negs	r4, r4
 800290e:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8002912:	f1c4 0320 	rsb	r3, r4, #32
 8002916:	f1a4 0220 	sub.w	r2, r4, #32
 800291a:	fa20 f804 	lsr.w	r8, r0, r4
 800291e:	fa01 f303 	lsl.w	r3, r1, r3
 8002922:	ea48 0803 	orr.w	r8, r8, r3
 8002926:	fa21 f202 	lsr.w	r2, r1, r2
 800292a:	ea48 0802 	orr.w	r8, r8, r2
 800292e:	fa21 f904 	lsr.w	r9, r1, r4
 8002932:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002936:	460b      	mov	r3, r1
 8002938:	ea43 0308 	orr.w	r3, r3, r8
 800293c:	61bb      	str	r3, [r7, #24]
 800293e:	4613      	mov	r3, r2
 8002940:	ea43 0309 	orr.w	r3, r3, r9
 8002944:	61fb      	str	r3, [r7, #28]
 8002946:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800294a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800294c:	015b      	lsls	r3, r3, #5
 800294e:	4463      	add	r3, ip
 8002950:	e9c3 8900 	strd	r8, r9, [r3]
						state[x][y].share[1] = ROL64(state[x][y].share[1], r);
 8002954:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002956:	4613      	mov	r3, r2
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4413      	add	r3, r2
 800295c:	015b      	lsls	r3, r3, #5
 800295e:	461a      	mov	r2, r3
 8002960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002962:	441a      	add	r2, r3
 8002964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002966:	015b      	lsls	r3, r3, #5
 8002968:	4413      	add	r3, r2
 800296a:	3308      	adds	r3, #8
 800296c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002970:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8002974:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002976:	4613      	mov	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	4413      	add	r3, r2
 800297c:	015b      	lsls	r3, r3, #5
 800297e:	461a      	mov	r2, r3
 8002980:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002982:	eb03 0c02 	add.w	ip, r3, r2
 8002986:	f1a4 0320 	sub.w	r3, r4, #32
 800298a:	f1c4 0220 	rsb	r2, r4, #32
 800298e:	fa01 f504 	lsl.w	r5, r1, r4
 8002992:	637d      	str	r5, [r7, #52]	@ 0x34
 8002994:	fa00 f303 	lsl.w	r3, r0, r3
 8002998:	6b7d      	ldr	r5, [r7, #52]	@ 0x34
 800299a:	431d      	orrs	r5, r3
 800299c:	637d      	str	r5, [r7, #52]	@ 0x34
 800299e:	fa20 f202 	lsr.w	r2, r0, r2
 80029a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029a4:	4313      	orrs	r3, r2
 80029a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80029a8:	fa00 f304 	lsl.w	r3, r0, r4
 80029ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80029ae:	4264      	negs	r4, r4
 80029b0:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80029b4:	f1c4 0320 	rsb	r3, r4, #32
 80029b8:	f1a4 0220 	sub.w	r2, r4, #32
 80029bc:	fa20 fa04 	lsr.w	sl, r0, r4
 80029c0:	fa01 f303 	lsl.w	r3, r1, r3
 80029c4:	ea4a 0a03 	orr.w	sl, sl, r3
 80029c8:	fa21 f202 	lsr.w	r2, r1, r2
 80029cc:	ea4a 0a02 	orr.w	sl, sl, r2
 80029d0:	fa21 fb04 	lsr.w	fp, r1, r4
 80029d4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80029d8:	460b      	mov	r3, r1
 80029da:	ea43 030a 	orr.w	r3, r3, sl
 80029de:	613b      	str	r3, [r7, #16]
 80029e0:	4613      	mov	r3, r2
 80029e2:	ea43 030b 	orr.w	r3, r3, fp
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80029ee:	015b      	lsls	r3, r3, #5
 80029f0:	4463      	add	r3, ip
 80029f2:	3308      	adds	r3, #8
 80029f4:	e9c3 ab00 	strd	sl, fp, [r3]
						state[x][y].share[2] = ROL64(state[x][y].share[2], r);
 80029f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80029fa:	4613      	mov	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4413      	add	r3, r2
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	461a      	mov	r2, r3
 8002a04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a06:	441a      	add	r2, r3
 8002a08:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a0a:	015b      	lsls	r3, r3, #5
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3310      	adds	r3, #16
 8002a10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a14:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8002a18:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	015b      	lsls	r3, r3, #5
 8002a22:	461a      	mov	r2, r3
 8002a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a26:	eb03 0c02 	add.w	ip, r3, r2
 8002a2a:	f1a4 0320 	sub.w	r3, r4, #32
 8002a2e:	f1c4 0220 	rsb	r2, r4, #32
 8002a32:	fa01 f504 	lsl.w	r5, r1, r4
 8002a36:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8002a38:	fa00 f303 	lsl.w	r3, r0, r3
 8002a3c:	6afd      	ldr	r5, [r7, #44]	@ 0x2c
 8002a3e:	431d      	orrs	r5, r3
 8002a40:	62fd      	str	r5, [r7, #44]	@ 0x2c
 8002a42:	fa20 f202 	lsr.w	r2, r0, r2
 8002a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a4c:	fa00 f304 	lsl.w	r3, r0, r4
 8002a50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a52:	4264      	negs	r4, r4
 8002a54:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8002a58:	f1c4 0320 	rsb	r3, r4, #32
 8002a5c:	f1a4 0220 	sub.w	r2, r4, #32
 8002a60:	fa20 f504 	lsr.w	r5, r0, r4
 8002a64:	64bd      	str	r5, [r7, #72]	@ 0x48
 8002a66:	fa01 f303 	lsl.w	r3, r1, r3
 8002a6a:	6cbd      	ldr	r5, [r7, #72]	@ 0x48
 8002a6c:	431d      	orrs	r5, r3
 8002a6e:	64bd      	str	r5, [r7, #72]	@ 0x48
 8002a70:	fa21 f202 	lsr.w	r2, r1, r2
 8002a74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a76:	4313      	orrs	r3, r2
 8002a78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002a7a:	fa21 f304 	lsr.w	r3, r1, r4
 8002a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002a80:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8002a84:	460b      	mov	r3, r1
 8002a86:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8002a8a:	4620      	mov	r0, r4
 8002a8c:	4303      	orrs	r3, r0
 8002a8e:	60bb      	str	r3, [r7, #8]
 8002a90:	4613      	mov	r3, r2
 8002a92:	462a      	mov	r2, r5
 8002a94:	4313      	orrs	r3, r2
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002a9c:	e9c7 1212 	strd	r1, r2, [r7, #72]	@ 0x48
 8002aa0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aa2:	015b      	lsls	r3, r3, #5
 8002aa4:	4463      	add	r3, ip
 8002aa6:	3310      	adds	r3, #16
 8002aa8:	e9c3 1200 	strd	r1, r2, [r3]
						state[x][y].share[3] = ROL64(state[x][y].share[3], r);
 8002aac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	015b      	lsls	r3, r3, #5
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aba:	441a      	add	r2, r3
 8002abc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002abe:	015b      	lsls	r3, r3, #5
 8002ac0:	4413      	add	r3, r2
 8002ac2:	3318      	adds	r3, #24
 8002ac4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ac8:	f897 405f 	ldrb.w	r4, [r7, #95]	@ 0x5f
 8002acc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	015b      	lsls	r3, r3, #5
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	eb03 0c02 	add.w	ip, r3, r2
 8002ade:	f1a4 0320 	sub.w	r3, r4, #32
 8002ae2:	f1c4 0220 	rsb	r2, r4, #32
 8002ae6:	fa01 f504 	lsl.w	r5, r1, r4
 8002aea:	627d      	str	r5, [r7, #36]	@ 0x24
 8002aec:	fa00 f303 	lsl.w	r3, r0, r3
 8002af0:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8002af2:	431d      	orrs	r5, r3
 8002af4:	627d      	str	r5, [r7, #36]	@ 0x24
 8002af6:	fa20 f202 	lsr.w	r2, r0, r2
 8002afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afc:	4313      	orrs	r3, r2
 8002afe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b00:	fa00 f304 	lsl.w	r3, r0, r4
 8002b04:	623b      	str	r3, [r7, #32]
 8002b06:	4264      	negs	r4, r4
 8002b08:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8002b0c:	f1c4 0320 	rsb	r3, r4, #32
 8002b10:	f1a4 0220 	sub.w	r2, r4, #32
 8002b14:	fa20 f504 	lsr.w	r5, r0, r4
 8002b18:	643d      	str	r5, [r7, #64]	@ 0x40
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8002b20:	431d      	orrs	r5, r3
 8002b22:	643d      	str	r5, [r7, #64]	@ 0x40
 8002b24:	fa21 f202 	lsr.w	r2, r1, r2
 8002b28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b2e:	fa21 f304 	lsr.w	r3, r1, r4
 8002b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b34:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002b38:	4623      	mov	r3, r4
 8002b3a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4313      	orrs	r3, r2
 8002b42:	603b      	str	r3, [r7, #0]
 8002b44:	460b      	mov	r3, r1
 8002b46:	462a      	mov	r2, r5
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	607b      	str	r3, [r7, #4]
 8002b4c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002b50:	e9c7 1210 	strd	r1, r2, [r7, #64]	@ 0x40
 8002b54:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b56:	015b      	lsls	r3, r3, #5
 8002b58:	4463      	add	r3, ip
 8002b5a:	3318      	adds	r3, #24
 8002b5c:	e9c3 1200 	strd	r1, r2, [r3]
        for (int y = 0; y < 5; y++) {
 8002b60:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b62:	3301      	adds	r3, #1
 8002b64:	663b      	str	r3, [r7, #96]	@ 0x60
 8002b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002b68:	2b04      	cmp	r3, #4
 8002b6a:	f77f ae98 	ble.w	800289e <masked_rho+0x16>
    for (int x = 0; x < 5; x++) {
 8002b6e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b70:	3301      	adds	r3, #1
 8002b72:	667b      	str	r3, [r7, #100]	@ 0x64
 8002b74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	f77f ae8e 	ble.w	8002898 <masked_rho+0x10>
							state[x][y].share[i] = ROL64(state[x][y].share[i], r);
						}
			#endif
        }
    }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3768      	adds	r7, #104	@ 0x68
 8002b82:	46bd      	mov	sp, r7
 8002b84:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	0800d730 	.word	0x0800d730

08002b90 <masked_pi>:
 * Apply the masked Pi step of Keccak.
 *
 * Pi rearranges lanes within the 5x5 grid using a predefined permutation.
 * All shares of a lane are moved together to preserve masking validity.
 */
void masked_pi(masked_uint64_t state[5][5]) {
 8002b90:	b4b0      	push	{r4, r5, r7}
 8002b92:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002b9c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002ba0:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    // Copy the full masked state first to keep original positions.
    for (int x = 0; x < 5; ++x)
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002ba8:	e038      	b.n	8002c1c <masked_pi+0x8c>
        for (int y = 0; y < 5; ++y)
 8002baa:	2300      	movs	r3, #0
 8002bac:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002bb0:	e02b      	b.n	8002c0a <masked_pi+0x7a>
            tmp[x][y] = state[x][y];
 8002bb2:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	4413      	add	r3, r2
 8002bbc:	015b      	lsls	r3, r3, #5
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002bc4:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	1899      	adds	r1, r3, r2
 8002bcc:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002bd0:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 8002bd4:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002bd8:	4613      	mov	r3, r2
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	4413      	add	r3, r2
 8002bde:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8002be2:	4413      	add	r3, r2
 8002be4:	015b      	lsls	r3, r3, #5
 8002be6:	18c2      	adds	r2, r0, r3
 8002be8:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002bec:	015b      	lsls	r3, r3, #5
 8002bee:	440b      	add	r3, r1
 8002bf0:	4614      	mov	r4, r2
 8002bf2:	461d      	mov	r5, r3
 8002bf4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002bf6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bf8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002bfc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8002c00:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002c04:	3301      	adds	r3, #1
 8002c06:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002c0a:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	ddcf      	ble.n	8002bb2 <masked_pi+0x22>
    for (int x = 0; x < 5; ++x)
 8002c12:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002c16:	3301      	adds	r3, #1
 8002c18:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002c1c:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	ddc2      	ble.n	8002baa <masked_pi+0x1a>

    // Pi permutes the positions of lanes across the 5x5 grid.
    // All shares must move together with their corresponding lane
    // to keep the mask relationships correct.
    for (int x = 0; x < 5; ++x)
 8002c24:	2300      	movs	r3, #0
 8002c26:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002c2a:	e051      	b.n	8002cd0 <masked_pi+0x140>
        for (int y = 0; y < 5; ++y) {
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8002c32:	e044      	b.n	8002cbe <masked_pi+0x12e>
            int new_x = y;
 8002c34:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002c38:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;
 8002c3c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002c40:	0059      	lsls	r1, r3, #1
 8002c42:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8002c46:	4613      	mov	r3, r2
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4413      	add	r3, r2
 8002c4c:	18ca      	adds	r2, r1, r3
 8002c4e:	4b26      	ldr	r3, [pc, #152]	@ (8002ce8 <masked_pi+0x158>)
 8002c50:	fb83 1302 	smull	r1, r3, r3, r2
 8002c54:	1059      	asrs	r1, r3, #1
 8002c56:	17d3      	asrs	r3, r2, #31
 8002c58:	1ac9      	subs	r1, r1, r3
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	1ad3      	subs	r3, r2, r3
 8002c62:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];
 8002c66:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	4413      	add	r3, r2
 8002c70:	015b      	lsls	r3, r3, #5
 8002c72:	461a      	mov	r2, r3
 8002c74:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002c78:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	441a      	add	r2, r3
 8002c80:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8002c84:	015b      	lsls	r3, r3, #5
 8002c86:	18d0      	adds	r0, r2, r3
 8002c88:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002c8c:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8002c90:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8002c94:	4613      	mov	r3, r2
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	4413      	add	r3, r2
 8002c9a:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8002c9e:	4413      	add	r3, r2
 8002ca0:	015b      	lsls	r3, r3, #5
 8002ca2:	440b      	add	r3, r1
 8002ca4:	4604      	mov	r4, r0
 8002ca6:	461d      	mov	r5, r3
 8002ca8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002caa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8002cb4:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8002cbe:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	ddb6      	ble.n	8002c34 <masked_pi+0xa4>
    for (int x = 0; x < 5; ++x)
 8002cc6:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002cca:	3301      	adds	r3, #1
 8002ccc:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002cd0:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002cd4:	2b04      	cmp	r3, #4
 8002cd6:	dda9      	ble.n	8002c2c <masked_pi+0x9c>
        }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bcb0      	pop	{r4, r5, r7}
 8002ce4:	4770      	bx	lr
 8002ce6:	bf00      	nop
 8002ce8:	66666667 	.word	0x66666667

08002cec <masked_chi>:


void masked_chi(masked_uint64_t out[5][5],
                const masked_uint64_t in[5][5],
                const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b09a      	sub	sp, #104	@ 0x68
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
    // Chi mixes bits in each row using a non-linear expression.
    // Since AND is not linear, it’s where leakage can happen — hence the use of
    // fresh randomness and secure masked AND gadgets.

    for (int y = 0; y < 5; y++) {
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cfc:	e070      	b.n	8002de0 <masked_chi+0xf4>
        for (int x = 0; x < 5; x++) {
 8002cfe:	2300      	movs	r3, #0
 8002d00:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d02:	e067      	b.n	8002dd4 <masked_chi+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8002d04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	015b      	lsls	r3, r3, #5
 8002d0e:	461a      	mov	r2, r3
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	441a      	add	r2, r3
 8002d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d16:	015b      	lsls	r3, r3, #5
 8002d18:	4413      	add	r3, r2
 8002d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8002d1c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	4b33      	ldr	r3, [pc, #204]	@ (8002df0 <masked_chi+0x104>)
 8002d22:	fb83 1302 	smull	r1, r3, r3, r2
 8002d26:	1059      	asrs	r1, r3, #1
 8002d28:	17d3      	asrs	r3, r2, #31
 8002d2a:	1ac9      	subs	r1, r1, r3
 8002d2c:	460b      	mov	r3, r1
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	1ad1      	subs	r1, r2, r3
 8002d34:	460a      	mov	r2, r1
 8002d36:	4613      	mov	r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	4413      	add	r3, r2
 8002d3c:	015b      	lsls	r3, r3, #5
 8002d3e:	461a      	mov	r2, r3
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	441a      	add	r2, r3
 8002d44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d46:	015b      	lsls	r3, r3, #5
 8002d48:	4413      	add	r3, r2
 8002d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8002d4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d4e:	1c9a      	adds	r2, r3, #2
 8002d50:	4b27      	ldr	r3, [pc, #156]	@ (8002df0 <masked_chi+0x104>)
 8002d52:	fb83 1302 	smull	r1, r3, r3, r2
 8002d56:	1059      	asrs	r1, r3, #1
 8002d58:	17d3      	asrs	r3, r2, #31
 8002d5a:	1ac9      	subs	r1, r1, r3
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	1ad1      	subs	r1, r2, r3
 8002d64:	460a      	mov	r2, r1
 8002d66:	4613      	mov	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	4413      	add	r3, r2
 8002d6c:	015b      	lsls	r3, r3, #5
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	441a      	add	r2, r3
 8002d74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d76:	015b      	lsls	r3, r3, #5
 8002d78:	4413      	add	r3, r2
 8002d7a:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff fae1 	bl	800234a <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 8002d88:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	01db      	lsls	r3, r3, #7
 8002d92:	461a      	mov	r2, r3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	441a      	add	r2, r3
 8002d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d9a:	01db      	lsls	r3, r3, #7
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f107 0110 	add.w	r1, r7, #16
 8002da2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8002da6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002da8:	f7ff fa22 	bl	80021f0 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 8002dac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002dae:	4613      	mov	r3, r2
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4413      	add	r3, r2
 8002db4:	015b      	lsls	r3, r3, #5
 8002db6:	461a      	mov	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	441a      	add	r2, r3
 8002dbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dbe:	015b      	lsls	r3, r3, #5
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8002dc6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff f9e6 	bl	800219a <masked_xor>
        for (int x = 0; x < 5; x++) {
 8002dce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd0:	3301      	adds	r3, #1
 8002dd2:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	dd94      	ble.n	8002d04 <masked_chi+0x18>
    for (int y = 0; y < 5; y++) {
 8002dda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002ddc:	3301      	adds	r3, #1
 8002dde:	667b      	str	r3, [r7, #100]	@ 0x64
 8002de0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	dd8b      	ble.n	8002cfe <masked_chi+0x12>
        }
    }
}
 8002de6:	bf00      	nop
 8002de8:	bf00      	nop
 8002dea:	3768      	adds	r7, #104	@ 0x68
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	66666667 	.word	0x66666667

08002df4 <masked_iota>:
 * Requires re-masking the result securely to maintain masking invariants.
 *
 * @param state Masked state to update
 * @param rc    Round constant for this permutation round
 */
void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8002df4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002df8:	b08c      	sub	sp, #48	@ 0x30
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	60f8      	str	r0, [r7, #12]
 8002dfe:	e9c7 2300 	strd	r2, r3, [r7]
    // Iota introduces asymmetry by injecting a round constant into lane (0,0).
    // This breaks symmetry and helps distinguish rounds.
    // Because we’re masking, we must re-mask the lane after applying the constant.

    // Step 1: Recombine to get the true value of the lane.
    uint64_t value = 0;
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	f04f 0300 	mov.w	r3, #0
 8002e0a:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8002e0e:	2300      	movs	r3, #0
 8002e10:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e12:	e010      	b.n	8002e36 <masked_iota+0x42>
        value ^= state[0][0].share[i];
 8002e14:	68fa      	ldr	r2, [r7, #12]
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e24:	ea80 0a02 	eor.w	sl, r0, r2
 8002e28:	ea81 0b03 	eor.w	fp, r1, r3
 8002e2c:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8002e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e32:	3301      	adds	r3, #1
 8002e34:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	ddeb      	ble.n	8002e14 <masked_iota+0x20>

    // Step 2: XOR in the round constant.
    value ^= rc;
 8002e3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002e44:	ea80 0802 	eor.w	r8, r0, r2
 8002e48:	ea81 0903 	eor.w	r9, r1, r3
 8002e4c:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // Step 3: Randomly re-mask it.
    uint64_t acc = value;
 8002e50:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e54:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8002e58:	2301      	movs	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	e01a      	b.n	8002e94 <masked_iota+0xa0>
        state[0][0].share[i] = get_random64();
 8002e5e:	f7fd fba5 	bl	80005ac <get_random64>
 8002e62:	4602      	mov	r2, r0
 8002e64:	460b      	mov	r3, r1
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	6979      	ldr	r1, [r7, #20]
 8002e6a:	00c9      	lsls	r1, r1, #3
 8002e6c:	4401      	add	r1, r0
 8002e6e:	e9c1 2300 	strd	r2, r3, [r1]
        acc ^= state[0][0].share[i];
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	4413      	add	r3, r2
 8002e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002e82:	ea80 0402 	eor.w	r4, r0, r2
 8002e86:	ea81 0503 	eor.w	r5, r1, r3
 8002e8a:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	3301      	adds	r3, #1
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	2b03      	cmp	r3, #3
 8002e98:	dde1      	ble.n	8002e5e <masked_iota+0x6a>
    }
    state[0][0].share[0] = acc;
 8002e9a:	68f9      	ldr	r1, [r7, #12]
 8002e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ea0:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002ea4:	bf00      	nop
 8002ea6:	3730      	adds	r7, #48	@ 0x30
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08002eae <masked_keccak_round>:
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
        }
    }
}

void masked_keccak_round(masked_uint64_t S[5][5], uint64_t rc) {
 8002eae:	b5b0      	push	{r4, r5, r7, lr}
 8002eb0:	f5ad 6d7c 	sub.w	sp, sp, #4032	@ 0xfc0
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	f507 617c 	add.w	r1, r7, #4032	@ 0xfc0
 8002eba:	f6a1 71b4 	subw	r1, r1, #4020	@ 0xfb4
 8002ebe:	6008      	str	r0, [r1, #0]
 8002ec0:	4639      	mov	r1, r7
 8002ec2:	e9c1 2300 	strd	r2, r3, [r1]

    // Theta mixes each column’s bits into its neighbors to spread information.
    // For masking, we need to preserve XOR relationships between shares here.
    masked_theta(S);
 8002ec6:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002eca:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002ece:	6818      	ldr	r0, [r3, #0]
 8002ed0:	f7ff fb80 	bl	80025d4 <masked_theta>

    // Rho rotates each lane by a fixed offset.
    // Since we’re masking, we have to apply the same rotation to every share.
    masked_rho(S);
 8002ed4:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002ed8:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002edc:	6818      	ldr	r0, [r3, #0]
 8002ede:	f7ff fcd3 	bl	8002888 <masked_rho>

    // Pi moves lanes around — it's a shuffle of the 5×5 grid.
    // All shares for each lane must move together to keep masking valid.
    masked_pi(S);
 8002ee2:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002ee6:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002eea:	6818      	ldr	r0, [r3, #0]
 8002eec:	f7ff fe50 	bl	8002b90 <masked_pi>

    // Chi is non-linear, and this is where leakage can happen — we need fresh randomness.
    // One matrix of random values per lane to feed into masked ANDs.
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8002ef6:	e020      	b.n	8002f3a <masked_keccak_round+0x8c>
        for (int x = 0; x < 5; ++x)
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8002efe:	e013      	b.n	8002f28 <masked_keccak_round+0x7a>
            fill_random_matrix(r_chi[x][y]);
 8002f00:	f507 714c 	add.w	r1, r7, #816	@ 0x330
 8002f04:	f8d7 2fb8 	ldr.w	r2, [r7, #4024]	@ 0xfb8
 8002f08:	4613      	mov	r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f8d7 2fbc 	ldr.w	r2, [r7, #4028]	@ 0xfbc
 8002f12:	4413      	add	r3, r2
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	440b      	add	r3, r1
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f7ff f8fb 	bl	8002114 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 8002f1e:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8002f22:	3301      	adds	r3, #1
 8002f24:	f8c7 3fb8 	str.w	r3, [r7, #4024]	@ 0xfb8
 8002f28:	f8d7 3fb8 	ldr.w	r3, [r7, #4024]	@ 0xfb8
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	dde7      	ble.n	8002f00 <masked_keccak_round+0x52>
    for (int y = 0; y < 5; ++y)
 8002f30:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8002f34:	3301      	adds	r3, #1
 8002f36:	f8c7 3fbc 	str.w	r3, [r7, #4028]	@ 0xfbc
 8002f3a:	f8d7 3fbc 	ldr.w	r3, [r7, #4028]	@ 0xfbc
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	ddda      	ble.n	8002ef8 <masked_keccak_round+0x4a>
    // We build a new state instead of modifying in place — safer and avoids weird bugs.
    masked_uint64_t chi_out[5][5];

    // Chi mixes rows using NOT and AND.
    // Because we’re masking, this step is the trickiest and needs careful randomness.
    masked_chi(chi_out, S, r_chi);
 8002f42:	f507 724c 	add.w	r2, r7, #816	@ 0x330
 8002f46:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002f4a:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002f4e:	f107 0010 	add.w	r0, r7, #16
 8002f52:	6819      	ldr	r1, [r3, #0]
 8002f54:	f7ff feca 	bl	8002cec <masked_chi>

    // Iota adds in the round constant — this breaks symmetry and keeps things unpredictable.
    // Only touch share[0] to avoid messing up the masking.
    masked_iota(chi_out, rc);
 8002f58:	463b      	mov	r3, r7
 8002f5a:	f107 0110 	add.w	r1, r7, #16
 8002f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f62:	4608      	mov	r0, r1
 8002f64:	f7ff ff46 	bl	8002df4 <masked_iota>

    // Move the updated state back into S so it's ready for the next round.
    for (int y = 0; y < 5; ++y)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8002f6e:	e038      	b.n	8002fe2 <masked_keccak_round+0x134>
        for (int x = 0; x < 5; ++x)
 8002f70:	2300      	movs	r3, #0
 8002f72:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8002f76:	e02b      	b.n	8002fd0 <masked_keccak_round+0x122>
            S[x][y] = chi_out[x][y];
 8002f78:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	015b      	lsls	r3, r3, #5
 8002f84:	461a      	mov	r2, r3
 8002f86:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002f8a:	f6a3 73b4 	subw	r3, r3, #4020	@ 0xfb4
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	441a      	add	r2, r3
 8002f92:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002f96:	015b      	lsls	r3, r3, #5
 8002f98:	18d0      	adds	r0, r2, r3
 8002f9a:	f507 637c 	add.w	r3, r7, #4032	@ 0xfc0
 8002f9e:	f5a3 617b 	sub.w	r1, r3, #4016	@ 0xfb0
 8002fa2:	f8d7 2fb0 	ldr.w	r2, [r7, #4016]	@ 0xfb0
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	f8d7 2fb4 	ldr.w	r2, [r7, #4020]	@ 0xfb4
 8002fb0:	4413      	add	r3, r2
 8002fb2:	015b      	lsls	r3, r3, #5
 8002fb4:	440b      	add	r3, r1
 8002fb6:	4604      	mov	r4, r0
 8002fb8:	461d      	mov	r5, r3
 8002fba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002fbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002fc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; ++x)
 8002fc6:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8002fca:	3301      	adds	r3, #1
 8002fcc:	f8c7 3fb0 	str.w	r3, [r7, #4016]	@ 0xfb0
 8002fd0:	f8d7 3fb0 	ldr.w	r3, [r7, #4016]	@ 0xfb0
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	ddcf      	ble.n	8002f78 <masked_keccak_round+0xca>
    for (int y = 0; y < 5; ++y)
 8002fd8:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f8c7 3fb4 	str.w	r3, [r7, #4020]	@ 0xfb4
 8002fe2:	f8d7 3fb4 	ldr.w	r3, [r7, #4020]	@ 0xfb4
 8002fe6:	2b04      	cmp	r3, #4
 8002fe8:	ddc2      	ble.n	8002f70 <masked_keccak_round+0xc2>
}
 8002fea:	bf00      	nop
 8002fec:	bf00      	nop
 8002fee:	f507 677c 	add.w	r7, r7, #4032	@ 0xfc0
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002ff8 <masked_keccak_f1600>:
 * Applies all 24 rounds of the Keccak permutation to the given masked state.
 * Each round applies the full sequence: Theta, Rho, Pi, Chi, Iota.
 *
 * state is the 5×5 masked Keccak state.
 */
void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < 24; i++) {
 8003000:	2300      	movs	r3, #0
 8003002:	60fb      	str	r3, [r7, #12]
 8003004:	e00b      	b.n	800301e <masked_keccak_f1600+0x26>
        masked_keccak_round(state, RC[i]);
 8003006:	4a0a      	ldr	r2, [pc, #40]	@ (8003030 <masked_keccak_f1600+0x38>)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	00db      	lsls	r3, r3, #3
 800300c:	4413      	add	r3, r2
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff ff4b 	bl	8002eae <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2b17      	cmp	r3, #23
 8003022:	ddf0      	ble.n	8003006 <masked_keccak_f1600+0xe>
    }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3710      	adds	r7, #16
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	0800d670 	.word	0x0800d670

08003034 <masked_keccak_sponge>:
#include "params.h"

// === Public API Implementations ===
void masked_keccak_sponge(uint8_t *output, size_t output_len,
                          const uint8_t *input, size_t input_len,
                          size_t rate, uint8_t domain_sep) {
 8003034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003038:	f5ad 7d75 	sub.w	sp, sp, #980	@ 0x3d4
 800303c:	af00      	add	r7, sp, #0
 800303e:	f507 7474 	add.w	r4, r7, #976	@ 0x3d0
 8003042:	f5a4 7467 	sub.w	r4, r4, #924	@ 0x39c
 8003046:	6020      	str	r0, [r4, #0]
 8003048:	f507 7074 	add.w	r0, r7, #976	@ 0x3d0
 800304c:	f5a0 7068 	sub.w	r0, r0, #928	@ 0x3a0
 8003050:	6001      	str	r1, [r0, #0]
 8003052:	f507 7174 	add.w	r1, r7, #976	@ 0x3d0
 8003056:	f5a1 7169 	sub.w	r1, r1, #932	@ 0x3a4
 800305a:	600a      	str	r2, [r1, #0]
 800305c:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 8003060:	f5a2 726a 	sub.w	r2, r2, #936	@ 0x3a8
 8003064:	6013      	str	r3, [r2, #0]
 8003066:	466b      	mov	r3, sp
 8003068:	461c      	mov	r4, r3
    masked_uint64_t state[5][5];

    //Step 1: Initialize state
    for (int x = 0; x < 5; x++) {
 800306a:	2300      	movs	r3, #0
 800306c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8003070:	e036      	b.n	80030e0 <masked_keccak_sponge+0xac>
        for (int y = 0; y < 5; y++) {
 8003072:	2300      	movs	r3, #0
 8003074:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 8003078:	e029      	b.n	80030ce <masked_keccak_sponge+0x9a>
            for (int i = 0; i < MASKING_N; i++) {
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8003080:	e01c      	b.n	80030bc <masked_keccak_sponge+0x88>
                state[x][y].share[i] = 0;
 8003082:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003086:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 800308a:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800308e:	461a      	mov	r2, r3
 8003090:	0092      	lsls	r2, r2, #2
 8003092:	441a      	add	r2, r3
 8003094:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8003098:	4413      	add	r3, r2
 800309a:	009a      	lsls	r2, r3, #2
 800309c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80030a0:	4413      	add	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4419      	add	r1, r3
 80030a6:	f04f 0200 	mov.w	r2, #0
 80030aa:	f04f 0300 	mov.w	r3, #0
 80030ae:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 80030b2:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80030b6:	3301      	adds	r3, #1
 80030b8:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80030bc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	ddde      	ble.n	8003082 <masked_keccak_sponge+0x4e>
        for (int y = 0; y < 5; y++) {
 80030c4:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80030c8:	3301      	adds	r3, #1
 80030ca:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 80030ce:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 80030d2:	2b04      	cmp	r3, #4
 80030d4:	ddd1      	ble.n	800307a <masked_keccak_sponge+0x46>
    for (int x = 0; x < 5; x++) {
 80030d6:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80030da:	3301      	adds	r3, #1
 80030dc:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80030e0:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 80030e4:	2b04      	cmp	r3, #4
 80030e6:	ddc4      	ble.n	8003072 <masked_keccak_sponge+0x3e>
            }
        }
    }

    //Step 2: Absorb full input blocks
    size_t offset = 0;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
    while (input_len >= rate) {
 80030ee:	e0b2      	b.n	8003256 <masked_keccak_sponge+0x222>
        for (int i = 0; i < rate; i += 8) {
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80030f6:	e08e      	b.n	8003216 <masked_keccak_sponge+0x1e2>
            uint64_t lane = 0;
 80030f8:	f04f 0200 	mov.w	r2, #0
 80030fc:	f04f 0300 	mov.w	r3, #0
 8003100:	e9c7 23ec 	strd	r2, r3, [r7, #944]	@ 0x3b0
            for (int j = 0; j < 8; j++) {
 8003104:	2300      	movs	r3, #0
 8003106:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 800310a:	e03a      	b.n	8003182 <masked_keccak_sponge+0x14e>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 800310c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8003110:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8003114:	441a      	add	r2, r3
 8003116:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 800311a:	441a      	add	r2, r3
 800311c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003120:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2200      	movs	r2, #0
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	627a      	str	r2, [r7, #36]	@ 0x24
 8003132:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8003136:	00d9      	lsls	r1, r3, #3
 8003138:	f1a1 0320 	sub.w	r3, r1, #32
 800313c:	f1c1 0220 	rsb	r2, r1, #32
 8003140:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003142:	fa00 fb01 	lsl.w	fp, r0, r1
 8003146:	6a38      	ldr	r0, [r7, #32]
 8003148:	fa00 f303 	lsl.w	r3, r0, r3
 800314c:	ea4b 0b03 	orr.w	fp, fp, r3
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	fa23 f202 	lsr.w	r2, r3, r2
 8003156:	ea4b 0b02 	orr.w	fp, fp, r2
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	fa03 fa01 	lsl.w	sl, r3, r1
 8003160:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 8003164:	ea42 010a 	orr.w	r1, r2, sl
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	ea43 030b 	orr.w	r3, r3, fp
 800316e:	60fb      	str	r3, [r7, #12]
 8003170:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003174:	e9c7 23ec 	strd	r2, r3, [r7, #944]	@ 0x3b0
            for (int j = 0; j < 8; j++) {
 8003178:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 800317c:	3301      	adds	r3, #1
 800317e:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8003182:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8003186:	2b07      	cmp	r3, #7
 8003188:	ddc0      	ble.n	800310c <masked_keccak_sponge+0xd8>
            }

            size_t x = (i / 8) % 5;
 800318a:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 800318e:	2b00      	cmp	r3, #0
 8003190:	da00      	bge.n	8003194 <masked_keccak_sponge+0x160>
 8003192:	3307      	adds	r3, #7
 8003194:	10db      	asrs	r3, r3, #3
 8003196:	4619      	mov	r1, r3
 8003198:	4bd7      	ldr	r3, [pc, #860]	@ (80034f8 <masked_keccak_sponge+0x4c4>)
 800319a:	fb83 2301 	smull	r2, r3, r3, r1
 800319e:	105a      	asrs	r2, r3, #1
 80031a0:	17cb      	asrs	r3, r1, #31
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	461a      	mov	r2, r3
 80031a6:	0092      	lsls	r2, r2, #2
 80031a8:	441a      	add	r2, r3
 80031aa:	1a8b      	subs	r3, r1, r2
 80031ac:	f8c7 3380 	str.w	r3, [r7, #896]	@ 0x380
            size_t y = (i / 8) / 5;
 80031b0:	f8d7 13bc 	ldr.w	r1, [r7, #956]	@ 0x3bc
 80031b4:	4bd0      	ldr	r3, [pc, #832]	@ (80034f8 <masked_keccak_sponge+0x4c4>)
 80031b6:	fb83 2301 	smull	r2, r3, r3, r1
 80031ba:	111a      	asrs	r2, r3, #4
 80031bc:	17cb      	asrs	r3, r1, #31
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c

            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 80031c4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80031c8:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 80031cc:	4608      	mov	r0, r1
 80031ce:	f7ff f934 	bl	800243a <masked_value_set>
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 80031d2:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80031d6:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80031da:	461a      	mov	r2, r3
 80031dc:	0092      	lsls	r2, r2, #2
 80031de:	441a      	add	r2, r3
 80031e0:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80031e4:	4413      	add	r3, r2
 80031e6:	015b      	lsls	r3, r3, #5
 80031e8:	18c8      	adds	r0, r1, r3
 80031ea:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 80031ee:	f8d7 3380 	ldr.w	r3, [r7, #896]	@ 0x380
 80031f2:	461a      	mov	r2, r3
 80031f4:	0092      	lsls	r2, r2, #2
 80031f6:	441a      	add	r2, r3
 80031f8:	f8d7 337c 	ldr.w	r3, [r7, #892]	@ 0x37c
 80031fc:	4413      	add	r3, r2
 80031fe:	015b      	lsls	r3, r3, #5
 8003200:	4419      	add	r1, r3
 8003202:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8003206:	461a      	mov	r2, r3
 8003208:	f7fe ffc7 	bl	800219a <masked_xor>
        for (int i = 0; i < rate; i += 8) {
 800320c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8003210:	3308      	adds	r3, #8
 8003212:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8003216:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 800321a:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 800321e:	4293      	cmp	r3, r2
 8003220:	f63f af6a 	bhi.w	80030f8 <masked_keccak_sponge+0xc4>
        }

        masked_keccak_f1600(state);
 8003224:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff fee5 	bl	8002ff8 <masked_keccak_f1600>
        offset += rate;
 800322e:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8003232:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8003236:	4413      	add	r3, r2
 8003238:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
        input_len -= rate;
 800323c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003240:	f5a3 716a 	sub.w	r1, r3, #936	@ 0x3a8
 8003244:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003248:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8003252:	1ad3      	subs	r3, r2, r3
 8003254:	600b      	str	r3, [r1, #0]
    while (input_len >= rate) {
 8003256:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 800325a:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8003264:	429a      	cmp	r2, r3
 8003266:	f4bf af43 	bcs.w	80030f0 <masked_keccak_sponge+0xbc>
    }

    //Step 3: Final padded block with domain separation
    uint8_t block[rate];
 800326a:	f8d7 13f8 	ldr.w	r1, [r7, #1016]	@ 0x3f8
 800326e:	460b      	mov	r3, r1
 8003270:	3b01      	subs	r3, #1
 8003272:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8003276:	2300      	movs	r3, #0
 8003278:	61b9      	str	r1, [r7, #24]
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	f04f 0200 	mov.w	r2, #0
 8003280:	f04f 0300 	mov.w	r3, #0
 8003284:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003288:	4658      	mov	r0, fp
 800328a:	00c3      	lsls	r3, r0, #3
 800328c:	4650      	mov	r0, sl
 800328e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8003292:	4650      	mov	r0, sl
 8003294:	00c2      	lsls	r2, r0, #3
 8003296:	2300      	movs	r3, #0
 8003298:	6139      	str	r1, [r7, #16]
 800329a:	617b      	str	r3, [r7, #20]
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80032a8:	4658      	mov	r0, fp
 80032aa:	00c3      	lsls	r3, r0, #3
 80032ac:	4650      	mov	r0, sl
 80032ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80032b2:	4650      	mov	r0, sl
 80032b4:	00c2      	lsls	r2, r0, #3
 80032b6:	1dcb      	adds	r3, r1, #7
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	ebad 0d03 	sub.w	sp, sp, r3
 80032c0:	466b      	mov	r3, sp
 80032c2:	3300      	adds	r3, #0
 80032c4:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
    for (size_t i = 0; i < rate; ++i) {
 80032c8:	2300      	movs	r3, #0
 80032ca:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 80032ce:	e00b      	b.n	80032e8 <masked_keccak_sponge+0x2b4>
        block[i] = 0;
 80032d0:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80032d4:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80032d8:	4413      	add	r3, r2
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < rate; ++i) {
 80032de:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 80032e2:	3301      	adds	r3, #1
 80032e4:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 80032e8:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 80032ec:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d3ed      	bcc.n	80032d0 <masked_keccak_sponge+0x29c>
    }

    for (size_t i = 0; i < input_len; ++i) {
 80032f4:	2300      	movs	r3, #0
 80032f6:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80032fa:	e017      	b.n	800332c <masked_keccak_sponge+0x2f8>
        block[i] = input[offset + i];
 80032fc:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 8003300:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8003304:	4413      	add	r3, r2
 8003306:	f507 7274 	add.w	r2, r7, #976	@ 0x3d0
 800330a:	f5a2 7269 	sub.w	r2, r2, #932	@ 0x3a4
 800330e:	6812      	ldr	r2, [r2, #0]
 8003310:	4413      	add	r3, r2
 8003312:	7819      	ldrb	r1, [r3, #0]
 8003314:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8003318:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 800331c:	4413      	add	r3, r2
 800331e:	460a      	mov	r2, r1
 8003320:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input_len; ++i) {
 8003322:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8003326:	3301      	adds	r3, #1
 8003328:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 800332c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003330:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8003334:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	429a      	cmp	r2, r3
 800333c:	d3de      	bcc.n	80032fc <masked_keccak_sponge+0x2c8>
    }

    block[input_len] ^= domain_sep;   // Domain separation marker (e.g., 0x06 or 0x1F)
 800333e:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8003342:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003346:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4413      	add	r3, r2
 800334e:	781a      	ldrb	r2, [r3, #0]
 8003350:	f897 33fc 	ldrb.w	r3, [r7, #1020]	@ 0x3fc
 8003354:	4053      	eors	r3, r2
 8003356:	b2d9      	uxtb	r1, r3
 8003358:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 800335c:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 8003360:	f5a3 736a 	sub.w	r3, r3, #936	@ 0x3a8
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4413      	add	r3, r2
 8003368:	460a      	mov	r2, r1
 800336a:	701a      	strb	r2, [r3, #0]
    block[rate - 1] ^= 0x80;          // Padding rule per Keccak spec
 800336c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8003370:	3b01      	subs	r3, #1
 8003372:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8003376:	5cd3      	ldrb	r3, [r2, r3]
 8003378:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 800337c:	3a01      	subs	r2, #1
 800337e:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 8003382:	43db      	mvns	r3, r3
 8003384:	b2d9      	uxtb	r1, r3
 8003386:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 800338a:	5499      	strb	r1, [r3, r2]

    for (int i = 0; i < rate; i += 8) {
 800338c:	2300      	movs	r3, #0
 800338e:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8003392:	e08d      	b.n	80034b0 <masked_keccak_sponge+0x47c>
        uint64_t lane = 0;
 8003394:	f04f 0200 	mov.w	r2, #0
 8003398:	f04f 0300 	mov.w	r3, #0
 800339c:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80033a6:	e02f      	b.n	8003408 <masked_keccak_sponge+0x3d4>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 80033a8:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 80033ac:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80033b0:	4413      	add	r3, r2
 80033b2:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 80033b6:	5cd3      	ldrb	r3, [r2, r3]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	2200      	movs	r2, #0
 80033bc:	461d      	mov	r5, r3
 80033be:	4616      	mov	r6, r2
 80033c0:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 80033c4:	00db      	lsls	r3, r3, #3
 80033c6:	f1a3 0120 	sub.w	r1, r3, #32
 80033ca:	f1c3 0220 	rsb	r2, r3, #32
 80033ce:	fa06 f903 	lsl.w	r9, r6, r3
 80033d2:	fa05 f101 	lsl.w	r1, r5, r1
 80033d6:	ea49 0901 	orr.w	r9, r9, r1
 80033da:	fa25 f202 	lsr.w	r2, r5, r2
 80033de:	ea49 0902 	orr.w	r9, r9, r2
 80033e2:	fa05 f803 	lsl.w	r8, r5, r3
 80033e6:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 80033ea:	ea42 0108 	orr.w	r1, r2, r8
 80033ee:	6039      	str	r1, [r7, #0]
 80033f0:	ea43 0309 	orr.w	r3, r3, r9
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033fa:	e9c7 23e6 	strd	r2, r3, [r7, #920]	@ 0x398
        for (int j = 0; j < 8 && (i + j) < rate; j++) {
 80033fe:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8003402:	3301      	adds	r3, #1
 8003404:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8003408:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 800340c:	2b07      	cmp	r3, #7
 800340e:	dc09      	bgt.n	8003424 <masked_keccak_sponge+0x3f0>
 8003410:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8003414:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8003418:	4413      	add	r3, r2
 800341a:	461a      	mov	r2, r3
 800341c:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 8003420:	4293      	cmp	r3, r2
 8003422:	d8c1      	bhi.n	80033a8 <masked_keccak_sponge+0x374>
        }

        size_t x = (i / 8) % 5;
 8003424:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8003428:	2b00      	cmp	r3, #0
 800342a:	da00      	bge.n	800342e <masked_keccak_sponge+0x3fa>
 800342c:	3307      	adds	r3, #7
 800342e:	10db      	asrs	r3, r3, #3
 8003430:	4619      	mov	r1, r3
 8003432:	4b31      	ldr	r3, [pc, #196]	@ (80034f8 <masked_keccak_sponge+0x4c4>)
 8003434:	fb83 2301 	smull	r2, r3, r3, r1
 8003438:	105a      	asrs	r2, r3, #1
 800343a:	17cb      	asrs	r3, r1, #31
 800343c:	1ad2      	subs	r2, r2, r3
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	1aca      	subs	r2, r1, r3
 8003446:	f8c7 2388 	str.w	r2, [r7, #904]	@ 0x388
        size_t y = (i / 8) / 5;
 800344a:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 800344e:	4a2a      	ldr	r2, [pc, #168]	@ (80034f8 <masked_keccak_sponge+0x4c4>)
 8003450:	fb82 1203 	smull	r1, r2, r2, r3
 8003454:	1112      	asrs	r2, r2, #4
 8003456:	17db      	asrs	r3, r3, #31
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 800345e:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8003462:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 8003466:	4608      	mov	r0, r1
 8003468:	f7fe ffe7 	bl	800243a <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 800346c:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003470:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8003474:	4613      	mov	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	4413      	add	r3, r2
 800347a:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 800347e:	4413      	add	r3, r2
 8003480:	015b      	lsls	r3, r3, #5
 8003482:	18c8      	adds	r0, r1, r3
 8003484:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8003488:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 800348c:	4613      	mov	r3, r2
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	4413      	add	r3, r2
 8003492:	f8d7 2384 	ldr.w	r2, [r7, #900]	@ 0x384
 8003496:	4413      	add	r3, r2
 8003498:	015b      	lsls	r3, r3, #5
 800349a:	440b      	add	r3, r1
 800349c:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80034a0:	4619      	mov	r1, r3
 80034a2:	f7fe fe7a 	bl	800219a <masked_xor>
    for (int i = 0; i < rate; i += 8) {
 80034a6:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80034aa:	3308      	adds	r3, #8
 80034ac:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 80034b0:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 80034b4:	f8d7 23f8 	ldr.w	r2, [r7, #1016]	@ 0x3f8
 80034b8:	429a      	cmp	r2, r3
 80034ba:	f63f af6b 	bhi.w	8003394 <masked_keccak_sponge+0x360>
    }

    masked_keccak_f1600(state);
 80034be:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7ff fd98 	bl	8002ff8 <masked_keccak_f1600>

    //Step 4: Squeeze the requested output
    masked_squeeze(output, output_len, state, rate);
 80034c8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80034cc:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80034d0:	f5a3 7168 	sub.w	r1, r3, #928	@ 0x3a0
 80034d4:	f507 7374 	add.w	r3, r7, #976	@ 0x3d0
 80034d8:	f5a3 7067 	sub.w	r0, r3, #924	@ 0x39c
 80034dc:	f8d7 33f8 	ldr.w	r3, [r7, #1016]	@ 0x3f8
 80034e0:	6809      	ldr	r1, [r1, #0]
 80034e2:	6800      	ldr	r0, [r0, #0]
 80034e4:	f7fe ffe8 	bl	80024b8 <masked_squeeze>
 80034e8:	46a5      	mov	sp, r4
}
 80034ea:	bf00      	nop
 80034ec:	f507 7775 	add.w	r7, r7, #980	@ 0x3d4
 80034f0:	46bd      	mov	sp, r7
 80034f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034f6:	bf00      	nop
 80034f8:	66666667 	.word	0x66666667

080034fc <masked_sha3_224>:


// SHA3-224: 28-byte output, 1152-bit rate
void masked_sha3_224(uint8_t *output, const uint8_t *input, size_t input_len) {
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af02      	add	r7, sp, #8
 8003502:	60f8      	str	r0, [r7, #12]
 8003504:	60b9      	str	r1, [r7, #8]
 8003506:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 28, input, input_len, 1152 / 8, DOMAIN_SHA3);
 8003508:	2306      	movs	r3, #6
 800350a:	9301      	str	r3, [sp, #4]
 800350c:	2390      	movs	r3, #144	@ 0x90
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	211c      	movs	r1, #28
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f7ff fd8c 	bl	8003034 <masked_keccak_sponge>
}
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <masked_sha3_256>:

// SHA3-256: Output = 32 bytes, Rate = 136 bytes (1088 bits)
void masked_sha3_256(uint8_t *output, const uint8_t *input, size_t input_len) {
 8003524:	b580      	push	{r7, lr}
 8003526:	b086      	sub	sp, #24
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 32, input, input_len, 136, DOMAIN_SHA3);
 8003530:	2306      	movs	r3, #6
 8003532:	9301      	str	r3, [sp, #4]
 8003534:	2388      	movs	r3, #136	@ 0x88
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	2120      	movs	r1, #32
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f7ff fd78 	bl	8003034 <masked_keccak_sponge>
}
 8003544:	bf00      	nop
 8003546:	3710      	adds	r7, #16
 8003548:	46bd      	mov	sp, r7
 800354a:	bd80      	pop	{r7, pc}

0800354c <masked_sha3_384>:
    }
}


// SHA3-384: 48-byte output, 832-bit rate
void masked_sha3_384(uint8_t *output, const uint8_t *input, size_t input_len) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af02      	add	r7, sp, #8
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 48, input, input_len, 832 / 8, DOMAIN_SHA3);
 8003558:	2306      	movs	r3, #6
 800355a:	9301      	str	r3, [sp, #4]
 800355c:	2368      	movs	r3, #104	@ 0x68
 800355e:	9300      	str	r3, [sp, #0]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	2130      	movs	r1, #48	@ 0x30
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f7ff fd64 	bl	8003034 <masked_keccak_sponge>
}
 800356c:	bf00      	nop
 800356e:	3710      	adds	r7, #16
 8003570:	46bd      	mov	sp, r7
 8003572:	bd80      	pop	{r7, pc}

08003574 <masked_sha3_512>:

// SHA3-512: Output = 64 bytes, Rate = 72 bytes (576 bits)
void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
    masked_keccak_sponge(output, 64, input, input_len, 72, DOMAIN_SHA3);
 8003580:	2306      	movs	r3, #6
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	2348      	movs	r3, #72	@ 0x48
 8003586:	9300      	str	r3, [sp, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	2140      	movs	r1, #64	@ 0x40
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f7ff fd50 	bl	8003034 <masked_keccak_sponge>
}
 8003594:	bf00      	nop
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	4b10      	ldr	r3, [pc, #64]	@ (80035e8 <HAL_MspInit+0x4c>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	4a0f      	ldr	r2, [pc, #60]	@ (80035e8 <HAL_MspInit+0x4c>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <HAL_MspInit+0x4c>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035be:	2300      	movs	r3, #0
 80035c0:	603b      	str	r3, [r7, #0]
 80035c2:	4b09      	ldr	r3, [pc, #36]	@ (80035e8 <HAL_MspInit+0x4c>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035c6:	4a08      	ldr	r2, [pc, #32]	@ (80035e8 <HAL_MspInit+0x4c>)
 80035c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035ce:	4b06      	ldr	r3, [pc, #24]	@ (80035e8 <HAL_MspInit+0x4c>)
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035d6:	603b      	str	r3, [r7, #0]
 80035d8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80035da:	2007      	movs	r0, #7
 80035dc:	f000 fc94 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	40023800 	.word	0x40023800

080035ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035f4:	f107 0314 	add.w	r3, r7, #20
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	609a      	str	r2, [r3, #8]
 8003600:	60da      	str	r2, [r3, #12]
 8003602:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a19      	ldr	r2, [pc, #100]	@ (8003670 <HAL_I2C_MspInit+0x84>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d12c      	bne.n	8003668 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
 8003612:	4b18      	ldr	r3, [pc, #96]	@ (8003674 <HAL_I2C_MspInit+0x88>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003616:	4a17      	ldr	r2, [pc, #92]	@ (8003674 <HAL_I2C_MspInit+0x88>)
 8003618:	f043 0302 	orr.w	r3, r3, #2
 800361c:	6313      	str	r3, [r2, #48]	@ 0x30
 800361e:	4b15      	ldr	r3, [pc, #84]	@ (8003674 <HAL_I2C_MspInit+0x88>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003622:	f003 0302 	and.w	r3, r3, #2
 8003626:	613b      	str	r3, [r7, #16]
 8003628:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800362a:	f44f 7310 	mov.w	r3, #576	@ 0x240
 800362e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003630:	2312      	movs	r3, #18
 8003632:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003634:	2301      	movs	r3, #1
 8003636:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003638:	2300      	movs	r3, #0
 800363a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800363c:	2304      	movs	r3, #4
 800363e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003640:	f107 0314 	add.w	r3, r7, #20
 8003644:	4619      	mov	r1, r3
 8003646:	480c      	ldr	r0, [pc, #48]	@ (8003678 <HAL_I2C_MspInit+0x8c>)
 8003648:	f000 fca0 	bl	8003f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800364c:	2300      	movs	r3, #0
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	4b08      	ldr	r3, [pc, #32]	@ (8003674 <HAL_I2C_MspInit+0x88>)
 8003652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003654:	4a07      	ldr	r2, [pc, #28]	@ (8003674 <HAL_I2C_MspInit+0x88>)
 8003656:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800365a:	6413      	str	r3, [r2, #64]	@ 0x40
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <HAL_I2C_MspInit+0x88>)
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003668:	bf00      	nop
 800366a:	3728      	adds	r7, #40	@ 0x28
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	40005400 	.word	0x40005400
 8003674:	40023800 	.word	0x40023800
 8003678:	40020400 	.word	0x40020400

0800367c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	@ 0x38
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003684:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003688:	2200      	movs	r2, #0
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	605a      	str	r2, [r3, #4]
 800368e:	609a      	str	r2, [r3, #8]
 8003690:	60da      	str	r2, [r3, #12]
 8003692:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003694:	f107 0314 	add.w	r3, r7, #20
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a31      	ldr	r2, [pc, #196]	@ (800376c <HAL_I2S_MspInit+0xf0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d15a      	bne.n	8003762 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80036ac:	2301      	movs	r3, #1
 80036ae:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80036b0:	23c0      	movs	r3, #192	@ 0xc0
 80036b2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80036b4:	2302      	movs	r3, #2
 80036b6:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036b8:	f107 0314 	add.w	r3, r7, #20
 80036bc:	4618      	mov	r0, r3
 80036be:	f004 f9cb 	bl	8007a58 <HAL_RCCEx_PeriphCLKConfig>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80036c8:	f7fe fd1e 	bl	8002108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80036cc:	2300      	movs	r3, #0
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 80036d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d4:	4a26      	ldr	r2, [pc, #152]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 80036d6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036da:	6413      	str	r3, [r2, #64]	@ 0x40
 80036dc:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 80036de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036e8:	2300      	movs	r3, #0
 80036ea:	60fb      	str	r3, [r7, #12]
 80036ec:	4b20      	ldr	r3, [pc, #128]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 80036ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 80036f2:	f043 0301 	orr.w	r3, r3, #1
 80036f6:	6313      	str	r3, [r2, #48]	@ 0x30
 80036f8:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 80036fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	60fb      	str	r3, [r7, #12]
 8003702:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003704:	2300      	movs	r3, #0
 8003706:	60bb      	str	r3, [r7, #8]
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 800370a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800370c:	4a18      	ldr	r2, [pc, #96]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 800370e:	f043 0304 	orr.w	r3, r3, #4
 8003712:	6313      	str	r3, [r2, #48]	@ 0x30
 8003714:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_I2S_MspInit+0xf4>)
 8003716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003718:	f003 0304 	and.w	r3, r3, #4
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003720:	2310      	movs	r3, #16
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003724:	2302      	movs	r3, #2
 8003726:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003728:	2300      	movs	r3, #0
 800372a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800372c:	2300      	movs	r3, #0
 800372e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003730:	2306      	movs	r3, #6
 8003732:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003734:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003738:	4619      	mov	r1, r3
 800373a:	480e      	ldr	r0, [pc, #56]	@ (8003774 <HAL_I2S_MspInit+0xf8>)
 800373c:	f000 fc26 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003740:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003746:	2302      	movs	r3, #2
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800374a:	2300      	movs	r3, #0
 800374c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374e:	2300      	movs	r3, #0
 8003750:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003752:	2306      	movs	r3, #6
 8003754:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003756:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800375a:	4619      	mov	r1, r3
 800375c:	4806      	ldr	r0, [pc, #24]	@ (8003778 <HAL_I2S_MspInit+0xfc>)
 800375e:	f000 fc15 	bl	8003f8c <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8003762:	bf00      	nop
 8003764:	3738      	adds	r7, #56	@ 0x38
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	40003c00 	.word	0x40003c00
 8003770:	40023800 	.word	0x40023800
 8003774:	40020000 	.word	0x40020000
 8003778:	40020800 	.word	0x40020800

0800377c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800377c:	b480      	push	{r7}
 800377e:	b085      	sub	sp, #20
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a0b      	ldr	r2, [pc, #44]	@ (80037b8 <HAL_RNG_MspInit+0x3c>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d10d      	bne.n	80037aa <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	4b0a      	ldr	r3, [pc, #40]	@ (80037bc <HAL_RNG_MspInit+0x40>)
 8003794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003796:	4a09      	ldr	r2, [pc, #36]	@ (80037bc <HAL_RNG_MspInit+0x40>)
 8003798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800379c:	6353      	str	r3, [r2, #52]	@ 0x34
 800379e:	4b07      	ldr	r3, [pc, #28]	@ (80037bc <HAL_RNG_MspInit+0x40>)
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037a6:	60fb      	str	r3, [r7, #12]
 80037a8:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	50060800 	.word	0x50060800
 80037bc:	40023800 	.word	0x40023800

080037c0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	@ 0x28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]
 80037d4:	60da      	str	r2, [r3, #12]
 80037d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a19      	ldr	r2, [pc, #100]	@ (8003844 <HAL_SPI_MspInit+0x84>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d12b      	bne.n	800383a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
 80037e6:	4b18      	ldr	r3, [pc, #96]	@ (8003848 <HAL_SPI_MspInit+0x88>)
 80037e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ea:	4a17      	ldr	r2, [pc, #92]	@ (8003848 <HAL_SPI_MspInit+0x88>)
 80037ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80037f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80037f2:	4b15      	ldr	r3, [pc, #84]	@ (8003848 <HAL_SPI_MspInit+0x88>)
 80037f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80037fa:	613b      	str	r3, [r7, #16]
 80037fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037fe:	2300      	movs	r3, #0
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b11      	ldr	r3, [pc, #68]	@ (8003848 <HAL_SPI_MspInit+0x88>)
 8003804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003806:	4a10      	ldr	r2, [pc, #64]	@ (8003848 <HAL_SPI_MspInit+0x88>)
 8003808:	f043 0301 	orr.w	r3, r3, #1
 800380c:	6313      	str	r3, [r2, #48]	@ 0x30
 800380e:	4b0e      	ldr	r3, [pc, #56]	@ (8003848 <HAL_SPI_MspInit+0x88>)
 8003810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	60fb      	str	r3, [r7, #12]
 8003818:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800381a:	23e0      	movs	r3, #224	@ 0xe0
 800381c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800381e:	2302      	movs	r3, #2
 8003820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003822:	2300      	movs	r3, #0
 8003824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003826:	2300      	movs	r3, #0
 8003828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800382a:	2305      	movs	r3, #5
 800382c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800382e:	f107 0314 	add.w	r3, r7, #20
 8003832:	4619      	mov	r1, r3
 8003834:	4805      	ldr	r0, [pc, #20]	@ (800384c <HAL_SPI_MspInit+0x8c>)
 8003836:	f000 fba9 	bl	8003f8c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800383a:	bf00      	nop
 800383c:	3728      	adds	r7, #40	@ 0x28
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
 8003842:	bf00      	nop
 8003844:	40013000 	.word	0x40013000
 8003848:	40023800 	.word	0x40023800
 800384c:	40020000 	.word	0x40020000

08003850 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b08a      	sub	sp, #40	@ 0x28
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003858:	f107 0314 	add.w	r3, r7, #20
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	605a      	str	r2, [r3, #4]
 8003862:	609a      	str	r2, [r3, #8]
 8003864:	60da      	str	r2, [r3, #12]
 8003866:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a19      	ldr	r2, [pc, #100]	@ (80038d4 <HAL_UART_MspInit+0x84>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d12b      	bne.n	80038ca <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003872:	2300      	movs	r3, #0
 8003874:	613b      	str	r3, [r7, #16]
 8003876:	4b18      	ldr	r3, [pc, #96]	@ (80038d8 <HAL_UART_MspInit+0x88>)
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	4a17      	ldr	r2, [pc, #92]	@ (80038d8 <HAL_UART_MspInit+0x88>)
 800387c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003880:	6413      	str	r3, [r2, #64]	@ 0x40
 8003882:	4b15      	ldr	r3, [pc, #84]	@ (80038d8 <HAL_UART_MspInit+0x88>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800388a:	613b      	str	r3, [r7, #16]
 800388c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800388e:	2300      	movs	r3, #0
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	4b11      	ldr	r3, [pc, #68]	@ (80038d8 <HAL_UART_MspInit+0x88>)
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	4a10      	ldr	r2, [pc, #64]	@ (80038d8 <HAL_UART_MspInit+0x88>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6313      	str	r3, [r2, #48]	@ 0x30
 800389e:	4b0e      	ldr	r3, [pc, #56]	@ (80038d8 <HAL_UART_MspInit+0x88>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80038aa:	230c      	movs	r3, #12
 80038ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ae:	2302      	movs	r3, #2
 80038b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038b6:	2303      	movs	r3, #3
 80038b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038ba:	2307      	movs	r3, #7
 80038bc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038be:	f107 0314 	add.w	r3, r7, #20
 80038c2:	4619      	mov	r1, r3
 80038c4:	4805      	ldr	r0, [pc, #20]	@ (80038dc <HAL_UART_MspInit+0x8c>)
 80038c6:	f000 fb61 	bl	8003f8c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80038ca:	bf00      	nop
 80038cc:	3728      	adds	r7, #40	@ 0x28
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40004400 	.word	0x40004400
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40020000 	.word	0x40020000

080038e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80038e4:	bf00      	nop
 80038e6:	e7fd      	b.n	80038e4 <NMI_Handler+0x4>

080038e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038ec:	bf00      	nop
 80038ee:	e7fd      	b.n	80038ec <HardFault_Handler+0x4>

080038f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038f4:	bf00      	nop
 80038f6:	e7fd      	b.n	80038f4 <MemManage_Handler+0x4>

080038f8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038fc:	bf00      	nop
 80038fe:	e7fd      	b.n	80038fc <BusFault_Handler+0x4>

08003900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003904:	bf00      	nop
 8003906:	e7fd      	b.n	8003904 <UsageFault_Handler+0x4>

08003908 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003916:	b480      	push	{r7}
 8003918:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800391a:	bf00      	nop
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003936:	f000 f9d3 	bl	8003ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800393a:	bf00      	nop
 800393c:	bd80      	pop	{r7, pc}
	...

08003940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003944:	4802      	ldr	r0, [pc, #8]	@ (8003950 <OTG_FS_IRQHandler+0x10>)
 8003946:	f000 ffb7 	bl	80048b8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	20000644 	.word	0x20000644

08003954 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return 1;
 8003958:	2301      	movs	r3, #1
}
 800395a:	4618      	mov	r0, r3
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <_kill>:

int _kill(int pid, int sig)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800396e:	f008 ffcb 	bl	800c908 <__errno>
 8003972:	4603      	mov	r3, r0
 8003974:	2216      	movs	r2, #22
 8003976:	601a      	str	r2, [r3, #0]
  return -1;
 8003978:	f04f 33ff 	mov.w	r3, #4294967295
}
 800397c:	4618      	mov	r0, r3
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_exit>:

void _exit (int status)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800398c:	f04f 31ff 	mov.w	r1, #4294967295
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ffe7 	bl	8003964 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003996:	bf00      	nop
 8003998:	e7fd      	b.n	8003996 <_exit+0x12>

0800399a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b086      	sub	sp, #24
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e00a      	b.n	80039c2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80039ac:	f3af 8000 	nop.w
 80039b0:	4601      	mov	r1, r0
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	60ba      	str	r2, [r7, #8]
 80039b8:	b2ca      	uxtb	r2, r1
 80039ba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	3301      	adds	r3, #1
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	dbf0      	blt.n	80039ac <_read+0x12>
  }

  return len;
 80039ca:	687b      	ldr	r3, [r7, #4]
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}

080039d4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b083      	sub	sp, #12
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80039dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <_fstat>:


int _fstat(int file, struct stat *st)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80039fc:	605a      	str	r2, [r3, #4]
  return 0;
 80039fe:	2300      	movs	r3, #0
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <_isatty>:

int _isatty(int file)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003a14:	2301      	movs	r3, #1
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b085      	sub	sp, #20
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	60f8      	str	r0, [r7, #12]
 8003a2a:	60b9      	str	r1, [r7, #8]
 8003a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3714      	adds	r7, #20
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr

08003a3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003a44:	4a14      	ldr	r2, [pc, #80]	@ (8003a98 <_sbrk+0x5c>)
 8003a46:	4b15      	ldr	r3, [pc, #84]	@ (8003a9c <_sbrk+0x60>)
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003a50:	4b13      	ldr	r3, [pc, #76]	@ (8003aa0 <_sbrk+0x64>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003a58:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <_sbrk+0x64>)
 8003a5a:	4a12      	ldr	r2, [pc, #72]	@ (8003aa4 <_sbrk+0x68>)
 8003a5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003a5e:	4b10      	ldr	r3, [pc, #64]	@ (8003aa0 <_sbrk+0x64>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d207      	bcs.n	8003a7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003a6c:	f008 ff4c 	bl	800c908 <__errno>
 8003a70:	4603      	mov	r3, r0
 8003a72:	220c      	movs	r2, #12
 8003a74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003a76:	f04f 33ff 	mov.w	r3, #4294967295
 8003a7a:	e009      	b.n	8003a90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <_sbrk+0x64>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003a82:	4b07      	ldr	r3, [pc, #28]	@ (8003aa0 <_sbrk+0x64>)
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4413      	add	r3, r2
 8003a8a:	4a05      	ldr	r2, [pc, #20]	@ (8003aa0 <_sbrk+0x64>)
 8003a8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20020000 	.word	0x20020000
 8003a9c:	00000400 	.word	0x00000400
 8003aa0:	20000260 	.word	0x20000260
 8003aa4:	20000b70 	.word	0x20000b70

08003aa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aac:	4b06      	ldr	r3, [pc, #24]	@ (8003ac8 <SystemInit+0x20>)
 8003aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ab2:	4a05      	ldr	r2, [pc, #20]	@ (8003ac8 <SystemInit+0x20>)
 8003ab4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ab8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	e000ed00 	.word	0xe000ed00

08003acc <assert_output>:
#include <assert.h>

#include "masked_keccak.h"

// === Helper ===
static void assert_output(const char *label, const uint8_t *expected, const uint8_t *actual, size_t len) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b088      	sub	sp, #32
 8003ad0:	af02      	add	r7, sp, #8
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	603b      	str	r3, [r7, #0]
    for (size_t i = 0; i < len; ++i) {
 8003ada:	2300      	movs	r3, #0
 8003adc:	617b      	str	r3, [r7, #20]
 8003ade:	e022      	b.n	8003b26 <assert_output+0x5a>
        if (expected[i] != actual[i]) {
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	781a      	ldrb	r2, [r3, #0]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	440b      	add	r3, r1
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d015      	beq.n	8003b20 <assert_output+0x54>
            printf("FAIL [%s] byte %zu: expected 0x%02X, got 0x%02X\n",
                   label, i, expected[i], actual[i]);
 8003af4:	68ba      	ldr	r2, [r7, #8]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	4413      	add	r3, r2
 8003afa:	781b      	ldrb	r3, [r3, #0]
            printf("FAIL [%s] byte %zu: expected 0x%02X, got 0x%02X\n",
 8003afc:	4619      	mov	r1, r3
                   label, i, expected[i], actual[i]);
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	4413      	add	r3, r2
 8003b04:	781b      	ldrb	r3, [r3, #0]
            printf("FAIL [%s] byte %zu: expected 0x%02X, got 0x%02X\n",
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	460b      	mov	r3, r1
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	68f9      	ldr	r1, [r7, #12]
 8003b0e:	480c      	ldr	r0, [pc, #48]	@ (8003b40 <assert_output+0x74>)
 8003b10:	f008 fca0 	bl	800c454 <iprintf>
            assert(0);
 8003b14:	4b0b      	ldr	r3, [pc, #44]	@ (8003b44 <assert_output+0x78>)
 8003b16:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <assert_output+0x7c>)
 8003b18:	210e      	movs	r1, #14
 8003b1a:	480c      	ldr	r0, [pc, #48]	@ (8003b4c <assert_output+0x80>)
 8003b1c:	f008 faea 	bl	800c0f4 <__assert_func>
    for (size_t i = 0; i < len; ++i) {
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	3301      	adds	r3, #1
 8003b24:	617b      	str	r3, [r7, #20]
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d3d8      	bcc.n	8003ae0 <assert_output+0x14>
        }
    }
    printf("PASS [%s]\n", label);
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	4807      	ldr	r0, [pc, #28]	@ (8003b50 <assert_output+0x84>)
 8003b32:	f008 fc8f 	bl	800c454 <iprintf>
}
 8003b36:	bf00      	nop
 8003b38:	3718      	adds	r7, #24
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	0800d518 	.word	0x0800d518
 8003b44:	0800d54c 	.word	0x0800d54c
 8003b48:	0800d810 	.word	0x0800d810
 8003b4c:	0800d550 	.word	0x0800d550
 8003b50:	0800d564 	.word	0x0800d564

08003b54 <test_kat_sha3_all>:
    0x01, 0x75, 0x85, 0x86, 0x28, 0x1d, 0xcd, 0x26
};


// === Test Function ===
void test_kat_sha3_all(void) {
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b090      	sub	sp, #64	@ 0x40
 8003b58:	af00      	add	r7, sp, #0
    uint8_t out[64];

    masked_sha3_224(out, MSG_EMPTY, 0);
 8003b5a:	463b      	mov	r3, r7
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	4919      	ldr	r1, [pc, #100]	@ (8003bc4 <test_kat_sha3_all+0x70>)
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7ff fccb 	bl	80034fc <masked_sha3_224>
    assert_output("SHA3-224 (empty)", KAT_SHA3_224_EMPTY, out, 28);
 8003b66:	463a      	mov	r2, r7
 8003b68:	231c      	movs	r3, #28
 8003b6a:	4917      	ldr	r1, [pc, #92]	@ (8003bc8 <test_kat_sha3_all+0x74>)
 8003b6c:	4817      	ldr	r0, [pc, #92]	@ (8003bcc <test_kat_sha3_all+0x78>)
 8003b6e:	f7ff ffad 	bl	8003acc <assert_output>

    masked_sha3_256(out, MSG_EMPTY, 0);
 8003b72:	463b      	mov	r3, r7
 8003b74:	2200      	movs	r2, #0
 8003b76:	4913      	ldr	r1, [pc, #76]	@ (8003bc4 <test_kat_sha3_all+0x70>)
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff fcd3 	bl	8003524 <masked_sha3_256>
    assert_output("SHA3-256 (empty)", KAT_SHA3_256_EMPTY, out, 32);
 8003b7e:	463a      	mov	r2, r7
 8003b80:	2320      	movs	r3, #32
 8003b82:	4913      	ldr	r1, [pc, #76]	@ (8003bd0 <test_kat_sha3_all+0x7c>)
 8003b84:	4813      	ldr	r0, [pc, #76]	@ (8003bd4 <test_kat_sha3_all+0x80>)
 8003b86:	f7ff ffa1 	bl	8003acc <assert_output>

    masked_sha3_384(out, MSG_EMPTY, 0);
 8003b8a:	463b      	mov	r3, r7
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	490d      	ldr	r1, [pc, #52]	@ (8003bc4 <test_kat_sha3_all+0x70>)
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff fcdb 	bl	800354c <masked_sha3_384>
    assert_output("SHA3-384 (empty)", KAT_SHA3_384_EMPTY, out, 48);
 8003b96:	463a      	mov	r2, r7
 8003b98:	2330      	movs	r3, #48	@ 0x30
 8003b9a:	490f      	ldr	r1, [pc, #60]	@ (8003bd8 <test_kat_sha3_all+0x84>)
 8003b9c:	480f      	ldr	r0, [pc, #60]	@ (8003bdc <test_kat_sha3_all+0x88>)
 8003b9e:	f7ff ff95 	bl	8003acc <assert_output>

    masked_sha3_512(out, MSG_EMPTY, 0);
 8003ba2:	463b      	mov	r3, r7
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4907      	ldr	r1, [pc, #28]	@ (8003bc4 <test_kat_sha3_all+0x70>)
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7ff fce3 	bl	8003574 <masked_sha3_512>
    assert_output("SHA3-512 (empty)", KAT_SHA3_512_EMPTY, out, 64);
 8003bae:	463a      	mov	r2, r7
 8003bb0:	2340      	movs	r3, #64	@ 0x40
 8003bb2:	490b      	ldr	r1, [pc, #44]	@ (8003be0 <test_kat_sha3_all+0x8c>)
 8003bb4:	480b      	ldr	r0, [pc, #44]	@ (8003be4 <test_kat_sha3_all+0x90>)
 8003bb6:	f7ff ff89 	bl	8003acc <assert_output>
}
 8003bba:	bf00      	nop
 8003bbc:	3740      	adds	r7, #64	@ 0x40
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	0800d764 	.word	0x0800d764
 8003bc8:	0800d764 	.word	0x0800d764
 8003bcc:	0800d570 	.word	0x0800d570
 8003bd0:	0800d780 	.word	0x0800d780
 8003bd4:	0800d584 	.word	0x0800d584
 8003bd8:	0800d7a0 	.word	0x0800d7a0
 8003bdc:	0800d598 	.word	0x0800d598
 8003be0:	0800d7d0 	.word	0x0800d7d0
 8003be4:	0800d5ac 	.word	0x0800d5ac

08003be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003bec:	f7ff ff5c 	bl	8003aa8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf0:	480c      	ldr	r0, [pc, #48]	@ (8003c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003bf2:	490d      	ldr	r1, [pc, #52]	@ (8003c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0a      	ldr	r2, [pc, #40]	@ (8003c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003c08:	4c0a      	ldr	r4, [pc, #40]	@ (8003c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003c16:	f008 fe7d 	bl	800c914 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1a:	f7fd fff7 	bl	8001c0c <main>
  bx  lr    
 8003c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c28:	200000f8 	.word	0x200000f8
  ldr r2, =_sidata
 8003c2c:	0800d8a0 	.word	0x0800d8a0
  ldr r2, =_sbss
 8003c30:	200000f8 	.word	0x200000f8
  ldr r4, =_ebss
 8003c34:	20000b70 	.word	0x20000b70

08003c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c38:	e7fe      	b.n	8003c38 <ADC_IRQHandler>
	...

08003c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c40:	4b0e      	ldr	r3, [pc, #56]	@ (8003c7c <HAL_Init+0x40>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <HAL_Init+0x40>)
 8003c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c7c <HAL_Init+0x40>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0a      	ldr	r2, [pc, #40]	@ (8003c7c <HAL_Init+0x40>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c58:	4b08      	ldr	r3, [pc, #32]	@ (8003c7c <HAL_Init+0x40>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a07      	ldr	r2, [pc, #28]	@ (8003c7c <HAL_Init+0x40>)
 8003c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c64:	2003      	movs	r0, #3
 8003c66:	f000 f94f 	bl	8003f08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f000 f808 	bl	8003c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c70:	f7ff fc94 	bl	800359c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00

08003c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c88:	4b12      	ldr	r3, [pc, #72]	@ (8003cd4 <HAL_InitTick+0x54>)
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	4b12      	ldr	r3, [pc, #72]	@ (8003cd8 <HAL_InitTick+0x58>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	4619      	mov	r1, r3
 8003c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f000 f967 	bl	8003f72 <HAL_SYSTICK_Config>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d001      	beq.n	8003cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003caa:	2301      	movs	r3, #1
 8003cac:	e00e      	b.n	8003ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b0f      	cmp	r3, #15
 8003cb2:	d80a      	bhi.n	8003cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cbc:	f000 f92f 	bl	8003f1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc0:	4a06      	ldr	r2, [pc, #24]	@ (8003cdc <HAL_InitTick+0x5c>)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	e000      	b.n	8003ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000070 	.word	0x20000070
 8003cd8:	20000078 	.word	0x20000078
 8003cdc:	20000074 	.word	0x20000074

08003ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce4:	4b06      	ldr	r3, [pc, #24]	@ (8003d00 <HAL_IncTick+0x20>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	461a      	mov	r2, r3
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_IncTick+0x24>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4413      	add	r3, r2
 8003cf0:	4a04      	ldr	r2, [pc, #16]	@ (8003d04 <HAL_IncTick+0x24>)
 8003cf2:	6013      	str	r3, [r2, #0]
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000078 	.word	0x20000078
 8003d04:	20000264 	.word	0x20000264

08003d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003d0c:	4b03      	ldr	r3, [pc, #12]	@ (8003d1c <HAL_GetTick+0x14>)
 8003d0e:	681b      	ldr	r3, [r3, #0]
}
 8003d10:	4618      	mov	r0, r3
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	20000264 	.word	0x20000264

08003d20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b084      	sub	sp, #16
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d28:	f7ff ffee 	bl	8003d08 <HAL_GetTick>
 8003d2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d38:	d005      	beq.n	8003d46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8003d64 <HAL_Delay+0x44>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d46:	bf00      	nop
 8003d48:	f7ff ffde 	bl	8003d08 <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d8f7      	bhi.n	8003d48 <HAL_Delay+0x28>
  {
  }
}
 8003d58:	bf00      	nop
 8003d5a:	bf00      	nop
 8003d5c:	3710      	adds	r7, #16
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	20000078 	.word	0x20000078

08003d68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b480      	push	{r7}
 8003d6a:	b085      	sub	sp, #20
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	f003 0307 	and.w	r3, r3, #7
 8003d76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d78:	4b0c      	ldr	r3, [pc, #48]	@ (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003d84:	4013      	ands	r3, r2
 8003d86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003d94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9a:	4a04      	ldr	r2, [pc, #16]	@ (8003dac <__NVIC_SetPriorityGrouping+0x44>)
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	60d3      	str	r3, [r2, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	e000ed00 	.word	0xe000ed00

08003db0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db0:	b480      	push	{r7}
 8003db2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db4:	4b04      	ldr	r3, [pc, #16]	@ (8003dc8 <__NVIC_GetPriorityGrouping+0x18>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	0a1b      	lsrs	r3, r3, #8
 8003dba:	f003 0307 	and.w	r3, r3, #7
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc6:	4770      	bx	lr
 8003dc8:	e000ed00 	.word	0xe000ed00

08003dcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	db0b      	blt.n	8003df6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	f003 021f 	and.w	r2, r3, #31
 8003de4:	4907      	ldr	r1, [pc, #28]	@ (8003e04 <__NVIC_EnableIRQ+0x38>)
 8003de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dea:	095b      	lsrs	r3, r3, #5
 8003dec:	2001      	movs	r0, #1
 8003dee:	fa00 f202 	lsl.w	r2, r0, r2
 8003df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003df6:	bf00      	nop
 8003df8:	370c      	adds	r7, #12
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	e000e100 	.word	0xe000e100

08003e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	db0a      	blt.n	8003e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	b2da      	uxtb	r2, r3
 8003e20:	490c      	ldr	r1, [pc, #48]	@ (8003e54 <__NVIC_SetPriority+0x4c>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	0112      	lsls	r2, r2, #4
 8003e28:	b2d2      	uxtb	r2, r2
 8003e2a:	440b      	add	r3, r1
 8003e2c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e30:	e00a      	b.n	8003e48 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	b2da      	uxtb	r2, r3
 8003e36:	4908      	ldr	r1, [pc, #32]	@ (8003e58 <__NVIC_SetPriority+0x50>)
 8003e38:	79fb      	ldrb	r3, [r7, #7]
 8003e3a:	f003 030f 	and.w	r3, r3, #15
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	0112      	lsls	r2, r2, #4
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	440b      	add	r3, r1
 8003e46:	761a      	strb	r2, [r3, #24]
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	e000e100 	.word	0xe000e100
 8003e58:	e000ed00 	.word	0xe000ed00

08003e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b089      	sub	sp, #36	@ 0x24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f1c3 0307 	rsb	r3, r3, #7
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	bf28      	it	cs
 8003e7a:	2304      	movcs	r3, #4
 8003e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e7e:	69fb      	ldr	r3, [r7, #28]
 8003e80:	3304      	adds	r3, #4
 8003e82:	2b06      	cmp	r3, #6
 8003e84:	d902      	bls.n	8003e8c <NVIC_EncodePriority+0x30>
 8003e86:	69fb      	ldr	r3, [r7, #28]
 8003e88:	3b03      	subs	r3, #3
 8003e8a:	e000      	b.n	8003e8e <NVIC_EncodePriority+0x32>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e90:	f04f 32ff 	mov.w	r2, #4294967295
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9a:	43da      	mvns	r2, r3
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	401a      	ands	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8003eae:	43d9      	mvns	r1, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eb4:	4313      	orrs	r3, r2
         );
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3724      	adds	r7, #36	@ 0x24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b082      	sub	sp, #8
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3b01      	subs	r3, #1
 8003ed0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003ed4:	d301      	bcc.n	8003eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e00f      	b.n	8003efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003eda:	4a0a      	ldr	r2, [pc, #40]	@ (8003f04 <SysTick_Config+0x40>)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003ee2:	210f      	movs	r1, #15
 8003ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee8:	f7ff ff8e 	bl	8003e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003eec:	4b05      	ldr	r3, [pc, #20]	@ (8003f04 <SysTick_Config+0x40>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ef2:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <SysTick_Config+0x40>)
 8003ef4:	2207      	movs	r2, #7
 8003ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3708      	adds	r7, #8
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}
 8003f02:	bf00      	nop
 8003f04:	e000e010 	.word	0xe000e010

08003f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b082      	sub	sp, #8
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7ff ff29 	bl	8003d68 <__NVIC_SetPriorityGrouping>
}
 8003f16:	bf00      	nop
 8003f18:	3708      	adds	r7, #8
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b086      	sub	sp, #24
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	4603      	mov	r3, r0
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f30:	f7ff ff3e 	bl	8003db0 <__NVIC_GetPriorityGrouping>
 8003f34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	6978      	ldr	r0, [r7, #20]
 8003f3c:	f7ff ff8e 	bl	8003e5c <NVIC_EncodePriority>
 8003f40:	4602      	mov	r2, r0
 8003f42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff ff5d 	bl	8003e08 <__NVIC_SetPriority>
}
 8003f4e:	bf00      	nop
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b082      	sub	sp, #8
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff31 	bl	8003dcc <__NVIC_EnableIRQ>
}
 8003f6a:	bf00      	nop
 8003f6c:	3708      	adds	r7, #8
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f72:	b580      	push	{r7, lr}
 8003f74:	b082      	sub	sp, #8
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f7ff ffa2 	bl	8003ec4 <SysTick_Config>
 8003f80:	4603      	mov	r3, r0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b089      	sub	sp, #36	@ 0x24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	61fb      	str	r3, [r7, #28]
 8003fa6:	e16b      	b.n	8004280 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003fa8:	2201      	movs	r2, #1
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	697a      	ldr	r2, [r7, #20]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003fbc:	693a      	ldr	r2, [r7, #16]
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	f040 815a 	bne.w	800427a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f003 0303 	and.w	r3, r3, #3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d005      	beq.n	8003fde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d130      	bne.n	8004040 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	005b      	lsls	r3, r3, #1
 8003fe8:	2203      	movs	r2, #3
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	68da      	ldr	r2, [r3, #12]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	005b      	lsls	r3, r3, #1
 8003ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4313      	orrs	r3, r2
 8004006:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004014:	2201      	movs	r2, #1
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	fa02 f303 	lsl.w	r3, r2, r3
 800401c:	43db      	mvns	r3, r3
 800401e:	69ba      	ldr	r2, [r7, #24]
 8004020:	4013      	ands	r3, r2
 8004022:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	091b      	lsrs	r3, r3, #4
 800402a:	f003 0201 	and.w	r2, r3, #1
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	fa02 f303 	lsl.w	r3, r2, r3
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	4313      	orrs	r3, r2
 8004038:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69ba      	ldr	r2, [r7, #24]
 800403e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b03      	cmp	r3, #3
 800404a:	d017      	beq.n	800407c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	005b      	lsls	r3, r3, #1
 8004056:	2203      	movs	r2, #3
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43db      	mvns	r3, r3
 800405e:	69ba      	ldr	r2, [r7, #24]
 8004060:	4013      	ands	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	689a      	ldr	r2, [r3, #8]
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	005b      	lsls	r3, r3, #1
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	4313      	orrs	r3, r2
 8004074:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	69ba      	ldr	r2, [r7, #24]
 800407a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f003 0303 	and.w	r3, r3, #3
 8004084:	2b02      	cmp	r3, #2
 8004086:	d123      	bne.n	80040d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	08da      	lsrs	r2, r3, #3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	3208      	adds	r2, #8
 8004090:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004094:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004096:	69fb      	ldr	r3, [r7, #28]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	220f      	movs	r2, #15
 80040a0:	fa02 f303 	lsl.w	r3, r2, r3
 80040a4:	43db      	mvns	r3, r3
 80040a6:	69ba      	ldr	r2, [r7, #24]
 80040a8:	4013      	ands	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	691a      	ldr	r2, [r3, #16]
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0307 	and.w	r3, r3, #7
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	fa02 f303 	lsl.w	r3, r2, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	08da      	lsrs	r2, r3, #3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3208      	adds	r2, #8
 80040ca:	69b9      	ldr	r1, [r7, #24]
 80040cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	2203      	movs	r2, #3
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	43db      	mvns	r3, r3
 80040e2:	69ba      	ldr	r2, [r7, #24]
 80040e4:	4013      	ands	r3, r2
 80040e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	f003 0203 	and.w	r2, r3, #3
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	005b      	lsls	r3, r3, #1
 80040f4:	fa02 f303 	lsl.w	r3, r2, r3
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800410c:	2b00      	cmp	r3, #0
 800410e:	f000 80b4 	beq.w	800427a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004112:	2300      	movs	r3, #0
 8004114:	60fb      	str	r3, [r7, #12]
 8004116:	4b60      	ldr	r3, [pc, #384]	@ (8004298 <HAL_GPIO_Init+0x30c>)
 8004118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800411a:	4a5f      	ldr	r2, [pc, #380]	@ (8004298 <HAL_GPIO_Init+0x30c>)
 800411c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004120:	6453      	str	r3, [r2, #68]	@ 0x44
 8004122:	4b5d      	ldr	r3, [pc, #372]	@ (8004298 <HAL_GPIO_Init+0x30c>)
 8004124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004126:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800412a:	60fb      	str	r3, [r7, #12]
 800412c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800412e:	4a5b      	ldr	r2, [pc, #364]	@ (800429c <HAL_GPIO_Init+0x310>)
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	089b      	lsrs	r3, r3, #2
 8004134:	3302      	adds	r3, #2
 8004136:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800413a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	f003 0303 	and.w	r3, r3, #3
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	220f      	movs	r2, #15
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	4a52      	ldr	r2, [pc, #328]	@ (80042a0 <HAL_GPIO_Init+0x314>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d02b      	beq.n	80041b2 <HAL_GPIO_Init+0x226>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	4a51      	ldr	r2, [pc, #324]	@ (80042a4 <HAL_GPIO_Init+0x318>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d025      	beq.n	80041ae <HAL_GPIO_Init+0x222>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a50      	ldr	r2, [pc, #320]	@ (80042a8 <HAL_GPIO_Init+0x31c>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d01f      	beq.n	80041aa <HAL_GPIO_Init+0x21e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a4f      	ldr	r2, [pc, #316]	@ (80042ac <HAL_GPIO_Init+0x320>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d019      	beq.n	80041a6 <HAL_GPIO_Init+0x21a>
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	4a4e      	ldr	r2, [pc, #312]	@ (80042b0 <HAL_GPIO_Init+0x324>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d013      	beq.n	80041a2 <HAL_GPIO_Init+0x216>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a4d      	ldr	r2, [pc, #308]	@ (80042b4 <HAL_GPIO_Init+0x328>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d00d      	beq.n	800419e <HAL_GPIO_Init+0x212>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	4a4c      	ldr	r2, [pc, #304]	@ (80042b8 <HAL_GPIO_Init+0x32c>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d007      	beq.n	800419a <HAL_GPIO_Init+0x20e>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a4b      	ldr	r2, [pc, #300]	@ (80042bc <HAL_GPIO_Init+0x330>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d101      	bne.n	8004196 <HAL_GPIO_Init+0x20a>
 8004192:	2307      	movs	r3, #7
 8004194:	e00e      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 8004196:	2308      	movs	r3, #8
 8004198:	e00c      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 800419a:	2306      	movs	r3, #6
 800419c:	e00a      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 800419e:	2305      	movs	r3, #5
 80041a0:	e008      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041a2:	2304      	movs	r3, #4
 80041a4:	e006      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041a6:	2303      	movs	r3, #3
 80041a8:	e004      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041aa:	2302      	movs	r3, #2
 80041ac:	e002      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HAL_GPIO_Init+0x228>
 80041b2:	2300      	movs	r3, #0
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	f002 0203 	and.w	r2, r2, #3
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4093      	lsls	r3, r2
 80041be:	69ba      	ldr	r2, [r7, #24]
 80041c0:	4313      	orrs	r3, r2
 80041c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80041c4:	4935      	ldr	r1, [pc, #212]	@ (800429c <HAL_GPIO_Init+0x310>)
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	089b      	lsrs	r3, r3, #2
 80041ca:	3302      	adds	r3, #2
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80041d2:	4b3b      	ldr	r3, [pc, #236]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 80041d4:	689b      	ldr	r3, [r3, #8]
 80041d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	43db      	mvns	r3, r3
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	4013      	ands	r3, r2
 80041e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80041f6:	4a32      	ldr	r2, [pc, #200]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 80041f8:	69bb      	ldr	r3, [r7, #24]
 80041fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80041fc:	4b30      	ldr	r3, [pc, #192]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	43db      	mvns	r3, r3
 8004206:	69ba      	ldr	r2, [r7, #24]
 8004208:	4013      	ands	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004220:	4a27      	ldr	r2, [pc, #156]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004226:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	43db      	mvns	r3, r3
 8004230:	69ba      	ldr	r2, [r7, #24]
 8004232:	4013      	ands	r3, r2
 8004234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004242:	69ba      	ldr	r2, [r7, #24]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800424a:	4a1d      	ldr	r2, [pc, #116]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004250:	4b1b      	ldr	r3, [pc, #108]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	43db      	mvns	r3, r3
 800425a:	69ba      	ldr	r2, [r7, #24]
 800425c:	4013      	ands	r3, r2
 800425e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d003      	beq.n	8004274 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800426c:	69ba      	ldr	r2, [r7, #24]
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004274:	4a12      	ldr	r2, [pc, #72]	@ (80042c0 <HAL_GPIO_Init+0x334>)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	3301      	adds	r3, #1
 800427e:	61fb      	str	r3, [r7, #28]
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	f67f ae90 	bls.w	8003fa8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3724      	adds	r7, #36	@ 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40023800 	.word	0x40023800
 800429c:	40013800 	.word	0x40013800
 80042a0:	40020000 	.word	0x40020000
 80042a4:	40020400 	.word	0x40020400
 80042a8:	40020800 	.word	0x40020800
 80042ac:	40020c00 	.word	0x40020c00
 80042b0:	40021000 	.word	0x40021000
 80042b4:	40021400 	.word	0x40021400
 80042b8:	40021800 	.word	0x40021800
 80042bc:	40021c00 	.word	0x40021c00
 80042c0:	40013c00 	.word	0x40013c00

080042c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	460b      	mov	r3, r1
 80042ce:	807b      	strh	r3, [r7, #2]
 80042d0:	4613      	mov	r3, r2
 80042d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80042d4:	787b      	ldrb	r3, [r7, #1]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80042e0:	e003      	b.n	80042ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80042e2:	887b      	ldrh	r3, [r7, #2]
 80042e4:	041a      	lsls	r2, r3, #16
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	619a      	str	r2, [r3, #24]
}
 80042ea:	bf00      	nop
 80042ec:	370c      	adds	r7, #12
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b086      	sub	sp, #24
 80042fa:	af02      	add	r7, sp, #8
 80042fc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e059      	b.n	80043bc <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d106      	bne.n	8004328 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2200      	movs	r2, #0
 800431e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f007 fc3a 	bl	800bb9c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2203      	movs	r2, #3
 800432c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004336:	d102      	bne.n	800433e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4618      	mov	r0, r3
 8004344:	f004 fa53 	bl	80087ee <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6818      	ldr	r0, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	7c1a      	ldrb	r2, [r3, #16]
 8004350:	f88d 2000 	strb.w	r2, [sp]
 8004354:	3304      	adds	r3, #4
 8004356:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004358:	f004 f9d4 	bl	8008704 <USB_CoreInit>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d005      	beq.n	800436e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2202      	movs	r2, #2
 8004366:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e026      	b.n	80043bc <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2101      	movs	r1, #1
 8004374:	4618      	mov	r0, r3
 8004376:	f004 fa4b 	bl	8008810 <USB_SetCurrentMode>
 800437a:	4603      	mov	r3, r0
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e017      	b.n	80043bc <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6818      	ldr	r0, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	7c1a      	ldrb	r2, [r3, #16]
 8004394:	f88d 2000 	strb.w	r2, [sp]
 8004398:	3304      	adds	r3, #4
 800439a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800439c:	f004 fbee 	bl	8008b7c <USB_HostInit>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d005      	beq.n	80043b2 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e004      	b.n	80043bc <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2201      	movs	r2, #1
 80043b6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3710      	adds	r7, #16
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80043c4:	b590      	push	{r4, r7, lr}
 80043c6:	b08b      	sub	sp, #44	@ 0x2c
 80043c8:	af04      	add	r7, sp, #16
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	4608      	mov	r0, r1
 80043ce:	4611      	mov	r1, r2
 80043d0:	461a      	mov	r2, r3
 80043d2:	4603      	mov	r3, r0
 80043d4:	70fb      	strb	r3, [r7, #3]
 80043d6:	460b      	mov	r3, r1
 80043d8:	70bb      	strb	r3, [r7, #2]
 80043da:	4613      	mov	r3, r2
 80043dc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 80043de:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80043e0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d101      	bne.n	80043f0 <HAL_HCD_HC_Init+0x2c>
 80043ec:	2302      	movs	r3, #2
 80043ee:	e09d      	b.n	800452c <HAL_HCD_HC_Init+0x168>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2201      	movs	r2, #1
 80043f4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 80043f8:	78fa      	ldrb	r2, [r7, #3]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	4613      	mov	r3, r2
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	1a9b      	subs	r3, r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	440b      	add	r3, r1
 8004406:	3319      	adds	r3, #25
 8004408:	2200      	movs	r2, #0
 800440a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800440c:	78fa      	ldrb	r2, [r7, #3]
 800440e:	6879      	ldr	r1, [r7, #4]
 8004410:	4613      	mov	r3, r2
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	1a9b      	subs	r3, r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	3314      	adds	r3, #20
 800441c:	787a      	ldrb	r2, [r7, #1]
 800441e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004420:	78fa      	ldrb	r2, [r7, #3]
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	011b      	lsls	r3, r3, #4
 8004428:	1a9b      	subs	r3, r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3315      	adds	r3, #21
 8004430:	78fa      	ldrb	r2, [r7, #3]
 8004432:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004434:	78fa      	ldrb	r2, [r7, #3]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	011b      	lsls	r3, r3, #4
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3326      	adds	r3, #38	@ 0x26
 8004444:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004448:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800444a:	78fa      	ldrb	r2, [r7, #3]
 800444c:	78bb      	ldrb	r3, [r7, #2]
 800444e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004452:	b2d8      	uxtb	r0, r3
 8004454:	6879      	ldr	r1, [r7, #4]
 8004456:	4613      	mov	r3, r2
 8004458:	011b      	lsls	r3, r3, #4
 800445a:	1a9b      	subs	r3, r3, r2
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	440b      	add	r3, r1
 8004460:	3316      	adds	r3, #22
 8004462:	4602      	mov	r2, r0
 8004464:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8004466:	78fb      	ldrb	r3, [r7, #3]
 8004468:	4619      	mov	r1, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 fbc8 	bl	8004c00 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8004470:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004474:	2b00      	cmp	r3, #0
 8004476:	da0a      	bge.n	800448e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004478:	78fa      	ldrb	r2, [r7, #3]
 800447a:	6879      	ldr	r1, [r7, #4]
 800447c:	4613      	mov	r3, r2
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	1a9b      	subs	r3, r3, r2
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	3317      	adds	r3, #23
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e009      	b.n	80044a2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800448e:	78fa      	ldrb	r2, [r7, #3]
 8004490:	6879      	ldr	r1, [r7, #4]
 8004492:	4613      	mov	r3, r2
 8004494:	011b      	lsls	r3, r3, #4
 8004496:	1a9b      	subs	r3, r3, r2
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	440b      	add	r3, r1
 800449c:	3317      	adds	r3, #23
 800449e:	2200      	movs	r2, #0
 80044a0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f004 fccc 	bl	8008e44 <USB_GetHostSpeed>
 80044ac:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80044ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d10b      	bne.n	80044ce <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80044b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d107      	bne.n	80044ce <HAL_HCD_HC_Init+0x10a>
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d104      	bne.n	80044ce <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2bbc      	cmp	r3, #188	@ 0xbc
 80044c8:	d901      	bls.n	80044ce <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 80044ca:	23bc      	movs	r3, #188	@ 0xbc
 80044cc:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	6879      	ldr	r1, [r7, #4]
 80044d2:	4613      	mov	r3, r2
 80044d4:	011b      	lsls	r3, r3, #4
 80044d6:	1a9b      	subs	r3, r3, r2
 80044d8:	009b      	lsls	r3, r3, #2
 80044da:	440b      	add	r3, r1
 80044dc:	3318      	adds	r3, #24
 80044de:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80044e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 80044e4:	78fa      	ldrb	r2, [r7, #3]
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	b298      	uxth	r0, r3
 80044ea:	6879      	ldr	r1, [r7, #4]
 80044ec:	4613      	mov	r3, r2
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	1a9b      	subs	r3, r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	440b      	add	r3, r1
 80044f6:	3328      	adds	r3, #40	@ 0x28
 80044f8:	4602      	mov	r2, r0
 80044fa:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6818      	ldr	r0, [r3, #0]
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	b29b      	uxth	r3, r3
 8004504:	787c      	ldrb	r4, [r7, #1]
 8004506:	78ba      	ldrb	r2, [r7, #2]
 8004508:	78f9      	ldrb	r1, [r7, #3]
 800450a:	9302      	str	r3, [sp, #8]
 800450c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004510:	9301      	str	r3, [sp, #4]
 8004512:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	4623      	mov	r3, r4
 800451a:	f004 fcbb 	bl	8008e94 <USB_HC_Init>
 800451e:	4603      	mov	r3, r0
 8004520:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800452a:	7bfb      	ldrb	r3, [r7, #15]
}
 800452c:	4618      	mov	r0, r3
 800452e:	371c      	adds	r7, #28
 8004530:	46bd      	mov	sp, r7
 8004532:	bd90      	pop	{r4, r7, pc}

08004534 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b084      	sub	sp, #16
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
 800453c:	460b      	mov	r3, r1
 800453e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_HCD_HC_Halt+0x1e>
 800454e:	2302      	movs	r3, #2
 8004550:	e00f      	b.n	8004572 <HAL_HCD_HC_Halt+0x3e>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	78fa      	ldrb	r2, [r7, #3]
 8004560:	4611      	mov	r1, r2
 8004562:	4618      	mov	r0, r3
 8004564:	f005 f84d 	bl	8009602 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8004570:	7bfb      	ldrb	r3, [r7, #15]
}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
	...

0800457c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	4608      	mov	r0, r1
 8004586:	4611      	mov	r1, r2
 8004588:	461a      	mov	r2, r3
 800458a:	4603      	mov	r3, r0
 800458c:	70fb      	strb	r3, [r7, #3]
 800458e:	460b      	mov	r3, r1
 8004590:	70bb      	strb	r3, [r7, #2]
 8004592:	4613      	mov	r3, r2
 8004594:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004596:	78fa      	ldrb	r2, [r7, #3]
 8004598:	6879      	ldr	r1, [r7, #4]
 800459a:	4613      	mov	r3, r2
 800459c:	011b      	lsls	r3, r3, #4
 800459e:	1a9b      	subs	r3, r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	440b      	add	r3, r1
 80045a4:	3317      	adds	r3, #23
 80045a6:	78ba      	ldrb	r2, [r7, #2]
 80045a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	6879      	ldr	r1, [r7, #4]
 80045ae:	4613      	mov	r3, r2
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	1a9b      	subs	r3, r3, r2
 80045b4:	009b      	lsls	r3, r3, #2
 80045b6:	440b      	add	r3, r1
 80045b8:	3326      	adds	r3, #38	@ 0x26
 80045ba:	787a      	ldrb	r2, [r7, #1]
 80045bc:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80045be:	7c3b      	ldrb	r3, [r7, #16]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d114      	bne.n	80045ee <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80045c4:	78fa      	ldrb	r2, [r7, #3]
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	332a      	adds	r3, #42	@ 0x2a
 80045d4:	2203      	movs	r2, #3
 80045d6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80045d8:	78fa      	ldrb	r2, [r7, #3]
 80045da:	6879      	ldr	r1, [r7, #4]
 80045dc:	4613      	mov	r3, r2
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	3319      	adds	r3, #25
 80045e8:	7f3a      	ldrb	r2, [r7, #28]
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e009      	b.n	8004602 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045ee:	78fa      	ldrb	r2, [r7, #3]
 80045f0:	6879      	ldr	r1, [r7, #4]
 80045f2:	4613      	mov	r3, r2
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	1a9b      	subs	r3, r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	440b      	add	r3, r1
 80045fc:	332a      	adds	r3, #42	@ 0x2a
 80045fe:	2202      	movs	r2, #2
 8004600:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004602:	787b      	ldrb	r3, [r7, #1]
 8004604:	2b03      	cmp	r3, #3
 8004606:	f200 8102 	bhi.w	800480e <HAL_HCD_HC_SubmitRequest+0x292>
 800460a:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <HAL_HCD_HC_SubmitRequest+0x94>)
 800460c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004610:	08004621 	.word	0x08004621
 8004614:	080047f9 	.word	0x080047f9
 8004618:	080046e5 	.word	0x080046e5
 800461c:	0800476f 	.word	0x0800476f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004620:	7c3b      	ldrb	r3, [r7, #16]
 8004622:	2b01      	cmp	r3, #1
 8004624:	f040 80f5 	bne.w	8004812 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8004628:	78bb      	ldrb	r3, [r7, #2]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d12d      	bne.n	800468a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800462e:	8b3b      	ldrh	r3, [r7, #24]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004634:	78fa      	ldrb	r2, [r7, #3]
 8004636:	6879      	ldr	r1, [r7, #4]
 8004638:	4613      	mov	r3, r2
 800463a:	011b      	lsls	r3, r3, #4
 800463c:	1a9b      	subs	r3, r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	333d      	adds	r3, #61	@ 0x3d
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8004648:	78fa      	ldrb	r2, [r7, #3]
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	4613      	mov	r3, r2
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	1a9b      	subs	r3, r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	333d      	adds	r3, #61	@ 0x3d
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d10a      	bne.n	8004674 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800465e:	78fa      	ldrb	r2, [r7, #3]
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	4613      	mov	r3, r2
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	1a9b      	subs	r3, r3, r2
 8004668:	009b      	lsls	r3, r3, #2
 800466a:	440b      	add	r3, r1
 800466c:	332a      	adds	r3, #42	@ 0x2a
 800466e:	2200      	movs	r2, #0
 8004670:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004672:	e0ce      	b.n	8004812 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004674:	78fa      	ldrb	r2, [r7, #3]
 8004676:	6879      	ldr	r1, [r7, #4]
 8004678:	4613      	mov	r3, r2
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	1a9b      	subs	r3, r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	332a      	adds	r3, #42	@ 0x2a
 8004684:	2202      	movs	r2, #2
 8004686:	701a      	strb	r2, [r3, #0]
      break;
 8004688:	e0c3      	b.n	8004812 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800468a:	78fa      	ldrb	r2, [r7, #3]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	4613      	mov	r3, r2
 8004690:	011b      	lsls	r3, r3, #4
 8004692:	1a9b      	subs	r3, r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	440b      	add	r3, r1
 8004698:	331a      	adds	r3, #26
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2b01      	cmp	r3, #1
 800469e:	f040 80b8 	bne.w	8004812 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80046a2:	78fa      	ldrb	r2, [r7, #3]
 80046a4:	6879      	ldr	r1, [r7, #4]
 80046a6:	4613      	mov	r3, r2
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	1a9b      	subs	r3, r3, r2
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	440b      	add	r3, r1
 80046b0:	333c      	adds	r3, #60	@ 0x3c
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d10a      	bne.n	80046ce <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80046b8:	78fa      	ldrb	r2, [r7, #3]
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4613      	mov	r3, r2
 80046be:	011b      	lsls	r3, r3, #4
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	440b      	add	r3, r1
 80046c6:	332a      	adds	r3, #42	@ 0x2a
 80046c8:	2200      	movs	r2, #0
 80046ca:	701a      	strb	r2, [r3, #0]
      break;
 80046cc:	e0a1      	b.n	8004812 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80046ce:	78fa      	ldrb	r2, [r7, #3]
 80046d0:	6879      	ldr	r1, [r7, #4]
 80046d2:	4613      	mov	r3, r2
 80046d4:	011b      	lsls	r3, r3, #4
 80046d6:	1a9b      	subs	r3, r3, r2
 80046d8:	009b      	lsls	r3, r3, #2
 80046da:	440b      	add	r3, r1
 80046dc:	332a      	adds	r3, #42	@ 0x2a
 80046de:	2202      	movs	r2, #2
 80046e0:	701a      	strb	r2, [r3, #0]
      break;
 80046e2:	e096      	b.n	8004812 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80046e4:	78bb      	ldrb	r3, [r7, #2]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d120      	bne.n	800472c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80046ea:	78fa      	ldrb	r2, [r7, #3]
 80046ec:	6879      	ldr	r1, [r7, #4]
 80046ee:	4613      	mov	r3, r2
 80046f0:	011b      	lsls	r3, r3, #4
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	440b      	add	r3, r1
 80046f8:	333d      	adds	r3, #61	@ 0x3d
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	332a      	adds	r3, #42	@ 0x2a
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004714:	e07e      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004716:	78fa      	ldrb	r2, [r7, #3]
 8004718:	6879      	ldr	r1, [r7, #4]
 800471a:	4613      	mov	r3, r2
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	1a9b      	subs	r3, r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	332a      	adds	r3, #42	@ 0x2a
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]
      break;
 800472a:	e073      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800472c:	78fa      	ldrb	r2, [r7, #3]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	011b      	lsls	r3, r3, #4
 8004734:	1a9b      	subs	r3, r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	333c      	adds	r3, #60	@ 0x3c
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d10a      	bne.n	8004758 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004742:	78fa      	ldrb	r2, [r7, #3]
 8004744:	6879      	ldr	r1, [r7, #4]
 8004746:	4613      	mov	r3, r2
 8004748:	011b      	lsls	r3, r3, #4
 800474a:	1a9b      	subs	r3, r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	440b      	add	r3, r1
 8004750:	332a      	adds	r3, #42	@ 0x2a
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
      break;
 8004756:	e05d      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004758:	78fa      	ldrb	r2, [r7, #3]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	011b      	lsls	r3, r3, #4
 8004760:	1a9b      	subs	r3, r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	332a      	adds	r3, #42	@ 0x2a
 8004768:	2202      	movs	r2, #2
 800476a:	701a      	strb	r2, [r3, #0]
      break;
 800476c:	e052      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800476e:	78bb      	ldrb	r3, [r7, #2]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d120      	bne.n	80047b6 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004774:	78fa      	ldrb	r2, [r7, #3]
 8004776:	6879      	ldr	r1, [r7, #4]
 8004778:	4613      	mov	r3, r2
 800477a:	011b      	lsls	r3, r3, #4
 800477c:	1a9b      	subs	r3, r3, r2
 800477e:	009b      	lsls	r3, r3, #2
 8004780:	440b      	add	r3, r1
 8004782:	333d      	adds	r3, #61	@ 0x3d
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800478a:	78fa      	ldrb	r2, [r7, #3]
 800478c:	6879      	ldr	r1, [r7, #4]
 800478e:	4613      	mov	r3, r2
 8004790:	011b      	lsls	r3, r3, #4
 8004792:	1a9b      	subs	r3, r3, r2
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	440b      	add	r3, r1
 8004798:	332a      	adds	r3, #42	@ 0x2a
 800479a:	2200      	movs	r2, #0
 800479c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800479e:	e039      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	6879      	ldr	r1, [r7, #4]
 80047a4:	4613      	mov	r3, r2
 80047a6:	011b      	lsls	r3, r3, #4
 80047a8:	1a9b      	subs	r3, r3, r2
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	440b      	add	r3, r1
 80047ae:	332a      	adds	r3, #42	@ 0x2a
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]
      break;
 80047b4:	e02e      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	333c      	adds	r3, #60	@ 0x3c
 80047c6:	781b      	ldrb	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d10a      	bne.n	80047e2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047cc:	78fa      	ldrb	r2, [r7, #3]
 80047ce:	6879      	ldr	r1, [r7, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	1a9b      	subs	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	440b      	add	r3, r1
 80047da:	332a      	adds	r3, #42	@ 0x2a
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
      break;
 80047e0:	e018      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80047e2:	78fa      	ldrb	r2, [r7, #3]
 80047e4:	6879      	ldr	r1, [r7, #4]
 80047e6:	4613      	mov	r3, r2
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	1a9b      	subs	r3, r3, r2
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	440b      	add	r3, r1
 80047f0:	332a      	adds	r3, #42	@ 0x2a
 80047f2:	2202      	movs	r2, #2
 80047f4:	701a      	strb	r2, [r3, #0]
      break;
 80047f6:	e00d      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80047f8:	78fa      	ldrb	r2, [r7, #3]
 80047fa:	6879      	ldr	r1, [r7, #4]
 80047fc:	4613      	mov	r3, r2
 80047fe:	011b      	lsls	r3, r3, #4
 8004800:	1a9b      	subs	r3, r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	440b      	add	r3, r1
 8004806:	332a      	adds	r3, #42	@ 0x2a
 8004808:	2200      	movs	r2, #0
 800480a:	701a      	strb	r2, [r3, #0]
      break;
 800480c:	e002      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800480e:	bf00      	nop
 8004810:	e000      	b.n	8004814 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004812:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004814:	78fa      	ldrb	r2, [r7, #3]
 8004816:	6879      	ldr	r1, [r7, #4]
 8004818:	4613      	mov	r3, r2
 800481a:	011b      	lsls	r3, r3, #4
 800481c:	1a9b      	subs	r3, r3, r2
 800481e:	009b      	lsls	r3, r3, #2
 8004820:	440b      	add	r3, r1
 8004822:	332c      	adds	r3, #44	@ 0x2c
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004828:	78fa      	ldrb	r2, [r7, #3]
 800482a:	8b39      	ldrh	r1, [r7, #24]
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	1a9b      	subs	r3, r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	4403      	add	r3, r0
 8004838:	3334      	adds	r3, #52	@ 0x34
 800483a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800483c:	78fa      	ldrb	r2, [r7, #3]
 800483e:	6879      	ldr	r1, [r7, #4]
 8004840:	4613      	mov	r3, r2
 8004842:	011b      	lsls	r3, r3, #4
 8004844:	1a9b      	subs	r3, r3, r2
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	440b      	add	r3, r1
 800484a:	334c      	adds	r3, #76	@ 0x4c
 800484c:	2200      	movs	r2, #0
 800484e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004850:	78fa      	ldrb	r2, [r7, #3]
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	4613      	mov	r3, r2
 8004856:	011b      	lsls	r3, r3, #4
 8004858:	1a9b      	subs	r3, r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	440b      	add	r3, r1
 800485e:	3338      	adds	r3, #56	@ 0x38
 8004860:	2200      	movs	r2, #0
 8004862:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004864:	78fa      	ldrb	r2, [r7, #3]
 8004866:	6879      	ldr	r1, [r7, #4]
 8004868:	4613      	mov	r3, r2
 800486a:	011b      	lsls	r3, r3, #4
 800486c:	1a9b      	subs	r3, r3, r2
 800486e:	009b      	lsls	r3, r3, #2
 8004870:	440b      	add	r3, r1
 8004872:	3315      	adds	r3, #21
 8004874:	78fa      	ldrb	r2, [r7, #3]
 8004876:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004878:	78fa      	ldrb	r2, [r7, #3]
 800487a:	6879      	ldr	r1, [r7, #4]
 800487c:	4613      	mov	r3, r2
 800487e:	011b      	lsls	r3, r3, #4
 8004880:	1a9b      	subs	r3, r3, r2
 8004882:	009b      	lsls	r3, r3, #2
 8004884:	440b      	add	r3, r1
 8004886:	334d      	adds	r3, #77	@ 0x4d
 8004888:	2200      	movs	r2, #0
 800488a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	78fa      	ldrb	r2, [r7, #3]
 8004892:	4613      	mov	r3, r2
 8004894:	011b      	lsls	r3, r3, #4
 8004896:	1a9b      	subs	r3, r3, r2
 8004898:	009b      	lsls	r3, r3, #2
 800489a:	3310      	adds	r3, #16
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	4413      	add	r3, r2
 80048a0:	1d19      	adds	r1, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	799b      	ldrb	r3, [r3, #6]
 80048a6:	461a      	mov	r2, r3
 80048a8:	f004 fc20 	bl	80090ec <USB_HC_StartXfer>
 80048ac:	4603      	mov	r3, r0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop

080048b8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f004 f914 	bl	8008afc <USB_GetMode>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	f040 80fb 	bne.w	8004ad2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f004 f8d7 	bl	8008a94 <USB_ReadInterrupts>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80f1 	beq.w	8004ad0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f004 f8ce 	bl	8008a94 <USB_ReadInterrupts>
 80048f8:	4603      	mov	r3, r0
 80048fa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80048fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004902:	d104      	bne.n	800490e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800490c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f004 f8be 	bl	8008a94 <USB_ReadInterrupts>
 8004918:	4603      	mov	r3, r0
 800491a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800491e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004922:	d104      	bne.n	800492e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800492c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f004 f8ae 	bl	8008a94 <USB_ReadInterrupts>
 8004938:	4603      	mov	r3, r0
 800493a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800493e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004942:	d104      	bne.n	800494e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800494c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4618      	mov	r0, r3
 8004954:	f004 f89e 	bl	8008a94 <USB_ReadInterrupts>
 8004958:	4603      	mov	r3, r0
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b02      	cmp	r3, #2
 8004960:	d103      	bne.n	800496a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2202      	movs	r2, #2
 8004968:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4618      	mov	r0, r3
 8004970:	f004 f890 	bl	8008a94 <USB_ReadInterrupts>
 8004974:	4603      	mov	r3, r0
 8004976:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800497a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800497e:	d120      	bne.n	80049c2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8004988:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d113      	bne.n	80049c2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800499a:	2110      	movs	r1, #16
 800499c:	6938      	ldr	r0, [r7, #16]
 800499e:	f003 ff83 	bl	80088a8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80049a2:	6938      	ldr	r0, [r7, #16]
 80049a4:	f003 ffb2 	bl	800890c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	7a5b      	ldrb	r3, [r3, #9]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d105      	bne.n	80049bc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2101      	movs	r1, #1
 80049b6:	4618      	mov	r0, r3
 80049b8:	f004 f9a4 	bl	8008d04 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f007 f96b 	bl	800bc98 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f004 f864 	bl	8008a94 <USB_ReadInterrupts>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80049d2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049d6:	d102      	bne.n	80049de <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f001 fd4d 	bl	8006478 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4618      	mov	r0, r3
 80049e4:	f004 f856 	bl	8008a94 <USB_ReadInterrupts>
 80049e8:	4603      	mov	r3, r0
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b08      	cmp	r3, #8
 80049f0:	d106      	bne.n	8004a00 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f007 f934 	bl	800bc60 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2208      	movs	r2, #8
 80049fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f004 f845 	bl	8008a94 <USB_ReadInterrupts>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a10:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004a14:	d139      	bne.n	8004a8a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f004 fde0 	bl	80095e0 <USB_HC_ReadInterrupt>
 8004a20:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
 8004a26:	e025      	b.n	8004a74 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004a28:	697b      	ldr	r3, [r7, #20]
 8004a2a:	f003 030f 	and.w	r3, r3, #15
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	fa22 f303 	lsr.w	r3, r2, r3
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d018      	beq.n	8004a6e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a4e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a52:	d106      	bne.n	8004a62 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4619      	mov	r1, r3
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f905 	bl	8004c6a <HCD_HC_IN_IRQHandler>
 8004a60:	e005      	b.n	8004a6e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 ff67 	bl	800593c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	3301      	adds	r3, #1
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	795b      	ldrb	r3, [r3, #5]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d3d3      	bcc.n	8004a28 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f004 f800 	bl	8008a94 <USB_ReadInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f003 0310 	and.w	r3, r3, #16
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d101      	bne.n	8004aa2 <HAL_HCD_IRQHandler+0x1ea>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <HAL_HCD_IRQHandler+0x1ec>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d014      	beq.n	8004ad2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0210 	bic.w	r2, r2, #16
 8004ab6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f001 fbfe 	bl	80062ba <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	699a      	ldr	r2, [r3, #24]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f042 0210 	orr.w	r2, r2, #16
 8004acc:	619a      	str	r2, [r3, #24]
 8004ace:	e000      	b.n	8004ad2 <HAL_HCD_IRQHandler+0x21a>
      return;
 8004ad0:	bf00      	nop
    }
  }
}
 8004ad2:	3718      	adds	r7, #24
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b082      	sub	sp, #8
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_HCD_Start+0x16>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e013      	b.n	8004b16 <HAL_HCD_Start+0x3e>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2101      	movs	r1, #1
 8004afc:	4618      	mov	r0, r3
 8004afe:	f004 f968 	bl	8008dd2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f003 fe60 	bl	80087cc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004b14:	2300      	movs	r3, #0
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3708      	adds	r7, #8
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d101      	bne.n	8004b34 <HAL_HCD_Stop+0x16>
 8004b30:	2302      	movs	r3, #2
 8004b32:	e00d      	b.n	8004b50 <HAL_HCD_Stop+0x32>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4618      	mov	r0, r3
 8004b42:	f004 febb 	bl	80098bc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3708      	adds	r7, #8
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4618      	mov	r0, r3
 8004b66:	f004 f90a 	bl	8008d7e <USB_ResetPort>
 8004b6a:	4603      	mov	r3, r0
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3708      	adds	r7, #8
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004b80:	78fa      	ldrb	r2, [r7, #3]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	334c      	adds	r3, #76	@ 0x4c
 8004b90:	781b      	ldrb	r3, [r3, #0]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	370c      	adds	r7, #12
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr

08004b9e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004b9e:	b480      	push	{r7}
 8004ba0:	b083      	sub	sp, #12
 8004ba2:	af00      	add	r7, sp, #0
 8004ba4:	6078      	str	r0, [r7, #4]
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8004baa:	78fa      	ldrb	r2, [r7, #3]
 8004bac:	6879      	ldr	r1, [r7, #4]
 8004bae:	4613      	mov	r3, r2
 8004bb0:	011b      	lsls	r3, r3, #4
 8004bb2:	1a9b      	subs	r3, r3, r2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	3338      	adds	r3, #56	@ 0x38
 8004bba:	681b      	ldr	r3, [r3, #0]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f004 f94c 	bl	8008e72 <USB_GetCurrentFrame>
 8004bda:	4603      	mov	r3, r0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b082      	sub	sp, #8
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f004 f927 	bl	8008e44 <USB_GetHostSpeed>
 8004bf6:	4603      	mov	r3, r0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
 8004c08:	460b      	mov	r3, r1
 8004c0a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004c0c:	78fa      	ldrb	r2, [r7, #3]
 8004c0e:	6879      	ldr	r1, [r7, #4]
 8004c10:	4613      	mov	r3, r2
 8004c12:	011b      	lsls	r3, r3, #4
 8004c14:	1a9b      	subs	r3, r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	440b      	add	r3, r1
 8004c1a:	331a      	adds	r3, #26
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004c20:	78fa      	ldrb	r2, [r7, #3]
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	4613      	mov	r3, r2
 8004c26:	011b      	lsls	r3, r3, #4
 8004c28:	1a9b      	subs	r3, r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	440b      	add	r3, r1
 8004c2e:	331b      	adds	r3, #27
 8004c30:	2200      	movs	r2, #0
 8004c32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004c34:	78fa      	ldrb	r2, [r7, #3]
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	4613      	mov	r3, r2
 8004c3a:	011b      	lsls	r3, r3, #4
 8004c3c:	1a9b      	subs	r3, r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	3325      	adds	r3, #37	@ 0x25
 8004c44:	2200      	movs	r2, #0
 8004c46:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8004c48:	78fa      	ldrb	r2, [r7, #3]
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	4613      	mov	r3, r2
 8004c4e:	011b      	lsls	r3, r3, #4
 8004c50:	1a9b      	subs	r3, r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	440b      	add	r3, r1
 8004c56:	3324      	adds	r3, #36	@ 0x24
 8004c58:	2200      	movs	r2, #0
 8004c5a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b086      	sub	sp, #24
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
 8004c72:	460b      	mov	r3, r1
 8004c74:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	78fa      	ldrb	r2, [r7, #3]
 8004c86:	4611      	mov	r1, r2
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f003 ff16 	bl	8008aba <USB_ReadChInterrupts>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d11a      	bne.n	8004cce <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004c98:	78fb      	ldrb	r3, [r7, #3]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ca4:	461a      	mov	r2, r3
 8004ca6:	2304      	movs	r3, #4
 8004ca8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	6879      	ldr	r1, [r7, #4]
 8004cae:	4613      	mov	r3, r2
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	440b      	add	r3, r1
 8004cb8:	334d      	adds	r3, #77	@ 0x4d
 8004cba:	2207      	movs	r2, #7
 8004cbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	78fa      	ldrb	r2, [r7, #3]
 8004cc4:	4611      	mov	r1, r2
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f004 fc9b 	bl	8009602 <USB_HC_Halt>
 8004ccc:	e09e      	b.n	8004e0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	78fa      	ldrb	r2, [r7, #3]
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f003 feef 	bl	8008aba <USB_ReadChInterrupts>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ce2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ce6:	d11b      	bne.n	8004d20 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8004cfc:	78fa      	ldrb	r2, [r7, #3]
 8004cfe:	6879      	ldr	r1, [r7, #4]
 8004d00:	4613      	mov	r3, r2
 8004d02:	011b      	lsls	r3, r3, #4
 8004d04:	1a9b      	subs	r3, r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	440b      	add	r3, r1
 8004d0a:	334d      	adds	r3, #77	@ 0x4d
 8004d0c:	2208      	movs	r2, #8
 8004d0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	78fa      	ldrb	r2, [r7, #3]
 8004d16:	4611      	mov	r1, r2
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f004 fc72 	bl	8009602 <USB_HC_Halt>
 8004d1e:	e075      	b.n	8004e0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	78fa      	ldrb	r2, [r7, #3]
 8004d26:	4611      	mov	r1, r2
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f003 fec6 	bl	8008aba <USB_ReadChInterrupts>
 8004d2e:	4603      	mov	r3, r0
 8004d30:	f003 0308 	and.w	r3, r3, #8
 8004d34:	2b08      	cmp	r3, #8
 8004d36:	d11a      	bne.n	8004d6e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	2308      	movs	r3, #8
 8004d48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004d4a:	78fa      	ldrb	r2, [r7, #3]
 8004d4c:	6879      	ldr	r1, [r7, #4]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	011b      	lsls	r3, r3, #4
 8004d52:	1a9b      	subs	r3, r3, r2
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	440b      	add	r3, r1
 8004d58:	334d      	adds	r3, #77	@ 0x4d
 8004d5a:	2206      	movs	r2, #6
 8004d5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	78fa      	ldrb	r2, [r7, #3]
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f004 fc4b 	bl	8009602 <USB_HC_Halt>
 8004d6c:	e04e      	b.n	8004e0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	78fa      	ldrb	r2, [r7, #3]
 8004d74:	4611      	mov	r1, r2
 8004d76:	4618      	mov	r0, r3
 8004d78:	f003 fe9f 	bl	8008aba <USB_ReadChInterrupts>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d86:	d11b      	bne.n	8004dc0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d94:	461a      	mov	r2, r3
 8004d96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	334d      	adds	r3, #77	@ 0x4d
 8004dac:	2209      	movs	r2, #9
 8004dae:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	78fa      	ldrb	r2, [r7, #3]
 8004db6:	4611      	mov	r1, r2
 8004db8:	4618      	mov	r0, r3
 8004dba:	f004 fc22 	bl	8009602 <USB_HC_Halt>
 8004dbe:	e025      	b.n	8004e0c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	78fa      	ldrb	r2, [r7, #3]
 8004dc6:	4611      	mov	r1, r2
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f003 fe76 	bl	8008aba <USB_ReadChInterrupts>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd4:	2b80      	cmp	r3, #128	@ 0x80
 8004dd6:	d119      	bne.n	8004e0c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004dd8:	78fb      	ldrb	r3, [r7, #3]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de4:	461a      	mov	r2, r3
 8004de6:	2380      	movs	r3, #128	@ 0x80
 8004de8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004dea:	78fa      	ldrb	r2, [r7, #3]
 8004dec:	6879      	ldr	r1, [r7, #4]
 8004dee:	4613      	mov	r3, r2
 8004df0:	011b      	lsls	r3, r3, #4
 8004df2:	1a9b      	subs	r3, r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	440b      	add	r3, r1
 8004df8:	334d      	adds	r3, #77	@ 0x4d
 8004dfa:	2207      	movs	r2, #7
 8004dfc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	78fa      	ldrb	r2, [r7, #3]
 8004e04:	4611      	mov	r1, r2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f004 fbfb 	bl	8009602 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	78fa      	ldrb	r2, [r7, #3]
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f003 fe50 	bl	8008aba <USB_ReadChInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e24:	d112      	bne.n	8004e4c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	78fa      	ldrb	r2, [r7, #3]
 8004e2c:	4611      	mov	r1, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f004 fbe7 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004e34:	78fb      	ldrb	r3, [r7, #3]
 8004e36:	015a      	lsls	r2, r3, #5
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e40:	461a      	mov	r2, r3
 8004e42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e46:	6093      	str	r3, [r2, #8]
 8004e48:	f000 bd75 	b.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	78fa      	ldrb	r2, [r7, #3]
 8004e52:	4611      	mov	r1, r2
 8004e54:	4618      	mov	r0, r3
 8004e56:	f003 fe30 	bl	8008aba <USB_ReadChInterrupts>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	f040 8128 	bne.w	80050b6 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	015a      	lsls	r2, r3, #5
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e72:	461a      	mov	r2, r3
 8004e74:	2320      	movs	r3, #32
 8004e76:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004e78:	78fa      	ldrb	r2, [r7, #3]
 8004e7a:	6879      	ldr	r1, [r7, #4]
 8004e7c:	4613      	mov	r3, r2
 8004e7e:	011b      	lsls	r3, r3, #4
 8004e80:	1a9b      	subs	r3, r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	440b      	add	r3, r1
 8004e86:	331b      	adds	r3, #27
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b01      	cmp	r3, #1
 8004e8c:	d119      	bne.n	8004ec2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004e8e:	78fa      	ldrb	r2, [r7, #3]
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	4613      	mov	r3, r2
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	1a9b      	subs	r3, r3, r2
 8004e98:	009b      	lsls	r3, r3, #2
 8004e9a:	440b      	add	r3, r1
 8004e9c:	331b      	adds	r3, #27
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	78fa      	ldrb	r2, [r7, #3]
 8004eb2:	0151      	lsls	r1, r2, #5
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	440a      	add	r2, r1
 8004eb8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ec0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	799b      	ldrb	r3, [r3, #6]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d01b      	beq.n	8004f02 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3330      	adds	r3, #48	@ 0x30
 8004eda:	6819      	ldr	r1, [r3, #0]
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	015a      	lsls	r2, r3, #5
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	4413      	add	r3, r2
 8004ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ee8:	691b      	ldr	r3, [r3, #16]
 8004eea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004eee:	78fa      	ldrb	r2, [r7, #3]
 8004ef0:	1ac9      	subs	r1, r1, r3
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	011b      	lsls	r3, r3, #4
 8004ef8:	1a9b      	subs	r3, r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4403      	add	r3, r0
 8004efe:	3338      	adds	r3, #56	@ 0x38
 8004f00:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8004f02:	78fa      	ldrb	r2, [r7, #3]
 8004f04:	6879      	ldr	r1, [r7, #4]
 8004f06:	4613      	mov	r3, r2
 8004f08:	011b      	lsls	r3, r3, #4
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	440b      	add	r3, r1
 8004f10:	334d      	adds	r3, #77	@ 0x4d
 8004f12:	2201      	movs	r2, #1
 8004f14:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8004f16:	78fa      	ldrb	r2, [r7, #3]
 8004f18:	6879      	ldr	r1, [r7, #4]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	1a9b      	subs	r3, r3, r2
 8004f20:	009b      	lsls	r3, r3, #2
 8004f22:	440b      	add	r3, r1
 8004f24:	3344      	adds	r3, #68	@ 0x44
 8004f26:	2200      	movs	r2, #0
 8004f28:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004f2a:	78fb      	ldrb	r3, [r7, #3]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f36:	461a      	mov	r2, r3
 8004f38:	2301      	movs	r3, #1
 8004f3a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f3c:	78fa      	ldrb	r2, [r7, #3]
 8004f3e:	6879      	ldr	r1, [r7, #4]
 8004f40:	4613      	mov	r3, r2
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	1a9b      	subs	r3, r3, r2
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	440b      	add	r3, r1
 8004f4a:	3326      	adds	r3, #38	@ 0x26
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00a      	beq.n	8004f68 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004f52:	78fa      	ldrb	r2, [r7, #3]
 8004f54:	6879      	ldr	r1, [r7, #4]
 8004f56:	4613      	mov	r3, r2
 8004f58:	011b      	lsls	r3, r3, #4
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	440b      	add	r3, r1
 8004f60:	3326      	adds	r3, #38	@ 0x26
 8004f62:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004f64:	2b02      	cmp	r3, #2
 8004f66:	d110      	bne.n	8004f8a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	78fa      	ldrb	r2, [r7, #3]
 8004f6e:	4611      	mov	r1, r2
 8004f70:	4618      	mov	r0, r3
 8004f72:	f004 fb46 	bl	8009602 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004f76:	78fb      	ldrb	r3, [r7, #3]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f82:	461a      	mov	r2, r3
 8004f84:	2310      	movs	r3, #16
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	e03d      	b.n	8005006 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004f8a:	78fa      	ldrb	r2, [r7, #3]
 8004f8c:	6879      	ldr	r1, [r7, #4]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	011b      	lsls	r3, r3, #4
 8004f92:	1a9b      	subs	r3, r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	440b      	add	r3, r1
 8004f98:	3326      	adds	r3, #38	@ 0x26
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	2b03      	cmp	r3, #3
 8004f9e:	d00a      	beq.n	8004fb6 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	4613      	mov	r3, r2
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	1a9b      	subs	r3, r3, r2
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	440b      	add	r3, r1
 8004fae:	3326      	adds	r3, #38	@ 0x26
 8004fb0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d127      	bne.n	8005006 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004fb6:	78fb      	ldrb	r3, [r7, #3]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	78fa      	ldrb	r2, [r7, #3]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fd0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004fd4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004fd6:	78fa      	ldrb	r2, [r7, #3]
 8004fd8:	6879      	ldr	r1, [r7, #4]
 8004fda:	4613      	mov	r3, r2
 8004fdc:	011b      	lsls	r3, r3, #4
 8004fde:	1a9b      	subs	r3, r3, r2
 8004fe0:	009b      	lsls	r3, r3, #2
 8004fe2:	440b      	add	r3, r1
 8004fe4:	334c      	adds	r3, #76	@ 0x4c
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004fea:	78fa      	ldrb	r2, [r7, #3]
 8004fec:	6879      	ldr	r1, [r7, #4]
 8004fee:	4613      	mov	r3, r2
 8004ff0:	011b      	lsls	r3, r3, #4
 8004ff2:	1a9b      	subs	r3, r3, r2
 8004ff4:	009b      	lsls	r3, r3, #2
 8004ff6:	440b      	add	r3, r1
 8004ff8:	334c      	adds	r3, #76	@ 0x4c
 8004ffa:	781a      	ldrb	r2, [r3, #0]
 8004ffc:	78fb      	ldrb	r3, [r7, #3]
 8004ffe:	4619      	mov	r1, r3
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f006 fe57 	bl	800bcb4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	799b      	ldrb	r3, [r3, #6]
 800500a:	2b01      	cmp	r3, #1
 800500c:	d13b      	bne.n	8005086 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	3338      	adds	r3, #56	@ 0x38
 800501e:	6819      	ldr	r1, [r3, #0]
 8005020:	78fa      	ldrb	r2, [r7, #3]
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	4613      	mov	r3, r2
 8005026:	011b      	lsls	r3, r3, #4
 8005028:	1a9b      	subs	r3, r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	4403      	add	r3, r0
 800502e:	3328      	adds	r3, #40	@ 0x28
 8005030:	881b      	ldrh	r3, [r3, #0]
 8005032:	440b      	add	r3, r1
 8005034:	1e59      	subs	r1, r3, #1
 8005036:	78fa      	ldrb	r2, [r7, #3]
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4613      	mov	r3, r2
 800503c:	011b      	lsls	r3, r3, #4
 800503e:	1a9b      	subs	r3, r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4403      	add	r3, r0
 8005044:	3328      	adds	r3, #40	@ 0x28
 8005046:	881b      	ldrh	r3, [r3, #0]
 8005048:	fbb1 f3f3 	udiv	r3, r1, r3
 800504c:	f003 0301 	and.w	r3, r3, #1
 8005050:	2b00      	cmp	r3, #0
 8005052:	f000 8470 	beq.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8005056:	78fa      	ldrb	r2, [r7, #3]
 8005058:	6879      	ldr	r1, [r7, #4]
 800505a:	4613      	mov	r3, r2
 800505c:	011b      	lsls	r3, r3, #4
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	009b      	lsls	r3, r3, #2
 8005062:	440b      	add	r3, r1
 8005064:	333c      	adds	r3, #60	@ 0x3c
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	78fa      	ldrb	r2, [r7, #3]
 800506a:	f083 0301 	eor.w	r3, r3, #1
 800506e:	b2d8      	uxtb	r0, r3
 8005070:	6879      	ldr	r1, [r7, #4]
 8005072:	4613      	mov	r3, r2
 8005074:	011b      	lsls	r3, r3, #4
 8005076:	1a9b      	subs	r3, r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	440b      	add	r3, r1
 800507c:	333c      	adds	r3, #60	@ 0x3c
 800507e:	4602      	mov	r2, r0
 8005080:	701a      	strb	r2, [r3, #0]
 8005082:	f000 bc58 	b.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	6879      	ldr	r1, [r7, #4]
 800508a:	4613      	mov	r3, r2
 800508c:	011b      	lsls	r3, r3, #4
 800508e:	1a9b      	subs	r3, r3, r2
 8005090:	009b      	lsls	r3, r3, #2
 8005092:	440b      	add	r3, r1
 8005094:	333c      	adds	r3, #60	@ 0x3c
 8005096:	781b      	ldrb	r3, [r3, #0]
 8005098:	78fa      	ldrb	r2, [r7, #3]
 800509a:	f083 0301 	eor.w	r3, r3, #1
 800509e:	b2d8      	uxtb	r0, r3
 80050a0:	6879      	ldr	r1, [r7, #4]
 80050a2:	4613      	mov	r3, r2
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	1a9b      	subs	r3, r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	333c      	adds	r3, #60	@ 0x3c
 80050ae:	4602      	mov	r2, r0
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	f000 bc40 	b.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	78fa      	ldrb	r2, [r7, #3]
 80050bc:	4611      	mov	r1, r2
 80050be:	4618      	mov	r0, r3
 80050c0:	f003 fcfb 	bl	8008aba <USB_ReadChInterrupts>
 80050c4:	4603      	mov	r3, r0
 80050c6:	f003 0320 	and.w	r3, r3, #32
 80050ca:	2b20      	cmp	r3, #32
 80050cc:	d131      	bne.n	8005132 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80050ce:	78fb      	ldrb	r3, [r7, #3]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050da:	461a      	mov	r2, r3
 80050dc:	2320      	movs	r3, #32
 80050de:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80050e0:	78fa      	ldrb	r2, [r7, #3]
 80050e2:	6879      	ldr	r1, [r7, #4]
 80050e4:	4613      	mov	r3, r2
 80050e6:	011b      	lsls	r3, r3, #4
 80050e8:	1a9b      	subs	r3, r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	440b      	add	r3, r1
 80050ee:	331a      	adds	r3, #26
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	f040 841f 	bne.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80050f8:	78fa      	ldrb	r2, [r7, #3]
 80050fa:	6879      	ldr	r1, [r7, #4]
 80050fc:	4613      	mov	r3, r2
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	1a9b      	subs	r3, r3, r2
 8005102:	009b      	lsls	r3, r3, #2
 8005104:	440b      	add	r3, r1
 8005106:	331b      	adds	r3, #27
 8005108:	2201      	movs	r2, #1
 800510a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800510c:	78fa      	ldrb	r2, [r7, #3]
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	1a9b      	subs	r3, r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	334d      	adds	r3, #77	@ 0x4d
 800511c:	2203      	movs	r2, #3
 800511e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	4611      	mov	r1, r2
 8005128:	4618      	mov	r0, r3
 800512a:	f004 fa6a 	bl	8009602 <USB_HC_Halt>
 800512e:	f000 bc02 	b.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	78fa      	ldrb	r2, [r7, #3]
 8005138:	4611      	mov	r1, r2
 800513a:	4618      	mov	r0, r3
 800513c:	f003 fcbd 	bl	8008aba <USB_ReadChInterrupts>
 8005140:	4603      	mov	r3, r0
 8005142:	f003 0302 	and.w	r3, r3, #2
 8005146:	2b02      	cmp	r3, #2
 8005148:	f040 8305 	bne.w	8005756 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800514c:	78fb      	ldrb	r3, [r7, #3]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005158:	461a      	mov	r2, r3
 800515a:	2302      	movs	r3, #2
 800515c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	6879      	ldr	r1, [r7, #4]
 8005162:	4613      	mov	r3, r2
 8005164:	011b      	lsls	r3, r3, #4
 8005166:	1a9b      	subs	r3, r3, r2
 8005168:	009b      	lsls	r3, r3, #2
 800516a:	440b      	add	r3, r1
 800516c:	334d      	adds	r3, #77	@ 0x4d
 800516e:	781b      	ldrb	r3, [r3, #0]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d114      	bne.n	800519e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	334d      	adds	r3, #77	@ 0x4d
 8005184:	2202      	movs	r2, #2
 8005186:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	334c      	adds	r3, #76	@ 0x4c
 8005198:	2201      	movs	r2, #1
 800519a:	701a      	strb	r2, [r3, #0]
 800519c:	e2cc      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	334d      	adds	r3, #77	@ 0x4d
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d114      	bne.n	80051de <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80051b4:	78fa      	ldrb	r2, [r7, #3]
 80051b6:	6879      	ldr	r1, [r7, #4]
 80051b8:	4613      	mov	r3, r2
 80051ba:	011b      	lsls	r3, r3, #4
 80051bc:	1a9b      	subs	r3, r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	334d      	adds	r3, #77	@ 0x4d
 80051c4:	2202      	movs	r2, #2
 80051c6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80051c8:	78fa      	ldrb	r2, [r7, #3]
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	011b      	lsls	r3, r3, #4
 80051d0:	1a9b      	subs	r3, r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	334c      	adds	r3, #76	@ 0x4c
 80051d8:	2205      	movs	r2, #5
 80051da:	701a      	strb	r2, [r3, #0]
 80051dc:	e2ac      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80051de:	78fa      	ldrb	r2, [r7, #3]
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	4613      	mov	r3, r2
 80051e4:	011b      	lsls	r3, r3, #4
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	440b      	add	r3, r1
 80051ec:	334d      	adds	r3, #77	@ 0x4d
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	2b07      	cmp	r3, #7
 80051f2:	d00b      	beq.n	800520c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80051f4:	78fa      	ldrb	r2, [r7, #3]
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4613      	mov	r3, r2
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	1a9b      	subs	r3, r3, r2
 80051fe:	009b      	lsls	r3, r3, #2
 8005200:	440b      	add	r3, r1
 8005202:	334d      	adds	r3, #77	@ 0x4d
 8005204:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005206:	2b09      	cmp	r3, #9
 8005208:	f040 80a6 	bne.w	8005358 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800520c:	78fa      	ldrb	r2, [r7, #3]
 800520e:	6879      	ldr	r1, [r7, #4]
 8005210:	4613      	mov	r3, r2
 8005212:	011b      	lsls	r3, r3, #4
 8005214:	1a9b      	subs	r3, r3, r2
 8005216:	009b      	lsls	r3, r3, #2
 8005218:	440b      	add	r3, r1
 800521a:	334d      	adds	r3, #77	@ 0x4d
 800521c:	2202      	movs	r2, #2
 800521e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005220:	78fa      	ldrb	r2, [r7, #3]
 8005222:	6879      	ldr	r1, [r7, #4]
 8005224:	4613      	mov	r3, r2
 8005226:	011b      	lsls	r3, r3, #4
 8005228:	1a9b      	subs	r3, r3, r2
 800522a:	009b      	lsls	r3, r3, #2
 800522c:	440b      	add	r3, r1
 800522e:	3344      	adds	r3, #68	@ 0x44
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	1c59      	adds	r1, r3, #1
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4613      	mov	r3, r2
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	1a9b      	subs	r3, r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4403      	add	r3, r0
 8005240:	3344      	adds	r3, #68	@ 0x44
 8005242:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	011b      	lsls	r3, r3, #4
 800524c:	1a9b      	subs	r3, r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	3344      	adds	r3, #68	@ 0x44
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d943      	bls.n	80052e2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800525a:	78fa      	ldrb	r2, [r7, #3]
 800525c:	6879      	ldr	r1, [r7, #4]
 800525e:	4613      	mov	r3, r2
 8005260:	011b      	lsls	r3, r3, #4
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	440b      	add	r3, r1
 8005268:	3344      	adds	r3, #68	@ 0x44
 800526a:	2200      	movs	r2, #0
 800526c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 800526e:	78fa      	ldrb	r2, [r7, #3]
 8005270:	6879      	ldr	r1, [r7, #4]
 8005272:	4613      	mov	r3, r2
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	1a9b      	subs	r3, r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	440b      	add	r3, r1
 800527c:	331a      	adds	r3, #26
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d123      	bne.n	80052cc <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	011b      	lsls	r3, r3, #4
 800528c:	1a9b      	subs	r3, r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	331b      	adds	r3, #27
 8005294:	2200      	movs	r2, #0
 8005296:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8005298:	78fa      	ldrb	r2, [r7, #3]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	331c      	adds	r3, #28
 80052a8:	2200      	movs	r2, #0
 80052aa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052ac:	78fb      	ldrb	r3, [r7, #3]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	78fa      	ldrb	r2, [r7, #3]
 80052bc:	0151      	lsls	r1, r2, #5
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	440a      	add	r2, r1
 80052c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052ca:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80052cc:	78fa      	ldrb	r2, [r7, #3]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	1a9b      	subs	r3, r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	334c      	adds	r3, #76	@ 0x4c
 80052dc:	2204      	movs	r2, #4
 80052de:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052e0:	e229      	b.n	8005736 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	6879      	ldr	r1, [r7, #4]
 80052e6:	4613      	mov	r3, r2
 80052e8:	011b      	lsls	r3, r3, #4
 80052ea:	1a9b      	subs	r3, r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	334c      	adds	r3, #76	@ 0x4c
 80052f2:	2202      	movs	r2, #2
 80052f4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80052f6:	78fa      	ldrb	r2, [r7, #3]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	011b      	lsls	r3, r3, #4
 80052fe:	1a9b      	subs	r3, r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	3326      	adds	r3, #38	@ 0x26
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00b      	beq.n	8005324 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800530c:	78fa      	ldrb	r2, [r7, #3]
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	4613      	mov	r3, r2
 8005312:	011b      	lsls	r3, r3, #4
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	3326      	adds	r3, #38	@ 0x26
 800531c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800531e:	2b02      	cmp	r3, #2
 8005320:	f040 8209 	bne.w	8005736 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800533a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005342:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005356:	e1ee      	b.n	8005736 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005358:	78fa      	ldrb	r2, [r7, #3]
 800535a:	6879      	ldr	r1, [r7, #4]
 800535c:	4613      	mov	r3, r2
 800535e:	011b      	lsls	r3, r3, #4
 8005360:	1a9b      	subs	r3, r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	440b      	add	r3, r1
 8005366:	334d      	adds	r3, #77	@ 0x4d
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	2b05      	cmp	r3, #5
 800536c:	f040 80c8 	bne.w	8005500 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	334d      	adds	r3, #77	@ 0x4d
 8005380:	2202      	movs	r2, #2
 8005382:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	331b      	adds	r3, #27
 8005394:	781b      	ldrb	r3, [r3, #0]
 8005396:	2b01      	cmp	r3, #1
 8005398:	f040 81ce 	bne.w	8005738 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	1a9b      	subs	r3, r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	3326      	adds	r3, #38	@ 0x26
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	2b03      	cmp	r3, #3
 80053b0:	d16b      	bne.n	800548a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80053b2:	78fa      	ldrb	r2, [r7, #3]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	011b      	lsls	r3, r3, #4
 80053ba:	1a9b      	subs	r3, r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	3348      	adds	r3, #72	@ 0x48
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	4613      	mov	r3, r2
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	009b      	lsls	r3, r3, #2
 80053d0:	4403      	add	r3, r0
 80053d2:	3348      	adds	r3, #72	@ 0x48
 80053d4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80053d6:	78fa      	ldrb	r2, [r7, #3]
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	011b      	lsls	r3, r3, #4
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	3348      	adds	r3, #72	@ 0x48
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d943      	bls.n	8005474 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	3348      	adds	r3, #72	@ 0x48
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	331b      	adds	r3, #27
 8005410:	2200      	movs	r2, #0
 8005412:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	3344      	adds	r3, #68	@ 0x44
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2b02      	cmp	r3, #2
 8005428:	d809      	bhi.n	800543e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800542a:	78fa      	ldrb	r2, [r7, #3]
 800542c:	6879      	ldr	r1, [r7, #4]
 800542e:	4613      	mov	r3, r2
 8005430:	011b      	lsls	r3, r3, #4
 8005432:	1a9b      	subs	r3, r3, r2
 8005434:	009b      	lsls	r3, r3, #2
 8005436:	440b      	add	r3, r1
 8005438:	331c      	adds	r3, #28
 800543a:	2201      	movs	r2, #1
 800543c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	015a      	lsls	r2, r3, #5
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	4413      	add	r3, r2
 8005446:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	78fa      	ldrb	r2, [r7, #3]
 800544e:	0151      	lsls	r1, r2, #5
 8005450:	693a      	ldr	r2, [r7, #16]
 8005452:	440a      	add	r2, r1
 8005454:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005458:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800545c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	334c      	adds	r3, #76	@ 0x4c
 800546e:	2204      	movs	r2, #4
 8005470:	701a      	strb	r2, [r3, #0]
 8005472:	e014      	b.n	800549e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005474:	78fa      	ldrb	r2, [r7, #3]
 8005476:	6879      	ldr	r1, [r7, #4]
 8005478:	4613      	mov	r3, r2
 800547a:	011b      	lsls	r3, r3, #4
 800547c:	1a9b      	subs	r3, r3, r2
 800547e:	009b      	lsls	r3, r3, #2
 8005480:	440b      	add	r3, r1
 8005482:	334c      	adds	r3, #76	@ 0x4c
 8005484:	2202      	movs	r2, #2
 8005486:	701a      	strb	r2, [r3, #0]
 8005488:	e009      	b.n	800549e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800548a:	78fa      	ldrb	r2, [r7, #3]
 800548c:	6879      	ldr	r1, [r7, #4]
 800548e:	4613      	mov	r3, r2
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	1a9b      	subs	r3, r3, r2
 8005494:	009b      	lsls	r3, r3, #2
 8005496:	440b      	add	r3, r1
 8005498:	334c      	adds	r3, #76	@ 0x4c
 800549a:	2202      	movs	r2, #2
 800549c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3326      	adds	r3, #38	@ 0x26
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d00b      	beq.n	80054cc <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80054b4:	78fa      	ldrb	r2, [r7, #3]
 80054b6:	6879      	ldr	r1, [r7, #4]
 80054b8:	4613      	mov	r3, r2
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	440b      	add	r3, r1
 80054c2:	3326      	adds	r3, #38	@ 0x26
 80054c4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	f040 8136 	bne.w	8005738 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80054cc:	78fb      	ldrb	r3, [r7, #3]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80054e2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80054ea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80054ec:	78fb      	ldrb	r3, [r7, #3]
 80054ee:	015a      	lsls	r2, r3, #5
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	4413      	add	r3, r2
 80054f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054f8:	461a      	mov	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	6013      	str	r3, [r2, #0]
 80054fe:	e11b      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005500:	78fa      	ldrb	r2, [r7, #3]
 8005502:	6879      	ldr	r1, [r7, #4]
 8005504:	4613      	mov	r3, r2
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	1a9b      	subs	r3, r3, r2
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	440b      	add	r3, r1
 800550e:	334d      	adds	r3, #77	@ 0x4d
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	2b03      	cmp	r3, #3
 8005514:	f040 8081 	bne.w	800561a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005518:	78fa      	ldrb	r2, [r7, #3]
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	4613      	mov	r3, r2
 800551e:	011b      	lsls	r3, r3, #4
 8005520:	1a9b      	subs	r3, r3, r2
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	440b      	add	r3, r1
 8005526:	334d      	adds	r3, #77	@ 0x4d
 8005528:	2202      	movs	r2, #2
 800552a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800552c:	78fa      	ldrb	r2, [r7, #3]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	331b      	adds	r3, #27
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b01      	cmp	r3, #1
 8005540:	f040 80fa 	bne.w	8005738 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	6879      	ldr	r1, [r7, #4]
 8005548:	4613      	mov	r3, r2
 800554a:	011b      	lsls	r3, r3, #4
 800554c:	1a9b      	subs	r3, r3, r2
 800554e:	009b      	lsls	r3, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	334c      	adds	r3, #76	@ 0x4c
 8005554:	2202      	movs	r2, #2
 8005556:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005558:	78fb      	ldrb	r3, [r7, #3]
 800555a:	015a      	lsls	r2, r3, #5
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	4413      	add	r3, r2
 8005560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	78fa      	ldrb	r2, [r7, #3]
 8005568:	0151      	lsls	r1, r2, #5
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	440a      	add	r2, r1
 800556e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005572:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005576:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8005578:	78fb      	ldrb	r3, [r7, #3]
 800557a:	015a      	lsls	r2, r3, #5
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	4413      	add	r3, r2
 8005580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	78fa      	ldrb	r2, [r7, #3]
 8005588:	0151      	lsls	r1, r2, #5
 800558a:	693a      	ldr	r2, [r7, #16]
 800558c:	440a      	add	r2, r1
 800558e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005592:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005596:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8005598:	78fb      	ldrb	r3, [r7, #3]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	78fa      	ldrb	r2, [r7, #3]
 80055a8:	0151      	lsls	r1, r2, #5
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	440a      	add	r2, r1
 80055ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055b2:	f023 0320 	bic.w	r3, r3, #32
 80055b6:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	3326      	adds	r3, #38	@ 0x26
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80055ce:	78fa      	ldrb	r2, [r7, #3]
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	4613      	mov	r3, r2
 80055d4:	011b      	lsls	r3, r3, #4
 80055d6:	1a9b      	subs	r3, r3, r2
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	440b      	add	r3, r1
 80055dc:	3326      	adds	r3, #38	@ 0x26
 80055de:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	f040 80a9 	bne.w	8005738 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80055e6:	78fb      	ldrb	r3, [r7, #3]
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	693b      	ldr	r3, [r7, #16]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80055fc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005604:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6013      	str	r3, [r2, #0]
 8005618:	e08e      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800561a:	78fa      	ldrb	r2, [r7, #3]
 800561c:	6879      	ldr	r1, [r7, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	011b      	lsls	r3, r3, #4
 8005622:	1a9b      	subs	r3, r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	440b      	add	r3, r1
 8005628:	334d      	adds	r3, #77	@ 0x4d
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	2b04      	cmp	r3, #4
 800562e:	d143      	bne.n	80056b8 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005630:	78fa      	ldrb	r2, [r7, #3]
 8005632:	6879      	ldr	r1, [r7, #4]
 8005634:	4613      	mov	r3, r2
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	1a9b      	subs	r3, r3, r2
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	440b      	add	r3, r1
 800563e:	334d      	adds	r3, #77	@ 0x4d
 8005640:	2202      	movs	r2, #2
 8005642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005644:	78fa      	ldrb	r2, [r7, #3]
 8005646:	6879      	ldr	r1, [r7, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	011b      	lsls	r3, r3, #4
 800564c:	1a9b      	subs	r3, r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	440b      	add	r3, r1
 8005652:	334c      	adds	r3, #76	@ 0x4c
 8005654:	2202      	movs	r2, #2
 8005656:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005658:	78fa      	ldrb	r2, [r7, #3]
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	1a9b      	subs	r3, r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3326      	adds	r3, #38	@ 0x26
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00a      	beq.n	8005684 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800566e:	78fa      	ldrb	r2, [r7, #3]
 8005670:	6879      	ldr	r1, [r7, #4]
 8005672:	4613      	mov	r3, r2
 8005674:	011b      	lsls	r3, r3, #4
 8005676:	1a9b      	subs	r3, r3, r2
 8005678:	009b      	lsls	r3, r3, #2
 800567a:	440b      	add	r3, r1
 800567c:	3326      	adds	r3, #38	@ 0x26
 800567e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005680:	2b02      	cmp	r3, #2
 8005682:	d159      	bne.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005684:	78fb      	ldrb	r3, [r7, #3]
 8005686:	015a      	lsls	r2, r3, #5
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	4413      	add	r3, r2
 800568c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800569a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80056a2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80056a4:	78fb      	ldrb	r3, [r7, #3]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056b0:	461a      	mov	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	e03f      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80056b8:	78fa      	ldrb	r2, [r7, #3]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	1a9b      	subs	r3, r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	334d      	adds	r3, #77	@ 0x4d
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	2b08      	cmp	r3, #8
 80056cc:	d126      	bne.n	800571c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	334d      	adds	r3, #77	@ 0x4d
 80056de:	2202      	movs	r2, #2
 80056e0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	3344      	adds	r3, #68	@ 0x44
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	1c59      	adds	r1, r3, #1
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4403      	add	r3, r0
 8005702:	3344      	adds	r3, #68	@ 0x44
 8005704:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8005706:	78fa      	ldrb	r2, [r7, #3]
 8005708:	6879      	ldr	r1, [r7, #4]
 800570a:	4613      	mov	r3, r2
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	1a9b      	subs	r3, r3, r2
 8005710:	009b      	lsls	r3, r3, #2
 8005712:	440b      	add	r3, r1
 8005714:	334c      	adds	r3, #76	@ 0x4c
 8005716:	2204      	movs	r2, #4
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	e00d      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800571c:	78fa      	ldrb	r2, [r7, #3]
 800571e:	6879      	ldr	r1, [r7, #4]
 8005720:	4613      	mov	r3, r2
 8005722:	011b      	lsls	r3, r3, #4
 8005724:	1a9b      	subs	r3, r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	440b      	add	r3, r1
 800572a:	334d      	adds	r3, #77	@ 0x4d
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b02      	cmp	r3, #2
 8005730:	f000 8100 	beq.w	8005934 <HCD_HC_IN_IRQHandler+0xcca>
 8005734:	e000      	b.n	8005738 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005736:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005738:	78fa      	ldrb	r2, [r7, #3]
 800573a:	6879      	ldr	r1, [r7, #4]
 800573c:	4613      	mov	r3, r2
 800573e:	011b      	lsls	r3, r3, #4
 8005740:	1a9b      	subs	r3, r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	334c      	adds	r3, #76	@ 0x4c
 8005748:	781a      	ldrb	r2, [r3, #0]
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	4619      	mov	r1, r3
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f006 fab0 	bl	800bcb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005754:	e0ef      	b.n	8005936 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	78fa      	ldrb	r2, [r7, #3]
 800575c:	4611      	mov	r1, r2
 800575e:	4618      	mov	r0, r3
 8005760:	f003 f9ab 	bl	8008aba <USB_ReadChInterrupts>
 8005764:	4603      	mov	r3, r0
 8005766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800576a:	2b40      	cmp	r3, #64	@ 0x40
 800576c:	d12f      	bne.n	80057ce <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800576e:	78fb      	ldrb	r3, [r7, #3]
 8005770:	015a      	lsls	r2, r3, #5
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	4413      	add	r3, r2
 8005776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800577a:	461a      	mov	r2, r3
 800577c:	2340      	movs	r3, #64	@ 0x40
 800577e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005780:	78fa      	ldrb	r2, [r7, #3]
 8005782:	6879      	ldr	r1, [r7, #4]
 8005784:	4613      	mov	r3, r2
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	440b      	add	r3, r1
 800578e:	334d      	adds	r3, #77	@ 0x4d
 8005790:	2205      	movs	r2, #5
 8005792:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005794:	78fa      	ldrb	r2, [r7, #3]
 8005796:	6879      	ldr	r1, [r7, #4]
 8005798:	4613      	mov	r3, r2
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	1a9b      	subs	r3, r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	331a      	adds	r3, #26
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d109      	bne.n	80057be <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057aa:	78fa      	ldrb	r2, [r7, #3]
 80057ac:	6879      	ldr	r1, [r7, #4]
 80057ae:	4613      	mov	r3, r2
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	1a9b      	subs	r3, r3, r2
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	440b      	add	r3, r1
 80057b8:	3344      	adds	r3, #68	@ 0x44
 80057ba:	2200      	movs	r2, #0
 80057bc:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	4611      	mov	r1, r2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f003 ff1b 	bl	8009602 <USB_HC_Halt>
 80057cc:	e0b3      	b.n	8005936 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	78fa      	ldrb	r2, [r7, #3]
 80057d4:	4611      	mov	r1, r2
 80057d6:	4618      	mov	r0, r3
 80057d8:	f003 f96f 	bl	8008aba <USB_ReadChInterrupts>
 80057dc:	4603      	mov	r3, r0
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	f040 80a7 	bne.w	8005936 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80057e8:	78fa      	ldrb	r2, [r7, #3]
 80057ea:	6879      	ldr	r1, [r7, #4]
 80057ec:	4613      	mov	r3, r2
 80057ee:	011b      	lsls	r3, r3, #4
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	440b      	add	r3, r1
 80057f6:	3326      	adds	r3, #38	@ 0x26
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	2b03      	cmp	r3, #3
 80057fc:	d11b      	bne.n	8005836 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80057fe:	78fa      	ldrb	r2, [r7, #3]
 8005800:	6879      	ldr	r1, [r7, #4]
 8005802:	4613      	mov	r3, r2
 8005804:	011b      	lsls	r3, r3, #4
 8005806:	1a9b      	subs	r3, r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	440b      	add	r3, r1
 800580c:	3344      	adds	r3, #68	@ 0x44
 800580e:	2200      	movs	r2, #0
 8005810:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005812:	78fa      	ldrb	r2, [r7, #3]
 8005814:	6879      	ldr	r1, [r7, #4]
 8005816:	4613      	mov	r3, r2
 8005818:	011b      	lsls	r3, r3, #4
 800581a:	1a9b      	subs	r3, r3, r2
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	440b      	add	r3, r1
 8005820:	334d      	adds	r3, #77	@ 0x4d
 8005822:	2204      	movs	r2, #4
 8005824:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	78fa      	ldrb	r2, [r7, #3]
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f003 fee7 	bl	8009602 <USB_HC_Halt>
 8005834:	e03f      	b.n	80058b6 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005836:	78fa      	ldrb	r2, [r7, #3]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4613      	mov	r3, r2
 800583c:	011b      	lsls	r3, r3, #4
 800583e:	1a9b      	subs	r3, r3, r2
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	440b      	add	r3, r1
 8005844:	3326      	adds	r3, #38	@ 0x26
 8005846:	781b      	ldrb	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d00a      	beq.n	8005862 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800584c:	78fa      	ldrb	r2, [r7, #3]
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	011b      	lsls	r3, r3, #4
 8005854:	1a9b      	subs	r3, r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	3326      	adds	r3, #38	@ 0x26
 800585c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800585e:	2b02      	cmp	r3, #2
 8005860:	d129      	bne.n	80058b6 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005862:	78fa      	ldrb	r2, [r7, #3]
 8005864:	6879      	ldr	r1, [r7, #4]
 8005866:	4613      	mov	r3, r2
 8005868:	011b      	lsls	r3, r3, #4
 800586a:	1a9b      	subs	r3, r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	440b      	add	r3, r1
 8005870:	3344      	adds	r3, #68	@ 0x44
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	799b      	ldrb	r3, [r3, #6]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <HCD_HC_IN_IRQHandler+0xc2a>
 800587e:	78fa      	ldrb	r2, [r7, #3]
 8005880:	6879      	ldr	r1, [r7, #4]
 8005882:	4613      	mov	r3, r2
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	1a9b      	subs	r3, r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	440b      	add	r3, r1
 800588c:	331b      	adds	r3, #27
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	2b01      	cmp	r3, #1
 8005892:	d110      	bne.n	80058b6 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005894:	78fa      	ldrb	r2, [r7, #3]
 8005896:	6879      	ldr	r1, [r7, #4]
 8005898:	4613      	mov	r3, r2
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	440b      	add	r3, r1
 80058a2:	334d      	adds	r3, #77	@ 0x4d
 80058a4:	2204      	movs	r2, #4
 80058a6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	78fa      	ldrb	r2, [r7, #3]
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f003 fea6 	bl	8009602 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80058b6:	78fa      	ldrb	r2, [r7, #3]
 80058b8:	6879      	ldr	r1, [r7, #4]
 80058ba:	4613      	mov	r3, r2
 80058bc:	011b      	lsls	r3, r3, #4
 80058be:	1a9b      	subs	r3, r3, r2
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	440b      	add	r3, r1
 80058c4:	331b      	adds	r3, #27
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	d129      	bne.n	8005920 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80058cc:	78fa      	ldrb	r2, [r7, #3]
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	4613      	mov	r3, r2
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	1a9b      	subs	r3, r3, r2
 80058d6:	009b      	lsls	r3, r3, #2
 80058d8:	440b      	add	r3, r1
 80058da:	331b      	adds	r3, #27
 80058dc:	2200      	movs	r2, #0
 80058de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80058e0:	78fb      	ldrb	r3, [r7, #3]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	78fa      	ldrb	r2, [r7, #3]
 80058f0:	0151      	lsls	r1, r2, #5
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	440a      	add	r2, r1
 80058f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80058fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058fe:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8005900:	78fb      	ldrb	r3, [r7, #3]
 8005902:	015a      	lsls	r2, r3, #5
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	4413      	add	r3, r2
 8005908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	0151      	lsls	r1, r2, #5
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	440a      	add	r2, r1
 8005916:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800591a:	f043 0320 	orr.w	r3, r3, #32
 800591e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005920:	78fb      	ldrb	r3, [r7, #3]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	4413      	add	r3, r2
 8005928:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800592c:	461a      	mov	r2, r3
 800592e:	2310      	movs	r3, #16
 8005930:	6093      	str	r3, [r2, #8]
 8005932:	e000      	b.n	8005936 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005934:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8005936:	3718      	adds	r7, #24
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b086      	sub	sp, #24
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	460b      	mov	r3, r1
 8005946:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	78fa      	ldrb	r2, [r7, #3]
 8005958:	4611      	mov	r1, r2
 800595a:	4618      	mov	r0, r3
 800595c:	f003 f8ad 	bl	8008aba <USB_ReadChInterrupts>
 8005960:	4603      	mov	r3, r0
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b04      	cmp	r3, #4
 8005968:	d11b      	bne.n	80059a2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800596a:	78fb      	ldrb	r3, [r7, #3]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	4413      	add	r3, r2
 8005972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005976:	461a      	mov	r2, r3
 8005978:	2304      	movs	r3, #4
 800597a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	6879      	ldr	r1, [r7, #4]
 8005980:	4613      	mov	r3, r2
 8005982:	011b      	lsls	r3, r3, #4
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	440b      	add	r3, r1
 800598a:	334d      	adds	r3, #77	@ 0x4d
 800598c:	2207      	movs	r2, #7
 800598e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	78fa      	ldrb	r2, [r7, #3]
 8005996:	4611      	mov	r1, r2
 8005998:	4618      	mov	r0, r3
 800599a:	f003 fe32 	bl	8009602 <USB_HC_Halt>
 800599e:	f000 bc89 	b.w	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	78fa      	ldrb	r2, [r7, #3]
 80059a8:	4611      	mov	r1, r2
 80059aa:	4618      	mov	r0, r3
 80059ac:	f003 f885 	bl	8008aba <USB_ReadChInterrupts>
 80059b0:	4603      	mov	r3, r0
 80059b2:	f003 0320 	and.w	r3, r3, #32
 80059b6:	2b20      	cmp	r3, #32
 80059b8:	f040 8082 	bne.w	8005ac0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80059bc:	78fb      	ldrb	r3, [r7, #3]
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059c8:	461a      	mov	r2, r3
 80059ca:	2320      	movs	r3, #32
 80059cc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80059ce:	78fa      	ldrb	r2, [r7, #3]
 80059d0:	6879      	ldr	r1, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	1a9b      	subs	r3, r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	3319      	adds	r3, #25
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d124      	bne.n	8005a2e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80059e4:	78fa      	ldrb	r2, [r7, #3]
 80059e6:	6879      	ldr	r1, [r7, #4]
 80059e8:	4613      	mov	r3, r2
 80059ea:	011b      	lsls	r3, r3, #4
 80059ec:	1a9b      	subs	r3, r3, r2
 80059ee:	009b      	lsls	r3, r3, #2
 80059f0:	440b      	add	r3, r1
 80059f2:	3319      	adds	r3, #25
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80059f8:	78fa      	ldrb	r2, [r7, #3]
 80059fa:	6879      	ldr	r1, [r7, #4]
 80059fc:	4613      	mov	r3, r2
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	1a9b      	subs	r3, r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	440b      	add	r3, r1
 8005a06:	334c      	adds	r3, #76	@ 0x4c
 8005a08:	2202      	movs	r2, #2
 8005a0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	6879      	ldr	r1, [r7, #4]
 8005a10:	4613      	mov	r3, r2
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	1a9b      	subs	r3, r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	440b      	add	r3, r1
 8005a1a:	334d      	adds	r3, #77	@ 0x4d
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	78fa      	ldrb	r2, [r7, #3]
 8005a26:	4611      	mov	r1, r2
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f003 fdea 	bl	8009602 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005a2e:	78fa      	ldrb	r2, [r7, #3]
 8005a30:	6879      	ldr	r1, [r7, #4]
 8005a32:	4613      	mov	r3, r2
 8005a34:	011b      	lsls	r3, r3, #4
 8005a36:	1a9b      	subs	r3, r3, r2
 8005a38:	009b      	lsls	r3, r3, #2
 8005a3a:	440b      	add	r3, r1
 8005a3c:	331a      	adds	r3, #26
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	f040 8437 	bne.w	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
 8005a46:	78fa      	ldrb	r2, [r7, #3]
 8005a48:	6879      	ldr	r1, [r7, #4]
 8005a4a:	4613      	mov	r3, r2
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	1a9b      	subs	r3, r3, r2
 8005a50:	009b      	lsls	r3, r3, #2
 8005a52:	440b      	add	r3, r1
 8005a54:	331b      	adds	r3, #27
 8005a56:	781b      	ldrb	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f040 842b 	bne.w	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	3326      	adds	r3, #38	@ 0x26
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d009      	beq.n	8005a88 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005a74:	78fa      	ldrb	r2, [r7, #3]
 8005a76:	6879      	ldr	r1, [r7, #4]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	011b      	lsls	r3, r3, #4
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	440b      	add	r3, r1
 8005a82:	331b      	adds	r3, #27
 8005a84:	2201      	movs	r2, #1
 8005a86:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8005a88:	78fa      	ldrb	r2, [r7, #3]
 8005a8a:	6879      	ldr	r1, [r7, #4]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	011b      	lsls	r3, r3, #4
 8005a90:	1a9b      	subs	r3, r3, r2
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	440b      	add	r3, r1
 8005a96:	334d      	adds	r3, #77	@ 0x4d
 8005a98:	2203      	movs	r2, #3
 8005a9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	78fa      	ldrb	r2, [r7, #3]
 8005aa2:	4611      	mov	r1, r2
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f003 fdac 	bl	8009602 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8005aaa:	78fa      	ldrb	r2, [r7, #3]
 8005aac:	6879      	ldr	r1, [r7, #4]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	011b      	lsls	r3, r3, #4
 8005ab2:	1a9b      	subs	r3, r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	440b      	add	r3, r1
 8005ab8:	3344      	adds	r3, #68	@ 0x44
 8005aba:	2200      	movs	r2, #0
 8005abc:	601a      	str	r2, [r3, #0]
 8005abe:	e3f9      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	78fa      	ldrb	r2, [r7, #3]
 8005ac6:	4611      	mov	r1, r2
 8005ac8:	4618      	mov	r0, r3
 8005aca:	f002 fff6 	bl	8008aba <USB_ReadChInterrupts>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005ad4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ad8:	d111      	bne.n	8005afe <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8005ada:	78fb      	ldrb	r3, [r7, #3]
 8005adc:	015a      	lsls	r2, r3, #5
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	4413      	add	r3, r2
 8005ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ae6:	461a      	mov	r2, r3
 8005ae8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005aec:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	78fa      	ldrb	r2, [r7, #3]
 8005af4:	4611      	mov	r1, r2
 8005af6:	4618      	mov	r0, r3
 8005af8:	f003 fd83 	bl	8009602 <USB_HC_Halt>
 8005afc:	e3da      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	78fa      	ldrb	r2, [r7, #3]
 8005b04:	4611      	mov	r1, r2
 8005b06:	4618      	mov	r0, r3
 8005b08:	f002 ffd7 	bl	8008aba <USB_ReadChInterrupts>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d168      	bne.n	8005be8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005b16:	78fa      	ldrb	r2, [r7, #3]
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	011b      	lsls	r3, r3, #4
 8005b1e:	1a9b      	subs	r3, r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	440b      	add	r3, r1
 8005b24:	3344      	adds	r3, #68	@ 0x44
 8005b26:	2200      	movs	r2, #0
 8005b28:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	4611      	mov	r1, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f002 ffc1 	bl	8008aba <USB_ReadChInterrupts>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3e:	2b40      	cmp	r3, #64	@ 0x40
 8005b40:	d112      	bne.n	8005b68 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005b42:	78fa      	ldrb	r2, [r7, #3]
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	3319      	adds	r3, #25
 8005b52:	2201      	movs	r2, #1
 8005b54:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005b56:	78fb      	ldrb	r3, [r7, #3]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b62:	461a      	mov	r2, r3
 8005b64:	2340      	movs	r3, #64	@ 0x40
 8005b66:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8005b68:	78fa      	ldrb	r2, [r7, #3]
 8005b6a:	6879      	ldr	r1, [r7, #4]
 8005b6c:	4613      	mov	r3, r2
 8005b6e:	011b      	lsls	r3, r3, #4
 8005b70:	1a9b      	subs	r3, r3, r2
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	440b      	add	r3, r1
 8005b76:	331b      	adds	r3, #27
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d019      	beq.n	8005bb2 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005b7e:	78fa      	ldrb	r2, [r7, #3]
 8005b80:	6879      	ldr	r1, [r7, #4]
 8005b82:	4613      	mov	r3, r2
 8005b84:	011b      	lsls	r3, r3, #4
 8005b86:	1a9b      	subs	r3, r3, r2
 8005b88:	009b      	lsls	r3, r3, #2
 8005b8a:	440b      	add	r3, r1
 8005b8c:	331b      	adds	r3, #27
 8005b8e:	2200      	movs	r2, #0
 8005b90:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005b92:	78fb      	ldrb	r3, [r7, #3]
 8005b94:	015a      	lsls	r2, r3, #5
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b9e:	685b      	ldr	r3, [r3, #4]
 8005ba0:	78fa      	ldrb	r2, [r7, #3]
 8005ba2:	0151      	lsls	r1, r2, #5
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	440a      	add	r2, r1
 8005ba8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005bac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bb0:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	334d      	adds	r3, #77	@ 0x4d
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	78fa      	ldrb	r2, [r7, #3]
 8005bde:	4611      	mov	r1, r2
 8005be0:	4618      	mov	r0, r3
 8005be2:	f003 fd0e 	bl	8009602 <USB_HC_Halt>
 8005be6:	e365      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	78fa      	ldrb	r2, [r7, #3]
 8005bee:	4611      	mov	r1, r2
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f002 ff62 	bl	8008aba <USB_ReadChInterrupts>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bfc:	2b40      	cmp	r3, #64	@ 0x40
 8005bfe:	d139      	bne.n	8005c74 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8005c00:	78fa      	ldrb	r2, [r7, #3]
 8005c02:	6879      	ldr	r1, [r7, #4]
 8005c04:	4613      	mov	r3, r2
 8005c06:	011b      	lsls	r3, r3, #4
 8005c08:	1a9b      	subs	r3, r3, r2
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	334d      	adds	r3, #77	@ 0x4d
 8005c10:	2205      	movs	r2, #5
 8005c12:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005c14:	78fa      	ldrb	r2, [r7, #3]
 8005c16:	6879      	ldr	r1, [r7, #4]
 8005c18:	4613      	mov	r3, r2
 8005c1a:	011b      	lsls	r3, r3, #4
 8005c1c:	1a9b      	subs	r3, r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	331a      	adds	r3, #26
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005c2a:	78fa      	ldrb	r2, [r7, #3]
 8005c2c:	6879      	ldr	r1, [r7, #4]
 8005c2e:	4613      	mov	r3, r2
 8005c30:	011b      	lsls	r3, r3, #4
 8005c32:	1a9b      	subs	r3, r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	440b      	add	r3, r1
 8005c38:	3319      	adds	r3, #25
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005c3e:	78fa      	ldrb	r2, [r7, #3]
 8005c40:	6879      	ldr	r1, [r7, #4]
 8005c42:	4613      	mov	r3, r2
 8005c44:	011b      	lsls	r3, r3, #4
 8005c46:	1a9b      	subs	r3, r3, r2
 8005c48:	009b      	lsls	r3, r3, #2
 8005c4a:	440b      	add	r3, r1
 8005c4c:	3344      	adds	r3, #68	@ 0x44
 8005c4e:	2200      	movs	r2, #0
 8005c50:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	4611      	mov	r1, r2
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f003 fcd1 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005c60:	78fb      	ldrb	r3, [r7, #3]
 8005c62:	015a      	lsls	r2, r3, #5
 8005c64:	693b      	ldr	r3, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	2340      	movs	r3, #64	@ 0x40
 8005c70:	6093      	str	r3, [r2, #8]
 8005c72:	e31f      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	78fa      	ldrb	r2, [r7, #3]
 8005c7a:	4611      	mov	r1, r2
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f002 ff1c 	bl	8008aba <USB_ReadChInterrupts>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f003 0308 	and.w	r3, r3, #8
 8005c88:	2b08      	cmp	r3, #8
 8005c8a:	d11a      	bne.n	8005cc2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005c8c:	78fb      	ldrb	r3, [r7, #3]
 8005c8e:	015a      	lsls	r2, r3, #5
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	4413      	add	r3, r2
 8005c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c98:	461a      	mov	r2, r3
 8005c9a:	2308      	movs	r3, #8
 8005c9c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005c9e:	78fa      	ldrb	r2, [r7, #3]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	011b      	lsls	r3, r3, #4
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	009b      	lsls	r3, r3, #2
 8005caa:	440b      	add	r3, r1
 8005cac:	334d      	adds	r3, #77	@ 0x4d
 8005cae:	2206      	movs	r2, #6
 8005cb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	78fa      	ldrb	r2, [r7, #3]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f003 fca1 	bl	8009602 <USB_HC_Halt>
 8005cc0:	e2f8      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	78fa      	ldrb	r2, [r7, #3]
 8005cc8:	4611      	mov	r1, r2
 8005cca:	4618      	mov	r0, r3
 8005ccc:	f002 fef5 	bl	8008aba <USB_ReadChInterrupts>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	f003 0310 	and.w	r3, r3, #16
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d144      	bne.n	8005d64 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8005cda:	78fa      	ldrb	r2, [r7, #3]
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	011b      	lsls	r3, r3, #4
 8005ce2:	1a9b      	subs	r3, r3, r2
 8005ce4:	009b      	lsls	r3, r3, #2
 8005ce6:	440b      	add	r3, r1
 8005ce8:	3344      	adds	r3, #68	@ 0x44
 8005cea:	2200      	movs	r2, #0
 8005cec:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8005cee:	78fa      	ldrb	r2, [r7, #3]
 8005cf0:	6879      	ldr	r1, [r7, #4]
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	011b      	lsls	r3, r3, #4
 8005cf6:	1a9b      	subs	r3, r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	334d      	adds	r3, #77	@ 0x4d
 8005cfe:	2204      	movs	r2, #4
 8005d00:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	6879      	ldr	r1, [r7, #4]
 8005d06:	4613      	mov	r3, r2
 8005d08:	011b      	lsls	r3, r3, #4
 8005d0a:	1a9b      	subs	r3, r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3319      	adds	r3, #25
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d114      	bne.n	8005d42 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8005d18:	78fa      	ldrb	r2, [r7, #3]
 8005d1a:	6879      	ldr	r1, [r7, #4]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	011b      	lsls	r3, r3, #4
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	440b      	add	r3, r1
 8005d26:	3318      	adds	r3, #24
 8005d28:	781b      	ldrb	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d109      	bne.n	8005d42 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005d2e:	78fa      	ldrb	r2, [r7, #3]
 8005d30:	6879      	ldr	r1, [r7, #4]
 8005d32:	4613      	mov	r3, r2
 8005d34:	011b      	lsls	r3, r3, #4
 8005d36:	1a9b      	subs	r3, r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	440b      	add	r3, r1
 8005d3c:	3319      	adds	r3, #25
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	78fa      	ldrb	r2, [r7, #3]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f003 fc59 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005d50:	78fb      	ldrb	r3, [r7, #3]
 8005d52:	015a      	lsls	r2, r3, #5
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	4413      	add	r3, r2
 8005d58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	2310      	movs	r3, #16
 8005d60:	6093      	str	r3, [r2, #8]
 8005d62:	e2a7      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	78fa      	ldrb	r2, [r7, #3]
 8005d6a:	4611      	mov	r1, r2
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f002 fea4 	bl	8008aba <USB_ReadChInterrupts>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d78:	2b80      	cmp	r3, #128	@ 0x80
 8005d7a:	f040 8083 	bne.w	8005e84 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	799b      	ldrb	r3, [r3, #6]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d111      	bne.n	8005daa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	011b      	lsls	r3, r3, #4
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	334d      	adds	r3, #77	@ 0x4d
 8005d96:	2207      	movs	r2, #7
 8005d98:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	78fa      	ldrb	r2, [r7, #3]
 8005da0:	4611      	mov	r1, r2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f003 fc2d 	bl	8009602 <USB_HC_Halt>
 8005da8:	e062      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005daa:	78fa      	ldrb	r2, [r7, #3]
 8005dac:	6879      	ldr	r1, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	1a9b      	subs	r3, r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	440b      	add	r3, r1
 8005db8:	3344      	adds	r3, #68	@ 0x44
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	1c59      	adds	r1, r3, #1
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	011b      	lsls	r3, r3, #4
 8005dc4:	1a9b      	subs	r3, r3, r2
 8005dc6:	009b      	lsls	r3, r3, #2
 8005dc8:	4403      	add	r3, r0
 8005dca:	3344      	adds	r3, #68	@ 0x44
 8005dcc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005dce:	78fa      	ldrb	r2, [r7, #3]
 8005dd0:	6879      	ldr	r1, [r7, #4]
 8005dd2:	4613      	mov	r3, r2
 8005dd4:	011b      	lsls	r3, r3, #4
 8005dd6:	1a9b      	subs	r3, r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	440b      	add	r3, r1
 8005ddc:	3344      	adds	r3, #68	@ 0x44
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d922      	bls.n	8005e2a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005de4:	78fa      	ldrb	r2, [r7, #3]
 8005de6:	6879      	ldr	r1, [r7, #4]
 8005de8:	4613      	mov	r3, r2
 8005dea:	011b      	lsls	r3, r3, #4
 8005dec:	1a9b      	subs	r3, r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	440b      	add	r3, r1
 8005df2:	3344      	adds	r3, #68	@ 0x44
 8005df4:	2200      	movs	r2, #0
 8005df6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005df8:	78fa      	ldrb	r2, [r7, #3]
 8005dfa:	6879      	ldr	r1, [r7, #4]
 8005dfc:	4613      	mov	r3, r2
 8005dfe:	011b      	lsls	r3, r3, #4
 8005e00:	1a9b      	subs	r3, r3, r2
 8005e02:	009b      	lsls	r3, r3, #2
 8005e04:	440b      	add	r3, r1
 8005e06:	334c      	adds	r3, #76	@ 0x4c
 8005e08:	2204      	movs	r2, #4
 8005e0a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005e0c:	78fa      	ldrb	r2, [r7, #3]
 8005e0e:	6879      	ldr	r1, [r7, #4]
 8005e10:	4613      	mov	r3, r2
 8005e12:	011b      	lsls	r3, r3, #4
 8005e14:	1a9b      	subs	r3, r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	440b      	add	r3, r1
 8005e1a:	334c      	adds	r3, #76	@ 0x4c
 8005e1c:	781a      	ldrb	r2, [r3, #0]
 8005e1e:	78fb      	ldrb	r3, [r7, #3]
 8005e20:	4619      	mov	r1, r3
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f005 ff46 	bl	800bcb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005e28:	e022      	b.n	8005e70 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005e2a:	78fa      	ldrb	r2, [r7, #3]
 8005e2c:	6879      	ldr	r1, [r7, #4]
 8005e2e:	4613      	mov	r3, r2
 8005e30:	011b      	lsls	r3, r3, #4
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	009b      	lsls	r3, r3, #2
 8005e36:	440b      	add	r3, r1
 8005e38:	334c      	adds	r3, #76	@ 0x4c
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	015a      	lsls	r2, r3, #5
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	4413      	add	r3, r2
 8005e46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005e54:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e5c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e5e:	78fb      	ldrb	r3, [r7, #3]
 8005e60:	015a      	lsls	r2, r3, #5
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	4413      	add	r3, r2
 8005e66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005e70:	78fb      	ldrb	r3, [r7, #3]
 8005e72:	015a      	lsls	r2, r3, #5
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	4413      	add	r3, r2
 8005e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	2380      	movs	r3, #128	@ 0x80
 8005e80:	6093      	str	r3, [r2, #8]
 8005e82:	e217      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	78fa      	ldrb	r2, [r7, #3]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	f002 fe14 	bl	8008aba <USB_ReadChInterrupts>
 8005e92:	4603      	mov	r3, r0
 8005e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e9c:	d11b      	bne.n	8005ed6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005e9e:	78fa      	ldrb	r2, [r7, #3]
 8005ea0:	6879      	ldr	r1, [r7, #4]
 8005ea2:	4613      	mov	r3, r2
 8005ea4:	011b      	lsls	r3, r3, #4
 8005ea6:	1a9b      	subs	r3, r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	440b      	add	r3, r1
 8005eac:	334d      	adds	r3, #77	@ 0x4d
 8005eae:	2209      	movs	r2, #9
 8005eb0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	78fa      	ldrb	r2, [r7, #3]
 8005eb8:	4611      	mov	r1, r2
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f003 fba1 	bl	8009602 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8005ec0:	78fb      	ldrb	r3, [r7, #3]
 8005ec2:	015a      	lsls	r2, r3, #5
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	4413      	add	r3, r2
 8005ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005ecc:	461a      	mov	r2, r3
 8005ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ed2:	6093      	str	r3, [r2, #8]
 8005ed4:	e1ee      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	78fa      	ldrb	r2, [r7, #3]
 8005edc:	4611      	mov	r1, r2
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f002 fdeb 	bl	8008aba <USB_ReadChInterrupts>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f003 0302 	and.w	r3, r3, #2
 8005eea:	2b02      	cmp	r3, #2
 8005eec:	f040 81df 	bne.w	80062ae <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8005ef0:	78fb      	ldrb	r3, [r7, #3]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	693b      	ldr	r3, [r7, #16]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005efc:	461a      	mov	r2, r3
 8005efe:	2302      	movs	r3, #2
 8005f00:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8005f02:	78fa      	ldrb	r2, [r7, #3]
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	334d      	adds	r3, #77	@ 0x4d
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	f040 8093 	bne.w	8006040 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005f1a:	78fa      	ldrb	r2, [r7, #3]
 8005f1c:	6879      	ldr	r1, [r7, #4]
 8005f1e:	4613      	mov	r3, r2
 8005f20:	011b      	lsls	r3, r3, #4
 8005f22:	1a9b      	subs	r3, r3, r2
 8005f24:	009b      	lsls	r3, r3, #2
 8005f26:	440b      	add	r3, r1
 8005f28:	334d      	adds	r3, #77	@ 0x4d
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005f2e:	78fa      	ldrb	r2, [r7, #3]
 8005f30:	6879      	ldr	r1, [r7, #4]
 8005f32:	4613      	mov	r3, r2
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	009b      	lsls	r3, r3, #2
 8005f3a:	440b      	add	r3, r1
 8005f3c:	334c      	adds	r3, #76	@ 0x4c
 8005f3e:	2201      	movs	r2, #1
 8005f40:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	6879      	ldr	r1, [r7, #4]
 8005f46:	4613      	mov	r3, r2
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	1a9b      	subs	r3, r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	440b      	add	r3, r1
 8005f50:	3326      	adds	r3, #38	@ 0x26
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d00b      	beq.n	8005f70 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	3326      	adds	r3, #38	@ 0x26
 8005f68:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005f6a:	2b03      	cmp	r3, #3
 8005f6c:	f040 8190 	bne.w	8006290 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	799b      	ldrb	r3, [r3, #6]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d115      	bne.n	8005fa4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8005f78:	78fa      	ldrb	r2, [r7, #3]
 8005f7a:	6879      	ldr	r1, [r7, #4]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	1a9b      	subs	r3, r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	440b      	add	r3, r1
 8005f86:	333d      	adds	r3, #61	@ 0x3d
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	78fa      	ldrb	r2, [r7, #3]
 8005f8c:	f083 0301 	eor.w	r3, r3, #1
 8005f90:	b2d8      	uxtb	r0, r3
 8005f92:	6879      	ldr	r1, [r7, #4]
 8005f94:	4613      	mov	r3, r2
 8005f96:	011b      	lsls	r3, r3, #4
 8005f98:	1a9b      	subs	r3, r3, r2
 8005f9a:	009b      	lsls	r3, r3, #2
 8005f9c:	440b      	add	r3, r1
 8005f9e:	333d      	adds	r3, #61	@ 0x3d
 8005fa0:	4602      	mov	r2, r0
 8005fa2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	799b      	ldrb	r3, [r3, #6]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	f040 8171 	bne.w	8006290 <HCD_HC_OUT_IRQHandler+0x954>
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	3334      	adds	r3, #52	@ 0x34
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	f000 8165 	beq.w	8006290 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8005fc6:	78fa      	ldrb	r2, [r7, #3]
 8005fc8:	6879      	ldr	r1, [r7, #4]
 8005fca:	4613      	mov	r3, r2
 8005fcc:	011b      	lsls	r3, r3, #4
 8005fce:	1a9b      	subs	r3, r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	3334      	adds	r3, #52	@ 0x34
 8005fd6:	6819      	ldr	r1, [r3, #0]
 8005fd8:	78fa      	ldrb	r2, [r7, #3]
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	4613      	mov	r3, r2
 8005fde:	011b      	lsls	r3, r3, #4
 8005fe0:	1a9b      	subs	r3, r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	4403      	add	r3, r0
 8005fe6:	3328      	adds	r3, #40	@ 0x28
 8005fe8:	881b      	ldrh	r3, [r3, #0]
 8005fea:	440b      	add	r3, r1
 8005fec:	1e59      	subs	r1, r3, #1
 8005fee:	78fa      	ldrb	r2, [r7, #3]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	4613      	mov	r3, r2
 8005ff4:	011b      	lsls	r3, r3, #4
 8005ff6:	1a9b      	subs	r3, r3, r2
 8005ff8:	009b      	lsls	r3, r3, #2
 8005ffa:	4403      	add	r3, r0
 8005ffc:	3328      	adds	r3, #40	@ 0x28
 8005ffe:	881b      	ldrh	r3, [r3, #0]
 8006000:	fbb1 f3f3 	udiv	r3, r1, r3
 8006004:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	f003 0301 	and.w	r3, r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 813f 	beq.w	8006290 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8006012:	78fa      	ldrb	r2, [r7, #3]
 8006014:	6879      	ldr	r1, [r7, #4]
 8006016:	4613      	mov	r3, r2
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	440b      	add	r3, r1
 8006020:	333d      	adds	r3, #61	@ 0x3d
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	78fa      	ldrb	r2, [r7, #3]
 8006026:	f083 0301 	eor.w	r3, r3, #1
 800602a:	b2d8      	uxtb	r0, r3
 800602c:	6879      	ldr	r1, [r7, #4]
 800602e:	4613      	mov	r3, r2
 8006030:	011b      	lsls	r3, r3, #4
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	440b      	add	r3, r1
 8006038:	333d      	adds	r3, #61	@ 0x3d
 800603a:	4602      	mov	r2, r0
 800603c:	701a      	strb	r2, [r3, #0]
 800603e:	e127      	b.n	8006290 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	4613      	mov	r3, r2
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	1a9b      	subs	r3, r3, r2
 800604a:	009b      	lsls	r3, r3, #2
 800604c:	440b      	add	r3, r1
 800604e:	334d      	adds	r3, #77	@ 0x4d
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	2b03      	cmp	r3, #3
 8006054:	d120      	bne.n	8006098 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006056:	78fa      	ldrb	r2, [r7, #3]
 8006058:	6879      	ldr	r1, [r7, #4]
 800605a:	4613      	mov	r3, r2
 800605c:	011b      	lsls	r3, r3, #4
 800605e:	1a9b      	subs	r3, r3, r2
 8006060:	009b      	lsls	r3, r3, #2
 8006062:	440b      	add	r3, r1
 8006064:	334d      	adds	r3, #77	@ 0x4d
 8006066:	2202      	movs	r2, #2
 8006068:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	6879      	ldr	r1, [r7, #4]
 800606e:	4613      	mov	r3, r2
 8006070:	011b      	lsls	r3, r3, #4
 8006072:	1a9b      	subs	r3, r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	440b      	add	r3, r1
 8006078:	331b      	adds	r3, #27
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	2b01      	cmp	r3, #1
 800607e:	f040 8107 	bne.w	8006290 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006082:	78fa      	ldrb	r2, [r7, #3]
 8006084:	6879      	ldr	r1, [r7, #4]
 8006086:	4613      	mov	r3, r2
 8006088:	011b      	lsls	r3, r3, #4
 800608a:	1a9b      	subs	r3, r3, r2
 800608c:	009b      	lsls	r3, r3, #2
 800608e:	440b      	add	r3, r1
 8006090:	334c      	adds	r3, #76	@ 0x4c
 8006092:	2202      	movs	r2, #2
 8006094:	701a      	strb	r2, [r3, #0]
 8006096:	e0fb      	b.n	8006290 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8006098:	78fa      	ldrb	r2, [r7, #3]
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	1a9b      	subs	r3, r3, r2
 80060a2:	009b      	lsls	r3, r3, #2
 80060a4:	440b      	add	r3, r1
 80060a6:	334d      	adds	r3, #77	@ 0x4d
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b04      	cmp	r3, #4
 80060ac:	d13a      	bne.n	8006124 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80060ae:	78fa      	ldrb	r2, [r7, #3]
 80060b0:	6879      	ldr	r1, [r7, #4]
 80060b2:	4613      	mov	r3, r2
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	1a9b      	subs	r3, r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	440b      	add	r3, r1
 80060bc:	334d      	adds	r3, #77	@ 0x4d
 80060be:	2202      	movs	r2, #2
 80060c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80060c2:	78fa      	ldrb	r2, [r7, #3]
 80060c4:	6879      	ldr	r1, [r7, #4]
 80060c6:	4613      	mov	r3, r2
 80060c8:	011b      	lsls	r3, r3, #4
 80060ca:	1a9b      	subs	r3, r3, r2
 80060cc:	009b      	lsls	r3, r3, #2
 80060ce:	440b      	add	r3, r1
 80060d0:	334c      	adds	r3, #76	@ 0x4c
 80060d2:	2202      	movs	r2, #2
 80060d4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80060d6:	78fa      	ldrb	r2, [r7, #3]
 80060d8:	6879      	ldr	r1, [r7, #4]
 80060da:	4613      	mov	r3, r2
 80060dc:	011b      	lsls	r3, r3, #4
 80060de:	1a9b      	subs	r3, r3, r2
 80060e0:	009b      	lsls	r3, r3, #2
 80060e2:	440b      	add	r3, r1
 80060e4:	331b      	adds	r3, #27
 80060e6:	781b      	ldrb	r3, [r3, #0]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	f040 80d1 	bne.w	8006290 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80060ee:	78fa      	ldrb	r2, [r7, #3]
 80060f0:	6879      	ldr	r1, [r7, #4]
 80060f2:	4613      	mov	r3, r2
 80060f4:	011b      	lsls	r3, r3, #4
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	440b      	add	r3, r1
 80060fc:	331b      	adds	r3, #27
 80060fe:	2200      	movs	r2, #0
 8006100:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	015a      	lsls	r2, r3, #5
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	4413      	add	r3, r2
 800610a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	78fa      	ldrb	r2, [r7, #3]
 8006112:	0151      	lsls	r1, r2, #5
 8006114:	693a      	ldr	r2, [r7, #16]
 8006116:	440a      	add	r2, r1
 8006118:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800611c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006120:	6053      	str	r3, [r2, #4]
 8006122:	e0b5      	b.n	8006290 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006124:	78fa      	ldrb	r2, [r7, #3]
 8006126:	6879      	ldr	r1, [r7, #4]
 8006128:	4613      	mov	r3, r2
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	1a9b      	subs	r3, r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	440b      	add	r3, r1
 8006132:	334d      	adds	r3, #77	@ 0x4d
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b05      	cmp	r3, #5
 8006138:	d114      	bne.n	8006164 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800613a:	78fa      	ldrb	r2, [r7, #3]
 800613c:	6879      	ldr	r1, [r7, #4]
 800613e:	4613      	mov	r3, r2
 8006140:	011b      	lsls	r3, r3, #4
 8006142:	1a9b      	subs	r3, r3, r2
 8006144:	009b      	lsls	r3, r3, #2
 8006146:	440b      	add	r3, r1
 8006148:	334d      	adds	r3, #77	@ 0x4d
 800614a:	2202      	movs	r2, #2
 800614c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800614e:	78fa      	ldrb	r2, [r7, #3]
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	1a9b      	subs	r3, r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	334c      	adds	r3, #76	@ 0x4c
 800615e:	2202      	movs	r2, #2
 8006160:	701a      	strb	r2, [r3, #0]
 8006162:	e095      	b.n	8006290 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006164:	78fa      	ldrb	r2, [r7, #3]
 8006166:	6879      	ldr	r1, [r7, #4]
 8006168:	4613      	mov	r3, r2
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	1a9b      	subs	r3, r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	440b      	add	r3, r1
 8006172:	334d      	adds	r3, #77	@ 0x4d
 8006174:	781b      	ldrb	r3, [r3, #0]
 8006176:	2b06      	cmp	r3, #6
 8006178:	d114      	bne.n	80061a4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800617a:	78fa      	ldrb	r2, [r7, #3]
 800617c:	6879      	ldr	r1, [r7, #4]
 800617e:	4613      	mov	r3, r2
 8006180:	011b      	lsls	r3, r3, #4
 8006182:	1a9b      	subs	r3, r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	440b      	add	r3, r1
 8006188:	334d      	adds	r3, #77	@ 0x4d
 800618a:	2202      	movs	r2, #2
 800618c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800618e:	78fa      	ldrb	r2, [r7, #3]
 8006190:	6879      	ldr	r1, [r7, #4]
 8006192:	4613      	mov	r3, r2
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	1a9b      	subs	r3, r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	440b      	add	r3, r1
 800619c:	334c      	adds	r3, #76	@ 0x4c
 800619e:	2205      	movs	r2, #5
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e075      	b.n	8006290 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80061a4:	78fa      	ldrb	r2, [r7, #3]
 80061a6:	6879      	ldr	r1, [r7, #4]
 80061a8:	4613      	mov	r3, r2
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	440b      	add	r3, r1
 80061b2:	334d      	adds	r3, #77	@ 0x4d
 80061b4:	781b      	ldrb	r3, [r3, #0]
 80061b6:	2b07      	cmp	r3, #7
 80061b8:	d00a      	beq.n	80061d0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80061ba:	78fa      	ldrb	r2, [r7, #3]
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	4613      	mov	r3, r2
 80061c0:	011b      	lsls	r3, r3, #4
 80061c2:	1a9b      	subs	r3, r3, r2
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	440b      	add	r3, r1
 80061c8:	334d      	adds	r3, #77	@ 0x4d
 80061ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80061cc:	2b09      	cmp	r3, #9
 80061ce:	d170      	bne.n	80062b2 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80061d0:	78fa      	ldrb	r2, [r7, #3]
 80061d2:	6879      	ldr	r1, [r7, #4]
 80061d4:	4613      	mov	r3, r2
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	1a9b      	subs	r3, r3, r2
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	440b      	add	r3, r1
 80061de:	334d      	adds	r3, #77	@ 0x4d
 80061e0:	2202      	movs	r2, #2
 80061e2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80061e4:	78fa      	ldrb	r2, [r7, #3]
 80061e6:	6879      	ldr	r1, [r7, #4]
 80061e8:	4613      	mov	r3, r2
 80061ea:	011b      	lsls	r3, r3, #4
 80061ec:	1a9b      	subs	r3, r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	3344      	adds	r3, #68	@ 0x44
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	1c59      	adds	r1, r3, #1
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	4403      	add	r3, r0
 8006204:	3344      	adds	r3, #68	@ 0x44
 8006206:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006208:	78fa      	ldrb	r2, [r7, #3]
 800620a:	6879      	ldr	r1, [r7, #4]
 800620c:	4613      	mov	r3, r2
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	1a9b      	subs	r3, r3, r2
 8006212:	009b      	lsls	r3, r3, #2
 8006214:	440b      	add	r3, r1
 8006216:	3344      	adds	r3, #68	@ 0x44
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	2b02      	cmp	r3, #2
 800621c:	d914      	bls.n	8006248 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800621e:	78fa      	ldrb	r2, [r7, #3]
 8006220:	6879      	ldr	r1, [r7, #4]
 8006222:	4613      	mov	r3, r2
 8006224:	011b      	lsls	r3, r3, #4
 8006226:	1a9b      	subs	r3, r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	3344      	adds	r3, #68	@ 0x44
 800622e:	2200      	movs	r2, #0
 8006230:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006232:	78fa      	ldrb	r2, [r7, #3]
 8006234:	6879      	ldr	r1, [r7, #4]
 8006236:	4613      	mov	r3, r2
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	009b      	lsls	r3, r3, #2
 800623e:	440b      	add	r3, r1
 8006240:	334c      	adds	r3, #76	@ 0x4c
 8006242:	2204      	movs	r2, #4
 8006244:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006246:	e022      	b.n	800628e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006248:	78fa      	ldrb	r2, [r7, #3]
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	011b      	lsls	r3, r3, #4
 8006250:	1a9b      	subs	r3, r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	334c      	adds	r3, #76	@ 0x4c
 8006258:	2202      	movs	r2, #2
 800625a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800625c:	78fb      	ldrb	r3, [r7, #3]
 800625e:	015a      	lsls	r2, r3, #5
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	4413      	add	r3, r2
 8006264:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006272:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800627a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800627c:	78fb      	ldrb	r3, [r7, #3]
 800627e:	015a      	lsls	r2, r3, #5
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	4413      	add	r3, r2
 8006284:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006288:	461a      	mov	r2, r3
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800628e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006290:	78fa      	ldrb	r2, [r7, #3]
 8006292:	6879      	ldr	r1, [r7, #4]
 8006294:	4613      	mov	r3, r2
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	1a9b      	subs	r3, r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	334c      	adds	r3, #76	@ 0x4c
 80062a0:	781a      	ldrb	r2, [r3, #0]
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	4619      	mov	r1, r3
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f005 fd04 	bl	800bcb4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80062ac:	e002      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80062ae:	bf00      	nop
 80062b0:	e000      	b.n	80062b4 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80062b2:	bf00      	nop
  }
}
 80062b4:	3718      	adds	r7, #24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}

080062ba <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80062ba:	b580      	push	{r7, lr}
 80062bc:	b08a      	sub	sp, #40	@ 0x28
 80062be:	af00      	add	r7, sp, #0
 80062c0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ca:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6a1b      	ldr	r3, [r3, #32]
 80062d2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f003 030f 	and.w	r3, r3, #15
 80062da:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	0c5b      	lsrs	r3, r3, #17
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	091b      	lsrs	r3, r3, #4
 80062ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062ee:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	2b02      	cmp	r3, #2
 80062f4:	d004      	beq.n	8006300 <HCD_RXQLVL_IRQHandler+0x46>
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b05      	cmp	r3, #5
 80062fa:	f000 80b6 	beq.w	800646a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80062fe:	e0b7      	b.n	8006470 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	2b00      	cmp	r3, #0
 8006304:	f000 80b3 	beq.w	800646e <HCD_RXQLVL_IRQHandler+0x1b4>
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	69ba      	ldr	r2, [r7, #24]
 800630c:	4613      	mov	r3, r2
 800630e:	011b      	lsls	r3, r3, #4
 8006310:	1a9b      	subs	r3, r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	332c      	adds	r3, #44	@ 0x2c
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	2b00      	cmp	r3, #0
 800631c:	f000 80a7 	beq.w	800646e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8006320:	6879      	ldr	r1, [r7, #4]
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4613      	mov	r3, r2
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	1a9b      	subs	r3, r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	440b      	add	r3, r1
 800632e:	3338      	adds	r3, #56	@ 0x38
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	18d1      	adds	r1, r2, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	69ba      	ldr	r2, [r7, #24]
 800633a:	4613      	mov	r3, r2
 800633c:	011b      	lsls	r3, r3, #4
 800633e:	1a9b      	subs	r3, r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	4403      	add	r3, r0
 8006344:	3334      	adds	r3, #52	@ 0x34
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4299      	cmp	r1, r3
 800634a:	f200 8083 	bhi.w	8006454 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6818      	ldr	r0, [r3, #0]
 8006352:	6879      	ldr	r1, [r7, #4]
 8006354:	69ba      	ldr	r2, [r7, #24]
 8006356:	4613      	mov	r3, r2
 8006358:	011b      	lsls	r3, r3, #4
 800635a:	1a9b      	subs	r3, r3, r2
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	440b      	add	r3, r1
 8006360:	332c      	adds	r3, #44	@ 0x2c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	b292      	uxth	r2, r2
 8006368:	4619      	mov	r1, r3
 800636a:	f002 fb3b 	bl	80089e4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800636e:	6879      	ldr	r1, [r7, #4]
 8006370:	69ba      	ldr	r2, [r7, #24]
 8006372:	4613      	mov	r3, r2
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	440b      	add	r3, r1
 800637c:	332c      	adds	r3, #44	@ 0x2c
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	18d1      	adds	r1, r2, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4613      	mov	r3, r2
 800638a:	011b      	lsls	r3, r3, #4
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	4403      	add	r3, r0
 8006392:	332c      	adds	r3, #44	@ 0x2c
 8006394:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8006396:	6879      	ldr	r1, [r7, #4]
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	4613      	mov	r3, r2
 800639c:	011b      	lsls	r3, r3, #4
 800639e:	1a9b      	subs	r3, r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	3338      	adds	r3, #56	@ 0x38
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	18d1      	adds	r1, r2, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	69ba      	ldr	r2, [r7, #24]
 80063b0:	4613      	mov	r3, r2
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	1a9b      	subs	r3, r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4403      	add	r3, r0
 80063ba:	3338      	adds	r3, #56	@ 0x38
 80063bc:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	6a3b      	ldr	r3, [r7, #32]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	0cdb      	lsrs	r3, r3, #19
 80063ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80063d2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4613      	mov	r3, r2
 80063da:	011b      	lsls	r3, r3, #4
 80063dc:	1a9b      	subs	r3, r3, r2
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	440b      	add	r3, r1
 80063e2:	3328      	adds	r3, #40	@ 0x28
 80063e4:	881b      	ldrh	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	693b      	ldr	r3, [r7, #16]
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d13f      	bne.n	800646e <HCD_RXQLVL_IRQHandler+0x1b4>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d03c      	beq.n	800646e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800640a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800640c:	68bb      	ldr	r3, [r7, #8]
 800640e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006412:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	4413      	add	r3, r2
 800641c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006420:	461a      	mov	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8006426:	6879      	ldr	r1, [r7, #4]
 8006428:	69ba      	ldr	r2, [r7, #24]
 800642a:	4613      	mov	r3, r2
 800642c:	011b      	lsls	r3, r3, #4
 800642e:	1a9b      	subs	r3, r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	333c      	adds	r3, #60	@ 0x3c
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	f083 0301 	eor.w	r3, r3, #1
 800643c:	b2d8      	uxtb	r0, r3
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	4613      	mov	r3, r2
 8006444:	011b      	lsls	r3, r3, #4
 8006446:	1a9b      	subs	r3, r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	440b      	add	r3, r1
 800644c:	333c      	adds	r3, #60	@ 0x3c
 800644e:	4602      	mov	r2, r0
 8006450:	701a      	strb	r2, [r3, #0]
      break;
 8006452:	e00c      	b.n	800646e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	69ba      	ldr	r2, [r7, #24]
 8006458:	4613      	mov	r3, r2
 800645a:	011b      	lsls	r3, r3, #4
 800645c:	1a9b      	subs	r3, r3, r2
 800645e:	009b      	lsls	r3, r3, #2
 8006460:	440b      	add	r3, r1
 8006462:	334c      	adds	r3, #76	@ 0x4c
 8006464:	2204      	movs	r2, #4
 8006466:	701a      	strb	r2, [r3, #0]
      break;
 8006468:	e001      	b.n	800646e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800646e:	bf00      	nop
  }
}
 8006470:	bf00      	nop
 8006472:	3728      	adds	r7, #40	@ 0x28
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}

08006478 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80064a4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f003 0302 	and.w	r3, r3, #2
 80064ac:	2b02      	cmp	r3, #2
 80064ae:	d10b      	bne.n	80064c8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d102      	bne.n	80064c0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f005 fbde 	bl	800bc7c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	f043 0302 	orr.w	r3, r3, #2
 80064c6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d132      	bne.n	8006538 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	f043 0308 	orr.w	r3, r3, #8
 80064d8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	f003 0304 	and.w	r3, r3, #4
 80064e0:	2b04      	cmp	r3, #4
 80064e2:	d126      	bne.n	8006532 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	7a5b      	ldrb	r3, [r3, #9]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d113      	bne.n	8006514 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80064f2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064f6:	d106      	bne.n	8006506 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2102      	movs	r1, #2
 80064fe:	4618      	mov	r0, r3
 8006500:	f002 fc00 	bl	8008d04 <USB_InitFSLSPClkSel>
 8006504:	e011      	b.n	800652a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2101      	movs	r1, #1
 800650c:	4618      	mov	r0, r3
 800650e:	f002 fbf9 	bl	8008d04 <USB_InitFSLSPClkSel>
 8006512:	e00a      	b.n	800652a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	79db      	ldrb	r3, [r3, #7]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d106      	bne.n	800652a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006522:	461a      	mov	r2, r3
 8006524:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8006528:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f005 fbd0 	bl	800bcd0 <HAL_HCD_PortEnabled_Callback>
 8006530:	e002      	b.n	8006538 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f005 fbda 	bl	800bcec <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f003 0320 	and.w	r3, r3, #32
 800653e:	2b20      	cmp	r3, #32
 8006540:	d103      	bne.n	800654a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	f043 0320 	orr.w	r3, r3, #32
 8006548:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006550:	461a      	mov	r2, r3
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6013      	str	r3, [r2, #0]
}
 8006556:	bf00      	nop
 8006558:	3718      	adds	r7, #24
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}
	...

08006560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b084      	sub	sp, #16
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d101      	bne.n	8006572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	e12b      	b.n	80067ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b00      	cmp	r3, #0
 800657c:	d106      	bne.n	800658c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7fd f830 	bl	80035ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2224      	movs	r2, #36	@ 0x24
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0201 	bic.w	r2, r2, #1
 80065a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80065b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80065c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80065c4:	f001 fa20 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 80065c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4a81      	ldr	r2, [pc, #516]	@ (80067d4 <HAL_I2C_Init+0x274>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d807      	bhi.n	80065e4 <HAL_I2C_Init+0x84>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	4a80      	ldr	r2, [pc, #512]	@ (80067d8 <HAL_I2C_Init+0x278>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	bf94      	ite	ls
 80065dc:	2301      	movls	r3, #1
 80065de:	2300      	movhi	r3, #0
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	e006      	b.n	80065f2 <HAL_I2C_Init+0x92>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	4a7d      	ldr	r2, [pc, #500]	@ (80067dc <HAL_I2C_Init+0x27c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	bf94      	ite	ls
 80065ec:	2301      	movls	r3, #1
 80065ee:	2300      	movhi	r3, #0
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d001      	beq.n	80065fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e0e7      	b.n	80067ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	4a78      	ldr	r2, [pc, #480]	@ (80067e0 <HAL_I2C_Init+0x280>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	0c9b      	lsrs	r3, r3, #18
 8006604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6a1b      	ldr	r3, [r3, #32]
 8006620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	4a6a      	ldr	r2, [pc, #424]	@ (80067d4 <HAL_I2C_Init+0x274>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d802      	bhi.n	8006634 <HAL_I2C_Init+0xd4>
 800662e:	68bb      	ldr	r3, [r7, #8]
 8006630:	3301      	adds	r3, #1
 8006632:	e009      	b.n	8006648 <HAL_I2C_Init+0xe8>
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800663a:	fb02 f303 	mul.w	r3, r2, r3
 800663e:	4a69      	ldr	r2, [pc, #420]	@ (80067e4 <HAL_I2C_Init+0x284>)
 8006640:	fba2 2303 	umull	r2, r3, r2, r3
 8006644:	099b      	lsrs	r3, r3, #6
 8006646:	3301      	adds	r3, #1
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6812      	ldr	r2, [r2, #0]
 800664c:	430b      	orrs	r3, r1
 800664e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800665a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	495c      	ldr	r1, [pc, #368]	@ (80067d4 <HAL_I2C_Init+0x274>)
 8006664:	428b      	cmp	r3, r1
 8006666:	d819      	bhi.n	800669c <HAL_I2C_Init+0x13c>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	1e59      	subs	r1, r3, #1
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	fbb1 f3f3 	udiv	r3, r1, r3
 8006676:	1c59      	adds	r1, r3, #1
 8006678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800667c:	400b      	ands	r3, r1
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00a      	beq.n	8006698 <HAL_I2C_Init+0x138>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	1e59      	subs	r1, r3, #1
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	005b      	lsls	r3, r3, #1
 800668c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006690:	3301      	adds	r3, #1
 8006692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006696:	e051      	b.n	800673c <HAL_I2C_Init+0x1dc>
 8006698:	2304      	movs	r3, #4
 800669a:	e04f      	b.n	800673c <HAL_I2C_Init+0x1dc>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d111      	bne.n	80066c8 <HAL_I2C_Init+0x168>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	1e58      	subs	r0, r3, #1
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6859      	ldr	r1, [r3, #4]
 80066ac:	460b      	mov	r3, r1
 80066ae:	005b      	lsls	r3, r3, #1
 80066b0:	440b      	add	r3, r1
 80066b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80066b6:	3301      	adds	r3, #1
 80066b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066bc:	2b00      	cmp	r3, #0
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	e012      	b.n	80066ee <HAL_I2C_Init+0x18e>
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	1e58      	subs	r0, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6859      	ldr	r1, [r3, #4]
 80066d0:	460b      	mov	r3, r1
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	440b      	add	r3, r1
 80066d6:	0099      	lsls	r1, r3, #2
 80066d8:	440b      	add	r3, r1
 80066da:	fbb0 f3f3 	udiv	r3, r0, r3
 80066de:	3301      	adds	r3, #1
 80066e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	bf0c      	ite	eq
 80066e8:	2301      	moveq	r3, #1
 80066ea:	2300      	movne	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d001      	beq.n	80066f6 <HAL_I2C_Init+0x196>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e022      	b.n	800673c <HAL_I2C_Init+0x1dc>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10e      	bne.n	800671c <HAL_I2C_Init+0x1bc>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	1e58      	subs	r0, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6859      	ldr	r1, [r3, #4]
 8006706:	460b      	mov	r3, r1
 8006708:	005b      	lsls	r3, r3, #1
 800670a:	440b      	add	r3, r1
 800670c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006710:	3301      	adds	r3, #1
 8006712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800671a:	e00f      	b.n	800673c <HAL_I2C_Init+0x1dc>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	1e58      	subs	r0, r3, #1
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6859      	ldr	r1, [r3, #4]
 8006724:	460b      	mov	r3, r1
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	440b      	add	r3, r1
 800672a:	0099      	lsls	r1, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006732:	3301      	adds	r3, #1
 8006734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800673c:	6879      	ldr	r1, [r7, #4]
 800673e:	6809      	ldr	r1, [r1, #0]
 8006740:	4313      	orrs	r3, r2
 8006742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69da      	ldr	r2, [r3, #28]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6a1b      	ldr	r3, [r3, #32]
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800676a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6911      	ldr	r1, [r2, #16]
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	68d2      	ldr	r2, [r2, #12]
 8006776:	4311      	orrs	r1, r2
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6812      	ldr	r2, [r2, #0]
 800677c:	430b      	orrs	r3, r1
 800677e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	695a      	ldr	r2, [r3, #20]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	699b      	ldr	r3, [r3, #24]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	430a      	orrs	r2, r1
 800679a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f042 0201 	orr.w	r2, r2, #1
 80067aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2200      	movs	r2, #0
 80067b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2220      	movs	r2, #32
 80067b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2200      	movs	r2, #0
 80067c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3710      	adds	r7, #16
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	000186a0 	.word	0x000186a0
 80067d8:	001e847f 	.word	0x001e847f
 80067dc:	003d08ff 	.word	0x003d08ff
 80067e0:	431bde83 	.word	0x431bde83
 80067e4:	10624dd3 	.word	0x10624dd3

080067e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b088      	sub	sp, #32
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d101      	bne.n	80067fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	e128      	b.n	8006a4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006800:	b2db      	uxtb	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d109      	bne.n	800681a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	4a90      	ldr	r2, [pc, #576]	@ (8006a54 <HAL_I2S_Init+0x26c>)
 8006812:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f7fc ff31 	bl	800367c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2202      	movs	r2, #2
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006830:	f023 030f 	bic.w	r3, r3, #15
 8006834:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	2202      	movs	r2, #2
 800683c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	2b02      	cmp	r3, #2
 8006844:	d060      	beq.n	8006908 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d102      	bne.n	8006854 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800684e:	2310      	movs	r3, #16
 8006850:	617b      	str	r3, [r7, #20]
 8006852:	e001      	b.n	8006858 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006854:	2320      	movs	r3, #32
 8006856:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	2b20      	cmp	r3, #32
 800685e:	d802      	bhi.n	8006866 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	005b      	lsls	r3, r3, #1
 8006864:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8006866:	2001      	movs	r0, #1
 8006868:	f001 f9d8 	bl	8007c1c <HAL_RCCEx_GetPeriphCLKFreq>
 800686c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006876:	d125      	bne.n	80068c4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	68db      	ldr	r3, [r3, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d010      	beq.n	80068a2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	68fa      	ldr	r2, [r7, #12]
 8006886:	fbb2 f2f3 	udiv	r2, r2, r3
 800688a:	4613      	mov	r3, r2
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	461a      	mov	r2, r3
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	695b      	ldr	r3, [r3, #20]
 8006898:	fbb2 f3f3 	udiv	r3, r2, r3
 800689c:	3305      	adds	r3, #5
 800689e:	613b      	str	r3, [r7, #16]
 80068a0:	e01f      	b.n	80068e2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	00db      	lsls	r3, r3, #3
 80068a6:	68fa      	ldr	r2, [r7, #12]
 80068a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068ac:	4613      	mov	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	4413      	add	r3, r2
 80068b2:	005b      	lsls	r3, r3, #1
 80068b4:	461a      	mov	r2, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80068be:	3305      	adds	r3, #5
 80068c0:	613b      	str	r3, [r7, #16]
 80068c2:	e00e      	b.n	80068e2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80068cc:	4613      	mov	r3, r2
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	4413      	add	r3, r2
 80068d2:	005b      	lsls	r3, r3, #1
 80068d4:	461a      	mov	r2, r3
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	fbb2 f3f3 	udiv	r3, r2, r3
 80068de:	3305      	adds	r3, #5
 80068e0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	4a5c      	ldr	r2, [pc, #368]	@ (8006a58 <HAL_I2S_Init+0x270>)
 80068e6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ea:	08db      	lsrs	r3, r3, #3
 80068ec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	1ad3      	subs	r3, r2, r3
 80068fc:	085b      	lsrs	r3, r3, #1
 80068fe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	021b      	lsls	r3, r3, #8
 8006904:	61bb      	str	r3, [r7, #24]
 8006906:	e003      	b.n	8006910 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8006908:	2302      	movs	r3, #2
 800690a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800690c:	2300      	movs	r3, #0
 800690e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	2b01      	cmp	r3, #1
 8006914:	d902      	bls.n	800691c <HAL_I2S_Init+0x134>
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	2bff      	cmp	r3, #255	@ 0xff
 800691a:	d907      	bls.n	800692c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006920:	f043 0210 	orr.w	r2, r3, #16
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e08f      	b.n	8006a4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	691a      	ldr	r2, [r3, #16]
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	ea42 0103 	orr.w	r1, r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69fa      	ldr	r2, [r7, #28]
 800693c:	430a      	orrs	r2, r1
 800693e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	69db      	ldr	r3, [r3, #28]
 8006946:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800694a:	f023 030f 	bic.w	r3, r3, #15
 800694e:	687a      	ldr	r2, [r7, #4]
 8006950:	6851      	ldr	r1, [r2, #4]
 8006952:	687a      	ldr	r2, [r7, #4]
 8006954:	6892      	ldr	r2, [r2, #8]
 8006956:	4311      	orrs	r1, r2
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	68d2      	ldr	r2, [r2, #12]
 800695c:	4311      	orrs	r1, r2
 800695e:	687a      	ldr	r2, [r7, #4]
 8006960:	6992      	ldr	r2, [r2, #24]
 8006962:	430a      	orrs	r2, r1
 8006964:	431a      	orrs	r2, r3
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800696e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	2b01      	cmp	r3, #1
 8006976:	d161      	bne.n	8006a3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a38      	ldr	r2, [pc, #224]	@ (8006a5c <HAL_I2S_Init+0x274>)
 800697c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a37      	ldr	r2, [pc, #220]	@ (8006a60 <HAL_I2S_Init+0x278>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d101      	bne.n	800698c <HAL_I2S_Init+0x1a4>
 8006988:	4b36      	ldr	r3, [pc, #216]	@ (8006a64 <HAL_I2S_Init+0x27c>)
 800698a:	e001      	b.n	8006990 <HAL_I2S_Init+0x1a8>
 800698c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006990:	69db      	ldr	r3, [r3, #28]
 8006992:	687a      	ldr	r2, [r7, #4]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	4932      	ldr	r1, [pc, #200]	@ (8006a60 <HAL_I2S_Init+0x278>)
 8006998:	428a      	cmp	r2, r1
 800699a:	d101      	bne.n	80069a0 <HAL_I2S_Init+0x1b8>
 800699c:	4a31      	ldr	r2, [pc, #196]	@ (8006a64 <HAL_I2S_Init+0x27c>)
 800699e:	e001      	b.n	80069a4 <HAL_I2S_Init+0x1bc>
 80069a0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80069a4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80069a8:	f023 030f 	bic.w	r3, r3, #15
 80069ac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2b      	ldr	r2, [pc, #172]	@ (8006a60 <HAL_I2S_Init+0x278>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d101      	bne.n	80069bc <HAL_I2S_Init+0x1d4>
 80069b8:	4b2a      	ldr	r3, [pc, #168]	@ (8006a64 <HAL_I2S_Init+0x27c>)
 80069ba:	e001      	b.n	80069c0 <HAL_I2S_Init+0x1d8>
 80069bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069c0:	2202      	movs	r2, #2
 80069c2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a25      	ldr	r2, [pc, #148]	@ (8006a60 <HAL_I2S_Init+0x278>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d101      	bne.n	80069d2 <HAL_I2S_Init+0x1ea>
 80069ce:	4b25      	ldr	r3, [pc, #148]	@ (8006a64 <HAL_I2S_Init+0x27c>)
 80069d0:	e001      	b.n	80069d6 <HAL_I2S_Init+0x1ee>
 80069d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069d6:	69db      	ldr	r3, [r3, #28]
 80069d8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069e2:	d003      	beq.n	80069ec <HAL_I2S_Init+0x204>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d103      	bne.n	80069f4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80069ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069f0:	613b      	str	r3, [r7, #16]
 80069f2:	e001      	b.n	80069f8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80069f4:	2300      	movs	r3, #0
 80069f6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006a02:	4313      	orrs	r3, r2
 8006a04:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006a16:	4313      	orrs	r3, r2
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	897b      	ldrh	r3, [r7, #10]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	b29b      	uxth	r3, r3
 8006a20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006a24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4a0d      	ldr	r2, [pc, #52]	@ (8006a60 <HAL_I2S_Init+0x278>)
 8006a2c:	4293      	cmp	r3, r2
 8006a2e:	d101      	bne.n	8006a34 <HAL_I2S_Init+0x24c>
 8006a30:	4b0c      	ldr	r3, [pc, #48]	@ (8006a64 <HAL_I2S_Init+0x27c>)
 8006a32:	e001      	b.n	8006a38 <HAL_I2S_Init+0x250>
 8006a34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a38:	897a      	ldrh	r2, [r7, #10]
 8006a3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2201      	movs	r2, #1
 8006a46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8006a4a:	2300      	movs	r3, #0
}
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3720      	adds	r7, #32
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	08006b5f 	.word	0x08006b5f
 8006a58:	cccccccd 	.word	0xcccccccd
 8006a5c:	08006c75 	.word	0x08006c75
 8006a60:	40003800 	.word	0x40003800
 8006a64:	40003400 	.word	0x40003400

08006a68 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	881a      	ldrh	r2, [r3, #0]
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006abc:	1c9a      	adds	r2, r3, #2
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10e      	bne.n	8006af8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	685a      	ldr	r2, [r3, #4]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ae8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7ff ffb8 	bl	8006a68 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68da      	ldr	r2, [r3, #12]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b12:	b292      	uxth	r2, r2
 8006b14:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b1a:	1c9a      	adds	r2, r3, #2
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d10e      	bne.n	8006b56 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006b46:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2201      	movs	r2, #1
 8006b4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f7ff ff93 	bl	8006a7c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8006b56:	bf00      	nop
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b086      	sub	sp, #24
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006b74:	b2db      	uxtb	r3, r3
 8006b76:	2b04      	cmp	r3, #4
 8006b78:	d13a      	bne.n	8006bf0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	f003 0301 	and.w	r3, r3, #1
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d109      	bne.n	8006b98 <I2S_IRQHandler+0x3a>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b8e:	2b40      	cmp	r3, #64	@ 0x40
 8006b90:	d102      	bne.n	8006b98 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f7ff ffb4 	bl	8006b00 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ba0:	d126      	bne.n	8006bf0 <I2S_IRQHandler+0x92>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f003 0320 	and.w	r3, r3, #32
 8006bac:	2b20      	cmp	r3, #32
 8006bae:	d11f      	bne.n	8006bf0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	685a      	ldr	r2, [r3, #4]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006bbe:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	613b      	str	r3, [r7, #16]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	613b      	str	r3, [r7, #16]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	689b      	ldr	r3, [r3, #8]
 8006bd2:	613b      	str	r3, [r7, #16]
 8006bd4:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006be2:	f043 0202 	orr.w	r2, r3, #2
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7ff ff50 	bl	8006a90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006bf6:	b2db      	uxtb	r3, r3
 8006bf8:	2b03      	cmp	r3, #3
 8006bfa:	d136      	bne.n	8006c6a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	f003 0302 	and.w	r3, r3, #2
 8006c02:	2b02      	cmp	r3, #2
 8006c04:	d109      	bne.n	8006c1a <I2S_IRQHandler+0xbc>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c10:	2b80      	cmp	r3, #128	@ 0x80
 8006c12:	d102      	bne.n	8006c1a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f7ff ff45 	bl	8006aa4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f003 0308 	and.w	r3, r3, #8
 8006c20:	2b08      	cmp	r3, #8
 8006c22:	d122      	bne.n	8006c6a <I2S_IRQHandler+0x10c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d11b      	bne.n	8006c6a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006c40:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c5c:	f043 0204 	orr.w	r2, r3, #4
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f7ff ff13 	bl	8006a90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006c6a:	bf00      	nop
 8006c6c:	3718      	adds	r7, #24
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	bd80      	pop	{r7, pc}
	...

08006c74 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a92      	ldr	r2, [pc, #584]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d101      	bne.n	8006c92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006c8e:	4b92      	ldr	r3, [pc, #584]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006c90:	e001      	b.n	8006c96 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006c92:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a8b      	ldr	r2, [pc, #556]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d101      	bne.n	8006cb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8006cac:	4b8a      	ldr	r3, [pc, #552]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006cae:	e001      	b.n	8006cb4 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8006cb0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006cb4:	685b      	ldr	r3, [r3, #4]
 8006cb6:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cc0:	d004      	beq.n	8006ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 8099 	bne.w	8006dfe <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8006ccc:	69fb      	ldr	r3, [r7, #28]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d107      	bne.n	8006ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8006cd6:	697b      	ldr	r3, [r7, #20]
 8006cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f925 	bl	8006f30 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d107      	bne.n	8006d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d002      	beq.n	8006d00 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f9c8 	bl	8007090 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006d00:	69bb      	ldr	r3, [r7, #24]
 8006d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d06:	2b40      	cmp	r3, #64	@ 0x40
 8006d08:	d13a      	bne.n	8006d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f003 0320 	and.w	r3, r3, #32
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d035      	beq.n	8006d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a6e      	ldr	r2, [pc, #440]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d101      	bne.n	8006d22 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006d1e:	4b6e      	ldr	r3, [pc, #440]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d20:	e001      	b.n	8006d26 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006d22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4969      	ldr	r1, [pc, #420]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006d2e:	428b      	cmp	r3, r1
 8006d30:	d101      	bne.n	8006d36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006d32:	4b69      	ldr	r3, [pc, #420]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006d34:	e001      	b.n	8006d3a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8006d36:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006d3a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006d3e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685a      	ldr	r2, [r3, #4]
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006d4e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006d50:	2300      	movs	r3, #0
 8006d52:	60fb      	str	r3, [r7, #12]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	60fb      	str	r3, [r7, #12]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	689b      	ldr	r3, [r3, #8]
 8006d62:	60fb      	str	r3, [r7, #12]
 8006d64:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d72:	f043 0202 	orr.w	r2, r3, #2
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f7ff fe88 	bl	8006a90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b08      	cmp	r3, #8
 8006d88:	f040 80c3 	bne.w	8006f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	f003 0320 	and.w	r3, r3, #32
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 80bd 	beq.w	8006f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	685a      	ldr	r2, [r3, #4]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006da6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a49      	ldr	r2, [pc, #292]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d101      	bne.n	8006db6 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8006db2:	4b49      	ldr	r3, [pc, #292]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006db4:	e001      	b.n	8006dba <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8006db6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4944      	ldr	r1, [pc, #272]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006dc2:	428b      	cmp	r3, r1
 8006dc4:	d101      	bne.n	8006dca <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8006dc6:	4b44      	ldr	r3, [pc, #272]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006dc8:	e001      	b.n	8006dce <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8006dca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006dce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006dd2:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	60bb      	str	r3, [r7, #8]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	60bb      	str	r3, [r7, #8]
 8006de0:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006dee:	f043 0204 	orr.w	r2, r3, #4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fe4a 	bl	8006a90 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006dfc:	e089      	b.n	8006f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	f003 0302 	and.w	r3, r3, #2
 8006e04:	2b02      	cmp	r3, #2
 8006e06:	d107      	bne.n	8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8be 	bl	8006f94 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f003 0301 	and.w	r3, r3, #1
 8006e1e:	2b01      	cmp	r3, #1
 8006e20:	d107      	bne.n	8006e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d002      	beq.n	8006e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8fd 	bl	800702c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e38:	2b40      	cmp	r3, #64	@ 0x40
 8006e3a:	d12f      	bne.n	8006e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d02a      	beq.n	8006e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	685a      	ldr	r2, [r3, #4]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006e54:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d101      	bne.n	8006e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006e60:	4b1d      	ldr	r3, [pc, #116]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e62:	e001      	b.n	8006e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006e64:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4919      	ldr	r1, [pc, #100]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006e70:	428b      	cmp	r3, r1
 8006e72:	d101      	bne.n	8006e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006e74:	4b18      	ldr	r3, [pc, #96]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006e76:	e001      	b.n	8006e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8006e78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006e7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006e80:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e8e:	f043 0202 	orr.w	r2, r3, #2
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f7ff fdfa 	bl	8006a90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006e9c:	69bb      	ldr	r3, [r7, #24]
 8006e9e:	f003 0308 	and.w	r3, r3, #8
 8006ea2:	2b08      	cmp	r3, #8
 8006ea4:	d136      	bne.n	8006f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	f003 0320 	and.w	r3, r3, #32
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d031      	beq.n	8006f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a07      	ldr	r2, [pc, #28]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d101      	bne.n	8006ebe <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8006eba:	4b07      	ldr	r3, [pc, #28]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ebc:	e001      	b.n	8006ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8006ebe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ec2:	685a      	ldr	r2, [r3, #4]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4902      	ldr	r1, [pc, #8]	@ (8006ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006eca:	428b      	cmp	r3, r1
 8006ecc:	d106      	bne.n	8006edc <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8006ece:	4b02      	ldr	r3, [pc, #8]	@ (8006ed8 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006ed0:	e006      	b.n	8006ee0 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8006ed2:	bf00      	nop
 8006ed4:	40003800 	.word	0x40003800
 8006ed8:	40003400 	.word	0x40003400
 8006edc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ee0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006ee4:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	685a      	ldr	r2, [r3, #4]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006ef4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2201      	movs	r2, #1
 8006efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f02:	f043 0204 	orr.w	r2, r3, #4
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f7ff fdc0 	bl	8006a90 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f10:	e000      	b.n	8006f14 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006f12:	bf00      	nop
}
 8006f14:	bf00      	nop
 8006f16:	3720      	adds	r7, #32
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr

08006f30 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f3c:	1c99      	adds	r1, r3, #2
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	6251      	str	r1, [r2, #36]	@ 0x24
 8006f42:	881a      	ldrh	r2, [r3, #0]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	3b01      	subs	r3, #1
 8006f52:	b29a      	uxth	r2, r3
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006f5c:	b29b      	uxth	r3, r3
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d113      	bne.n	8006f8a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006f70:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f7ff ffc9 	bl	8006f1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006f8a:	bf00      	nop
 8006f8c:	3708      	adds	r7, #8
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
	...

08006f94 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b082      	sub	sp, #8
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fa0:	1c99      	adds	r1, r3, #2
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	6251      	str	r1, [r2, #36]	@ 0x24
 8006fa6:	8819      	ldrh	r1, [r3, #0]
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a1d      	ldr	r2, [pc, #116]	@ (8007024 <I2SEx_TxISR_I2SExt+0x90>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d101      	bne.n	8006fb6 <I2SEx_TxISR_I2SExt+0x22>
 8006fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007028 <I2SEx_TxISR_I2SExt+0x94>)
 8006fb4:	e001      	b.n	8006fba <I2SEx_TxISR_I2SExt+0x26>
 8006fb6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fba:	460a      	mov	r2, r1
 8006fbc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	3b01      	subs	r3, #1
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d121      	bne.n	800701a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a12      	ldr	r2, [pc, #72]	@ (8007024 <I2SEx_TxISR_I2SExt+0x90>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d101      	bne.n	8006fe4 <I2SEx_TxISR_I2SExt+0x50>
 8006fe0:	4b11      	ldr	r3, [pc, #68]	@ (8007028 <I2SEx_TxISR_I2SExt+0x94>)
 8006fe2:	e001      	b.n	8006fe8 <I2SEx_TxISR_I2SExt+0x54>
 8006fe4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006fe8:	685a      	ldr	r2, [r3, #4]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	490d      	ldr	r1, [pc, #52]	@ (8007024 <I2SEx_TxISR_I2SExt+0x90>)
 8006ff0:	428b      	cmp	r3, r1
 8006ff2:	d101      	bne.n	8006ff8 <I2SEx_TxISR_I2SExt+0x64>
 8006ff4:	4b0c      	ldr	r3, [pc, #48]	@ (8007028 <I2SEx_TxISR_I2SExt+0x94>)
 8006ff6:	e001      	b.n	8006ffc <I2SEx_TxISR_I2SExt+0x68>
 8006ff8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ffc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8007000:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8007006:	b29b      	uxth	r3, r3
 8007008:	2b00      	cmp	r3, #0
 800700a:	d106      	bne.n	800701a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f7ff ff81 	bl	8006f1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800701a:	bf00      	nop
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
 8007022:	bf00      	nop
 8007024:	40003800 	.word	0x40003800
 8007028:	40003400 	.word	0x40003400

0800702c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b082      	sub	sp, #8
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68d8      	ldr	r0, [r3, #12]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800703e:	1c99      	adds	r1, r3, #2
 8007040:	687a      	ldr	r2, [r7, #4]
 8007042:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8007044:	b282      	uxth	r2, r0
 8007046:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800704c:	b29b      	uxth	r3, r3
 800704e:	3b01      	subs	r3, #1
 8007050:	b29a      	uxth	r2, r3
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800705a:	b29b      	uxth	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d113      	bne.n	8007088 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800706e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d106      	bne.n	8007088 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2201      	movs	r2, #1
 800707e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f7ff ff4a 	bl	8006f1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007088:	bf00      	nop
 800708a:	3708      	adds	r7, #8
 800708c:	46bd      	mov	sp, r7
 800708e:	bd80      	pop	{r7, pc}

08007090 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a20      	ldr	r2, [pc, #128]	@ (8007120 <I2SEx_RxISR_I2SExt+0x90>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d101      	bne.n	80070a6 <I2SEx_RxISR_I2SExt+0x16>
 80070a2:	4b20      	ldr	r3, [pc, #128]	@ (8007124 <I2SEx_RxISR_I2SExt+0x94>)
 80070a4:	e001      	b.n	80070aa <I2SEx_RxISR_I2SExt+0x1a>
 80070a6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070aa:	68d8      	ldr	r0, [r3, #12]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b0:	1c99      	adds	r1, r3, #2
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80070b6:	b282      	uxth	r2, r0
 80070b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070be:	b29b      	uxth	r3, r3
 80070c0:	3b01      	subs	r3, #1
 80070c2:	b29a      	uxth	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d121      	bne.n	8007116 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a12      	ldr	r2, [pc, #72]	@ (8007120 <I2SEx_RxISR_I2SExt+0x90>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d101      	bne.n	80070e0 <I2SEx_RxISR_I2SExt+0x50>
 80070dc:	4b11      	ldr	r3, [pc, #68]	@ (8007124 <I2SEx_RxISR_I2SExt+0x94>)
 80070de:	e001      	b.n	80070e4 <I2SEx_RxISR_I2SExt+0x54>
 80070e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	490d      	ldr	r1, [pc, #52]	@ (8007120 <I2SEx_RxISR_I2SExt+0x90>)
 80070ec:	428b      	cmp	r3, r1
 80070ee:	d101      	bne.n	80070f4 <I2SEx_RxISR_I2SExt+0x64>
 80070f0:	4b0c      	ldr	r3, [pc, #48]	@ (8007124 <I2SEx_RxISR_I2SExt+0x94>)
 80070f2:	e001      	b.n	80070f8 <I2SEx_RxISR_I2SExt+0x68>
 80070f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80070f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80070fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007102:	b29b      	uxth	r3, r3
 8007104:	2b00      	cmp	r3, #0
 8007106:	d106      	bne.n	8007116 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2201      	movs	r2, #1
 800710c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f7ff ff03 	bl	8006f1c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	40003800 	.word	0x40003800
 8007124:	40003400 	.word	0x40003400

08007128 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d101      	bne.n	800713a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e267      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f003 0301 	and.w	r3, r3, #1
 8007142:	2b00      	cmp	r3, #0
 8007144:	d075      	beq.n	8007232 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007146:	4b88      	ldr	r3, [pc, #544]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	f003 030c 	and.w	r3, r3, #12
 800714e:	2b04      	cmp	r3, #4
 8007150:	d00c      	beq.n	800716c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007152:	4b85      	ldr	r3, [pc, #532]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800715a:	2b08      	cmp	r3, #8
 800715c:	d112      	bne.n	8007184 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800715e:	4b82      	ldr	r3, [pc, #520]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007160:	685b      	ldr	r3, [r3, #4]
 8007162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007166:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800716a:	d10b      	bne.n	8007184 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800716c:	4b7e      	ldr	r3, [pc, #504]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d05b      	beq.n	8007230 <HAL_RCC_OscConfig+0x108>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d157      	bne.n	8007230 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007180:	2301      	movs	r3, #1
 8007182:	e242      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800718c:	d106      	bne.n	800719c <HAL_RCC_OscConfig+0x74>
 800718e:	4b76      	ldr	r3, [pc, #472]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a75      	ldr	r2, [pc, #468]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007194:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007198:	6013      	str	r3, [r2, #0]
 800719a:	e01d      	b.n	80071d8 <HAL_RCC_OscConfig+0xb0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	685b      	ldr	r3, [r3, #4]
 80071a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80071a4:	d10c      	bne.n	80071c0 <HAL_RCC_OscConfig+0x98>
 80071a6:	4b70      	ldr	r3, [pc, #448]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a6f      	ldr	r2, [pc, #444]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80071b0:	6013      	str	r3, [r2, #0]
 80071b2:	4b6d      	ldr	r3, [pc, #436]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a6c      	ldr	r2, [pc, #432]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80071bc:	6013      	str	r3, [r2, #0]
 80071be:	e00b      	b.n	80071d8 <HAL_RCC_OscConfig+0xb0>
 80071c0:	4b69      	ldr	r3, [pc, #420]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	4a68      	ldr	r2, [pc, #416]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	4b66      	ldr	r3, [pc, #408]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	4a65      	ldr	r2, [pc, #404]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80071d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	685b      	ldr	r3, [r3, #4]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d013      	beq.n	8007208 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80071e0:	f7fc fd92 	bl	8003d08 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80071e8:	f7fc fd8e 	bl	8003d08 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b64      	cmp	r3, #100	@ 0x64
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e207      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80071fa:	4b5b      	ldr	r3, [pc, #364]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0xc0>
 8007206:	e014      	b.n	8007232 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007208:	f7fc fd7e 	bl	8003d08 <HAL_GetTick>
 800720c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800720e:	e008      	b.n	8007222 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007210:	f7fc fd7a 	bl	8003d08 <HAL_GetTick>
 8007214:	4602      	mov	r2, r0
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	2b64      	cmp	r3, #100	@ 0x64
 800721c:	d901      	bls.n	8007222 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800721e:	2303      	movs	r3, #3
 8007220:	e1f3      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007222:	4b51      	ldr	r3, [pc, #324]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1f0      	bne.n	8007210 <HAL_RCC_OscConfig+0xe8>
 800722e:	e000      	b.n	8007232 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007230:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f003 0302 	and.w	r3, r3, #2
 800723a:	2b00      	cmp	r3, #0
 800723c:	d063      	beq.n	8007306 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800723e:	4b4a      	ldr	r3, [pc, #296]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	f003 030c 	and.w	r3, r3, #12
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00b      	beq.n	8007262 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800724a:	4b47      	ldr	r3, [pc, #284]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007252:	2b08      	cmp	r3, #8
 8007254:	d11c      	bne.n	8007290 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007256:	4b44      	ldr	r3, [pc, #272]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007258:	685b      	ldr	r3, [r3, #4]
 800725a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800725e:	2b00      	cmp	r3, #0
 8007260:	d116      	bne.n	8007290 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007262:	4b41      	ldr	r3, [pc, #260]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 0302 	and.w	r3, r3, #2
 800726a:	2b00      	cmp	r3, #0
 800726c:	d005      	beq.n	800727a <HAL_RCC_OscConfig+0x152>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	2b01      	cmp	r3, #1
 8007274:	d001      	beq.n	800727a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007276:	2301      	movs	r3, #1
 8007278:	e1c7      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800727a:	4b3b      	ldr	r3, [pc, #236]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	691b      	ldr	r3, [r3, #16]
 8007286:	00db      	lsls	r3, r3, #3
 8007288:	4937      	ldr	r1, [pc, #220]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 800728a:	4313      	orrs	r3, r2
 800728c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800728e:	e03a      	b.n	8007306 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	68db      	ldr	r3, [r3, #12]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d020      	beq.n	80072da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007298:	4b34      	ldr	r3, [pc, #208]	@ (800736c <HAL_RCC_OscConfig+0x244>)
 800729a:	2201      	movs	r2, #1
 800729c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800729e:	f7fc fd33 	bl	8003d08 <HAL_GetTick>
 80072a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072a4:	e008      	b.n	80072b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072a6:	f7fc fd2f 	bl	8003d08 <HAL_GetTick>
 80072aa:	4602      	mov	r2, r0
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	1ad3      	subs	r3, r2, r3
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d901      	bls.n	80072b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80072b4:	2303      	movs	r3, #3
 80072b6:	e1a8      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0302 	and.w	r3, r3, #2
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0f0      	beq.n	80072a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80072c4:	4b28      	ldr	r3, [pc, #160]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	691b      	ldr	r3, [r3, #16]
 80072d0:	00db      	lsls	r3, r3, #3
 80072d2:	4925      	ldr	r1, [pc, #148]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80072d4:	4313      	orrs	r3, r2
 80072d6:	600b      	str	r3, [r1, #0]
 80072d8:	e015      	b.n	8007306 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80072da:	4b24      	ldr	r3, [pc, #144]	@ (800736c <HAL_RCC_OscConfig+0x244>)
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80072e0:	f7fc fd12 	bl	8003d08 <HAL_GetTick>
 80072e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072e6:	e008      	b.n	80072fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80072e8:	f7fc fd0e 	bl	8003d08 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	693b      	ldr	r3, [r7, #16]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	2b02      	cmp	r3, #2
 80072f4:	d901      	bls.n	80072fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e187      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80072fa:	4b1b      	ldr	r3, [pc, #108]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f003 0302 	and.w	r3, r3, #2
 8007302:	2b00      	cmp	r3, #0
 8007304:	d1f0      	bne.n	80072e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f003 0308 	and.w	r3, r3, #8
 800730e:	2b00      	cmp	r3, #0
 8007310:	d036      	beq.n	8007380 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d016      	beq.n	8007348 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800731a:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <HAL_RCC_OscConfig+0x248>)
 800731c:	2201      	movs	r2, #1
 800731e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007320:	f7fc fcf2 	bl	8003d08 <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007328:	f7fc fcee 	bl	8003d08 <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e167      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800733a:	4b0b      	ldr	r3, [pc, #44]	@ (8007368 <HAL_RCC_OscConfig+0x240>)
 800733c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800733e:	f003 0302 	and.w	r3, r3, #2
 8007342:	2b00      	cmp	r3, #0
 8007344:	d0f0      	beq.n	8007328 <HAL_RCC_OscConfig+0x200>
 8007346:	e01b      	b.n	8007380 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <HAL_RCC_OscConfig+0x248>)
 800734a:	2200      	movs	r2, #0
 800734c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800734e:	f7fc fcdb 	bl	8003d08 <HAL_GetTick>
 8007352:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007354:	e00e      	b.n	8007374 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007356:	f7fc fcd7 	bl	8003d08 <HAL_GetTick>
 800735a:	4602      	mov	r2, r0
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	1ad3      	subs	r3, r2, r3
 8007360:	2b02      	cmp	r3, #2
 8007362:	d907      	bls.n	8007374 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e150      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
 8007368:	40023800 	.word	0x40023800
 800736c:	42470000 	.word	0x42470000
 8007370:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007374:	4b88      	ldr	r3, [pc, #544]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007376:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007378:	f003 0302 	and.w	r3, r3, #2
 800737c:	2b00      	cmp	r3, #0
 800737e:	d1ea      	bne.n	8007356 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	f000 8097 	beq.w	80074bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007392:	4b81      	ldr	r3, [pc, #516]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007394:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800739a:	2b00      	cmp	r3, #0
 800739c:	d10f      	bne.n	80073be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800739e:	2300      	movs	r3, #0
 80073a0:	60bb      	str	r3, [r7, #8]
 80073a2:	4b7d      	ldr	r3, [pc, #500]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80073a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073a6:	4a7c      	ldr	r2, [pc, #496]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80073a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80073ae:	4b7a      	ldr	r3, [pc, #488]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073b6:	60bb      	str	r3, [r7, #8]
 80073b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80073ba:	2301      	movs	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073be:	4b77      	ldr	r3, [pc, #476]	@ (800759c <HAL_RCC_OscConfig+0x474>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d118      	bne.n	80073fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073ca:	4b74      	ldr	r3, [pc, #464]	@ (800759c <HAL_RCC_OscConfig+0x474>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a73      	ldr	r2, [pc, #460]	@ (800759c <HAL_RCC_OscConfig+0x474>)
 80073d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80073d6:	f7fc fc97 	bl	8003d08 <HAL_GetTick>
 80073da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073dc:	e008      	b.n	80073f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073de:	f7fc fc93 	bl	8003d08 <HAL_GetTick>
 80073e2:	4602      	mov	r2, r0
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	2b02      	cmp	r3, #2
 80073ea:	d901      	bls.n	80073f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e10c      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073f0:	4b6a      	ldr	r3, [pc, #424]	@ (800759c <HAL_RCC_OscConfig+0x474>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d0f0      	beq.n	80073de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b01      	cmp	r3, #1
 8007402:	d106      	bne.n	8007412 <HAL_RCC_OscConfig+0x2ea>
 8007404:	4b64      	ldr	r3, [pc, #400]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007406:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007408:	4a63      	ldr	r2, [pc, #396]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007410:	e01c      	b.n	800744c <HAL_RCC_OscConfig+0x324>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	2b05      	cmp	r3, #5
 8007418:	d10c      	bne.n	8007434 <HAL_RCC_OscConfig+0x30c>
 800741a:	4b5f      	ldr	r3, [pc, #380]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 800741c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800741e:	4a5e      	ldr	r2, [pc, #376]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007420:	f043 0304 	orr.w	r3, r3, #4
 8007424:	6713      	str	r3, [r2, #112]	@ 0x70
 8007426:	4b5c      	ldr	r3, [pc, #368]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800742a:	4a5b      	ldr	r2, [pc, #364]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	6713      	str	r3, [r2, #112]	@ 0x70
 8007432:	e00b      	b.n	800744c <HAL_RCC_OscConfig+0x324>
 8007434:	4b58      	ldr	r3, [pc, #352]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007436:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007438:	4a57      	ldr	r2, [pc, #348]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007440:	4b55      	ldr	r3, [pc, #340]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007442:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007444:	4a54      	ldr	r2, [pc, #336]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007446:	f023 0304 	bic.w	r3, r3, #4
 800744a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	689b      	ldr	r3, [r3, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d015      	beq.n	8007480 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007454:	f7fc fc58 	bl	8003d08 <HAL_GetTick>
 8007458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800745a:	e00a      	b.n	8007472 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800745c:	f7fc fc54 	bl	8003d08 <HAL_GetTick>
 8007460:	4602      	mov	r2, r0
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	1ad3      	subs	r3, r2, r3
 8007466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800746a:	4293      	cmp	r3, r2
 800746c:	d901      	bls.n	8007472 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800746e:	2303      	movs	r3, #3
 8007470:	e0cb      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007472:	4b49      	ldr	r3, [pc, #292]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007476:	f003 0302 	and.w	r3, r3, #2
 800747a:	2b00      	cmp	r3, #0
 800747c:	d0ee      	beq.n	800745c <HAL_RCC_OscConfig+0x334>
 800747e:	e014      	b.n	80074aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007480:	f7fc fc42 	bl	8003d08 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007486:	e00a      	b.n	800749e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007488:	f7fc fc3e 	bl	8003d08 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007496:	4293      	cmp	r3, r2
 8007498:	d901      	bls.n	800749e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e0b5      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800749e:	4b3e      	ldr	r3, [pc, #248]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80074a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80074a2:	f003 0302 	and.w	r3, r3, #2
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d1ee      	bne.n	8007488 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80074aa:	7dfb      	ldrb	r3, [r7, #23]
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d105      	bne.n	80074bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80074b0:	4b39      	ldr	r3, [pc, #228]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80074b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b4:	4a38      	ldr	r2, [pc, #224]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80074b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80074ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f000 80a1 	beq.w	8007608 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80074c6:	4b34      	ldr	r3, [pc, #208]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80074c8:	689b      	ldr	r3, [r3, #8]
 80074ca:	f003 030c 	and.w	r3, r3, #12
 80074ce:	2b08      	cmp	r3, #8
 80074d0:	d05c      	beq.n	800758c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	2b02      	cmp	r3, #2
 80074d8:	d141      	bne.n	800755e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074da:	4b31      	ldr	r3, [pc, #196]	@ (80075a0 <HAL_RCC_OscConfig+0x478>)
 80074dc:	2200      	movs	r2, #0
 80074de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e0:	f7fc fc12 	bl	8003d08 <HAL_GetTick>
 80074e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074e6:	e008      	b.n	80074fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074e8:	f7fc fc0e 	bl	8003d08 <HAL_GetTick>
 80074ec:	4602      	mov	r2, r0
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	1ad3      	subs	r3, r2, r3
 80074f2:	2b02      	cmp	r3, #2
 80074f4:	d901      	bls.n	80074fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e087      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fa:	4b27      	ldr	r3, [pc, #156]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1f0      	bne.n	80074e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6a1b      	ldr	r3, [r3, #32]
 800750e:	431a      	orrs	r2, r3
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007514:	019b      	lsls	r3, r3, #6
 8007516:	431a      	orrs	r2, r3
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800751c:	085b      	lsrs	r3, r3, #1
 800751e:	3b01      	subs	r3, #1
 8007520:	041b      	lsls	r3, r3, #16
 8007522:	431a      	orrs	r2, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007528:	061b      	lsls	r3, r3, #24
 800752a:	491b      	ldr	r1, [pc, #108]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 800752c:	4313      	orrs	r3, r2
 800752e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007530:	4b1b      	ldr	r3, [pc, #108]	@ (80075a0 <HAL_RCC_OscConfig+0x478>)
 8007532:	2201      	movs	r2, #1
 8007534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007536:	f7fc fbe7 	bl	8003d08 <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800753c:	e008      	b.n	8007550 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800753e:	f7fc fbe3 	bl	8003d08 <HAL_GetTick>
 8007542:	4602      	mov	r2, r0
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	2b02      	cmp	r3, #2
 800754a:	d901      	bls.n	8007550 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800754c:	2303      	movs	r3, #3
 800754e:	e05c      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007550:	4b11      	ldr	r3, [pc, #68]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007558:	2b00      	cmp	r3, #0
 800755a:	d0f0      	beq.n	800753e <HAL_RCC_OscConfig+0x416>
 800755c:	e054      	b.n	8007608 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800755e:	4b10      	ldr	r3, [pc, #64]	@ (80075a0 <HAL_RCC_OscConfig+0x478>)
 8007560:	2200      	movs	r2, #0
 8007562:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007564:	f7fc fbd0 	bl	8003d08 <HAL_GetTick>
 8007568:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800756a:	e008      	b.n	800757e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800756c:	f7fc fbcc 	bl	8003d08 <HAL_GetTick>
 8007570:	4602      	mov	r2, r0
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	1ad3      	subs	r3, r2, r3
 8007576:	2b02      	cmp	r3, #2
 8007578:	d901      	bls.n	800757e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800757a:	2303      	movs	r3, #3
 800757c:	e045      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800757e:	4b06      	ldr	r3, [pc, #24]	@ (8007598 <HAL_RCC_OscConfig+0x470>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d1f0      	bne.n	800756c <HAL_RCC_OscConfig+0x444>
 800758a:	e03d      	b.n	8007608 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	699b      	ldr	r3, [r3, #24]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d107      	bne.n	80075a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007594:	2301      	movs	r3, #1
 8007596:	e038      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
 8007598:	40023800 	.word	0x40023800
 800759c:	40007000 	.word	0x40007000
 80075a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80075a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007614 <HAL_RCC_OscConfig+0x4ec>)
 80075a6:	685b      	ldr	r3, [r3, #4]
 80075a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	2b01      	cmp	r3, #1
 80075b0:	d028      	beq.n	8007604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80075bc:	429a      	cmp	r2, r3
 80075be:	d121      	bne.n	8007604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d11a      	bne.n	8007604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80075d4:	4013      	ands	r3, r2
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80075da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80075dc:	4293      	cmp	r3, r2
 80075de:	d111      	bne.n	8007604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075ea:	085b      	lsrs	r3, r3, #1
 80075ec:	3b01      	subs	r3, #1
 80075ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d107      	bne.n	8007604 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007600:	429a      	cmp	r2, r3
 8007602:	d001      	beq.n	8007608 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007604:	2301      	movs	r3, #1
 8007606:	e000      	b.n	800760a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007608:	2300      	movs	r3, #0
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	40023800 	.word	0x40023800

08007618 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
 8007620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d101      	bne.n	800762c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e0cc      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800762c:	4b68      	ldr	r3, [pc, #416]	@ (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0307 	and.w	r3, r3, #7
 8007634:	683a      	ldr	r2, [r7, #0]
 8007636:	429a      	cmp	r2, r3
 8007638:	d90c      	bls.n	8007654 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800763a:	4b65      	ldr	r3, [pc, #404]	@ (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	b2d2      	uxtb	r2, r2
 8007640:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007642:	4b63      	ldr	r3, [pc, #396]	@ (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0307 	and.w	r3, r3, #7
 800764a:	683a      	ldr	r2, [r7, #0]
 800764c:	429a      	cmp	r2, r3
 800764e:	d001      	beq.n	8007654 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e0b8      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d020      	beq.n	80076a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 0304 	and.w	r3, r3, #4
 8007668:	2b00      	cmp	r3, #0
 800766a:	d005      	beq.n	8007678 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800766c:	4b59      	ldr	r3, [pc, #356]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	4a58      	ldr	r2, [pc, #352]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007672:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007676:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	f003 0308 	and.w	r3, r3, #8
 8007680:	2b00      	cmp	r3, #0
 8007682:	d005      	beq.n	8007690 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007684:	4b53      	ldr	r3, [pc, #332]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	4a52      	ldr	r2, [pc, #328]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800768a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800768e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007690:	4b50      	ldr	r3, [pc, #320]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007692:	689b      	ldr	r3, [r3, #8]
 8007694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	494d      	ldr	r1, [pc, #308]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800769e:	4313      	orrs	r3, r2
 80076a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f003 0301 	and.w	r3, r3, #1
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d044      	beq.n	8007738 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d107      	bne.n	80076c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b6:	4b47      	ldr	r3, [pc, #284]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d119      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076c2:	2301      	movs	r3, #1
 80076c4:	e07f      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2b02      	cmp	r3, #2
 80076cc:	d003      	beq.n	80076d6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d107      	bne.n	80076e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80076d6:	4b3f      	ldr	r3, [pc, #252]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e06f      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076e6:	4b3b      	ldr	r3, [pc, #236]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f003 0302 	and.w	r3, r3, #2
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d101      	bne.n	80076f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e067      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80076f6:	4b37      	ldr	r3, [pc, #220]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80076f8:	689b      	ldr	r3, [r3, #8]
 80076fa:	f023 0203 	bic.w	r2, r3, #3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	4934      	ldr	r1, [pc, #208]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007704:	4313      	orrs	r3, r2
 8007706:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007708:	f7fc fafe 	bl	8003d08 <HAL_GetTick>
 800770c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800770e:	e00a      	b.n	8007726 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007710:	f7fc fafa 	bl	8003d08 <HAL_GetTick>
 8007714:	4602      	mov	r2, r0
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800771e:	4293      	cmp	r3, r2
 8007720:	d901      	bls.n	8007726 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007722:	2303      	movs	r3, #3
 8007724:	e04f      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007726:	4b2b      	ldr	r3, [pc, #172]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 020c 	and.w	r2, r3, #12
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	009b      	lsls	r3, r3, #2
 8007734:	429a      	cmp	r2, r3
 8007736:	d1eb      	bne.n	8007710 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007738:	4b25      	ldr	r3, [pc, #148]	@ (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	f003 0307 	and.w	r3, r3, #7
 8007740:	683a      	ldr	r2, [r7, #0]
 8007742:	429a      	cmp	r2, r3
 8007744:	d20c      	bcs.n	8007760 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007746:	4b22      	ldr	r3, [pc, #136]	@ (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007748:	683a      	ldr	r2, [r7, #0]
 800774a:	b2d2      	uxtb	r2, r2
 800774c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800774e:	4b20      	ldr	r3, [pc, #128]	@ (80077d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f003 0307 	and.w	r3, r3, #7
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	429a      	cmp	r2, r3
 800775a:	d001      	beq.n	8007760 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e032      	b.n	80077c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0304 	and.w	r3, r3, #4
 8007768:	2b00      	cmp	r3, #0
 800776a:	d008      	beq.n	800777e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800776c:	4b19      	ldr	r3, [pc, #100]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	4916      	ldr	r1, [pc, #88]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800777a:	4313      	orrs	r3, r2
 800777c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b00      	cmp	r3, #0
 8007788:	d009      	beq.n	800779e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800778a:	4b12      	ldr	r3, [pc, #72]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800778c:	689b      	ldr	r3, [r3, #8]
 800778e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	00db      	lsls	r3, r3, #3
 8007798:	490e      	ldr	r1, [pc, #56]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 800779a:	4313      	orrs	r3, r2
 800779c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800779e:	f000 f821 	bl	80077e4 <HAL_RCC_GetSysClockFreq>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b0b      	ldr	r3, [pc, #44]	@ (80077d4 <HAL_RCC_ClockConfig+0x1bc>)
 80077a6:	689b      	ldr	r3, [r3, #8]
 80077a8:	091b      	lsrs	r3, r3, #4
 80077aa:	f003 030f 	and.w	r3, r3, #15
 80077ae:	490a      	ldr	r1, [pc, #40]	@ (80077d8 <HAL_RCC_ClockConfig+0x1c0>)
 80077b0:	5ccb      	ldrb	r3, [r1, r3]
 80077b2:	fa22 f303 	lsr.w	r3, r2, r3
 80077b6:	4a09      	ldr	r2, [pc, #36]	@ (80077dc <HAL_RCC_ClockConfig+0x1c4>)
 80077b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80077ba:	4b09      	ldr	r3, [pc, #36]	@ (80077e0 <HAL_RCC_ClockConfig+0x1c8>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4618      	mov	r0, r3
 80077c0:	f7fc fa5e 	bl	8003c80 <HAL_InitTick>

  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	40023c00 	.word	0x40023c00
 80077d4:	40023800 	.word	0x40023800
 80077d8:	0800d74c 	.word	0x0800d74c
 80077dc:	20000070 	.word	0x20000070
 80077e0:	20000074 	.word	0x20000074

080077e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80077e8:	b094      	sub	sp, #80	@ 0x50
 80077ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80077ec:	2300      	movs	r3, #0
 80077ee:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80077f0:	2300      	movs	r3, #0
 80077f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80077f8:	2300      	movs	r3, #0
 80077fa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80077fc:	4b79      	ldr	r3, [pc, #484]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	f003 030c 	and.w	r3, r3, #12
 8007804:	2b08      	cmp	r3, #8
 8007806:	d00d      	beq.n	8007824 <HAL_RCC_GetSysClockFreq+0x40>
 8007808:	2b08      	cmp	r3, #8
 800780a:	f200 80e1 	bhi.w	80079d0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <HAL_RCC_GetSysClockFreq+0x34>
 8007812:	2b04      	cmp	r3, #4
 8007814:	d003      	beq.n	800781e <HAL_RCC_GetSysClockFreq+0x3a>
 8007816:	e0db      	b.n	80079d0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007818:	4b73      	ldr	r3, [pc, #460]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0x204>)
 800781a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800781c:	e0db      	b.n	80079d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800781e:	4b73      	ldr	r3, [pc, #460]	@ (80079ec <HAL_RCC_GetSysClockFreq+0x208>)
 8007820:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007822:	e0d8      	b.n	80079d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007824:	4b6f      	ldr	r3, [pc, #444]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800782c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800782e:	4b6d      	ldr	r3, [pc, #436]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007830:	685b      	ldr	r3, [r3, #4]
 8007832:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007836:	2b00      	cmp	r3, #0
 8007838:	d063      	beq.n	8007902 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800783a:	4b6a      	ldr	r3, [pc, #424]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x200>)
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	099b      	lsrs	r3, r3, #6
 8007840:	2200      	movs	r2, #0
 8007842:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007844:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784c:	633b      	str	r3, [r7, #48]	@ 0x30
 800784e:	2300      	movs	r3, #0
 8007850:	637b      	str	r3, [r7, #52]	@ 0x34
 8007852:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007856:	4622      	mov	r2, r4
 8007858:	462b      	mov	r3, r5
 800785a:	f04f 0000 	mov.w	r0, #0
 800785e:	f04f 0100 	mov.w	r1, #0
 8007862:	0159      	lsls	r1, r3, #5
 8007864:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007868:	0150      	lsls	r0, r2, #5
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4621      	mov	r1, r4
 8007870:	1a51      	subs	r1, r2, r1
 8007872:	6139      	str	r1, [r7, #16]
 8007874:	4629      	mov	r1, r5
 8007876:	eb63 0301 	sbc.w	r3, r3, r1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	f04f 0200 	mov.w	r2, #0
 8007880:	f04f 0300 	mov.w	r3, #0
 8007884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007888:	4659      	mov	r1, fp
 800788a:	018b      	lsls	r3, r1, #6
 800788c:	4651      	mov	r1, sl
 800788e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007892:	4651      	mov	r1, sl
 8007894:	018a      	lsls	r2, r1, #6
 8007896:	4651      	mov	r1, sl
 8007898:	ebb2 0801 	subs.w	r8, r2, r1
 800789c:	4659      	mov	r1, fp
 800789e:	eb63 0901 	sbc.w	r9, r3, r1
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80078ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80078b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078b6:	4690      	mov	r8, r2
 80078b8:	4699      	mov	r9, r3
 80078ba:	4623      	mov	r3, r4
 80078bc:	eb18 0303 	adds.w	r3, r8, r3
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	462b      	mov	r3, r5
 80078c4:	eb49 0303 	adc.w	r3, r9, r3
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	f04f 0200 	mov.w	r2, #0
 80078ce:	f04f 0300 	mov.w	r3, #0
 80078d2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80078d6:	4629      	mov	r1, r5
 80078d8:	024b      	lsls	r3, r1, #9
 80078da:	4621      	mov	r1, r4
 80078dc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80078e0:	4621      	mov	r1, r4
 80078e2:	024a      	lsls	r2, r1, #9
 80078e4:	4610      	mov	r0, r2
 80078e6:	4619      	mov	r1, r3
 80078e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078ea:	2200      	movs	r2, #0
 80078ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80078ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078f0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80078f4:	f7f8 fcc4 	bl	8000280 <__aeabi_uldivmod>
 80078f8:	4602      	mov	r2, r0
 80078fa:	460b      	mov	r3, r1
 80078fc:	4613      	mov	r3, r2
 80078fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007900:	e058      	b.n	80079b4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007902:	4b38      	ldr	r3, [pc, #224]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	099b      	lsrs	r3, r3, #6
 8007908:	2200      	movs	r2, #0
 800790a:	4618      	mov	r0, r3
 800790c:	4611      	mov	r1, r2
 800790e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007912:	623b      	str	r3, [r7, #32]
 8007914:	2300      	movs	r3, #0
 8007916:	627b      	str	r3, [r7, #36]	@ 0x24
 8007918:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800791c:	4642      	mov	r2, r8
 800791e:	464b      	mov	r3, r9
 8007920:	f04f 0000 	mov.w	r0, #0
 8007924:	f04f 0100 	mov.w	r1, #0
 8007928:	0159      	lsls	r1, r3, #5
 800792a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800792e:	0150      	lsls	r0, r2, #5
 8007930:	4602      	mov	r2, r0
 8007932:	460b      	mov	r3, r1
 8007934:	4641      	mov	r1, r8
 8007936:	ebb2 0a01 	subs.w	sl, r2, r1
 800793a:	4649      	mov	r1, r9
 800793c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007940:	f04f 0200 	mov.w	r2, #0
 8007944:	f04f 0300 	mov.w	r3, #0
 8007948:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800794c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007950:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007954:	ebb2 040a 	subs.w	r4, r2, sl
 8007958:	eb63 050b 	sbc.w	r5, r3, fp
 800795c:	f04f 0200 	mov.w	r2, #0
 8007960:	f04f 0300 	mov.w	r3, #0
 8007964:	00eb      	lsls	r3, r5, #3
 8007966:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800796a:	00e2      	lsls	r2, r4, #3
 800796c:	4614      	mov	r4, r2
 800796e:	461d      	mov	r5, r3
 8007970:	4643      	mov	r3, r8
 8007972:	18e3      	adds	r3, r4, r3
 8007974:	603b      	str	r3, [r7, #0]
 8007976:	464b      	mov	r3, r9
 8007978:	eb45 0303 	adc.w	r3, r5, r3
 800797c:	607b      	str	r3, [r7, #4]
 800797e:	f04f 0200 	mov.w	r2, #0
 8007982:	f04f 0300 	mov.w	r3, #0
 8007986:	e9d7 4500 	ldrd	r4, r5, [r7]
 800798a:	4629      	mov	r1, r5
 800798c:	028b      	lsls	r3, r1, #10
 800798e:	4621      	mov	r1, r4
 8007990:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007994:	4621      	mov	r1, r4
 8007996:	028a      	lsls	r2, r1, #10
 8007998:	4610      	mov	r0, r2
 800799a:	4619      	mov	r1, r3
 800799c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800799e:	2200      	movs	r2, #0
 80079a0:	61bb      	str	r3, [r7, #24]
 80079a2:	61fa      	str	r2, [r7, #28]
 80079a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80079a8:	f7f8 fc6a 	bl	8000280 <__aeabi_uldivmod>
 80079ac:	4602      	mov	r2, r0
 80079ae:	460b      	mov	r3, r1
 80079b0:	4613      	mov	r3, r2
 80079b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80079b4:	4b0b      	ldr	r3, [pc, #44]	@ (80079e4 <HAL_RCC_GetSysClockFreq+0x200>)
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	0c1b      	lsrs	r3, r3, #16
 80079ba:	f003 0303 	and.w	r3, r3, #3
 80079be:	3301      	adds	r3, #1
 80079c0:	005b      	lsls	r3, r3, #1
 80079c2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80079c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80079c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80079cc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079ce:	e002      	b.n	80079d6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80079d0:	4b05      	ldr	r3, [pc, #20]	@ (80079e8 <HAL_RCC_GetSysClockFreq+0x204>)
 80079d2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80079d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80079d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3750      	adds	r7, #80	@ 0x50
 80079dc:	46bd      	mov	sp, r7
 80079de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80079e2:	bf00      	nop
 80079e4:	40023800 	.word	0x40023800
 80079e8:	00f42400 	.word	0x00f42400
 80079ec:	007a1200 	.word	0x007a1200

080079f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079f0:	b480      	push	{r7}
 80079f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80079f4:	4b03      	ldr	r3, [pc, #12]	@ (8007a04 <HAL_RCC_GetHCLKFreq+0x14>)
 80079f6:	681b      	ldr	r3, [r3, #0]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	20000070 	.word	0x20000070

08007a08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a08:	b580      	push	{r7, lr}
 8007a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007a0c:	f7ff fff0 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a10:	4602      	mov	r2, r0
 8007a12:	4b05      	ldr	r3, [pc, #20]	@ (8007a28 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a14:	689b      	ldr	r3, [r3, #8]
 8007a16:	0a9b      	lsrs	r3, r3, #10
 8007a18:	f003 0307 	and.w	r3, r3, #7
 8007a1c:	4903      	ldr	r1, [pc, #12]	@ (8007a2c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a1e:	5ccb      	ldrb	r3, [r1, r3]
 8007a20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a24:	4618      	mov	r0, r3
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	0800d75c 	.word	0x0800d75c

08007a30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007a34:	f7ff ffdc 	bl	80079f0 <HAL_RCC_GetHCLKFreq>
 8007a38:	4602      	mov	r2, r0
 8007a3a:	4b05      	ldr	r3, [pc, #20]	@ (8007a50 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	0b5b      	lsrs	r3, r3, #13
 8007a40:	f003 0307 	and.w	r3, r3, #7
 8007a44:	4903      	ldr	r1, [pc, #12]	@ (8007a54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a46:	5ccb      	ldrb	r3, [r1, r3]
 8007a48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40023800 	.word	0x40023800
 8007a54:	0800d75c 	.word	0x0800d75c

08007a58 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b086      	sub	sp, #24
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f003 0301 	and.w	r3, r3, #1
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d105      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d035      	beq.n	8007aec <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007a80:	4b62      	ldr	r3, [pc, #392]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007a86:	f7fc f93f 	bl	8003d08 <HAL_GetTick>
 8007a8a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007a8c:	e008      	b.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007a8e:	f7fc f93b 	bl	8003d08 <HAL_GetTick>
 8007a92:	4602      	mov	r2, r0
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	1ad3      	subs	r3, r2, r3
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d901      	bls.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007a9c:	2303      	movs	r3, #3
 8007a9e:	e0b0      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007aa0:	4b5b      	ldr	r3, [pc, #364]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1f0      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	019a      	lsls	r2, r3, #6
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	071b      	lsls	r3, r3, #28
 8007ab8:	4955      	ldr	r1, [pc, #340]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ac0:	4b52      	ldr	r3, [pc, #328]	@ (8007c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ac6:	f7fc f91f 	bl	8003d08 <HAL_GetTick>
 8007aca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007acc:	e008      	b.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007ace:	f7fc f91b 	bl	8003d08 <HAL_GetTick>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	2b02      	cmp	r3, #2
 8007ada:	d901      	bls.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007adc:	2303      	movs	r3, #3
 8007ade:	e090      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ae0:	4b4b      	ldr	r3, [pc, #300]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d0f0      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0302 	and.w	r3, r3, #2
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	f000 8083 	beq.w	8007c00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007afa:	2300      	movs	r3, #0
 8007afc:	60fb      	str	r3, [r7, #12]
 8007afe:	4b44      	ldr	r3, [pc, #272]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b02:	4a43      	ldr	r2, [pc, #268]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8007b0a:	4b41      	ldr	r3, [pc, #260]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007b12:	60fb      	str	r3, [r7, #12]
 8007b14:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007b16:	4b3f      	ldr	r3, [pc, #252]	@ (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a3e      	ldr	r2, [pc, #248]	@ (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007b20:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007b22:	f7fc f8f1 	bl	8003d08 <HAL_GetTick>
 8007b26:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b28:	e008      	b.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b2a:	f7fc f8ed 	bl	8003d08 <HAL_GetTick>
 8007b2e:	4602      	mov	r2, r0
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	1ad3      	subs	r3, r2, r3
 8007b34:	2b02      	cmp	r3, #2
 8007b36:	d901      	bls.n	8007b3c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007b38:	2303      	movs	r3, #3
 8007b3a:	e062      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007b3c:	4b35      	ldr	r3, [pc, #212]	@ (8007c14 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d0f0      	beq.n	8007b2a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007b48:	4b31      	ldr	r3, [pc, #196]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b50:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d02f      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007b60:	693a      	ldr	r2, [r7, #16]
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d028      	beq.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007b66:	4b2a      	ldr	r3, [pc, #168]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b6e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007b70:	4b29      	ldr	r3, [pc, #164]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b72:	2201      	movs	r2, #1
 8007b74:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007b76:	4b28      	ldr	r3, [pc, #160]	@ (8007c18 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007b78:	2200      	movs	r2, #0
 8007b7a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007b7c:	4a24      	ldr	r2, [pc, #144]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b7e:	693b      	ldr	r3, [r7, #16]
 8007b80:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b82:	4b23      	ldr	r3, [pc, #140]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d114      	bne.n	8007bb8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007b8e:	f7fc f8bb 	bl	8003d08 <HAL_GetTick>
 8007b92:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b94:	e00a      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b96:	f7fc f8b7 	bl	8003d08 <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d901      	bls.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007ba8:	2303      	movs	r3, #3
 8007baa:	e02a      	b.n	8007c02 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bac:	4b18      	ldr	r3, [pc, #96]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007bb0:	f003 0302 	and.w	r3, r3, #2
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0ee      	beq.n	8007b96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68db      	ldr	r3, [r3, #12]
 8007bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007bc0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007bc4:	d10d      	bne.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007bc6:	4b12      	ldr	r3, [pc, #72]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bc8:	689b      	ldr	r3, [r3, #8]
 8007bca:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68db      	ldr	r3, [r3, #12]
 8007bd2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007bda:	490d      	ldr	r1, [pc, #52]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	608b      	str	r3, [r1, #8]
 8007be0:	e005      	b.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007be2:	4b0b      	ldr	r3, [pc, #44]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	4a0a      	ldr	r2, [pc, #40]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007be8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8007bec:	6093      	str	r3, [r2, #8]
 8007bee:	4b08      	ldr	r3, [pc, #32]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bf0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	68db      	ldr	r3, [r3, #12]
 8007bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007bfa:	4905      	ldr	r1, [pc, #20]	@ (8007c10 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007c00:	2300      	movs	r3, #0
}
 8007c02:	4618      	mov	r0, r3
 8007c04:	3718      	adds	r7, #24
 8007c06:	46bd      	mov	sp, r7
 8007c08:	bd80      	pop	{r7, pc}
 8007c0a:	bf00      	nop
 8007c0c:	42470068 	.word	0x42470068
 8007c10:	40023800 	.word	0x40023800
 8007c14:	40007000 	.word	0x40007000
 8007c18:	42470e40 	.word	0x42470e40

08007c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b087      	sub	sp, #28
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007c24:	2300      	movs	r3, #0
 8007c26:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007c30:	2300      	movs	r3, #0
 8007c32:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	2b01      	cmp	r3, #1
 8007c38:	d13f      	bne.n	8007cba <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8007c3a:	4b24      	ldr	r3, [pc, #144]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c3c:	689b      	ldr	r3, [r3, #8]
 8007c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c42:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d006      	beq.n	8007c58 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007c50:	d12f      	bne.n	8007cb2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007c52:	4b1f      	ldr	r3, [pc, #124]	@ (8007cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007c54:	617b      	str	r3, [r7, #20]
          break;
 8007c56:	e02f      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8007c58:	4b1c      	ldr	r3, [pc, #112]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c60:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007c64:	d108      	bne.n	8007c78 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c66:	4b19      	ldr	r3, [pc, #100]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c6e:	4a19      	ldr	r2, [pc, #100]	@ (8007cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c74:	613b      	str	r3, [r7, #16]
 8007c76:	e007      	b.n	8007c88 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8007c78:	4b14      	ldr	r3, [pc, #80]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c7a:	685b      	ldr	r3, [r3, #4]
 8007c7c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007c80:	4a15      	ldr	r2, [pc, #84]	@ (8007cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c86:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8007c88:	4b10      	ldr	r3, [pc, #64]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007c8e:	099b      	lsrs	r3, r3, #6
 8007c90:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	fb02 f303 	mul.w	r3, r2, r3
 8007c9a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007ccc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007c9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007ca2:	0f1b      	lsrs	r3, r3, #28
 8007ca4:	f003 0307 	and.w	r3, r3, #7
 8007ca8:	68ba      	ldr	r2, [r7, #8]
 8007caa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cae:	617b      	str	r3, [r7, #20]
          break;
 8007cb0:	e002      	b.n	8007cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	617b      	str	r3, [r7, #20]
          break;
 8007cb6:	bf00      	nop
        }
      }
      break;
 8007cb8:	e000      	b.n	8007cbc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 8007cba:	bf00      	nop
    }
  }
  return frequency;
 8007cbc:	697b      	ldr	r3, [r7, #20]
}
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	371c      	adds	r7, #28
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40023800 	.word	0x40023800
 8007cd0:	00bb8000 	.word	0x00bb8000
 8007cd4:	007a1200 	.word	0x007a1200
 8007cd8:	00f42400 	.word	0x00f42400

08007cdc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d101      	bne.n	8007cee <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8007cea:	2301      	movs	r3, #1
 8007cec:	e01c      	b.n	8007d28 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	795b      	ldrb	r3, [r3, #5]
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d105      	bne.n	8007d04 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7fb fd3c 	bl	800377c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2202      	movs	r2, #2
 8007d08:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f042 0204 	orr.w	r2, r2, #4
 8007d18:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2200      	movs	r2, #0
 8007d24:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8007d26:	2300      	movs	r3, #0
}
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3708      	adds	r7, #8
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	791b      	ldrb	r3, [r3, #4]
 8007d42:	2b01      	cmp	r3, #1
 8007d44:	d101      	bne.n	8007d4a <HAL_RNG_GenerateRandomNumber+0x1a>
 8007d46:	2302      	movs	r3, #2
 8007d48:	e044      	b.n	8007dd4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	795b      	ldrb	r3, [r3, #5]
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	2b01      	cmp	r3, #1
 8007d58:	d133      	bne.n	8007dc2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2202      	movs	r2, #2
 8007d5e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007d60:	f7fb ffd2 	bl	8003d08 <HAL_GetTick>
 8007d64:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007d66:	e018      	b.n	8007d9a <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8007d68:	f7fb ffce 	bl	8003d08 <HAL_GetTick>
 8007d6c:	4602      	mov	r2, r0
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	1ad3      	subs	r3, r2, r3
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d911      	bls.n	8007d9a <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	f003 0301 	and.w	r3, r3, #1
 8007d80:	2b01      	cmp	r3, #1
 8007d82:	d00a      	beq.n	8007d9a <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8007d96:	2301      	movs	r3, #1
 8007d98:	e01c      	b.n	8007dd4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d1df      	bne.n	8007d68 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	68da      	ldr	r2, [r3, #12]
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	715a      	strb	r2, [r3, #5]
 8007dc0:	e004      	b.n	8007dcc <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2204      	movs	r2, #4
 8007dc6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	711a      	strb	r2, [r3, #4]

  return status;
 8007dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b082      	sub	sp, #8
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d101      	bne.n	8007dee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dea:	2301      	movs	r3, #1
 8007dec:	e07b      	b.n	8007ee6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d108      	bne.n	8007e08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	685b      	ldr	r3, [r3, #4]
 8007dfa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007dfe:	d009      	beq.n	8007e14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	61da      	str	r2, [r3, #28]
 8007e06:	e005      	b.n	8007e14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2200      	movs	r2, #0
 8007e18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d106      	bne.n	8007e34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f7fb fcc6 	bl	80037c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2202      	movs	r2, #2
 8007e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e4a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	689b      	ldr	r3, [r3, #8]
 8007e58:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007e66:	431a      	orrs	r2, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f003 0302 	and.w	r3, r3, #2
 8007e70:	431a      	orrs	r2, r3
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	695b      	ldr	r3, [r3, #20]
 8007e76:	f003 0301 	and.w	r3, r3, #1
 8007e7a:	431a      	orrs	r2, r3
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007e84:	431a      	orrs	r2, r3
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e8e:	431a      	orrs	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a1b      	ldr	r3, [r3, #32]
 8007e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e98:	ea42 0103 	orr.w	r1, r2, r3
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	430a      	orrs	r2, r1
 8007eaa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	0c1b      	lsrs	r3, r3, #16
 8007eb2:	f003 0104 	and.w	r1, r3, #4
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eba:	f003 0210 	and.w	r2, r3, #16
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	430a      	orrs	r2, r1
 8007ec4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69da      	ldr	r2, [r3, #28]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007ed4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2200      	movs	r2, #0
 8007eda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2201      	movs	r2, #1
 8007ee0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007ee4:	2300      	movs	r3, #0
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3708      	adds	r7, #8
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b082      	sub	sp, #8
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007efc:	2301      	movs	r3, #1
 8007efe:	e042      	b.n	8007f86 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d106      	bne.n	8007f1a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f7fb fc9b 	bl	8003850 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2224      	movs	r2, #36	@ 0x24
 8007f1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	68da      	ldr	r2, [r3, #12]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f30:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 f972 	bl	800821c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	691a      	ldr	r2, [r3, #16]
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007f46:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	695a      	ldr	r2, [r3, #20]
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007f56:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f66:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2220      	movs	r2, #32
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007f84:	2300      	movs	r3, #0
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3708      	adds	r7, #8
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}

08007f8e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f8e:	b580      	push	{r7, lr}
 8007f90:	b08a      	sub	sp, #40	@ 0x28
 8007f92:	af02      	add	r7, sp, #8
 8007f94:	60f8      	str	r0, [r7, #12]
 8007f96:	60b9      	str	r1, [r7, #8]
 8007f98:	603b      	str	r3, [r7, #0]
 8007f9a:	4613      	mov	r3, r2
 8007f9c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fa8:	b2db      	uxtb	r3, r3
 8007faa:	2b20      	cmp	r3, #32
 8007fac:	d175      	bne.n	800809a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007fae:	68bb      	ldr	r3, [r7, #8]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_Transmit+0x2c>
 8007fb4:	88fb      	ldrh	r3, [r7, #6]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fba:	2301      	movs	r3, #1
 8007fbc:	e06e      	b.n	800809c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2221      	movs	r2, #33	@ 0x21
 8007fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fcc:	f7fb fe9c 	bl	8003d08 <HAL_GetTick>
 8007fd0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	88fa      	ldrh	r2, [r7, #6]
 8007fd6:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	88fa      	ldrh	r2, [r7, #6]
 8007fdc:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fe6:	d108      	bne.n	8007ffa <HAL_UART_Transmit+0x6c>
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d104      	bne.n	8007ffa <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	e003      	b.n	8008002 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ffe:	2300      	movs	r3, #0
 8008000:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8008002:	e02e      	b.n	8008062 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2200      	movs	r2, #0
 800800c:	2180      	movs	r1, #128	@ 0x80
 800800e:	68f8      	ldr	r0, [r7, #12]
 8008010:	f000 f848 	bl	80080a4 <UART_WaitOnFlagUntilTimeout>
 8008014:	4603      	mov	r3, r0
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	2220      	movs	r2, #32
 800801e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8008022:	2303      	movs	r3, #3
 8008024:	e03a      	b.n	800809c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d10b      	bne.n	8008044 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	881b      	ldrh	r3, [r3, #0]
 8008030:	461a      	mov	r2, r3
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800803a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	3302      	adds	r3, #2
 8008040:	61bb      	str	r3, [r7, #24]
 8008042:	e007      	b.n	8008054 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008044:	69fb      	ldr	r3, [r7, #28]
 8008046:	781a      	ldrb	r2, [r3, #0]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	3301      	adds	r3, #1
 8008052:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008058:	b29b      	uxth	r3, r3
 800805a:	3b01      	subs	r3, #1
 800805c:	b29a      	uxth	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008066:	b29b      	uxth	r3, r3
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1cb      	bne.n	8008004 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	9300      	str	r3, [sp, #0]
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2200      	movs	r2, #0
 8008074:	2140      	movs	r1, #64	@ 0x40
 8008076:	68f8      	ldr	r0, [r7, #12]
 8008078:	f000 f814 	bl	80080a4 <UART_WaitOnFlagUntilTimeout>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d005      	beq.n	800808e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	2220      	movs	r2, #32
 8008086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e006      	b.n	800809c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	e000      	b.n	800809c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800809a:	2302      	movs	r3, #2
  }
}
 800809c:	4618      	mov	r0, r3
 800809e:	3720      	adds	r7, #32
 80080a0:	46bd      	mov	sp, r7
 80080a2:	bd80      	pop	{r7, pc}

080080a4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	603b      	str	r3, [r7, #0]
 80080b0:	4613      	mov	r3, r2
 80080b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080b4:	e03b      	b.n	800812e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080bc:	d037      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080be:	f7fb fe23 	bl	8003d08 <HAL_GetTick>
 80080c2:	4602      	mov	r2, r0
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	1ad3      	subs	r3, r2, r3
 80080c8:	6a3a      	ldr	r2, [r7, #32]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d302      	bcc.n	80080d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80080ce:	6a3b      	ldr	r3, [r7, #32]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d101      	bne.n	80080d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80080d4:	2303      	movs	r3, #3
 80080d6:	e03a      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	f003 0304 	and.w	r3, r3, #4
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d023      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0x8a>
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	2b80      	cmp	r3, #128	@ 0x80
 80080ea:	d020      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0x8a>
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	2b40      	cmp	r3, #64	@ 0x40
 80080f0:	d01d      	beq.n	800812e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0308 	and.w	r3, r3, #8
 80080fc:	2b08      	cmp	r3, #8
 80080fe:	d116      	bne.n	800812e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8008100:	2300      	movs	r3, #0
 8008102:	617b      	str	r3, [r7, #20]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	617b      	str	r3, [r7, #20]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	617b      	str	r3, [r7, #20]
 8008114:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f81d 	bl	8008156 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2208      	movs	r2, #8
 8008120:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e00f      	b.n	800814e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	4013      	ands	r3, r2
 8008138:	68ba      	ldr	r2, [r7, #8]
 800813a:	429a      	cmp	r2, r3
 800813c:	bf0c      	ite	eq
 800813e:	2301      	moveq	r3, #1
 8008140:	2300      	movne	r3, #0
 8008142:	b2db      	uxtb	r3, r3
 8008144:	461a      	mov	r2, r3
 8008146:	79fb      	ldrb	r3, [r7, #7]
 8008148:	429a      	cmp	r2, r3
 800814a:	d0b4      	beq.n	80080b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3718      	adds	r7, #24
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}

08008156 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008156:	b480      	push	{r7}
 8008158:	b095      	sub	sp, #84	@ 0x54
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	330c      	adds	r3, #12
 8008164:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008166:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008168:	e853 3f00 	ldrex	r3, [r3]
 800816c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008174:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	330c      	adds	r3, #12
 800817c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800817e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008180:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008182:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008184:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008186:	e841 2300 	strex	r3, r2, [r1]
 800818a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800818c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1e5      	bne.n	800815e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	3314      	adds	r3, #20
 8008198:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819a:	6a3b      	ldr	r3, [r7, #32]
 800819c:	e853 3f00 	ldrex	r3, [r3]
 80081a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80081a2:	69fb      	ldr	r3, [r7, #28]
 80081a4:	f023 0301 	bic.w	r3, r3, #1
 80081a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	3314      	adds	r3, #20
 80081b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80081b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80081b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80081ba:	e841 2300 	strex	r3, r2, [r1]
 80081be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d1e5      	bne.n	8008192 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d119      	bne.n	8008202 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	330c      	adds	r3, #12
 80081d4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	e853 3f00 	ldrex	r3, [r3]
 80081dc:	60bb      	str	r3, [r7, #8]
   return(result);
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f023 0310 	bic.w	r3, r3, #16
 80081e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	330c      	adds	r3, #12
 80081ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80081ee:	61ba      	str	r2, [r7, #24]
 80081f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f2:	6979      	ldr	r1, [r7, #20]
 80081f4:	69ba      	ldr	r2, [r7, #24]
 80081f6:	e841 2300 	strex	r3, r2, [r1]
 80081fa:	613b      	str	r3, [r7, #16]
   return(result);
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d1e5      	bne.n	80081ce <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8008210:	bf00      	nop
 8008212:	3754      	adds	r7, #84	@ 0x54
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800821c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008220:	b0c0      	sub	sp, #256	@ 0x100
 8008222:	af00      	add	r7, sp, #0
 8008224:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008238:	68d9      	ldr	r1, [r3, #12]
 800823a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800823e:	681a      	ldr	r2, [r3, #0]
 8008240:	ea40 0301 	orr.w	r3, r0, r1
 8008244:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008250:	691b      	ldr	r3, [r3, #16]
 8008252:	431a      	orrs	r2, r3
 8008254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008258:	695b      	ldr	r3, [r3, #20]
 800825a:	431a      	orrs	r2, r3
 800825c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008260:	69db      	ldr	r3, [r3, #28]
 8008262:	4313      	orrs	r3, r2
 8008264:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	68db      	ldr	r3, [r3, #12]
 8008270:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008274:	f021 010c 	bic.w	r1, r1, #12
 8008278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800827c:	681a      	ldr	r2, [r3, #0]
 800827e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008282:	430b      	orrs	r3, r1
 8008284:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008296:	6999      	ldr	r1, [r3, #24]
 8008298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	ea40 0301 	orr.w	r3, r0, r1
 80082a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80082a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	4b8f      	ldr	r3, [pc, #572]	@ (80084e8 <UART_SetConfig+0x2cc>)
 80082ac:	429a      	cmp	r2, r3
 80082ae:	d005      	beq.n	80082bc <UART_SetConfig+0xa0>
 80082b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082b4:	681a      	ldr	r2, [r3, #0]
 80082b6:	4b8d      	ldr	r3, [pc, #564]	@ (80084ec <UART_SetConfig+0x2d0>)
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d104      	bne.n	80082c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80082bc:	f7ff fbb8 	bl	8007a30 <HAL_RCC_GetPCLK2Freq>
 80082c0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80082c4:	e003      	b.n	80082ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80082c6:	f7ff fb9f 	bl	8007a08 <HAL_RCC_GetPCLK1Freq>
 80082ca:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80082d2:	69db      	ldr	r3, [r3, #28]
 80082d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082d8:	f040 810c 	bne.w	80084f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80082dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80082e0:	2200      	movs	r2, #0
 80082e2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80082e6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80082ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80082ee:	4622      	mov	r2, r4
 80082f0:	462b      	mov	r3, r5
 80082f2:	1891      	adds	r1, r2, r2
 80082f4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80082f6:	415b      	adcs	r3, r3
 80082f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80082fe:	4621      	mov	r1, r4
 8008300:	eb12 0801 	adds.w	r8, r2, r1
 8008304:	4629      	mov	r1, r5
 8008306:	eb43 0901 	adc.w	r9, r3, r1
 800830a:	f04f 0200 	mov.w	r2, #0
 800830e:	f04f 0300 	mov.w	r3, #0
 8008312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800831a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800831e:	4690      	mov	r8, r2
 8008320:	4699      	mov	r9, r3
 8008322:	4623      	mov	r3, r4
 8008324:	eb18 0303 	adds.w	r3, r8, r3
 8008328:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800832c:	462b      	mov	r3, r5
 800832e:	eb49 0303 	adc.w	r3, r9, r3
 8008332:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	2200      	movs	r2, #0
 800833e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008342:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008346:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800834a:	460b      	mov	r3, r1
 800834c:	18db      	adds	r3, r3, r3
 800834e:	653b      	str	r3, [r7, #80]	@ 0x50
 8008350:	4613      	mov	r3, r2
 8008352:	eb42 0303 	adc.w	r3, r2, r3
 8008356:	657b      	str	r3, [r7, #84]	@ 0x54
 8008358:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800835c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008360:	f7f7 ff8e 	bl	8000280 <__aeabi_uldivmod>
 8008364:	4602      	mov	r2, r0
 8008366:	460b      	mov	r3, r1
 8008368:	4b61      	ldr	r3, [pc, #388]	@ (80084f0 <UART_SetConfig+0x2d4>)
 800836a:	fba3 2302 	umull	r2, r3, r3, r2
 800836e:	095b      	lsrs	r3, r3, #5
 8008370:	011c      	lsls	r4, r3, #4
 8008372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008376:	2200      	movs	r2, #0
 8008378:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800837c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008380:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008384:	4642      	mov	r2, r8
 8008386:	464b      	mov	r3, r9
 8008388:	1891      	adds	r1, r2, r2
 800838a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800838c:	415b      	adcs	r3, r3
 800838e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008390:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008394:	4641      	mov	r1, r8
 8008396:	eb12 0a01 	adds.w	sl, r2, r1
 800839a:	4649      	mov	r1, r9
 800839c:	eb43 0b01 	adc.w	fp, r3, r1
 80083a0:	f04f 0200 	mov.w	r2, #0
 80083a4:	f04f 0300 	mov.w	r3, #0
 80083a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80083ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80083b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80083b4:	4692      	mov	sl, r2
 80083b6:	469b      	mov	fp, r3
 80083b8:	4643      	mov	r3, r8
 80083ba:	eb1a 0303 	adds.w	r3, sl, r3
 80083be:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80083c2:	464b      	mov	r3, r9
 80083c4:	eb4b 0303 	adc.w	r3, fp, r3
 80083c8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80083d8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80083dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80083e0:	460b      	mov	r3, r1
 80083e2:	18db      	adds	r3, r3, r3
 80083e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80083e6:	4613      	mov	r3, r2
 80083e8:	eb42 0303 	adc.w	r3, r2, r3
 80083ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80083f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80083f6:	f7f7 ff43 	bl	8000280 <__aeabi_uldivmod>
 80083fa:	4602      	mov	r2, r0
 80083fc:	460b      	mov	r3, r1
 80083fe:	4611      	mov	r1, r2
 8008400:	4b3b      	ldr	r3, [pc, #236]	@ (80084f0 <UART_SetConfig+0x2d4>)
 8008402:	fba3 2301 	umull	r2, r3, r3, r1
 8008406:	095b      	lsrs	r3, r3, #5
 8008408:	2264      	movs	r2, #100	@ 0x64
 800840a:	fb02 f303 	mul.w	r3, r2, r3
 800840e:	1acb      	subs	r3, r1, r3
 8008410:	00db      	lsls	r3, r3, #3
 8008412:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008416:	4b36      	ldr	r3, [pc, #216]	@ (80084f0 <UART_SetConfig+0x2d4>)
 8008418:	fba3 2302 	umull	r2, r3, r3, r2
 800841c:	095b      	lsrs	r3, r3, #5
 800841e:	005b      	lsls	r3, r3, #1
 8008420:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008424:	441c      	add	r4, r3
 8008426:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800842a:	2200      	movs	r2, #0
 800842c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008430:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008434:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008438:	4642      	mov	r2, r8
 800843a:	464b      	mov	r3, r9
 800843c:	1891      	adds	r1, r2, r2
 800843e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008440:	415b      	adcs	r3, r3
 8008442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008448:	4641      	mov	r1, r8
 800844a:	1851      	adds	r1, r2, r1
 800844c:	6339      	str	r1, [r7, #48]	@ 0x30
 800844e:	4649      	mov	r1, r9
 8008450:	414b      	adcs	r3, r1
 8008452:	637b      	str	r3, [r7, #52]	@ 0x34
 8008454:	f04f 0200 	mov.w	r2, #0
 8008458:	f04f 0300 	mov.w	r3, #0
 800845c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008460:	4659      	mov	r1, fp
 8008462:	00cb      	lsls	r3, r1, #3
 8008464:	4651      	mov	r1, sl
 8008466:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800846a:	4651      	mov	r1, sl
 800846c:	00ca      	lsls	r2, r1, #3
 800846e:	4610      	mov	r0, r2
 8008470:	4619      	mov	r1, r3
 8008472:	4603      	mov	r3, r0
 8008474:	4642      	mov	r2, r8
 8008476:	189b      	adds	r3, r3, r2
 8008478:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800847c:	464b      	mov	r3, r9
 800847e:	460a      	mov	r2, r1
 8008480:	eb42 0303 	adc.w	r3, r2, r3
 8008484:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2200      	movs	r2, #0
 8008490:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008494:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008498:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800849c:	460b      	mov	r3, r1
 800849e:	18db      	adds	r3, r3, r3
 80084a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80084a2:	4613      	mov	r3, r2
 80084a4:	eb42 0303 	adc.w	r3, r2, r3
 80084a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80084ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80084b2:	f7f7 fee5 	bl	8000280 <__aeabi_uldivmod>
 80084b6:	4602      	mov	r2, r0
 80084b8:	460b      	mov	r3, r1
 80084ba:	4b0d      	ldr	r3, [pc, #52]	@ (80084f0 <UART_SetConfig+0x2d4>)
 80084bc:	fba3 1302 	umull	r1, r3, r3, r2
 80084c0:	095b      	lsrs	r3, r3, #5
 80084c2:	2164      	movs	r1, #100	@ 0x64
 80084c4:	fb01 f303 	mul.w	r3, r1, r3
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	00db      	lsls	r3, r3, #3
 80084cc:	3332      	adds	r3, #50	@ 0x32
 80084ce:	4a08      	ldr	r2, [pc, #32]	@ (80084f0 <UART_SetConfig+0x2d4>)
 80084d0:	fba2 2303 	umull	r2, r3, r2, r3
 80084d4:	095b      	lsrs	r3, r3, #5
 80084d6:	f003 0207 	and.w	r2, r3, #7
 80084da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4422      	add	r2, r4
 80084e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084e4:	e106      	b.n	80086f4 <UART_SetConfig+0x4d8>
 80084e6:	bf00      	nop
 80084e8:	40011000 	.word	0x40011000
 80084ec:	40011400 	.word	0x40011400
 80084f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80084f8:	2200      	movs	r2, #0
 80084fa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80084fe:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008502:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008506:	4642      	mov	r2, r8
 8008508:	464b      	mov	r3, r9
 800850a:	1891      	adds	r1, r2, r2
 800850c:	6239      	str	r1, [r7, #32]
 800850e:	415b      	adcs	r3, r3
 8008510:	627b      	str	r3, [r7, #36]	@ 0x24
 8008512:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008516:	4641      	mov	r1, r8
 8008518:	1854      	adds	r4, r2, r1
 800851a:	4649      	mov	r1, r9
 800851c:	eb43 0501 	adc.w	r5, r3, r1
 8008520:	f04f 0200 	mov.w	r2, #0
 8008524:	f04f 0300 	mov.w	r3, #0
 8008528:	00eb      	lsls	r3, r5, #3
 800852a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800852e:	00e2      	lsls	r2, r4, #3
 8008530:	4614      	mov	r4, r2
 8008532:	461d      	mov	r5, r3
 8008534:	4643      	mov	r3, r8
 8008536:	18e3      	adds	r3, r4, r3
 8008538:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800853c:	464b      	mov	r3, r9
 800853e:	eb45 0303 	adc.w	r3, r5, r3
 8008542:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008552:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008556:	f04f 0200 	mov.w	r2, #0
 800855a:	f04f 0300 	mov.w	r3, #0
 800855e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008562:	4629      	mov	r1, r5
 8008564:	008b      	lsls	r3, r1, #2
 8008566:	4621      	mov	r1, r4
 8008568:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800856c:	4621      	mov	r1, r4
 800856e:	008a      	lsls	r2, r1, #2
 8008570:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008574:	f7f7 fe84 	bl	8000280 <__aeabi_uldivmod>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4b60      	ldr	r3, [pc, #384]	@ (8008700 <UART_SetConfig+0x4e4>)
 800857e:	fba3 2302 	umull	r2, r3, r3, r2
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	011c      	lsls	r4, r3, #4
 8008586:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800858a:	2200      	movs	r2, #0
 800858c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008590:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008594:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008598:	4642      	mov	r2, r8
 800859a:	464b      	mov	r3, r9
 800859c:	1891      	adds	r1, r2, r2
 800859e:	61b9      	str	r1, [r7, #24]
 80085a0:	415b      	adcs	r3, r3
 80085a2:	61fb      	str	r3, [r7, #28]
 80085a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80085a8:	4641      	mov	r1, r8
 80085aa:	1851      	adds	r1, r2, r1
 80085ac:	6139      	str	r1, [r7, #16]
 80085ae:	4649      	mov	r1, r9
 80085b0:	414b      	adcs	r3, r1
 80085b2:	617b      	str	r3, [r7, #20]
 80085b4:	f04f 0200 	mov.w	r2, #0
 80085b8:	f04f 0300 	mov.w	r3, #0
 80085bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80085c0:	4659      	mov	r1, fp
 80085c2:	00cb      	lsls	r3, r1, #3
 80085c4:	4651      	mov	r1, sl
 80085c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80085ca:	4651      	mov	r1, sl
 80085cc:	00ca      	lsls	r2, r1, #3
 80085ce:	4610      	mov	r0, r2
 80085d0:	4619      	mov	r1, r3
 80085d2:	4603      	mov	r3, r0
 80085d4:	4642      	mov	r2, r8
 80085d6:	189b      	adds	r3, r3, r2
 80085d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80085dc:	464b      	mov	r3, r9
 80085de:	460a      	mov	r2, r1
 80085e0:	eb42 0303 	adc.w	r3, r2, r3
 80085e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80085e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085ec:	685b      	ldr	r3, [r3, #4]
 80085ee:	2200      	movs	r2, #0
 80085f0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80085f2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80085f4:	f04f 0200 	mov.w	r2, #0
 80085f8:	f04f 0300 	mov.w	r3, #0
 80085fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008600:	4649      	mov	r1, r9
 8008602:	008b      	lsls	r3, r1, #2
 8008604:	4641      	mov	r1, r8
 8008606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800860a:	4641      	mov	r1, r8
 800860c:	008a      	lsls	r2, r1, #2
 800860e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008612:	f7f7 fe35 	bl	8000280 <__aeabi_uldivmod>
 8008616:	4602      	mov	r2, r0
 8008618:	460b      	mov	r3, r1
 800861a:	4611      	mov	r1, r2
 800861c:	4b38      	ldr	r3, [pc, #224]	@ (8008700 <UART_SetConfig+0x4e4>)
 800861e:	fba3 2301 	umull	r2, r3, r3, r1
 8008622:	095b      	lsrs	r3, r3, #5
 8008624:	2264      	movs	r2, #100	@ 0x64
 8008626:	fb02 f303 	mul.w	r3, r2, r3
 800862a:	1acb      	subs	r3, r1, r3
 800862c:	011b      	lsls	r3, r3, #4
 800862e:	3332      	adds	r3, #50	@ 0x32
 8008630:	4a33      	ldr	r2, [pc, #204]	@ (8008700 <UART_SetConfig+0x4e4>)
 8008632:	fba2 2303 	umull	r2, r3, r2, r3
 8008636:	095b      	lsrs	r3, r3, #5
 8008638:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800863c:	441c      	add	r4, r3
 800863e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008642:	2200      	movs	r2, #0
 8008644:	673b      	str	r3, [r7, #112]	@ 0x70
 8008646:	677a      	str	r2, [r7, #116]	@ 0x74
 8008648:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800864c:	4642      	mov	r2, r8
 800864e:	464b      	mov	r3, r9
 8008650:	1891      	adds	r1, r2, r2
 8008652:	60b9      	str	r1, [r7, #8]
 8008654:	415b      	adcs	r3, r3
 8008656:	60fb      	str	r3, [r7, #12]
 8008658:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800865c:	4641      	mov	r1, r8
 800865e:	1851      	adds	r1, r2, r1
 8008660:	6039      	str	r1, [r7, #0]
 8008662:	4649      	mov	r1, r9
 8008664:	414b      	adcs	r3, r1
 8008666:	607b      	str	r3, [r7, #4]
 8008668:	f04f 0200 	mov.w	r2, #0
 800866c:	f04f 0300 	mov.w	r3, #0
 8008670:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008674:	4659      	mov	r1, fp
 8008676:	00cb      	lsls	r3, r1, #3
 8008678:	4651      	mov	r1, sl
 800867a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800867e:	4651      	mov	r1, sl
 8008680:	00ca      	lsls	r2, r1, #3
 8008682:	4610      	mov	r0, r2
 8008684:	4619      	mov	r1, r3
 8008686:	4603      	mov	r3, r0
 8008688:	4642      	mov	r2, r8
 800868a:	189b      	adds	r3, r3, r2
 800868c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800868e:	464b      	mov	r3, r9
 8008690:	460a      	mov	r2, r1
 8008692:	eb42 0303 	adc.w	r3, r2, r3
 8008696:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	663b      	str	r3, [r7, #96]	@ 0x60
 80086a2:	667a      	str	r2, [r7, #100]	@ 0x64
 80086a4:	f04f 0200 	mov.w	r2, #0
 80086a8:	f04f 0300 	mov.w	r3, #0
 80086ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80086b0:	4649      	mov	r1, r9
 80086b2:	008b      	lsls	r3, r1, #2
 80086b4:	4641      	mov	r1, r8
 80086b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80086ba:	4641      	mov	r1, r8
 80086bc:	008a      	lsls	r2, r1, #2
 80086be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80086c2:	f7f7 fddd 	bl	8000280 <__aeabi_uldivmod>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4b0d      	ldr	r3, [pc, #52]	@ (8008700 <UART_SetConfig+0x4e4>)
 80086cc:	fba3 1302 	umull	r1, r3, r3, r2
 80086d0:	095b      	lsrs	r3, r3, #5
 80086d2:	2164      	movs	r1, #100	@ 0x64
 80086d4:	fb01 f303 	mul.w	r3, r1, r3
 80086d8:	1ad3      	subs	r3, r2, r3
 80086da:	011b      	lsls	r3, r3, #4
 80086dc:	3332      	adds	r3, #50	@ 0x32
 80086de:	4a08      	ldr	r2, [pc, #32]	@ (8008700 <UART_SetConfig+0x4e4>)
 80086e0:	fba2 2303 	umull	r2, r3, r2, r3
 80086e4:	095b      	lsrs	r3, r3, #5
 80086e6:	f003 020f 	and.w	r2, r3, #15
 80086ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4422      	add	r2, r4
 80086f2:	609a      	str	r2, [r3, #8]
}
 80086f4:	bf00      	nop
 80086f6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80086fa:	46bd      	mov	sp, r7
 80086fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008700:	51eb851f 	.word	0x51eb851f

08008704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008704:	b084      	sub	sp, #16
 8008706:	b580      	push	{r7, lr}
 8008708:	b084      	sub	sp, #16
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	f107 001c 	add.w	r0, r7, #28
 8008712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008716:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800871a:	2b01      	cmp	r3, #1
 800871c:	d123      	bne.n	8008766 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008722:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800874a:	2b01      	cmp	r3, #1
 800874c:	d105      	bne.n	800875a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	68db      	ldr	r3, [r3, #12]
 8008752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f9dc 	bl	8008b18 <USB_CoreReset>
 8008760:	4603      	mov	r3, r0
 8008762:	73fb      	strb	r3, [r7, #15]
 8008764:	e01b      	b.n	800879e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 f9d0 	bl	8008b18 <USB_CoreReset>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800877c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008780:	2b00      	cmp	r3, #0
 8008782:	d106      	bne.n	8008792 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008790:	e005      	b.n	800879e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800879e:	7fbb      	ldrb	r3, [r7, #30]
 80087a0:	2b01      	cmp	r3, #1
 80087a2:	d10b      	bne.n	80087bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	689b      	ldr	r3, [r3, #8]
 80087a8:	f043 0206 	orr.w	r2, r3, #6
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	f043 0220 	orr.w	r2, r3, #32
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087c8:	b004      	add	sp, #16
 80087ca:	4770      	bx	lr

080087cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b083      	sub	sp, #12
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f043 0201 	orr.w	r2, r3, #1
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	370c      	adds	r7, #12
 80087e6:	46bd      	mov	sp, r7
 80087e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ec:	4770      	bx	lr

080087ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087ee:	b480      	push	{r7}
 80087f0:	b083      	sub	sp, #12
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	689b      	ldr	r3, [r3, #8]
 80087fa:	f023 0201 	bic.w	r2, r3, #1
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008802:	2300      	movs	r3, #0
}
 8008804:	4618      	mov	r0, r3
 8008806:	370c      	adds	r7, #12
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr

08008810 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b084      	sub	sp, #16
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
 8008818:	460b      	mov	r3, r1
 800881a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800882c:	78fb      	ldrb	r3, [r7, #3]
 800882e:	2b01      	cmp	r3, #1
 8008830:	d115      	bne.n	800885e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	68db      	ldr	r3, [r3, #12]
 8008836:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800883e:	200a      	movs	r0, #10
 8008840:	f7fb fa6e 	bl	8003d20 <HAL_Delay>
      ms += 10U;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	330a      	adds	r3, #10
 8008848:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800884a:	6878      	ldr	r0, [r7, #4]
 800884c:	f000 f956 	bl	8008afc <USB_GetMode>
 8008850:	4603      	mov	r3, r0
 8008852:	2b01      	cmp	r3, #1
 8008854:	d01e      	beq.n	8008894 <USB_SetCurrentMode+0x84>
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2bc7      	cmp	r3, #199	@ 0xc7
 800885a:	d9f0      	bls.n	800883e <USB_SetCurrentMode+0x2e>
 800885c:	e01a      	b.n	8008894 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800885e:	78fb      	ldrb	r3, [r7, #3]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d115      	bne.n	8008890 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008870:	200a      	movs	r0, #10
 8008872:	f7fb fa55 	bl	8003d20 <HAL_Delay>
      ms += 10U;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	330a      	adds	r3, #10
 800887a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f000 f93d 	bl	8008afc <USB_GetMode>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d005      	beq.n	8008894 <USB_SetCurrentMode+0x84>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2bc7      	cmp	r3, #199	@ 0xc7
 800888c:	d9f0      	bls.n	8008870 <USB_SetCurrentMode+0x60>
 800888e:	e001      	b.n	8008894 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008890:	2301      	movs	r3, #1
 8008892:	e005      	b.n	80088a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2bc8      	cmp	r3, #200	@ 0xc8
 8008898:	d101      	bne.n	800889e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800889a:	2301      	movs	r3, #1
 800889c:	e000      	b.n	80088a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	3710      	adds	r7, #16
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80088a8:	b480      	push	{r7}
 80088aa:	b085      	sub	sp, #20
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088c2:	d901      	bls.n	80088c8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e01b      	b.n	8008900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	daf2      	bge.n	80088b6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	019b      	lsls	r3, r3, #6
 80088d8:	f043 0220 	orr.w	r2, r3, #32
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	3301      	adds	r3, #1
 80088e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088ec:	d901      	bls.n	80088f2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80088ee:	2303      	movs	r3, #3
 80088f0:	e006      	b.n	8008900 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	691b      	ldr	r3, [r3, #16]
 80088f6:	f003 0320 	and.w	r3, r3, #32
 80088fa:	2b20      	cmp	r3, #32
 80088fc:	d0f0      	beq.n	80088e0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800890c:	b480      	push	{r7}
 800890e:	b085      	sub	sp, #20
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008914:	2300      	movs	r3, #0
 8008916:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	3301      	adds	r3, #1
 800891c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008924:	d901      	bls.n	800892a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008926:	2303      	movs	r3, #3
 8008928:	e018      	b.n	800895c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	691b      	ldr	r3, [r3, #16]
 800892e:	2b00      	cmp	r3, #0
 8008930:	daf2      	bge.n	8008918 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008932:	2300      	movs	r3, #0
 8008934:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2210      	movs	r2, #16
 800893a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	3301      	adds	r3, #1
 8008940:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008948:	d901      	bls.n	800894e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800894a:	2303      	movs	r3, #3
 800894c:	e006      	b.n	800895c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	f003 0310 	and.w	r3, r3, #16
 8008956:	2b10      	cmp	r3, #16
 8008958:	d0f0      	beq.n	800893c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008968:	b480      	push	{r7}
 800896a:	b089      	sub	sp, #36	@ 0x24
 800896c:	af00      	add	r7, sp, #0
 800896e:	60f8      	str	r0, [r7, #12]
 8008970:	60b9      	str	r1, [r7, #8]
 8008972:	4611      	mov	r1, r2
 8008974:	461a      	mov	r2, r3
 8008976:	460b      	mov	r3, r1
 8008978:	71fb      	strb	r3, [r7, #7]
 800897a:	4613      	mov	r3, r2
 800897c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008986:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800898a:	2b00      	cmp	r3, #0
 800898c:	d123      	bne.n	80089d6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800898e:	88bb      	ldrh	r3, [r7, #4]
 8008990:	3303      	adds	r3, #3
 8008992:	089b      	lsrs	r3, r3, #2
 8008994:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008996:	2300      	movs	r3, #0
 8008998:	61bb      	str	r3, [r7, #24]
 800899a:	e018      	b.n	80089ce <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	031a      	lsls	r2, r3, #12
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	4413      	add	r3, r2
 80089a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80089a8:	461a      	mov	r2, r3
 80089aa:	69fb      	ldr	r3, [r7, #28]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6013      	str	r3, [r2, #0]
      pSrc++;
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	3301      	adds	r3, #1
 80089b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	3301      	adds	r3, #1
 80089ba:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089bc:	69fb      	ldr	r3, [r7, #28]
 80089be:	3301      	adds	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	3301      	adds	r3, #1
 80089c6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80089c8:	69bb      	ldr	r3, [r7, #24]
 80089ca:	3301      	adds	r3, #1
 80089cc:	61bb      	str	r3, [r7, #24]
 80089ce:	69ba      	ldr	r2, [r7, #24]
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	429a      	cmp	r2, r3
 80089d4:	d3e2      	bcc.n	800899c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	3724      	adds	r7, #36	@ 0x24
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b08b      	sub	sp, #44	@ 0x2c
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	60f8      	str	r0, [r7, #12]
 80089ec:	60b9      	str	r1, [r7, #8]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	089b      	lsrs	r3, r3, #2
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008a02:	88fb      	ldrh	r3, [r7, #6]
 8008a04:	f003 0303 	and.w	r3, r3, #3
 8008a08:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	623b      	str	r3, [r7, #32]
 8008a0e:	e014      	b.n	8008a3a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a16:	681a      	ldr	r2, [r3, #0]
 8008a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1a:	601a      	str	r2, [r3, #0]
    pDest++;
 8008a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a1e:	3301      	adds	r3, #1
 8008a20:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a24:	3301      	adds	r3, #1
 8008a26:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a30:	3301      	adds	r3, #1
 8008a32:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008a34:	6a3b      	ldr	r3, [r7, #32]
 8008a36:	3301      	adds	r3, #1
 8008a38:	623b      	str	r3, [r7, #32]
 8008a3a:	6a3a      	ldr	r2, [r7, #32]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d3e6      	bcc.n	8008a10 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008a42:	8bfb      	ldrh	r3, [r7, #30]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d01e      	beq.n	8008a86 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008a4c:	69bb      	ldr	r3, [r7, #24]
 8008a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008a52:	461a      	mov	r2, r3
 8008a54:	f107 0310 	add.w	r3, r7, #16
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008a5c:	693a      	ldr	r2, [r7, #16]
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	fa22 f303 	lsr.w	r3, r2, r3
 8008a68:	b2da      	uxtb	r2, r3
 8008a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6c:	701a      	strb	r2, [r3, #0]
      i++;
 8008a6e:	6a3b      	ldr	r3, [r7, #32]
 8008a70:	3301      	adds	r3, #1
 8008a72:	623b      	str	r3, [r7, #32]
      pDest++;
 8008a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a76:	3301      	adds	r3, #1
 8008a78:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008a7a:	8bfb      	ldrh	r3, [r7, #30]
 8008a7c:	3b01      	subs	r3, #1
 8008a7e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008a80:	8bfb      	ldrh	r3, [r7, #30]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1ea      	bne.n	8008a5c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	372c      	adds	r7, #44	@ 0x2c
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b085      	sub	sp, #20
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	695b      	ldr	r3, [r3, #20]
 8008aa0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	699b      	ldr	r3, [r3, #24]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008aac:	68fb      	ldr	r3, [r7, #12]
}
 8008aae:	4618      	mov	r0, r3
 8008ab0:	3714      	adds	r7, #20
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b085      	sub	sp, #20
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
 8008ac2:	460b      	mov	r3, r1
 8008ac4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8008aca:	78fb      	ldrb	r3, [r7, #3]
 8008acc:	015a      	lsls	r2, r3, #5
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	4413      	add	r3, r2
 8008ad2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8008ada:	78fb      	ldrb	r3, [r7, #3]
 8008adc:	015a      	lsls	r2, r3, #5
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	4413      	add	r3, r2
 8008ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	68ba      	ldr	r2, [r7, #8]
 8008aea:	4013      	ands	r3, r2
 8008aec:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008aee:	68bb      	ldr	r3, [r7, #8]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3714      	adds	r7, #20
 8008af4:	46bd      	mov	sp, r7
 8008af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afa:	4770      	bx	lr

08008afc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b083      	sub	sp, #12
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	695b      	ldr	r3, [r3, #20]
 8008b08:	f003 0301 	and.w	r3, r3, #1
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b085      	sub	sp, #20
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	3301      	adds	r3, #1
 8008b28:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b30:	d901      	bls.n	8008b36 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e01b      	b.n	8008b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	691b      	ldr	r3, [r3, #16]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	daf2      	bge.n	8008b24 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	691b      	ldr	r3, [r3, #16]
 8008b46:	f043 0201 	orr.w	r2, r3, #1
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	3301      	adds	r3, #1
 8008b52:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008b5a:	d901      	bls.n	8008b60 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008b5c:	2303      	movs	r3, #3
 8008b5e:	e006      	b.n	8008b6e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	f003 0301 	and.w	r3, r3, #1
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d0f0      	beq.n	8008b4e <USB_CoreReset+0x36>

  return HAL_OK;
 8008b6c:	2300      	movs	r3, #0
}
 8008b6e:	4618      	mov	r0, r3
 8008b70:	3714      	adds	r7, #20
 8008b72:	46bd      	mov	sp, r7
 8008b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b78:	4770      	bx	lr
	...

08008b7c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008b7c:	b084      	sub	sp, #16
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b086      	sub	sp, #24
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
 8008b86:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008b8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008b9c:	461a      	mov	r2, r3
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d119      	bne.n	8008c06 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8008bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bd6:	2b01      	cmp	r3, #1
 8008bd8:	d10a      	bne.n	8008bf0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008be8:	f043 0304 	orr.w	r3, r3, #4
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	e014      	b.n	8008c1a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	68fa      	ldr	r2, [r7, #12]
 8008bfa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008bfe:	f023 0304 	bic.w	r3, r3, #4
 8008c02:	6013      	str	r3, [r2, #0]
 8008c04:	e009      	b.n	8008c1a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	68fa      	ldr	r2, [r7, #12]
 8008c10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008c14:	f023 0304 	bic.w	r3, r3, #4
 8008c18:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008c1a:	2110      	movs	r1, #16
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7ff fe43 	bl	80088a8 <USB_FlushTxFifo>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d001      	beq.n	8008c2c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f7ff fe6d 	bl	800890c <USB_FlushRxFifo>
 8008c32:	4603      	mov	r3, r0
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d001      	beq.n	8008c3c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8008c38:	2301      	movs	r3, #1
 8008c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	613b      	str	r3, [r7, #16]
 8008c40:	e015      	b.n	8008c6e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	015a      	lsls	r2, r3, #5
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	4413      	add	r3, r2
 8008c4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c4e:	461a      	mov	r2, r3
 8008c50:	f04f 33ff 	mov.w	r3, #4294967295
 8008c54:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c62:	461a      	mov	r2, r3
 8008c64:	2300      	movs	r3, #0
 8008c66:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008c72:	461a      	mov	r2, r3
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d3e3      	bcc.n	8008c42 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	4a18      	ldr	r2, [pc, #96]	@ (8008cec <USB_HostInit+0x170>)
 8008c8c:	4293      	cmp	r3, r2
 8008c8e:	d10b      	bne.n	8008ca8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008c96:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4a15      	ldr	r2, [pc, #84]	@ (8008cf0 <USB_HostInit+0x174>)
 8008c9c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a14      	ldr	r2, [pc, #80]	@ (8008cf4 <USB_HostInit+0x178>)
 8008ca2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008ca6:	e009      	b.n	8008cbc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2280      	movs	r2, #128	@ 0x80
 8008cac:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a11      	ldr	r2, [pc, #68]	@ (8008cf8 <USB_HostInit+0x17c>)
 8008cb2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	4a11      	ldr	r2, [pc, #68]	@ (8008cfc <USB_HostInit+0x180>)
 8008cb8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008cbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	d105      	bne.n	8008cd0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f043 0210 	orr.w	r2, r3, #16
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	699a      	ldr	r2, [r3, #24]
 8008cd4:	4b0a      	ldr	r3, [pc, #40]	@ (8008d00 <USB_HostInit+0x184>)
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	687a      	ldr	r2, [r7, #4]
 8008cda:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cde:	4618      	mov	r0, r3
 8008ce0:	3718      	adds	r7, #24
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ce8:	b004      	add	sp, #16
 8008cea:	4770      	bx	lr
 8008cec:	40040000 	.word	0x40040000
 8008cf0:	01000200 	.word	0x01000200
 8008cf4:	00e00300 	.word	0x00e00300
 8008cf8:	00600080 	.word	0x00600080
 8008cfc:	004000e0 	.word	0x004000e0
 8008d00:	a3200008 	.word	0xa3200008

08008d04 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008d04:	b480      	push	{r7}
 8008d06:	b085      	sub	sp, #20
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	460b      	mov	r3, r1
 8008d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008d22:	f023 0303 	bic.w	r3, r3, #3
 8008d26:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	78fb      	ldrb	r3, [r7, #3]
 8008d32:	f003 0303 	and.w	r3, r3, #3
 8008d36:	68f9      	ldr	r1, [r7, #12]
 8008d38:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008d3c:	4313      	orrs	r3, r2
 8008d3e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008d40:	78fb      	ldrb	r3, [r7, #3]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d107      	bne.n	8008d56 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d4c:	461a      	mov	r2, r3
 8008d4e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008d52:	6053      	str	r3, [r2, #4]
 8008d54:	e00c      	b.n	8008d70 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8008d56:	78fb      	ldrb	r3, [r7, #3]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d107      	bne.n	8008d6c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d62:	461a      	mov	r2, r3
 8008d64:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008d68:	6053      	str	r3, [r2, #4]
 8008d6a:	e001      	b.n	8008d70 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e000      	b.n	8008d72 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008d70:	2300      	movs	r3, #0
}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr

08008d7e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b084      	sub	sp, #16
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008d9e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	68fa      	ldr	r2, [r7, #12]
 8008da4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008da8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008dac:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8008dae:	2064      	movs	r0, #100	@ 0x64
 8008db0:	f7fa ffb6 	bl	8003d20 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	68fa      	ldr	r2, [r7, #12]
 8008db8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dc0:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8008dc2:	200a      	movs	r0, #10
 8008dc4:	f7fa ffac 	bl	8003d20 <HAL_Delay>

  return HAL_OK;
 8008dc8:	2300      	movs	r3, #0
}
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3710      	adds	r7, #16
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8008dd2:	b480      	push	{r7}
 8008dd4:	b085      	sub	sp, #20
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8008df0:	68bb      	ldr	r3, [r7, #8]
 8008df2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008df6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <USB_DriveVbus+0x44>
 8008e02:	78fb      	ldrb	r3, [r7, #3]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d106      	bne.n	8008e16 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	68fa      	ldr	r2, [r7, #12]
 8008e0c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008e14:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008e20:	d109      	bne.n	8008e36 <USB_DriveVbus+0x64>
 8008e22:	78fb      	ldrb	r3, [r7, #3]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d106      	bne.n	8008e36 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008e30:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e34:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008e36:	2300      	movs	r3, #0
}
 8008e38:	4618      	mov	r0, r3
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr

08008e44 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b085      	sub	sp, #20
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	0c5b      	lsrs	r3, r3, #17
 8008e62:	f003 0303 	and.w	r3, r3, #3
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr

08008e72 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008e72:	b480      	push	{r7}
 8008e74:	b085      	sub	sp, #20
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	b29b      	uxth	r3, r3
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3714      	adds	r7, #20
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e92:	4770      	bx	lr

08008e94 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b088      	sub	sp, #32
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	4608      	mov	r0, r1
 8008e9e:	4611      	mov	r1, r2
 8008ea0:	461a      	mov	r2, r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	70fb      	strb	r3, [r7, #3]
 8008ea6:	460b      	mov	r3, r1
 8008ea8:	70bb      	strb	r3, [r7, #2]
 8008eaa:	4613      	mov	r3, r2
 8008eac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8008eb6:	78fb      	ldrb	r3, [r7, #3]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8008eca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008ece:	2b03      	cmp	r3, #3
 8008ed0:	d87c      	bhi.n	8008fcc <USB_HC_Init+0x138>
 8008ed2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ed8 <USB_HC_Init+0x44>)
 8008ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ed8:	08008ee9 	.word	0x08008ee9
 8008edc:	08008f8f 	.word	0x08008f8f
 8008ee0:	08008ee9 	.word	0x08008ee9
 8008ee4:	08008f51 	.word	0x08008f51
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008ee8:	78fb      	ldrb	r3, [r7, #3]
 8008eea:	015a      	lsls	r2, r3, #5
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	4413      	add	r3, r2
 8008ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	f240 439d 	movw	r3, #1181	@ 0x49d
 8008efa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8008efc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	da10      	bge.n	8008f26 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f04:	78fb      	ldrb	r3, [r7, #3]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	693b      	ldr	r3, [r7, #16]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	78fa      	ldrb	r2, [r7, #3]
 8008f14:	0151      	lsls	r1, r2, #5
 8008f16:	693a      	ldr	r2, [r7, #16]
 8008f18:	440a      	add	r2, r1
 8008f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f22:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008f24:	e055      	b.n	8008fd2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	4a6f      	ldr	r2, [pc, #444]	@ (80090e8 <USB_HC_Init+0x254>)
 8008f2a:	4293      	cmp	r3, r2
 8008f2c:	d151      	bne.n	8008fd2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008f2e:	78fb      	ldrb	r3, [r7, #3]
 8008f30:	015a      	lsls	r2, r3, #5
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	4413      	add	r3, r2
 8008f36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	78fa      	ldrb	r2, [r7, #3]
 8008f3e:	0151      	lsls	r1, r2, #5
 8008f40:	693a      	ldr	r2, [r7, #16]
 8008f42:	440a      	add	r2, r1
 8008f44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f48:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008f4c:	60d3      	str	r3, [r2, #12]
      break;
 8008f4e:	e040      	b.n	8008fd2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f50:	78fb      	ldrb	r3, [r7, #3]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008f62:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008f64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	da34      	bge.n	8008fd6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008f6c:	78fb      	ldrb	r3, [r7, #3]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f78:	68db      	ldr	r3, [r3, #12]
 8008f7a:	78fa      	ldrb	r2, [r7, #3]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f8a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008f8c:	e023      	b.n	8008fd6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008f8e:	78fb      	ldrb	r3, [r7, #3]
 8008f90:	015a      	lsls	r2, r3, #5
 8008f92:	693b      	ldr	r3, [r7, #16]
 8008f94:	4413      	add	r3, r2
 8008f96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f240 2325 	movw	r3, #549	@ 0x225
 8008fa0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008fa2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	da17      	bge.n	8008fda <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	015a      	lsls	r2, r3, #5
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fb6:	68db      	ldr	r3, [r3, #12]
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	0151      	lsls	r1, r2, #5
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	440a      	add	r2, r1
 8008fc0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008fc4:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008fc8:	60d3      	str	r3, [r2, #12]
      }
      break;
 8008fca:	e006      	b.n	8008fda <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8008fcc:	2301      	movs	r3, #1
 8008fce:	77fb      	strb	r3, [r7, #31]
      break;
 8008fd0:	e004      	b.n	8008fdc <USB_HC_Init+0x148>
      break;
 8008fd2:	bf00      	nop
 8008fd4:	e002      	b.n	8008fdc <USB_HC_Init+0x148>
      break;
 8008fd6:	bf00      	nop
 8008fd8:	e000      	b.n	8008fdc <USB_HC_Init+0x148>
      break;
 8008fda:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008fdc:	78fb      	ldrb	r3, [r7, #3]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fe8:	461a      	mov	r2, r3
 8008fea:	2300      	movs	r3, #0
 8008fec:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008fee:	78fb      	ldrb	r3, [r7, #3]
 8008ff0:	015a      	lsls	r2, r3, #5
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	4413      	add	r3, r2
 8008ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffa:	68db      	ldr	r3, [r3, #12]
 8008ffc:	78fa      	ldrb	r2, [r7, #3]
 8008ffe:	0151      	lsls	r1, r2, #5
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	440a      	add	r2, r1
 8009004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009008:	f043 0302 	orr.w	r3, r3, #2
 800900c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800900e:	693b      	ldr	r3, [r7, #16]
 8009010:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009014:	699a      	ldr	r2, [r3, #24]
 8009016:	78fb      	ldrb	r3, [r7, #3]
 8009018:	f003 030f 	and.w	r3, r3, #15
 800901c:	2101      	movs	r1, #1
 800901e:	fa01 f303 	lsl.w	r3, r1, r3
 8009022:	6939      	ldr	r1, [r7, #16]
 8009024:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009028:	4313      	orrs	r3, r2
 800902a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	699b      	ldr	r3, [r3, #24]
 8009030:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009038:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800903c:	2b00      	cmp	r3, #0
 800903e:	da03      	bge.n	8009048 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009040:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009044:	61bb      	str	r3, [r7, #24]
 8009046:	e001      	b.n	800904c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f7ff fef9 	bl	8008e44 <USB_GetHostSpeed>
 8009052:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009054:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009058:	2b02      	cmp	r3, #2
 800905a:	d106      	bne.n	800906a <USB_HC_Init+0x1d6>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b02      	cmp	r3, #2
 8009060:	d003      	beq.n	800906a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009062:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009066:	617b      	str	r3, [r7, #20]
 8009068:	e001      	b.n	800906e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800906e:	787b      	ldrb	r3, [r7, #1]
 8009070:	059b      	lsls	r3, r3, #22
 8009072:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009076:	78bb      	ldrb	r3, [r7, #2]
 8009078:	02db      	lsls	r3, r3, #11
 800907a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800907e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009080:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009084:	049b      	lsls	r3, r3, #18
 8009086:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800908a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800908c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800908e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009092:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009094:	69bb      	ldr	r3, [r7, #24]
 8009096:	431a      	orrs	r2, r3
 8009098:	697b      	ldr	r3, [r7, #20]
 800909a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800909c:	78fa      	ldrb	r2, [r7, #3]
 800909e:	0151      	lsls	r1, r2, #5
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	440a      	add	r2, r1
 80090a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80090a8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80090ac:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80090ae:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090b2:	2b03      	cmp	r3, #3
 80090b4:	d003      	beq.n	80090be <USB_HC_Init+0x22a>
 80090b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d10f      	bne.n	80090de <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80090be:	78fb      	ldrb	r3, [r7, #3]
 80090c0:	015a      	lsls	r2, r3, #5
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	4413      	add	r3, r2
 80090c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	0151      	lsls	r1, r2, #5
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	440a      	add	r2, r1
 80090d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80090dc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80090de:	7ffb      	ldrb	r3, [r7, #31]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3720      	adds	r7, #32
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	40040000 	.word	0x40040000

080090ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b08c      	sub	sp, #48	@ 0x30
 80090f0:	af02      	add	r7, sp, #8
 80090f2:	60f8      	str	r0, [r7, #12]
 80090f4:	60b9      	str	r1, [r7, #8]
 80090f6:	4613      	mov	r3, r2
 80090f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	785b      	ldrb	r3, [r3, #1]
 8009102:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009104:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009108:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4a5d      	ldr	r2, [pc, #372]	@ (8009284 <USB_HC_StartXfer+0x198>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d12f      	bne.n	8009172 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009112:	79fb      	ldrb	r3, [r7, #7]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d11c      	bne.n	8009152 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	7c9b      	ldrb	r3, [r3, #18]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d003      	beq.n	8009128 <USB_HC_StartXfer+0x3c>
 8009120:	68bb      	ldr	r3, [r7, #8]
 8009122:	7c9b      	ldrb	r3, [r3, #18]
 8009124:	2b02      	cmp	r3, #2
 8009126:	d124      	bne.n	8009172 <USB_HC_StartXfer+0x86>
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	799b      	ldrb	r3, [r3, #6]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d120      	bne.n	8009172 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	015a      	lsls	r2, r3, #5
 8009134:	6a3b      	ldr	r3, [r7, #32]
 8009136:	4413      	add	r3, r2
 8009138:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	0151      	lsls	r1, r2, #5
 8009142:	6a3a      	ldr	r2, [r7, #32]
 8009144:	440a      	add	r2, r1
 8009146:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800914a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800914e:	60d3      	str	r3, [r2, #12]
 8009150:	e00f      	b.n	8009172 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	791b      	ldrb	r3, [r3, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d10b      	bne.n	8009172 <USB_HC_StartXfer+0x86>
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	795b      	ldrb	r3, [r3, #5]
 800915e:	2b01      	cmp	r3, #1
 8009160:	d107      	bne.n	8009172 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	785b      	ldrb	r3, [r3, #1]
 8009166:	4619      	mov	r1, r3
 8009168:	68f8      	ldr	r0, [r7, #12]
 800916a:	f000 fb6b 	bl	8009844 <USB_DoPing>
        return HAL_OK;
 800916e:	2300      	movs	r3, #0
 8009170:	e232      	b.n	80095d8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	799b      	ldrb	r3, [r3, #6]
 8009176:	2b01      	cmp	r3, #1
 8009178:	d158      	bne.n	800922c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800917a:	2301      	movs	r3, #1
 800917c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800917e:	68bb      	ldr	r3, [r7, #8]
 8009180:	78db      	ldrb	r3, [r3, #3]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d007      	beq.n	8009196 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009186:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009188:	68ba      	ldr	r2, [r7, #8]
 800918a:	8a92      	ldrh	r2, [r2, #20]
 800918c:	fb03 f202 	mul.w	r2, r3, r2
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	61da      	str	r2, [r3, #28]
 8009194:	e07c      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	7c9b      	ldrb	r3, [r3, #18]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d130      	bne.n	8009200 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800919e:	68bb      	ldr	r3, [r7, #8]
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	2bbc      	cmp	r3, #188	@ 0xbc
 80091a4:	d918      	bls.n	80091d8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80091a6:	68bb      	ldr	r3, [r7, #8]
 80091a8:	8a9b      	ldrh	r3, [r3, #20]
 80091aa:	461a      	mov	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	69da      	ldr	r2, [r3, #28]
 80091b4:	68bb      	ldr	r3, [r7, #8]
 80091b6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	68db      	ldr	r3, [r3, #12]
 80091bc:	2b01      	cmp	r3, #1
 80091be:	d003      	beq.n	80091c8 <USB_HC_StartXfer+0xdc>
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d103      	bne.n	80091d0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80091c8:	68bb      	ldr	r3, [r7, #8]
 80091ca:	2202      	movs	r2, #2
 80091cc:	60da      	str	r2, [r3, #12]
 80091ce:	e05f      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80091d0:	68bb      	ldr	r3, [r7, #8]
 80091d2:	2201      	movs	r2, #1
 80091d4:	60da      	str	r2, [r3, #12]
 80091d6:	e05b      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80091d8:	68bb      	ldr	r3, [r7, #8]
 80091da:	6a1a      	ldr	r2, [r3, #32]
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80091e0:	68bb      	ldr	r3, [r7, #8]
 80091e2:	68db      	ldr	r3, [r3, #12]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d007      	beq.n	80091f8 <USB_HC_StartXfer+0x10c>
 80091e8:	68bb      	ldr	r3, [r7, #8]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d003      	beq.n	80091f8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80091f0:	68bb      	ldr	r3, [r7, #8]
 80091f2:	2204      	movs	r2, #4
 80091f4:	60da      	str	r2, [r3, #12]
 80091f6:	e04b      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 80091f8:	68bb      	ldr	r3, [r7, #8]
 80091fa:	2203      	movs	r2, #3
 80091fc:	60da      	str	r2, [r3, #12]
 80091fe:	e047      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8009200:	79fb      	ldrb	r3, [r7, #7]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d10d      	bne.n	8009222 <USB_HC_StartXfer+0x136>
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	6a1b      	ldr	r3, [r3, #32]
 800920a:	68ba      	ldr	r2, [r7, #8]
 800920c:	8a92      	ldrh	r2, [r2, #20]
 800920e:	4293      	cmp	r3, r2
 8009210:	d907      	bls.n	8009222 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009212:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009214:	68ba      	ldr	r2, [r7, #8]
 8009216:	8a92      	ldrh	r2, [r2, #20]
 8009218:	fb03 f202 	mul.w	r2, r3, r2
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	61da      	str	r2, [r3, #28]
 8009220:	e036      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6a1a      	ldr	r2, [r3, #32]
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	61da      	str	r2, [r3, #28]
 800922a:	e031      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	6a1b      	ldr	r3, [r3, #32]
 8009230:	2b00      	cmp	r3, #0
 8009232:	d018      	beq.n	8009266 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	6a1b      	ldr	r3, [r3, #32]
 8009238:	68ba      	ldr	r2, [r7, #8]
 800923a:	8a92      	ldrh	r2, [r2, #20]
 800923c:	4413      	add	r3, r2
 800923e:	3b01      	subs	r3, #1
 8009240:	68ba      	ldr	r2, [r7, #8]
 8009242:	8a92      	ldrh	r2, [r2, #20]
 8009244:	fbb3 f3f2 	udiv	r3, r3, r2
 8009248:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800924a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800924c:	8b7b      	ldrh	r3, [r7, #26]
 800924e:	429a      	cmp	r2, r3
 8009250:	d90b      	bls.n	800926a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8009252:	8b7b      	ldrh	r3, [r7, #26]
 8009254:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009256:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	8a92      	ldrh	r2, [r2, #20]
 800925c:	fb03 f202 	mul.w	r2, r3, r2
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	61da      	str	r2, [r3, #28]
 8009264:	e001      	b.n	800926a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8009266:	2301      	movs	r3, #1
 8009268:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	78db      	ldrb	r3, [r3, #3]
 800926e:	2b00      	cmp	r3, #0
 8009270:	d00a      	beq.n	8009288 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8009272:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009274:	68ba      	ldr	r2, [r7, #8]
 8009276:	8a92      	ldrh	r2, [r2, #20]
 8009278:	fb03 f202 	mul.w	r2, r3, r2
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	61da      	str	r2, [r3, #28]
 8009280:	e006      	b.n	8009290 <USB_HC_StartXfer+0x1a4>
 8009282:	bf00      	nop
 8009284:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	68bb      	ldr	r3, [r7, #8]
 800928e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	69db      	ldr	r3, [r3, #28]
 8009294:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009298:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800929a:	04d9      	lsls	r1, r3, #19
 800929c:	4ba3      	ldr	r3, [pc, #652]	@ (800952c <USB_HC_StartXfer+0x440>)
 800929e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092a0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	7d9b      	ldrb	r3, [r3, #22]
 80092a6:	075b      	lsls	r3, r3, #29
 80092a8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092ac:	69f9      	ldr	r1, [r7, #28]
 80092ae:	0148      	lsls	r0, r1, #5
 80092b0:	6a39      	ldr	r1, [r7, #32]
 80092b2:	4401      	add	r1, r0
 80092b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80092b8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80092ba:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d009      	beq.n	80092d6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6999      	ldr	r1, [r3, #24]
 80092c6:	69fb      	ldr	r3, [r7, #28]
 80092c8:	015a      	lsls	r2, r3, #5
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	4413      	add	r3, r2
 80092ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092d2:	460a      	mov	r2, r1
 80092d4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	f003 0301 	and.w	r3, r3, #1
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	bf0c      	ite	eq
 80092e6:	2301      	moveq	r3, #1
 80092e8:	2300      	movne	r3, #0
 80092ea:	b2db      	uxtb	r3, r3
 80092ec:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80092ee:	69fb      	ldr	r3, [r7, #28]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	6a3b      	ldr	r3, [r7, #32]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	69fa      	ldr	r2, [r7, #28]
 80092fe:	0151      	lsls	r1, r2, #5
 8009300:	6a3a      	ldr	r2, [r7, #32]
 8009302:	440a      	add	r2, r1
 8009304:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009308:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800930c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800930e:	69fb      	ldr	r3, [r7, #28]
 8009310:	015a      	lsls	r2, r3, #5
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	4413      	add	r3, r2
 8009316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	7e7b      	ldrb	r3, [r7, #25]
 800931e:	075b      	lsls	r3, r3, #29
 8009320:	69f9      	ldr	r1, [r7, #28]
 8009322:	0148      	lsls	r0, r1, #5
 8009324:	6a39      	ldr	r1, [r7, #32]
 8009326:	4401      	add	r1, r0
 8009328:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800932c:	4313      	orrs	r3, r2
 800932e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	799b      	ldrb	r3, [r3, #6]
 8009334:	2b01      	cmp	r3, #1
 8009336:	f040 80c3 	bne.w	80094c0 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	7c5b      	ldrb	r3, [r3, #17]
 800933e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009340:	68ba      	ldr	r2, [r7, #8]
 8009342:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009344:	4313      	orrs	r3, r2
 8009346:	69fa      	ldr	r2, [r7, #28]
 8009348:	0151      	lsls	r1, r2, #5
 800934a:	6a3a      	ldr	r2, [r7, #32]
 800934c:	440a      	add	r2, r1
 800934e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8009352:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8009356:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8009358:	69fb      	ldr	r3, [r7, #28]
 800935a:	015a      	lsls	r2, r3, #5
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	4413      	add	r3, r2
 8009360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	69fa      	ldr	r2, [r7, #28]
 8009368:	0151      	lsls	r1, r2, #5
 800936a:	6a3a      	ldr	r2, [r7, #32]
 800936c:	440a      	add	r2, r1
 800936e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009372:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009376:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8009378:	68bb      	ldr	r3, [r7, #8]
 800937a:	79db      	ldrb	r3, [r3, #7]
 800937c:	2b01      	cmp	r3, #1
 800937e:	d123      	bne.n	80093c8 <USB_HC_StartXfer+0x2dc>
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	78db      	ldrb	r3, [r3, #3]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11f      	bne.n	80093c8 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8009388:	69fb      	ldr	r3, [r7, #28]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	4413      	add	r3, r2
 8009390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	69fa      	ldr	r2, [r7, #28]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	6a3a      	ldr	r2, [r7, #32]
 800939c:	440a      	add	r2, r1
 800939e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093a6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80093a8:	69fb      	ldr	r3, [r7, #28]
 80093aa:	015a      	lsls	r2, r3, #5
 80093ac:	6a3b      	ldr	r3, [r7, #32]
 80093ae:	4413      	add	r3, r2
 80093b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093b4:	68db      	ldr	r3, [r3, #12]
 80093b6:	69fa      	ldr	r2, [r7, #28]
 80093b8:	0151      	lsls	r1, r2, #5
 80093ba:	6a3a      	ldr	r2, [r7, #32]
 80093bc:	440a      	add	r2, r1
 80093be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80093c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093c6:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	7c9b      	ldrb	r3, [r3, #18]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d003      	beq.n	80093d8 <USB_HC_StartXfer+0x2ec>
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	7c9b      	ldrb	r3, [r3, #18]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d117      	bne.n	8009408 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80093d8:	68bb      	ldr	r3, [r7, #8]
 80093da:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d113      	bne.n	8009408 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	78db      	ldrb	r3, [r3, #3]
 80093e4:	2b01      	cmp	r3, #1
 80093e6:	d10f      	bne.n	8009408 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	015a      	lsls	r2, r3, #5
 80093ec:	6a3b      	ldr	r3, [r7, #32]
 80093ee:	4413      	add	r3, r2
 80093f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	69fa      	ldr	r2, [r7, #28]
 80093f8:	0151      	lsls	r1, r2, #5
 80093fa:	6a3a      	ldr	r2, [r7, #32]
 80093fc:	440a      	add	r2, r1
 80093fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009402:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009406:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	7c9b      	ldrb	r3, [r3, #18]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d162      	bne.n	80094d6 <USB_HC_StartXfer+0x3ea>
 8009410:	68bb      	ldr	r3, [r7, #8]
 8009412:	78db      	ldrb	r3, [r3, #3]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d15e      	bne.n	80094d6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	68db      	ldr	r3, [r3, #12]
 800941c:	3b01      	subs	r3, #1
 800941e:	2b03      	cmp	r3, #3
 8009420:	d858      	bhi.n	80094d4 <USB_HC_StartXfer+0x3e8>
 8009422:	a201      	add	r2, pc, #4	@ (adr r2, 8009428 <USB_HC_StartXfer+0x33c>)
 8009424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009428:	08009439 	.word	0x08009439
 800942c:	0800945b 	.word	0x0800945b
 8009430:	0800947d 	.word	0x0800947d
 8009434:	0800949f 	.word	0x0800949f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8009438:	69fb      	ldr	r3, [r7, #28]
 800943a:	015a      	lsls	r2, r3, #5
 800943c:	6a3b      	ldr	r3, [r7, #32]
 800943e:	4413      	add	r3, r2
 8009440:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	69fa      	ldr	r2, [r7, #28]
 8009448:	0151      	lsls	r1, r2, #5
 800944a:	6a3a      	ldr	r2, [r7, #32]
 800944c:	440a      	add	r2, r1
 800944e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009452:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009456:	6053      	str	r3, [r2, #4]
          break;
 8009458:	e03d      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800945a:	69fb      	ldr	r3, [r7, #28]
 800945c:	015a      	lsls	r2, r3, #5
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	4413      	add	r3, r2
 8009462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	69fa      	ldr	r2, [r7, #28]
 800946a:	0151      	lsls	r1, r2, #5
 800946c:	6a3a      	ldr	r2, [r7, #32]
 800946e:	440a      	add	r2, r1
 8009470:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009474:	f043 030e 	orr.w	r3, r3, #14
 8009478:	6053      	str	r3, [r2, #4]
          break;
 800947a:	e02c      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800947c:	69fb      	ldr	r3, [r7, #28]
 800947e:	015a      	lsls	r2, r3, #5
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	4413      	add	r3, r2
 8009484:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	69fa      	ldr	r2, [r7, #28]
 800948c:	0151      	lsls	r1, r2, #5
 800948e:	6a3a      	ldr	r2, [r7, #32]
 8009490:	440a      	add	r2, r1
 8009492:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800949a:	6053      	str	r3, [r2, #4]
          break;
 800949c:	e01b      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800949e:	69fb      	ldr	r3, [r7, #28]
 80094a0:	015a      	lsls	r2, r3, #5
 80094a2:	6a3b      	ldr	r3, [r7, #32]
 80094a4:	4413      	add	r3, r2
 80094a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094aa:	685b      	ldr	r3, [r3, #4]
 80094ac:	69fa      	ldr	r2, [r7, #28]
 80094ae:	0151      	lsls	r1, r2, #5
 80094b0:	6a3a      	ldr	r2, [r7, #32]
 80094b2:	440a      	add	r2, r1
 80094b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80094b8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80094bc:	6053      	str	r3, [r2, #4]
          break;
 80094be:	e00a      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	015a      	lsls	r2, r3, #5
 80094c4:	6a3b      	ldr	r3, [r7, #32]
 80094c6:	4413      	add	r3, r2
 80094c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094cc:	461a      	mov	r2, r3
 80094ce:	2300      	movs	r3, #0
 80094d0:	6053      	str	r3, [r2, #4]
 80094d2:	e000      	b.n	80094d6 <USB_HC_StartXfer+0x3ea>
          break;
 80094d4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	015a      	lsls	r2, r3, #5
 80094da:	6a3b      	ldr	r3, [r7, #32]
 80094dc:	4413      	add	r3, r2
 80094de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80094e6:	693b      	ldr	r3, [r7, #16]
 80094e8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80094ec:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	78db      	ldrb	r3, [r3, #3]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d004      	beq.n	8009500 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80094fc:	613b      	str	r3, [r7, #16]
 80094fe:	e003      	b.n	8009508 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8009500:	693b      	ldr	r3, [r7, #16]
 8009502:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009506:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800950e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8009510:	69fb      	ldr	r3, [r7, #28]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	6a3b      	ldr	r3, [r7, #32]
 8009516:	4413      	add	r3, r2
 8009518:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800951c:	461a      	mov	r2, r3
 800951e:	693b      	ldr	r3, [r7, #16]
 8009520:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8009522:	79fb      	ldrb	r3, [r7, #7]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d003      	beq.n	8009530 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8009528:	2300      	movs	r3, #0
 800952a:	e055      	b.n	80095d8 <USB_HC_StartXfer+0x4ec>
 800952c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	78db      	ldrb	r3, [r3, #3]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d14e      	bne.n	80095d6 <USB_HC_StartXfer+0x4ea>
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	6a1b      	ldr	r3, [r3, #32]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d04a      	beq.n	80095d6 <USB_HC_StartXfer+0x4ea>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	79db      	ldrb	r3, [r3, #7]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d146      	bne.n	80095d6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8009548:	68bb      	ldr	r3, [r7, #8]
 800954a:	7c9b      	ldrb	r3, [r3, #18]
 800954c:	2b03      	cmp	r3, #3
 800954e:	d831      	bhi.n	80095b4 <USB_HC_StartXfer+0x4c8>
 8009550:	a201      	add	r2, pc, #4	@ (adr r2, 8009558 <USB_HC_StartXfer+0x46c>)
 8009552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009556:	bf00      	nop
 8009558:	08009569 	.word	0x08009569
 800955c:	0800958d 	.word	0x0800958d
 8009560:	08009569 	.word	0x08009569
 8009564:	0800958d 	.word	0x0800958d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	6a1b      	ldr	r3, [r3, #32]
 800956c:	3303      	adds	r3, #3
 800956e:	089b      	lsrs	r3, r3, #2
 8009570:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8009572:	8afa      	ldrh	r2, [r7, #22]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	b29b      	uxth	r3, r3
 800957a:	429a      	cmp	r2, r3
 800957c:	d91c      	bls.n	80095b8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	699b      	ldr	r3, [r3, #24]
 8009582:	f043 0220 	orr.w	r2, r3, #32
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	619a      	str	r2, [r3, #24]
        }
        break;
 800958a:	e015      	b.n	80095b8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	6a1b      	ldr	r3, [r3, #32]
 8009590:	3303      	adds	r3, #3
 8009592:	089b      	lsrs	r3, r3, #2
 8009594:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8009596:	8afa      	ldrh	r2, [r7, #22]
 8009598:	6a3b      	ldr	r3, [r7, #32]
 800959a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800959e:	691b      	ldr	r3, [r3, #16]
 80095a0:	b29b      	uxth	r3, r3
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d90a      	bls.n	80095bc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	699b      	ldr	r3, [r3, #24]
 80095aa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	619a      	str	r2, [r3, #24]
        }
        break;
 80095b2:	e003      	b.n	80095bc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80095b4:	bf00      	nop
 80095b6:	e002      	b.n	80095be <USB_HC_StartXfer+0x4d2>
        break;
 80095b8:	bf00      	nop
 80095ba:	e000      	b.n	80095be <USB_HC_StartXfer+0x4d2>
        break;
 80095bc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	6999      	ldr	r1, [r3, #24]
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	785a      	ldrb	r2, [r3, #1]
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	6a1b      	ldr	r3, [r3, #32]
 80095ca:	b29b      	uxth	r3, r3
 80095cc:	2000      	movs	r0, #0
 80095ce:	9000      	str	r0, [sp, #0]
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f7ff f9c9 	bl	8008968 <USB_WritePacket>
  }

  return HAL_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3728      	adds	r7, #40	@ 0x28
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80095f2:	695b      	ldr	r3, [r3, #20]
 80095f4:	b29b      	uxth	r3, r3
}
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr

08009602 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8009602:	b480      	push	{r7}
 8009604:	b089      	sub	sp, #36	@ 0x24
 8009606:	af00      	add	r7, sp, #0
 8009608:	6078      	str	r0, [r7, #4]
 800960a:	460b      	mov	r3, r1
 800960c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009612:	78fb      	ldrb	r3, [r7, #3]
 8009614:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8009616:	2300      	movs	r3, #0
 8009618:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800961a:	69bb      	ldr	r3, [r7, #24]
 800961c:	015a      	lsls	r2, r3, #5
 800961e:	69fb      	ldr	r3, [r7, #28]
 8009620:	4413      	add	r3, r2
 8009622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	0c9b      	lsrs	r3, r3, #18
 800962a:	f003 0303 	and.w	r3, r3, #3
 800962e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	015a      	lsls	r2, r3, #5
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	4413      	add	r3, r2
 8009638:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	0fdb      	lsrs	r3, r3, #31
 8009640:	f003 0301 	and.w	r3, r3, #1
 8009644:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009646:	69bb      	ldr	r3, [r7, #24]
 8009648:	015a      	lsls	r2, r3, #5
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	4413      	add	r3, r2
 800964e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	0fdb      	lsrs	r3, r3, #31
 8009656:	f003 0301 	and.w	r3, r3, #1
 800965a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	f003 0320 	and.w	r3, r3, #32
 8009664:	2b20      	cmp	r3, #32
 8009666:	d10d      	bne.n	8009684 <USB_HC_Halt+0x82>
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d10a      	bne.n	8009684 <USB_HC_Halt+0x82>
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d005      	beq.n	8009680 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	2b01      	cmp	r3, #1
 8009678:	d002      	beq.n	8009680 <USB_HC_Halt+0x7e>
 800967a:	697b      	ldr	r3, [r7, #20]
 800967c:	2b03      	cmp	r3, #3
 800967e:	d101      	bne.n	8009684 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009680:	2300      	movs	r3, #0
 8009682:	e0d8      	b.n	8009836 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	2b00      	cmp	r3, #0
 8009688:	d002      	beq.n	8009690 <USB_HC_Halt+0x8e>
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	2b02      	cmp	r3, #2
 800968e:	d173      	bne.n	8009778 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	015a      	lsls	r2, r3, #5
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	4413      	add	r3, r2
 8009698:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	69ba      	ldr	r2, [r7, #24]
 80096a0:	0151      	lsls	r1, r2, #5
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	440a      	add	r2, r1
 80096a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096aa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80096ae:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	689b      	ldr	r3, [r3, #8]
 80096b4:	f003 0320 	and.w	r3, r3, #32
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d14a      	bne.n	8009752 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d133      	bne.n	8009730 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80096c8:	69bb      	ldr	r3, [r7, #24]
 80096ca:	015a      	lsls	r2, r3, #5
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	4413      	add	r3, r2
 80096d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	69ba      	ldr	r2, [r7, #24]
 80096d8:	0151      	lsls	r1, r2, #5
 80096da:	69fa      	ldr	r2, [r7, #28]
 80096dc:	440a      	add	r2, r1
 80096de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80096e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80096e6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80096e8:	69bb      	ldr	r3, [r7, #24]
 80096ea:	015a      	lsls	r2, r3, #5
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	4413      	add	r3, r2
 80096f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	0151      	lsls	r1, r2, #5
 80096fa:	69fa      	ldr	r2, [r7, #28]
 80096fc:	440a      	add	r2, r1
 80096fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009706:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	3301      	adds	r3, #1
 800970c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009714:	d82e      	bhi.n	8009774 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009716:	69bb      	ldr	r3, [r7, #24]
 8009718:	015a      	lsls	r2, r3, #5
 800971a:	69fb      	ldr	r3, [r7, #28]
 800971c:	4413      	add	r3, r2
 800971e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009728:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800972c:	d0ec      	beq.n	8009708 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800972e:	e081      	b.n	8009834 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	015a      	lsls	r2, r3, #5
 8009734:	69fb      	ldr	r3, [r7, #28]
 8009736:	4413      	add	r3, r2
 8009738:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	0151      	lsls	r1, r2, #5
 8009742:	69fa      	ldr	r2, [r7, #28]
 8009744:	440a      	add	r2, r1
 8009746:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800974a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800974e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009750:	e070      	b.n	8009834 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009752:	69bb      	ldr	r3, [r7, #24]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	69ba      	ldr	r2, [r7, #24]
 8009762:	0151      	lsls	r1, r2, #5
 8009764:	69fa      	ldr	r2, [r7, #28]
 8009766:	440a      	add	r2, r1
 8009768:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800976c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009770:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009772:	e05f      	b.n	8009834 <USB_HC_Halt+0x232>
            break;
 8009774:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009776:	e05d      	b.n	8009834 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009778:	69bb      	ldr	r3, [r7, #24]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	69fb      	ldr	r3, [r7, #28]
 800977e:	4413      	add	r3, r2
 8009780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	69ba      	ldr	r2, [r7, #24]
 8009788:	0151      	lsls	r1, r2, #5
 800978a:	69fa      	ldr	r2, [r7, #28]
 800978c:	440a      	add	r2, r1
 800978e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009792:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009796:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800979e:	691b      	ldr	r3, [r3, #16]
 80097a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d133      	bne.n	8009810 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80097a8:	69bb      	ldr	r3, [r7, #24]
 80097aa:	015a      	lsls	r2, r3, #5
 80097ac:	69fb      	ldr	r3, [r7, #28]
 80097ae:	4413      	add	r3, r2
 80097b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	69ba      	ldr	r2, [r7, #24]
 80097b8:	0151      	lsls	r1, r2, #5
 80097ba:	69fa      	ldr	r2, [r7, #28]
 80097bc:	440a      	add	r2, r1
 80097be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097c2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097c6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097c8:	69bb      	ldr	r3, [r7, #24]
 80097ca:	015a      	lsls	r2, r3, #5
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	4413      	add	r3, r2
 80097d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	69ba      	ldr	r2, [r7, #24]
 80097d8:	0151      	lsls	r1, r2, #5
 80097da:	69fa      	ldr	r2, [r7, #28]
 80097dc:	440a      	add	r2, r1
 80097de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097e6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	3301      	adds	r3, #1
 80097ec:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097f4:	d81d      	bhi.n	8009832 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	69fb      	ldr	r3, [r7, #28]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009808:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800980c:	d0ec      	beq.n	80097e8 <USB_HC_Halt+0x1e6>
 800980e:	e011      	b.n	8009834 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009810:	69bb      	ldr	r3, [r7, #24]
 8009812:	015a      	lsls	r2, r3, #5
 8009814:	69fb      	ldr	r3, [r7, #28]
 8009816:	4413      	add	r3, r2
 8009818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	69ba      	ldr	r2, [r7, #24]
 8009820:	0151      	lsls	r1, r2, #5
 8009822:	69fa      	ldr	r2, [r7, #28]
 8009824:	440a      	add	r2, r1
 8009826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800982a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800982e:	6013      	str	r3, [r2, #0]
 8009830:	e000      	b.n	8009834 <USB_HC_Halt+0x232>
          break;
 8009832:	bf00      	nop
    }
  }

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3724      	adds	r7, #36	@ 0x24
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
	...

08009844 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	6078      	str	r0, [r7, #4]
 800984c:	460b      	mov	r3, r1
 800984e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009854:	78fb      	ldrb	r3, [r7, #3]
 8009856:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8009858:	2301      	movs	r3, #1
 800985a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	04da      	lsls	r2, r3, #19
 8009860:	4b15      	ldr	r3, [pc, #84]	@ (80098b8 <USB_DoPing+0x74>)
 8009862:	4013      	ands	r3, r2
 8009864:	693a      	ldr	r2, [r7, #16]
 8009866:	0151      	lsls	r1, r2, #5
 8009868:	697a      	ldr	r2, [r7, #20]
 800986a:	440a      	add	r2, r1
 800986c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009870:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009874:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	015a      	lsls	r2, r3, #5
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800988c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009894:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	015a      	lsls	r2, r3, #5
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	4413      	add	r3, r2
 800989e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098a2:	461a      	mov	r2, r3
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80098a8:	2300      	movs	r3, #0
}
 80098aa:	4618      	mov	r0, r3
 80098ac:	371c      	adds	r7, #28
 80098ae:	46bd      	mov	sp, r7
 80098b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b4:	4770      	bx	lr
 80098b6:	bf00      	nop
 80098b8:	1ff80000 	.word	0x1ff80000

080098bc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b088      	sub	sp, #32
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80098c4:	2300      	movs	r3, #0
 80098c6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80098cc:	2300      	movs	r3, #0
 80098ce:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f7fe ff8c 	bl	80087ee <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80098d6:	2110      	movs	r1, #16
 80098d8:	6878      	ldr	r0, [r7, #4]
 80098da:	f7fe ffe5 	bl	80088a8 <USB_FlushTxFifo>
 80098de:	4603      	mov	r3, r0
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d001      	beq.n	80098e8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80098e4:	2301      	movs	r3, #1
 80098e6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f7ff f80f 	bl	800890c <USB_FlushRxFifo>
 80098ee:	4603      	mov	r3, r0
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d001      	beq.n	80098f8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80098f4:	2301      	movs	r3, #1
 80098f6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80098f8:	2300      	movs	r3, #0
 80098fa:	61bb      	str	r3, [r7, #24]
 80098fc:	e01f      	b.n	800993e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	015a      	lsls	r2, r3, #5
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	4413      	add	r3, r2
 8009906:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009914:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8009916:	693b      	ldr	r3, [r7, #16]
 8009918:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800991c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800991e:	693b      	ldr	r3, [r7, #16]
 8009920:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009924:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	015a      	lsls	r2, r3, #5
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	4413      	add	r3, r2
 800992e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009932:	461a      	mov	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8009938:	69bb      	ldr	r3, [r7, #24]
 800993a:	3301      	adds	r3, #1
 800993c:	61bb      	str	r3, [r7, #24]
 800993e:	69bb      	ldr	r3, [r7, #24]
 8009940:	2b0f      	cmp	r3, #15
 8009942:	d9dc      	bls.n	80098fe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009944:	2300      	movs	r3, #0
 8009946:	61bb      	str	r3, [r7, #24]
 8009948:	e034      	b.n	80099b4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	015a      	lsls	r2, r3, #5
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	4413      	add	r3, r2
 8009952:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800995a:	693b      	ldr	r3, [r7, #16]
 800995c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009960:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009968:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009970:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	015a      	lsls	r2, r3, #5
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	4413      	add	r3, r2
 800997a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997e:	461a      	mov	r2, r3
 8009980:	693b      	ldr	r3, [r7, #16]
 8009982:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	3301      	adds	r3, #1
 8009988:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009990:	d80c      	bhi.n	80099ac <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	015a      	lsls	r2, r3, #5
 8009996:	697b      	ldr	r3, [r7, #20]
 8009998:	4413      	add	r3, r2
 800999a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099a8:	d0ec      	beq.n	8009984 <USB_StopHost+0xc8>
 80099aa:	e000      	b.n	80099ae <USB_StopHost+0xf2>
        break;
 80099ac:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	3301      	adds	r3, #1
 80099b2:	61bb      	str	r3, [r7, #24]
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	2b0f      	cmp	r3, #15
 80099b8:	d9c7      	bls.n	800994a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80099ba:	697b      	ldr	r3, [r7, #20]
 80099bc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80099c0:	461a      	mov	r2, r3
 80099c2:	f04f 33ff 	mov.w	r3, #4294967295
 80099c6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	f04f 32ff 	mov.w	r2, #4294967295
 80099ce:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7fe fefb 	bl	80087cc <USB_EnableGlobalInt>

  return ret;
 80099d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80099d8:	4618      	mov	r0, r3
 80099da:	3720      	adds	r7, #32
 80099dc:	46bd      	mov	sp, r7
 80099de:	bd80      	pop	{r7, pc}

080099e0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80099e0:	b590      	push	{r4, r7, lr}
 80099e2:	b089      	sub	sp, #36	@ 0x24
 80099e4:	af04      	add	r7, sp, #16
 80099e6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80099e8:	2301      	movs	r3, #1
 80099ea:	2202      	movs	r2, #2
 80099ec:	2102      	movs	r1, #2
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fc85 	bl	800a2fe <USBH_FindInterface>
 80099f4:	4603      	mov	r3, r0
 80099f6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	2bff      	cmp	r3, #255	@ 0xff
 80099fc:	d002      	beq.n	8009a04 <USBH_CDC_InterfaceInit+0x24>
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	2b01      	cmp	r3, #1
 8009a02:	d901      	bls.n	8009a08 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009a04:	2302      	movs	r3, #2
 8009a06:	e13d      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8009a08:	7bfb      	ldrb	r3, [r7, #15]
 8009a0a:	4619      	mov	r1, r3
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 fc5a 	bl	800a2c6 <USBH_SelectInterface>
 8009a12:	4603      	mov	r3, r0
 8009a14:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8009a16:	7bbb      	ldrb	r3, [r7, #14]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d001      	beq.n	8009a20 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009a1c:	2302      	movs	r3, #2
 8009a1e:	e131      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8009a26:	2050      	movs	r0, #80	@ 0x50
 8009a28:	f002 fb82 	bl	800c130 <malloc>
 8009a2c:	4603      	mov	r3, r0
 8009a2e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d101      	bne.n	8009a44 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009a40:	2302      	movs	r3, #2
 8009a42:	e11f      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009a44:	2250      	movs	r2, #80	@ 0x50
 8009a46:	2100      	movs	r1, #0
 8009a48:	68b8      	ldr	r0, [r7, #8]
 8009a4a:	f002 feff 	bl	800c84c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009a4e:	7bfb      	ldrb	r3, [r7, #15]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	211a      	movs	r1, #26
 8009a54:	fb01 f303 	mul.w	r3, r1, r3
 8009a58:	4413      	add	r3, r2
 8009a5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a5e:	781b      	ldrb	r3, [r3, #0]
 8009a60:	b25b      	sxtb	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	da15      	bge.n	8009a92 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	211a      	movs	r1, #26
 8009a6c:	fb01 f303 	mul.w	r3, r1, r3
 8009a70:	4413      	add	r3, r2
 8009a72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009a76:	781a      	ldrb	r2, [r3, #0]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009a7c:	7bfb      	ldrb	r3, [r7, #15]
 8009a7e:	687a      	ldr	r2, [r7, #4]
 8009a80:	211a      	movs	r1, #26
 8009a82:	fb01 f303 	mul.w	r3, r1, r3
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009a8c:	881a      	ldrh	r2, [r3, #0]
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009a92:	68bb      	ldr	r3, [r7, #8]
 8009a94:	785b      	ldrb	r3, [r3, #1]
 8009a96:	4619      	mov	r1, r3
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 ffbe 	bl	800ba1a <USBH_AllocPipe>
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	68bb      	ldr	r3, [r7, #8]
 8009aa4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009aa6:	68bb      	ldr	r3, [r7, #8]
 8009aa8:	7819      	ldrb	r1, [r3, #0]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	7858      	ldrb	r0, [r3, #1]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	8952      	ldrh	r2, [r2, #10]
 8009abe:	9202      	str	r2, [sp, #8]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	9201      	str	r2, [sp, #4]
 8009ac4:	9300      	str	r3, [sp, #0]
 8009ac6:	4623      	mov	r3, r4
 8009ac8:	4602      	mov	r2, r0
 8009aca:	6878      	ldr	r0, [r7, #4]
 8009acc:	f001 ff76 	bl	800b9bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	4619      	mov	r1, r3
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	f002 fa85 	bl	800bfe8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8009ade:	2300      	movs	r3, #0
 8009ae0:	2200      	movs	r2, #0
 8009ae2:	210a      	movs	r1, #10
 8009ae4:	6878      	ldr	r0, [r7, #4]
 8009ae6:	f000 fc0a 	bl	800a2fe <USBH_FindInterface>
 8009aea:	4603      	mov	r3, r0
 8009aec:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	2bff      	cmp	r3, #255	@ 0xff
 8009af2:	d002      	beq.n	8009afa <USBH_CDC_InterfaceInit+0x11a>
 8009af4:	7bfb      	ldrb	r3, [r7, #15]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d901      	bls.n	8009afe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8009afa:	2302      	movs	r3, #2
 8009afc:	e0c2      	b.n	8009c84 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009afe:	7bfb      	ldrb	r3, [r7, #15]
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	211a      	movs	r1, #26
 8009b04:	fb01 f303 	mul.w	r3, r1, r3
 8009b08:	4413      	add	r3, r2
 8009b0a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	b25b      	sxtb	r3, r3
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	da16      	bge.n	8009b44 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b16:	7bfb      	ldrb	r3, [r7, #15]
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	211a      	movs	r1, #26
 8009b1c:	fb01 f303 	mul.w	r3, r1, r3
 8009b20:	4413      	add	r3, r2
 8009b22:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b26:	781a      	ldrb	r2, [r3, #0]
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	211a      	movs	r1, #26
 8009b32:	fb01 f303 	mul.w	r3, r1, r3
 8009b36:	4413      	add	r3, r2
 8009b38:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b3c:	881a      	ldrh	r2, [r3, #0]
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	835a      	strh	r2, [r3, #26]
 8009b42:	e015      	b.n	8009b70 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009b44:	7bfb      	ldrb	r3, [r7, #15]
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	211a      	movs	r1, #26
 8009b4a:	fb01 f303 	mul.w	r3, r1, r3
 8009b4e:	4413      	add	r3, r2
 8009b50:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009b54:	781a      	ldrb	r2, [r3, #0]
 8009b56:	68bb      	ldr	r3, [r7, #8]
 8009b58:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009b5a:	7bfb      	ldrb	r3, [r7, #15]
 8009b5c:	687a      	ldr	r2, [r7, #4]
 8009b5e:	211a      	movs	r1, #26
 8009b60:	fb01 f303 	mul.w	r3, r1, r3
 8009b64:	4413      	add	r3, r2
 8009b66:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009b6a:	881a      	ldrh	r2, [r3, #0]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009b70:	7bfb      	ldrb	r3, [r7, #15]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	211a      	movs	r1, #26
 8009b76:	fb01 f303 	mul.w	r3, r1, r3
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b80:	781b      	ldrb	r3, [r3, #0]
 8009b82:	b25b      	sxtb	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	da16      	bge.n	8009bb6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009b88:	7bfb      	ldrb	r3, [r7, #15]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	211a      	movs	r1, #26
 8009b8e:	fb01 f303 	mul.w	r3, r1, r3
 8009b92:	4413      	add	r3, r2
 8009b94:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009b98:	781a      	ldrb	r2, [r3, #0]
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009b9e:	7bfb      	ldrb	r3, [r7, #15]
 8009ba0:	687a      	ldr	r2, [r7, #4]
 8009ba2:	211a      	movs	r1, #26
 8009ba4:	fb01 f303 	mul.w	r3, r1, r3
 8009ba8:	4413      	add	r3, r2
 8009baa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009bae:	881a      	ldrh	r2, [r3, #0]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	835a      	strh	r2, [r3, #26]
 8009bb4:	e015      	b.n	8009be2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009bb6:	7bfb      	ldrb	r3, [r7, #15]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	211a      	movs	r1, #26
 8009bbc:	fb01 f303 	mul.w	r3, r1, r3
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009bc6:	781a      	ldrb	r2, [r3, #0]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009bcc:	7bfb      	ldrb	r3, [r7, #15]
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	211a      	movs	r1, #26
 8009bd2:	fb01 f303 	mul.w	r3, r1, r3
 8009bd6:	4413      	add	r3, r2
 8009bd8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009bdc:	881a      	ldrh	r2, [r3, #0]
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009be2:	68bb      	ldr	r3, [r7, #8]
 8009be4:	7b9b      	ldrb	r3, [r3, #14]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 ff16 	bl	800ba1a <USBH_AllocPipe>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	7bdb      	ldrb	r3, [r3, #15]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 ff0c 	bl	800ba1a <USBH_AllocPipe>
 8009c02:	4603      	mov	r3, r0
 8009c04:	461a      	mov	r2, r3
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8009c0a:	68bb      	ldr	r3, [r7, #8]
 8009c0c:	7b59      	ldrb	r1, [r3, #13]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	7b98      	ldrb	r0, [r3, #14]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c1e:	68ba      	ldr	r2, [r7, #8]
 8009c20:	8b12      	ldrh	r2, [r2, #24]
 8009c22:	9202      	str	r2, [sp, #8]
 8009c24:	2202      	movs	r2, #2
 8009c26:	9201      	str	r2, [sp, #4]
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	4623      	mov	r3, r4
 8009c2c:	4602      	mov	r2, r0
 8009c2e:	6878      	ldr	r0, [r7, #4]
 8009c30:	f001 fec4 	bl	800b9bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	7b19      	ldrb	r1, [r3, #12]
 8009c38:	68bb      	ldr	r3, [r7, #8]
 8009c3a:	7bd8      	ldrb	r0, [r3, #15]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	8b52      	ldrh	r2, [r2, #26]
 8009c4c:	9202      	str	r2, [sp, #8]
 8009c4e:	2202      	movs	r2, #2
 8009c50:	9201      	str	r2, [sp, #4]
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4623      	mov	r3, r4
 8009c56:	4602      	mov	r2, r0
 8009c58:	6878      	ldr	r0, [r7, #4]
 8009c5a:	f001 feaf 	bl	800b9bc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	2200      	movs	r2, #0
 8009c62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	7b5b      	ldrb	r3, [r3, #13]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	f002 f9ba 	bl	800bfe8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	7b1b      	ldrb	r3, [r3, #12]
 8009c78:	2200      	movs	r2, #0
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f002 f9b3 	bl	800bfe8 <USBH_LL_SetToggle>

  return USBH_OK;
 8009c82:	2300      	movs	r3, #0
}
 8009c84:	4618      	mov	r0, r3
 8009c86:	3714      	adds	r7, #20
 8009c88:	46bd      	mov	sp, r7
 8009c8a:	bd90      	pop	{r4, r7, pc}

08009c8c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b084      	sub	sp, #16
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009c9a:	69db      	ldr	r3, [r3, #28]
 8009c9c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d00e      	beq.n	8009cc4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	781b      	ldrb	r3, [r3, #0]
 8009caa:	4619      	mov	r1, r3
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 fea4 	bl	800b9fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 fecf 	bl	800ba5c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	7b1b      	ldrb	r3, [r3, #12]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d00e      	beq.n	8009cea <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	7b1b      	ldrb	r3, [r3, #12]
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	6878      	ldr	r0, [r7, #4]
 8009cd4:	f001 fe91 	bl	800b9fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	7b1b      	ldrb	r3, [r3, #12]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	6878      	ldr	r0, [r7, #4]
 8009ce0:	f001 febc 	bl	800ba5c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	7b5b      	ldrb	r3, [r3, #13]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00e      	beq.n	8009d10 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	7b5b      	ldrb	r3, [r3, #13]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f001 fe7e 	bl	800b9fa <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	7b5b      	ldrb	r3, [r3, #13]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 fea9 	bl	800ba5c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	2200      	movs	r2, #0
 8009d0e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d16:	69db      	ldr	r3, [r3, #28]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d00b      	beq.n	8009d34 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d22:	69db      	ldr	r3, [r3, #28]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f002 fa0b 	bl	800c140 <free>
    phost->pActiveClass->pData = 0U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d30:	2200      	movs	r2, #0
 8009d32:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009d34:	2300      	movs	r3, #0
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3710      	adds	r7, #16
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b084      	sub	sp, #16
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d4c:	69db      	ldr	r3, [r3, #28]
 8009d4e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3340      	adds	r3, #64	@ 0x40
 8009d54:	4619      	mov	r1, r3
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f8b1 	bl	8009ebe <GetLineCoding>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d105      	bne.n	8009d72 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d6c:	2102      	movs	r1, #2
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009d72:	7afb      	ldrb	r3, [r7, #11]
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}

08009d7c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009d84:	2301      	movs	r3, #1
 8009d86:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009d88:	2300      	movs	r3, #0
 8009d8a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d92:	69db      	ldr	r3, [r3, #28]
 8009d94:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009d9c:	2b04      	cmp	r3, #4
 8009d9e:	d877      	bhi.n	8009e90 <USBH_CDC_Process+0x114>
 8009da0:	a201      	add	r2, pc, #4	@ (adr r2, 8009da8 <USBH_CDC_Process+0x2c>)
 8009da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da6:	bf00      	nop
 8009da8:	08009dbd 	.word	0x08009dbd
 8009dac:	08009dc3 	.word	0x08009dc3
 8009db0:	08009df3 	.word	0x08009df3
 8009db4:	08009e67 	.word	0x08009e67
 8009db8:	08009e75 	.word	0x08009e75
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009dbc:	2300      	movs	r3, #0
 8009dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8009dc0:	e06d      	b.n	8009e9e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	6878      	ldr	r0, [r7, #4]
 8009dca:	f000 f897 	bl	8009efc <SetLineCoding>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009dd2:	7bbb      	ldrb	r3, [r7, #14]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d104      	bne.n	8009de2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009de0:	e058      	b.n	8009e94 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009de2:	7bbb      	ldrb	r3, [r7, #14]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d055      	beq.n	8009e94 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2204      	movs	r2, #4
 8009dec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009df0:	e050      	b.n	8009e94 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009df2:	68bb      	ldr	r3, [r7, #8]
 8009df4:	3340      	adds	r3, #64	@ 0x40
 8009df6:	4619      	mov	r1, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f860 	bl	8009ebe <GetLineCoding>
 8009dfe:	4603      	mov	r3, r0
 8009e00:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e02:	7bbb      	ldrb	r3, [r7, #14]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d126      	bne.n	8009e56 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009e16:	68bb      	ldr	r3, [r7, #8]
 8009e18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e1a:	791b      	ldrb	r3, [r3, #4]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d13b      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009e26:	68bb      	ldr	r3, [r7, #8]
 8009e28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e2a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d133      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e30:	68bb      	ldr	r3, [r7, #8]
 8009e32:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009e36:	68bb      	ldr	r3, [r7, #8]
 8009e38:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e3a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009e3c:	429a      	cmp	r2, r3
 8009e3e:	d12b      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009e48:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009e4a:	429a      	cmp	r2, r3
 8009e4c:	d124      	bne.n	8009e98 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 f958 	bl	800a104 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009e54:	e020      	b.n	8009e98 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009e56:	7bbb      	ldrb	r3, [r7, #14]
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d01d      	beq.n	8009e98 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009e5c:	68bb      	ldr	r3, [r7, #8]
 8009e5e:	2204      	movs	r2, #4
 8009e60:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009e64:	e018      	b.n	8009e98 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f867 	bl	8009f3a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f000 f8da 	bl	800a026 <CDC_ProcessReception>
      break;
 8009e72:	e014      	b.n	8009e9e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009e74:	2100      	movs	r1, #0
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f001 f81a 	bl	800aeb0 <USBH_ClrFeature>
 8009e7c:	4603      	mov	r3, r0
 8009e7e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009e80:	7bbb      	ldrb	r3, [r7, #14]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d10a      	bne.n	8009e9c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009e86:	68bb      	ldr	r3, [r7, #8]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009e8e:	e005      	b.n	8009e9c <USBH_CDC_Process+0x120>

    default:
      break;
 8009e90:	bf00      	nop
 8009e92:	e004      	b.n	8009e9e <USBH_CDC_Process+0x122>
      break;
 8009e94:	bf00      	nop
 8009e96:	e002      	b.n	8009e9e <USBH_CDC_Process+0x122>
      break;
 8009e98:	bf00      	nop
 8009e9a:	e000      	b.n	8009e9e <USBH_CDC_Process+0x122>
      break;
 8009e9c:	bf00      	nop

  }

  return status;
 8009e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3710      	adds	r7, #16
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}

08009ea8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b083      	sub	sp, #12
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009eb0:	2300      	movs	r3, #0
}
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	370c      	adds	r7, #12
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ebc:	4770      	bx	lr

08009ebe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	22a1      	movs	r2, #161	@ 0xa1
 8009ecc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2221      	movs	r2, #33	@ 0x21
 8009ed2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2207      	movs	r2, #7
 8009ee4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	2207      	movs	r2, #7
 8009eea:	4619      	mov	r1, r3
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f001 fb14 	bl	800b51a <USBH_CtlReq>
 8009ef2:	4603      	mov	r3, r0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3708      	adds	r7, #8
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b082      	sub	sp, #8
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2221      	movs	r2, #33	@ 0x21
 8009f0a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	2220      	movs	r2, #32
 8009f10:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2207      	movs	r2, #7
 8009f22:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	2207      	movs	r2, #7
 8009f28:	4619      	mov	r1, r3
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f001 faf5 	bl	800b51a <USBH_CtlReq>
 8009f30:	4603      	mov	r3, r0
}
 8009f32:	4618      	mov	r0, r3
 8009f34:	3708      	adds	r7, #8
 8009f36:	46bd      	mov	sp, r7
 8009f38:	bd80      	pop	{r7, pc}

08009f3a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b086      	sub	sp, #24
 8009f3e:	af02      	add	r7, sp, #8
 8009f40:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009f48:	69db      	ldr	r3, [r3, #28]
 8009f4a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009f56:	2b01      	cmp	r3, #1
 8009f58:	d002      	beq.n	8009f60 <CDC_ProcessTransmission+0x26>
 8009f5a:	2b02      	cmp	r3, #2
 8009f5c:	d023      	beq.n	8009fa6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009f5e:	e05e      	b.n	800a01e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f64:	68fa      	ldr	r2, [r7, #12]
 8009f66:	8b12      	ldrh	r2, [r2, #24]
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d90b      	bls.n	8009f84 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	69d9      	ldr	r1, [r3, #28]
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	8b1a      	ldrh	r2, [r3, #24]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	7b5b      	ldrb	r3, [r3, #13]
 8009f78:	2001      	movs	r0, #1
 8009f7a:	9000      	str	r0, [sp, #0]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 fcda 	bl	800b936 <USBH_BulkSendData>
 8009f82:	e00b      	b.n	8009f9c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009f8c:	b29a      	uxth	r2, r3
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	7b5b      	ldrb	r3, [r3, #13]
 8009f92:	2001      	movs	r0, #1
 8009f94:	9000      	str	r0, [sp, #0]
 8009f96:	6878      	ldr	r0, [r7, #4]
 8009f98:	f001 fccd 	bl	800b936 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	2202      	movs	r2, #2
 8009fa0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009fa4:	e03b      	b.n	800a01e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	7b5b      	ldrb	r3, [r3, #13]
 8009faa:	4619      	mov	r1, r3
 8009fac:	6878      	ldr	r0, [r7, #4]
 8009fae:	f001 fff1 	bl	800bf94 <USBH_LL_GetURBState>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009fb6:	7afb      	ldrb	r3, [r7, #11]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d128      	bne.n	800a00e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fc0:	68fa      	ldr	r2, [r7, #12]
 8009fc2:	8b12      	ldrh	r2, [r2, #24]
 8009fc4:	4293      	cmp	r3, r2
 8009fc6:	d90e      	bls.n	8009fe6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	8b12      	ldrh	r2, [r2, #24]
 8009fd0:	1a9a      	subs	r2, r3, r2
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	69db      	ldr	r3, [r3, #28]
 8009fda:	68fa      	ldr	r2, [r7, #12]
 8009fdc:	8b12      	ldrh	r2, [r2, #24]
 8009fde:	441a      	add	r2, r3
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	61da      	str	r2, [r3, #28]
 8009fe4:	e002      	b.n	8009fec <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d004      	beq.n	8009ffe <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2201      	movs	r2, #1
 8009ff8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009ffc:	e00e      	b.n	800a01c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	2200      	movs	r2, #0
 800a002:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f000 f868 	bl	800a0dc <USBH_CDC_TransmitCallback>
      break;
 800a00c:	e006      	b.n	800a01c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800a00e:	7afb      	ldrb	r3, [r7, #11]
 800a010:	2b02      	cmp	r3, #2
 800a012:	d103      	bne.n	800a01c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800a01c:	bf00      	nop
  }
}
 800a01e:	bf00      	nop
 800a020:	3710      	adds	r7, #16
 800a022:	46bd      	mov	sp, r7
 800a024:	bd80      	pop	{r7, pc}

0800a026 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800a026:	b580      	push	{r7, lr}
 800a028:	b086      	sub	sp, #24
 800a02a:	af00      	add	r7, sp, #0
 800a02c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a034:	69db      	ldr	r3, [r3, #28]
 800a036:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a038:	2300      	movs	r3, #0
 800a03a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800a042:	2b03      	cmp	r3, #3
 800a044:	d002      	beq.n	800a04c <CDC_ProcessReception+0x26>
 800a046:	2b04      	cmp	r3, #4
 800a048:	d00e      	beq.n	800a068 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800a04a:	e043      	b.n	800a0d4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800a04c:	697b      	ldr	r3, [r7, #20]
 800a04e:	6a19      	ldr	r1, [r3, #32]
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	8b5a      	ldrh	r2, [r3, #26]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	7b1b      	ldrb	r3, [r3, #12]
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 fc91 	bl	800b980 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2204      	movs	r2, #4
 800a062:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a066:	e035      	b.n	800a0d4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800a068:	697b      	ldr	r3, [r7, #20]
 800a06a:	7b1b      	ldrb	r3, [r3, #12]
 800a06c:	4619      	mov	r1, r3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	f001 ff90 	bl	800bf94 <USBH_LL_GetURBState>
 800a074:	4603      	mov	r3, r0
 800a076:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800a078:	7cfb      	ldrb	r3, [r7, #19]
 800a07a:	2b01      	cmp	r3, #1
 800a07c:	d129      	bne.n	800a0d2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	7b1b      	ldrb	r3, [r3, #12]
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f001 fef3 	bl	800be70 <USBH_LL_GetLastXferSize>
 800a08a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800a08c:	697b      	ldr	r3, [r7, #20]
 800a08e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a090:	68fa      	ldr	r2, [r7, #12]
 800a092:	429a      	cmp	r2, r3
 800a094:	d016      	beq.n	800a0c4 <CDC_ProcessReception+0x9e>
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	8b5b      	ldrh	r3, [r3, #26]
 800a09a:	461a      	mov	r2, r3
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d110      	bne.n	800a0c4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800a0a2:	697b      	ldr	r3, [r7, #20]
 800a0a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	1ad2      	subs	r2, r2, r3
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800a0ae:	697b      	ldr	r3, [r7, #20]
 800a0b0:	6a1a      	ldr	r2, [r3, #32]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	697b      	ldr	r3, [r7, #20]
 800a0b8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800a0ba:	697b      	ldr	r3, [r7, #20]
 800a0bc:	2203      	movs	r2, #3
 800a0be:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800a0c2:	e006      	b.n	800a0d2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800a0cc:	6878      	ldr	r0, [r7, #4]
 800a0ce:	f000 f80f 	bl	800a0f0 <USBH_CDC_ReceiveCallback>
      break;
 800a0d2:	bf00      	nop
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	3718      	adds	r7, #24
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	bd80      	pop	{r7, pc}

0800a0dc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800a0dc:	b480      	push	{r7}
 800a0de:	b083      	sub	sp, #12
 800a0e0:	af00      	add	r7, sp, #0
 800a0e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0e4:	bf00      	nop
 800a0e6:	370c      	adds	r7, #12
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b083      	sub	sp, #12
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a0f8:	bf00      	nop
 800a0fa:	370c      	adds	r7, #12
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a102:	4770      	bx	lr

0800a104 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800a104:	b480      	push	{r7}
 800a106:	b083      	sub	sp, #12
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800a10c:	bf00      	nop
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	60b9      	str	r1, [r7, #8]
 800a122:	4613      	mov	r3, r2
 800a124:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d101      	bne.n	800a130 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800a12c:	2302      	movs	r3, #2
 800a12e:	e029      	b.n	800a184 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	79fa      	ldrb	r2, [r7, #7]
 800a134:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	2200      	movs	r2, #0
 800a13c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800a148:	68f8      	ldr	r0, [r7, #12]
 800a14a:	f000 f81f 	bl	800a18c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	2200      	movs	r2, #0
 800a152:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	2200      	movs	r2, #0
 800a162:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	2200      	movs	r2, #0
 800a16a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800a16e:	68bb      	ldr	r3, [r7, #8]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d003      	beq.n	800a17c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	68ba      	ldr	r2, [r7, #8]
 800a178:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800a17c:	68f8      	ldr	r0, [r7, #12]
 800a17e:	f001 fdc3 	bl	800bd08 <USBH_LL_Init>

  return USBH_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3710      	adds	r7, #16
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b084      	sub	sp, #16
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800a194:	2300      	movs	r3, #0
 800a196:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a198:	2300      	movs	r3, #0
 800a19a:	60fb      	str	r3, [r7, #12]
 800a19c:	e009      	b.n	800a1b2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800a19e:	687a      	ldr	r2, [r7, #4]
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	33e0      	adds	r3, #224	@ 0xe0
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	2200      	movs	r2, #0
 800a1aa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	3301      	adds	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	2b0f      	cmp	r3, #15
 800a1b6:	d9f2      	bls.n	800a19e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	60fb      	str	r3, [r7, #12]
 800a1bc:	e009      	b.n	800a1d2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800a1be:	687a      	ldr	r2, [r7, #4]
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	4413      	add	r3, r2
 800a1c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	60fb      	str	r3, [r7, #12]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a1d8:	d3f1      	bcc.n	800a1be <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	2240      	movs	r2, #64	@ 0x40
 800a1fe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2201      	movs	r2, #1
 800a212:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2200      	movs	r2, #0
 800a21a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	331c      	adds	r3, #28
 800a22a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a22e:	2100      	movs	r1, #0
 800a230:	4618      	mov	r0, r3
 800a232:	f002 fb0b 	bl	800c84c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a23c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a240:	2100      	movs	r1, #0
 800a242:	4618      	mov	r0, r3
 800a244:	f002 fb02 	bl	800c84c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a24e:	2212      	movs	r2, #18
 800a250:	2100      	movs	r1, #0
 800a252:	4618      	mov	r0, r3
 800a254:	f002 fafa 	bl	800c84c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a25e:	223e      	movs	r2, #62	@ 0x3e
 800a260:	2100      	movs	r1, #0
 800a262:	4618      	mov	r0, r3
 800a264:	f002 faf2 	bl	800c84c <memset>

  return USBH_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}

0800a272 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800a272:	b480      	push	{r7}
 800a274:	b085      	sub	sp, #20
 800a276:	af00      	add	r7, sp, #0
 800a278:	6078      	str	r0, [r7, #4]
 800a27a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d016      	beq.n	800a2b4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d10e      	bne.n	800a2ae <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a296:	1c59      	adds	r1, r3, #1
 800a298:	687a      	ldr	r2, [r7, #4]
 800a29a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800a29e:	687a      	ldr	r2, [r7, #4]
 800a2a0:	33de      	adds	r3, #222	@ 0xde
 800a2a2:	6839      	ldr	r1, [r7, #0]
 800a2a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	e004      	b.n	800a2b8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	73fb      	strb	r3, [r7, #15]
 800a2b2:	e001      	b.n	800a2b8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800a2b4:	2302      	movs	r3, #2
 800a2b6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800a2c6:	b480      	push	{r7}
 800a2c8:	b085      	sub	sp, #20
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	6078      	str	r0, [r7, #4]
 800a2ce:	460b      	mov	r3, r1
 800a2d0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800a2dc:	78fa      	ldrb	r2, [r7, #3]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d204      	bcs.n	800a2ec <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	78fa      	ldrb	r2, [r7, #3]
 800a2e6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800a2ea:	e001      	b.n	800a2f0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3714      	adds	r7, #20
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fc:	4770      	bx	lr

0800a2fe <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800a2fe:	b480      	push	{r7}
 800a300:	b087      	sub	sp, #28
 800a302:	af00      	add	r7, sp, #0
 800a304:	6078      	str	r0, [r7, #4]
 800a306:	4608      	mov	r0, r1
 800a308:	4611      	mov	r1, r2
 800a30a:	461a      	mov	r2, r3
 800a30c:	4603      	mov	r3, r0
 800a30e:	70fb      	strb	r3, [r7, #3]
 800a310:	460b      	mov	r3, r1
 800a312:	70bb      	strb	r3, [r7, #2]
 800a314:	4613      	mov	r3, r2
 800a316:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800a318:	2300      	movs	r3, #0
 800a31a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a31c:	2300      	movs	r3, #0
 800a31e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a326:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a328:	e025      	b.n	800a376 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800a32a:	7dfb      	ldrb	r3, [r7, #23]
 800a32c:	221a      	movs	r2, #26
 800a32e:	fb02 f303 	mul.w	r3, r2, r3
 800a332:	3308      	adds	r3, #8
 800a334:	68fa      	ldr	r2, [r7, #12]
 800a336:	4413      	add	r3, r2
 800a338:	3302      	adds	r3, #2
 800a33a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	795b      	ldrb	r3, [r3, #5]
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	429a      	cmp	r2, r3
 800a344:	d002      	beq.n	800a34c <USBH_FindInterface+0x4e>
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	2bff      	cmp	r3, #255	@ 0xff
 800a34a:	d111      	bne.n	800a370 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800a350:	78ba      	ldrb	r2, [r7, #2]
 800a352:	429a      	cmp	r2, r3
 800a354:	d002      	beq.n	800a35c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a356:	78bb      	ldrb	r3, [r7, #2]
 800a358:	2bff      	cmp	r3, #255	@ 0xff
 800a35a:	d109      	bne.n	800a370 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a35c:	693b      	ldr	r3, [r7, #16]
 800a35e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800a360:	787a      	ldrb	r2, [r7, #1]
 800a362:	429a      	cmp	r2, r3
 800a364:	d002      	beq.n	800a36c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800a366:	787b      	ldrb	r3, [r7, #1]
 800a368:	2bff      	cmp	r3, #255	@ 0xff
 800a36a:	d101      	bne.n	800a370 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800a36c:	7dfb      	ldrb	r3, [r7, #23]
 800a36e:	e006      	b.n	800a37e <USBH_FindInterface+0x80>
    }
    if_ix++;
 800a370:	7dfb      	ldrb	r3, [r7, #23]
 800a372:	3301      	adds	r3, #1
 800a374:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800a376:	7dfb      	ldrb	r3, [r7, #23]
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d9d6      	bls.n	800a32a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800a37c:	23ff      	movs	r3, #255	@ 0xff
}
 800a37e:	4618      	mov	r0, r3
 800a380:	371c      	adds	r7, #28
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800a38a:	b580      	push	{r7, lr}
 800a38c:	b082      	sub	sp, #8
 800a38e:	af00      	add	r7, sp, #0
 800a390:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f001 fcf4 	bl	800bd80 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800a398:	2101      	movs	r1, #1
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f001 fe0d 	bl	800bfba <USBH_LL_DriverVBUS>

  return USBH_OK;
 800a3a0:	2300      	movs	r3, #0
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3708      	adds	r7, #8
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
	...

0800a3ac <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b088      	sub	sp, #32
 800a3b0:	af04      	add	r7, sp, #16
 800a3b2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800a3b4:	2302      	movs	r3, #2
 800a3b6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800a3c2:	b2db      	uxtb	r3, r3
 800a3c4:	2b01      	cmp	r3, #1
 800a3c6:	d102      	bne.n	800a3ce <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	781b      	ldrb	r3, [r3, #0]
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	2b0b      	cmp	r3, #11
 800a3d6:	f200 81bb 	bhi.w	800a750 <USBH_Process+0x3a4>
 800a3da:	a201      	add	r2, pc, #4	@ (adr r2, 800a3e0 <USBH_Process+0x34>)
 800a3dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3e0:	0800a411 	.word	0x0800a411
 800a3e4:	0800a443 	.word	0x0800a443
 800a3e8:	0800a4ab 	.word	0x0800a4ab
 800a3ec:	0800a6eb 	.word	0x0800a6eb
 800a3f0:	0800a751 	.word	0x0800a751
 800a3f4:	0800a54b 	.word	0x0800a54b
 800a3f8:	0800a691 	.word	0x0800a691
 800a3fc:	0800a581 	.word	0x0800a581
 800a400:	0800a5a1 	.word	0x0800a5a1
 800a404:	0800a5bf 	.word	0x0800a5bf
 800a408:	0800a603 	.word	0x0800a603
 800a40c:	0800a6d3 	.word	0x0800a6d3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800a416:	b2db      	uxtb	r3, r3
 800a418:	2b00      	cmp	r3, #0
 800a41a:	f000 819b 	beq.w	800a754 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2201      	movs	r2, #1
 800a422:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800a424:	20c8      	movs	r0, #200	@ 0xc8
 800a426:	f001 fe12 	bl	800c04e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f001 fd05 	bl	800be3a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a440:	e188      	b.n	800a754 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800a448:	2b01      	cmp	r3, #1
 800a44a:	d107      	bne.n	800a45c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2202      	movs	r2, #2
 800a458:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a45a:	e18a      	b.n	800a772 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a462:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a466:	d914      	bls.n	800a492 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a46e:	3301      	adds	r3, #1
 800a470:	b2da      	uxtb	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800a47e:	2b03      	cmp	r3, #3
 800a480:	d903      	bls.n	800a48a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	220d      	movs	r2, #13
 800a486:	701a      	strb	r2, [r3, #0]
      break;
 800a488:	e173      	b.n	800a772 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	2200      	movs	r2, #0
 800a48e:	701a      	strb	r2, [r3, #0]
      break;
 800a490:	e16f      	b.n	800a772 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800a498:	f103 020a 	add.w	r2, r3, #10
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800a4a2:	200a      	movs	r0, #10
 800a4a4:	f001 fdd3 	bl	800c04e <USBH_Delay>
      break;
 800a4a8:	e163      	b.n	800a772 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d005      	beq.n	800a4c0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a4ba:	2104      	movs	r1, #4
 800a4bc:	6878      	ldr	r0, [r7, #4]
 800a4be:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800a4c0:	2064      	movs	r0, #100	@ 0x64
 800a4c2:	f001 fdc4 	bl	800c04e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f001 fc90 	bl	800bdec <USBH_LL_GetSpeed>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	461a      	mov	r2, r3
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	2205      	movs	r2, #5
 800a4da:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f001 fa9b 	bl	800ba1a <USBH_AllocPipe>
 800a4e4:	4603      	mov	r3, r0
 800a4e6:	461a      	mov	r2, r3
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800a4ec:	2180      	movs	r1, #128	@ 0x80
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f001 fa93 	bl	800ba1a <USBH_AllocPipe>
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	461a      	mov	r2, r3
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	7919      	ldrb	r1, [r3, #4]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a50c:	687a      	ldr	r2, [r7, #4]
 800a50e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800a510:	9202      	str	r2, [sp, #8]
 800a512:	2200      	movs	r2, #0
 800a514:	9201      	str	r2, [sp, #4]
 800a516:	9300      	str	r3, [sp, #0]
 800a518:	4603      	mov	r3, r0
 800a51a:	2280      	movs	r2, #128	@ 0x80
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f001 fa4d 	bl	800b9bc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	7959      	ldrb	r1, [r3, #5]
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800a536:	9202      	str	r2, [sp, #8]
 800a538:	2200      	movs	r2, #0
 800a53a:	9201      	str	r2, [sp, #4]
 800a53c:	9300      	str	r3, [sp, #0]
 800a53e:	4603      	mov	r3, r0
 800a540:	2200      	movs	r2, #0
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fa3a 	bl	800b9bc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a548:	e113      	b.n	800a772 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800a54a:	6878      	ldr	r0, [r7, #4]
 800a54c:	f000 f916 	bl	800a77c <USBH_HandleEnum>
 800a550:	4603      	mov	r3, r0
 800a552:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800a554:	7bbb      	ldrb	r3, [r7, #14]
 800a556:	b2db      	uxtb	r3, r3
 800a558:	2b00      	cmp	r3, #0
 800a55a:	f040 80fd 	bne.w	800a758 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	2200      	movs	r2, #0
 800a562:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800a56c:	2b01      	cmp	r3, #1
 800a56e:	d103      	bne.n	800a578 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	2208      	movs	r2, #8
 800a574:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a576:	e0ef      	b.n	800a758 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	2207      	movs	r2, #7
 800a57c:	701a      	strb	r2, [r3, #0]
      break;
 800a57e:	e0eb      	b.n	800a758 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a586:	2b00      	cmp	r3, #0
 800a588:	f000 80e8 	beq.w	800a75c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a592:	2101      	movs	r1, #1
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2208      	movs	r2, #8
 800a59c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800a59e:	e0dd      	b.n	800a75c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800a5a6:	4619      	mov	r1, r3
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fc3a 	bl	800ae22 <USBH_SetCfg>
 800a5ae:	4603      	mov	r3, r0
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	f040 80d5 	bne.w	800a760 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2209      	movs	r2, #9
 800a5ba:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5bc:	e0d0      	b.n	800a760 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800a5c4:	f003 0320 	and.w	r3, r3, #32
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d016      	beq.n	800a5fa <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fc4a 	bl	800ae68 <USBH_SetFeature>
 800a5d4:	4603      	mov	r3, r0
 800a5d6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a5d8:	7bbb      	ldrb	r3, [r7, #14]
 800a5da:	b2db      	uxtb	r3, r3
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d103      	bne.n	800a5e8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	220a      	movs	r2, #10
 800a5e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a5e6:	e0bd      	b.n	800a764 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800a5e8:	7bbb      	ldrb	r3, [r7, #14]
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	f040 80b9 	bne.w	800a764 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	220a      	movs	r2, #10
 800a5f6:	701a      	strb	r2, [r3, #0]
      break;
 800a5f8:	e0b4      	b.n	800a764 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	220a      	movs	r2, #10
 800a5fe:	701a      	strb	r2, [r3, #0]
      break;
 800a600:	e0b0      	b.n	800a764 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800a608:	2b00      	cmp	r3, #0
 800a60a:	f000 80ad 	beq.w	800a768 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2200      	movs	r2, #0
 800a612:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
 800a61a:	e016      	b.n	800a64a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a61c:	7bfa      	ldrb	r2, [r7, #15]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	32de      	adds	r2, #222	@ 0xde
 800a622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a626:	791a      	ldrb	r2, [r3, #4]
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a62e:	429a      	cmp	r2, r3
 800a630:	d108      	bne.n	800a644 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a632:	7bfa      	ldrb	r2, [r7, #15]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	32de      	adds	r2, #222	@ 0xde
 800a638:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a642:	e005      	b.n	800a650 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a644:	7bfb      	ldrb	r3, [r7, #15]
 800a646:	3301      	adds	r3, #1
 800a648:	73fb      	strb	r3, [r7, #15]
 800a64a:	7bfb      	ldrb	r3, [r7, #15]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0e5      	beq.n	800a61c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d016      	beq.n	800a688 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	4798      	blx	r3
 800a666:	4603      	mov	r3, r0
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d109      	bne.n	800a680 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	2206      	movs	r2, #6
 800a670:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a678:	2103      	movs	r1, #3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a67e:	e073      	b.n	800a768 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	220d      	movs	r2, #13
 800a684:	701a      	strb	r2, [r3, #0]
      break;
 800a686:	e06f      	b.n	800a768 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	220d      	movs	r2, #13
 800a68c:	701a      	strb	r2, [r3, #0]
      break;
 800a68e:	e06b      	b.n	800a768 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a696:	2b00      	cmp	r3, #0
 800a698:	d017      	beq.n	800a6ca <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6a0:	691b      	ldr	r3, [r3, #16]
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	4798      	blx	r3
 800a6a6:	4603      	mov	r3, r0
 800a6a8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	b2db      	uxtb	r3, r3
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d103      	bne.n	800a6ba <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	220b      	movs	r2, #11
 800a6b6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a6b8:	e058      	b.n	800a76c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800a6ba:	7bbb      	ldrb	r3, [r7, #14]
 800a6bc:	b2db      	uxtb	r3, r3
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d154      	bne.n	800a76c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	220d      	movs	r2, #13
 800a6c6:	701a      	strb	r2, [r3, #0]
      break;
 800a6c8:	e050      	b.n	800a76c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	220d      	movs	r2, #13
 800a6ce:	701a      	strb	r2, [r3, #0]
      break;
 800a6d0:	e04c      	b.n	800a76c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d049      	beq.n	800a770 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6e2:	695b      	ldr	r3, [r3, #20]
 800a6e4:	6878      	ldr	r0, [r7, #4]
 800a6e6:	4798      	blx	r3
      }
      break;
 800a6e8:	e042      	b.n	800a770 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a6f2:	6878      	ldr	r0, [r7, #4]
 800a6f4:	f7ff fd4a 	bl	800a18c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d009      	beq.n	800a716 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a708:	68db      	ldr	r3, [r3, #12]
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	2200      	movs	r2, #0
 800a712:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d005      	beq.n	800a72c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a726:	2105      	movs	r1, #5
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a732:	b2db      	uxtb	r3, r3
 800a734:	2b01      	cmp	r3, #1
 800a736:	d107      	bne.n	800a748 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a740:	6878      	ldr	r0, [r7, #4]
 800a742:	f7ff fe22 	bl	800a38a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a746:	e014      	b.n	800a772 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800a748:	6878      	ldr	r0, [r7, #4]
 800a74a:	f001 fb19 	bl	800bd80 <USBH_LL_Start>
      break;
 800a74e:	e010      	b.n	800a772 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a750:	bf00      	nop
 800a752:	e00e      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a754:	bf00      	nop
 800a756:	e00c      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a758:	bf00      	nop
 800a75a:	e00a      	b.n	800a772 <USBH_Process+0x3c6>
    break;
 800a75c:	bf00      	nop
 800a75e:	e008      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a760:	bf00      	nop
 800a762:	e006      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a764:	bf00      	nop
 800a766:	e004      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a768:	bf00      	nop
 800a76a:	e002      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a76c:	bf00      	nop
 800a76e:	e000      	b.n	800a772 <USBH_Process+0x3c6>
      break;
 800a770:	bf00      	nop
  }
  return USBH_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	3710      	adds	r7, #16
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}

0800a77c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a77c:	b580      	push	{r7, lr}
 800a77e:	b088      	sub	sp, #32
 800a780:	af04      	add	r7, sp, #16
 800a782:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a784:	2301      	movs	r3, #1
 800a786:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a788:	2301      	movs	r3, #1
 800a78a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	785b      	ldrb	r3, [r3, #1]
 800a790:	2b07      	cmp	r3, #7
 800a792:	f200 81bd 	bhi.w	800ab10 <USBH_HandleEnum+0x394>
 800a796:	a201      	add	r2, pc, #4	@ (adr r2, 800a79c <USBH_HandleEnum+0x20>)
 800a798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a79c:	0800a7bd 	.word	0x0800a7bd
 800a7a0:	0800a877 	.word	0x0800a877
 800a7a4:	0800a8e1 	.word	0x0800a8e1
 800a7a8:	0800a96b 	.word	0x0800a96b
 800a7ac:	0800a9d5 	.word	0x0800a9d5
 800a7b0:	0800aa45 	.word	0x0800aa45
 800a7b4:	0800aa8b 	.word	0x0800aa8b
 800a7b8:	0800aad1 	.word	0x0800aad1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a7bc:	2108      	movs	r1, #8
 800a7be:	6878      	ldr	r0, [r7, #4]
 800a7c0:	f000 fa4c 	bl	800ac5c <USBH_Get_DevDesc>
 800a7c4:	4603      	mov	r3, r0
 800a7c6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a7c8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d12e      	bne.n	800a82c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	7919      	ldrb	r1, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a7f2:	9202      	str	r2, [sp, #8]
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	9201      	str	r2, [sp, #4]
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2280      	movs	r2, #128	@ 0x80
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f001 f8dc 	bl	800b9bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	7959      	ldrb	r1, [r3, #5]
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a814:	687a      	ldr	r2, [r7, #4]
 800a816:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a818:	9202      	str	r2, [sp, #8]
 800a81a:	2200      	movs	r2, #0
 800a81c:	9201      	str	r2, [sp, #4]
 800a81e:	9300      	str	r3, [sp, #0]
 800a820:	4603      	mov	r3, r0
 800a822:	2200      	movs	r2, #0
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f8c9 	bl	800b9bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a82a:	e173      	b.n	800ab14 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a82c:	7bbb      	ldrb	r3, [r7, #14]
 800a82e:	2b03      	cmp	r3, #3
 800a830:	f040 8170 	bne.w	800ab14 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a83a:	3301      	adds	r3, #1
 800a83c:	b2da      	uxtb	r2, r3
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d903      	bls.n	800a856 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	220d      	movs	r2, #13
 800a852:	701a      	strb	r2, [r3, #0]
      break;
 800a854:	e15e      	b.n	800ab14 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	795b      	ldrb	r3, [r3, #5]
 800a85a:	4619      	mov	r1, r3
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f001 f8fd 	bl	800ba5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	791b      	ldrb	r3, [r3, #4]
 800a866:	4619      	mov	r1, r3
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 f8f7 	bl	800ba5c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	701a      	strb	r2, [r3, #0]
      break;
 800a874:	e14e      	b.n	800ab14 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a876:	2112      	movs	r1, #18
 800a878:	6878      	ldr	r0, [r7, #4]
 800a87a:	f000 f9ef 	bl	800ac5c <USBH_Get_DevDesc>
 800a87e:	4603      	mov	r3, r0
 800a880:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a882:	7bbb      	ldrb	r3, [r7, #14]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d103      	bne.n	800a890 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	2202      	movs	r2, #2
 800a88c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a88e:	e143      	b.n	800ab18 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a890:	7bbb      	ldrb	r3, [r7, #14]
 800a892:	2b03      	cmp	r3, #3
 800a894:	f040 8140 	bne.w	800ab18 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a89e:	3301      	adds	r3, #1
 800a8a0:	b2da      	uxtb	r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a8ae:	2b03      	cmp	r3, #3
 800a8b0:	d903      	bls.n	800a8ba <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	220d      	movs	r2, #13
 800a8b6:	701a      	strb	r2, [r3, #0]
      break;
 800a8b8:	e12e      	b.n	800ab18 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	795b      	ldrb	r3, [r3, #5]
 800a8be:	4619      	mov	r1, r3
 800a8c0:	6878      	ldr	r0, [r7, #4]
 800a8c2:	f001 f8cb 	bl	800ba5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	791b      	ldrb	r3, [r3, #4]
 800a8ca:	4619      	mov	r1, r3
 800a8cc:	6878      	ldr	r0, [r7, #4]
 800a8ce:	f001 f8c5 	bl	800ba5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	701a      	strb	r2, [r3, #0]
      break;
 800a8de:	e11b      	b.n	800ab18 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a8e0:	2101      	movs	r1, #1
 800a8e2:	6878      	ldr	r0, [r7, #4]
 800a8e4:	f000 fa79 	bl	800adda <USBH_SetAddress>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a8ec:	7bbb      	ldrb	r3, [r7, #14]
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d130      	bne.n	800a954 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a8f2:	2002      	movs	r0, #2
 800a8f4:	f001 fbab 	bl	800c04e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2203      	movs	r2, #3
 800a904:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	7919      	ldrb	r1, [r3, #4]
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a91a:	9202      	str	r2, [sp, #8]
 800a91c:	2200      	movs	r2, #0
 800a91e:	9201      	str	r2, [sp, #4]
 800a920:	9300      	str	r3, [sp, #0]
 800a922:	4603      	mov	r3, r0
 800a924:	2280      	movs	r2, #128	@ 0x80
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f001 f848 	bl	800b9bc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	7959      	ldrb	r1, [r3, #5]
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a940:	9202      	str	r2, [sp, #8]
 800a942:	2200      	movs	r2, #0
 800a944:	9201      	str	r2, [sp, #4]
 800a946:	9300      	str	r3, [sp, #0]
 800a948:	4603      	mov	r3, r0
 800a94a:	2200      	movs	r2, #0
 800a94c:	6878      	ldr	r0, [r7, #4]
 800a94e:	f001 f835 	bl	800b9bc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a952:	e0e3      	b.n	800ab1c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a954:	7bbb      	ldrb	r3, [r7, #14]
 800a956:	2b03      	cmp	r3, #3
 800a958:	f040 80e0 	bne.w	800ab1c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	220d      	movs	r2, #13
 800a960:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2200      	movs	r2, #0
 800a966:	705a      	strb	r2, [r3, #1]
      break;
 800a968:	e0d8      	b.n	800ab1c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a96a:	2109      	movs	r1, #9
 800a96c:	6878      	ldr	r0, [r7, #4]
 800a96e:	f000 f9a1 	bl	800acb4 <USBH_Get_CfgDesc>
 800a972:	4603      	mov	r3, r0
 800a974:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a976:	7bbb      	ldrb	r3, [r7, #14]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d103      	bne.n	800a984 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2204      	movs	r2, #4
 800a980:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a982:	e0cd      	b.n	800ab20 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a984:	7bbb      	ldrb	r3, [r7, #14]
 800a986:	2b03      	cmp	r3, #3
 800a988:	f040 80ca 	bne.w	800ab20 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a992:	3301      	adds	r3, #1
 800a994:	b2da      	uxtb	r2, r3
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a9a2:	2b03      	cmp	r3, #3
 800a9a4:	d903      	bls.n	800a9ae <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	220d      	movs	r2, #13
 800a9aa:	701a      	strb	r2, [r3, #0]
      break;
 800a9ac:	e0b8      	b.n	800ab20 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	795b      	ldrb	r3, [r3, #5]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f001 f851 	bl	800ba5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	791b      	ldrb	r3, [r3, #4]
 800a9be:	4619      	mov	r1, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 f84b 	bl	800ba5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	701a      	strb	r2, [r3, #0]
      break;
 800a9d2:	e0a5      	b.n	800ab20 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a9da:	4619      	mov	r1, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f000 f969 	bl	800acb4 <USBH_Get_CfgDesc>
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a9e6:	7bbb      	ldrb	r3, [r7, #14]
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d103      	bne.n	800a9f4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2205      	movs	r2, #5
 800a9f0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a9f2:	e097      	b.n	800ab24 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	2b03      	cmp	r3, #3
 800a9f8:	f040 8094 	bne.w	800ab24 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa02:	3301      	adds	r3, #1
 800aa04:	b2da      	uxtb	r2, r3
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800aa12:	2b03      	cmp	r3, #3
 800aa14:	d903      	bls.n	800aa1e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	220d      	movs	r2, #13
 800aa1a:	701a      	strb	r2, [r3, #0]
      break;
 800aa1c:	e082      	b.n	800ab24 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	795b      	ldrb	r3, [r3, #5]
 800aa22:	4619      	mov	r1, r3
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 f819 	bl	800ba5c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	791b      	ldrb	r3, [r3, #4]
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f001 f813 	bl	800ba5c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	2200      	movs	r2, #0
 800aa3a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	2200      	movs	r2, #0
 800aa40:	701a      	strb	r2, [r3, #0]
      break;
 800aa42:	e06f      	b.n	800ab24 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d019      	beq.n	800aa82 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800aa5a:	23ff      	movs	r3, #255	@ 0xff
 800aa5c:	6878      	ldr	r0, [r7, #4]
 800aa5e:	f000 f953 	bl	800ad08 <USBH_Get_StringDesc>
 800aa62:	4603      	mov	r3, r0
 800aa64:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aa66:	7bbb      	ldrb	r3, [r7, #14]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d103      	bne.n	800aa74 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	2206      	movs	r2, #6
 800aa70:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aa72:	e059      	b.n	800ab28 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	2b03      	cmp	r3, #3
 800aa78:	d156      	bne.n	800ab28 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2206      	movs	r2, #6
 800aa7e:	705a      	strb	r2, [r3, #1]
      break;
 800aa80:	e052      	b.n	800ab28 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2206      	movs	r2, #6
 800aa86:	705a      	strb	r2, [r3, #1]
      break;
 800aa88:	e04e      	b.n	800ab28 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d019      	beq.n	800aac8 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800aaa0:	23ff      	movs	r3, #255	@ 0xff
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f000 f930 	bl	800ad08 <USBH_Get_StringDesc>
 800aaa8:	4603      	mov	r3, r0
 800aaaa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaac:	7bbb      	ldrb	r3, [r7, #14]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d103      	bne.n	800aaba <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2207      	movs	r2, #7
 800aab6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800aab8:	e038      	b.n	800ab2c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b03      	cmp	r3, #3
 800aabe:	d135      	bne.n	800ab2c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	2207      	movs	r2, #7
 800aac4:	705a      	strb	r2, [r3, #1]
      break;
 800aac6:	e031      	b.n	800ab2c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	2207      	movs	r2, #7
 800aacc:	705a      	strb	r2, [r3, #1]
      break;
 800aace:	e02d      	b.n	800ab2c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d017      	beq.n	800ab0a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800aae6:	23ff      	movs	r3, #255	@ 0xff
 800aae8:	6878      	ldr	r0, [r7, #4]
 800aaea:	f000 f90d 	bl	800ad08 <USBH_Get_StringDesc>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800aaf2:	7bbb      	ldrb	r3, [r7, #14]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d102      	bne.n	800aafe <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800aafc:	e018      	b.n	800ab30 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800aafe:	7bbb      	ldrb	r3, [r7, #14]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d115      	bne.n	800ab30 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800ab04:	2300      	movs	r3, #0
 800ab06:	73fb      	strb	r3, [r7, #15]
      break;
 800ab08:	e012      	b.n	800ab30 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800ab0a:	2300      	movs	r3, #0
 800ab0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab0e:	e00f      	b.n	800ab30 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800ab10:	bf00      	nop
 800ab12:	e00e      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab14:	bf00      	nop
 800ab16:	e00c      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab18:	bf00      	nop
 800ab1a:	e00a      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab1c:	bf00      	nop
 800ab1e:	e008      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab20:	bf00      	nop
 800ab22:	e006      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab24:	bf00      	nop
 800ab26:	e004      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab28:	bf00      	nop
 800ab2a:	e002      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab2c:	bf00      	nop
 800ab2e:	e000      	b.n	800ab32 <USBH_HandleEnum+0x3b6>
      break;
 800ab30:	bf00      	nop
  }
  return Status;
 800ab32:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3710      	adds	r7, #16
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	b083      	sub	sp, #12
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ab4e:	bf00      	nop
 800ab50:	370c      	adds	r7, #12
 800ab52:	46bd      	mov	sp, r7
 800ab54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab58:	4770      	bx	lr

0800ab5a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ab5a:	b580      	push	{r7, lr}
 800ab5c:	b082      	sub	sp, #8
 800ab5e:	af00      	add	r7, sp, #0
 800ab60:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ab70:	6878      	ldr	r0, [r7, #4]
 800ab72:	f000 f804 	bl	800ab7e <USBH_HandleSof>
}
 800ab76:	bf00      	nop
 800ab78:	3708      	adds	r7, #8
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b082      	sub	sp, #8
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	781b      	ldrb	r3, [r3, #0]
 800ab8a:	b2db      	uxtb	r3, r3
 800ab8c:	2b0b      	cmp	r3, #11
 800ab8e:	d10a      	bne.n	800aba6 <USBH_HandleSof+0x28>
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d005      	beq.n	800aba6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800aba0:	699b      	ldr	r3, [r3, #24]
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	4798      	blx	r3
  }
}
 800aba6:	bf00      	nop
 800aba8:	3708      	adds	r7, #8
 800abaa:	46bd      	mov	sp, r7
 800abac:	bd80      	pop	{r7, pc}

0800abae <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800abae:	b480      	push	{r7}
 800abb0:	b083      	sub	sp, #12
 800abb2:	af00      	add	r7, sp, #0
 800abb4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800abbe:	bf00      	nop
}
 800abc0:	370c      	adds	r7, #12
 800abc2:	46bd      	mov	sp, r7
 800abc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc8:	4770      	bx	lr

0800abca <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800abca:	b480      	push	{r7}
 800abcc:	b083      	sub	sp, #12
 800abce:	af00      	add	r7, sp, #0
 800abd0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	2200      	movs	r2, #0
 800abd6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800abda:	bf00      	nop
}
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2201      	movs	r2, #1
 800abf2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	2200      	movs	r2, #0
 800abfa:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	2200      	movs	r2, #0
 800ac02:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ac06:	2300      	movs	r3, #0
}
 800ac08:	4618      	mov	r0, r3
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	2200      	movs	r2, #0
 800ac28:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f001 f8be 	bl	800bdb6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	791b      	ldrb	r3, [r3, #4]
 800ac3e:	4619      	mov	r1, r3
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 ff0b 	bl	800ba5c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	795b      	ldrb	r3, [r3, #5]
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	6878      	ldr	r0, [r7, #4]
 800ac4e:	f000 ff05 	bl	800ba5c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3708      	adds	r7, #8
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af02      	add	r7, sp, #8
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	460b      	mov	r3, r1
 800ac66:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800ac68:	887b      	ldrh	r3, [r7, #2]
 800ac6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac6e:	d901      	bls.n	800ac74 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ac70:	2303      	movs	r3, #3
 800ac72:	e01b      	b.n	800acac <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ac7a:	887b      	ldrh	r3, [r7, #2]
 800ac7c:	9300      	str	r3, [sp, #0]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ac84:	2100      	movs	r1, #0
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f872 	bl	800ad70 <USBH_GetDescriptor>
 800ac8c:	4603      	mov	r3, r0
 800ac8e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800ac90:	7bfb      	ldrb	r3, [r7, #15]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d109      	bne.n	800acaa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ac9c:	887a      	ldrh	r2, [r7, #2]
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f929 	bl	800aef8 <USBH_ParseDevDesc>
 800aca6:	4603      	mov	r3, r0
 800aca8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b086      	sub	sp, #24
 800acb8:	af02      	add	r7, sp, #8
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	460b      	mov	r3, r1
 800acbe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	331c      	adds	r3, #28
 800acc4:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800acc6:	887b      	ldrh	r3, [r7, #2]
 800acc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800accc:	d901      	bls.n	800acd2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800acce:	2303      	movs	r3, #3
 800acd0:	e016      	b.n	800ad00 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800acd2:	887b      	ldrh	r3, [r7, #2]
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800acdc:	2100      	movs	r1, #0
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f000 f846 	bl	800ad70 <USBH_GetDescriptor>
 800ace4:	4603      	mov	r3, r0
 800ace6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800ace8:	7bfb      	ldrb	r3, [r7, #15]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d107      	bne.n	800acfe <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800acee:	887b      	ldrh	r3, [r7, #2]
 800acf0:	461a      	mov	r2, r3
 800acf2:	68b9      	ldr	r1, [r7, #8]
 800acf4:	6878      	ldr	r0, [r7, #4]
 800acf6:	f000 f9af 	bl	800b058 <USBH_ParseCfgDesc>
 800acfa:	4603      	mov	r3, r0
 800acfc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800acfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad00:	4618      	mov	r0, r3
 800ad02:	3710      	adds	r7, #16
 800ad04:	46bd      	mov	sp, r7
 800ad06:	bd80      	pop	{r7, pc}

0800ad08 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800ad08:	b580      	push	{r7, lr}
 800ad0a:	b088      	sub	sp, #32
 800ad0c:	af02      	add	r7, sp, #8
 800ad0e:	60f8      	str	r0, [r7, #12]
 800ad10:	607a      	str	r2, [r7, #4]
 800ad12:	461a      	mov	r2, r3
 800ad14:	460b      	mov	r3, r1
 800ad16:	72fb      	strb	r3, [r7, #11]
 800ad18:	4613      	mov	r3, r2
 800ad1a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800ad1c:	893b      	ldrh	r3, [r7, #8]
 800ad1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad22:	d802      	bhi.n	800ad2a <USBH_Get_StringDesc+0x22>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d101      	bne.n	800ad2e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800ad2a:	2303      	movs	r3, #3
 800ad2c:	e01c      	b.n	800ad68 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800ad2e:	7afb      	ldrb	r3, [r7, #11]
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800ad36:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800ad3e:	893b      	ldrh	r3, [r7, #8]
 800ad40:	9300      	str	r3, [sp, #0]
 800ad42:	460b      	mov	r3, r1
 800ad44:	2100      	movs	r1, #0
 800ad46:	68f8      	ldr	r0, [r7, #12]
 800ad48:	f000 f812 	bl	800ad70 <USBH_GetDescriptor>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ad50:	7dfb      	ldrb	r3, [r7, #23]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d107      	bne.n	800ad66 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ad5c:	893a      	ldrh	r2, [r7, #8]
 800ad5e:	6879      	ldr	r1, [r7, #4]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f000 fb8d 	bl	800b480 <USBH_ParseStringDesc>
  }

  return status;
 800ad66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3718      	adds	r7, #24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	60f8      	str	r0, [r7, #12]
 800ad78:	607b      	str	r3, [r7, #4]
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	72fb      	strb	r3, [r7, #11]
 800ad7e:	4613      	mov	r3, r2
 800ad80:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	789b      	ldrb	r3, [r3, #2]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d11c      	bne.n	800adc4 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ad8a:	7afb      	ldrb	r3, [r7, #11]
 800ad8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad90:	b2da      	uxtb	r2, r3
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2206      	movs	r2, #6
 800ad9a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	893a      	ldrh	r2, [r7, #8]
 800ada0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ada2:	893b      	ldrh	r3, [r7, #8]
 800ada4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ada8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800adac:	d104      	bne.n	800adb8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	f240 4209 	movw	r2, #1033	@ 0x409
 800adb4:	829a      	strh	r2, [r3, #20]
 800adb6:	e002      	b.n	800adbe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	8b3a      	ldrh	r2, [r7, #24]
 800adc2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800adc4:	8b3b      	ldrh	r3, [r7, #24]
 800adc6:	461a      	mov	r2, r3
 800adc8:	6879      	ldr	r1, [r7, #4]
 800adca:	68f8      	ldr	r0, [r7, #12]
 800adcc:	f000 fba5 	bl	800b51a <USBH_CtlReq>
 800add0:	4603      	mov	r3, r0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3710      	adds	r7, #16
 800add6:	46bd      	mov	sp, r7
 800add8:	bd80      	pop	{r7, pc}

0800adda <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800adda:	b580      	push	{r7, lr}
 800addc:	b082      	sub	sp, #8
 800adde:	af00      	add	r7, sp, #0
 800ade0:	6078      	str	r0, [r7, #4]
 800ade2:	460b      	mov	r3, r1
 800ade4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	789b      	ldrb	r3, [r3, #2]
 800adea:	2b01      	cmp	r3, #1
 800adec:	d10f      	bne.n	800ae0e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	2200      	movs	r2, #0
 800adf2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2205      	movs	r2, #5
 800adf8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	b29a      	uxth	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae0e:	2200      	movs	r2, #0
 800ae10:	2100      	movs	r1, #0
 800ae12:	6878      	ldr	r0, [r7, #4]
 800ae14:	f000 fb81 	bl	800b51a <USBH_CtlReq>
 800ae18:	4603      	mov	r3, r0
}
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	3708      	adds	r7, #8
 800ae1e:	46bd      	mov	sp, r7
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b082      	sub	sp, #8
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	460b      	mov	r3, r1
 800ae2c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	789b      	ldrb	r3, [r3, #2]
 800ae32:	2b01      	cmp	r3, #1
 800ae34:	d10e      	bne.n	800ae54 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	2200      	movs	r2, #0
 800ae3a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2209      	movs	r2, #9
 800ae40:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	887a      	ldrh	r2, [r7, #2]
 800ae46:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	2200      	movs	r2, #0
 800ae52:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae54:	2200      	movs	r2, #0
 800ae56:	2100      	movs	r1, #0
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f000 fb5e 	bl	800b51a <USBH_CtlReq>
 800ae5e:	4603      	mov	r3, r0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}

0800ae68 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b082      	sub	sp, #8
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	789b      	ldrb	r3, [r3, #2]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d10f      	bne.n	800ae9c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	2200      	movs	r2, #0
 800ae80:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2203      	movs	r2, #3
 800ae86:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800ae88:	78fb      	ldrb	r3, [r7, #3]
 800ae8a:	b29a      	uxth	r2, r3
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2200      	movs	r2, #0
 800ae94:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	2200      	movs	r2, #0
 800ae9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ae9c:	2200      	movs	r2, #0
 800ae9e:	2100      	movs	r1, #0
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fb3a 	bl	800b51a <USBH_CtlReq>
 800aea6:	4603      	mov	r3, r0
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b082      	sub	sp, #8
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
 800aeb8:	460b      	mov	r3, r1
 800aeba:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	789b      	ldrb	r3, [r3, #2]
 800aec0:	2b01      	cmp	r3, #1
 800aec2:	d10f      	bne.n	800aee4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	2201      	movs	r2, #1
 800aece:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800aed6:	78fb      	ldrb	r3, [r7, #3]
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	2200      	movs	r2, #0
 800aee2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800aee4:	2200      	movs	r2, #0
 800aee6:	2100      	movs	r1, #0
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fb16 	bl	800b51a <USBH_CtlReq>
 800aeee:	4603      	mov	r3, r0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3708      	adds	r7, #8
 800aef4:	46bd      	mov	sp, r7
 800aef6:	bd80      	pop	{r7, pc}

0800aef8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800af0c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800af0e:	2300      	movs	r3, #0
 800af10:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800af12:	68bb      	ldr	r3, [r7, #8]
 800af14:	2b00      	cmp	r3, #0
 800af16:	d101      	bne.n	800af1c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800af18:	2302      	movs	r3, #2
 800af1a:	e094      	b.n	800b046 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800af1c:	68bb      	ldr	r3, [r7, #8]
 800af1e:	781a      	ldrb	r2, [r3, #0]
 800af20:	693b      	ldr	r3, [r7, #16]
 800af22:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	785a      	ldrb	r2, [r3, #1]
 800af28:	693b      	ldr	r3, [r7, #16]
 800af2a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800af2c:	68bb      	ldr	r3, [r7, #8]
 800af2e:	3302      	adds	r3, #2
 800af30:	781b      	ldrb	r3, [r3, #0]
 800af32:	461a      	mov	r2, r3
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	3303      	adds	r3, #3
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	021b      	lsls	r3, r3, #8
 800af3c:	b29b      	uxth	r3, r3
 800af3e:	4313      	orrs	r3, r2
 800af40:	b29a      	uxth	r2, r3
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800af46:	68bb      	ldr	r3, [r7, #8]
 800af48:	791a      	ldrb	r2, [r3, #4]
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	795a      	ldrb	r2, [r3, #5]
 800af52:	693b      	ldr	r3, [r7, #16]
 800af54:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	799a      	ldrb	r2, [r3, #6]
 800af5a:	693b      	ldr	r3, [r7, #16]
 800af5c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800af5e:	68bb      	ldr	r3, [r7, #8]
 800af60:	79da      	ldrb	r2, [r3, #7]
 800af62:	693b      	ldr	r3, [r7, #16]
 800af64:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d004      	beq.n	800af7a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800af76:	2b01      	cmp	r3, #1
 800af78:	d11b      	bne.n	800afb2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	79db      	ldrb	r3, [r3, #7]
 800af7e:	2b20      	cmp	r3, #32
 800af80:	dc0f      	bgt.n	800afa2 <USBH_ParseDevDesc+0xaa>
 800af82:	2b08      	cmp	r3, #8
 800af84:	db0f      	blt.n	800afa6 <USBH_ParseDevDesc+0xae>
 800af86:	3b08      	subs	r3, #8
 800af88:	4a32      	ldr	r2, [pc, #200]	@ (800b054 <USBH_ParseDevDesc+0x15c>)
 800af8a:	fa22 f303 	lsr.w	r3, r2, r3
 800af8e:	f003 0301 	and.w	r3, r3, #1
 800af92:	2b00      	cmp	r3, #0
 800af94:	bf14      	ite	ne
 800af96:	2301      	movne	r3, #1
 800af98:	2300      	moveq	r3, #0
 800af9a:	b2db      	uxtb	r3, r3
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d106      	bne.n	800afae <USBH_ParseDevDesc+0xb6>
 800afa0:	e001      	b.n	800afa6 <USBH_ParseDevDesc+0xae>
 800afa2:	2b40      	cmp	r3, #64	@ 0x40
 800afa4:	d003      	beq.n	800afae <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	2208      	movs	r2, #8
 800afaa:	71da      	strb	r2, [r3, #7]
        break;
 800afac:	e000      	b.n	800afb0 <USBH_ParseDevDesc+0xb8>
        break;
 800afae:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800afb0:	e00e      	b.n	800afd0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800afb8:	2b02      	cmp	r3, #2
 800afba:	d107      	bne.n	800afcc <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	79db      	ldrb	r3, [r3, #7]
 800afc0:	2b08      	cmp	r3, #8
 800afc2:	d005      	beq.n	800afd0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	2208      	movs	r2, #8
 800afc8:	71da      	strb	r2, [r3, #7]
 800afca:	e001      	b.n	800afd0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800afcc:	2303      	movs	r3, #3
 800afce:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800afd0:	88fb      	ldrh	r3, [r7, #6]
 800afd2:	2b08      	cmp	r3, #8
 800afd4:	d936      	bls.n	800b044 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	3308      	adds	r3, #8
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	461a      	mov	r2, r3
 800afde:	68bb      	ldr	r3, [r7, #8]
 800afe0:	3309      	adds	r3, #9
 800afe2:	781b      	ldrb	r3, [r3, #0]
 800afe4:	021b      	lsls	r3, r3, #8
 800afe6:	b29b      	uxth	r3, r3
 800afe8:	4313      	orrs	r3, r2
 800afea:	b29a      	uxth	r2, r3
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	330a      	adds	r3, #10
 800aff4:	781b      	ldrb	r3, [r3, #0]
 800aff6:	461a      	mov	r2, r3
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	330b      	adds	r3, #11
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	021b      	lsls	r3, r3, #8
 800b000:	b29b      	uxth	r3, r3
 800b002:	4313      	orrs	r3, r2
 800b004:	b29a      	uxth	r2, r3
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800b00a:	68bb      	ldr	r3, [r7, #8]
 800b00c:	330c      	adds	r3, #12
 800b00e:	781b      	ldrb	r3, [r3, #0]
 800b010:	461a      	mov	r2, r3
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	330d      	adds	r3, #13
 800b016:	781b      	ldrb	r3, [r3, #0]
 800b018:	021b      	lsls	r3, r3, #8
 800b01a:	b29b      	uxth	r3, r3
 800b01c:	4313      	orrs	r3, r2
 800b01e:	b29a      	uxth	r2, r3
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800b024:	68bb      	ldr	r3, [r7, #8]
 800b026:	7b9a      	ldrb	r2, [r3, #14]
 800b028:	693b      	ldr	r3, [r7, #16]
 800b02a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	7bda      	ldrb	r2, [r3, #15]
 800b030:	693b      	ldr	r3, [r7, #16]
 800b032:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	7c1a      	ldrb	r2, [r3, #16]
 800b038:	693b      	ldr	r3, [r7, #16]
 800b03a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	7c5a      	ldrb	r2, [r3, #17]
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800b044:	7dfb      	ldrb	r3, [r7, #23]
}
 800b046:	4618      	mov	r0, r3
 800b048:	371c      	adds	r7, #28
 800b04a:	46bd      	mov	sp, r7
 800b04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop
 800b054:	01000101 	.word	0x01000101

0800b058 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08c      	sub	sp, #48	@ 0x30
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	60f8      	str	r0, [r7, #12]
 800b060:	60b9      	str	r1, [r7, #8]
 800b062:	4613      	mov	r3, r2
 800b064:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b06c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800b06e:	2300      	movs	r3, #0
 800b070:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800b074:	2300      	movs	r3, #0
 800b076:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800b07a:	2300      	movs	r3, #0
 800b07c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800b080:	68bb      	ldr	r3, [r7, #8]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d101      	bne.n	800b08a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800b086:	2302      	movs	r3, #2
 800b088:	e0da      	b.n	800b240 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800b08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	2b09      	cmp	r3, #9
 800b094:	d002      	beq.n	800b09c <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800b096:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b098:	2209      	movs	r2, #9
 800b09a:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	781a      	ldrb	r2, [r3, #0]
 800b0a0:	6a3b      	ldr	r3, [r7, #32]
 800b0a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	785a      	ldrb	r2, [r3, #1]
 800b0a8:	6a3b      	ldr	r3, [r7, #32]
 800b0aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3302      	adds	r3, #2
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	461a      	mov	r2, r3
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	3303      	adds	r3, #3
 800b0b8:	781b      	ldrb	r3, [r3, #0]
 800b0ba:	021b      	lsls	r3, r3, #8
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	4313      	orrs	r3, r2
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0c6:	bf28      	it	cs
 800b0c8:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800b0cc:	b29a      	uxth	r2, r3
 800b0ce:	6a3b      	ldr	r3, [r7, #32]
 800b0d0:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800b0d2:	68bb      	ldr	r3, [r7, #8]
 800b0d4:	791a      	ldrb	r2, [r3, #4]
 800b0d6:	6a3b      	ldr	r3, [r7, #32]
 800b0d8:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	795a      	ldrb	r2, [r3, #5]
 800b0de:	6a3b      	ldr	r3, [r7, #32]
 800b0e0:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	799a      	ldrb	r2, [r3, #6]
 800b0e6:	6a3b      	ldr	r3, [r7, #32]
 800b0e8:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	79da      	ldrb	r2, [r3, #7]
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	7a1a      	ldrb	r2, [r3, #8]
 800b0f6:	6a3b      	ldr	r3, [r7, #32]
 800b0f8:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800b0fa:	88fb      	ldrh	r3, [r7, #6]
 800b0fc:	2b09      	cmp	r3, #9
 800b0fe:	f240 809d 	bls.w	800b23c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800b102:	2309      	movs	r3, #9
 800b104:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b106:	2300      	movs	r3, #0
 800b108:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b10a:	e081      	b.n	800b210 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b10c:	f107 0316 	add.w	r3, r7, #22
 800b110:	4619      	mov	r1, r3
 800b112:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b114:	f000 f9e7 	bl	800b4e6 <USBH_GetNextDesc>
 800b118:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800b11a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b11c:	785b      	ldrb	r3, [r3, #1]
 800b11e:	2b04      	cmp	r3, #4
 800b120:	d176      	bne.n	800b210 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800b122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	2b09      	cmp	r3, #9
 800b128:	d002      	beq.n	800b130 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800b12a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b12c:	2209      	movs	r2, #9
 800b12e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800b130:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b134:	221a      	movs	r2, #26
 800b136:	fb02 f303 	mul.w	r3, r2, r3
 800b13a:	3308      	adds	r3, #8
 800b13c:	6a3a      	ldr	r2, [r7, #32]
 800b13e:	4413      	add	r3, r2
 800b140:	3302      	adds	r3, #2
 800b142:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800b144:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b146:	69f8      	ldr	r0, [r7, #28]
 800b148:	f000 f87e 	bl	800b248 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800b14c:	2300      	movs	r3, #0
 800b14e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800b152:	2300      	movs	r3, #0
 800b154:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b156:	e043      	b.n	800b1e0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800b158:	f107 0316 	add.w	r3, r7, #22
 800b15c:	4619      	mov	r1, r3
 800b15e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b160:	f000 f9c1 	bl	800b4e6 <USBH_GetNextDesc>
 800b164:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b168:	785b      	ldrb	r3, [r3, #1]
 800b16a:	2b05      	cmp	r3, #5
 800b16c:	d138      	bne.n	800b1e0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800b16e:	69fb      	ldr	r3, [r7, #28]
 800b170:	795b      	ldrb	r3, [r3, #5]
 800b172:	2b01      	cmp	r3, #1
 800b174:	d113      	bne.n	800b19e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b176:	69fb      	ldr	r3, [r7, #28]
 800b178:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800b17a:	2b02      	cmp	r3, #2
 800b17c:	d003      	beq.n	800b186 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800b17e:	69fb      	ldr	r3, [r7, #28]
 800b180:	799b      	ldrb	r3, [r3, #6]
 800b182:	2b03      	cmp	r3, #3
 800b184:	d10b      	bne.n	800b19e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b186:	69fb      	ldr	r3, [r7, #28]
 800b188:	79db      	ldrb	r3, [r3, #7]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10b      	bne.n	800b1a6 <USBH_ParseCfgDesc+0x14e>
 800b18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	2b09      	cmp	r3, #9
 800b194:	d007      	beq.n	800b1a6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800b196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b198:	2209      	movs	r2, #9
 800b19a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b19c:	e003      	b.n	800b1a6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800b19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1a0:	2207      	movs	r2, #7
 800b1a2:	701a      	strb	r2, [r3, #0]
 800b1a4:	e000      	b.n	800b1a8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800b1a6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800b1a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b1ac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1b0:	3201      	adds	r2, #1
 800b1b2:	00d2      	lsls	r2, r2, #3
 800b1b4:	211a      	movs	r1, #26
 800b1b6:	fb01 f303 	mul.w	r3, r1, r3
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3308      	adds	r3, #8
 800b1be:	6a3a      	ldr	r2, [r7, #32]
 800b1c0:	4413      	add	r3, r2
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800b1c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1c8:	69b9      	ldr	r1, [r7, #24]
 800b1ca:	68f8      	ldr	r0, [r7, #12]
 800b1cc:	f000 f870 	bl	800b2b0 <USBH_ParseEPDesc>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800b1d6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800b1da:	3301      	adds	r3, #1
 800b1dc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	791b      	ldrb	r3, [r3, #4]
 800b1e4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d204      	bcs.n	800b1f6 <USBH_ParseCfgDesc+0x19e>
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	885a      	ldrh	r2, [r3, #2]
 800b1f0:	8afb      	ldrh	r3, [r7, #22]
 800b1f2:	429a      	cmp	r2, r3
 800b1f4:	d8b0      	bhi.n	800b158 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800b1f6:	69fb      	ldr	r3, [r7, #28]
 800b1f8:	791b      	ldrb	r3, [r3, #4]
 800b1fa:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800b1fe:	429a      	cmp	r2, r3
 800b200:	d201      	bcs.n	800b206 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800b202:	2303      	movs	r3, #3
 800b204:	e01c      	b.n	800b240 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800b206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b20a:	3301      	adds	r3, #1
 800b20c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800b210:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b214:	2b01      	cmp	r3, #1
 800b216:	d805      	bhi.n	800b224 <USBH_ParseCfgDesc+0x1cc>
 800b218:	6a3b      	ldr	r3, [r7, #32]
 800b21a:	885a      	ldrh	r2, [r3, #2]
 800b21c:	8afb      	ldrh	r3, [r7, #22]
 800b21e:	429a      	cmp	r2, r3
 800b220:	f63f af74 	bhi.w	800b10c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	791b      	ldrb	r3, [r3, #4]
 800b228:	2b02      	cmp	r3, #2
 800b22a:	bf28      	it	cs
 800b22c:	2302      	movcs	r3, #2
 800b22e:	b2db      	uxtb	r3, r3
 800b230:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b234:	429a      	cmp	r2, r3
 800b236:	d201      	bcs.n	800b23c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800b238:	2303      	movs	r3, #3
 800b23a:	e001      	b.n	800b240 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800b23c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800b240:	4618      	mov	r0, r3
 800b242:	3730      	adds	r7, #48	@ 0x30
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800b248:	b480      	push	{r7}
 800b24a:	b083      	sub	sp, #12
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
 800b250:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800b252:	683b      	ldr	r3, [r7, #0]
 800b254:	781a      	ldrb	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800b25a:	683b      	ldr	r3, [r7, #0]
 800b25c:	785a      	ldrb	r2, [r3, #1]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800b262:	683b      	ldr	r3, [r7, #0]
 800b264:	789a      	ldrb	r2, [r3, #2]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	78da      	ldrb	r2, [r3, #3]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	3304      	adds	r3, #4
 800b276:	781b      	ldrb	r3, [r3, #0]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	bf28      	it	cs
 800b27c:	2302      	movcs	r3, #2
 800b27e:	b2da      	uxtb	r2, r3
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800b284:	683b      	ldr	r3, [r7, #0]
 800b286:	795a      	ldrb	r2, [r3, #5]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	799a      	ldrb	r2, [r3, #6]
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	79da      	ldrb	r2, [r3, #7]
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	7a1a      	ldrb	r2, [r3, #8]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	721a      	strb	r2, [r3, #8]
}
 800b2a4:	bf00      	nop
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr

0800b2b0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b087      	sub	sp, #28
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	781a      	ldrb	r2, [r3, #0]
 800b2c4:	68bb      	ldr	r3, [r7, #8]
 800b2c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	785a      	ldrb	r2, [r3, #1]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	789a      	ldrb	r2, [r3, #2]
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	78da      	ldrb	r2, [r3, #3]
 800b2dc:	68bb      	ldr	r3, [r7, #8]
 800b2de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	3304      	adds	r3, #4
 800b2e4:	781b      	ldrb	r3, [r3, #0]
 800b2e6:	461a      	mov	r2, r3
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	3305      	adds	r3, #5
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	021b      	lsls	r3, r3, #8
 800b2f0:	b29b      	uxth	r3, r3
 800b2f2:	4313      	orrs	r3, r2
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	799a      	ldrb	r2, [r3, #6]
 800b2fe:	68bb      	ldr	r3, [r7, #8]
 800b300:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	889b      	ldrh	r3, [r3, #4]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d009      	beq.n	800b31e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800b30e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b312:	d804      	bhi.n	800b31e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800b318:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b31c:	d901      	bls.n	800b322 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800b31e:	2303      	movs	r3, #3
 800b320:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d136      	bne.n	800b39a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	78db      	ldrb	r3, [r3, #3]
 800b330:	f003 0303 	and.w	r3, r3, #3
 800b334:	2b02      	cmp	r3, #2
 800b336:	d108      	bne.n	800b34a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800b338:	68bb      	ldr	r3, [r7, #8]
 800b33a:	889b      	ldrh	r3, [r3, #4]
 800b33c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b340:	f240 8097 	bls.w	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b344:	2303      	movs	r3, #3
 800b346:	75fb      	strb	r3, [r7, #23]
 800b348:	e093      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	78db      	ldrb	r3, [r3, #3]
 800b34e:	f003 0303 	and.w	r3, r3, #3
 800b352:	2b00      	cmp	r3, #0
 800b354:	d107      	bne.n	800b366 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b356:	68bb      	ldr	r3, [r7, #8]
 800b358:	889b      	ldrh	r3, [r3, #4]
 800b35a:	2b40      	cmp	r3, #64	@ 0x40
 800b35c:	f240 8089 	bls.w	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b360:	2303      	movs	r3, #3
 800b362:	75fb      	strb	r3, [r7, #23]
 800b364:	e085      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	78db      	ldrb	r3, [r3, #3]
 800b36a:	f003 0303 	and.w	r3, r3, #3
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d005      	beq.n	800b37e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	78db      	ldrb	r3, [r3, #3]
 800b376:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800b37a:	2b03      	cmp	r3, #3
 800b37c:	d10a      	bne.n	800b394 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	799b      	ldrb	r3, [r3, #6]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d003      	beq.n	800b38e <USBH_ParseEPDesc+0xde>
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	799b      	ldrb	r3, [r3, #6]
 800b38a:	2b10      	cmp	r3, #16
 800b38c:	d970      	bls.n	800b470 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800b38e:	2303      	movs	r3, #3
 800b390:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b392:	e06d      	b.n	800b470 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b394:	2303      	movs	r3, #3
 800b396:	75fb      	strb	r3, [r7, #23]
 800b398:	e06b      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d13c      	bne.n	800b41e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	78db      	ldrb	r3, [r3, #3]
 800b3a8:	f003 0303 	and.w	r3, r3, #3
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d005      	beq.n	800b3bc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	78db      	ldrb	r3, [r3, #3]
 800b3b4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d106      	bne.n	800b3ca <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	889b      	ldrh	r3, [r3, #4]
 800b3c0:	2b40      	cmp	r3, #64	@ 0x40
 800b3c2:	d956      	bls.n	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b3c4:	2303      	movs	r3, #3
 800b3c6:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800b3c8:	e053      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	78db      	ldrb	r3, [r3, #3]
 800b3ce:	f003 0303 	and.w	r3, r3, #3
 800b3d2:	2b01      	cmp	r3, #1
 800b3d4:	d10e      	bne.n	800b3f4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	799b      	ldrb	r3, [r3, #6]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d007      	beq.n	800b3ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800b3e2:	2b10      	cmp	r3, #16
 800b3e4:	d803      	bhi.n	800b3ee <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800b3e6:	68bb      	ldr	r3, [r7, #8]
 800b3e8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800b3ea:	2b40      	cmp	r3, #64	@ 0x40
 800b3ec:	d941      	bls.n	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b3ee:	2303      	movs	r3, #3
 800b3f0:	75fb      	strb	r3, [r7, #23]
 800b3f2:	e03e      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	78db      	ldrb	r3, [r3, #3]
 800b3f8:	f003 0303 	and.w	r3, r3, #3
 800b3fc:	2b03      	cmp	r3, #3
 800b3fe:	d10b      	bne.n	800b418 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	799b      	ldrb	r3, [r3, #6]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d004      	beq.n	800b412 <USBH_ParseEPDesc+0x162>
 800b408:	68bb      	ldr	r3, [r7, #8]
 800b40a:	889b      	ldrh	r3, [r3, #4]
 800b40c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b410:	d32f      	bcc.n	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b412:	2303      	movs	r3, #3
 800b414:	75fb      	strb	r3, [r7, #23]
 800b416:	e02c      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b418:	2303      	movs	r3, #3
 800b41a:	75fb      	strb	r3, [r7, #23]
 800b41c:	e029      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b424:	2b02      	cmp	r3, #2
 800b426:	d120      	bne.n	800b46a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800b428:	68bb      	ldr	r3, [r7, #8]
 800b42a:	78db      	ldrb	r3, [r3, #3]
 800b42c:	f003 0303 	and.w	r3, r3, #3
 800b430:	2b00      	cmp	r3, #0
 800b432:	d106      	bne.n	800b442 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	889b      	ldrh	r3, [r3, #4]
 800b438:	2b08      	cmp	r3, #8
 800b43a:	d01a      	beq.n	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b43c:	2303      	movs	r3, #3
 800b43e:	75fb      	strb	r3, [r7, #23]
 800b440:	e017      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	78db      	ldrb	r3, [r3, #3]
 800b446:	f003 0303 	and.w	r3, r3, #3
 800b44a:	2b03      	cmp	r3, #3
 800b44c:	d10a      	bne.n	800b464 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	799b      	ldrb	r3, [r3, #6]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d003      	beq.n	800b45e <USBH_ParseEPDesc+0x1ae>
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	889b      	ldrh	r3, [r3, #4]
 800b45a:	2b08      	cmp	r3, #8
 800b45c:	d909      	bls.n	800b472 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800b45e:	2303      	movs	r3, #3
 800b460:	75fb      	strb	r3, [r7, #23]
 800b462:	e006      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800b464:	2303      	movs	r3, #3
 800b466:	75fb      	strb	r3, [r7, #23]
 800b468:	e003      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800b46a:	2303      	movs	r3, #3
 800b46c:	75fb      	strb	r3, [r7, #23]
 800b46e:	e000      	b.n	800b472 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800b470:	bf00      	nop
  }

  return status;
 800b472:	7dfb      	ldrb	r3, [r7, #23]
}
 800b474:	4618      	mov	r0, r3
 800b476:	371c      	adds	r7, #28
 800b478:	46bd      	mov	sp, r7
 800b47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47e:	4770      	bx	lr

0800b480 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800b480:	b480      	push	{r7}
 800b482:	b087      	sub	sp, #28
 800b484:	af00      	add	r7, sp, #0
 800b486:	60f8      	str	r0, [r7, #12]
 800b488:	60b9      	str	r1, [r7, #8]
 800b48a:	4613      	mov	r3, r2
 800b48c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	3301      	adds	r3, #1
 800b492:	781b      	ldrb	r3, [r3, #0]
 800b494:	2b03      	cmp	r3, #3
 800b496:	d120      	bne.n	800b4da <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	781b      	ldrb	r3, [r3, #0]
 800b49c:	1e9a      	subs	r2, r3, #2
 800b49e:	88fb      	ldrh	r3, [r7, #6]
 800b4a0:	4293      	cmp	r3, r2
 800b4a2:	bf28      	it	cs
 800b4a4:	4613      	movcs	r3, r2
 800b4a6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	3302      	adds	r3, #2
 800b4ac:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800b4ae:	2300      	movs	r3, #0
 800b4b0:	82fb      	strh	r3, [r7, #22]
 800b4b2:	e00b      	b.n	800b4cc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800b4b4:	8afb      	ldrh	r3, [r7, #22]
 800b4b6:	68fa      	ldr	r2, [r7, #12]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	781a      	ldrb	r2, [r3, #0]
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	701a      	strb	r2, [r3, #0]
      pdest++;
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	3301      	adds	r3, #1
 800b4c4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800b4c6:	8afb      	ldrh	r3, [r7, #22]
 800b4c8:	3302      	adds	r3, #2
 800b4ca:	82fb      	strh	r3, [r7, #22]
 800b4cc:	8afa      	ldrh	r2, [r7, #22]
 800b4ce:	8abb      	ldrh	r3, [r7, #20]
 800b4d0:	429a      	cmp	r2, r3
 800b4d2:	d3ef      	bcc.n	800b4b4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	701a      	strb	r2, [r3, #0]
  }
}
 800b4da:	bf00      	nop
 800b4dc:	371c      	adds	r7, #28
 800b4de:	46bd      	mov	sp, r7
 800b4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e4:	4770      	bx	lr

0800b4e6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b4e6:	b480      	push	{r7}
 800b4e8:	b085      	sub	sp, #20
 800b4ea:	af00      	add	r7, sp, #0
 800b4ec:	6078      	str	r0, [r7, #4]
 800b4ee:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	881b      	ldrh	r3, [r3, #0]
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	7812      	ldrb	r2, [r2, #0]
 800b4f8:	4413      	add	r3, r2
 800b4fa:	b29a      	uxth	r2, r3
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	781b      	ldrb	r3, [r3, #0]
 800b504:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	4413      	add	r3, r2
 800b50a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b50c:	68fb      	ldr	r3, [r7, #12]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3714      	adds	r7, #20
 800b512:	46bd      	mov	sp, r7
 800b514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b518:	4770      	bx	lr

0800b51a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800b51a:	b580      	push	{r7, lr}
 800b51c:	b086      	sub	sp, #24
 800b51e:	af00      	add	r7, sp, #0
 800b520:	60f8      	str	r0, [r7, #12]
 800b522:	60b9      	str	r1, [r7, #8]
 800b524:	4613      	mov	r3, r2
 800b526:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800b528:	2301      	movs	r3, #1
 800b52a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	789b      	ldrb	r3, [r3, #2]
 800b530:	2b01      	cmp	r3, #1
 800b532:	d002      	beq.n	800b53a <USBH_CtlReq+0x20>
 800b534:	2b02      	cmp	r3, #2
 800b536:	d00f      	beq.n	800b558 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800b538:	e027      	b.n	800b58a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	68ba      	ldr	r2, [r7, #8]
 800b53e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	88fa      	ldrh	r2, [r7, #6]
 800b544:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2201      	movs	r2, #1
 800b54a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2202      	movs	r2, #2
 800b550:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800b552:	2301      	movs	r3, #1
 800b554:	75fb      	strb	r3, [r7, #23]
      break;
 800b556:	e018      	b.n	800b58a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800b558:	68f8      	ldr	r0, [r7, #12]
 800b55a:	f000 f81b 	bl	800b594 <USBH_HandleControl>
 800b55e:	4603      	mov	r3, r0
 800b560:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800b562:	7dfb      	ldrb	r3, [r7, #23]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d002      	beq.n	800b56e <USBH_CtlReq+0x54>
 800b568:	7dfb      	ldrb	r3, [r7, #23]
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d106      	bne.n	800b57c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2201      	movs	r2, #1
 800b572:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2200      	movs	r2, #0
 800b578:	761a      	strb	r2, [r3, #24]
      break;
 800b57a:	e005      	b.n	800b588 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800b57c:	7dfb      	ldrb	r3, [r7, #23]
 800b57e:	2b02      	cmp	r3, #2
 800b580:	d102      	bne.n	800b588 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	2201      	movs	r2, #1
 800b586:	709a      	strb	r2, [r3, #2]
      break;
 800b588:	bf00      	nop
  }
  return status;
 800b58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3718      	adds	r7, #24
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af02      	add	r7, sp, #8
 800b59a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800b59c:	2301      	movs	r3, #1
 800b59e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	7e1b      	ldrb	r3, [r3, #24]
 800b5a8:	3b01      	subs	r3, #1
 800b5aa:	2b0a      	cmp	r3, #10
 800b5ac:	f200 8156 	bhi.w	800b85c <USBH_HandleControl+0x2c8>
 800b5b0:	a201      	add	r2, pc, #4	@ (adr r2, 800b5b8 <USBH_HandleControl+0x24>)
 800b5b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5b6:	bf00      	nop
 800b5b8:	0800b5e5 	.word	0x0800b5e5
 800b5bc:	0800b5ff 	.word	0x0800b5ff
 800b5c0:	0800b669 	.word	0x0800b669
 800b5c4:	0800b68f 	.word	0x0800b68f
 800b5c8:	0800b6c7 	.word	0x0800b6c7
 800b5cc:	0800b6f1 	.word	0x0800b6f1
 800b5d0:	0800b743 	.word	0x0800b743
 800b5d4:	0800b765 	.word	0x0800b765
 800b5d8:	0800b7a1 	.word	0x0800b7a1
 800b5dc:	0800b7c7 	.word	0x0800b7c7
 800b5e0:	0800b805 	.word	0x0800b805
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f103 0110 	add.w	r1, r3, #16
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	795b      	ldrb	r3, [r3, #5]
 800b5ee:	461a      	mov	r2, r3
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f000 f943 	bl	800b87c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	2202      	movs	r2, #2
 800b5fa:	761a      	strb	r2, [r3, #24]
      break;
 800b5fc:	e139      	b.n	800b872 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	795b      	ldrb	r3, [r3, #5]
 800b602:	4619      	mov	r1, r3
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 fcc5 	bl	800bf94 <USBH_LL_GetURBState>
 800b60a:	4603      	mov	r3, r0
 800b60c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b60e:	7bbb      	ldrb	r3, [r7, #14]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d11e      	bne.n	800b652 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	7c1b      	ldrb	r3, [r3, #16]
 800b618:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b61c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	8adb      	ldrh	r3, [r3, #22]
 800b622:	2b00      	cmp	r3, #0
 800b624:	d00a      	beq.n	800b63c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b626:	7b7b      	ldrb	r3, [r7, #13]
 800b628:	2b80      	cmp	r3, #128	@ 0x80
 800b62a:	d103      	bne.n	800b634 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2203      	movs	r2, #3
 800b630:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b632:	e115      	b.n	800b860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2205      	movs	r2, #5
 800b638:	761a      	strb	r2, [r3, #24]
      break;
 800b63a:	e111      	b.n	800b860 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b63c:	7b7b      	ldrb	r3, [r7, #13]
 800b63e:	2b80      	cmp	r3, #128	@ 0x80
 800b640:	d103      	bne.n	800b64a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	2209      	movs	r2, #9
 800b646:	761a      	strb	r2, [r3, #24]
      break;
 800b648:	e10a      	b.n	800b860 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2207      	movs	r2, #7
 800b64e:	761a      	strb	r2, [r3, #24]
      break;
 800b650:	e106      	b.n	800b860 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b652:	7bbb      	ldrb	r3, [r7, #14]
 800b654:	2b04      	cmp	r3, #4
 800b656:	d003      	beq.n	800b660 <USBH_HandleControl+0xcc>
 800b658:	7bbb      	ldrb	r3, [r7, #14]
 800b65a:	2b02      	cmp	r3, #2
 800b65c:	f040 8100 	bne.w	800b860 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	220b      	movs	r2, #11
 800b664:	761a      	strb	r2, [r3, #24]
      break;
 800b666:	e0fb      	b.n	800b860 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b66e:	b29a      	uxth	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	6899      	ldr	r1, [r3, #8]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	899a      	ldrh	r2, [r3, #12]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	791b      	ldrb	r3, [r3, #4]
 800b680:	6878      	ldr	r0, [r7, #4]
 800b682:	f000 f93a 	bl	800b8fa <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2204      	movs	r2, #4
 800b68a:	761a      	strb	r2, [r3, #24]
      break;
 800b68c:	e0f1      	b.n	800b872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	791b      	ldrb	r3, [r3, #4]
 800b692:	4619      	mov	r1, r3
 800b694:	6878      	ldr	r0, [r7, #4]
 800b696:	f000 fc7d 	bl	800bf94 <USBH_LL_GetURBState>
 800b69a:	4603      	mov	r3, r0
 800b69c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b69e:	7bbb      	ldrb	r3, [r7, #14]
 800b6a0:	2b01      	cmp	r3, #1
 800b6a2:	d102      	bne.n	800b6aa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2209      	movs	r2, #9
 800b6a8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b6aa:	7bbb      	ldrb	r3, [r7, #14]
 800b6ac:	2b05      	cmp	r3, #5
 800b6ae:	d102      	bne.n	800b6b6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b6b0:	2303      	movs	r3, #3
 800b6b2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b6b4:	e0d6      	b.n	800b864 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b6b6:	7bbb      	ldrb	r3, [r7, #14]
 800b6b8:	2b04      	cmp	r3, #4
 800b6ba:	f040 80d3 	bne.w	800b864 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	220b      	movs	r2, #11
 800b6c2:	761a      	strb	r2, [r3, #24]
      break;
 800b6c4:	e0ce      	b.n	800b864 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	6899      	ldr	r1, [r3, #8]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	899a      	ldrh	r2, [r3, #12]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	795b      	ldrb	r3, [r3, #5]
 800b6d2:	2001      	movs	r0, #1
 800b6d4:	9000      	str	r0, [sp, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 f8ea 	bl	800b8b0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b6e2:	b29a      	uxth	r2, r3
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	2206      	movs	r2, #6
 800b6ec:	761a      	strb	r2, [r3, #24]
      break;
 800b6ee:	e0c0      	b.n	800b872 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	795b      	ldrb	r3, [r3, #5]
 800b6f4:	4619      	mov	r1, r3
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fc4c 	bl	800bf94 <USBH_LL_GetURBState>
 800b6fc:	4603      	mov	r3, r0
 800b6fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b700:	7bbb      	ldrb	r3, [r7, #14]
 800b702:	2b01      	cmp	r3, #1
 800b704:	d103      	bne.n	800b70e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2207      	movs	r2, #7
 800b70a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b70c:	e0ac      	b.n	800b868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b70e:	7bbb      	ldrb	r3, [r7, #14]
 800b710:	2b05      	cmp	r3, #5
 800b712:	d105      	bne.n	800b720 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	220c      	movs	r2, #12
 800b718:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b71a:	2303      	movs	r3, #3
 800b71c:	73fb      	strb	r3, [r7, #15]
      break;
 800b71e:	e0a3      	b.n	800b868 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b720:	7bbb      	ldrb	r3, [r7, #14]
 800b722:	2b02      	cmp	r3, #2
 800b724:	d103      	bne.n	800b72e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2205      	movs	r2, #5
 800b72a:	761a      	strb	r2, [r3, #24]
      break;
 800b72c:	e09c      	b.n	800b868 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b72e:	7bbb      	ldrb	r3, [r7, #14]
 800b730:	2b04      	cmp	r3, #4
 800b732:	f040 8099 	bne.w	800b868 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	220b      	movs	r2, #11
 800b73a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b73c:	2302      	movs	r3, #2
 800b73e:	73fb      	strb	r3, [r7, #15]
      break;
 800b740:	e092      	b.n	800b868 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	791b      	ldrb	r3, [r3, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	2100      	movs	r1, #0
 800b74a:	6878      	ldr	r0, [r7, #4]
 800b74c:	f000 f8d5 	bl	800b8fa <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b756:	b29a      	uxth	r2, r3
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2208      	movs	r2, #8
 800b760:	761a      	strb	r2, [r3, #24]

      break;
 800b762:	e086      	b.n	800b872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	791b      	ldrb	r3, [r3, #4]
 800b768:	4619      	mov	r1, r3
 800b76a:	6878      	ldr	r0, [r7, #4]
 800b76c:	f000 fc12 	bl	800bf94 <USBH_LL_GetURBState>
 800b770:	4603      	mov	r3, r0
 800b772:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b774:	7bbb      	ldrb	r3, [r7, #14]
 800b776:	2b01      	cmp	r3, #1
 800b778:	d105      	bne.n	800b786 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	220d      	movs	r2, #13
 800b77e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b784:	e072      	b.n	800b86c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b786:	7bbb      	ldrb	r3, [r7, #14]
 800b788:	2b04      	cmp	r3, #4
 800b78a:	d103      	bne.n	800b794 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	220b      	movs	r2, #11
 800b790:	761a      	strb	r2, [r3, #24]
      break;
 800b792:	e06b      	b.n	800b86c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b794:	7bbb      	ldrb	r3, [r7, #14]
 800b796:	2b05      	cmp	r3, #5
 800b798:	d168      	bne.n	800b86c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b79a:	2303      	movs	r3, #3
 800b79c:	73fb      	strb	r3, [r7, #15]
      break;
 800b79e:	e065      	b.n	800b86c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	795b      	ldrb	r3, [r3, #5]
 800b7a4:	2201      	movs	r2, #1
 800b7a6:	9200      	str	r2, [sp, #0]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	2100      	movs	r1, #0
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 f87f 	bl	800b8b0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	220a      	movs	r2, #10
 800b7c2:	761a      	strb	r2, [r3, #24]
      break;
 800b7c4:	e055      	b.n	800b872 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	795b      	ldrb	r3, [r3, #5]
 800b7ca:	4619      	mov	r1, r3
 800b7cc:	6878      	ldr	r0, [r7, #4]
 800b7ce:	f000 fbe1 	bl	800bf94 <USBH_LL_GetURBState>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
 800b7d8:	2b01      	cmp	r3, #1
 800b7da:	d105      	bne.n	800b7e8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b7dc:	2300      	movs	r3, #0
 800b7de:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	220d      	movs	r2, #13
 800b7e4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b7e6:	e043      	b.n	800b870 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b7e8:	7bbb      	ldrb	r3, [r7, #14]
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	d103      	bne.n	800b7f6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	2209      	movs	r2, #9
 800b7f2:	761a      	strb	r2, [r3, #24]
      break;
 800b7f4:	e03c      	b.n	800b870 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b7f6:	7bbb      	ldrb	r3, [r7, #14]
 800b7f8:	2b04      	cmp	r3, #4
 800b7fa:	d139      	bne.n	800b870 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	220b      	movs	r2, #11
 800b800:	761a      	strb	r2, [r3, #24]
      break;
 800b802:	e035      	b.n	800b870 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7e5b      	ldrb	r3, [r3, #25]
 800b808:	3301      	adds	r3, #1
 800b80a:	b2da      	uxtb	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	765a      	strb	r2, [r3, #25]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	7e5b      	ldrb	r3, [r3, #25]
 800b814:	2b02      	cmp	r3, #2
 800b816:	d806      	bhi.n	800b826 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	2201      	movs	r2, #1
 800b822:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b824:	e025      	b.n	800b872 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b82c:	2106      	movs	r1, #6
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	2200      	movs	r2, #0
 800b836:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	795b      	ldrb	r3, [r3, #5]
 800b83c:	4619      	mov	r1, r3
 800b83e:	6878      	ldr	r0, [r7, #4]
 800b840:	f000 f90c 	bl	800ba5c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	791b      	ldrb	r3, [r3, #4]
 800b848:	4619      	mov	r1, r3
 800b84a:	6878      	ldr	r0, [r7, #4]
 800b84c:	f000 f906 	bl	800ba5c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b856:	2302      	movs	r3, #2
 800b858:	73fb      	strb	r3, [r7, #15]
      break;
 800b85a:	e00a      	b.n	800b872 <USBH_HandleControl+0x2de>

    default:
      break;
 800b85c:	bf00      	nop
 800b85e:	e008      	b.n	800b872 <USBH_HandleControl+0x2de>
      break;
 800b860:	bf00      	nop
 800b862:	e006      	b.n	800b872 <USBH_HandleControl+0x2de>
      break;
 800b864:	bf00      	nop
 800b866:	e004      	b.n	800b872 <USBH_HandleControl+0x2de>
      break;
 800b868:	bf00      	nop
 800b86a:	e002      	b.n	800b872 <USBH_HandleControl+0x2de>
      break;
 800b86c:	bf00      	nop
 800b86e:	e000      	b.n	800b872 <USBH_HandleControl+0x2de>
      break;
 800b870:	bf00      	nop
  }

  return status;
 800b872:	7bfb      	ldrb	r3, [r7, #15]
}
 800b874:	4618      	mov	r0, r3
 800b876:	3710      	adds	r7, #16
 800b878:	46bd      	mov	sp, r7
 800b87a:	bd80      	pop	{r7, pc}

0800b87c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af04      	add	r7, sp, #16
 800b882:	60f8      	str	r0, [r7, #12]
 800b884:	60b9      	str	r1, [r7, #8]
 800b886:	4613      	mov	r3, r2
 800b888:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b88a:	79f9      	ldrb	r1, [r7, #7]
 800b88c:	2300      	movs	r3, #0
 800b88e:	9303      	str	r3, [sp, #12]
 800b890:	2308      	movs	r3, #8
 800b892:	9302      	str	r3, [sp, #8]
 800b894:	68bb      	ldr	r3, [r7, #8]
 800b896:	9301      	str	r3, [sp, #4]
 800b898:	2300      	movs	r3, #0
 800b89a:	9300      	str	r3, [sp, #0]
 800b89c:	2300      	movs	r3, #0
 800b89e:	2200      	movs	r2, #0
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f000 fb46 	bl	800bf32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b088      	sub	sp, #32
 800b8b4:	af04      	add	r7, sp, #16
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	4611      	mov	r1, r2
 800b8bc:	461a      	mov	r2, r3
 800b8be:	460b      	mov	r3, r1
 800b8c0:	80fb      	strh	r3, [r7, #6]
 800b8c2:	4613      	mov	r3, r2
 800b8c4:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d001      	beq.n	800b8d4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b8d4:	7979      	ldrb	r1, [r7, #5]
 800b8d6:	7e3b      	ldrb	r3, [r7, #24]
 800b8d8:	9303      	str	r3, [sp, #12]
 800b8da:	88fb      	ldrh	r3, [r7, #6]
 800b8dc:	9302      	str	r3, [sp, #8]
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	68f8      	ldr	r0, [r7, #12]
 800b8ec:	f000 fb21 	bl	800bf32 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b8f0:	2300      	movs	r3, #0
}
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	3710      	adds	r7, #16
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	bd80      	pop	{r7, pc}

0800b8fa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b8fa:	b580      	push	{r7, lr}
 800b8fc:	b088      	sub	sp, #32
 800b8fe:	af04      	add	r7, sp, #16
 800b900:	60f8      	str	r0, [r7, #12]
 800b902:	60b9      	str	r1, [r7, #8]
 800b904:	4611      	mov	r1, r2
 800b906:	461a      	mov	r2, r3
 800b908:	460b      	mov	r3, r1
 800b90a:	80fb      	strh	r3, [r7, #6]
 800b90c:	4613      	mov	r3, r2
 800b90e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b910:	7979      	ldrb	r1, [r7, #5]
 800b912:	2300      	movs	r3, #0
 800b914:	9303      	str	r3, [sp, #12]
 800b916:	88fb      	ldrh	r3, [r7, #6]
 800b918:	9302      	str	r3, [sp, #8]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	2301      	movs	r3, #1
 800b920:	9300      	str	r3, [sp, #0]
 800b922:	2300      	movs	r3, #0
 800b924:	2201      	movs	r2, #1
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	f000 fb03 	bl	800bf32 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b92c:	2300      	movs	r3, #0

}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}

0800b936 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b936:	b580      	push	{r7, lr}
 800b938:	b088      	sub	sp, #32
 800b93a:	af04      	add	r7, sp, #16
 800b93c:	60f8      	str	r0, [r7, #12]
 800b93e:	60b9      	str	r1, [r7, #8]
 800b940:	4611      	mov	r1, r2
 800b942:	461a      	mov	r2, r3
 800b944:	460b      	mov	r3, r1
 800b946:	80fb      	strh	r3, [r7, #6]
 800b948:	4613      	mov	r3, r2
 800b94a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b952:	2b00      	cmp	r3, #0
 800b954:	d001      	beq.n	800b95a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b956:	2300      	movs	r3, #0
 800b958:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b95a:	7979      	ldrb	r1, [r7, #5]
 800b95c:	7e3b      	ldrb	r3, [r7, #24]
 800b95e:	9303      	str	r3, [sp, #12]
 800b960:	88fb      	ldrh	r3, [r7, #6]
 800b962:	9302      	str	r3, [sp, #8]
 800b964:	68bb      	ldr	r3, [r7, #8]
 800b966:	9301      	str	r3, [sp, #4]
 800b968:	2301      	movs	r3, #1
 800b96a:	9300      	str	r3, [sp, #0]
 800b96c:	2302      	movs	r3, #2
 800b96e:	2200      	movs	r2, #0
 800b970:	68f8      	ldr	r0, [r7, #12]
 800b972:	f000 fade 	bl	800bf32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b976:	2300      	movs	r3, #0
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3710      	adds	r7, #16
 800b97c:	46bd      	mov	sp, r7
 800b97e:	bd80      	pop	{r7, pc}

0800b980 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b088      	sub	sp, #32
 800b984:	af04      	add	r7, sp, #16
 800b986:	60f8      	str	r0, [r7, #12]
 800b988:	60b9      	str	r1, [r7, #8]
 800b98a:	4611      	mov	r1, r2
 800b98c:	461a      	mov	r2, r3
 800b98e:	460b      	mov	r3, r1
 800b990:	80fb      	strh	r3, [r7, #6]
 800b992:	4613      	mov	r3, r2
 800b994:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b996:	7979      	ldrb	r1, [r7, #5]
 800b998:	2300      	movs	r3, #0
 800b99a:	9303      	str	r3, [sp, #12]
 800b99c:	88fb      	ldrh	r3, [r7, #6]
 800b99e:	9302      	str	r3, [sp, #8]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	9301      	str	r3, [sp, #4]
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	9300      	str	r3, [sp, #0]
 800b9a8:	2302      	movs	r3, #2
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 fac0 	bl	800bf32 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}

0800b9bc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af04      	add	r7, sp, #16
 800b9c2:	6078      	str	r0, [r7, #4]
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4603      	mov	r3, r0
 800b9cc:	70fb      	strb	r3, [r7, #3]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	70bb      	strb	r3, [r7, #2]
 800b9d2:	4613      	mov	r3, r2
 800b9d4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b9d6:	7878      	ldrb	r0, [r7, #1]
 800b9d8:	78ba      	ldrb	r2, [r7, #2]
 800b9da:	78f9      	ldrb	r1, [r7, #3]
 800b9dc:	8b3b      	ldrh	r3, [r7, #24]
 800b9de:	9302      	str	r3, [sp, #8]
 800b9e0:	7d3b      	ldrb	r3, [r7, #20]
 800b9e2:	9301      	str	r3, [sp, #4]
 800b9e4:	7c3b      	ldrb	r3, [r7, #16]
 800b9e6:	9300      	str	r3, [sp, #0]
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa53 	bl	800be96 <USBH_LL_OpenPipe>

  return USBH_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}

0800b9fa <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b9fa:	b580      	push	{r7, lr}
 800b9fc:	b082      	sub	sp, #8
 800b9fe:	af00      	add	r7, sp, #0
 800ba00:	6078      	str	r0, [r7, #4]
 800ba02:	460b      	mov	r3, r1
 800ba04:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ba06:	78fb      	ldrb	r3, [r7, #3]
 800ba08:	4619      	mov	r1, r3
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 fa72 	bl	800bef4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ba10:	2300      	movs	r3, #0
}
 800ba12:	4618      	mov	r0, r3
 800ba14:	3708      	adds	r7, #8
 800ba16:	46bd      	mov	sp, r7
 800ba18:	bd80      	pop	{r7, pc}

0800ba1a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ba1a:	b580      	push	{r7, lr}
 800ba1c:	b084      	sub	sp, #16
 800ba1e:	af00      	add	r7, sp, #0
 800ba20:	6078      	str	r0, [r7, #4]
 800ba22:	460b      	mov	r3, r1
 800ba24:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ba26:	6878      	ldr	r0, [r7, #4]
 800ba28:	f000 f836 	bl	800ba98 <USBH_GetFreePipe>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ba30:	89fb      	ldrh	r3, [r7, #14]
 800ba32:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ba36:	4293      	cmp	r3, r2
 800ba38:	d00a      	beq.n	800ba50 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ba3a:	78fa      	ldrb	r2, [r7, #3]
 800ba3c:	89fb      	ldrh	r3, [r7, #14]
 800ba3e:	f003 030f 	and.w	r3, r3, #15
 800ba42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ba46:	6879      	ldr	r1, [r7, #4]
 800ba48:	33e0      	adds	r3, #224	@ 0xe0
 800ba4a:	009b      	lsls	r3, r3, #2
 800ba4c:	440b      	add	r3, r1
 800ba4e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ba50:	89fb      	ldrh	r3, [r7, #14]
 800ba52:	b2db      	uxtb	r3, r3
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}

0800ba5c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
 800ba64:	460b      	mov	r3, r1
 800ba66:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ba68:	78fb      	ldrb	r3, [r7, #3]
 800ba6a:	2b0f      	cmp	r3, #15
 800ba6c:	d80d      	bhi.n	800ba8a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ba6e:	78fb      	ldrb	r3, [r7, #3]
 800ba70:	687a      	ldr	r2, [r7, #4]
 800ba72:	33e0      	adds	r3, #224	@ 0xe0
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	4413      	add	r3, r2
 800ba78:	685a      	ldr	r2, [r3, #4]
 800ba7a:	78fb      	ldrb	r3, [r7, #3]
 800ba7c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ba80:	6879      	ldr	r1, [r7, #4]
 800ba82:	33e0      	adds	r3, #224	@ 0xe0
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	440b      	add	r3, r1
 800ba88:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ba8a:	2300      	movs	r3, #0
}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b085      	sub	sp, #20
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800baa0:	2300      	movs	r3, #0
 800baa2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800baa4:	2300      	movs	r3, #0
 800baa6:	73fb      	strb	r3, [r7, #15]
 800baa8:	e00f      	b.n	800baca <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800baaa:	7bfb      	ldrb	r3, [r7, #15]
 800baac:	687a      	ldr	r2, [r7, #4]
 800baae:	33e0      	adds	r3, #224	@ 0xe0
 800bab0:	009b      	lsls	r3, r3, #2
 800bab2:	4413      	add	r3, r2
 800bab4:	685b      	ldr	r3, [r3, #4]
 800bab6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800baba:	2b00      	cmp	r3, #0
 800babc:	d102      	bne.n	800bac4 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800babe:	7bfb      	ldrb	r3, [r7, #15]
 800bac0:	b29b      	uxth	r3, r3
 800bac2:	e007      	b.n	800bad4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800bac4:	7bfb      	ldrb	r3, [r7, #15]
 800bac6:	3301      	adds	r3, #1
 800bac8:	73fb      	strb	r3, [r7, #15]
 800baca:	7bfb      	ldrb	r3, [r7, #15]
 800bacc:	2b0f      	cmp	r3, #15
 800bace:	d9ec      	bls.n	800baaa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800bad0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3714      	adds	r7, #20
 800bad8:	46bd      	mov	sp, r7
 800bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bade:	4770      	bx	lr

0800bae0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800bae4:	2201      	movs	r2, #1
 800bae6:	490e      	ldr	r1, [pc, #56]	@ (800bb20 <MX_USB_HOST_Init+0x40>)
 800bae8:	480e      	ldr	r0, [pc, #56]	@ (800bb24 <MX_USB_HOST_Init+0x44>)
 800baea:	f7fe fb15 	bl	800a118 <USBH_Init>
 800baee:	4603      	mov	r3, r0
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	d001      	beq.n	800baf8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800baf4:	f7f6 fb08 	bl	8002108 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800baf8:	490b      	ldr	r1, [pc, #44]	@ (800bb28 <MX_USB_HOST_Init+0x48>)
 800bafa:	480a      	ldr	r0, [pc, #40]	@ (800bb24 <MX_USB_HOST_Init+0x44>)
 800bafc:	f7fe fbb9 	bl	800a272 <USBH_RegisterClass>
 800bb00:	4603      	mov	r3, r0
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d001      	beq.n	800bb0a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800bb06:	f7f6 faff 	bl	8002108 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800bb0a:	4806      	ldr	r0, [pc, #24]	@ (800bb24 <MX_USB_HOST_Init+0x44>)
 800bb0c:	f7fe fc3d 	bl	800a38a <USBH_Start>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d001      	beq.n	800bb1a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800bb16:	f7f6 faf7 	bl	8002108 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800bb1a:	bf00      	nop
 800bb1c:	bd80      	pop	{r7, pc}
 800bb1e:	bf00      	nop
 800bb20:	0800bb41 	.word	0x0800bb41
 800bb24:	20000268 	.word	0x20000268
 800bb28:	2000007c 	.word	0x2000007c

0800bb2c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800bb2c:	b580      	push	{r7, lr}
 800bb2e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800bb30:	4802      	ldr	r0, [pc, #8]	@ (800bb3c <MX_USB_HOST_Process+0x10>)
 800bb32:	f7fe fc3b 	bl	800a3ac <USBH_Process>
}
 800bb36:	bf00      	nop
 800bb38:	bd80      	pop	{r7, pc}
 800bb3a:	bf00      	nop
 800bb3c:	20000268 	.word	0x20000268

0800bb40 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800bb40:	b480      	push	{r7}
 800bb42:	b083      	sub	sp, #12
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800bb4c:	78fb      	ldrb	r3, [r7, #3]
 800bb4e:	3b01      	subs	r3, #1
 800bb50:	2b04      	cmp	r3, #4
 800bb52:	d819      	bhi.n	800bb88 <USBH_UserProcess+0x48>
 800bb54:	a201      	add	r2, pc, #4	@ (adr r2, 800bb5c <USBH_UserProcess+0x1c>)
 800bb56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb5a:	bf00      	nop
 800bb5c:	0800bb89 	.word	0x0800bb89
 800bb60:	0800bb79 	.word	0x0800bb79
 800bb64:	0800bb89 	.word	0x0800bb89
 800bb68:	0800bb81 	.word	0x0800bb81
 800bb6c:	0800bb71 	.word	0x0800bb71
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800bb70:	4b09      	ldr	r3, [pc, #36]	@ (800bb98 <USBH_UserProcess+0x58>)
 800bb72:	2203      	movs	r2, #3
 800bb74:	701a      	strb	r2, [r3, #0]
  break;
 800bb76:	e008      	b.n	800bb8a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800bb78:	4b07      	ldr	r3, [pc, #28]	@ (800bb98 <USBH_UserProcess+0x58>)
 800bb7a:	2202      	movs	r2, #2
 800bb7c:	701a      	strb	r2, [r3, #0]
  break;
 800bb7e:	e004      	b.n	800bb8a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800bb80:	4b05      	ldr	r3, [pc, #20]	@ (800bb98 <USBH_UserProcess+0x58>)
 800bb82:	2201      	movs	r2, #1
 800bb84:	701a      	strb	r2, [r3, #0]
  break;
 800bb86:	e000      	b.n	800bb8a <USBH_UserProcess+0x4a>

  default:
  break;
 800bb88:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800bb8a:	bf00      	nop
 800bb8c:	370c      	adds	r7, #12
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb94:	4770      	bx	lr
 800bb96:	bf00      	nop
 800bb98:	20000640 	.word	0x20000640

0800bb9c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b08a      	sub	sp, #40	@ 0x28
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bba4:	f107 0314 	add.w	r3, r7, #20
 800bba8:	2200      	movs	r2, #0
 800bbaa:	601a      	str	r2, [r3, #0]
 800bbac:	605a      	str	r2, [r3, #4]
 800bbae:	609a      	str	r2, [r3, #8]
 800bbb0:	60da      	str	r2, [r3, #12]
 800bbb2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bbbc:	d147      	bne.n	800bc4e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	613b      	str	r3, [r7, #16]
 800bbc2:	4b25      	ldr	r3, [pc, #148]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bbc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbc6:	4a24      	ldr	r2, [pc, #144]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bbc8:	f043 0301 	orr.w	r3, r3, #1
 800bbcc:	6313      	str	r3, [r2, #48]	@ 0x30
 800bbce:	4b22      	ldr	r3, [pc, #136]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bbd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd2:	f003 0301 	and.w	r3, r3, #1
 800bbd6:	613b      	str	r3, [r7, #16]
 800bbd8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800bbda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800bbe8:	f107 0314 	add.w	r3, r7, #20
 800bbec:	4619      	mov	r1, r3
 800bbee:	481b      	ldr	r0, [pc, #108]	@ (800bc5c <HAL_HCD_MspInit+0xc0>)
 800bbf0:	f7f8 f9cc 	bl	8003f8c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800bbf4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800bbf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bbfa:	2302      	movs	r3, #2
 800bbfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bbfe:	2300      	movs	r3, #0
 800bc00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bc02:	2300      	movs	r3, #0
 800bc04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bc06:	230a      	movs	r3, #10
 800bc08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bc0a:	f107 0314 	add.w	r3, r7, #20
 800bc0e:	4619      	mov	r1, r3
 800bc10:	4812      	ldr	r0, [pc, #72]	@ (800bc5c <HAL_HCD_MspInit+0xc0>)
 800bc12:	f7f8 f9bb 	bl	8003f8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bc16:	4b10      	ldr	r3, [pc, #64]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bc18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bc1a:	4a0f      	ldr	r2, [pc, #60]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bc1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc20:	6353      	str	r3, [r2, #52]	@ 0x34
 800bc22:	2300      	movs	r3, #0
 800bc24:	60fb      	str	r3, [r7, #12]
 800bc26:	4b0c      	ldr	r3, [pc, #48]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bc28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc2a:	4a0b      	ldr	r2, [pc, #44]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bc2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bc30:	6453      	str	r3, [r2, #68]	@ 0x44
 800bc32:	4b09      	ldr	r3, [pc, #36]	@ (800bc58 <HAL_HCD_MspInit+0xbc>)
 800bc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bc3a:	60fb      	str	r3, [r7, #12]
 800bc3c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bc3e:	2200      	movs	r2, #0
 800bc40:	2100      	movs	r1, #0
 800bc42:	2043      	movs	r0, #67	@ 0x43
 800bc44:	f7f8 f96b 	bl	8003f1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bc48:	2043      	movs	r0, #67	@ 0x43
 800bc4a:	f7f8 f984 	bl	8003f56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bc4e:	bf00      	nop
 800bc50:	3728      	adds	r7, #40	@ 0x28
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	40023800 	.word	0x40023800
 800bc5c:	40020000 	.word	0x40020000

0800bc60 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b082      	sub	sp, #8
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7fe ff73 	bl	800ab5a <USBH_LL_IncTimer>
}
 800bc74:	bf00      	nop
 800bc76:	3708      	adds	r7, #8
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	bd80      	pop	{r7, pc}

0800bc7c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc7c:	b580      	push	{r7, lr}
 800bc7e:	b082      	sub	sp, #8
 800bc80:	af00      	add	r7, sp, #0
 800bc82:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	f7fe ffab 	bl	800abe6 <USBH_LL_Connect>
}
 800bc90:	bf00      	nop
 800bc92:	3708      	adds	r7, #8
 800bc94:	46bd      	mov	sp, r7
 800bc96:	bd80      	pop	{r7, pc}

0800bc98 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b082      	sub	sp, #8
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bca6:	4618      	mov	r0, r3
 800bca8:	f7fe ffb4 	bl	800ac14 <USBH_LL_Disconnect>
}
 800bcac:	bf00      	nop
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
 800bcbc:	460b      	mov	r3, r1
 800bcbe:	70fb      	strb	r3, [r7, #3]
 800bcc0:	4613      	mov	r3, r2
 800bcc2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800bcc4:	bf00      	nop
 800bcc6:	370c      	adds	r7, #12
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcd0:	b580      	push	{r7, lr}
 800bcd2:	b082      	sub	sp, #8
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7fe ff65 	bl	800abae <USBH_LL_PortEnabled>
}
 800bce4:	bf00      	nop
 800bce6:	3708      	adds	r7, #8
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bd80      	pop	{r7, pc}

0800bcec <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800bcec:	b580      	push	{r7, lr}
 800bcee:	b082      	sub	sp, #8
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f7fe ff65 	bl	800abca <USBH_LL_PortDisabled>
}
 800bd00:	bf00      	nop
 800bd02:	3708      	adds	r7, #8
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd80      	pop	{r7, pc}

0800bd08 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bd16:	2b01      	cmp	r3, #1
 800bd18:	d12a      	bne.n	800bd70 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800bd1a:	4a18      	ldr	r2, [pc, #96]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a15      	ldr	r2, [pc, #84]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd26:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bd2a:	4b14      	ldr	r3, [pc, #80]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd2c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bd30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800bd32:	4b12      	ldr	r3, [pc, #72]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd34:	2208      	movs	r2, #8
 800bd36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800bd38:	4b10      	ldr	r3, [pc, #64]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bd3e:	4b0f      	ldr	r3, [pc, #60]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd40:	2200      	movs	r2, #0
 800bd42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800bd44:	4b0d      	ldr	r3, [pc, #52]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd46:	2202      	movs	r2, #2
 800bd48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bd4a:	4b0c      	ldr	r3, [pc, #48]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800bd50:	480a      	ldr	r0, [pc, #40]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd52:	f7f8 fad0 	bl	80042f6 <HAL_HCD_Init>
 800bd56:	4603      	mov	r3, r0
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d001      	beq.n	800bd60 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800bd5c:	f7f6 f9d4 	bl	8002108 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800bd60:	4806      	ldr	r0, [pc, #24]	@ (800bd7c <USBH_LL_Init+0x74>)
 800bd62:	f7f8 ff31 	bl	8004bc8 <HAL_HCD_GetCurrentFrame>
 800bd66:	4603      	mov	r3, r0
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7fe fee6 	bl	800ab3c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800bd70:	2300      	movs	r3, #0
}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3708      	adds	r7, #8
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
 800bd7a:	bf00      	nop
 800bd7c:	20000644 	.word	0x20000644

0800bd80 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bd88:	2300      	movs	r3, #0
 800bd8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7f8 fe9e 	bl	8004ad8 <HAL_HCD_Start>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bda0:	7bfb      	ldrb	r3, [r7, #15]
 800bda2:	4618      	mov	r0, r3
 800bda4:	f000 f95e 	bl	800c064 <USBH_Get_USB_Status>
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bdac:	7bbb      	ldrb	r3, [r7, #14]
}
 800bdae:	4618      	mov	r0, r3
 800bdb0:	3710      	adds	r7, #16
 800bdb2:	46bd      	mov	sp, r7
 800bdb4:	bd80      	pop	{r7, pc}

0800bdb6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800bdb6:	b580      	push	{r7, lr}
 800bdb8:	b084      	sub	sp, #16
 800bdba:	af00      	add	r7, sp, #0
 800bdbc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f7f8 fea6 	bl	8004b1e <HAL_HCD_Stop>
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bdd6:	7bfb      	ldrb	r3, [r7, #15]
 800bdd8:	4618      	mov	r0, r3
 800bdda:	f000 f943 	bl	800c064 <USBH_Get_USB_Status>
 800bdde:	4603      	mov	r3, r0
 800bde0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bde2:	7bbb      	ldrb	r3, [r7, #14]
}
 800bde4:	4618      	mov	r0, r3
 800bde6:	3710      	adds	r7, #16
 800bde8:	46bd      	mov	sp, r7
 800bdea:	bd80      	pop	{r7, pc}

0800bdec <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bdfe:	4618      	mov	r0, r3
 800be00:	f7f8 fef0 	bl	8004be4 <HAL_HCD_GetCurrentSpeed>
 800be04:	4603      	mov	r3, r0
 800be06:	2b02      	cmp	r3, #2
 800be08:	d00c      	beq.n	800be24 <USBH_LL_GetSpeed+0x38>
 800be0a:	2b02      	cmp	r3, #2
 800be0c:	d80d      	bhi.n	800be2a <USBH_LL_GetSpeed+0x3e>
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d002      	beq.n	800be18 <USBH_LL_GetSpeed+0x2c>
 800be12:	2b01      	cmp	r3, #1
 800be14:	d003      	beq.n	800be1e <USBH_LL_GetSpeed+0x32>
 800be16:	e008      	b.n	800be2a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800be18:	2300      	movs	r3, #0
 800be1a:	73fb      	strb	r3, [r7, #15]
    break;
 800be1c:	e008      	b.n	800be30 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800be1e:	2301      	movs	r3, #1
 800be20:	73fb      	strb	r3, [r7, #15]
    break;
 800be22:	e005      	b.n	800be30 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800be24:	2302      	movs	r3, #2
 800be26:	73fb      	strb	r3, [r7, #15]
    break;
 800be28:	e002      	b.n	800be30 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800be2a:	2301      	movs	r3, #1
 800be2c:	73fb      	strb	r3, [r7, #15]
    break;
 800be2e:	bf00      	nop
  }
  return  speed;
 800be30:	7bfb      	ldrb	r3, [r7, #15]
}
 800be32:	4618      	mov	r0, r3
 800be34:	3710      	adds	r7, #16
 800be36:	46bd      	mov	sp, r7
 800be38:	bd80      	pop	{r7, pc}

0800be3a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800be3a:	b580      	push	{r7, lr}
 800be3c:	b084      	sub	sp, #16
 800be3e:	af00      	add	r7, sp, #0
 800be40:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800be42:	2300      	movs	r3, #0
 800be44:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800be46:	2300      	movs	r3, #0
 800be48:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be50:	4618      	mov	r0, r3
 800be52:	f7f8 fe81 	bl	8004b58 <HAL_HCD_ResetPort>
 800be56:	4603      	mov	r3, r0
 800be58:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800be5a:	7bfb      	ldrb	r3, [r7, #15]
 800be5c:	4618      	mov	r0, r3
 800be5e:	f000 f901 	bl	800c064 <USBH_Get_USB_Status>
 800be62:	4603      	mov	r3, r0
 800be64:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800be66:	7bbb      	ldrb	r3, [r7, #14]
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3710      	adds	r7, #16
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}

0800be70 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800be82:	78fa      	ldrb	r2, [r7, #3]
 800be84:	4611      	mov	r1, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7f8 fe89 	bl	8004b9e <HAL_HCD_HC_GetXferCount>
 800be8c:	4603      	mov	r3, r0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	3708      	adds	r7, #8
 800be92:	46bd      	mov	sp, r7
 800be94:	bd80      	pop	{r7, pc}

0800be96 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800be96:	b590      	push	{r4, r7, lr}
 800be98:	b089      	sub	sp, #36	@ 0x24
 800be9a:	af04      	add	r7, sp, #16
 800be9c:	6078      	str	r0, [r7, #4]
 800be9e:	4608      	mov	r0, r1
 800bea0:	4611      	mov	r1, r2
 800bea2:	461a      	mov	r2, r3
 800bea4:	4603      	mov	r3, r0
 800bea6:	70fb      	strb	r3, [r7, #3]
 800bea8:	460b      	mov	r3, r1
 800beaa:	70bb      	strb	r3, [r7, #2]
 800beac:	4613      	mov	r3, r2
 800beae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800beb4:	2300      	movs	r3, #0
 800beb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bebe:	787c      	ldrb	r4, [r7, #1]
 800bec0:	78ba      	ldrb	r2, [r7, #2]
 800bec2:	78f9      	ldrb	r1, [r7, #3]
 800bec4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bec6:	9302      	str	r3, [sp, #8]
 800bec8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800becc:	9301      	str	r3, [sp, #4]
 800bece:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	4623      	mov	r3, r4
 800bed6:	f7f8 fa75 	bl	80043c4 <HAL_HCD_HC_Init>
 800beda:	4603      	mov	r3, r0
 800bedc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800bede:	7bfb      	ldrb	r3, [r7, #15]
 800bee0:	4618      	mov	r0, r3
 800bee2:	f000 f8bf 	bl	800c064 <USBH_Get_USB_Status>
 800bee6:	4603      	mov	r3, r0
 800bee8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800beea:	7bbb      	ldrb	r3, [r7, #14]
}
 800beec:	4618      	mov	r0, r3
 800beee:	3714      	adds	r7, #20
 800bef0:	46bd      	mov	sp, r7
 800bef2:	bd90      	pop	{r4, r7, pc}

0800bef4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bef4:	b580      	push	{r7, lr}
 800bef6:	b084      	sub	sp, #16
 800bef8:	af00      	add	r7, sp, #0
 800befa:	6078      	str	r0, [r7, #4]
 800befc:	460b      	mov	r3, r1
 800befe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf00:	2300      	movs	r3, #0
 800bf02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf04:	2300      	movs	r3, #0
 800bf06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bf0e:	78fa      	ldrb	r2, [r7, #3]
 800bf10:	4611      	mov	r1, r2
 800bf12:	4618      	mov	r0, r3
 800bf14:	f7f8 fb0e 	bl	8004534 <HAL_HCD_HC_Halt>
 800bf18:	4603      	mov	r3, r0
 800bf1a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800bf1c:	7bfb      	ldrb	r3, [r7, #15]
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 f8a0 	bl	800c064 <USBH_Get_USB_Status>
 800bf24:	4603      	mov	r3, r0
 800bf26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf28:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	3710      	adds	r7, #16
 800bf2e:	46bd      	mov	sp, r7
 800bf30:	bd80      	pop	{r7, pc}

0800bf32 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800bf32:	b590      	push	{r4, r7, lr}
 800bf34:	b089      	sub	sp, #36	@ 0x24
 800bf36:	af04      	add	r7, sp, #16
 800bf38:	6078      	str	r0, [r7, #4]
 800bf3a:	4608      	mov	r0, r1
 800bf3c:	4611      	mov	r1, r2
 800bf3e:	461a      	mov	r2, r3
 800bf40:	4603      	mov	r3, r0
 800bf42:	70fb      	strb	r3, [r7, #3]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70bb      	strb	r3, [r7, #2]
 800bf48:	4613      	mov	r3, r2
 800bf4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800bf5a:	787c      	ldrb	r4, [r7, #1]
 800bf5c:	78ba      	ldrb	r2, [r7, #2]
 800bf5e:	78f9      	ldrb	r1, [r7, #3]
 800bf60:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800bf64:	9303      	str	r3, [sp, #12]
 800bf66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800bf68:	9302      	str	r3, [sp, #8]
 800bf6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf6c:	9301      	str	r3, [sp, #4]
 800bf6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	4623      	mov	r3, r4
 800bf76:	f7f8 fb01 	bl	800457c <HAL_HCD_HC_SubmitRequest>
 800bf7a:	4603      	mov	r3, r0
 800bf7c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800bf7e:	7bfb      	ldrb	r3, [r7, #15]
 800bf80:	4618      	mov	r0, r3
 800bf82:	f000 f86f 	bl	800c064 <USBH_Get_USB_Status>
 800bf86:	4603      	mov	r3, r0
 800bf88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bf8a:	7bbb      	ldrb	r3, [r7, #14]
}
 800bf8c:	4618      	mov	r0, r3
 800bf8e:	3714      	adds	r7, #20
 800bf90:	46bd      	mov	sp, r7
 800bf92:	bd90      	pop	{r4, r7, pc}

0800bf94 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800bf94:	b580      	push	{r7, lr}
 800bf96:	b082      	sub	sp, #8
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	6078      	str	r0, [r7, #4]
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bfa6:	78fa      	ldrb	r2, [r7, #3]
 800bfa8:	4611      	mov	r1, r2
 800bfaa:	4618      	mov	r0, r3
 800bfac:	f7f8 fde2 	bl	8004b74 <HAL_HCD_HC_GetURBState>
 800bfb0:	4603      	mov	r3, r0
}
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	3708      	adds	r7, #8
 800bfb6:	46bd      	mov	sp, r7
 800bfb8:	bd80      	pop	{r7, pc}

0800bfba <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800bfba:	b580      	push	{r7, lr}
 800bfbc:	b082      	sub	sp, #8
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800bfcc:	2b01      	cmp	r3, #1
 800bfce:	d103      	bne.n	800bfd8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800bfd0:	78fb      	ldrb	r3, [r7, #3]
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	f000 f872 	bl	800c0bc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800bfd8:	20c8      	movs	r0, #200	@ 0xc8
 800bfda:	f7f7 fea1 	bl	8003d20 <HAL_Delay>
  return USBH_OK;
 800bfde:	2300      	movs	r3, #0
}
 800bfe0:	4618      	mov	r0, r3
 800bfe2:	3708      	adds	r7, #8
 800bfe4:	46bd      	mov	sp, r7
 800bfe6:	bd80      	pop	{r7, pc}

0800bfe8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800bfe8:	b480      	push	{r7}
 800bfea:	b085      	sub	sp, #20
 800bfec:	af00      	add	r7, sp, #0
 800bfee:	6078      	str	r0, [r7, #4]
 800bff0:	460b      	mov	r3, r1
 800bff2:	70fb      	strb	r3, [r7, #3]
 800bff4:	4613      	mov	r3, r2
 800bff6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800bffe:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800c000:	78fa      	ldrb	r2, [r7, #3]
 800c002:	68f9      	ldr	r1, [r7, #12]
 800c004:	4613      	mov	r3, r2
 800c006:	011b      	lsls	r3, r3, #4
 800c008:	1a9b      	subs	r3, r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	440b      	add	r3, r1
 800c00e:	3317      	adds	r3, #23
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800c016:	78fa      	ldrb	r2, [r7, #3]
 800c018:	68f9      	ldr	r1, [r7, #12]
 800c01a:	4613      	mov	r3, r2
 800c01c:	011b      	lsls	r3, r3, #4
 800c01e:	1a9b      	subs	r3, r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	440b      	add	r3, r1
 800c024:	333c      	adds	r3, #60	@ 0x3c
 800c026:	78ba      	ldrb	r2, [r7, #2]
 800c028:	701a      	strb	r2, [r3, #0]
 800c02a:	e009      	b.n	800c040 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800c02c:	78fa      	ldrb	r2, [r7, #3]
 800c02e:	68f9      	ldr	r1, [r7, #12]
 800c030:	4613      	mov	r3, r2
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	1a9b      	subs	r3, r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	333d      	adds	r3, #61	@ 0x3d
 800c03c:	78ba      	ldrb	r2, [r7, #2]
 800c03e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	4618      	mov	r0, r3
 800c044:	3714      	adds	r7, #20
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800c04e:	b580      	push	{r7, lr}
 800c050:	b082      	sub	sp, #8
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f7f7 fe62 	bl	8003d20 <HAL_Delay>
}
 800c05c:	bf00      	nop
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	4603      	mov	r3, r0
 800c06c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800c06e:	2300      	movs	r3, #0
 800c070:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c072:	79fb      	ldrb	r3, [r7, #7]
 800c074:	2b03      	cmp	r3, #3
 800c076:	d817      	bhi.n	800c0a8 <USBH_Get_USB_Status+0x44>
 800c078:	a201      	add	r2, pc, #4	@ (adr r2, 800c080 <USBH_Get_USB_Status+0x1c>)
 800c07a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c07e:	bf00      	nop
 800c080:	0800c091 	.word	0x0800c091
 800c084:	0800c097 	.word	0x0800c097
 800c088:	0800c09d 	.word	0x0800c09d
 800c08c:	0800c0a3 	.word	0x0800c0a3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800c090:	2300      	movs	r3, #0
 800c092:	73fb      	strb	r3, [r7, #15]
    break;
 800c094:	e00b      	b.n	800c0ae <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800c096:	2302      	movs	r3, #2
 800c098:	73fb      	strb	r3, [r7, #15]
    break;
 800c09a:	e008      	b.n	800c0ae <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800c09c:	2301      	movs	r3, #1
 800c09e:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a0:	e005      	b.n	800c0ae <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800c0a2:	2302      	movs	r3, #2
 800c0a4:	73fb      	strb	r3, [r7, #15]
    break;
 800c0a6:	e002      	b.n	800c0ae <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800c0a8:	2302      	movs	r3, #2
 800c0aa:	73fb      	strb	r3, [r7, #15]
    break;
 800c0ac:	bf00      	nop
  }
  return usb_status;
 800c0ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	b084      	sub	sp, #16
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800c0c6:	79fb      	ldrb	r3, [r7, #7]
 800c0c8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800c0ca:	79fb      	ldrb	r3, [r7, #7]
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d102      	bne.n	800c0d6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	73fb      	strb	r3, [r7, #15]
 800c0d4:	e001      	b.n	800c0da <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800c0da:	7bfb      	ldrb	r3, [r7, #15]
 800c0dc:	461a      	mov	r2, r3
 800c0de:	2101      	movs	r1, #1
 800c0e0:	4803      	ldr	r0, [pc, #12]	@ (800c0f0 <MX_DriverVbusFS+0x34>)
 800c0e2:	f7f8 f8ef 	bl	80042c4 <HAL_GPIO_WritePin>
}
 800c0e6:	bf00      	nop
 800c0e8:	3710      	adds	r7, #16
 800c0ea:	46bd      	mov	sp, r7
 800c0ec:	bd80      	pop	{r7, pc}
 800c0ee:	bf00      	nop
 800c0f0:	40020800 	.word	0x40020800

0800c0f4 <__assert_func>:
 800c0f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c0f6:	4614      	mov	r4, r2
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	4b09      	ldr	r3, [pc, #36]	@ (800c120 <__assert_func+0x2c>)
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	4605      	mov	r5, r0
 800c100:	68d8      	ldr	r0, [r3, #12]
 800c102:	b14c      	cbz	r4, 800c118 <__assert_func+0x24>
 800c104:	4b07      	ldr	r3, [pc, #28]	@ (800c124 <__assert_func+0x30>)
 800c106:	9100      	str	r1, [sp, #0]
 800c108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c10c:	4906      	ldr	r1, [pc, #24]	@ (800c128 <__assert_func+0x34>)
 800c10e:	462b      	mov	r3, r5
 800c110:	f000 f970 	bl	800c3f4 <fiprintf>
 800c114:	f000 fc33 	bl	800c97e <abort>
 800c118:	4b04      	ldr	r3, [pc, #16]	@ (800c12c <__assert_func+0x38>)
 800c11a:	461c      	mov	r4, r3
 800c11c:	e7f3      	b.n	800c106 <__assert_func+0x12>
 800c11e:	bf00      	nop
 800c120:	200000a8 	.word	0x200000a8
 800c124:	0800d81e 	.word	0x0800d81e
 800c128:	0800d82b 	.word	0x0800d82b
 800c12c:	0800d859 	.word	0x0800d859

0800c130 <malloc>:
 800c130:	4b02      	ldr	r3, [pc, #8]	@ (800c13c <malloc+0xc>)
 800c132:	4601      	mov	r1, r0
 800c134:	6818      	ldr	r0, [r3, #0]
 800c136:	f000 b82d 	b.w	800c194 <_malloc_r>
 800c13a:	bf00      	nop
 800c13c:	200000a8 	.word	0x200000a8

0800c140 <free>:
 800c140:	4b02      	ldr	r3, [pc, #8]	@ (800c14c <free+0xc>)
 800c142:	4601      	mov	r1, r0
 800c144:	6818      	ldr	r0, [r3, #0]
 800c146:	f000 bc21 	b.w	800c98c <_free_r>
 800c14a:	bf00      	nop
 800c14c:	200000a8 	.word	0x200000a8

0800c150 <sbrk_aligned>:
 800c150:	b570      	push	{r4, r5, r6, lr}
 800c152:	4e0f      	ldr	r6, [pc, #60]	@ (800c190 <sbrk_aligned+0x40>)
 800c154:	460c      	mov	r4, r1
 800c156:	6831      	ldr	r1, [r6, #0]
 800c158:	4605      	mov	r5, r0
 800c15a:	b911      	cbnz	r1, 800c162 <sbrk_aligned+0x12>
 800c15c:	f000 fbb2 	bl	800c8c4 <_sbrk_r>
 800c160:	6030      	str	r0, [r6, #0]
 800c162:	4621      	mov	r1, r4
 800c164:	4628      	mov	r0, r5
 800c166:	f000 fbad 	bl	800c8c4 <_sbrk_r>
 800c16a:	1c43      	adds	r3, r0, #1
 800c16c:	d103      	bne.n	800c176 <sbrk_aligned+0x26>
 800c16e:	f04f 34ff 	mov.w	r4, #4294967295
 800c172:	4620      	mov	r0, r4
 800c174:	bd70      	pop	{r4, r5, r6, pc}
 800c176:	1cc4      	adds	r4, r0, #3
 800c178:	f024 0403 	bic.w	r4, r4, #3
 800c17c:	42a0      	cmp	r0, r4
 800c17e:	d0f8      	beq.n	800c172 <sbrk_aligned+0x22>
 800c180:	1a21      	subs	r1, r4, r0
 800c182:	4628      	mov	r0, r5
 800c184:	f000 fb9e 	bl	800c8c4 <_sbrk_r>
 800c188:	3001      	adds	r0, #1
 800c18a:	d1f2      	bne.n	800c172 <sbrk_aligned+0x22>
 800c18c:	e7ef      	b.n	800c16e <sbrk_aligned+0x1e>
 800c18e:	bf00      	nop
 800c190:	20000a24 	.word	0x20000a24

0800c194 <_malloc_r>:
 800c194:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c198:	1ccd      	adds	r5, r1, #3
 800c19a:	f025 0503 	bic.w	r5, r5, #3
 800c19e:	3508      	adds	r5, #8
 800c1a0:	2d0c      	cmp	r5, #12
 800c1a2:	bf38      	it	cc
 800c1a4:	250c      	movcc	r5, #12
 800c1a6:	2d00      	cmp	r5, #0
 800c1a8:	4606      	mov	r6, r0
 800c1aa:	db01      	blt.n	800c1b0 <_malloc_r+0x1c>
 800c1ac:	42a9      	cmp	r1, r5
 800c1ae:	d904      	bls.n	800c1ba <_malloc_r+0x26>
 800c1b0:	230c      	movs	r3, #12
 800c1b2:	6033      	str	r3, [r6, #0]
 800c1b4:	2000      	movs	r0, #0
 800c1b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c1ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c290 <_malloc_r+0xfc>
 800c1be:	f000 f869 	bl	800c294 <__malloc_lock>
 800c1c2:	f8d8 3000 	ldr.w	r3, [r8]
 800c1c6:	461c      	mov	r4, r3
 800c1c8:	bb44      	cbnz	r4, 800c21c <_malloc_r+0x88>
 800c1ca:	4629      	mov	r1, r5
 800c1cc:	4630      	mov	r0, r6
 800c1ce:	f7ff ffbf 	bl	800c150 <sbrk_aligned>
 800c1d2:	1c43      	adds	r3, r0, #1
 800c1d4:	4604      	mov	r4, r0
 800c1d6:	d158      	bne.n	800c28a <_malloc_r+0xf6>
 800c1d8:	f8d8 4000 	ldr.w	r4, [r8]
 800c1dc:	4627      	mov	r7, r4
 800c1de:	2f00      	cmp	r7, #0
 800c1e0:	d143      	bne.n	800c26a <_malloc_r+0xd6>
 800c1e2:	2c00      	cmp	r4, #0
 800c1e4:	d04b      	beq.n	800c27e <_malloc_r+0xea>
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	4639      	mov	r1, r7
 800c1ea:	4630      	mov	r0, r6
 800c1ec:	eb04 0903 	add.w	r9, r4, r3
 800c1f0:	f000 fb68 	bl	800c8c4 <_sbrk_r>
 800c1f4:	4581      	cmp	r9, r0
 800c1f6:	d142      	bne.n	800c27e <_malloc_r+0xea>
 800c1f8:	6821      	ldr	r1, [r4, #0]
 800c1fa:	1a6d      	subs	r5, r5, r1
 800c1fc:	4629      	mov	r1, r5
 800c1fe:	4630      	mov	r0, r6
 800c200:	f7ff ffa6 	bl	800c150 <sbrk_aligned>
 800c204:	3001      	adds	r0, #1
 800c206:	d03a      	beq.n	800c27e <_malloc_r+0xea>
 800c208:	6823      	ldr	r3, [r4, #0]
 800c20a:	442b      	add	r3, r5
 800c20c:	6023      	str	r3, [r4, #0]
 800c20e:	f8d8 3000 	ldr.w	r3, [r8]
 800c212:	685a      	ldr	r2, [r3, #4]
 800c214:	bb62      	cbnz	r2, 800c270 <_malloc_r+0xdc>
 800c216:	f8c8 7000 	str.w	r7, [r8]
 800c21a:	e00f      	b.n	800c23c <_malloc_r+0xa8>
 800c21c:	6822      	ldr	r2, [r4, #0]
 800c21e:	1b52      	subs	r2, r2, r5
 800c220:	d420      	bmi.n	800c264 <_malloc_r+0xd0>
 800c222:	2a0b      	cmp	r2, #11
 800c224:	d917      	bls.n	800c256 <_malloc_r+0xc2>
 800c226:	1961      	adds	r1, r4, r5
 800c228:	42a3      	cmp	r3, r4
 800c22a:	6025      	str	r5, [r4, #0]
 800c22c:	bf18      	it	ne
 800c22e:	6059      	strne	r1, [r3, #4]
 800c230:	6863      	ldr	r3, [r4, #4]
 800c232:	bf08      	it	eq
 800c234:	f8c8 1000 	streq.w	r1, [r8]
 800c238:	5162      	str	r2, [r4, r5]
 800c23a:	604b      	str	r3, [r1, #4]
 800c23c:	4630      	mov	r0, r6
 800c23e:	f000 f82f 	bl	800c2a0 <__malloc_unlock>
 800c242:	f104 000b 	add.w	r0, r4, #11
 800c246:	1d23      	adds	r3, r4, #4
 800c248:	f020 0007 	bic.w	r0, r0, #7
 800c24c:	1ac2      	subs	r2, r0, r3
 800c24e:	bf1c      	itt	ne
 800c250:	1a1b      	subne	r3, r3, r0
 800c252:	50a3      	strne	r3, [r4, r2]
 800c254:	e7af      	b.n	800c1b6 <_malloc_r+0x22>
 800c256:	6862      	ldr	r2, [r4, #4]
 800c258:	42a3      	cmp	r3, r4
 800c25a:	bf0c      	ite	eq
 800c25c:	f8c8 2000 	streq.w	r2, [r8]
 800c260:	605a      	strne	r2, [r3, #4]
 800c262:	e7eb      	b.n	800c23c <_malloc_r+0xa8>
 800c264:	4623      	mov	r3, r4
 800c266:	6864      	ldr	r4, [r4, #4]
 800c268:	e7ae      	b.n	800c1c8 <_malloc_r+0x34>
 800c26a:	463c      	mov	r4, r7
 800c26c:	687f      	ldr	r7, [r7, #4]
 800c26e:	e7b6      	b.n	800c1de <_malloc_r+0x4a>
 800c270:	461a      	mov	r2, r3
 800c272:	685b      	ldr	r3, [r3, #4]
 800c274:	42a3      	cmp	r3, r4
 800c276:	d1fb      	bne.n	800c270 <_malloc_r+0xdc>
 800c278:	2300      	movs	r3, #0
 800c27a:	6053      	str	r3, [r2, #4]
 800c27c:	e7de      	b.n	800c23c <_malloc_r+0xa8>
 800c27e:	230c      	movs	r3, #12
 800c280:	6033      	str	r3, [r6, #0]
 800c282:	4630      	mov	r0, r6
 800c284:	f000 f80c 	bl	800c2a0 <__malloc_unlock>
 800c288:	e794      	b.n	800c1b4 <_malloc_r+0x20>
 800c28a:	6005      	str	r5, [r0, #0]
 800c28c:	e7d6      	b.n	800c23c <_malloc_r+0xa8>
 800c28e:	bf00      	nop
 800c290:	20000a28 	.word	0x20000a28

0800c294 <__malloc_lock>:
 800c294:	4801      	ldr	r0, [pc, #4]	@ (800c29c <__malloc_lock+0x8>)
 800c296:	f000 bb62 	b.w	800c95e <__retarget_lock_acquire_recursive>
 800c29a:	bf00      	nop
 800c29c:	20000b6c 	.word	0x20000b6c

0800c2a0 <__malloc_unlock>:
 800c2a0:	4801      	ldr	r0, [pc, #4]	@ (800c2a8 <__malloc_unlock+0x8>)
 800c2a2:	f000 bb5d 	b.w	800c960 <__retarget_lock_release_recursive>
 800c2a6:	bf00      	nop
 800c2a8:	20000b6c 	.word	0x20000b6c

0800c2ac <std>:
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	b510      	push	{r4, lr}
 800c2b0:	4604      	mov	r4, r0
 800c2b2:	e9c0 3300 	strd	r3, r3, [r0]
 800c2b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c2ba:	6083      	str	r3, [r0, #8]
 800c2bc:	8181      	strh	r1, [r0, #12]
 800c2be:	6643      	str	r3, [r0, #100]	@ 0x64
 800c2c0:	81c2      	strh	r2, [r0, #14]
 800c2c2:	6183      	str	r3, [r0, #24]
 800c2c4:	4619      	mov	r1, r3
 800c2c6:	2208      	movs	r2, #8
 800c2c8:	305c      	adds	r0, #92	@ 0x5c
 800c2ca:	f000 fabf 	bl	800c84c <memset>
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	@ (800c304 <std+0x58>)
 800c2d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800c2d2:	4b0d      	ldr	r3, [pc, #52]	@ (800c308 <std+0x5c>)
 800c2d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c2d6:	4b0d      	ldr	r3, [pc, #52]	@ (800c30c <std+0x60>)
 800c2d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c2da:	4b0d      	ldr	r3, [pc, #52]	@ (800c310 <std+0x64>)
 800c2dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800c2de:	4b0d      	ldr	r3, [pc, #52]	@ (800c314 <std+0x68>)
 800c2e0:	6224      	str	r4, [r4, #32]
 800c2e2:	429c      	cmp	r4, r3
 800c2e4:	d006      	beq.n	800c2f4 <std+0x48>
 800c2e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c2ea:	4294      	cmp	r4, r2
 800c2ec:	d002      	beq.n	800c2f4 <std+0x48>
 800c2ee:	33d0      	adds	r3, #208	@ 0xd0
 800c2f0:	429c      	cmp	r4, r3
 800c2f2:	d105      	bne.n	800c300 <std+0x54>
 800c2f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fc:	f000 bb2e 	b.w	800c95c <__retarget_lock_init_recursive>
 800c300:	bd10      	pop	{r4, pc}
 800c302:	bf00      	nop
 800c304:	0800c69d 	.word	0x0800c69d
 800c308:	0800c6bf 	.word	0x0800c6bf
 800c30c:	0800c6f7 	.word	0x0800c6f7
 800c310:	0800c71b 	.word	0x0800c71b
 800c314:	20000a2c 	.word	0x20000a2c

0800c318 <stdio_exit_handler>:
 800c318:	4a02      	ldr	r2, [pc, #8]	@ (800c324 <stdio_exit_handler+0xc>)
 800c31a:	4903      	ldr	r1, [pc, #12]	@ (800c328 <stdio_exit_handler+0x10>)
 800c31c:	4803      	ldr	r0, [pc, #12]	@ (800c32c <stdio_exit_handler+0x14>)
 800c31e:	f000 b87b 	b.w	800c418 <_fwalk_sglue>
 800c322:	bf00      	nop
 800c324:	2000009c 	.word	0x2000009c
 800c328:	0800d0c5 	.word	0x0800d0c5
 800c32c:	200000ac 	.word	0x200000ac

0800c330 <cleanup_stdio>:
 800c330:	6841      	ldr	r1, [r0, #4]
 800c332:	4b0c      	ldr	r3, [pc, #48]	@ (800c364 <cleanup_stdio+0x34>)
 800c334:	4299      	cmp	r1, r3
 800c336:	b510      	push	{r4, lr}
 800c338:	4604      	mov	r4, r0
 800c33a:	d001      	beq.n	800c340 <cleanup_stdio+0x10>
 800c33c:	f000 fec2 	bl	800d0c4 <_fflush_r>
 800c340:	68a1      	ldr	r1, [r4, #8]
 800c342:	4b09      	ldr	r3, [pc, #36]	@ (800c368 <cleanup_stdio+0x38>)
 800c344:	4299      	cmp	r1, r3
 800c346:	d002      	beq.n	800c34e <cleanup_stdio+0x1e>
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 febb 	bl	800d0c4 <_fflush_r>
 800c34e:	68e1      	ldr	r1, [r4, #12]
 800c350:	4b06      	ldr	r3, [pc, #24]	@ (800c36c <cleanup_stdio+0x3c>)
 800c352:	4299      	cmp	r1, r3
 800c354:	d004      	beq.n	800c360 <cleanup_stdio+0x30>
 800c356:	4620      	mov	r0, r4
 800c358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c35c:	f000 beb2 	b.w	800d0c4 <_fflush_r>
 800c360:	bd10      	pop	{r4, pc}
 800c362:	bf00      	nop
 800c364:	20000a2c 	.word	0x20000a2c
 800c368:	20000a94 	.word	0x20000a94
 800c36c:	20000afc 	.word	0x20000afc

0800c370 <global_stdio_init.part.0>:
 800c370:	b510      	push	{r4, lr}
 800c372:	4b0b      	ldr	r3, [pc, #44]	@ (800c3a0 <global_stdio_init.part.0+0x30>)
 800c374:	4c0b      	ldr	r4, [pc, #44]	@ (800c3a4 <global_stdio_init.part.0+0x34>)
 800c376:	4a0c      	ldr	r2, [pc, #48]	@ (800c3a8 <global_stdio_init.part.0+0x38>)
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	4620      	mov	r0, r4
 800c37c:	2200      	movs	r2, #0
 800c37e:	2104      	movs	r1, #4
 800c380:	f7ff ff94 	bl	800c2ac <std>
 800c384:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c388:	2201      	movs	r2, #1
 800c38a:	2109      	movs	r1, #9
 800c38c:	f7ff ff8e 	bl	800c2ac <std>
 800c390:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c394:	2202      	movs	r2, #2
 800c396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c39a:	2112      	movs	r1, #18
 800c39c:	f7ff bf86 	b.w	800c2ac <std>
 800c3a0:	20000b64 	.word	0x20000b64
 800c3a4:	20000a2c 	.word	0x20000a2c
 800c3a8:	0800c319 	.word	0x0800c319

0800c3ac <__sfp_lock_acquire>:
 800c3ac:	4801      	ldr	r0, [pc, #4]	@ (800c3b4 <__sfp_lock_acquire+0x8>)
 800c3ae:	f000 bad6 	b.w	800c95e <__retarget_lock_acquire_recursive>
 800c3b2:	bf00      	nop
 800c3b4:	20000b6d 	.word	0x20000b6d

0800c3b8 <__sfp_lock_release>:
 800c3b8:	4801      	ldr	r0, [pc, #4]	@ (800c3c0 <__sfp_lock_release+0x8>)
 800c3ba:	f000 bad1 	b.w	800c960 <__retarget_lock_release_recursive>
 800c3be:	bf00      	nop
 800c3c0:	20000b6d 	.word	0x20000b6d

0800c3c4 <__sinit>:
 800c3c4:	b510      	push	{r4, lr}
 800c3c6:	4604      	mov	r4, r0
 800c3c8:	f7ff fff0 	bl	800c3ac <__sfp_lock_acquire>
 800c3cc:	6a23      	ldr	r3, [r4, #32]
 800c3ce:	b11b      	cbz	r3, 800c3d8 <__sinit+0x14>
 800c3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3d4:	f7ff bff0 	b.w	800c3b8 <__sfp_lock_release>
 800c3d8:	4b04      	ldr	r3, [pc, #16]	@ (800c3ec <__sinit+0x28>)
 800c3da:	6223      	str	r3, [r4, #32]
 800c3dc:	4b04      	ldr	r3, [pc, #16]	@ (800c3f0 <__sinit+0x2c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d1f5      	bne.n	800c3d0 <__sinit+0xc>
 800c3e4:	f7ff ffc4 	bl	800c370 <global_stdio_init.part.0>
 800c3e8:	e7f2      	b.n	800c3d0 <__sinit+0xc>
 800c3ea:	bf00      	nop
 800c3ec:	0800c331 	.word	0x0800c331
 800c3f0:	20000b64 	.word	0x20000b64

0800c3f4 <fiprintf>:
 800c3f4:	b40e      	push	{r1, r2, r3}
 800c3f6:	b503      	push	{r0, r1, lr}
 800c3f8:	4601      	mov	r1, r0
 800c3fa:	ab03      	add	r3, sp, #12
 800c3fc:	4805      	ldr	r0, [pc, #20]	@ (800c414 <fiprintf+0x20>)
 800c3fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800c402:	6800      	ldr	r0, [r0, #0]
 800c404:	9301      	str	r3, [sp, #4]
 800c406:	f000 fb35 	bl	800ca74 <_vfiprintf_r>
 800c40a:	b002      	add	sp, #8
 800c40c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c410:	b003      	add	sp, #12
 800c412:	4770      	bx	lr
 800c414:	200000a8 	.word	0x200000a8

0800c418 <_fwalk_sglue>:
 800c418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c41c:	4607      	mov	r7, r0
 800c41e:	4688      	mov	r8, r1
 800c420:	4614      	mov	r4, r2
 800c422:	2600      	movs	r6, #0
 800c424:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c428:	f1b9 0901 	subs.w	r9, r9, #1
 800c42c:	d505      	bpl.n	800c43a <_fwalk_sglue+0x22>
 800c42e:	6824      	ldr	r4, [r4, #0]
 800c430:	2c00      	cmp	r4, #0
 800c432:	d1f7      	bne.n	800c424 <_fwalk_sglue+0xc>
 800c434:	4630      	mov	r0, r6
 800c436:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c43a:	89ab      	ldrh	r3, [r5, #12]
 800c43c:	2b01      	cmp	r3, #1
 800c43e:	d907      	bls.n	800c450 <_fwalk_sglue+0x38>
 800c440:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c444:	3301      	adds	r3, #1
 800c446:	d003      	beq.n	800c450 <_fwalk_sglue+0x38>
 800c448:	4629      	mov	r1, r5
 800c44a:	4638      	mov	r0, r7
 800c44c:	47c0      	blx	r8
 800c44e:	4306      	orrs	r6, r0
 800c450:	3568      	adds	r5, #104	@ 0x68
 800c452:	e7e9      	b.n	800c428 <_fwalk_sglue+0x10>

0800c454 <iprintf>:
 800c454:	b40f      	push	{r0, r1, r2, r3}
 800c456:	b507      	push	{r0, r1, r2, lr}
 800c458:	4906      	ldr	r1, [pc, #24]	@ (800c474 <iprintf+0x20>)
 800c45a:	ab04      	add	r3, sp, #16
 800c45c:	6808      	ldr	r0, [r1, #0]
 800c45e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c462:	6881      	ldr	r1, [r0, #8]
 800c464:	9301      	str	r3, [sp, #4]
 800c466:	f000 fb05 	bl	800ca74 <_vfiprintf_r>
 800c46a:	b003      	add	sp, #12
 800c46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c470:	b004      	add	sp, #16
 800c472:	4770      	bx	lr
 800c474:	200000a8 	.word	0x200000a8

0800c478 <_puts_r>:
 800c478:	6a03      	ldr	r3, [r0, #32]
 800c47a:	b570      	push	{r4, r5, r6, lr}
 800c47c:	6884      	ldr	r4, [r0, #8]
 800c47e:	4605      	mov	r5, r0
 800c480:	460e      	mov	r6, r1
 800c482:	b90b      	cbnz	r3, 800c488 <_puts_r+0x10>
 800c484:	f7ff ff9e 	bl	800c3c4 <__sinit>
 800c488:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c48a:	07db      	lsls	r3, r3, #31
 800c48c:	d405      	bmi.n	800c49a <_puts_r+0x22>
 800c48e:	89a3      	ldrh	r3, [r4, #12]
 800c490:	0598      	lsls	r0, r3, #22
 800c492:	d402      	bmi.n	800c49a <_puts_r+0x22>
 800c494:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c496:	f000 fa62 	bl	800c95e <__retarget_lock_acquire_recursive>
 800c49a:	89a3      	ldrh	r3, [r4, #12]
 800c49c:	0719      	lsls	r1, r3, #28
 800c49e:	d502      	bpl.n	800c4a6 <_puts_r+0x2e>
 800c4a0:	6923      	ldr	r3, [r4, #16]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d135      	bne.n	800c512 <_puts_r+0x9a>
 800c4a6:	4621      	mov	r1, r4
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	f000 f979 	bl	800c7a0 <__swsetup_r>
 800c4ae:	b380      	cbz	r0, 800c512 <_puts_r+0x9a>
 800c4b0:	f04f 35ff 	mov.w	r5, #4294967295
 800c4b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c4b6:	07da      	lsls	r2, r3, #31
 800c4b8:	d405      	bmi.n	800c4c6 <_puts_r+0x4e>
 800c4ba:	89a3      	ldrh	r3, [r4, #12]
 800c4bc:	059b      	lsls	r3, r3, #22
 800c4be:	d402      	bmi.n	800c4c6 <_puts_r+0x4e>
 800c4c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c4c2:	f000 fa4d 	bl	800c960 <__retarget_lock_release_recursive>
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	bd70      	pop	{r4, r5, r6, pc}
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	da04      	bge.n	800c4d8 <_puts_r+0x60>
 800c4ce:	69a2      	ldr	r2, [r4, #24]
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	dc17      	bgt.n	800c504 <_puts_r+0x8c>
 800c4d4:	290a      	cmp	r1, #10
 800c4d6:	d015      	beq.n	800c504 <_puts_r+0x8c>
 800c4d8:	6823      	ldr	r3, [r4, #0]
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	6022      	str	r2, [r4, #0]
 800c4de:	7019      	strb	r1, [r3, #0]
 800c4e0:	68a3      	ldr	r3, [r4, #8]
 800c4e2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	60a3      	str	r3, [r4, #8]
 800c4ea:	2900      	cmp	r1, #0
 800c4ec:	d1ed      	bne.n	800c4ca <_puts_r+0x52>
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	da11      	bge.n	800c516 <_puts_r+0x9e>
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	210a      	movs	r1, #10
 800c4f6:	4628      	mov	r0, r5
 800c4f8:	f000 f913 	bl	800c722 <__swbuf_r>
 800c4fc:	3001      	adds	r0, #1
 800c4fe:	d0d7      	beq.n	800c4b0 <_puts_r+0x38>
 800c500:	250a      	movs	r5, #10
 800c502:	e7d7      	b.n	800c4b4 <_puts_r+0x3c>
 800c504:	4622      	mov	r2, r4
 800c506:	4628      	mov	r0, r5
 800c508:	f000 f90b 	bl	800c722 <__swbuf_r>
 800c50c:	3001      	adds	r0, #1
 800c50e:	d1e7      	bne.n	800c4e0 <_puts_r+0x68>
 800c510:	e7ce      	b.n	800c4b0 <_puts_r+0x38>
 800c512:	3e01      	subs	r6, #1
 800c514:	e7e4      	b.n	800c4e0 <_puts_r+0x68>
 800c516:	6823      	ldr	r3, [r4, #0]
 800c518:	1c5a      	adds	r2, r3, #1
 800c51a:	6022      	str	r2, [r4, #0]
 800c51c:	220a      	movs	r2, #10
 800c51e:	701a      	strb	r2, [r3, #0]
 800c520:	e7ee      	b.n	800c500 <_puts_r+0x88>
	...

0800c524 <puts>:
 800c524:	4b02      	ldr	r3, [pc, #8]	@ (800c530 <puts+0xc>)
 800c526:	4601      	mov	r1, r0
 800c528:	6818      	ldr	r0, [r3, #0]
 800c52a:	f7ff bfa5 	b.w	800c478 <_puts_r>
 800c52e:	bf00      	nop
 800c530:	200000a8 	.word	0x200000a8

0800c534 <setvbuf>:
 800c534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c538:	461d      	mov	r5, r3
 800c53a:	4b57      	ldr	r3, [pc, #348]	@ (800c698 <setvbuf+0x164>)
 800c53c:	681f      	ldr	r7, [r3, #0]
 800c53e:	4604      	mov	r4, r0
 800c540:	460e      	mov	r6, r1
 800c542:	4690      	mov	r8, r2
 800c544:	b127      	cbz	r7, 800c550 <setvbuf+0x1c>
 800c546:	6a3b      	ldr	r3, [r7, #32]
 800c548:	b913      	cbnz	r3, 800c550 <setvbuf+0x1c>
 800c54a:	4638      	mov	r0, r7
 800c54c:	f7ff ff3a 	bl	800c3c4 <__sinit>
 800c550:	f1b8 0f02 	cmp.w	r8, #2
 800c554:	d006      	beq.n	800c564 <setvbuf+0x30>
 800c556:	f1b8 0f01 	cmp.w	r8, #1
 800c55a:	f200 809a 	bhi.w	800c692 <setvbuf+0x15e>
 800c55e:	2d00      	cmp	r5, #0
 800c560:	f2c0 8097 	blt.w	800c692 <setvbuf+0x15e>
 800c564:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c566:	07d9      	lsls	r1, r3, #31
 800c568:	d405      	bmi.n	800c576 <setvbuf+0x42>
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	059a      	lsls	r2, r3, #22
 800c56e:	d402      	bmi.n	800c576 <setvbuf+0x42>
 800c570:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c572:	f000 f9f4 	bl	800c95e <__retarget_lock_acquire_recursive>
 800c576:	4621      	mov	r1, r4
 800c578:	4638      	mov	r0, r7
 800c57a:	f000 fda3 	bl	800d0c4 <_fflush_r>
 800c57e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c580:	b141      	cbz	r1, 800c594 <setvbuf+0x60>
 800c582:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c586:	4299      	cmp	r1, r3
 800c588:	d002      	beq.n	800c590 <setvbuf+0x5c>
 800c58a:	4638      	mov	r0, r7
 800c58c:	f000 f9fe 	bl	800c98c <_free_r>
 800c590:	2300      	movs	r3, #0
 800c592:	6363      	str	r3, [r4, #52]	@ 0x34
 800c594:	2300      	movs	r3, #0
 800c596:	61a3      	str	r3, [r4, #24]
 800c598:	6063      	str	r3, [r4, #4]
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	061b      	lsls	r3, r3, #24
 800c59e:	d503      	bpl.n	800c5a8 <setvbuf+0x74>
 800c5a0:	6921      	ldr	r1, [r4, #16]
 800c5a2:	4638      	mov	r0, r7
 800c5a4:	f000 f9f2 	bl	800c98c <_free_r>
 800c5a8:	89a3      	ldrh	r3, [r4, #12]
 800c5aa:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800c5ae:	f023 0303 	bic.w	r3, r3, #3
 800c5b2:	f1b8 0f02 	cmp.w	r8, #2
 800c5b6:	81a3      	strh	r3, [r4, #12]
 800c5b8:	d061      	beq.n	800c67e <setvbuf+0x14a>
 800c5ba:	ab01      	add	r3, sp, #4
 800c5bc:	466a      	mov	r2, sp
 800c5be:	4621      	mov	r1, r4
 800c5c0:	4638      	mov	r0, r7
 800c5c2:	f000 fda7 	bl	800d114 <__swhatbuf_r>
 800c5c6:	89a3      	ldrh	r3, [r4, #12]
 800c5c8:	4318      	orrs	r0, r3
 800c5ca:	81a0      	strh	r0, [r4, #12]
 800c5cc:	bb2d      	cbnz	r5, 800c61a <setvbuf+0xe6>
 800c5ce:	9d00      	ldr	r5, [sp, #0]
 800c5d0:	4628      	mov	r0, r5
 800c5d2:	f7ff fdad 	bl	800c130 <malloc>
 800c5d6:	4606      	mov	r6, r0
 800c5d8:	2800      	cmp	r0, #0
 800c5da:	d152      	bne.n	800c682 <setvbuf+0x14e>
 800c5dc:	f8dd 9000 	ldr.w	r9, [sp]
 800c5e0:	45a9      	cmp	r9, r5
 800c5e2:	d140      	bne.n	800c666 <setvbuf+0x132>
 800c5e4:	f04f 35ff 	mov.w	r5, #4294967295
 800c5e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5ec:	f043 0202 	orr.w	r2, r3, #2
 800c5f0:	81a2      	strh	r2, [r4, #12]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	60a2      	str	r2, [r4, #8]
 800c5f6:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800c5fa:	6022      	str	r2, [r4, #0]
 800c5fc:	6122      	str	r2, [r4, #16]
 800c5fe:	2201      	movs	r2, #1
 800c600:	6162      	str	r2, [r4, #20]
 800c602:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c604:	07d6      	lsls	r6, r2, #31
 800c606:	d404      	bmi.n	800c612 <setvbuf+0xde>
 800c608:	0598      	lsls	r0, r3, #22
 800c60a:	d402      	bmi.n	800c612 <setvbuf+0xde>
 800c60c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c60e:	f000 f9a7 	bl	800c960 <__retarget_lock_release_recursive>
 800c612:	4628      	mov	r0, r5
 800c614:	b003      	add	sp, #12
 800c616:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c61a:	2e00      	cmp	r6, #0
 800c61c:	d0d8      	beq.n	800c5d0 <setvbuf+0x9c>
 800c61e:	6a3b      	ldr	r3, [r7, #32]
 800c620:	b913      	cbnz	r3, 800c628 <setvbuf+0xf4>
 800c622:	4638      	mov	r0, r7
 800c624:	f7ff fece 	bl	800c3c4 <__sinit>
 800c628:	f1b8 0f01 	cmp.w	r8, #1
 800c62c:	bf08      	it	eq
 800c62e:	89a3      	ldrheq	r3, [r4, #12]
 800c630:	6026      	str	r6, [r4, #0]
 800c632:	bf04      	itt	eq
 800c634:	f043 0301 	orreq.w	r3, r3, #1
 800c638:	81a3      	strheq	r3, [r4, #12]
 800c63a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c63e:	f013 0208 	ands.w	r2, r3, #8
 800c642:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800c646:	d01e      	beq.n	800c686 <setvbuf+0x152>
 800c648:	07d9      	lsls	r1, r3, #31
 800c64a:	bf41      	itttt	mi
 800c64c:	2200      	movmi	r2, #0
 800c64e:	426d      	negmi	r5, r5
 800c650:	60a2      	strmi	r2, [r4, #8]
 800c652:	61a5      	strmi	r5, [r4, #24]
 800c654:	bf58      	it	pl
 800c656:	60a5      	strpl	r5, [r4, #8]
 800c658:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c65a:	07d2      	lsls	r2, r2, #31
 800c65c:	d401      	bmi.n	800c662 <setvbuf+0x12e>
 800c65e:	059b      	lsls	r3, r3, #22
 800c660:	d513      	bpl.n	800c68a <setvbuf+0x156>
 800c662:	2500      	movs	r5, #0
 800c664:	e7d5      	b.n	800c612 <setvbuf+0xde>
 800c666:	4648      	mov	r0, r9
 800c668:	f7ff fd62 	bl	800c130 <malloc>
 800c66c:	4606      	mov	r6, r0
 800c66e:	2800      	cmp	r0, #0
 800c670:	d0b8      	beq.n	800c5e4 <setvbuf+0xb0>
 800c672:	89a3      	ldrh	r3, [r4, #12]
 800c674:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c678:	81a3      	strh	r3, [r4, #12]
 800c67a:	464d      	mov	r5, r9
 800c67c:	e7cf      	b.n	800c61e <setvbuf+0xea>
 800c67e:	2500      	movs	r5, #0
 800c680:	e7b2      	b.n	800c5e8 <setvbuf+0xb4>
 800c682:	46a9      	mov	r9, r5
 800c684:	e7f5      	b.n	800c672 <setvbuf+0x13e>
 800c686:	60a2      	str	r2, [r4, #8]
 800c688:	e7e6      	b.n	800c658 <setvbuf+0x124>
 800c68a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c68c:	f000 f968 	bl	800c960 <__retarget_lock_release_recursive>
 800c690:	e7e7      	b.n	800c662 <setvbuf+0x12e>
 800c692:	f04f 35ff 	mov.w	r5, #4294967295
 800c696:	e7bc      	b.n	800c612 <setvbuf+0xde>
 800c698:	200000a8 	.word	0x200000a8

0800c69c <__sread>:
 800c69c:	b510      	push	{r4, lr}
 800c69e:	460c      	mov	r4, r1
 800c6a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a4:	f000 f8fc 	bl	800c8a0 <_read_r>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	bfab      	itete	ge
 800c6ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6ae:	89a3      	ldrhlt	r3, [r4, #12]
 800c6b0:	181b      	addge	r3, r3, r0
 800c6b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6b6:	bfac      	ite	ge
 800c6b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6ba:	81a3      	strhlt	r3, [r4, #12]
 800c6bc:	bd10      	pop	{r4, pc}

0800c6be <__swrite>:
 800c6be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6c2:	461f      	mov	r7, r3
 800c6c4:	898b      	ldrh	r3, [r1, #12]
 800c6c6:	05db      	lsls	r3, r3, #23
 800c6c8:	4605      	mov	r5, r0
 800c6ca:	460c      	mov	r4, r1
 800c6cc:	4616      	mov	r6, r2
 800c6ce:	d505      	bpl.n	800c6dc <__swrite+0x1e>
 800c6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d4:	2302      	movs	r3, #2
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f000 f8d0 	bl	800c87c <_lseek_r>
 800c6dc:	89a3      	ldrh	r3, [r4, #12]
 800c6de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6e2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c6e6:	81a3      	strh	r3, [r4, #12]
 800c6e8:	4632      	mov	r2, r6
 800c6ea:	463b      	mov	r3, r7
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f2:	f000 b8f7 	b.w	800c8e4 <_write_r>

0800c6f6 <__sseek>:
 800c6f6:	b510      	push	{r4, lr}
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fe:	f000 f8bd 	bl	800c87c <_lseek_r>
 800c702:	1c43      	adds	r3, r0, #1
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	bf15      	itete	ne
 800c708:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c70a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c70e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c712:	81a3      	strheq	r3, [r4, #12]
 800c714:	bf18      	it	ne
 800c716:	81a3      	strhne	r3, [r4, #12]
 800c718:	bd10      	pop	{r4, pc}

0800c71a <__sclose>:
 800c71a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71e:	f000 b89d 	b.w	800c85c <_close_r>

0800c722 <__swbuf_r>:
 800c722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c724:	460e      	mov	r6, r1
 800c726:	4614      	mov	r4, r2
 800c728:	4605      	mov	r5, r0
 800c72a:	b118      	cbz	r0, 800c734 <__swbuf_r+0x12>
 800c72c:	6a03      	ldr	r3, [r0, #32]
 800c72e:	b90b      	cbnz	r3, 800c734 <__swbuf_r+0x12>
 800c730:	f7ff fe48 	bl	800c3c4 <__sinit>
 800c734:	69a3      	ldr	r3, [r4, #24]
 800c736:	60a3      	str	r3, [r4, #8]
 800c738:	89a3      	ldrh	r3, [r4, #12]
 800c73a:	071a      	lsls	r2, r3, #28
 800c73c:	d501      	bpl.n	800c742 <__swbuf_r+0x20>
 800c73e:	6923      	ldr	r3, [r4, #16]
 800c740:	b943      	cbnz	r3, 800c754 <__swbuf_r+0x32>
 800c742:	4621      	mov	r1, r4
 800c744:	4628      	mov	r0, r5
 800c746:	f000 f82b 	bl	800c7a0 <__swsetup_r>
 800c74a:	b118      	cbz	r0, 800c754 <__swbuf_r+0x32>
 800c74c:	f04f 37ff 	mov.w	r7, #4294967295
 800c750:	4638      	mov	r0, r7
 800c752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c754:	6823      	ldr	r3, [r4, #0]
 800c756:	6922      	ldr	r2, [r4, #16]
 800c758:	1a98      	subs	r0, r3, r2
 800c75a:	6963      	ldr	r3, [r4, #20]
 800c75c:	b2f6      	uxtb	r6, r6
 800c75e:	4283      	cmp	r3, r0
 800c760:	4637      	mov	r7, r6
 800c762:	dc05      	bgt.n	800c770 <__swbuf_r+0x4e>
 800c764:	4621      	mov	r1, r4
 800c766:	4628      	mov	r0, r5
 800c768:	f000 fcac 	bl	800d0c4 <_fflush_r>
 800c76c:	2800      	cmp	r0, #0
 800c76e:	d1ed      	bne.n	800c74c <__swbuf_r+0x2a>
 800c770:	68a3      	ldr	r3, [r4, #8]
 800c772:	3b01      	subs	r3, #1
 800c774:	60a3      	str	r3, [r4, #8]
 800c776:	6823      	ldr	r3, [r4, #0]
 800c778:	1c5a      	adds	r2, r3, #1
 800c77a:	6022      	str	r2, [r4, #0]
 800c77c:	701e      	strb	r6, [r3, #0]
 800c77e:	6962      	ldr	r2, [r4, #20]
 800c780:	1c43      	adds	r3, r0, #1
 800c782:	429a      	cmp	r2, r3
 800c784:	d004      	beq.n	800c790 <__swbuf_r+0x6e>
 800c786:	89a3      	ldrh	r3, [r4, #12]
 800c788:	07db      	lsls	r3, r3, #31
 800c78a:	d5e1      	bpl.n	800c750 <__swbuf_r+0x2e>
 800c78c:	2e0a      	cmp	r6, #10
 800c78e:	d1df      	bne.n	800c750 <__swbuf_r+0x2e>
 800c790:	4621      	mov	r1, r4
 800c792:	4628      	mov	r0, r5
 800c794:	f000 fc96 	bl	800d0c4 <_fflush_r>
 800c798:	2800      	cmp	r0, #0
 800c79a:	d0d9      	beq.n	800c750 <__swbuf_r+0x2e>
 800c79c:	e7d6      	b.n	800c74c <__swbuf_r+0x2a>
	...

0800c7a0 <__swsetup_r>:
 800c7a0:	b538      	push	{r3, r4, r5, lr}
 800c7a2:	4b29      	ldr	r3, [pc, #164]	@ (800c848 <__swsetup_r+0xa8>)
 800c7a4:	4605      	mov	r5, r0
 800c7a6:	6818      	ldr	r0, [r3, #0]
 800c7a8:	460c      	mov	r4, r1
 800c7aa:	b118      	cbz	r0, 800c7b4 <__swsetup_r+0x14>
 800c7ac:	6a03      	ldr	r3, [r0, #32]
 800c7ae:	b90b      	cbnz	r3, 800c7b4 <__swsetup_r+0x14>
 800c7b0:	f7ff fe08 	bl	800c3c4 <__sinit>
 800c7b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b8:	0719      	lsls	r1, r3, #28
 800c7ba:	d422      	bmi.n	800c802 <__swsetup_r+0x62>
 800c7bc:	06da      	lsls	r2, r3, #27
 800c7be:	d407      	bmi.n	800c7d0 <__swsetup_r+0x30>
 800c7c0:	2209      	movs	r2, #9
 800c7c2:	602a      	str	r2, [r5, #0]
 800c7c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c7c8:	81a3      	strh	r3, [r4, #12]
 800c7ca:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ce:	e033      	b.n	800c838 <__swsetup_r+0x98>
 800c7d0:	0758      	lsls	r0, r3, #29
 800c7d2:	d512      	bpl.n	800c7fa <__swsetup_r+0x5a>
 800c7d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c7d6:	b141      	cbz	r1, 800c7ea <__swsetup_r+0x4a>
 800c7d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c7dc:	4299      	cmp	r1, r3
 800c7de:	d002      	beq.n	800c7e6 <__swsetup_r+0x46>
 800c7e0:	4628      	mov	r0, r5
 800c7e2:	f000 f8d3 	bl	800c98c <_free_r>
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800c7ea:	89a3      	ldrh	r3, [r4, #12]
 800c7ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c7f0:	81a3      	strh	r3, [r4, #12]
 800c7f2:	2300      	movs	r3, #0
 800c7f4:	6063      	str	r3, [r4, #4]
 800c7f6:	6923      	ldr	r3, [r4, #16]
 800c7f8:	6023      	str	r3, [r4, #0]
 800c7fa:	89a3      	ldrh	r3, [r4, #12]
 800c7fc:	f043 0308 	orr.w	r3, r3, #8
 800c800:	81a3      	strh	r3, [r4, #12]
 800c802:	6923      	ldr	r3, [r4, #16]
 800c804:	b94b      	cbnz	r3, 800c81a <__swsetup_r+0x7a>
 800c806:	89a3      	ldrh	r3, [r4, #12]
 800c808:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c80c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c810:	d003      	beq.n	800c81a <__swsetup_r+0x7a>
 800c812:	4621      	mov	r1, r4
 800c814:	4628      	mov	r0, r5
 800c816:	f000 fca3 	bl	800d160 <__smakebuf_r>
 800c81a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c81e:	f013 0201 	ands.w	r2, r3, #1
 800c822:	d00a      	beq.n	800c83a <__swsetup_r+0x9a>
 800c824:	2200      	movs	r2, #0
 800c826:	60a2      	str	r2, [r4, #8]
 800c828:	6962      	ldr	r2, [r4, #20]
 800c82a:	4252      	negs	r2, r2
 800c82c:	61a2      	str	r2, [r4, #24]
 800c82e:	6922      	ldr	r2, [r4, #16]
 800c830:	b942      	cbnz	r2, 800c844 <__swsetup_r+0xa4>
 800c832:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c836:	d1c5      	bne.n	800c7c4 <__swsetup_r+0x24>
 800c838:	bd38      	pop	{r3, r4, r5, pc}
 800c83a:	0799      	lsls	r1, r3, #30
 800c83c:	bf58      	it	pl
 800c83e:	6962      	ldrpl	r2, [r4, #20]
 800c840:	60a2      	str	r2, [r4, #8]
 800c842:	e7f4      	b.n	800c82e <__swsetup_r+0x8e>
 800c844:	2000      	movs	r0, #0
 800c846:	e7f7      	b.n	800c838 <__swsetup_r+0x98>
 800c848:	200000a8 	.word	0x200000a8

0800c84c <memset>:
 800c84c:	4402      	add	r2, r0
 800c84e:	4603      	mov	r3, r0
 800c850:	4293      	cmp	r3, r2
 800c852:	d100      	bne.n	800c856 <memset+0xa>
 800c854:	4770      	bx	lr
 800c856:	f803 1b01 	strb.w	r1, [r3], #1
 800c85a:	e7f9      	b.n	800c850 <memset+0x4>

0800c85c <_close_r>:
 800c85c:	b538      	push	{r3, r4, r5, lr}
 800c85e:	4d06      	ldr	r5, [pc, #24]	@ (800c878 <_close_r+0x1c>)
 800c860:	2300      	movs	r3, #0
 800c862:	4604      	mov	r4, r0
 800c864:	4608      	mov	r0, r1
 800c866:	602b      	str	r3, [r5, #0]
 800c868:	f7f7 f8b4 	bl	80039d4 <_close>
 800c86c:	1c43      	adds	r3, r0, #1
 800c86e:	d102      	bne.n	800c876 <_close_r+0x1a>
 800c870:	682b      	ldr	r3, [r5, #0]
 800c872:	b103      	cbz	r3, 800c876 <_close_r+0x1a>
 800c874:	6023      	str	r3, [r4, #0]
 800c876:	bd38      	pop	{r3, r4, r5, pc}
 800c878:	20000b68 	.word	0x20000b68

0800c87c <_lseek_r>:
 800c87c:	b538      	push	{r3, r4, r5, lr}
 800c87e:	4d07      	ldr	r5, [pc, #28]	@ (800c89c <_lseek_r+0x20>)
 800c880:	4604      	mov	r4, r0
 800c882:	4608      	mov	r0, r1
 800c884:	4611      	mov	r1, r2
 800c886:	2200      	movs	r2, #0
 800c888:	602a      	str	r2, [r5, #0]
 800c88a:	461a      	mov	r2, r3
 800c88c:	f7f7 f8c9 	bl	8003a22 <_lseek>
 800c890:	1c43      	adds	r3, r0, #1
 800c892:	d102      	bne.n	800c89a <_lseek_r+0x1e>
 800c894:	682b      	ldr	r3, [r5, #0]
 800c896:	b103      	cbz	r3, 800c89a <_lseek_r+0x1e>
 800c898:	6023      	str	r3, [r4, #0]
 800c89a:	bd38      	pop	{r3, r4, r5, pc}
 800c89c:	20000b68 	.word	0x20000b68

0800c8a0 <_read_r>:
 800c8a0:	b538      	push	{r3, r4, r5, lr}
 800c8a2:	4d07      	ldr	r5, [pc, #28]	@ (800c8c0 <_read_r+0x20>)
 800c8a4:	4604      	mov	r4, r0
 800c8a6:	4608      	mov	r0, r1
 800c8a8:	4611      	mov	r1, r2
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	602a      	str	r2, [r5, #0]
 800c8ae:	461a      	mov	r2, r3
 800c8b0:	f7f7 f873 	bl	800399a <_read>
 800c8b4:	1c43      	adds	r3, r0, #1
 800c8b6:	d102      	bne.n	800c8be <_read_r+0x1e>
 800c8b8:	682b      	ldr	r3, [r5, #0]
 800c8ba:	b103      	cbz	r3, 800c8be <_read_r+0x1e>
 800c8bc:	6023      	str	r3, [r4, #0]
 800c8be:	bd38      	pop	{r3, r4, r5, pc}
 800c8c0:	20000b68 	.word	0x20000b68

0800c8c4 <_sbrk_r>:
 800c8c4:	b538      	push	{r3, r4, r5, lr}
 800c8c6:	4d06      	ldr	r5, [pc, #24]	@ (800c8e0 <_sbrk_r+0x1c>)
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	4604      	mov	r4, r0
 800c8cc:	4608      	mov	r0, r1
 800c8ce:	602b      	str	r3, [r5, #0]
 800c8d0:	f7f7 f8b4 	bl	8003a3c <_sbrk>
 800c8d4:	1c43      	adds	r3, r0, #1
 800c8d6:	d102      	bne.n	800c8de <_sbrk_r+0x1a>
 800c8d8:	682b      	ldr	r3, [r5, #0]
 800c8da:	b103      	cbz	r3, 800c8de <_sbrk_r+0x1a>
 800c8dc:	6023      	str	r3, [r4, #0]
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	20000b68 	.word	0x20000b68

0800c8e4 <_write_r>:
 800c8e4:	b538      	push	{r3, r4, r5, lr}
 800c8e6:	4d07      	ldr	r5, [pc, #28]	@ (800c904 <_write_r+0x20>)
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	4608      	mov	r0, r1
 800c8ec:	4611      	mov	r1, r2
 800c8ee:	2200      	movs	r2, #0
 800c8f0:	602a      	str	r2, [r5, #0]
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	f7f4 fb26 	bl	8000f44 <_write>
 800c8f8:	1c43      	adds	r3, r0, #1
 800c8fa:	d102      	bne.n	800c902 <_write_r+0x1e>
 800c8fc:	682b      	ldr	r3, [r5, #0]
 800c8fe:	b103      	cbz	r3, 800c902 <_write_r+0x1e>
 800c900:	6023      	str	r3, [r4, #0]
 800c902:	bd38      	pop	{r3, r4, r5, pc}
 800c904:	20000b68 	.word	0x20000b68

0800c908 <__errno>:
 800c908:	4b01      	ldr	r3, [pc, #4]	@ (800c910 <__errno+0x8>)
 800c90a:	6818      	ldr	r0, [r3, #0]
 800c90c:	4770      	bx	lr
 800c90e:	bf00      	nop
 800c910:	200000a8 	.word	0x200000a8

0800c914 <__libc_init_array>:
 800c914:	b570      	push	{r4, r5, r6, lr}
 800c916:	4d0d      	ldr	r5, [pc, #52]	@ (800c94c <__libc_init_array+0x38>)
 800c918:	4c0d      	ldr	r4, [pc, #52]	@ (800c950 <__libc_init_array+0x3c>)
 800c91a:	1b64      	subs	r4, r4, r5
 800c91c:	10a4      	asrs	r4, r4, #2
 800c91e:	2600      	movs	r6, #0
 800c920:	42a6      	cmp	r6, r4
 800c922:	d109      	bne.n	800c938 <__libc_init_array+0x24>
 800c924:	4d0b      	ldr	r5, [pc, #44]	@ (800c954 <__libc_init_array+0x40>)
 800c926:	4c0c      	ldr	r4, [pc, #48]	@ (800c958 <__libc_init_array+0x44>)
 800c928:	f000 fcbc 	bl	800d2a4 <_init>
 800c92c:	1b64      	subs	r4, r4, r5
 800c92e:	10a4      	asrs	r4, r4, #2
 800c930:	2600      	movs	r6, #0
 800c932:	42a6      	cmp	r6, r4
 800c934:	d105      	bne.n	800c942 <__libc_init_array+0x2e>
 800c936:	bd70      	pop	{r4, r5, r6, pc}
 800c938:	f855 3b04 	ldr.w	r3, [r5], #4
 800c93c:	4798      	blx	r3
 800c93e:	3601      	adds	r6, #1
 800c940:	e7ee      	b.n	800c920 <__libc_init_array+0xc>
 800c942:	f855 3b04 	ldr.w	r3, [r5], #4
 800c946:	4798      	blx	r3
 800c948:	3601      	adds	r6, #1
 800c94a:	e7f2      	b.n	800c932 <__libc_init_array+0x1e>
 800c94c:	0800d898 	.word	0x0800d898
 800c950:	0800d898 	.word	0x0800d898
 800c954:	0800d898 	.word	0x0800d898
 800c958:	0800d89c 	.word	0x0800d89c

0800c95c <__retarget_lock_init_recursive>:
 800c95c:	4770      	bx	lr

0800c95e <__retarget_lock_acquire_recursive>:
 800c95e:	4770      	bx	lr

0800c960 <__retarget_lock_release_recursive>:
 800c960:	4770      	bx	lr

0800c962 <memcpy>:
 800c962:	440a      	add	r2, r1
 800c964:	4291      	cmp	r1, r2
 800c966:	f100 33ff 	add.w	r3, r0, #4294967295
 800c96a:	d100      	bne.n	800c96e <memcpy+0xc>
 800c96c:	4770      	bx	lr
 800c96e:	b510      	push	{r4, lr}
 800c970:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c974:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c978:	4291      	cmp	r1, r2
 800c97a:	d1f9      	bne.n	800c970 <memcpy+0xe>
 800c97c:	bd10      	pop	{r4, pc}

0800c97e <abort>:
 800c97e:	b508      	push	{r3, lr}
 800c980:	2006      	movs	r0, #6
 800c982:	f000 fc51 	bl	800d228 <raise>
 800c986:	2001      	movs	r0, #1
 800c988:	f7f6 fffc 	bl	8003984 <_exit>

0800c98c <_free_r>:
 800c98c:	b538      	push	{r3, r4, r5, lr}
 800c98e:	4605      	mov	r5, r0
 800c990:	2900      	cmp	r1, #0
 800c992:	d041      	beq.n	800ca18 <_free_r+0x8c>
 800c994:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c998:	1f0c      	subs	r4, r1, #4
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	bfb8      	it	lt
 800c99e:	18e4      	addlt	r4, r4, r3
 800c9a0:	f7ff fc78 	bl	800c294 <__malloc_lock>
 800c9a4:	4a1d      	ldr	r2, [pc, #116]	@ (800ca1c <_free_r+0x90>)
 800c9a6:	6813      	ldr	r3, [r2, #0]
 800c9a8:	b933      	cbnz	r3, 800c9b8 <_free_r+0x2c>
 800c9aa:	6063      	str	r3, [r4, #4]
 800c9ac:	6014      	str	r4, [r2, #0]
 800c9ae:	4628      	mov	r0, r5
 800c9b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9b4:	f7ff bc74 	b.w	800c2a0 <__malloc_unlock>
 800c9b8:	42a3      	cmp	r3, r4
 800c9ba:	d908      	bls.n	800c9ce <_free_r+0x42>
 800c9bc:	6820      	ldr	r0, [r4, #0]
 800c9be:	1821      	adds	r1, r4, r0
 800c9c0:	428b      	cmp	r3, r1
 800c9c2:	bf01      	itttt	eq
 800c9c4:	6819      	ldreq	r1, [r3, #0]
 800c9c6:	685b      	ldreq	r3, [r3, #4]
 800c9c8:	1809      	addeq	r1, r1, r0
 800c9ca:	6021      	streq	r1, [r4, #0]
 800c9cc:	e7ed      	b.n	800c9aa <_free_r+0x1e>
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	b10b      	cbz	r3, 800c9d8 <_free_r+0x4c>
 800c9d4:	42a3      	cmp	r3, r4
 800c9d6:	d9fa      	bls.n	800c9ce <_free_r+0x42>
 800c9d8:	6811      	ldr	r1, [r2, #0]
 800c9da:	1850      	adds	r0, r2, r1
 800c9dc:	42a0      	cmp	r0, r4
 800c9de:	d10b      	bne.n	800c9f8 <_free_r+0x6c>
 800c9e0:	6820      	ldr	r0, [r4, #0]
 800c9e2:	4401      	add	r1, r0
 800c9e4:	1850      	adds	r0, r2, r1
 800c9e6:	4283      	cmp	r3, r0
 800c9e8:	6011      	str	r1, [r2, #0]
 800c9ea:	d1e0      	bne.n	800c9ae <_free_r+0x22>
 800c9ec:	6818      	ldr	r0, [r3, #0]
 800c9ee:	685b      	ldr	r3, [r3, #4]
 800c9f0:	6053      	str	r3, [r2, #4]
 800c9f2:	4408      	add	r0, r1
 800c9f4:	6010      	str	r0, [r2, #0]
 800c9f6:	e7da      	b.n	800c9ae <_free_r+0x22>
 800c9f8:	d902      	bls.n	800ca00 <_free_r+0x74>
 800c9fa:	230c      	movs	r3, #12
 800c9fc:	602b      	str	r3, [r5, #0]
 800c9fe:	e7d6      	b.n	800c9ae <_free_r+0x22>
 800ca00:	6820      	ldr	r0, [r4, #0]
 800ca02:	1821      	adds	r1, r4, r0
 800ca04:	428b      	cmp	r3, r1
 800ca06:	bf04      	itt	eq
 800ca08:	6819      	ldreq	r1, [r3, #0]
 800ca0a:	685b      	ldreq	r3, [r3, #4]
 800ca0c:	6063      	str	r3, [r4, #4]
 800ca0e:	bf04      	itt	eq
 800ca10:	1809      	addeq	r1, r1, r0
 800ca12:	6021      	streq	r1, [r4, #0]
 800ca14:	6054      	str	r4, [r2, #4]
 800ca16:	e7ca      	b.n	800c9ae <_free_r+0x22>
 800ca18:	bd38      	pop	{r3, r4, r5, pc}
 800ca1a:	bf00      	nop
 800ca1c:	20000a28 	.word	0x20000a28

0800ca20 <__sfputc_r>:
 800ca20:	6893      	ldr	r3, [r2, #8]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	b410      	push	{r4}
 800ca28:	6093      	str	r3, [r2, #8]
 800ca2a:	da08      	bge.n	800ca3e <__sfputc_r+0x1e>
 800ca2c:	6994      	ldr	r4, [r2, #24]
 800ca2e:	42a3      	cmp	r3, r4
 800ca30:	db01      	blt.n	800ca36 <__sfputc_r+0x16>
 800ca32:	290a      	cmp	r1, #10
 800ca34:	d103      	bne.n	800ca3e <__sfputc_r+0x1e>
 800ca36:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca3a:	f7ff be72 	b.w	800c722 <__swbuf_r>
 800ca3e:	6813      	ldr	r3, [r2, #0]
 800ca40:	1c58      	adds	r0, r3, #1
 800ca42:	6010      	str	r0, [r2, #0]
 800ca44:	7019      	strb	r1, [r3, #0]
 800ca46:	4608      	mov	r0, r1
 800ca48:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ca4c:	4770      	bx	lr

0800ca4e <__sfputs_r>:
 800ca4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca50:	4606      	mov	r6, r0
 800ca52:	460f      	mov	r7, r1
 800ca54:	4614      	mov	r4, r2
 800ca56:	18d5      	adds	r5, r2, r3
 800ca58:	42ac      	cmp	r4, r5
 800ca5a:	d101      	bne.n	800ca60 <__sfputs_r+0x12>
 800ca5c:	2000      	movs	r0, #0
 800ca5e:	e007      	b.n	800ca70 <__sfputs_r+0x22>
 800ca60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca64:	463a      	mov	r2, r7
 800ca66:	4630      	mov	r0, r6
 800ca68:	f7ff ffda 	bl	800ca20 <__sfputc_r>
 800ca6c:	1c43      	adds	r3, r0, #1
 800ca6e:	d1f3      	bne.n	800ca58 <__sfputs_r+0xa>
 800ca70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ca74 <_vfiprintf_r>:
 800ca74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca78:	460d      	mov	r5, r1
 800ca7a:	b09d      	sub	sp, #116	@ 0x74
 800ca7c:	4614      	mov	r4, r2
 800ca7e:	4698      	mov	r8, r3
 800ca80:	4606      	mov	r6, r0
 800ca82:	b118      	cbz	r0, 800ca8c <_vfiprintf_r+0x18>
 800ca84:	6a03      	ldr	r3, [r0, #32]
 800ca86:	b90b      	cbnz	r3, 800ca8c <_vfiprintf_r+0x18>
 800ca88:	f7ff fc9c 	bl	800c3c4 <__sinit>
 800ca8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ca8e:	07d9      	lsls	r1, r3, #31
 800ca90:	d405      	bmi.n	800ca9e <_vfiprintf_r+0x2a>
 800ca92:	89ab      	ldrh	r3, [r5, #12]
 800ca94:	059a      	lsls	r2, r3, #22
 800ca96:	d402      	bmi.n	800ca9e <_vfiprintf_r+0x2a>
 800ca98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ca9a:	f7ff ff60 	bl	800c95e <__retarget_lock_acquire_recursive>
 800ca9e:	89ab      	ldrh	r3, [r5, #12]
 800caa0:	071b      	lsls	r3, r3, #28
 800caa2:	d501      	bpl.n	800caa8 <_vfiprintf_r+0x34>
 800caa4:	692b      	ldr	r3, [r5, #16]
 800caa6:	b99b      	cbnz	r3, 800cad0 <_vfiprintf_r+0x5c>
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff fe78 	bl	800c7a0 <__swsetup_r>
 800cab0:	b170      	cbz	r0, 800cad0 <_vfiprintf_r+0x5c>
 800cab2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cab4:	07dc      	lsls	r4, r3, #31
 800cab6:	d504      	bpl.n	800cac2 <_vfiprintf_r+0x4e>
 800cab8:	f04f 30ff 	mov.w	r0, #4294967295
 800cabc:	b01d      	add	sp, #116	@ 0x74
 800cabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cac2:	89ab      	ldrh	r3, [r5, #12]
 800cac4:	0598      	lsls	r0, r3, #22
 800cac6:	d4f7      	bmi.n	800cab8 <_vfiprintf_r+0x44>
 800cac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800caca:	f7ff ff49 	bl	800c960 <__retarget_lock_release_recursive>
 800cace:	e7f3      	b.n	800cab8 <_vfiprintf_r+0x44>
 800cad0:	2300      	movs	r3, #0
 800cad2:	9309      	str	r3, [sp, #36]	@ 0x24
 800cad4:	2320      	movs	r3, #32
 800cad6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cada:	f8cd 800c 	str.w	r8, [sp, #12]
 800cade:	2330      	movs	r3, #48	@ 0x30
 800cae0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800cc90 <_vfiprintf_r+0x21c>
 800cae4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cae8:	f04f 0901 	mov.w	r9, #1
 800caec:	4623      	mov	r3, r4
 800caee:	469a      	mov	sl, r3
 800caf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800caf4:	b10a      	cbz	r2, 800cafa <_vfiprintf_r+0x86>
 800caf6:	2a25      	cmp	r2, #37	@ 0x25
 800caf8:	d1f9      	bne.n	800caee <_vfiprintf_r+0x7a>
 800cafa:	ebba 0b04 	subs.w	fp, sl, r4
 800cafe:	d00b      	beq.n	800cb18 <_vfiprintf_r+0xa4>
 800cb00:	465b      	mov	r3, fp
 800cb02:	4622      	mov	r2, r4
 800cb04:	4629      	mov	r1, r5
 800cb06:	4630      	mov	r0, r6
 800cb08:	f7ff ffa1 	bl	800ca4e <__sfputs_r>
 800cb0c:	3001      	adds	r0, #1
 800cb0e:	f000 80a7 	beq.w	800cc60 <_vfiprintf_r+0x1ec>
 800cb12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cb14:	445a      	add	r2, fp
 800cb16:	9209      	str	r2, [sp, #36]	@ 0x24
 800cb18:	f89a 3000 	ldrb.w	r3, [sl]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	f000 809f 	beq.w	800cc60 <_vfiprintf_r+0x1ec>
 800cb22:	2300      	movs	r3, #0
 800cb24:	f04f 32ff 	mov.w	r2, #4294967295
 800cb28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cb2c:	f10a 0a01 	add.w	sl, sl, #1
 800cb30:	9304      	str	r3, [sp, #16]
 800cb32:	9307      	str	r3, [sp, #28]
 800cb34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cb38:	931a      	str	r3, [sp, #104]	@ 0x68
 800cb3a:	4654      	mov	r4, sl
 800cb3c:	2205      	movs	r2, #5
 800cb3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cb42:	4853      	ldr	r0, [pc, #332]	@ (800cc90 <_vfiprintf_r+0x21c>)
 800cb44:	f7f3 fb4c 	bl	80001e0 <memchr>
 800cb48:	9a04      	ldr	r2, [sp, #16]
 800cb4a:	b9d8      	cbnz	r0, 800cb84 <_vfiprintf_r+0x110>
 800cb4c:	06d1      	lsls	r1, r2, #27
 800cb4e:	bf44      	itt	mi
 800cb50:	2320      	movmi	r3, #32
 800cb52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb56:	0713      	lsls	r3, r2, #28
 800cb58:	bf44      	itt	mi
 800cb5a:	232b      	movmi	r3, #43	@ 0x2b
 800cb5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cb60:	f89a 3000 	ldrb.w	r3, [sl]
 800cb64:	2b2a      	cmp	r3, #42	@ 0x2a
 800cb66:	d015      	beq.n	800cb94 <_vfiprintf_r+0x120>
 800cb68:	9a07      	ldr	r2, [sp, #28]
 800cb6a:	4654      	mov	r4, sl
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	f04f 0c0a 	mov.w	ip, #10
 800cb72:	4621      	mov	r1, r4
 800cb74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cb78:	3b30      	subs	r3, #48	@ 0x30
 800cb7a:	2b09      	cmp	r3, #9
 800cb7c:	d94b      	bls.n	800cc16 <_vfiprintf_r+0x1a2>
 800cb7e:	b1b0      	cbz	r0, 800cbae <_vfiprintf_r+0x13a>
 800cb80:	9207      	str	r2, [sp, #28]
 800cb82:	e014      	b.n	800cbae <_vfiprintf_r+0x13a>
 800cb84:	eba0 0308 	sub.w	r3, r0, r8
 800cb88:	fa09 f303 	lsl.w	r3, r9, r3
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	9304      	str	r3, [sp, #16]
 800cb90:	46a2      	mov	sl, r4
 800cb92:	e7d2      	b.n	800cb3a <_vfiprintf_r+0xc6>
 800cb94:	9b03      	ldr	r3, [sp, #12]
 800cb96:	1d19      	adds	r1, r3, #4
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	9103      	str	r1, [sp, #12]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	bfbb      	ittet	lt
 800cba0:	425b      	neglt	r3, r3
 800cba2:	f042 0202 	orrlt.w	r2, r2, #2
 800cba6:	9307      	strge	r3, [sp, #28]
 800cba8:	9307      	strlt	r3, [sp, #28]
 800cbaa:	bfb8      	it	lt
 800cbac:	9204      	strlt	r2, [sp, #16]
 800cbae:	7823      	ldrb	r3, [r4, #0]
 800cbb0:	2b2e      	cmp	r3, #46	@ 0x2e
 800cbb2:	d10a      	bne.n	800cbca <_vfiprintf_r+0x156>
 800cbb4:	7863      	ldrb	r3, [r4, #1]
 800cbb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbb8:	d132      	bne.n	800cc20 <_vfiprintf_r+0x1ac>
 800cbba:	9b03      	ldr	r3, [sp, #12]
 800cbbc:	1d1a      	adds	r2, r3, #4
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	9203      	str	r2, [sp, #12]
 800cbc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cbc6:	3402      	adds	r4, #2
 800cbc8:	9305      	str	r3, [sp, #20]
 800cbca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800cca0 <_vfiprintf_r+0x22c>
 800cbce:	7821      	ldrb	r1, [r4, #0]
 800cbd0:	2203      	movs	r2, #3
 800cbd2:	4650      	mov	r0, sl
 800cbd4:	f7f3 fb04 	bl	80001e0 <memchr>
 800cbd8:	b138      	cbz	r0, 800cbea <_vfiprintf_r+0x176>
 800cbda:	9b04      	ldr	r3, [sp, #16]
 800cbdc:	eba0 000a 	sub.w	r0, r0, sl
 800cbe0:	2240      	movs	r2, #64	@ 0x40
 800cbe2:	4082      	lsls	r2, r0
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	3401      	adds	r4, #1
 800cbe8:	9304      	str	r3, [sp, #16]
 800cbea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbee:	4829      	ldr	r0, [pc, #164]	@ (800cc94 <_vfiprintf_r+0x220>)
 800cbf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cbf4:	2206      	movs	r2, #6
 800cbf6:	f7f3 faf3 	bl	80001e0 <memchr>
 800cbfa:	2800      	cmp	r0, #0
 800cbfc:	d03f      	beq.n	800cc7e <_vfiprintf_r+0x20a>
 800cbfe:	4b26      	ldr	r3, [pc, #152]	@ (800cc98 <_vfiprintf_r+0x224>)
 800cc00:	bb1b      	cbnz	r3, 800cc4a <_vfiprintf_r+0x1d6>
 800cc02:	9b03      	ldr	r3, [sp, #12]
 800cc04:	3307      	adds	r3, #7
 800cc06:	f023 0307 	bic.w	r3, r3, #7
 800cc0a:	3308      	adds	r3, #8
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc10:	443b      	add	r3, r7
 800cc12:	9309      	str	r3, [sp, #36]	@ 0x24
 800cc14:	e76a      	b.n	800caec <_vfiprintf_r+0x78>
 800cc16:	fb0c 3202 	mla	r2, ip, r2, r3
 800cc1a:	460c      	mov	r4, r1
 800cc1c:	2001      	movs	r0, #1
 800cc1e:	e7a8      	b.n	800cb72 <_vfiprintf_r+0xfe>
 800cc20:	2300      	movs	r3, #0
 800cc22:	3401      	adds	r4, #1
 800cc24:	9305      	str	r3, [sp, #20]
 800cc26:	4619      	mov	r1, r3
 800cc28:	f04f 0c0a 	mov.w	ip, #10
 800cc2c:	4620      	mov	r0, r4
 800cc2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cc32:	3a30      	subs	r2, #48	@ 0x30
 800cc34:	2a09      	cmp	r2, #9
 800cc36:	d903      	bls.n	800cc40 <_vfiprintf_r+0x1cc>
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d0c6      	beq.n	800cbca <_vfiprintf_r+0x156>
 800cc3c:	9105      	str	r1, [sp, #20]
 800cc3e:	e7c4      	b.n	800cbca <_vfiprintf_r+0x156>
 800cc40:	fb0c 2101 	mla	r1, ip, r1, r2
 800cc44:	4604      	mov	r4, r0
 800cc46:	2301      	movs	r3, #1
 800cc48:	e7f0      	b.n	800cc2c <_vfiprintf_r+0x1b8>
 800cc4a:	ab03      	add	r3, sp, #12
 800cc4c:	9300      	str	r3, [sp, #0]
 800cc4e:	462a      	mov	r2, r5
 800cc50:	4b12      	ldr	r3, [pc, #72]	@ (800cc9c <_vfiprintf_r+0x228>)
 800cc52:	a904      	add	r1, sp, #16
 800cc54:	4630      	mov	r0, r6
 800cc56:	f3af 8000 	nop.w
 800cc5a:	4607      	mov	r7, r0
 800cc5c:	1c78      	adds	r0, r7, #1
 800cc5e:	d1d6      	bne.n	800cc0e <_vfiprintf_r+0x19a>
 800cc60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cc62:	07d9      	lsls	r1, r3, #31
 800cc64:	d405      	bmi.n	800cc72 <_vfiprintf_r+0x1fe>
 800cc66:	89ab      	ldrh	r3, [r5, #12]
 800cc68:	059a      	lsls	r2, r3, #22
 800cc6a:	d402      	bmi.n	800cc72 <_vfiprintf_r+0x1fe>
 800cc6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cc6e:	f7ff fe77 	bl	800c960 <__retarget_lock_release_recursive>
 800cc72:	89ab      	ldrh	r3, [r5, #12]
 800cc74:	065b      	lsls	r3, r3, #25
 800cc76:	f53f af1f 	bmi.w	800cab8 <_vfiprintf_r+0x44>
 800cc7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cc7c:	e71e      	b.n	800cabc <_vfiprintf_r+0x48>
 800cc7e:	ab03      	add	r3, sp, #12
 800cc80:	9300      	str	r3, [sp, #0]
 800cc82:	462a      	mov	r2, r5
 800cc84:	4b05      	ldr	r3, [pc, #20]	@ (800cc9c <_vfiprintf_r+0x228>)
 800cc86:	a904      	add	r1, sp, #16
 800cc88:	4630      	mov	r0, r6
 800cc8a:	f000 f879 	bl	800cd80 <_printf_i>
 800cc8e:	e7e4      	b.n	800cc5a <_vfiprintf_r+0x1e6>
 800cc90:	0800d85a 	.word	0x0800d85a
 800cc94:	0800d864 	.word	0x0800d864
 800cc98:	00000000 	.word	0x00000000
 800cc9c:	0800ca4f 	.word	0x0800ca4f
 800cca0:	0800d860 	.word	0x0800d860

0800cca4 <_printf_common>:
 800cca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cca8:	4616      	mov	r6, r2
 800ccaa:	4698      	mov	r8, r3
 800ccac:	688a      	ldr	r2, [r1, #8]
 800ccae:	690b      	ldr	r3, [r1, #16]
 800ccb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ccb4:	4293      	cmp	r3, r2
 800ccb6:	bfb8      	it	lt
 800ccb8:	4613      	movlt	r3, r2
 800ccba:	6033      	str	r3, [r6, #0]
 800ccbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ccc0:	4607      	mov	r7, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	b10a      	cbz	r2, 800ccca <_printf_common+0x26>
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	6033      	str	r3, [r6, #0]
 800ccca:	6823      	ldr	r3, [r4, #0]
 800cccc:	0699      	lsls	r1, r3, #26
 800ccce:	bf42      	ittt	mi
 800ccd0:	6833      	ldrmi	r3, [r6, #0]
 800ccd2:	3302      	addmi	r3, #2
 800ccd4:	6033      	strmi	r3, [r6, #0]
 800ccd6:	6825      	ldr	r5, [r4, #0]
 800ccd8:	f015 0506 	ands.w	r5, r5, #6
 800ccdc:	d106      	bne.n	800ccec <_printf_common+0x48>
 800ccde:	f104 0a19 	add.w	sl, r4, #25
 800cce2:	68e3      	ldr	r3, [r4, #12]
 800cce4:	6832      	ldr	r2, [r6, #0]
 800cce6:	1a9b      	subs	r3, r3, r2
 800cce8:	42ab      	cmp	r3, r5
 800ccea:	dc26      	bgt.n	800cd3a <_printf_common+0x96>
 800ccec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ccf0:	6822      	ldr	r2, [r4, #0]
 800ccf2:	3b00      	subs	r3, #0
 800ccf4:	bf18      	it	ne
 800ccf6:	2301      	movne	r3, #1
 800ccf8:	0692      	lsls	r2, r2, #26
 800ccfa:	d42b      	bmi.n	800cd54 <_printf_common+0xb0>
 800ccfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800cd00:	4641      	mov	r1, r8
 800cd02:	4638      	mov	r0, r7
 800cd04:	47c8      	blx	r9
 800cd06:	3001      	adds	r0, #1
 800cd08:	d01e      	beq.n	800cd48 <_printf_common+0xa4>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	6922      	ldr	r2, [r4, #16]
 800cd0e:	f003 0306 	and.w	r3, r3, #6
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	bf02      	ittt	eq
 800cd16:	68e5      	ldreq	r5, [r4, #12]
 800cd18:	6833      	ldreq	r3, [r6, #0]
 800cd1a:	1aed      	subeq	r5, r5, r3
 800cd1c:	68a3      	ldr	r3, [r4, #8]
 800cd1e:	bf0c      	ite	eq
 800cd20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd24:	2500      	movne	r5, #0
 800cd26:	4293      	cmp	r3, r2
 800cd28:	bfc4      	itt	gt
 800cd2a:	1a9b      	subgt	r3, r3, r2
 800cd2c:	18ed      	addgt	r5, r5, r3
 800cd2e:	2600      	movs	r6, #0
 800cd30:	341a      	adds	r4, #26
 800cd32:	42b5      	cmp	r5, r6
 800cd34:	d11a      	bne.n	800cd6c <_printf_common+0xc8>
 800cd36:	2000      	movs	r0, #0
 800cd38:	e008      	b.n	800cd4c <_printf_common+0xa8>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	4652      	mov	r2, sl
 800cd3e:	4641      	mov	r1, r8
 800cd40:	4638      	mov	r0, r7
 800cd42:	47c8      	blx	r9
 800cd44:	3001      	adds	r0, #1
 800cd46:	d103      	bne.n	800cd50 <_printf_common+0xac>
 800cd48:	f04f 30ff 	mov.w	r0, #4294967295
 800cd4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd50:	3501      	adds	r5, #1
 800cd52:	e7c6      	b.n	800cce2 <_printf_common+0x3e>
 800cd54:	18e1      	adds	r1, r4, r3
 800cd56:	1c5a      	adds	r2, r3, #1
 800cd58:	2030      	movs	r0, #48	@ 0x30
 800cd5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800cd5e:	4422      	add	r2, r4
 800cd60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800cd64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800cd68:	3302      	adds	r3, #2
 800cd6a:	e7c7      	b.n	800ccfc <_printf_common+0x58>
 800cd6c:	2301      	movs	r3, #1
 800cd6e:	4622      	mov	r2, r4
 800cd70:	4641      	mov	r1, r8
 800cd72:	4638      	mov	r0, r7
 800cd74:	47c8      	blx	r9
 800cd76:	3001      	adds	r0, #1
 800cd78:	d0e6      	beq.n	800cd48 <_printf_common+0xa4>
 800cd7a:	3601      	adds	r6, #1
 800cd7c:	e7d9      	b.n	800cd32 <_printf_common+0x8e>
	...

0800cd80 <_printf_i>:
 800cd80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd84:	7e0f      	ldrb	r7, [r1, #24]
 800cd86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800cd88:	2f78      	cmp	r7, #120	@ 0x78
 800cd8a:	4691      	mov	r9, r2
 800cd8c:	4680      	mov	r8, r0
 800cd8e:	460c      	mov	r4, r1
 800cd90:	469a      	mov	sl, r3
 800cd92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800cd96:	d807      	bhi.n	800cda8 <_printf_i+0x28>
 800cd98:	2f62      	cmp	r7, #98	@ 0x62
 800cd9a:	d80a      	bhi.n	800cdb2 <_printf_i+0x32>
 800cd9c:	2f00      	cmp	r7, #0
 800cd9e:	f000 80d1 	beq.w	800cf44 <_printf_i+0x1c4>
 800cda2:	2f58      	cmp	r7, #88	@ 0x58
 800cda4:	f000 80b8 	beq.w	800cf18 <_printf_i+0x198>
 800cda8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cdac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800cdb0:	e03a      	b.n	800ce28 <_printf_i+0xa8>
 800cdb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800cdb6:	2b15      	cmp	r3, #21
 800cdb8:	d8f6      	bhi.n	800cda8 <_printf_i+0x28>
 800cdba:	a101      	add	r1, pc, #4	@ (adr r1, 800cdc0 <_printf_i+0x40>)
 800cdbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cdc0:	0800ce19 	.word	0x0800ce19
 800cdc4:	0800ce2d 	.word	0x0800ce2d
 800cdc8:	0800cda9 	.word	0x0800cda9
 800cdcc:	0800cda9 	.word	0x0800cda9
 800cdd0:	0800cda9 	.word	0x0800cda9
 800cdd4:	0800cda9 	.word	0x0800cda9
 800cdd8:	0800ce2d 	.word	0x0800ce2d
 800cddc:	0800cda9 	.word	0x0800cda9
 800cde0:	0800cda9 	.word	0x0800cda9
 800cde4:	0800cda9 	.word	0x0800cda9
 800cde8:	0800cda9 	.word	0x0800cda9
 800cdec:	0800cf2b 	.word	0x0800cf2b
 800cdf0:	0800ce57 	.word	0x0800ce57
 800cdf4:	0800cee5 	.word	0x0800cee5
 800cdf8:	0800cda9 	.word	0x0800cda9
 800cdfc:	0800cda9 	.word	0x0800cda9
 800ce00:	0800cf4d 	.word	0x0800cf4d
 800ce04:	0800cda9 	.word	0x0800cda9
 800ce08:	0800ce57 	.word	0x0800ce57
 800ce0c:	0800cda9 	.word	0x0800cda9
 800ce10:	0800cda9 	.word	0x0800cda9
 800ce14:	0800ceed 	.word	0x0800ceed
 800ce18:	6833      	ldr	r3, [r6, #0]
 800ce1a:	1d1a      	adds	r2, r3, #4
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6032      	str	r2, [r6, #0]
 800ce20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ce24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800ce28:	2301      	movs	r3, #1
 800ce2a:	e09c      	b.n	800cf66 <_printf_i+0x1e6>
 800ce2c:	6833      	ldr	r3, [r6, #0]
 800ce2e:	6820      	ldr	r0, [r4, #0]
 800ce30:	1d19      	adds	r1, r3, #4
 800ce32:	6031      	str	r1, [r6, #0]
 800ce34:	0606      	lsls	r6, r0, #24
 800ce36:	d501      	bpl.n	800ce3c <_printf_i+0xbc>
 800ce38:	681d      	ldr	r5, [r3, #0]
 800ce3a:	e003      	b.n	800ce44 <_printf_i+0xc4>
 800ce3c:	0645      	lsls	r5, r0, #25
 800ce3e:	d5fb      	bpl.n	800ce38 <_printf_i+0xb8>
 800ce40:	f9b3 5000 	ldrsh.w	r5, [r3]
 800ce44:	2d00      	cmp	r5, #0
 800ce46:	da03      	bge.n	800ce50 <_printf_i+0xd0>
 800ce48:	232d      	movs	r3, #45	@ 0x2d
 800ce4a:	426d      	negs	r5, r5
 800ce4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ce50:	4858      	ldr	r0, [pc, #352]	@ (800cfb4 <_printf_i+0x234>)
 800ce52:	230a      	movs	r3, #10
 800ce54:	e011      	b.n	800ce7a <_printf_i+0xfa>
 800ce56:	6821      	ldr	r1, [r4, #0]
 800ce58:	6833      	ldr	r3, [r6, #0]
 800ce5a:	0608      	lsls	r0, r1, #24
 800ce5c:	f853 5b04 	ldr.w	r5, [r3], #4
 800ce60:	d402      	bmi.n	800ce68 <_printf_i+0xe8>
 800ce62:	0649      	lsls	r1, r1, #25
 800ce64:	bf48      	it	mi
 800ce66:	b2ad      	uxthmi	r5, r5
 800ce68:	2f6f      	cmp	r7, #111	@ 0x6f
 800ce6a:	4852      	ldr	r0, [pc, #328]	@ (800cfb4 <_printf_i+0x234>)
 800ce6c:	6033      	str	r3, [r6, #0]
 800ce6e:	bf14      	ite	ne
 800ce70:	230a      	movne	r3, #10
 800ce72:	2308      	moveq	r3, #8
 800ce74:	2100      	movs	r1, #0
 800ce76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800ce7a:	6866      	ldr	r6, [r4, #4]
 800ce7c:	60a6      	str	r6, [r4, #8]
 800ce7e:	2e00      	cmp	r6, #0
 800ce80:	db05      	blt.n	800ce8e <_printf_i+0x10e>
 800ce82:	6821      	ldr	r1, [r4, #0]
 800ce84:	432e      	orrs	r6, r5
 800ce86:	f021 0104 	bic.w	r1, r1, #4
 800ce8a:	6021      	str	r1, [r4, #0]
 800ce8c:	d04b      	beq.n	800cf26 <_printf_i+0x1a6>
 800ce8e:	4616      	mov	r6, r2
 800ce90:	fbb5 f1f3 	udiv	r1, r5, r3
 800ce94:	fb03 5711 	mls	r7, r3, r1, r5
 800ce98:	5dc7      	ldrb	r7, [r0, r7]
 800ce9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ce9e:	462f      	mov	r7, r5
 800cea0:	42bb      	cmp	r3, r7
 800cea2:	460d      	mov	r5, r1
 800cea4:	d9f4      	bls.n	800ce90 <_printf_i+0x110>
 800cea6:	2b08      	cmp	r3, #8
 800cea8:	d10b      	bne.n	800cec2 <_printf_i+0x142>
 800ceaa:	6823      	ldr	r3, [r4, #0]
 800ceac:	07df      	lsls	r7, r3, #31
 800ceae:	d508      	bpl.n	800cec2 <_printf_i+0x142>
 800ceb0:	6923      	ldr	r3, [r4, #16]
 800ceb2:	6861      	ldr	r1, [r4, #4]
 800ceb4:	4299      	cmp	r1, r3
 800ceb6:	bfde      	ittt	le
 800ceb8:	2330      	movle	r3, #48	@ 0x30
 800ceba:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cebe:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cec2:	1b92      	subs	r2, r2, r6
 800cec4:	6122      	str	r2, [r4, #16]
 800cec6:	f8cd a000 	str.w	sl, [sp]
 800ceca:	464b      	mov	r3, r9
 800cecc:	aa03      	add	r2, sp, #12
 800cece:	4621      	mov	r1, r4
 800ced0:	4640      	mov	r0, r8
 800ced2:	f7ff fee7 	bl	800cca4 <_printf_common>
 800ced6:	3001      	adds	r0, #1
 800ced8:	d14a      	bne.n	800cf70 <_printf_i+0x1f0>
 800ceda:	f04f 30ff 	mov.w	r0, #4294967295
 800cede:	b004      	add	sp, #16
 800cee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cee4:	6823      	ldr	r3, [r4, #0]
 800cee6:	f043 0320 	orr.w	r3, r3, #32
 800ceea:	6023      	str	r3, [r4, #0]
 800ceec:	4832      	ldr	r0, [pc, #200]	@ (800cfb8 <_printf_i+0x238>)
 800ceee:	2778      	movs	r7, #120	@ 0x78
 800cef0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cef4:	6823      	ldr	r3, [r4, #0]
 800cef6:	6831      	ldr	r1, [r6, #0]
 800cef8:	061f      	lsls	r7, r3, #24
 800cefa:	f851 5b04 	ldr.w	r5, [r1], #4
 800cefe:	d402      	bmi.n	800cf06 <_printf_i+0x186>
 800cf00:	065f      	lsls	r7, r3, #25
 800cf02:	bf48      	it	mi
 800cf04:	b2ad      	uxthmi	r5, r5
 800cf06:	6031      	str	r1, [r6, #0]
 800cf08:	07d9      	lsls	r1, r3, #31
 800cf0a:	bf44      	itt	mi
 800cf0c:	f043 0320 	orrmi.w	r3, r3, #32
 800cf10:	6023      	strmi	r3, [r4, #0]
 800cf12:	b11d      	cbz	r5, 800cf1c <_printf_i+0x19c>
 800cf14:	2310      	movs	r3, #16
 800cf16:	e7ad      	b.n	800ce74 <_printf_i+0xf4>
 800cf18:	4826      	ldr	r0, [pc, #152]	@ (800cfb4 <_printf_i+0x234>)
 800cf1a:	e7e9      	b.n	800cef0 <_printf_i+0x170>
 800cf1c:	6823      	ldr	r3, [r4, #0]
 800cf1e:	f023 0320 	bic.w	r3, r3, #32
 800cf22:	6023      	str	r3, [r4, #0]
 800cf24:	e7f6      	b.n	800cf14 <_printf_i+0x194>
 800cf26:	4616      	mov	r6, r2
 800cf28:	e7bd      	b.n	800cea6 <_printf_i+0x126>
 800cf2a:	6833      	ldr	r3, [r6, #0]
 800cf2c:	6825      	ldr	r5, [r4, #0]
 800cf2e:	6961      	ldr	r1, [r4, #20]
 800cf30:	1d18      	adds	r0, r3, #4
 800cf32:	6030      	str	r0, [r6, #0]
 800cf34:	062e      	lsls	r6, r5, #24
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	d501      	bpl.n	800cf3e <_printf_i+0x1be>
 800cf3a:	6019      	str	r1, [r3, #0]
 800cf3c:	e002      	b.n	800cf44 <_printf_i+0x1c4>
 800cf3e:	0668      	lsls	r0, r5, #25
 800cf40:	d5fb      	bpl.n	800cf3a <_printf_i+0x1ba>
 800cf42:	8019      	strh	r1, [r3, #0]
 800cf44:	2300      	movs	r3, #0
 800cf46:	6123      	str	r3, [r4, #16]
 800cf48:	4616      	mov	r6, r2
 800cf4a:	e7bc      	b.n	800cec6 <_printf_i+0x146>
 800cf4c:	6833      	ldr	r3, [r6, #0]
 800cf4e:	1d1a      	adds	r2, r3, #4
 800cf50:	6032      	str	r2, [r6, #0]
 800cf52:	681e      	ldr	r6, [r3, #0]
 800cf54:	6862      	ldr	r2, [r4, #4]
 800cf56:	2100      	movs	r1, #0
 800cf58:	4630      	mov	r0, r6
 800cf5a:	f7f3 f941 	bl	80001e0 <memchr>
 800cf5e:	b108      	cbz	r0, 800cf64 <_printf_i+0x1e4>
 800cf60:	1b80      	subs	r0, r0, r6
 800cf62:	6060      	str	r0, [r4, #4]
 800cf64:	6863      	ldr	r3, [r4, #4]
 800cf66:	6123      	str	r3, [r4, #16]
 800cf68:	2300      	movs	r3, #0
 800cf6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf6e:	e7aa      	b.n	800cec6 <_printf_i+0x146>
 800cf70:	6923      	ldr	r3, [r4, #16]
 800cf72:	4632      	mov	r2, r6
 800cf74:	4649      	mov	r1, r9
 800cf76:	4640      	mov	r0, r8
 800cf78:	47d0      	blx	sl
 800cf7a:	3001      	adds	r0, #1
 800cf7c:	d0ad      	beq.n	800ceda <_printf_i+0x15a>
 800cf7e:	6823      	ldr	r3, [r4, #0]
 800cf80:	079b      	lsls	r3, r3, #30
 800cf82:	d413      	bmi.n	800cfac <_printf_i+0x22c>
 800cf84:	68e0      	ldr	r0, [r4, #12]
 800cf86:	9b03      	ldr	r3, [sp, #12]
 800cf88:	4298      	cmp	r0, r3
 800cf8a:	bfb8      	it	lt
 800cf8c:	4618      	movlt	r0, r3
 800cf8e:	e7a6      	b.n	800cede <_printf_i+0x15e>
 800cf90:	2301      	movs	r3, #1
 800cf92:	4632      	mov	r2, r6
 800cf94:	4649      	mov	r1, r9
 800cf96:	4640      	mov	r0, r8
 800cf98:	47d0      	blx	sl
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	d09d      	beq.n	800ceda <_printf_i+0x15a>
 800cf9e:	3501      	adds	r5, #1
 800cfa0:	68e3      	ldr	r3, [r4, #12]
 800cfa2:	9903      	ldr	r1, [sp, #12]
 800cfa4:	1a5b      	subs	r3, r3, r1
 800cfa6:	42ab      	cmp	r3, r5
 800cfa8:	dcf2      	bgt.n	800cf90 <_printf_i+0x210>
 800cfaa:	e7eb      	b.n	800cf84 <_printf_i+0x204>
 800cfac:	2500      	movs	r5, #0
 800cfae:	f104 0619 	add.w	r6, r4, #25
 800cfb2:	e7f5      	b.n	800cfa0 <_printf_i+0x220>
 800cfb4:	0800d86b 	.word	0x0800d86b
 800cfb8:	0800d87c 	.word	0x0800d87c

0800cfbc <__sflush_r>:
 800cfbc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800cfc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfc4:	0716      	lsls	r6, r2, #28
 800cfc6:	4605      	mov	r5, r0
 800cfc8:	460c      	mov	r4, r1
 800cfca:	d454      	bmi.n	800d076 <__sflush_r+0xba>
 800cfcc:	684b      	ldr	r3, [r1, #4]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	dc02      	bgt.n	800cfd8 <__sflush_r+0x1c>
 800cfd2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	dd48      	ble.n	800d06a <__sflush_r+0xae>
 800cfd8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800cfda:	2e00      	cmp	r6, #0
 800cfdc:	d045      	beq.n	800d06a <__sflush_r+0xae>
 800cfde:	2300      	movs	r3, #0
 800cfe0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800cfe4:	682f      	ldr	r7, [r5, #0]
 800cfe6:	6a21      	ldr	r1, [r4, #32]
 800cfe8:	602b      	str	r3, [r5, #0]
 800cfea:	d030      	beq.n	800d04e <__sflush_r+0x92>
 800cfec:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	0759      	lsls	r1, r3, #29
 800cff2:	d505      	bpl.n	800d000 <__sflush_r+0x44>
 800cff4:	6863      	ldr	r3, [r4, #4]
 800cff6:	1ad2      	subs	r2, r2, r3
 800cff8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800cffa:	b10b      	cbz	r3, 800d000 <__sflush_r+0x44>
 800cffc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800cffe:	1ad2      	subs	r2, r2, r3
 800d000:	2300      	movs	r3, #0
 800d002:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d004:	6a21      	ldr	r1, [r4, #32]
 800d006:	4628      	mov	r0, r5
 800d008:	47b0      	blx	r6
 800d00a:	1c43      	adds	r3, r0, #1
 800d00c:	89a3      	ldrh	r3, [r4, #12]
 800d00e:	d106      	bne.n	800d01e <__sflush_r+0x62>
 800d010:	6829      	ldr	r1, [r5, #0]
 800d012:	291d      	cmp	r1, #29
 800d014:	d82b      	bhi.n	800d06e <__sflush_r+0xb2>
 800d016:	4a2a      	ldr	r2, [pc, #168]	@ (800d0c0 <__sflush_r+0x104>)
 800d018:	40ca      	lsrs	r2, r1
 800d01a:	07d6      	lsls	r6, r2, #31
 800d01c:	d527      	bpl.n	800d06e <__sflush_r+0xb2>
 800d01e:	2200      	movs	r2, #0
 800d020:	6062      	str	r2, [r4, #4]
 800d022:	04d9      	lsls	r1, r3, #19
 800d024:	6922      	ldr	r2, [r4, #16]
 800d026:	6022      	str	r2, [r4, #0]
 800d028:	d504      	bpl.n	800d034 <__sflush_r+0x78>
 800d02a:	1c42      	adds	r2, r0, #1
 800d02c:	d101      	bne.n	800d032 <__sflush_r+0x76>
 800d02e:	682b      	ldr	r3, [r5, #0]
 800d030:	b903      	cbnz	r3, 800d034 <__sflush_r+0x78>
 800d032:	6560      	str	r0, [r4, #84]	@ 0x54
 800d034:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d036:	602f      	str	r7, [r5, #0]
 800d038:	b1b9      	cbz	r1, 800d06a <__sflush_r+0xae>
 800d03a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d03e:	4299      	cmp	r1, r3
 800d040:	d002      	beq.n	800d048 <__sflush_r+0x8c>
 800d042:	4628      	mov	r0, r5
 800d044:	f7ff fca2 	bl	800c98c <_free_r>
 800d048:	2300      	movs	r3, #0
 800d04a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d04c:	e00d      	b.n	800d06a <__sflush_r+0xae>
 800d04e:	2301      	movs	r3, #1
 800d050:	4628      	mov	r0, r5
 800d052:	47b0      	blx	r6
 800d054:	4602      	mov	r2, r0
 800d056:	1c50      	adds	r0, r2, #1
 800d058:	d1c9      	bne.n	800cfee <__sflush_r+0x32>
 800d05a:	682b      	ldr	r3, [r5, #0]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d0c6      	beq.n	800cfee <__sflush_r+0x32>
 800d060:	2b1d      	cmp	r3, #29
 800d062:	d001      	beq.n	800d068 <__sflush_r+0xac>
 800d064:	2b16      	cmp	r3, #22
 800d066:	d11e      	bne.n	800d0a6 <__sflush_r+0xea>
 800d068:	602f      	str	r7, [r5, #0]
 800d06a:	2000      	movs	r0, #0
 800d06c:	e022      	b.n	800d0b4 <__sflush_r+0xf8>
 800d06e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d072:	b21b      	sxth	r3, r3
 800d074:	e01b      	b.n	800d0ae <__sflush_r+0xf2>
 800d076:	690f      	ldr	r7, [r1, #16]
 800d078:	2f00      	cmp	r7, #0
 800d07a:	d0f6      	beq.n	800d06a <__sflush_r+0xae>
 800d07c:	0793      	lsls	r3, r2, #30
 800d07e:	680e      	ldr	r6, [r1, #0]
 800d080:	bf08      	it	eq
 800d082:	694b      	ldreq	r3, [r1, #20]
 800d084:	600f      	str	r7, [r1, #0]
 800d086:	bf18      	it	ne
 800d088:	2300      	movne	r3, #0
 800d08a:	eba6 0807 	sub.w	r8, r6, r7
 800d08e:	608b      	str	r3, [r1, #8]
 800d090:	f1b8 0f00 	cmp.w	r8, #0
 800d094:	dde9      	ble.n	800d06a <__sflush_r+0xae>
 800d096:	6a21      	ldr	r1, [r4, #32]
 800d098:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d09a:	4643      	mov	r3, r8
 800d09c:	463a      	mov	r2, r7
 800d09e:	4628      	mov	r0, r5
 800d0a0:	47b0      	blx	r6
 800d0a2:	2800      	cmp	r0, #0
 800d0a4:	dc08      	bgt.n	800d0b8 <__sflush_r+0xfc>
 800d0a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0aa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d0ae:	81a3      	strh	r3, [r4, #12]
 800d0b0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b8:	4407      	add	r7, r0
 800d0ba:	eba8 0800 	sub.w	r8, r8, r0
 800d0be:	e7e7      	b.n	800d090 <__sflush_r+0xd4>
 800d0c0:	20400001 	.word	0x20400001

0800d0c4 <_fflush_r>:
 800d0c4:	b538      	push	{r3, r4, r5, lr}
 800d0c6:	690b      	ldr	r3, [r1, #16]
 800d0c8:	4605      	mov	r5, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	b913      	cbnz	r3, 800d0d4 <_fflush_r+0x10>
 800d0ce:	2500      	movs	r5, #0
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	bd38      	pop	{r3, r4, r5, pc}
 800d0d4:	b118      	cbz	r0, 800d0de <_fflush_r+0x1a>
 800d0d6:	6a03      	ldr	r3, [r0, #32]
 800d0d8:	b90b      	cbnz	r3, 800d0de <_fflush_r+0x1a>
 800d0da:	f7ff f973 	bl	800c3c4 <__sinit>
 800d0de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d0f3      	beq.n	800d0ce <_fflush_r+0xa>
 800d0e6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d0e8:	07d0      	lsls	r0, r2, #31
 800d0ea:	d404      	bmi.n	800d0f6 <_fflush_r+0x32>
 800d0ec:	0599      	lsls	r1, r3, #22
 800d0ee:	d402      	bmi.n	800d0f6 <_fflush_r+0x32>
 800d0f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d0f2:	f7ff fc34 	bl	800c95e <__retarget_lock_acquire_recursive>
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	4621      	mov	r1, r4
 800d0fa:	f7ff ff5f 	bl	800cfbc <__sflush_r>
 800d0fe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d100:	07da      	lsls	r2, r3, #31
 800d102:	4605      	mov	r5, r0
 800d104:	d4e4      	bmi.n	800d0d0 <_fflush_r+0xc>
 800d106:	89a3      	ldrh	r3, [r4, #12]
 800d108:	059b      	lsls	r3, r3, #22
 800d10a:	d4e1      	bmi.n	800d0d0 <_fflush_r+0xc>
 800d10c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d10e:	f7ff fc27 	bl	800c960 <__retarget_lock_release_recursive>
 800d112:	e7dd      	b.n	800d0d0 <_fflush_r+0xc>

0800d114 <__swhatbuf_r>:
 800d114:	b570      	push	{r4, r5, r6, lr}
 800d116:	460c      	mov	r4, r1
 800d118:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d11c:	2900      	cmp	r1, #0
 800d11e:	b096      	sub	sp, #88	@ 0x58
 800d120:	4615      	mov	r5, r2
 800d122:	461e      	mov	r6, r3
 800d124:	da0d      	bge.n	800d142 <__swhatbuf_r+0x2e>
 800d126:	89a3      	ldrh	r3, [r4, #12]
 800d128:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d12c:	f04f 0100 	mov.w	r1, #0
 800d130:	bf14      	ite	ne
 800d132:	2340      	movne	r3, #64	@ 0x40
 800d134:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d138:	2000      	movs	r0, #0
 800d13a:	6031      	str	r1, [r6, #0]
 800d13c:	602b      	str	r3, [r5, #0]
 800d13e:	b016      	add	sp, #88	@ 0x58
 800d140:	bd70      	pop	{r4, r5, r6, pc}
 800d142:	466a      	mov	r2, sp
 800d144:	f000 f878 	bl	800d238 <_fstat_r>
 800d148:	2800      	cmp	r0, #0
 800d14a:	dbec      	blt.n	800d126 <__swhatbuf_r+0x12>
 800d14c:	9901      	ldr	r1, [sp, #4]
 800d14e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d152:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d156:	4259      	negs	r1, r3
 800d158:	4159      	adcs	r1, r3
 800d15a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d15e:	e7eb      	b.n	800d138 <__swhatbuf_r+0x24>

0800d160 <__smakebuf_r>:
 800d160:	898b      	ldrh	r3, [r1, #12]
 800d162:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d164:	079d      	lsls	r5, r3, #30
 800d166:	4606      	mov	r6, r0
 800d168:	460c      	mov	r4, r1
 800d16a:	d507      	bpl.n	800d17c <__smakebuf_r+0x1c>
 800d16c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	6123      	str	r3, [r4, #16]
 800d174:	2301      	movs	r3, #1
 800d176:	6163      	str	r3, [r4, #20]
 800d178:	b003      	add	sp, #12
 800d17a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d17c:	ab01      	add	r3, sp, #4
 800d17e:	466a      	mov	r2, sp
 800d180:	f7ff ffc8 	bl	800d114 <__swhatbuf_r>
 800d184:	9f00      	ldr	r7, [sp, #0]
 800d186:	4605      	mov	r5, r0
 800d188:	4639      	mov	r1, r7
 800d18a:	4630      	mov	r0, r6
 800d18c:	f7ff f802 	bl	800c194 <_malloc_r>
 800d190:	b948      	cbnz	r0, 800d1a6 <__smakebuf_r+0x46>
 800d192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d196:	059a      	lsls	r2, r3, #22
 800d198:	d4ee      	bmi.n	800d178 <__smakebuf_r+0x18>
 800d19a:	f023 0303 	bic.w	r3, r3, #3
 800d19e:	f043 0302 	orr.w	r3, r3, #2
 800d1a2:	81a3      	strh	r3, [r4, #12]
 800d1a4:	e7e2      	b.n	800d16c <__smakebuf_r+0xc>
 800d1a6:	89a3      	ldrh	r3, [r4, #12]
 800d1a8:	6020      	str	r0, [r4, #0]
 800d1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d1ae:	81a3      	strh	r3, [r4, #12]
 800d1b0:	9b01      	ldr	r3, [sp, #4]
 800d1b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d1b6:	b15b      	cbz	r3, 800d1d0 <__smakebuf_r+0x70>
 800d1b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d1bc:	4630      	mov	r0, r6
 800d1be:	f000 f84d 	bl	800d25c <_isatty_r>
 800d1c2:	b128      	cbz	r0, 800d1d0 <__smakebuf_r+0x70>
 800d1c4:	89a3      	ldrh	r3, [r4, #12]
 800d1c6:	f023 0303 	bic.w	r3, r3, #3
 800d1ca:	f043 0301 	orr.w	r3, r3, #1
 800d1ce:	81a3      	strh	r3, [r4, #12]
 800d1d0:	89a3      	ldrh	r3, [r4, #12]
 800d1d2:	431d      	orrs	r5, r3
 800d1d4:	81a5      	strh	r5, [r4, #12]
 800d1d6:	e7cf      	b.n	800d178 <__smakebuf_r+0x18>

0800d1d8 <_raise_r>:
 800d1d8:	291f      	cmp	r1, #31
 800d1da:	b538      	push	{r3, r4, r5, lr}
 800d1dc:	4605      	mov	r5, r0
 800d1de:	460c      	mov	r4, r1
 800d1e0:	d904      	bls.n	800d1ec <_raise_r+0x14>
 800d1e2:	2316      	movs	r3, #22
 800d1e4:	6003      	str	r3, [r0, #0]
 800d1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d1ea:	bd38      	pop	{r3, r4, r5, pc}
 800d1ec:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d1ee:	b112      	cbz	r2, 800d1f6 <_raise_r+0x1e>
 800d1f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d1f4:	b94b      	cbnz	r3, 800d20a <_raise_r+0x32>
 800d1f6:	4628      	mov	r0, r5
 800d1f8:	f000 f852 	bl	800d2a0 <_getpid_r>
 800d1fc:	4622      	mov	r2, r4
 800d1fe:	4601      	mov	r1, r0
 800d200:	4628      	mov	r0, r5
 800d202:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d206:	f000 b839 	b.w	800d27c <_kill_r>
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d00a      	beq.n	800d224 <_raise_r+0x4c>
 800d20e:	1c59      	adds	r1, r3, #1
 800d210:	d103      	bne.n	800d21a <_raise_r+0x42>
 800d212:	2316      	movs	r3, #22
 800d214:	6003      	str	r3, [r0, #0]
 800d216:	2001      	movs	r0, #1
 800d218:	e7e7      	b.n	800d1ea <_raise_r+0x12>
 800d21a:	2100      	movs	r1, #0
 800d21c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d220:	4620      	mov	r0, r4
 800d222:	4798      	blx	r3
 800d224:	2000      	movs	r0, #0
 800d226:	e7e0      	b.n	800d1ea <_raise_r+0x12>

0800d228 <raise>:
 800d228:	4b02      	ldr	r3, [pc, #8]	@ (800d234 <raise+0xc>)
 800d22a:	4601      	mov	r1, r0
 800d22c:	6818      	ldr	r0, [r3, #0]
 800d22e:	f7ff bfd3 	b.w	800d1d8 <_raise_r>
 800d232:	bf00      	nop
 800d234:	200000a8 	.word	0x200000a8

0800d238 <_fstat_r>:
 800d238:	b538      	push	{r3, r4, r5, lr}
 800d23a:	4d07      	ldr	r5, [pc, #28]	@ (800d258 <_fstat_r+0x20>)
 800d23c:	2300      	movs	r3, #0
 800d23e:	4604      	mov	r4, r0
 800d240:	4608      	mov	r0, r1
 800d242:	4611      	mov	r1, r2
 800d244:	602b      	str	r3, [r5, #0]
 800d246:	f7f6 fbd1 	bl	80039ec <_fstat>
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	d102      	bne.n	800d254 <_fstat_r+0x1c>
 800d24e:	682b      	ldr	r3, [r5, #0]
 800d250:	b103      	cbz	r3, 800d254 <_fstat_r+0x1c>
 800d252:	6023      	str	r3, [r4, #0]
 800d254:	bd38      	pop	{r3, r4, r5, pc}
 800d256:	bf00      	nop
 800d258:	20000b68 	.word	0x20000b68

0800d25c <_isatty_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4d06      	ldr	r5, [pc, #24]	@ (800d278 <_isatty_r+0x1c>)
 800d260:	2300      	movs	r3, #0
 800d262:	4604      	mov	r4, r0
 800d264:	4608      	mov	r0, r1
 800d266:	602b      	str	r3, [r5, #0]
 800d268:	f7f6 fbd0 	bl	8003a0c <_isatty>
 800d26c:	1c43      	adds	r3, r0, #1
 800d26e:	d102      	bne.n	800d276 <_isatty_r+0x1a>
 800d270:	682b      	ldr	r3, [r5, #0]
 800d272:	b103      	cbz	r3, 800d276 <_isatty_r+0x1a>
 800d274:	6023      	str	r3, [r4, #0]
 800d276:	bd38      	pop	{r3, r4, r5, pc}
 800d278:	20000b68 	.word	0x20000b68

0800d27c <_kill_r>:
 800d27c:	b538      	push	{r3, r4, r5, lr}
 800d27e:	4d07      	ldr	r5, [pc, #28]	@ (800d29c <_kill_r+0x20>)
 800d280:	2300      	movs	r3, #0
 800d282:	4604      	mov	r4, r0
 800d284:	4608      	mov	r0, r1
 800d286:	4611      	mov	r1, r2
 800d288:	602b      	str	r3, [r5, #0]
 800d28a:	f7f6 fb6b 	bl	8003964 <_kill>
 800d28e:	1c43      	adds	r3, r0, #1
 800d290:	d102      	bne.n	800d298 <_kill_r+0x1c>
 800d292:	682b      	ldr	r3, [r5, #0]
 800d294:	b103      	cbz	r3, 800d298 <_kill_r+0x1c>
 800d296:	6023      	str	r3, [r4, #0]
 800d298:	bd38      	pop	{r3, r4, r5, pc}
 800d29a:	bf00      	nop
 800d29c:	20000b68 	.word	0x20000b68

0800d2a0 <_getpid_r>:
 800d2a0:	f7f6 bb58 	b.w	8003954 <_getpid>

0800d2a4 <_init>:
 800d2a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2a6:	bf00      	nop
 800d2a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2aa:	bc08      	pop	{r3}
 800d2ac:	469e      	mov	lr, r3
 800d2ae:	4770      	bx	lr

0800d2b0 <_fini>:
 800d2b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2b2:	bf00      	nop
 800d2b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d2b6:	bc08      	pop	{r3}
 800d2b8:	469e      	mov	lr, r3
 800d2ba:	4770      	bx	lr
