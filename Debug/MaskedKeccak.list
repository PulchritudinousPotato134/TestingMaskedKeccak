
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011be8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08011d78  08011d78  00012d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012144  08012144  00014088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08012144  08012144  00013144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801214c  0801214c  00014088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801214c  0801214c  0001314c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012150  08012150  00013150  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  08012154  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00014088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  00014088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  00014088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00014088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a76d  00000000  00000000  000140b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000451f  00000000  00000000  0002e825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001630  00000000  00000000  00032d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000110d  00000000  00000000  00034378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000260bb  00000000  00000000  00035485  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e69e  00000000  00000000  0005b540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1efd  00000000  00000000  00079bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014badb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006574  00000000  00000000  0014bb20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  00152094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08011d60 	.word	0x08011d60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08011d60 	.word	0x08011d60

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 800059c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80005a0:	b086      	sub	sp, #24
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 80005a6:	f04f 0000 	mov.w	r0, #0
 80005aa:	f04f 0100 	mov.w	r1, #0
 80005ae:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 80005b2:	2100      	movs	r1, #0
 80005b4:	6179      	str	r1, [r7, #20]
 80005b6:	e022      	b.n	80005fe <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	6979      	ldr	r1, [r7, #20]
 80005bc:	4401      	add	r1, r0
 80005be:	7809      	ldrb	r1, [r1, #0]
 80005c0:	b2c9      	uxtb	r1, r1
 80005c2:	2000      	movs	r0, #0
 80005c4:	460c      	mov	r4, r1
 80005c6:	4605      	mov	r5, r0
 80005c8:	6979      	ldr	r1, [r7, #20]
 80005ca:	00c9      	lsls	r1, r1, #3
 80005cc:	f1a1 0620 	sub.w	r6, r1, #32
 80005d0:	f1c1 0020 	rsb	r0, r1, #32
 80005d4:	fa05 f301 	lsl.w	r3, r5, r1
 80005d8:	fa04 f606 	lsl.w	r6, r4, r6
 80005dc:	4333      	orrs	r3, r6
 80005de:	fa24 f000 	lsr.w	r0, r4, r0
 80005e2:	4303      	orrs	r3, r0
 80005e4:	fa04 f201 	lsl.w	r2, r4, r1
 80005e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80005ec:	ea40 0802 	orr.w	r8, r0, r2
 80005f0:	ea41 0903 	orr.w	r9, r1, r3
 80005f4:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 80005f8:	6979      	ldr	r1, [r7, #20]
 80005fa:	3101      	adds	r1, #1
 80005fc:	6179      	str	r1, [r7, #20]
 80005fe:	6979      	ldr	r1, [r7, #20]
 8000600:	2907      	cmp	r1, #7
 8000602:	d9d9      	bls.n	80005b8 <load64+0x1c>

  return r;
 8000604:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000608:	4610      	mov	r0, r2
 800060a:	4619      	mov	r1, r3
 800060c:	3718      	adds	r7, #24
 800060e:	46bd      	mov	sp, r7
 8000610:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000614:	4770      	bx	lr

08000616 <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 8000616:	b4f0      	push	{r4, r5, r6, r7}
 8000618:	b086      	sub	sp, #24
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
 8000626:	e019      	b.n	800065c <store64+0x46>
    x[i] = u >> 8*i;
 8000628:	697b      	ldr	r3, [r7, #20]
 800062a:	00d9      	lsls	r1, r3, #3
 800062c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000630:	f1c1 0620 	rsb	r6, r1, #32
 8000634:	f1a1 0020 	sub.w	r0, r1, #32
 8000638:	fa22 f401 	lsr.w	r4, r2, r1
 800063c:	fa03 f606 	lsl.w	r6, r3, r6
 8000640:	4334      	orrs	r4, r6
 8000642:	fa23 f000 	lsr.w	r0, r3, r0
 8000646:	4304      	orrs	r4, r0
 8000648:	fa23 f501 	lsr.w	r5, r3, r1
 800064c:	68fa      	ldr	r2, [r7, #12]
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	4413      	add	r3, r2
 8000652:	b2e2      	uxtb	r2, r4
 8000654:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 8000656:	697b      	ldr	r3, [r7, #20]
 8000658:	3301      	adds	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	2b07      	cmp	r3, #7
 8000660:	d9e2      	bls.n	8000628 <store64+0x12>
}
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bcf0      	pop	{r4, r5, r6, r7}
 800066c:	4770      	bx	lr
	...

08000670 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 8000670:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000674:	f6ad 3d88 	subw	sp, sp, #2952	@ 0xb88
 8000678:	af00      	add	r7, sp, #0
 800067a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800067e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000682:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 8000684:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000688:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000692:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8000696:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 800069a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800069e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80006a8:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 80006ac:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 80006b0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80006b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80006be:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80006c2:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 80006c6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80006ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80006d4:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 80006d8:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 80006dc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80006e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80006ea:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80006ee:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 80006f2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80006f6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8000700:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8000704:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8000708:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800070c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8000716:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 800071a:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 800071e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000722:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800072c:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 8000730:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 8000734:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000738:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	@ 0x40
 8000742:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8000746:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 800074a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800074e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	@ 0x48
 8000758:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 800075c:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 8000760:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000764:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 800076e:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8000772:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 8000776:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800077a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	@ 0x58
 8000784:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8000788:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 800078c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000790:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 800079a:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 800079e:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 80007a2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80007a6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	@ 0x68
 80007b0:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 80007b4:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 80007b8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80007bc:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	@ 0x70
 80007c6:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 80007ca:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 80007ce:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80007d2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	@ 0x78
 80007dc:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 80007e0:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 80007e4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80007e8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	@ 0x80
 80007f2:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80007f6:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 80007fa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80007fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	@ 0x88
 8000808:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 800080c:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8000810:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000814:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	@ 0x90
 800081e:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8000822:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 8000826:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800082a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	@ 0x98
 8000834:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 8000838:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 800083c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000840:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	@ 0xa0
 800084a:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 800084e:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 8000852:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000856:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	@ 0xa8
 8000860:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8000864:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 8000868:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800086c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	@ 0xb0
 8000876:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 800087a:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 800087e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000882:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	@ 0xb8
 800088c:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8000890:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8000894:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8000898:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	@ 0xc0
 80008a2:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 80008a6:	e9c1 2300 	strd	r2, r3, [r1]

        for(round = 0; round < NROUNDS; round += 2) {
 80008aa:	2300      	movs	r3, #0
 80008ac:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 80008b0:	f002 bdf7 	b.w	80034a2 <KeccakF1600_StatePermute+0x2e32>
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 80008b4:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80008b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80008bc:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 80008c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c4:	ea80 0602 	eor.w	r6, r0, r2
 80008c8:	f8c7 6990 	str.w	r6, [r7, #2448]	@ 0x990
 80008cc:	404b      	eors	r3, r1
 80008ce:	f8c7 3994 	str.w	r3, [r7, #2452]	@ 0x994
 80008d2:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 80008d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008da:	f8d7 1990 	ldr.w	r1, [r7, #2448]	@ 0x990
 80008de:	4051      	eors	r1, r2
 80008e0:	f8c7 1988 	str.w	r1, [r7, #2440]	@ 0x988
 80008e4:	f8d7 1994 	ldr.w	r1, [r7, #2452]	@ 0x994
 80008e8:	404b      	eors	r3, r1
 80008ea:	f8c7 398c 	str.w	r3, [r7, #2444]	@ 0x98c
 80008ee:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 80008f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008f6:	f8d7 1988 	ldr.w	r1, [r7, #2440]	@ 0x988
 80008fa:	4051      	eors	r1, r2
 80008fc:	f8c7 1980 	str.w	r1, [r7, #2432]	@ 0x980
 8000900:	f8d7 198c 	ldr.w	r1, [r7, #2444]	@ 0x98c
 8000904:	404b      	eors	r3, r1
 8000906:	f8c7 3984 	str.w	r3, [r7, #2436]	@ 0x984
 800090a:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 800090e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000912:	f8d7 1980 	ldr.w	r1, [r7, #2432]	@ 0x980
 8000916:	4051      	eors	r1, r2
 8000918:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 800091c:	f8d7 1984 	ldr.w	r1, [r7, #2436]	@ 0x984
 8000920:	404b      	eors	r3, r1
 8000922:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 8000926:	f507 63a9 	add.w	r3, r7, #1352	@ 0x548
 800092a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800092e:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8000932:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000936:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 800093a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800093e:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8000942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000946:	ea80 0602 	eor.w	r6, r0, r2
 800094a:	f8c7 6978 	str.w	r6, [r7, #2424]	@ 0x978
 800094e:	404b      	eors	r3, r1
 8000950:	f8c7 397c 	str.w	r3, [r7, #2428]	@ 0x97c
 8000954:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 8000958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800095c:	f8d7 1978 	ldr.w	r1, [r7, #2424]	@ 0x978
 8000960:	4051      	eors	r1, r2
 8000962:	f8c7 1970 	str.w	r1, [r7, #2416]	@ 0x970
 8000966:	f8d7 197c 	ldr.w	r1, [r7, #2428]	@ 0x97c
 800096a:	404b      	eors	r3, r1
 800096c:	f8c7 3974 	str.w	r3, [r7, #2420]	@ 0x974
 8000970:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 8000974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000978:	f8d7 1970 	ldr.w	r1, [r7, #2416]	@ 0x970
 800097c:	4051      	eors	r1, r2
 800097e:	f8c7 1968 	str.w	r1, [r7, #2408]	@ 0x968
 8000982:	f8d7 1974 	ldr.w	r1, [r7, #2420]	@ 0x974
 8000986:	404b      	eors	r3, r1
 8000988:	f8c7 396c 	str.w	r3, [r7, #2412]	@ 0x96c
 800098c:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8000990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000994:	f8d7 1968 	ldr.w	r1, [r7, #2408]	@ 0x968
 8000998:	4051      	eors	r1, r2
 800099a:	f8c7 1540 	str.w	r1, [r7, #1344]	@ 0x540
 800099e:	f8d7 196c 	ldr.w	r1, [r7, #2412]	@ 0x96c
 80009a2:	404b      	eors	r3, r1
 80009a4:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 80009a8:	f507 63a8 	add.w	r3, r7, #1344	@ 0x540
 80009ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009b0:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 80009b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 80009b8:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80009bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009c0:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80009c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009c8:	ea80 0602 	eor.w	r6, r0, r2
 80009cc:	f8c7 6960 	str.w	r6, [r7, #2400]	@ 0x960
 80009d0:	404b      	eors	r3, r1
 80009d2:	f8c7 3964 	str.w	r3, [r7, #2404]	@ 0x964
 80009d6:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80009da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009de:	f8d7 1960 	ldr.w	r1, [r7, #2400]	@ 0x960
 80009e2:	4051      	eors	r1, r2
 80009e4:	f8c7 1958 	str.w	r1, [r7, #2392]	@ 0x958
 80009e8:	f8d7 1964 	ldr.w	r1, [r7, #2404]	@ 0x964
 80009ec:	404b      	eors	r3, r1
 80009ee:	f8c7 395c 	str.w	r3, [r7, #2396]	@ 0x95c
 80009f2:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 80009f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009fa:	f8d7 1958 	ldr.w	r1, [r7, #2392]	@ 0x958
 80009fe:	4051      	eors	r1, r2
 8000a00:	f8c7 1950 	str.w	r1, [r7, #2384]	@ 0x950
 8000a04:	f8d7 195c 	ldr.w	r1, [r7, #2396]	@ 0x95c
 8000a08:	404b      	eors	r3, r1
 8000a0a:	f8c7 3954 	str.w	r3, [r7, #2388]	@ 0x954
 8000a0e:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8000a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a16:	f8d7 1950 	ldr.w	r1, [r7, #2384]	@ 0x950
 8000a1a:	4051      	eors	r1, r2
 8000a1c:	f8c7 1538 	str.w	r1, [r7, #1336]	@ 0x538
 8000a20:	f8d7 1954 	ldr.w	r1, [r7, #2388]	@ 0x954
 8000a24:	404b      	eors	r3, r1
 8000a26:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8000a2a:	f507 63a7 	add.w	r3, r7, #1336	@ 0x538
 8000a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a32:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8000a36:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000a3a:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8000a3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a42:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8000a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4a:	ea80 0602 	eor.w	r6, r0, r2
 8000a4e:	f8c7 6948 	str.w	r6, [r7, #2376]	@ 0x948
 8000a52:	404b      	eors	r3, r1
 8000a54:	f8c7 394c 	str.w	r3, [r7, #2380]	@ 0x94c
 8000a58:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8000a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a60:	f8d7 1948 	ldr.w	r1, [r7, #2376]	@ 0x948
 8000a64:	4051      	eors	r1, r2
 8000a66:	f8c7 1940 	str.w	r1, [r7, #2368]	@ 0x940
 8000a6a:	f8d7 194c 	ldr.w	r1, [r7, #2380]	@ 0x94c
 8000a6e:	404b      	eors	r3, r1
 8000a70:	f8c7 3944 	str.w	r3, [r7, #2372]	@ 0x944
 8000a74:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8000a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a7c:	f8d7 1940 	ldr.w	r1, [r7, #2368]	@ 0x940
 8000a80:	4051      	eors	r1, r2
 8000a82:	f8c7 1938 	str.w	r1, [r7, #2360]	@ 0x938
 8000a86:	f8d7 1944 	ldr.w	r1, [r7, #2372]	@ 0x944
 8000a8a:	404b      	eors	r3, r1
 8000a8c:	f8c7 393c 	str.w	r3, [r7, #2364]	@ 0x93c
 8000a90:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8000a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a98:	f8d7 1938 	ldr.w	r1, [r7, #2360]	@ 0x938
 8000a9c:	4051      	eors	r1, r2
 8000a9e:	f8c7 1530 	str.w	r1, [r7, #1328]	@ 0x530
 8000aa2:	f8d7 193c 	ldr.w	r1, [r7, #2364]	@ 0x93c
 8000aa6:	404b      	eors	r3, r1
 8000aa8:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 8000aac:	f507 63a6 	add.w	r3, r7, #1328	@ 0x530
 8000ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab4:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8000ab8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000abc:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8000ac0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ac4:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 8000ac8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000acc:	ea80 0602 	eor.w	r6, r0, r2
 8000ad0:	f8c7 6930 	str.w	r6, [r7, #2352]	@ 0x930
 8000ad4:	404b      	eors	r3, r1
 8000ad6:	f8c7 3934 	str.w	r3, [r7, #2356]	@ 0x934
 8000ada:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8000ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ae2:	f8d7 1930 	ldr.w	r1, [r7, #2352]	@ 0x930
 8000ae6:	4051      	eors	r1, r2
 8000ae8:	f8c7 1928 	str.w	r1, [r7, #2344]	@ 0x928
 8000aec:	f8d7 1934 	ldr.w	r1, [r7, #2356]	@ 0x934
 8000af0:	404b      	eors	r3, r1
 8000af2:	f8c7 392c 	str.w	r3, [r7, #2348]	@ 0x92c
 8000af6:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 8000afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000afe:	f8d7 1928 	ldr.w	r1, [r7, #2344]	@ 0x928
 8000b02:	4051      	eors	r1, r2
 8000b04:	f8c7 1920 	str.w	r1, [r7, #2336]	@ 0x920
 8000b08:	f8d7 192c 	ldr.w	r1, [r7, #2348]	@ 0x92c
 8000b0c:	404b      	eors	r3, r1
 8000b0e:	f8c7 3924 	str.w	r3, [r7, #2340]	@ 0x924
 8000b12:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	f8d7 1920 	ldr.w	r1, [r7, #2336]	@ 0x920
 8000b1e:	4051      	eors	r1, r2
 8000b20:	f8c7 1528 	str.w	r1, [r7, #1320]	@ 0x528
 8000b24:	f8d7 1924 	ldr.w	r1, [r7, #2340]	@ 0x924
 8000b28:	404b      	eors	r3, r1
 8000b2a:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8000b2e:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b36:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8000b3a:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round, A, E)
            Da = BCu^ROL(BCe, 1);
 8000b3e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8000b42:	0fda      	lsrs	r2, r3, #31
 8000b44:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	f8c7 391c 	str.w	r3, [r7, #2332]	@ 0x91c
 8000b50:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8000b54:	0fda      	lsrs	r2, r3, #31
 8000b56:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	f8c7 3918 	str.w	r3, [r7, #2328]	@ 0x918
 8000b62:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b6a:	f8d7 1918 	ldr.w	r1, [r7, #2328]	@ 0x918
 8000b6e:	4051      	eors	r1, r2
 8000b70:	f8c7 1520 	str.w	r1, [r7, #1312]	@ 0x520
 8000b74:	f8d7 191c 	ldr.w	r1, [r7, #2332]	@ 0x91c
 8000b78:	404b      	eors	r3, r1
 8000b7a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8000b7e:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8000b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b86:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8000b8a:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8000b8e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8000b92:	0fda      	lsrs	r2, r3, #31
 8000b94:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8000b98:	005b      	lsls	r3, r3, #1
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	f8c7 3914 	str.w	r3, [r7, #2324]	@ 0x914
 8000ba0:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8000ba4:	0fda      	lsrs	r2, r3, #31
 8000ba6:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 8000baa:	005b      	lsls	r3, r3, #1
 8000bac:	4313      	orrs	r3, r2
 8000bae:	f8c7 3910 	str.w	r3, [r7, #2320]	@ 0x910
 8000bb2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8000bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bba:	f8d7 1910 	ldr.w	r1, [r7, #2320]	@ 0x910
 8000bbe:	4051      	eors	r1, r2
 8000bc0:	f8c7 1518 	str.w	r1, [r7, #1304]	@ 0x518
 8000bc4:	f8d7 1914 	ldr.w	r1, [r7, #2324]	@ 0x914
 8000bc8:	404b      	eors	r3, r1
 8000bca:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8000bce:	f507 63a3 	add.w	r3, r7, #1304	@ 0x518
 8000bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd6:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 8000bda:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8000bde:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8000be2:	0fda      	lsrs	r2, r3, #31
 8000be4:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	4313      	orrs	r3, r2
 8000bec:	f8c7 390c 	str.w	r3, [r7, #2316]	@ 0x90c
 8000bf0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 8000bf4:	0fda      	lsrs	r2, r3, #31
 8000bf6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	f8c7 3908 	str.w	r3, [r7, #2312]	@ 0x908
 8000c02:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8000c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0a:	f8d7 1908 	ldr.w	r1, [r7, #2312]	@ 0x908
 8000c0e:	4051      	eors	r1, r2
 8000c10:	f8c7 1510 	str.w	r1, [r7, #1296]	@ 0x510
 8000c14:	f8d7 190c 	ldr.w	r1, [r7, #2316]	@ 0x90c
 8000c18:	404b      	eors	r3, r1
 8000c1a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 8000c1e:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c26:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 8000c2a:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8000c2e:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8000c32:	0fda      	lsrs	r2, r3, #31
 8000c34:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8000c38:	005b      	lsls	r3, r3, #1
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	f8c7 3904 	str.w	r3, [r7, #2308]	@ 0x904
 8000c40:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8000c44:	0fda      	lsrs	r2, r3, #31
 8000c46:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8000c4a:	005b      	lsls	r3, r3, #1
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	f8c7 3900 	str.w	r3, [r7, #2304]	@ 0x900
 8000c52:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8000c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c5a:	f8d7 1900 	ldr.w	r1, [r7, #2304]	@ 0x900
 8000c5e:	4051      	eors	r1, r2
 8000c60:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 8000c64:	f8d7 1904 	ldr.w	r1, [r7, #2308]	@ 0x904
 8000c68:	404b      	eors	r3, r1
 8000c6a:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8000c6e:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8000c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c76:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 8000c7a:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8000c7e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8000c82:	0fda      	lsrs	r2, r3, #31
 8000c84:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8000c88:	005b      	lsls	r3, r3, #1
 8000c8a:	4313      	orrs	r3, r2
 8000c8c:	f8c7 38fc 	str.w	r3, [r7, #2300]	@ 0x8fc
 8000c90:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8000c94:	0fda      	lsrs	r2, r3, #31
 8000c96:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	f8c7 38f8 	str.w	r3, [r7, #2296]	@ 0x8f8
 8000ca2:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8000ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000caa:	f8d7 18f8 	ldr.w	r1, [r7, #2296]	@ 0x8f8
 8000cae:	4051      	eors	r1, r2
 8000cb0:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
 8000cb4:	f8d7 18fc 	ldr.w	r1, [r7, #2300]	@ 0x8fc
 8000cb8:	404b      	eors	r3, r1
 8000cba:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8000cbe:	f507 63a0 	add.w	r3, r7, #1280	@ 0x500
 8000cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cc6:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 8000cca:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8000cce:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8000cd2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cd6:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8000cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cde:	ea80 0602 	eor.w	r6, r0, r2
 8000ce2:	f8c7 64f8 	str.w	r6, [r7, #1272]	@ 0x4f8
 8000ce6:	404b      	eors	r3, r1
 8000ce8:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8000cec:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8000cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cf4:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8000cf8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8000cfc:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 8000d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d04:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8000d08:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8000d0c:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8000d10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d14:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8000d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d1c:	ea80 0602 	eor.w	r6, r0, r2
 8000d20:	f8c7 64f0 	str.w	r6, [r7, #1264]	@ 0x4f0
 8000d24:	404b      	eors	r3, r1
 8000d26:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8000d2a:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8000d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d32:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8000d36:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8000d3a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8000d3e:	031a      	lsls	r2, r3, #12
 8000d40:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 8000d44:	0d1b      	lsrs	r3, r3, #20
 8000d46:	4313      	orrs	r3, r2
 8000d48:	f8c7 34e8 	str.w	r3, [r7, #1256]	@ 0x4e8
 8000d4c:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	@ 0xb48
 8000d50:	031a      	lsls	r2, r3, #12
 8000d52:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	@ 0xb4c
 8000d56:	0d1b      	lsrs	r3, r3, #20
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8000d5e:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d66:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8000d6a:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8000d6e:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 8000d72:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d76:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8000d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d7e:	ea80 0602 	eor.w	r6, r0, r2
 8000d82:	f8c7 64e0 	str.w	r6, [r7, #1248]	@ 0x4e0
 8000d86:	404b      	eors	r3, r1
 8000d88:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8000d8c:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8000d90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d94:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8000d98:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8000d9c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 8000da0:	02da      	lsls	r2, r3, #11
 8000da2:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 8000da6:	0d5b      	lsrs	r3, r3, #21
 8000da8:	4313      	orrs	r3, r2
 8000daa:	f8c7 34d8 	str.w	r3, [r7, #1240]	@ 0x4d8
 8000dae:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	@ 0xb18
 8000db2:	02da      	lsls	r2, r3, #11
 8000db4:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	@ 0xb1c
 8000db8:	0d5b      	lsrs	r3, r3, #21
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8000dc0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc8:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8000dcc:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8000dd0:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 8000dd4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000dd8:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8000ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000de0:	ea80 0602 	eor.w	r6, r0, r2
 8000de4:	f8c7 64d0 	str.w	r6, [r7, #1232]	@ 0x4d0
 8000de8:	404b      	eors	r3, r1
 8000dea:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8000dee:	f507 639a 	add.w	r3, r7, #1232	@ 0x4d0
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 8000dfa:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8000dfe:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 8000e02:	0ada      	lsrs	r2, r3, #11
 8000e04:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 8000e08:	055b      	lsls	r3, r3, #21
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8000e10:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	@ 0xaec
 8000e14:	0ada      	lsrs	r2, r3, #11
 8000e16:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	@ 0xae8
 8000e1a:	055b      	lsls	r3, r3, #21
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	f8c7 34c8 	str.w	r3, [r7, #1224]	@ 0x4c8
 8000e22:	f507 6399 	add.w	r3, r7, #1224	@ 0x4c8
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8000e2e:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 8000e32:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 8000e36:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e3a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8000e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e42:	ea80 0602 	eor.w	r6, r0, r2
 8000e46:	f8c7 64c0 	str.w	r6, [r7, #1216]	@ 0x4c0
 8000e4a:	404b      	eors	r3, r1
 8000e4c:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 8000e50:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8000e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e58:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8000e5c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 8000e60:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8000e64:	0c9a      	lsrs	r2, r3, #18
 8000e66:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 8000e6a:	039b      	lsls	r3, r3, #14
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 8000e72:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	@ 0xabc
 8000e76:	0c9a      	lsrs	r2, r3, #18
 8000e78:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	@ 0xab8
 8000e7c:	039b      	lsls	r3, r3, #14
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	f8c7 34b8 	str.w	r3, [r7, #1208]	@ 0x4b8
 8000e84:	f507 6397 	add.w	r3, r7, #1208	@ 0x4b8
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8000e90:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 8000e94:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8000e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9c:	43d1      	mvns	r1, r2
 8000e9e:	f8c7 18f0 	str.w	r1, [r7, #2288]	@ 0x8f0
 8000ea2:	43db      	mvns	r3, r3
 8000ea4:	f8c7 38f4 	str.w	r3, [r7, #2292]	@ 0x8f4
 8000ea8:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8000eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb0:	f8d7 18f0 	ldr.w	r1, [r7, #2288]	@ 0x8f0
 8000eb4:	4011      	ands	r1, r2
 8000eb6:	f8c7 18e8 	str.w	r1, [r7, #2280]	@ 0x8e8
 8000eba:	f8d7 18f4 	ldr.w	r1, [r7, #2292]	@ 0x8f4
 8000ebe:	400b      	ands	r3, r1
 8000ec0:	f8c7 38ec 	str.w	r3, [r7, #2284]	@ 0x8ec
 8000ec4:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f8d7 18e8 	ldr.w	r1, [r7, #2280]	@ 0x8e8
 8000ed0:	4051      	eors	r1, r2
 8000ed2:	f8c7 14b0 	str.w	r1, [r7, #1200]	@ 0x4b0
 8000ed6:	f8d7 18ec 	ldr.w	r1, [r7, #2284]	@ 0x8ec
 8000eda:	404b      	eors	r3, r1
 8000edc:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 8000ee0:	f507 6396 	add.w	r3, r7, #1200	@ 0x4b0
 8000ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ee8:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 8000eec:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000ef0:	4afd      	ldr	r2, [pc, #1012]	@ (80012e8 <KeccakF1600_StatePermute+0xc78>)
 8000ef2:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 8000ef6:	00db      	lsls	r3, r3, #3
 8000ef8:	4413      	add	r3, r2
 8000efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000efe:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	ea82 0600 	eor.w	r6, r2, r0
 8000f0a:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8
 8000f0e:	404b      	eors	r3, r1
 8000f10:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 8000f14:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8000f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1c:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 8000f20:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 8000f24:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8000f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2c:	43d1      	mvns	r1, r2
 8000f2e:	f8c7 18e0 	str.w	r1, [r7, #2272]	@ 0x8e0
 8000f32:	43db      	mvns	r3, r3
 8000f34:	f8c7 38e4 	str.w	r3, [r7, #2276]	@ 0x8e4
 8000f38:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8000f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f40:	f8d7 18e0 	ldr.w	r1, [r7, #2272]	@ 0x8e0
 8000f44:	4011      	ands	r1, r2
 8000f46:	f8c7 18d8 	str.w	r1, [r7, #2264]	@ 0x8d8
 8000f4a:	f8d7 18e4 	ldr.w	r1, [r7, #2276]	@ 0x8e4
 8000f4e:	400b      	ands	r3, r1
 8000f50:	f8c7 38dc 	str.w	r3, [r7, #2268]	@ 0x8dc
 8000f54:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8000f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f5c:	f8d7 18d8 	ldr.w	r1, [r7, #2264]	@ 0x8d8
 8000f60:	4051      	eors	r1, r2
 8000f62:	f8c7 14a0 	str.w	r1, [r7, #1184]	@ 0x4a0
 8000f66:	f8d7 18dc 	ldr.w	r1, [r7, #2268]	@ 0x8dc
 8000f6a:	404b      	eors	r3, r1
 8000f6c:	f8c7 34a4 	str.w	r3, [r7, #1188]	@ 0x4a4
 8000f70:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8000f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f78:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8000f7c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8000f80:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8000f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f88:	43d1      	mvns	r1, r2
 8000f8a:	f8c7 18d0 	str.w	r1, [r7, #2256]	@ 0x8d0
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	f8c7 38d4 	str.w	r3, [r7, #2260]	@ 0x8d4
 8000f94:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f8d7 18d0 	ldr.w	r1, [r7, #2256]	@ 0x8d0
 8000fa0:	4011      	ands	r1, r2
 8000fa2:	f8c7 18c8 	str.w	r1, [r7, #2248]	@ 0x8c8
 8000fa6:	f8d7 18d4 	ldr.w	r1, [r7, #2260]	@ 0x8d4
 8000faa:	400b      	ands	r3, r1
 8000fac:	f8c7 38cc 	str.w	r3, [r7, #2252]	@ 0x8cc
 8000fb0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	f8d7 18c8 	ldr.w	r1, [r7, #2248]	@ 0x8c8
 8000fbc:	4051      	eors	r1, r2
 8000fbe:	f8c7 1498 	str.w	r1, [r7, #1176]	@ 0x498
 8000fc2:	f8d7 18cc 	ldr.w	r1, [r7, #2252]	@ 0x8cc
 8000fc6:	404b      	eors	r3, r1
 8000fc8:	f8c7 349c 	str.w	r3, [r7, #1180]	@ 0x49c
 8000fcc:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8000fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd4:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 8000fd8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 8000fdc:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	43d1      	mvns	r1, r2
 8000fe6:	f8c7 18c0 	str.w	r1, [r7, #2240]	@ 0x8c0
 8000fea:	43db      	mvns	r3, r3
 8000fec:	f8c7 38c4 	str.w	r3, [r7, #2244]	@ 0x8c4
 8000ff0:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f8d7 18c0 	ldr.w	r1, [r7, #2240]	@ 0x8c0
 8000ffc:	4011      	ands	r1, r2
 8000ffe:	f8c7 18b8 	str.w	r1, [r7, #2232]	@ 0x8b8
 8001002:	f8d7 18c4 	ldr.w	r1, [r7, #2244]	@ 0x8c4
 8001006:	400b      	ands	r3, r1
 8001008:	f8c7 38bc 	str.w	r3, [r7, #2236]	@ 0x8bc
 800100c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001014:	f8d7 18b8 	ldr.w	r1, [r7, #2232]	@ 0x8b8
 8001018:	4051      	eors	r1, r2
 800101a:	f8c7 1490 	str.w	r1, [r7, #1168]	@ 0x490
 800101e:	f8d7 18bc 	ldr.w	r1, [r7, #2236]	@ 0x8bc
 8001022:	404b      	eors	r3, r1
 8001024:	f8c7 3494 	str.w	r3, [r7, #1172]	@ 0x494
 8001028:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 8001038:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800103c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001040:	43d1      	mvns	r1, r2
 8001042:	f8c7 18b0 	str.w	r1, [r7, #2224]	@ 0x8b0
 8001046:	43db      	mvns	r3, r3
 8001048:	f8c7 38b4 	str.w	r3, [r7, #2228]	@ 0x8b4
 800104c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f8d7 18b0 	ldr.w	r1, [r7, #2224]	@ 0x8b0
 8001058:	4011      	ands	r1, r2
 800105a:	f8c7 18a8 	str.w	r1, [r7, #2216]	@ 0x8a8
 800105e:	f8d7 18b4 	ldr.w	r1, [r7, #2228]	@ 0x8b4
 8001062:	400b      	ands	r3, r1
 8001064:	f8c7 38ac 	str.w	r3, [r7, #2220]	@ 0x8ac
 8001068:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800106c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001070:	f8d7 18a8 	ldr.w	r1, [r7, #2216]	@ 0x8a8
 8001074:	4051      	eors	r1, r2
 8001076:	f8c7 1488 	str.w	r1, [r7, #1160]	@ 0x488
 800107a:	f8d7 18ac 	ldr.w	r1, [r7, #2220]	@ 0x8ac
 800107e:	404b      	eors	r3, r1
 8001080:	f8c7 348c 	str.w	r3, [r7, #1164]	@ 0x48c
 8001084:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 8001088:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108c:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8001090:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 8001094:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8001098:	e9d3 0100 	ldrd	r0, r1, [r3]
 800109c:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	ea80 0602 	eor.w	r6, r0, r2
 80010a8:	f8c7 6480 	str.w	r6, [r7, #1152]	@ 0x480
 80010ac:	404b      	eors	r3, r1
 80010ae:	f8c7 3484 	str.w	r3, [r7, #1156]	@ 0x484
 80010b2:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 80010b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ba:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 80010be:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 80010c2:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 80010c6:	091a      	lsrs	r2, r3, #4
 80010c8:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80010cc:	071b      	lsls	r3, r3, #28
 80010ce:	4313      	orrs	r3, r2
 80010d0:	f8c7 347c 	str.w	r3, [r7, #1148]	@ 0x47c
 80010d4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	@ 0xb64
 80010d8:	091a      	lsrs	r2, r3, #4
 80010da:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	@ 0xb60
 80010de:	071b      	lsls	r3, r3, #28
 80010e0:	4313      	orrs	r3, r2
 80010e2:	f8c7 3478 	str.w	r3, [r7, #1144]	@ 0x478
 80010e6:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 80010ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ee:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80010f2:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 80010f6:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 80010fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010fe:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	ea80 0602 	eor.w	r6, r0, r2
 800110a:	f8c7 6470 	str.w	r6, [r7, #1136]	@ 0x470
 800110e:	404b      	eors	r3, r1
 8001110:	f8c7 3474 	str.w	r3, [r7, #1140]	@ 0x474
 8001114:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8001118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111c:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8001120:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 8001124:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8001128:	0b1a      	lsrs	r2, r3, #12
 800112a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800112e:	051b      	lsls	r3, r3, #20
 8001130:	4313      	orrs	r3, r2
 8001132:	f8c7 346c 	str.w	r3, [r7, #1132]	@ 0x46c
 8001136:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	@ 0xb34
 800113a:	0b1a      	lsrs	r2, r3, #12
 800113c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	@ 0xb30
 8001140:	051b      	lsls	r3, r3, #20
 8001142:	4313      	orrs	r3, r2
 8001144:	f8c7 3468 	str.w	r3, [r7, #1128]	@ 0x468
 8001148:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001154:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 8001158:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 800115c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001160:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	ea80 0602 	eor.w	r6, r0, r2
 800116c:	f8c7 6460 	str.w	r6, [r7, #1120]	@ 0x460
 8001170:	404b      	eors	r3, r1
 8001172:	f8c7 3464 	str.w	r3, [r7, #1124]	@ 0x464
 8001176:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800117a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117e:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8001182:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 8001186:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 800118a:	0f5a      	lsrs	r2, r3, #29
 800118c:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	4313      	orrs	r3, r2
 8001194:	f8c7 345c 	str.w	r3, [r7, #1116]	@ 0x45c
 8001198:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	@ 0xb2c
 800119c:	0f5a      	lsrs	r2, r3, #29
 800119e:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	@ 0xb28
 80011a2:	00db      	lsls	r3, r3, #3
 80011a4:	4313      	orrs	r3, r2
 80011a6:	f8c7 3458 	str.w	r3, [r7, #1112]	@ 0x458
 80011aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80011ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b2:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80011b6:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 80011ba:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 80011be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011c2:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80011c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ca:	ea80 0602 	eor.w	r6, r0, r2
 80011ce:	f8c7 6450 	str.w	r6, [r7, #1104]	@ 0x450
 80011d2:	404b      	eors	r3, r1
 80011d4:	f8c7 3454 	str.w	r3, [r7, #1108]	@ 0x454
 80011d8:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 80011e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 80011e8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 80011ec:	035a      	lsls	r2, r3, #13
 80011ee:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 80011f2:	0cdb      	lsrs	r3, r3, #19
 80011f4:	4313      	orrs	r3, r2
 80011f6:	f8c7 3448 	str.w	r3, [r7, #1096]	@ 0x448
 80011fa:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	@ 0xaf8
 80011fe:	035a      	lsls	r2, r3, #13
 8001200:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	@ 0xafc
 8001204:	0cdb      	lsrs	r3, r3, #19
 8001206:	4313      	orrs	r3, r2
 8001208:	f8c7 344c 	str.w	r3, [r7, #1100]	@ 0x44c
 800120c:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8001218:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 800121c:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 8001220:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001224:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8001228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800122c:	ea80 0602 	eor.w	r6, r0, r2
 8001230:	f8c7 6440 	str.w	r6, [r7, #1088]	@ 0x440
 8001234:	404b      	eors	r3, r1
 8001236:	f8c7 3444 	str.w	r3, [r7, #1092]	@ 0x444
 800123a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 8001246:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 800124a:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 800124e:	075a      	lsls	r2, r3, #29
 8001250:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 8001254:	08db      	lsrs	r3, r3, #3
 8001256:	4313      	orrs	r3, r2
 8001258:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 800125c:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	@ 0xac8
 8001260:	075a      	lsls	r2, r3, #29
 8001262:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	@ 0xacc
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	4313      	orrs	r3, r2
 800126a:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 800126e:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8001272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001276:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800127a:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 800127e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	43d1      	mvns	r1, r2
 8001288:	f8c7 18a0 	str.w	r1, [r7, #2208]	@ 0x8a0
 800128c:	43db      	mvns	r3, r3
 800128e:	f8c7 38a4 	str.w	r3, [r7, #2212]	@ 0x8a4
 8001292:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129a:	f8d7 18a0 	ldr.w	r1, [r7, #2208]	@ 0x8a0
 800129e:	4011      	ands	r1, r2
 80012a0:	f8c7 1898 	str.w	r1, [r7, #2200]	@ 0x898
 80012a4:	f8d7 18a4 	ldr.w	r1, [r7, #2212]	@ 0x8a4
 80012a8:	400b      	ands	r3, r1
 80012aa:	f8c7 389c 	str.w	r3, [r7, #2204]	@ 0x89c
 80012ae:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80012b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012b6:	f8d7 1898 	ldr.w	r1, [r7, #2200]	@ 0x898
 80012ba:	4051      	eors	r1, r2
 80012bc:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 80012c0:	f8d7 189c 	ldr.w	r1, [r7, #2204]	@ 0x89c
 80012c4:	404b      	eors	r3, r1
 80012c6:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 80012ca:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 80012d6:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 80012da:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80012de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e2:	43d1      	mvns	r1, r2
 80012e4:	e002      	b.n	80012ec <KeccakF1600_StatePermute+0xc7c>
 80012e6:	bf00      	nop
 80012e8:	08011f48 	.word	0x08011f48
 80012ec:	f8c7 1890 	str.w	r1, [r7, #2192]	@ 0x890
 80012f0:	43db      	mvns	r3, r3
 80012f2:	f8c7 3894 	str.w	r3, [r7, #2196]	@ 0x894
 80012f6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80012fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fe:	f8d7 1890 	ldr.w	r1, [r7, #2192]	@ 0x890
 8001302:	4011      	ands	r1, r2
 8001304:	f8c7 1888 	str.w	r1, [r7, #2184]	@ 0x888
 8001308:	f8d7 1894 	ldr.w	r1, [r7, #2196]	@ 0x894
 800130c:	400b      	ands	r3, r1
 800130e:	f8c7 388c 	str.w	r3, [r7, #2188]	@ 0x88c
 8001312:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f8d7 1888 	ldr.w	r1, [r7, #2184]	@ 0x888
 800131e:	4051      	eors	r1, r2
 8001320:	f8c7 1428 	str.w	r1, [r7, #1064]	@ 0x428
 8001324:	f8d7 188c 	ldr.w	r1, [r7, #2188]	@ 0x88c
 8001328:	404b      	eors	r3, r1
 800132a:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800132e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 800133a:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800133e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001346:	43d1      	mvns	r1, r2
 8001348:	f8c7 1880 	str.w	r1, [r7, #2176]	@ 0x880
 800134c:	43db      	mvns	r3, r3
 800134e:	f8c7 3884 	str.w	r3, [r7, #2180]	@ 0x884
 8001352:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135a:	f8d7 1880 	ldr.w	r1, [r7, #2176]	@ 0x880
 800135e:	4011      	ands	r1, r2
 8001360:	f8c7 1878 	str.w	r1, [r7, #2168]	@ 0x878
 8001364:	f8d7 1884 	ldr.w	r1, [r7, #2180]	@ 0x884
 8001368:	400b      	ands	r3, r1
 800136a:	f8c7 387c 	str.w	r3, [r7, #2172]	@ 0x87c
 800136e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f8d7 1878 	ldr.w	r1, [r7, #2168]	@ 0x878
 800137a:	4051      	eors	r1, r2
 800137c:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 8001380:	f8d7 187c 	ldr.w	r1, [r7, #2172]	@ 0x87c
 8001384:	404b      	eors	r3, r1
 8001386:	f8c7 3424 	str.w	r3, [r7, #1060]	@ 0x424
 800138a:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 800138e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001392:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 8001396:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 800139a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	43d1      	mvns	r1, r2
 80013a4:	f8c7 1870 	str.w	r1, [r7, #2160]	@ 0x870
 80013a8:	43db      	mvns	r3, r3
 80013aa:	f8c7 3874 	str.w	r3, [r7, #2164]	@ 0x874
 80013ae:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f8d7 1870 	ldr.w	r1, [r7, #2160]	@ 0x870
 80013ba:	4011      	ands	r1, r2
 80013bc:	f8c7 1868 	str.w	r1, [r7, #2152]	@ 0x868
 80013c0:	f8d7 1874 	ldr.w	r1, [r7, #2164]	@ 0x874
 80013c4:	400b      	ands	r3, r1
 80013c6:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 80013ca:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80013ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d2:	f8d7 1868 	ldr.w	r1, [r7, #2152]	@ 0x868
 80013d6:	4051      	eors	r1, r2
 80013d8:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 80013dc:	f8d7 186c 	ldr.w	r1, [r7, #2156]	@ 0x86c
 80013e0:	404b      	eors	r3, r1
 80013e2:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 80013e6:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 80013f6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80013fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013fe:	43d1      	mvns	r1, r2
 8001400:	f8c7 1860 	str.w	r1, [r7, #2144]	@ 0x860
 8001404:	43db      	mvns	r3, r3
 8001406:	f8c7 3864 	str.w	r3, [r7, #2148]	@ 0x864
 800140a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f8d7 1860 	ldr.w	r1, [r7, #2144]	@ 0x860
 8001416:	4011      	ands	r1, r2
 8001418:	f8c7 1858 	str.w	r1, [r7, #2136]	@ 0x858
 800141c:	f8d7 1864 	ldr.w	r1, [r7, #2148]	@ 0x864
 8001420:	400b      	ands	r3, r1
 8001422:	f8c7 385c 	str.w	r3, [r7, #2140]	@ 0x85c
 8001426:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f8d7 1858 	ldr.w	r1, [r7, #2136]	@ 0x858
 8001432:	4051      	eors	r1, r2
 8001434:	f8c7 1410 	str.w	r1, [r7, #1040]	@ 0x410
 8001438:	f8d7 185c 	ldr.w	r1, [r7, #2140]	@ 0x85c
 800143c:	404b      	eors	r3, r1
 800143e:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001442:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 800144e:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 8001452:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 8001456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145a:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 800145e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001462:	ea80 0602 	eor.w	r6, r0, r2
 8001466:	f8c7 6408 	str.w	r6, [r7, #1032]	@ 0x408
 800146a:	404b      	eors	r3, r1
 800146c:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
 8001470:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 8001480:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 8001484:	0fda      	lsrs	r2, r3, #31
 8001486:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 800148a:	005b      	lsls	r3, r3, #1
 800148c:	4313      	orrs	r3, r2
 800148e:	f8c7 3404 	str.w	r3, [r7, #1028]	@ 0x404
 8001492:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	@ 0xb74
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	@ 0xb70
 800149c:	005b      	lsls	r3, r3, #1
 800149e:	4313      	orrs	r3, r2
 80014a0:	f8c7 3400 	str.w	r3, [r7, #1024]	@ 0x400
 80014a4:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80014a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ac:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80014b0:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 80014b4:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 80014b8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014bc:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	ea80 0602 	eor.w	r6, r0, r2
 80014c8:	f8c7 63f8 	str.w	r6, [r7, #1016]	@ 0x3f8
 80014cc:	404b      	eors	r3, r1
 80014ce:	f8c7 33fc 	str.w	r3, [r7, #1020]	@ 0x3fc
 80014d2:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	@ 0x3f8
 80014d6:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 80014da:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 80014de:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 80014e2:	0e9a      	lsrs	r2, r3, #26
 80014e4:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 80014e8:	019b      	lsls	r3, r3, #6
 80014ea:	4313      	orrs	r3, r2
 80014ec:	f8c7 33f4 	str.w	r3, [r7, #1012]	@ 0x3f4
 80014f0:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	@ 0xb44
 80014f4:	0e9a      	lsrs	r2, r3, #26
 80014f6:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	@ 0xb40
 80014fa:	019b      	lsls	r3, r3, #6
 80014fc:	4313      	orrs	r3, r2
 80014fe:	f8c7 33f0 	str.w	r3, [r7, #1008]	@ 0x3f0
 8001502:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	@ 0x3f0
 8001506:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 800150a:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 800150e:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 8001512:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001516:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 800151a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151e:	ea80 0602 	eor.w	r6, r0, r2
 8001522:	f8c7 63e8 	str.w	r6, [r7, #1000]	@ 0x3e8
 8001526:	404b      	eors	r3, r1
 8001528:	f8c7 33ec 	str.w	r3, [r7, #1004]	@ 0x3ec
 800152c:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	@ 0x3e8
 8001530:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 8001538:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 800153c:	09da      	lsrs	r2, r3, #7
 800153e:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 8001542:	065b      	lsls	r3, r3, #25
 8001544:	4313      	orrs	r3, r2
 8001546:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 800154a:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	@ 0xb14
 800154e:	09da      	lsrs	r2, r3, #7
 8001550:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	@ 0xb10
 8001554:	065b      	lsls	r3, r3, #25
 8001556:	4313      	orrs	r3, r2
 8001558:	f8c7 33e0 	str.w	r3, [r7, #992]	@ 0x3e0
 800155c:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	@ 0x3e0
 8001560:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8001564:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 8001568:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 800156c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001570:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	ea80 0602 	eor.w	r6, r0, r2
 800157c:	f8c7 63d8 	str.w	r6, [r7, #984]	@ 0x3d8
 8001580:	404b      	eors	r3, r1
 8001582:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8001586:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	@ 0x3d8
 800158a:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 800158e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 8001592:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 8001596:	0e1a      	lsrs	r2, r3, #24
 8001598:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 80015a4:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	@ 0xae4
 80015a8:	0e1a      	lsrs	r2, r3, #24
 80015aa:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	@ 0xae0
 80015ae:	021b      	lsls	r3, r3, #8
 80015b0:	4313      	orrs	r3, r2
 80015b2:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80015b6:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	@ 0x3d0
 80015ba:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 80015c2:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80015c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015ca:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	ea80 0602 	eor.w	r6, r0, r2
 80015d6:	f8c7 63c8 	str.w	r6, [r7, #968]	@ 0x3c8
 80015da:	404b      	eors	r3, r1
 80015dc:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 80015e0:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	@ 0x3c8
 80015e4:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 80015e8:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 80015ec:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 80015f0:	0b9a      	lsrs	r2, r3, #14
 80015f2:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 80015f6:	049b      	lsls	r3, r3, #18
 80015f8:	4313      	orrs	r3, r2
 80015fa:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80015fe:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	@ 0xadc
 8001602:	0b9a      	lsrs	r2, r3, #14
 8001604:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	@ 0xad8
 8001608:	049b      	lsls	r3, r3, #18
 800160a:	4313      	orrs	r3, r2
 800160c:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8001610:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	@ 0x3c0
 8001614:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8001618:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 800161c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001624:	43d1      	mvns	r1, r2
 8001626:	f8c7 1850 	str.w	r1, [r7, #2128]	@ 0x850
 800162a:	43db      	mvns	r3, r3
 800162c:	f8c7 3854 	str.w	r3, [r7, #2132]	@ 0x854
 8001630:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001634:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001638:	f8d7 1850 	ldr.w	r1, [r7, #2128]	@ 0x850
 800163c:	4011      	ands	r1, r2
 800163e:	f8c7 1848 	str.w	r1, [r7, #2120]	@ 0x848
 8001642:	f8d7 1854 	ldr.w	r1, [r7, #2132]	@ 0x854
 8001646:	400b      	ands	r3, r1
 8001648:	f8c7 384c 	str.w	r3, [r7, #2124]	@ 0x84c
 800164c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001654:	f8d7 1848 	ldr.w	r1, [r7, #2120]	@ 0x848
 8001658:	4051      	eors	r1, r2
 800165a:	f8c7 13b8 	str.w	r1, [r7, #952]	@ 0x3b8
 800165e:	f8d7 184c 	ldr.w	r1, [r7, #2124]	@ 0x84c
 8001662:	404b      	eors	r3, r1
 8001664:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8001668:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	@ 0x3b8
 800166c:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 8001670:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 8001674:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167c:	43d1      	mvns	r1, r2
 800167e:	f8c7 1840 	str.w	r1, [r7, #2112]	@ 0x840
 8001682:	43db      	mvns	r3, r3
 8001684:	f8c7 3844 	str.w	r3, [r7, #2116]	@ 0x844
 8001688:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800168c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001690:	f8d7 1840 	ldr.w	r1, [r7, #2112]	@ 0x840
 8001694:	4011      	ands	r1, r2
 8001696:	f8c7 1838 	str.w	r1, [r7, #2104]	@ 0x838
 800169a:	f8d7 1844 	ldr.w	r1, [r7, #2116]	@ 0x844
 800169e:	400b      	ands	r3, r1
 80016a0:	f8c7 383c 	str.w	r3, [r7, #2108]	@ 0x83c
 80016a4:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f8d7 1838 	ldr.w	r1, [r7, #2104]	@ 0x838
 80016b0:	4051      	eors	r1, r2
 80016b2:	f8c7 13b0 	str.w	r1, [r7, #944]	@ 0x3b0
 80016b6:	f8d7 183c 	ldr.w	r1, [r7, #2108]	@ 0x83c
 80016ba:	404b      	eors	r3, r1
 80016bc:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 80016c0:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	@ 0x3b0
 80016c4:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 80016c8:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 80016cc:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	43d1      	mvns	r1, r2
 80016d6:	f8c7 1830 	str.w	r1, [r7, #2096]	@ 0x830
 80016da:	43db      	mvns	r3, r3
 80016dc:	f8c7 3834 	str.w	r3, [r7, #2100]	@ 0x834
 80016e0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80016e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e8:	f8d7 1830 	ldr.w	r1, [r7, #2096]	@ 0x830
 80016ec:	4011      	ands	r1, r2
 80016ee:	f8c7 1828 	str.w	r1, [r7, #2088]	@ 0x828
 80016f2:	f8d7 1834 	ldr.w	r1, [r7, #2100]	@ 0x834
 80016f6:	400b      	ands	r3, r1
 80016f8:	f8c7 382c 	str.w	r3, [r7, #2092]	@ 0x82c
 80016fc:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f8d7 1828 	ldr.w	r1, [r7, #2088]	@ 0x828
 8001708:	4051      	eors	r1, r2
 800170a:	f8c7 13a8 	str.w	r1, [r7, #936]	@ 0x3a8
 800170e:	f8d7 182c 	ldr.w	r1, [r7, #2092]	@ 0x82c
 8001712:	404b      	eors	r3, r1
 8001714:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8001718:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	@ 0x3a8
 800171c:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 8001720:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 8001724:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001728:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172c:	43d1      	mvns	r1, r2
 800172e:	f8c7 1820 	str.w	r1, [r7, #2080]	@ 0x820
 8001732:	43db      	mvns	r3, r3
 8001734:	f8c7 3824 	str.w	r3, [r7, #2084]	@ 0x824
 8001738:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f8d7 1820 	ldr.w	r1, [r7, #2080]	@ 0x820
 8001744:	4011      	ands	r1, r2
 8001746:	f8c7 1818 	str.w	r1, [r7, #2072]	@ 0x818
 800174a:	f8d7 1824 	ldr.w	r1, [r7, #2084]	@ 0x824
 800174e:	400b      	ands	r3, r1
 8001750:	f8c7 381c 	str.w	r3, [r7, #2076]	@ 0x81c
 8001754:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f8d7 1818 	ldr.w	r1, [r7, #2072]	@ 0x818
 8001760:	4051      	eors	r1, r2
 8001762:	f8c7 13a0 	str.w	r1, [r7, #928]	@ 0x3a0
 8001766:	f8d7 181c 	ldr.w	r1, [r7, #2076]	@ 0x81c
 800176a:	404b      	eors	r3, r1
 800176c:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8001770:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	@ 0x3a0
 8001774:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8001778:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 800177c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	43d1      	mvns	r1, r2
 8001786:	f8c7 1810 	str.w	r1, [r7, #2064]	@ 0x810
 800178a:	43db      	mvns	r3, r3
 800178c:	f8c7 3814 	str.w	r3, [r7, #2068]	@ 0x814
 8001790:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001798:	f8d7 1810 	ldr.w	r1, [r7, #2064]	@ 0x810
 800179c:	4011      	ands	r1, r2
 800179e:	f8c7 1808 	str.w	r1, [r7, #2056]	@ 0x808
 80017a2:	f8d7 1814 	ldr.w	r1, [r7, #2068]	@ 0x814
 80017a6:	400b      	ands	r3, r1
 80017a8:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 80017ac:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80017b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b4:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 80017b8:	4051      	eors	r1, r2
 80017ba:	f8c7 1398 	str.w	r1, [r7, #920]	@ 0x398
 80017be:	f8d7 180c 	ldr.w	r1, [r7, #2060]	@ 0x80c
 80017c2:	404b      	eors	r3, r1
 80017c4:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 80017c8:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	@ 0x398
 80017cc:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 80017d0:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 80017d4:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 80017d8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017dc:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80017e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e4:	ea80 0602 	eor.w	r6, r0, r2
 80017e8:	f8c7 6390 	str.w	r6, [r7, #912]	@ 0x390
 80017ec:	404b      	eors	r3, r1
 80017ee:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80017f2:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	@ 0x390
 80017f6:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 80017fa:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 80017fe:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 8001802:	095a      	lsrs	r2, r3, #5
 8001804:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8001808:	06db      	lsls	r3, r3, #27
 800180a:	4313      	orrs	r3, r2
 800180c:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8001810:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	@ 0xb5c
 8001814:	095a      	lsrs	r2, r3, #5
 8001816:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	@ 0xb58
 800181a:	06db      	lsls	r3, r3, #27
 800181c:	4313      	orrs	r3, r2
 800181e:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388
 8001822:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	@ 0x388
 8001826:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 800182a:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 800182e:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 8001832:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001836:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800183e:	ea80 0602 	eor.w	r6, r0, r2
 8001842:	f8c7 6380 	str.w	r6, [r7, #896]	@ 0x380
 8001846:	404b      	eors	r3, r1
 8001848:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 800184c:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	@ 0x380
 8001850:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 8001854:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8001858:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 800185c:	011a      	lsls	r2, r3, #4
 800185e:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 8001862:	0f1b      	lsrs	r3, r3, #28
 8001864:	4313      	orrs	r3, r2
 8001866:	f8c7 3378 	str.w	r3, [r7, #888]	@ 0x378
 800186a:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	@ 0xb50
 800186e:	011a      	lsls	r2, r3, #4
 8001870:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	@ 0xb54
 8001874:	0f1b      	lsrs	r3, r3, #28
 8001876:	4313      	orrs	r3, r2
 8001878:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 800187c:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	@ 0x378
 8001880:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001884:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8001888:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 800188c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001890:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001898:	ea80 0602 	eor.w	r6, r0, r2
 800189c:	f8c7 6370 	str.w	r6, [r7, #880]	@ 0x370
 80018a0:	404b      	eors	r3, r1
 80018a2:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 80018a6:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	@ 0x370
 80018aa:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 80018ae:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 80018b2:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 80018b6:	0d9a      	lsrs	r2, r3, #22
 80018b8:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 80018bc:	029b      	lsls	r3, r3, #10
 80018be:	4313      	orrs	r3, r2
 80018c0:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80018c4:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	@ 0xb24
 80018c8:	0d9a      	lsrs	r2, r3, #22
 80018ca:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	@ 0xb20
 80018ce:	029b      	lsls	r3, r3, #10
 80018d0:	4313      	orrs	r3, r2
 80018d2:	f8c7 3368 	str.w	r3, [r7, #872]	@ 0x368
 80018d6:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	@ 0x368
 80018da:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80018de:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 80018e2:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 80018e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ea:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80018ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f2:	ea80 0602 	eor.w	r6, r0, r2
 80018f6:	f8c7 6360 	str.w	r6, [r7, #864]	@ 0x360
 80018fa:	404b      	eors	r3, r1
 80018fc:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001900:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	@ 0x360
 8001904:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 8001908:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 800190c:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 8001910:	0c5a      	lsrs	r2, r3, #17
 8001912:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8001916:	03db      	lsls	r3, r3, #15
 8001918:	4313      	orrs	r3, r2
 800191a:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 800191e:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	@ 0xaf4
 8001922:	0c5a      	lsrs	r2, r3, #17
 8001924:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	@ 0xaf0
 8001928:	03db      	lsls	r3, r3, #15
 800192a:	4313      	orrs	r3, r2
 800192c:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8001930:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	@ 0x358
 8001934:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8001938:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 800193c:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8001940:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001944:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8001948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194c:	ea80 0602 	eor.w	r6, r0, r2
 8001950:	f8c7 6350 	str.w	r6, [r7, #848]	@ 0x350
 8001954:	404b      	eors	r3, r1
 8001956:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 800195a:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	@ 0x350
 800195e:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8001962:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8001966:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 800196a:	061a      	lsls	r2, r3, #24
 800196c:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 8001970:	0a1b      	lsrs	r3, r3, #8
 8001972:	4313      	orrs	r3, r2
 8001974:	f8c7 3348 	str.w	r3, [r7, #840]	@ 0x348
 8001978:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	@ 0xac0
 800197c:	061a      	lsls	r2, r3, #24
 800197e:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	@ 0xac4
 8001982:	0a1b      	lsrs	r3, r3, #8
 8001984:	4313      	orrs	r3, r2
 8001986:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 800198a:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	@ 0x348
 800198e:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8001992:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8001996:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	43d1      	mvns	r1, r2
 80019a0:	f8c7 1800 	str.w	r1, [r7, #2048]	@ 0x800
 80019a4:	43db      	mvns	r3, r3
 80019a6:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 80019aa:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80019ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b2:	f8d7 1800 	ldr.w	r1, [r7, #2048]	@ 0x800
 80019b6:	4011      	ands	r1, r2
 80019b8:	f8c7 17f8 	str.w	r1, [r7, #2040]	@ 0x7f8
 80019bc:	f8d7 1804 	ldr.w	r1, [r7, #2052]	@ 0x804
 80019c0:	400b      	ands	r3, r1
 80019c2:	f8c7 37fc 	str.w	r3, [r7, #2044]	@ 0x7fc
 80019c6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80019ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ce:	f8d7 17f8 	ldr.w	r1, [r7, #2040]	@ 0x7f8
 80019d2:	4051      	eors	r1, r2
 80019d4:	f8c7 1340 	str.w	r1, [r7, #832]	@ 0x340
 80019d8:	f8d7 17fc 	ldr.w	r1, [r7, #2044]	@ 0x7fc
 80019dc:	404b      	eors	r3, r1
 80019de:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80019e2:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	@ 0x340
 80019e6:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 80019ea:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 80019ee:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80019f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f6:	43d1      	mvns	r1, r2
 80019f8:	f8c7 17f0 	str.w	r1, [r7, #2032]	@ 0x7f0
 80019fc:	43db      	mvns	r3, r3
 80019fe:	f8c7 37f4 	str.w	r3, [r7, #2036]	@ 0x7f4
 8001a02:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f8d7 17f0 	ldr.w	r1, [r7, #2032]	@ 0x7f0
 8001a0e:	4011      	ands	r1, r2
 8001a10:	f8c7 17e8 	str.w	r1, [r7, #2024]	@ 0x7e8
 8001a14:	f8d7 17f4 	ldr.w	r1, [r7, #2036]	@ 0x7f4
 8001a18:	400b      	ands	r3, r1
 8001a1a:	f8c7 37ec 	str.w	r3, [r7, #2028]	@ 0x7ec
 8001a1e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a26:	f8d7 17e8 	ldr.w	r1, [r7, #2024]	@ 0x7e8
 8001a2a:	4051      	eors	r1, r2
 8001a2c:	f8c7 1338 	str.w	r1, [r7, #824]	@ 0x338
 8001a30:	f8d7 17ec 	ldr.w	r1, [r7, #2028]	@ 0x7ec
 8001a34:	404b      	eors	r3, r1
 8001a36:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001a3a:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 8001a3e:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 8001a42:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8001a46:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4e:	43d1      	mvns	r1, r2
 8001a50:	f8c7 17e0 	str.w	r1, [r7, #2016]	@ 0x7e0
 8001a54:	43db      	mvns	r3, r3
 8001a56:	f8c7 37e4 	str.w	r3, [r7, #2020]	@ 0x7e4
 8001a5a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f8d7 17e0 	ldr.w	r1, [r7, #2016]	@ 0x7e0
 8001a66:	4011      	ands	r1, r2
 8001a68:	f8c7 17d8 	str.w	r1, [r7, #2008]	@ 0x7d8
 8001a6c:	f8d7 17e4 	ldr.w	r1, [r7, #2020]	@ 0x7e4
 8001a70:	400b      	ands	r3, r1
 8001a72:	f8c7 37dc 	str.w	r3, [r7, #2012]	@ 0x7dc
 8001a76:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	f8d7 17d8 	ldr.w	r1, [r7, #2008]	@ 0x7d8
 8001a82:	4051      	eors	r1, r2
 8001a84:	f8c7 1330 	str.w	r1, [r7, #816]	@ 0x330
 8001a88:	f8d7 17dc 	ldr.w	r1, [r7, #2012]	@ 0x7dc
 8001a8c:	404b      	eors	r3, r1
 8001a8e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001a92:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	@ 0x330
 8001a96:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 8001a9a:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8001a9e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aa6:	43d1      	mvns	r1, r2
 8001aa8:	f8c7 17d0 	str.w	r1, [r7, #2000]	@ 0x7d0
 8001aac:	43db      	mvns	r3, r3
 8001aae:	f8c7 37d4 	str.w	r3, [r7, #2004]	@ 0x7d4
 8001ab2:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f8d7 17d0 	ldr.w	r1, [r7, #2000]	@ 0x7d0
 8001abe:	4011      	ands	r1, r2
 8001ac0:	f8c7 17c8 	str.w	r1, [r7, #1992]	@ 0x7c8
 8001ac4:	f8d7 17d4 	ldr.w	r1, [r7, #2004]	@ 0x7d4
 8001ac8:	400b      	ands	r3, r1
 8001aca:	f8c7 37cc 	str.w	r3, [r7, #1996]	@ 0x7cc
 8001ace:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ad6:	f8d7 17c8 	ldr.w	r1, [r7, #1992]	@ 0x7c8
 8001ada:	4051      	eors	r1, r2
 8001adc:	f8c7 1328 	str.w	r1, [r7, #808]	@ 0x328
 8001ae0:	f8d7 17cc 	ldr.w	r1, [r7, #1996]	@ 0x7cc
 8001ae4:	404b      	eors	r3, r1
 8001ae6:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 8001aea:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	@ 0x328
 8001aee:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 8001af2:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8001af6:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001afe:	43d1      	mvns	r1, r2
 8001b00:	f8c7 17c0 	str.w	r1, [r7, #1984]	@ 0x7c0
 8001b04:	43db      	mvns	r3, r3
 8001b06:	f8c7 37c4 	str.w	r3, [r7, #1988]	@ 0x7c4
 8001b0a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b12:	f8d7 17c0 	ldr.w	r1, [r7, #1984]	@ 0x7c0
 8001b16:	4011      	ands	r1, r2
 8001b18:	f8c7 17b8 	str.w	r1, [r7, #1976]	@ 0x7b8
 8001b1c:	f8d7 17c4 	ldr.w	r1, [r7, #1988]	@ 0x7c4
 8001b20:	400b      	ands	r3, r1
 8001b22:	f8c7 37bc 	str.w	r3, [r7, #1980]	@ 0x7bc
 8001b26:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b2e:	f8d7 17b8 	ldr.w	r1, [r7, #1976]	@ 0x7b8
 8001b32:	4051      	eors	r1, r2
 8001b34:	f8c7 1320 	str.w	r1, [r7, #800]	@ 0x320
 8001b38:	f8d7 17bc 	ldr.w	r1, [r7, #1980]	@ 0x7bc
 8001b3c:	404b      	eors	r3, r1
 8001b3e:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8001b42:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	@ 0x320
 8001b46:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8001b4a:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8001b4e:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 8001b52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b56:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8001b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b5e:	ea80 0602 	eor.w	r6, r0, r2
 8001b62:	f8c7 6318 	str.w	r6, [r7, #792]	@ 0x318
 8001b66:	404b      	eors	r3, r1
 8001b68:	f8c7 331c 	str.w	r3, [r7, #796]	@ 0x31c
 8001b6c:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	@ 0x318
 8001b70:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 8001b74:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8001b78:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8001b7c:	079a      	lsls	r2, r3, #30
 8001b7e:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8001b82:	089b      	lsrs	r3, r3, #2
 8001b84:	4313      	orrs	r3, r2
 8001b86:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 8001b8a:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	@ 0xb68
 8001b8e:	079a      	lsls	r2, r3, #30
 8001b90:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	@ 0xb6c
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	4313      	orrs	r3, r2
 8001b98:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 8001b9c:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	@ 0x310
 8001ba0:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8001ba4:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8001ba8:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 8001bac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bb0:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8001bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bb8:	ea80 0602 	eor.w	r6, r0, r2
 8001bbc:	f8c7 6308 	str.w	r6, [r7, #776]	@ 0x308
 8001bc0:	404b      	eors	r3, r1
 8001bc2:	f8c7 330c 	str.w	r3, [r7, #780]	@ 0x30c
 8001bc6:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	@ 0x308
 8001bca:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 8001bce:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8001bd2:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8001bd6:	05da      	lsls	r2, r3, #23
 8001bd8:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8001bdc:	0a5b      	lsrs	r3, r3, #9
 8001bde:	4313      	orrs	r3, r2
 8001be0:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 8001be4:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	@ 0xb38
 8001be8:	05da      	lsls	r2, r3, #23
 8001bea:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	@ 0xb3c
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	f8c7 3304 	str.w	r3, [r7, #772]	@ 0x304
 8001bf6:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	@ 0x300
 8001bfa:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001bfe:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8001c02:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8001c06:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c0a:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8001c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c12:	ea80 0602 	eor.w	r6, r0, r2
 8001c16:	f8c7 62f8 	str.w	r6, [r7, #760]	@ 0x2f8
 8001c1a:	404b      	eors	r3, r1
 8001c1c:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 8001c20:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	@ 0x2f8
 8001c24:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8001c28:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8001c2c:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8001c30:	01da      	lsls	r2, r3, #7
 8001c32:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8001c36:	0e5b      	lsrs	r3, r3, #25
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	f8c7 32f0 	str.w	r3, [r7, #752]	@ 0x2f0
 8001c3e:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	@ 0xb08
 8001c42:	01da      	lsls	r2, r3, #7
 8001c44:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	@ 0xb0c
 8001c48:	0e5b      	lsrs	r3, r3, #25
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	f8c7 32f4 	str.w	r3, [r7, #756]	@ 0x2f4
 8001c50:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	@ 0x2f0
 8001c54:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8001c58:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8001c5c:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8001c60:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c64:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8001c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6c:	ea80 0602 	eor.w	r6, r0, r2
 8001c70:	f8c7 62e8 	str.w	r6, [r7, #744]	@ 0x2e8
 8001c74:	404b      	eors	r3, r1
 8001c76:	f8c7 32ec 	str.w	r3, [r7, #748]	@ 0x2ec
 8001c7a:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	@ 0x2e8
 8001c7e:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 8001c82:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8001c86:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8001c8a:	025a      	lsls	r2, r3, #9
 8001c8c:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8001c90:	0ddb      	lsrs	r3, r3, #23
 8001c92:	4313      	orrs	r3, r2
 8001c94:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8001c98:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	@ 0xb00
 8001c9c:	025a      	lsls	r2, r3, #9
 8001c9e:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	@ 0xb04
 8001ca2:	0ddb      	lsrs	r3, r3, #23
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8001caa:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	@ 0x2e0
 8001cae:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8001cb2:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8001cb6:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 8001cba:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cbe:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8001cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc6:	ea80 0602 	eor.w	r6, r0, r2
 8001cca:	f8c7 62d8 	str.w	r6, [r7, #728]	@ 0x2d8
 8001cce:	404b      	eors	r3, r1
 8001cd0:	f8c7 32dc 	str.w	r3, [r7, #732]	@ 0x2dc
 8001cd4:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	@ 0x2d8
 8001cd8:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 8001cdc:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8001ce0:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8001ce4:	0f9a      	lsrs	r2, r3, #30
 8001ce6:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c7 32d4 	str.w	r3, [r7, #724]	@ 0x2d4
 8001cf2:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	@ 0xad4
 8001cf6:	0f9a      	lsrs	r2, r3, #30
 8001cf8:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	@ 0xad0
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8001d04:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	@ 0x2d0
 8001d08:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8001d0c:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8001d10:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d18:	43d1      	mvns	r1, r2
 8001d1a:	f8c7 17b0 	str.w	r1, [r7, #1968]	@ 0x7b0
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	f8c7 37b4 	str.w	r3, [r7, #1972]	@ 0x7b4
 8001d24:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d2c:	f8d7 17b0 	ldr.w	r1, [r7, #1968]	@ 0x7b0
 8001d30:	4011      	ands	r1, r2
 8001d32:	f8c7 17a8 	str.w	r1, [r7, #1960]	@ 0x7a8
 8001d36:	f8d7 17b4 	ldr.w	r1, [r7, #1972]	@ 0x7b4
 8001d3a:	400b      	ands	r3, r1
 8001d3c:	f8c7 37ac 	str.w	r3, [r7, #1964]	@ 0x7ac
 8001d40:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d48:	f8d7 17a8 	ldr.w	r1, [r7, #1960]	@ 0x7a8
 8001d4c:	4051      	eors	r1, r2
 8001d4e:	f8c7 12c8 	str.w	r1, [r7, #712]	@ 0x2c8
 8001d52:	f8d7 17ac 	ldr.w	r1, [r7, #1964]	@ 0x7ac
 8001d56:	404b      	eors	r3, r1
 8001d58:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8001d5c:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	@ 0x2c8
 8001d60:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8001d64:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8001d68:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d70:	43d1      	mvns	r1, r2
 8001d72:	f8c7 17a0 	str.w	r1, [r7, #1952]	@ 0x7a0
 8001d76:	43db      	mvns	r3, r3
 8001d78:	f8c7 37a4 	str.w	r3, [r7, #1956]	@ 0x7a4
 8001d7c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d84:	f8d7 17a0 	ldr.w	r1, [r7, #1952]	@ 0x7a0
 8001d88:	4011      	ands	r1, r2
 8001d8a:	f8c7 1798 	str.w	r1, [r7, #1944]	@ 0x798
 8001d8e:	f8d7 17a4 	ldr.w	r1, [r7, #1956]	@ 0x7a4
 8001d92:	400b      	ands	r3, r1
 8001d94:	f8c7 379c 	str.w	r3, [r7, #1948]	@ 0x79c
 8001d98:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f8d7 1798 	ldr.w	r1, [r7, #1944]	@ 0x798
 8001da4:	4051      	eors	r1, r2
 8001da6:	f8c7 12c0 	str.w	r1, [r7, #704]	@ 0x2c0
 8001daa:	f8d7 179c 	ldr.w	r1, [r7, #1948]	@ 0x79c
 8001dae:	404b      	eors	r3, r1
 8001db0:	f8c7 32c4 	str.w	r3, [r7, #708]	@ 0x2c4
 8001db4:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	@ 0x2c0
 8001db8:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 8001dbc:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 8001dc0:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dc8:	43d1      	mvns	r1, r2
 8001dca:	f8c7 1790 	str.w	r1, [r7, #1936]	@ 0x790
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	f8c7 3794 	str.w	r3, [r7, #1940]	@ 0x794
 8001dd4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ddc:	f8d7 1790 	ldr.w	r1, [r7, #1936]	@ 0x790
 8001de0:	4011      	ands	r1, r2
 8001de2:	f8c7 1788 	str.w	r1, [r7, #1928]	@ 0x788
 8001de6:	f8d7 1794 	ldr.w	r1, [r7, #1940]	@ 0x794
 8001dea:	400b      	ands	r3, r1
 8001dec:	f8c7 378c 	str.w	r3, [r7, #1932]	@ 0x78c
 8001df0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8001df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001df8:	f8d7 1788 	ldr.w	r1, [r7, #1928]	@ 0x788
 8001dfc:	4051      	eors	r1, r2
 8001dfe:	f8c7 12b8 	str.w	r1, [r7, #696]	@ 0x2b8
 8001e02:	f8d7 178c 	ldr.w	r1, [r7, #1932]	@ 0x78c
 8001e06:	404b      	eors	r3, r1
 8001e08:	f8c7 32bc 	str.w	r3, [r7, #700]	@ 0x2bc
 8001e0c:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	@ 0x2b8
 8001e10:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8001e14:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 8001e18:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e20:	43d1      	mvns	r1, r2
 8001e22:	f8c7 1780 	str.w	r1, [r7, #1920]	@ 0x780
 8001e26:	43db      	mvns	r3, r3
 8001e28:	f8c7 3784 	str.w	r3, [r7, #1924]	@ 0x784
 8001e2c:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e34:	f8d7 1780 	ldr.w	r1, [r7, #1920]	@ 0x780
 8001e38:	4011      	ands	r1, r2
 8001e3a:	f8c7 1778 	str.w	r1, [r7, #1912]	@ 0x778
 8001e3e:	f8d7 1784 	ldr.w	r1, [r7, #1924]	@ 0x784
 8001e42:	400b      	ands	r3, r1
 8001e44:	f8c7 377c 	str.w	r3, [r7, #1916]	@ 0x77c
 8001e48:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8001e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e50:	f8d7 1778 	ldr.w	r1, [r7, #1912]	@ 0x778
 8001e54:	4051      	eors	r1, r2
 8001e56:	f8c7 12b0 	str.w	r1, [r7, #688]	@ 0x2b0
 8001e5a:	f8d7 177c 	ldr.w	r1, [r7, #1916]	@ 0x77c
 8001e5e:	404b      	eors	r3, r1
 8001e60:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8001e64:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	@ 0x2b0
 8001e68:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8001e6c:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 8001e70:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	43d1      	mvns	r1, r2
 8001e7a:	f8c7 1770 	str.w	r1, [r7, #1904]	@ 0x770
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	f8c7 3774 	str.w	r3, [r7, #1908]	@ 0x774
 8001e84:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8001e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e8c:	f8d7 1770 	ldr.w	r1, [r7, #1904]	@ 0x770
 8001e90:	4011      	ands	r1, r2
 8001e92:	f8c7 1768 	str.w	r1, [r7, #1896]	@ 0x768
 8001e96:	f8d7 1774 	ldr.w	r1, [r7, #1908]	@ 0x774
 8001e9a:	400b      	ands	r3, r1
 8001e9c:	f8c7 376c 	str.w	r3, [r7, #1900]	@ 0x76c
 8001ea0:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8001ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea8:	f8d7 1768 	ldr.w	r1, [r7, #1896]	@ 0x768
 8001eac:	4051      	eors	r1, r2
 8001eae:	f8c7 12a8 	str.w	r1, [r7, #680]	@ 0x2a8
 8001eb2:	f8d7 176c 	ldr.w	r1, [r7, #1900]	@ 0x76c
 8001eb6:	404b      	eors	r3, r1
 8001eb8:	f8c7 32ac 	str.w	r3, [r7, #684]	@ 0x2ac
 8001ebc:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	@ 0x2a8
 8001ec0:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8001ec4:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001ec8:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 8001ecc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ed0:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 8001ed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed8:	ea80 0602 	eor.w	r6, r0, r2
 8001edc:	f8c7 6760 	str.w	r6, [r7, #1888]	@ 0x760
 8001ee0:	404b      	eors	r3, r1
 8001ee2:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 8001ee6:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 8001eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eee:	f8d7 1760 	ldr.w	r1, [r7, #1888]	@ 0x760
 8001ef2:	4051      	eors	r1, r2
 8001ef4:	f8c7 1758 	str.w	r1, [r7, #1880]	@ 0x758
 8001ef8:	f8d7 1764 	ldr.w	r1, [r7, #1892]	@ 0x764
 8001efc:	404b      	eors	r3, r1
 8001efe:	f8c7 375c 	str.w	r3, [r7, #1884]	@ 0x75c
 8001f02:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	f8d7 1758 	ldr.w	r1, [r7, #1880]	@ 0x758
 8001f0e:	4051      	eors	r1, r2
 8001f10:	f8c7 1750 	str.w	r1, [r7, #1872]	@ 0x750
 8001f14:	f8d7 175c 	ldr.w	r1, [r7, #1884]	@ 0x75c
 8001f18:	404b      	eors	r3, r1
 8001f1a:	f8c7 3754 	str.w	r3, [r7, #1876]	@ 0x754
 8001f1e:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8001f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f26:	f8d7 1750 	ldr.w	r1, [r7, #1872]	@ 0x750
 8001f2a:	4051      	eors	r1, r2
 8001f2c:	f8c7 12a0 	str.w	r1, [r7, #672]	@ 0x2a0
 8001f30:	f8d7 1754 	ldr.w	r1, [r7, #1876]	@ 0x754
 8001f34:	404b      	eors	r3, r1
 8001f36:	f8c7 32a4 	str.w	r3, [r7, #676]	@ 0x2a4
 8001f3a:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	@ 0x2a0
 8001f3e:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8001f42:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f46:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8001f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f4e:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	ea80 0602 	eor.w	r6, r0, r2
 8001f5a:	f8c7 6748 	str.w	r6, [r7, #1864]	@ 0x748
 8001f5e:	404b      	eors	r3, r1
 8001f60:	f8c7 374c 	str.w	r3, [r7, #1868]	@ 0x74c
 8001f64:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f8d7 1748 	ldr.w	r1, [r7, #1864]	@ 0x748
 8001f70:	4051      	eors	r1, r2
 8001f72:	f8c7 1740 	str.w	r1, [r7, #1856]	@ 0x740
 8001f76:	f8d7 174c 	ldr.w	r1, [r7, #1868]	@ 0x74c
 8001f7a:	404b      	eors	r3, r1
 8001f7c:	f8c7 3744 	str.w	r3, [r7, #1860]	@ 0x744
 8001f80:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f8d7 1740 	ldr.w	r1, [r7, #1856]	@ 0x740
 8001f8c:	4051      	eors	r1, r2
 8001f8e:	f8c7 1738 	str.w	r1, [r7, #1848]	@ 0x738
 8001f92:	f8d7 1744 	ldr.w	r1, [r7, #1860]	@ 0x744
 8001f96:	404b      	eors	r3, r1
 8001f98:	f8c7 373c 	str.w	r3, [r7, #1852]	@ 0x73c
 8001f9c:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f8d7 1738 	ldr.w	r1, [r7, #1848]	@ 0x738
 8001fa8:	4051      	eors	r1, r2
 8001faa:	f8c7 1298 	str.w	r1, [r7, #664]	@ 0x298
 8001fae:	f8d7 173c 	ldr.w	r1, [r7, #1852]	@ 0x73c
 8001fb2:	404b      	eors	r3, r1
 8001fb4:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8001fb8:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	@ 0x298
 8001fbc:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8001fc0:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001fc4:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8001fc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001fcc:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 8001fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fd4:	ea80 0602 	eor.w	r6, r0, r2
 8001fd8:	f8c7 6730 	str.w	r6, [r7, #1840]	@ 0x730
 8001fdc:	404b      	eors	r3, r1
 8001fde:	f8c7 3734 	str.w	r3, [r7, #1844]	@ 0x734
 8001fe2:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 8001fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fea:	f8d7 1730 	ldr.w	r1, [r7, #1840]	@ 0x730
 8001fee:	4051      	eors	r1, r2
 8001ff0:	f8c7 1728 	str.w	r1, [r7, #1832]	@ 0x728
 8001ff4:	f8d7 1734 	ldr.w	r1, [r7, #1844]	@ 0x734
 8001ff8:	404b      	eors	r3, r1
 8001ffa:	f8c7 372c 	str.w	r3, [r7, #1836]	@ 0x72c
 8001ffe:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 8002002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002006:	f8d7 1728 	ldr.w	r1, [r7, #1832]	@ 0x728
 800200a:	4051      	eors	r1, r2
 800200c:	f8c7 1720 	str.w	r1, [r7, #1824]	@ 0x720
 8002010:	f8d7 172c 	ldr.w	r1, [r7, #1836]	@ 0x72c
 8002014:	404b      	eors	r3, r1
 8002016:	f8c7 3724 	str.w	r3, [r7, #1828]	@ 0x724
 800201a:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f8d7 1720 	ldr.w	r1, [r7, #1824]	@ 0x720
 8002026:	4051      	eors	r1, r2
 8002028:	f8c7 1290 	str.w	r1, [r7, #656]	@ 0x290
 800202c:	f8d7 1724 	ldr.w	r1, [r7, #1828]	@ 0x724
 8002030:	404b      	eors	r3, r1
 8002032:	f8c7 3294 	str.w	r3, [r7, #660]	@ 0x294
 8002036:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	@ 0x290
 800203a:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800203e:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002042:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 8002046:	e9d3 0100 	ldrd	r0, r1, [r3]
 800204a:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 800204e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002052:	ea80 0602 	eor.w	r6, r0, r2
 8002056:	f8c7 6718 	str.w	r6, [r7, #1816]	@ 0x718
 800205a:	404b      	eors	r3, r1
 800205c:	f8c7 371c 	str.w	r3, [r7, #1820]	@ 0x71c
 8002060:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 8002064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002068:	f8d7 1718 	ldr.w	r1, [r7, #1816]	@ 0x718
 800206c:	4051      	eors	r1, r2
 800206e:	f8c7 1710 	str.w	r1, [r7, #1808]	@ 0x710
 8002072:	f8d7 171c 	ldr.w	r1, [r7, #1820]	@ 0x71c
 8002076:	404b      	eors	r3, r1
 8002078:	f8c7 3714 	str.w	r3, [r7, #1812]	@ 0x714
 800207c:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 8002080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002084:	f8d7 1710 	ldr.w	r1, [r7, #1808]	@ 0x710
 8002088:	4051      	eors	r1, r2
 800208a:	f8c7 1708 	str.w	r1, [r7, #1800]	@ 0x708
 800208e:	f8d7 1714 	ldr.w	r1, [r7, #1812]	@ 0x714
 8002092:	404b      	eors	r3, r1
 8002094:	f8c7 370c 	str.w	r3, [r7, #1804]	@ 0x70c
 8002098:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 800209c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a0:	f8d7 1708 	ldr.w	r1, [r7, #1800]	@ 0x708
 80020a4:	4051      	eors	r1, r2
 80020a6:	f8c7 1288 	str.w	r1, [r7, #648]	@ 0x288
 80020aa:	f8d7 170c 	ldr.w	r1, [r7, #1804]	@ 0x70c
 80020ae:	404b      	eors	r3, r1
 80020b0:	f8c7 328c 	str.w	r3, [r7, #652]	@ 0x28c
 80020b4:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	@ 0x288
 80020b8:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80020bc:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80020c0:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 80020c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c8:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80020cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d0:	ea80 0602 	eor.w	r6, r0, r2
 80020d4:	f8c7 6700 	str.w	r6, [r7, #1792]	@ 0x700
 80020d8:	404b      	eors	r3, r1
 80020da:	f8c7 3704 	str.w	r3, [r7, #1796]	@ 0x704
 80020de:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 80020e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e6:	f8d7 1700 	ldr.w	r1, [r7, #1792]	@ 0x700
 80020ea:	4051      	eors	r1, r2
 80020ec:	f8c7 16f8 	str.w	r1, [r7, #1784]	@ 0x6f8
 80020f0:	f8d7 1704 	ldr.w	r1, [r7, #1796]	@ 0x704
 80020f4:	404b      	eors	r3, r1
 80020f6:	f8c7 36fc 	str.w	r3, [r7, #1788]	@ 0x6fc
 80020fa:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 80020fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002102:	f8d7 16f8 	ldr.w	r1, [r7, #1784]	@ 0x6f8
 8002106:	4051      	eors	r1, r2
 8002108:	f8c7 16f0 	str.w	r1, [r7, #1776]	@ 0x6f0
 800210c:	f8d7 16fc 	ldr.w	r1, [r7, #1788]	@ 0x6fc
 8002110:	404b      	eors	r3, r1
 8002112:	f8c7 36f4 	str.w	r3, [r7, #1780]	@ 0x6f4
 8002116:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800211a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800211e:	f8d7 16f0 	ldr.w	r1, [r7, #1776]	@ 0x6f0
 8002122:	4051      	eors	r1, r2
 8002124:	f8c7 1280 	str.w	r1, [r7, #640]	@ 0x280
 8002128:	f8d7 16f4 	ldr.w	r1, [r7, #1780]	@ 0x6f4
 800212c:	404b      	eors	r3, r1
 800212e:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8002132:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	@ 0x280
 8002136:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800213a:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 800213e:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 8002142:	0fda      	lsrs	r2, r3, #31
 8002144:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	4313      	orrs	r3, r2
 800214c:	f8c7 36ec 	str.w	r3, [r7, #1772]	@ 0x6ec
 8002150:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	@ 0xaac
 8002154:	0fda      	lsrs	r2, r3, #31
 8002156:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	@ 0xaa8
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	4313      	orrs	r3, r2
 800215e:	f8c7 36e8 	str.w	r3, [r7, #1768]	@ 0x6e8
 8002162:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800216a:	f8d7 16e8 	ldr.w	r1, [r7, #1768]	@ 0x6e8
 800216e:	4051      	eors	r1, r2
 8002170:	f8c7 1278 	str.w	r1, [r7, #632]	@ 0x278
 8002174:	f8d7 16ec 	ldr.w	r1, [r7, #1772]	@ 0x6ec
 8002178:	404b      	eors	r3, r1
 800217a:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
 800217e:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	@ 0x278
 8002182:	f607 2188 	addw	r1, r7, #2696	@ 0xa88
 8002186:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 800218a:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 800218e:	0fda      	lsrs	r2, r3, #31
 8002190:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4313      	orrs	r3, r2
 8002198:	f8c7 36e4 	str.w	r3, [r7, #1764]	@ 0x6e4
 800219c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	@ 0xaa4
 80021a0:	0fda      	lsrs	r2, r3, #31
 80021a2:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	@ 0xaa0
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c7 36e0 	str.w	r3, [r7, #1760]	@ 0x6e0
 80021ae:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80021b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b6:	f8d7 16e0 	ldr.w	r1, [r7, #1760]	@ 0x6e0
 80021ba:	4051      	eors	r1, r2
 80021bc:	f8c7 1270 	str.w	r1, [r7, #624]	@ 0x270
 80021c0:	f8d7 16e4 	ldr.w	r1, [r7, #1764]	@ 0x6e4
 80021c4:	404b      	eors	r3, r1
 80021c6:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
 80021ca:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	@ 0x270
 80021ce:	f507 6128 	add.w	r1, r7, #2688	@ 0xa80
 80021d2:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 80021d6:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80021da:	0fda      	lsrs	r2, r3, #31
 80021dc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	4313      	orrs	r3, r2
 80021e4:	f8c7 36dc 	str.w	r3, [r7, #1756]	@ 0x6dc
 80021e8:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	@ 0xa9c
 80021ec:	0fda      	lsrs	r2, r3, #31
 80021ee:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	@ 0xa98
 80021f2:	005b      	lsls	r3, r3, #1
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c7 36d8 	str.w	r3, [r7, #1752]	@ 0x6d8
 80021fa:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80021fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002202:	f8d7 16d8 	ldr.w	r1, [r7, #1752]	@ 0x6d8
 8002206:	4051      	eors	r1, r2
 8002208:	f8c7 1268 	str.w	r1, [r7, #616]	@ 0x268
 800220c:	f8d7 16dc 	ldr.w	r1, [r7, #1756]	@ 0x6dc
 8002210:	404b      	eors	r3, r1
 8002212:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8002216:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	@ 0x268
 800221a:	f607 2178 	addw	r1, r7, #2680	@ 0xa78
 800221e:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8002222:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 8002226:	0fda      	lsrs	r2, r3, #31
 8002228:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c7 36d4 	str.w	r3, [r7, #1748]	@ 0x6d4
 8002234:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	@ 0xa94
 8002238:	0fda      	lsrs	r2, r3, #31
 800223a:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	@ 0xa90
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c7 36d0 	str.w	r3, [r7, #1744]	@ 0x6d0
 8002246:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800224a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800224e:	f8d7 16d0 	ldr.w	r1, [r7, #1744]	@ 0x6d0
 8002252:	4051      	eors	r1, r2
 8002254:	f8c7 1260 	str.w	r1, [r7, #608]	@ 0x260
 8002258:	f8d7 16d4 	ldr.w	r1, [r7, #1748]	@ 0x6d4
 800225c:	404b      	eors	r3, r1
 800225e:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
 8002262:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	@ 0x260
 8002266:	f507 6127 	add.w	r1, r7, #2672	@ 0xa70
 800226a:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 800226e:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 8002272:	0fda      	lsrs	r2, r3, #31
 8002274:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c7 36cc 	str.w	r3, [r7, #1740]	@ 0x6cc
 8002280:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	@ 0xab4
 8002284:	0fda      	lsrs	r2, r3, #31
 8002286:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	@ 0xab0
 800228a:	005b      	lsls	r3, r3, #1
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c7 36c8 	str.w	r3, [r7, #1736]	@ 0x6c8
 8002292:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800229a:	f8d7 16c8 	ldr.w	r1, [r7, #1736]	@ 0x6c8
 800229e:	4051      	eors	r1, r2
 80022a0:	f8c7 1258 	str.w	r1, [r7, #600]	@ 0x258
 80022a4:	f8d7 16cc 	ldr.w	r1, [r7, #1740]	@ 0x6cc
 80022a8:	404b      	eors	r3, r1
 80022aa:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80022ae:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	@ 0x258
 80022b2:	f607 2168 	addw	r1, r7, #2664	@ 0xa68
 80022b6:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 80022ba:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80022be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c2:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 80022c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ca:	ea80 0602 	eor.w	r6, r0, r2
 80022ce:	f8c7 6250 	str.w	r6, [r7, #592]	@ 0x250
 80022d2:	404b      	eors	r3, r1
 80022d4:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 80022d8:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	@ 0x250
 80022dc:	f507 6126 	add.w	r1, r7, #2656	@ 0xa60
 80022e0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 80022e4:	f507 6326 	add.w	r3, r7, #2656	@ 0xa60
 80022e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ec:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80022f0:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 80022f4:	f507 6323 	add.w	r3, r7, #2608	@ 0xa30
 80022f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022fc:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8002300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002304:	ea80 0602 	eor.w	r6, r0, r2
 8002308:	f8c7 6248 	str.w	r6, [r7, #584]	@ 0x248
 800230c:	404b      	eors	r3, r1
 800230e:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
 8002312:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	@ 0x248
 8002316:	f507 6123 	add.w	r1, r7, #2608	@ 0xa30
 800231a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 800231e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002322:	f5a3 70aa 	sub.w	r0, r3, #340	@ 0x154
 8002326:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800232a:	f5a3 71ac 	sub.w	r1, r3, #344	@ 0x158
 800232e:	6803      	ldr	r3, [r0, #0]
 8002330:	031a      	lsls	r2, r3, #12
 8002332:	680b      	ldr	r3, [r1, #0]
 8002334:	0d1b      	lsrs	r3, r3, #20
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 800233c:	680b      	ldr	r3, [r1, #0]
 800233e:	031a      	lsls	r2, r3, #12
 8002340:	6803      	ldr	r3, [r0, #0]
 8002342:	0d1b      	lsrs	r3, r3, #20
 8002344:	4313      	orrs	r3, r2
 8002346:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
 800234a:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	@ 0x240
 800234e:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002352:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 8002356:	f507 6320 	add.w	r3, r7, #2560	@ 0xa00
 800235a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800235e:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	ea80 0602 	eor.w	r6, r0, r2
 800236a:	f8c7 6238 	str.w	r6, [r7, #568]	@ 0x238
 800236e:	404b      	eors	r3, r1
 8002370:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8002374:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	@ 0x238
 8002378:	f507 6120 	add.w	r1, r7, #2560	@ 0xa00
 800237c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 8002380:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002384:	f5a3 70c2 	sub.w	r0, r3, #388	@ 0x184
 8002388:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800238c:	f5a3 71c4 	sub.w	r1, r3, #392	@ 0x188
 8002390:	6803      	ldr	r3, [r0, #0]
 8002392:	02da      	lsls	r2, r3, #11
 8002394:	680b      	ldr	r3, [r1, #0]
 8002396:	0d5b      	lsrs	r3, r3, #21
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
 800239e:	680b      	ldr	r3, [r1, #0]
 80023a0:	02da      	lsls	r2, r3, #11
 80023a2:	6803      	ldr	r3, [r0, #0]
 80023a4:	0d5b      	lsrs	r3, r3, #21
 80023a6:	4313      	orrs	r3, r2
 80023a8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
 80023ac:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	@ 0x230
 80023b0:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 80023b4:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 80023b8:	f507 631d 	add.w	r3, r7, #2512	@ 0x9d0
 80023bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023c0:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	ea80 0602 	eor.w	r6, r0, r2
 80023cc:	f8c7 6228 	str.w	r6, [r7, #552]	@ 0x228
 80023d0:	404b      	eors	r3, r1
 80023d2:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
 80023d6:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	@ 0x228
 80023da:	f507 611d 	add.w	r1, r7, #2512	@ 0x9d0
 80023de:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 80023e2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80023e6:	f5a3 70dc 	sub.w	r0, r3, #440	@ 0x1b8
 80023ea:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80023ee:	f5a3 71da 	sub.w	r1, r3, #436	@ 0x1b4
 80023f2:	6803      	ldr	r3, [r0, #0]
 80023f4:	0ada      	lsrs	r2, r3, #11
 80023f6:	680b      	ldr	r3, [r1, #0]
 80023f8:	055b      	lsls	r3, r3, #21
 80023fa:	4313      	orrs	r3, r2
 80023fc:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8002400:	680b      	ldr	r3, [r1, #0]
 8002402:	0ada      	lsrs	r2, r3, #11
 8002404:	6803      	ldr	r3, [r0, #0]
 8002406:	055b      	lsls	r3, r3, #21
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 800240e:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	@ 0x220
 8002412:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8002416:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 800241a:	f507 631a 	add.w	r3, r7, #2464	@ 0x9a0
 800241e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002422:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242a:	ea80 0602 	eor.w	r6, r0, r2
 800242e:	f8c7 6218 	str.w	r6, [r7, #536]	@ 0x218
 8002432:	404b      	eors	r3, r1
 8002434:	f8c7 321c 	str.w	r3, [r7, #540]	@ 0x21c
 8002438:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	@ 0x218
 800243c:	f507 611a 	add.w	r1, r7, #2464	@ 0x9a0
 8002440:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 8002444:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002448:	f5a3 70f4 	sub.w	r0, r3, #488	@ 0x1e8
 800244c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002450:	f5a3 71f2 	sub.w	r1, r3, #484	@ 0x1e4
 8002454:	6803      	ldr	r3, [r0, #0]
 8002456:	0c9a      	lsrs	r2, r3, #18
 8002458:	680b      	ldr	r3, [r1, #0]
 800245a:	039b      	lsls	r3, r3, #14
 800245c:	4313      	orrs	r3, r2
 800245e:	f8c7 3214 	str.w	r3, [r7, #532]	@ 0x214
 8002462:	680b      	ldr	r3, [r1, #0]
 8002464:	0c9a      	lsrs	r2, r3, #18
 8002466:	6803      	ldr	r3, [r0, #0]
 8002468:	039b      	lsls	r3, r3, #14
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8002470:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	@ 0x210
 8002474:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8002478:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 800247c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	43d1      	mvns	r1, r2
 8002486:	f8c7 16c0 	str.w	r1, [r7, #1728]	@ 0x6c0
 800248a:	43db      	mvns	r3, r3
 800248c:	f8c7 36c4 	str.w	r3, [r7, #1732]	@ 0x6c4
 8002490:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f8d7 16c0 	ldr.w	r1, [r7, #1728]	@ 0x6c0
 800249c:	4011      	ands	r1, r2
 800249e:	f8c7 16b8 	str.w	r1, [r7, #1720]	@ 0x6b8
 80024a2:	f8d7 16c4 	ldr.w	r1, [r7, #1732]	@ 0x6c4
 80024a6:	400b      	ands	r3, r1
 80024a8:	f8c7 36bc 	str.w	r3, [r7, #1724]	@ 0x6bc
 80024ac:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80024b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b4:	f8d7 16b8 	ldr.w	r1, [r7, #1720]	@ 0x6b8
 80024b8:	4051      	eors	r1, r2
 80024ba:	f8c7 1208 	str.w	r1, [r7, #520]	@ 0x208
 80024be:	f8d7 16bc 	ldr.w	r1, [r7, #1724]	@ 0x6bc
 80024c2:	404b      	eors	r3, r1
 80024c4:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80024c8:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	@ 0x208
 80024cc:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 80024d0:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80024d4:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 80024d8:	3301      	adds	r3, #1
 80024da:	4af4      	ldr	r2, [pc, #976]	@ (80028ac <KeccakF1600_StatePermute+0x223c>)
 80024dc:	00db      	lsls	r3, r3, #3
 80024de:	4413      	add	r3, r2
 80024e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024e4:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80024e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ec:	ea82 0600 	eor.w	r6, r2, r0
 80024f0:	f8c7 6200 	str.w	r6, [r7, #512]	@ 0x200
 80024f4:	404b      	eors	r3, r1
 80024f6:	f8c7 3204 	str.w	r3, [r7, #516]	@ 0x204
 80024fa:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	@ 0x200
 80024fe:	f607 3178 	addw	r1, r7, #2936	@ 0xb78
 8002502:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 8002506:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800250a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250e:	43d1      	mvns	r1, r2
 8002510:	f8c7 16b0 	str.w	r1, [r7, #1712]	@ 0x6b0
 8002514:	43db      	mvns	r3, r3
 8002516:	f8c7 36b4 	str.w	r3, [r7, #1716]	@ 0x6b4
 800251a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800251e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002522:	f8d7 16b0 	ldr.w	r1, [r7, #1712]	@ 0x6b0
 8002526:	4011      	ands	r1, r2
 8002528:	f8c7 16a8 	str.w	r1, [r7, #1704]	@ 0x6a8
 800252c:	f8d7 16b4 	ldr.w	r1, [r7, #1716]	@ 0x6b4
 8002530:	400b      	ands	r3, r1
 8002532:	f8c7 36ac 	str.w	r3, [r7, #1708]	@ 0x6ac
 8002536:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f8d7 16a8 	ldr.w	r1, [r7, #1704]	@ 0x6a8
 8002542:	4051      	eors	r1, r2
 8002544:	f8c7 11f8 	str.w	r1, [r7, #504]	@ 0x1f8
 8002548:	f8d7 16ac 	ldr.w	r1, [r7, #1708]	@ 0x6ac
 800254c:	404b      	eors	r3, r1
 800254e:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
 8002552:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	@ 0x1f8
 8002556:	f507 6137 	add.w	r1, r7, #2928	@ 0xb70
 800255a:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 800255e:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	43d1      	mvns	r1, r2
 8002568:	f8c7 16a0 	str.w	r1, [r7, #1696]	@ 0x6a0
 800256c:	43db      	mvns	r3, r3
 800256e:	f8c7 36a4 	str.w	r3, [r7, #1700]	@ 0x6a4
 8002572:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800257a:	f8d7 16a0 	ldr.w	r1, [r7, #1696]	@ 0x6a0
 800257e:	4011      	ands	r1, r2
 8002580:	f8c7 1698 	str.w	r1, [r7, #1688]	@ 0x698
 8002584:	f8d7 16a4 	ldr.w	r1, [r7, #1700]	@ 0x6a4
 8002588:	400b      	ands	r3, r1
 800258a:	f8c7 369c 	str.w	r3, [r7, #1692]	@ 0x69c
 800258e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002596:	f8d7 1698 	ldr.w	r1, [r7, #1688]	@ 0x698
 800259a:	4051      	eors	r1, r2
 800259c:	f8c7 11f0 	str.w	r1, [r7, #496]	@ 0x1f0
 80025a0:	f8d7 169c 	ldr.w	r1, [r7, #1692]	@ 0x69c
 80025a4:	404b      	eors	r3, r1
 80025a6:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80025aa:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	@ 0x1f0
 80025ae:	f607 3168 	addw	r1, r7, #2920	@ 0xb68
 80025b2:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 80025b6:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80025ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025be:	43d1      	mvns	r1, r2
 80025c0:	f8c7 1690 	str.w	r1, [r7, #1680]	@ 0x690
 80025c4:	43db      	mvns	r3, r3
 80025c6:	f8c7 3694 	str.w	r3, [r7, #1684]	@ 0x694
 80025ca:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80025ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d2:	f8d7 1690 	ldr.w	r1, [r7, #1680]	@ 0x690
 80025d6:	4011      	ands	r1, r2
 80025d8:	f8c7 1688 	str.w	r1, [r7, #1672]	@ 0x688
 80025dc:	f8d7 1694 	ldr.w	r1, [r7, #1684]	@ 0x694
 80025e0:	400b      	ands	r3, r1
 80025e2:	f8c7 368c 	str.w	r3, [r7, #1676]	@ 0x68c
 80025e6:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80025ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ee:	f8d7 1688 	ldr.w	r1, [r7, #1672]	@ 0x688
 80025f2:	4051      	eors	r1, r2
 80025f4:	f8c7 11e8 	str.w	r1, [r7, #488]	@ 0x1e8
 80025f8:	f8d7 168c 	ldr.w	r1, [r7, #1676]	@ 0x68c
 80025fc:	404b      	eors	r3, r1
 80025fe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
 8002602:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	@ 0x1e8
 8002606:	f507 6136 	add.w	r1, r7, #2912	@ 0xb60
 800260a:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 800260e:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002616:	43d1      	mvns	r1, r2
 8002618:	f8c7 1680 	str.w	r1, [r7, #1664]	@ 0x680
 800261c:	43db      	mvns	r3, r3
 800261e:	f8c7 3684 	str.w	r3, [r7, #1668]	@ 0x684
 8002622:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262a:	f8d7 1680 	ldr.w	r1, [r7, #1664]	@ 0x680
 800262e:	4011      	ands	r1, r2
 8002630:	f8c7 1678 	str.w	r1, [r7, #1656]	@ 0x678
 8002634:	f8d7 1684 	ldr.w	r1, [r7, #1668]	@ 0x684
 8002638:	400b      	ands	r3, r1
 800263a:	f8c7 367c 	str.w	r3, [r7, #1660]	@ 0x67c
 800263e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	f8d7 1678 	ldr.w	r1, [r7, #1656]	@ 0x678
 800264a:	4051      	eors	r1, r2
 800264c:	f8c7 11e0 	str.w	r1, [r7, #480]	@ 0x1e0
 8002650:	f8d7 167c 	ldr.w	r1, [r7, #1660]	@ 0x67c
 8002654:	404b      	eors	r3, r1
 8002656:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800265a:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	@ 0x1e0
 800265e:	f607 3158 	addw	r1, r7, #2904	@ 0xb58
 8002662:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 8002666:	f607 2348 	addw	r3, r7, #2632	@ 0xa48
 800266a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800266e:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	ea80 0602 	eor.w	r6, r0, r2
 800267a:	f8c7 61d8 	str.w	r6, [r7, #472]	@ 0x1d8
 800267e:	404b      	eors	r3, r1
 8002680:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8002684:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	@ 0x1d8
 8002688:	f607 2148 	addw	r1, r7, #2632	@ 0xa48
 800268c:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 8002690:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002694:	f5a3 70a0 	sub.w	r0, r3, #320	@ 0x140
 8002698:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800269c:	f5a3 719e 	sub.w	r1, r3, #316	@ 0x13c
 80026a0:	6803      	ldr	r3, [r0, #0]
 80026a2:	091a      	lsrs	r2, r3, #4
 80026a4:	680b      	ldr	r3, [r1, #0]
 80026a6:	071b      	lsls	r3, r3, #28
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 80026ae:	680b      	ldr	r3, [r1, #0]
 80026b0:	091a      	lsrs	r2, r3, #4
 80026b2:	6803      	ldr	r3, [r0, #0]
 80026b4:	071b      	lsls	r3, r3, #28
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80026bc:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	@ 0x1d0
 80026c0:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80026c4:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 80026c8:	f607 2318 	addw	r3, r7, #2584	@ 0xa18
 80026cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d0:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 80026d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d8:	ea80 0602 	eor.w	r6, r0, r2
 80026dc:	f8c7 61c8 	str.w	r6, [r7, #456]	@ 0x1c8
 80026e0:	404b      	eors	r3, r1
 80026e2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 80026e6:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	@ 0x1c8
 80026ea:	f607 2118 	addw	r1, r7, #2584	@ 0xa18
 80026ee:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 80026f2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80026f6:	f5a3 70b8 	sub.w	r0, r3, #368	@ 0x170
 80026fa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80026fe:	f5a3 71b6 	sub.w	r1, r3, #364	@ 0x16c
 8002702:	6803      	ldr	r3, [r0, #0]
 8002704:	0b1a      	lsrs	r2, r3, #12
 8002706:	680b      	ldr	r3, [r1, #0]
 8002708:	051b      	lsls	r3, r3, #20
 800270a:	4313      	orrs	r3, r2
 800270c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002710:	680b      	ldr	r3, [r1, #0]
 8002712:	0b1a      	lsrs	r2, r3, #12
 8002714:	6803      	ldr	r3, [r0, #0]
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	4313      	orrs	r3, r2
 800271a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800271e:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	@ 0x1c0
 8002722:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002726:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 800272a:	f507 6321 	add.w	r3, r7, #2576	@ 0xa10
 800272e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002732:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8002736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800273a:	ea80 0602 	eor.w	r6, r0, r2
 800273e:	f8c7 61b8 	str.w	r6, [r7, #440]	@ 0x1b8
 8002742:	404b      	eors	r3, r1
 8002744:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002748:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	@ 0x1b8
 800274c:	f507 6121 	add.w	r1, r7, #2576	@ 0xa10
 8002750:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8002754:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002758:	f5a3 70bc 	sub.w	r0, r3, #376	@ 0x178
 800275c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002760:	f5a3 71ba 	sub.w	r1, r3, #372	@ 0x174
 8002764:	6803      	ldr	r3, [r0, #0]
 8002766:	0f5a      	lsrs	r2, r3, #29
 8002768:	680b      	ldr	r3, [r1, #0]
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8002772:	680b      	ldr	r3, [r1, #0]
 8002774:	0f5a      	lsrs	r2, r3, #29
 8002776:	6803      	ldr	r3, [r0, #0]
 8002778:	00db      	lsls	r3, r3, #3
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8002780:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	@ 0x1b0
 8002784:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8002788:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 800278c:	f507 631e 	add.w	r3, r7, #2528	@ 0x9e0
 8002790:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002794:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	ea80 0602 	eor.w	r6, r0, r2
 80027a0:	f8c7 61a8 	str.w	r6, [r7, #424]	@ 0x1a8
 80027a4:	404b      	eors	r3, r1
 80027a6:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 80027aa:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	@ 0x1a8
 80027ae:	f507 611e 	add.w	r1, r7, #2528	@ 0x9e0
 80027b2:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 80027b6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80027ba:	f5a3 70d2 	sub.w	r0, r3, #420	@ 0x1a4
 80027be:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80027c2:	f5a3 71d4 	sub.w	r1, r3, #424	@ 0x1a8
 80027c6:	6803      	ldr	r3, [r0, #0]
 80027c8:	035a      	lsls	r2, r3, #13
 80027ca:	680b      	ldr	r3, [r1, #0]
 80027cc:	0cdb      	lsrs	r3, r3, #19
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80027d4:	680b      	ldr	r3, [r1, #0]
 80027d6:	035a      	lsls	r2, r3, #13
 80027d8:	6803      	ldr	r3, [r0, #0]
 80027da:	0cdb      	lsrs	r3, r3, #19
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80027e2:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	@ 0x1a0
 80027e6:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80027ea:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 80027ee:	f507 631b 	add.w	r3, r7, #2480	@ 0x9b0
 80027f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027f6:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 80027fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027fe:	ea80 0602 	eor.w	r6, r0, r2
 8002802:	f8c7 6198 	str.w	r6, [r7, #408]	@ 0x198
 8002806:	404b      	eors	r3, r1
 8002808:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 800280c:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	@ 0x198
 8002810:	f507 611b 	add.w	r1, r7, #2480	@ 0x9b0
 8002814:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8002818:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800281c:	f5a3 70ea 	sub.w	r0, r3, #468	@ 0x1d4
 8002820:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002824:	f5a3 71ec 	sub.w	r1, r3, #472	@ 0x1d8
 8002828:	6803      	ldr	r3, [r0, #0]
 800282a:	075a      	lsls	r2, r3, #29
 800282c:	680b      	ldr	r3, [r1, #0]
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 8002836:	680b      	ldr	r3, [r1, #0]
 8002838:	075a      	lsls	r2, r3, #29
 800283a:	6803      	ldr	r3, [r0, #0]
 800283c:	08db      	lsrs	r3, r3, #3
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8002844:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	@ 0x190
 8002848:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800284c:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8002850:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002854:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002858:	43d1      	mvns	r1, r2
 800285a:	f8c7 1670 	str.w	r1, [r7, #1648]	@ 0x670
 800285e:	43db      	mvns	r3, r3
 8002860:	f8c7 3674 	str.w	r3, [r7, #1652]	@ 0x674
 8002864:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f8d7 1670 	ldr.w	r1, [r7, #1648]	@ 0x670
 8002870:	4011      	ands	r1, r2
 8002872:	f8c7 1668 	str.w	r1, [r7, #1640]	@ 0x668
 8002876:	f8d7 1674 	ldr.w	r1, [r7, #1652]	@ 0x674
 800287a:	400b      	ands	r3, r1
 800287c:	f8c7 366c 	str.w	r3, [r7, #1644]	@ 0x66c
 8002880:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002888:	f8d7 1668 	ldr.w	r1, [r7, #1640]	@ 0x668
 800288c:	4051      	eors	r1, r2
 800288e:	f8c7 1188 	str.w	r1, [r7, #392]	@ 0x188
 8002892:	f8d7 166c 	ldr.w	r1, [r7, #1644]	@ 0x66c
 8002896:	404b      	eors	r3, r1
 8002898:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
 800289c:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	@ 0x188
 80028a0:	f507 6135 	add.w	r1, r7, #2896	@ 0xb50
 80028a4:	e9c1 2300 	strd	r2, r3, [r1]
 80028a8:	e002      	b.n	80028b0 <KeccakF1600_StatePermute+0x2240>
 80028aa:	bf00      	nop
 80028ac:	08011f48 	.word	0x08011f48
            Age =   BCe ^((~BCi)&  BCo );
 80028b0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80028b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b8:	43d1      	mvns	r1, r2
 80028ba:	f8c7 1660 	str.w	r1, [r7, #1632]	@ 0x660
 80028be:	43db      	mvns	r3, r3
 80028c0:	f8c7 3664 	str.w	r3, [r7, #1636]	@ 0x664
 80028c4:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80028c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028cc:	f8d7 1660 	ldr.w	r1, [r7, #1632]	@ 0x660
 80028d0:	4011      	ands	r1, r2
 80028d2:	f8c7 1658 	str.w	r1, [r7, #1624]	@ 0x658
 80028d6:	f8d7 1664 	ldr.w	r1, [r7, #1636]	@ 0x664
 80028da:	400b      	ands	r3, r1
 80028dc:	f8c7 365c 	str.w	r3, [r7, #1628]	@ 0x65c
 80028e0:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80028e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e8:	f8d7 1658 	ldr.w	r1, [r7, #1624]	@ 0x658
 80028ec:	4051      	eors	r1, r2
 80028ee:	f8c7 1180 	str.w	r1, [r7, #384]	@ 0x180
 80028f2:	f8d7 165c 	ldr.w	r1, [r7, #1628]	@ 0x65c
 80028f6:	404b      	eors	r3, r1
 80028f8:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80028fc:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	@ 0x180
 8002900:	f607 3148 	addw	r1, r7, #2888	@ 0xb48
 8002904:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8002908:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800290c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002910:	43d1      	mvns	r1, r2
 8002912:	f8c7 1650 	str.w	r1, [r7, #1616]	@ 0x650
 8002916:	43db      	mvns	r3, r3
 8002918:	f8c7 3654 	str.w	r3, [r7, #1620]	@ 0x654
 800291c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	f8d7 1650 	ldr.w	r1, [r7, #1616]	@ 0x650
 8002928:	4011      	ands	r1, r2
 800292a:	f8c7 1648 	str.w	r1, [r7, #1608]	@ 0x648
 800292e:	f8d7 1654 	ldr.w	r1, [r7, #1620]	@ 0x654
 8002932:	400b      	ands	r3, r1
 8002934:	f8c7 364c 	str.w	r3, [r7, #1612]	@ 0x64c
 8002938:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800293c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002940:	f8d7 1648 	ldr.w	r1, [r7, #1608]	@ 0x648
 8002944:	4051      	eors	r1, r2
 8002946:	f8c7 1178 	str.w	r1, [r7, #376]	@ 0x178
 800294a:	f8d7 164c 	ldr.w	r1, [r7, #1612]	@ 0x64c
 800294e:	404b      	eors	r3, r1
 8002950:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002954:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	@ 0x178
 8002958:	f507 6134 	add.w	r1, r7, #2880	@ 0xb40
 800295c:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8002960:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002968:	43d1      	mvns	r1, r2
 800296a:	f8c7 1640 	str.w	r1, [r7, #1600]	@ 0x640
 800296e:	43db      	mvns	r3, r3
 8002970:	f8c7 3644 	str.w	r3, [r7, #1604]	@ 0x644
 8002974:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800297c:	f8d7 1640 	ldr.w	r1, [r7, #1600]	@ 0x640
 8002980:	4011      	ands	r1, r2
 8002982:	f8c7 1638 	str.w	r1, [r7, #1592]	@ 0x638
 8002986:	f8d7 1644 	ldr.w	r1, [r7, #1604]	@ 0x644
 800298a:	400b      	ands	r3, r1
 800298c:	f8c7 363c 	str.w	r3, [r7, #1596]	@ 0x63c
 8002990:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002994:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002998:	f8d7 1638 	ldr.w	r1, [r7, #1592]	@ 0x638
 800299c:	4051      	eors	r1, r2
 800299e:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
 80029a2:	f8d7 163c 	ldr.w	r1, [r7, #1596]	@ 0x63c
 80029a6:	404b      	eors	r3, r1
 80029a8:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80029ac:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	@ 0x170
 80029b0:	f607 3138 	addw	r1, r7, #2872	@ 0xb38
 80029b4:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 80029b8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80029bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029c0:	43d1      	mvns	r1, r2
 80029c2:	f8c7 1630 	str.w	r1, [r7, #1584]	@ 0x630
 80029c6:	43db      	mvns	r3, r3
 80029c8:	f8c7 3634 	str.w	r3, [r7, #1588]	@ 0x634
 80029cc:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 80029d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d4:	f8d7 1630 	ldr.w	r1, [r7, #1584]	@ 0x630
 80029d8:	4011      	ands	r1, r2
 80029da:	f8c7 1628 	str.w	r1, [r7, #1576]	@ 0x628
 80029de:	f8d7 1634 	ldr.w	r1, [r7, #1588]	@ 0x634
 80029e2:	400b      	ands	r3, r1
 80029e4:	f8c7 362c 	str.w	r3, [r7, #1580]	@ 0x62c
 80029e8:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f8d7 1628 	ldr.w	r1, [r7, #1576]	@ 0x628
 80029f4:	4051      	eors	r1, r2
 80029f6:	f8c7 1168 	str.w	r1, [r7, #360]	@ 0x168
 80029fa:	f8d7 162c 	ldr.w	r1, [r7, #1580]	@ 0x62c
 80029fe:	404b      	eors	r3, r1
 8002a00:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8002a04:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8002a08:	f507 6133 	add.w	r1, r7, #2864	@ 0xb30
 8002a0c:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8002a10:	f607 2358 	addw	r3, r7, #2648	@ 0xa58
 8002a14:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a18:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8002a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a20:	ea80 0602 	eor.w	r6, r0, r2
 8002a24:	f8c7 6160 	str.w	r6, [r7, #352]	@ 0x160
 8002a28:	404b      	eors	r3, r1
 8002a2a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8002a2e:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	@ 0x160
 8002a32:	f607 2158 	addw	r1, r7, #2648	@ 0xa58
 8002a36:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8002a3a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002a3e:	f5a3 7098 	sub.w	r0, r3, #304	@ 0x130
 8002a42:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002a46:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002a4a:	6803      	ldr	r3, [r0, #0]
 8002a4c:	0fda      	lsrs	r2, r3, #31
 8002a4e:	680b      	ldr	r3, [r1, #0]
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4313      	orrs	r3, r2
 8002a54:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8002a58:	680b      	ldr	r3, [r1, #0]
 8002a5a:	0fda      	lsrs	r2, r3, #31
 8002a5c:	6803      	ldr	r3, [r0, #0]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	4313      	orrs	r3, r2
 8002a62:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002a66:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 8002a6a:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8002a6e:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8002a72:	f607 2328 	addw	r3, r7, #2600	@ 0xa28
 8002a76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a7a:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a82:	ea80 0602 	eor.w	r6, r0, r2
 8002a86:	f8c7 6150 	str.w	r6, [r7, #336]	@ 0x150
 8002a8a:	404b      	eors	r3, r1
 8002a8c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002a90:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8002a94:	f607 2128 	addw	r1, r7, #2600	@ 0xa28
 8002a98:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8002a9c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002aa0:	f5a3 70b0 	sub.w	r0, r3, #352	@ 0x160
 8002aa4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002aa8:	f5a3 71ae 	sub.w	r1, r3, #348	@ 0x15c
 8002aac:	6803      	ldr	r3, [r0, #0]
 8002aae:	0e9a      	lsrs	r2, r3, #26
 8002ab0:	680b      	ldr	r3, [r1, #0]
 8002ab2:	019b      	lsls	r3, r3, #6
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002aba:	680b      	ldr	r3, [r1, #0]
 8002abc:	0e9a      	lsrs	r2, r3, #26
 8002abe:	6803      	ldr	r3, [r0, #0]
 8002ac0:	019b      	lsls	r3, r3, #6
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8002ac8:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 8002acc:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002ad0:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8002ad4:	f607 13f8 	addw	r3, r7, #2552	@ 0x9f8
 8002ad8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002adc:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8002ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae4:	ea80 0602 	eor.w	r6, r0, r2
 8002ae8:	f8c7 6140 	str.w	r6, [r7, #320]	@ 0x140
 8002aec:	404b      	eors	r3, r1
 8002aee:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
 8002af2:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8002af6:	f607 11f8 	addw	r1, r7, #2552	@ 0x9f8
 8002afa:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8002afe:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002b02:	f5a3 70c8 	sub.w	r0, r3, #400	@ 0x190
 8002b06:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002b0a:	f5a3 71c6 	sub.w	r1, r3, #396	@ 0x18c
 8002b0e:	6803      	ldr	r3, [r0, #0]
 8002b10:	09da      	lsrs	r2, r3, #7
 8002b12:	680b      	ldr	r3, [r1, #0]
 8002b14:	065b      	lsls	r3, r3, #25
 8002b16:	4313      	orrs	r3, r2
 8002b18:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8002b1c:	680b      	ldr	r3, [r1, #0]
 8002b1e:	09da      	lsrs	r2, r3, #7
 8002b20:	6803      	ldr	r3, [r0, #0]
 8002b22:	065b      	lsls	r3, r3, #25
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8002b2a:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 8002b2e:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8002b32:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8002b36:	f607 13c8 	addw	r3, r7, #2504	@ 0x9c8
 8002b3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b3e:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b46:	ea80 0602 	eor.w	r6, r0, r2
 8002b4a:	f8c7 6130 	str.w	r6, [r7, #304]	@ 0x130
 8002b4e:	404b      	eors	r3, r1
 8002b50:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002b54:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002b58:	f607 11c8 	addw	r1, r7, #2504	@ 0x9c8
 8002b5c:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8002b60:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002b64:	f5a3 70e0 	sub.w	r0, r3, #448	@ 0x1c0
 8002b68:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002b6c:	f5a3 71de 	sub.w	r1, r3, #444	@ 0x1bc
 8002b70:	6803      	ldr	r3, [r0, #0]
 8002b72:	0e1a      	lsrs	r2, r3, #24
 8002b74:	680b      	ldr	r3, [r1, #0]
 8002b76:	021b      	lsls	r3, r3, #8
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002b7e:	680b      	ldr	r3, [r1, #0]
 8002b80:	0e1a      	lsrs	r2, r3, #24
 8002b82:	6803      	ldr	r3, [r0, #0]
 8002b84:	021b      	lsls	r3, r3, #8
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8002b8c:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002b90:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8002b94:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8002b98:	f507 631c 	add.w	r3, r7, #2496	@ 0x9c0
 8002b9c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ba0:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8002ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba8:	ea80 0602 	eor.w	r6, r0, r2
 8002bac:	f8c7 6120 	str.w	r6, [r7, #288]	@ 0x120
 8002bb0:	404b      	eors	r3, r1
 8002bb2:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002bb6:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002bba:	f507 611c 	add.w	r1, r7, #2496	@ 0x9c0
 8002bbe:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8002bc2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002bc6:	f5a3 70e4 	sub.w	r0, r3, #456	@ 0x1c8
 8002bca:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002bce:	f5a3 71e2 	sub.w	r1, r3, #452	@ 0x1c4
 8002bd2:	6803      	ldr	r3, [r0, #0]
 8002bd4:	0b9a      	lsrs	r2, r3, #14
 8002bd6:	680b      	ldr	r3, [r1, #0]
 8002bd8:	049b      	lsls	r3, r3, #18
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002be0:	680b      	ldr	r3, [r1, #0]
 8002be2:	0b9a      	lsrs	r2, r3, #14
 8002be4:	6803      	ldr	r3, [r0, #0]
 8002be6:	049b      	lsls	r3, r3, #18
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8002bee:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002bf2:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8002bf6:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8002bfa:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c02:	43d1      	mvns	r1, r2
 8002c04:	f8c7 1620 	str.w	r1, [r7, #1568]	@ 0x620
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	f8c7 3624 	str.w	r3, [r7, #1572]	@ 0x624
 8002c0e:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c16:	f8d7 1620 	ldr.w	r1, [r7, #1568]	@ 0x620
 8002c1a:	4011      	ands	r1, r2
 8002c1c:	f8c7 1618 	str.w	r1, [r7, #1560]	@ 0x618
 8002c20:	f8d7 1624 	ldr.w	r1, [r7, #1572]	@ 0x624
 8002c24:	400b      	ands	r3, r1
 8002c26:	f8c7 361c 	str.w	r3, [r7, #1564]	@ 0x61c
 8002c2a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f8d7 1618 	ldr.w	r1, [r7, #1560]	@ 0x618
 8002c36:	4051      	eors	r1, r2
 8002c38:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8002c3c:	f8d7 161c 	ldr.w	r1, [r7, #1564]	@ 0x61c
 8002c40:	404b      	eors	r3, r1
 8002c42:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002c46:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002c4a:	f607 3128 	addw	r1, r7, #2856	@ 0xb28
 8002c4e:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8002c52:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	43d1      	mvns	r1, r2
 8002c5c:	f8c7 1610 	str.w	r1, [r7, #1552]	@ 0x610
 8002c60:	43db      	mvns	r3, r3
 8002c62:	f8c7 3614 	str.w	r3, [r7, #1556]	@ 0x614
 8002c66:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6e:	f8d7 1610 	ldr.w	r1, [r7, #1552]	@ 0x610
 8002c72:	4011      	ands	r1, r2
 8002c74:	f8c7 1608 	str.w	r1, [r7, #1544]	@ 0x608
 8002c78:	f8d7 1614 	ldr.w	r1, [r7, #1556]	@ 0x614
 8002c7c:	400b      	ands	r3, r1
 8002c7e:	f8c7 360c 	str.w	r3, [r7, #1548]	@ 0x60c
 8002c82:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c8a:	f8d7 1608 	ldr.w	r1, [r7, #1544]	@ 0x608
 8002c8e:	4051      	eors	r1, r2
 8002c90:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
 8002c94:	f8d7 160c 	ldr.w	r1, [r7, #1548]	@ 0x60c
 8002c98:	404b      	eors	r3, r1
 8002c9a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002c9e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002ca2:	f507 6132 	add.w	r1, r7, #2848	@ 0xb20
 8002ca6:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8002caa:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb2:	43d1      	mvns	r1, r2
 8002cb4:	f8c7 1600 	str.w	r1, [r7, #1536]	@ 0x600
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	f8c7 3604 	str.w	r3, [r7, #1540]	@ 0x604
 8002cbe:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc6:	f8d7 1600 	ldr.w	r1, [r7, #1536]	@ 0x600
 8002cca:	4011      	ands	r1, r2
 8002ccc:	f8c7 15f8 	str.w	r1, [r7, #1528]	@ 0x5f8
 8002cd0:	f8d7 1604 	ldr.w	r1, [r7, #1540]	@ 0x604
 8002cd4:	400b      	ands	r3, r1
 8002cd6:	f8c7 35fc 	str.w	r3, [r7, #1532]	@ 0x5fc
 8002cda:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce2:	f8d7 15f8 	ldr.w	r1, [r7, #1528]	@ 0x5f8
 8002ce6:	4051      	eors	r1, r2
 8002ce8:	f8c7 1100 	str.w	r1, [r7, #256]	@ 0x100
 8002cec:	f8d7 15fc 	ldr.w	r1, [r7, #1532]	@ 0x5fc
 8002cf0:	404b      	eors	r3, r1
 8002cf2:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002cf6:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002cfa:	f607 3118 	addw	r1, r7, #2840	@ 0xb18
 8002cfe:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8002d02:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	43d1      	mvns	r1, r2
 8002d0c:	f8c7 15f0 	str.w	r1, [r7, #1520]	@ 0x5f0
 8002d10:	43db      	mvns	r3, r3
 8002d12:	f8c7 35f4 	str.w	r3, [r7, #1524]	@ 0x5f4
 8002d16:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f8d7 15f0 	ldr.w	r1, [r7, #1520]	@ 0x5f0
 8002d22:	4011      	ands	r1, r2
 8002d24:	f8c7 15e8 	str.w	r1, [r7, #1512]	@ 0x5e8
 8002d28:	f8d7 15f4 	ldr.w	r1, [r7, #1524]	@ 0x5f4
 8002d2c:	400b      	ands	r3, r1
 8002d2e:	f8c7 35ec 	str.w	r3, [r7, #1516]	@ 0x5ec
 8002d32:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8002d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d3a:	f8d7 15e8 	ldr.w	r1, [r7, #1512]	@ 0x5e8
 8002d3e:	4051      	eors	r1, r2
 8002d40:	f8c7 10f8 	str.w	r1, [r7, #248]	@ 0xf8
 8002d44:	f8d7 15ec 	ldr.w	r1, [r7, #1516]	@ 0x5ec
 8002d48:	404b      	eors	r3, r1
 8002d4a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002d4e:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	@ 0xf8
 8002d52:	f507 6131 	add.w	r1, r7, #2832	@ 0xb10
 8002d56:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 8002d5a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002d5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d62:	43d1      	mvns	r1, r2
 8002d64:	f8c7 15e0 	str.w	r1, [r7, #1504]	@ 0x5e0
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	f8c7 35e4 	str.w	r3, [r7, #1508]	@ 0x5e4
 8002d6e:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d76:	f8d7 15e0 	ldr.w	r1, [r7, #1504]	@ 0x5e0
 8002d7a:	4011      	ands	r1, r2
 8002d7c:	f8c7 15d8 	str.w	r1, [r7, #1496]	@ 0x5d8
 8002d80:	f8d7 15e4 	ldr.w	r1, [r7, #1508]	@ 0x5e4
 8002d84:	400b      	ands	r3, r1
 8002d86:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 8002d8a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8002d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d92:	f8d7 15d8 	ldr.w	r1, [r7, #1496]	@ 0x5d8
 8002d96:	4051      	eors	r1, r2
 8002d98:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 8002d9c:	f8d7 15dc 	ldr.w	r1, [r7, #1500]	@ 0x5dc
 8002da0:	404b      	eors	r3, r1
 8002da2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002da6:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	@ 0xf0
 8002daa:	f607 3108 	addw	r1, r7, #2824	@ 0xb08
 8002dae:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8002db2:	f507 6324 	add.w	r3, r7, #2624	@ 0xa40
 8002db6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dba:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8002dbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc2:	ea80 0602 	eor.w	r6, r0, r2
 8002dc6:	f8c7 60e8 	str.w	r6, [r7, #232]	@ 0xe8
 8002dca:	404b      	eors	r3, r1
 8002dcc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002dd0:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	@ 0xe8
 8002dd4:	f507 6124 	add.w	r1, r7, #2624	@ 0xa40
 8002dd8:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8002ddc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002de0:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8002de4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002de8:	f5a3 71a2 	sub.w	r1, r3, #324	@ 0x144
 8002dec:	6803      	ldr	r3, [r0, #0]
 8002dee:	095a      	lsrs	r2, r3, #5
 8002df0:	680b      	ldr	r3, [r1, #0]
 8002df2:	06db      	lsls	r3, r3, #27
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002dfa:	680b      	ldr	r3, [r1, #0]
 8002dfc:	095a      	lsrs	r2, r3, #5
 8002dfe:	6803      	ldr	r3, [r0, #0]
 8002e00:	06db      	lsls	r3, r3, #27
 8002e02:	4313      	orrs	r3, r2
 8002e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002e08:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8002e0c:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 8002e10:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 8002e14:	f607 2338 	addw	r3, r7, #2616	@ 0xa38
 8002e18:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e1c:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 8002e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e24:	ea80 0602 	eor.w	r6, r0, r2
 8002e28:	f8c7 60d8 	str.w	r6, [r7, #216]	@ 0xd8
 8002e2c:	404b      	eors	r3, r1
 8002e2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002e32:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	@ 0xd8
 8002e36:	f607 2138 	addw	r1, r7, #2616	@ 0xa38
 8002e3a:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 8002e3e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002e42:	f5a3 70a6 	sub.w	r0, r3, #332	@ 0x14c
 8002e46:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002e4a:	f5a3 71a8 	sub.w	r1, r3, #336	@ 0x150
 8002e4e:	6803      	ldr	r3, [r0, #0]
 8002e50:	011a      	lsls	r2, r3, #4
 8002e52:	680b      	ldr	r3, [r1, #0]
 8002e54:	0f1b      	lsrs	r3, r3, #28
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002e5c:	680b      	ldr	r3, [r1, #0]
 8002e5e:	011a      	lsls	r2, r3, #4
 8002e60:	6803      	ldr	r3, [r0, #0]
 8002e62:	0f1b      	lsrs	r3, r3, #28
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002e6a:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	@ 0xd0
 8002e6e:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8002e72:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 8002e76:	f607 2308 	addw	r3, r7, #2568	@ 0xa08
 8002e7a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7e:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 8002e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e86:	ea80 0602 	eor.w	r6, r0, r2
 8002e8a:	f8c7 60c8 	str.w	r6, [r7, #200]	@ 0xc8
 8002e8e:	404b      	eors	r3, r1
 8002e90:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e94:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	@ 0xc8
 8002e98:	f607 2108 	addw	r1, r7, #2568	@ 0xa08
 8002e9c:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8002ea0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002ea4:	f5a3 70c0 	sub.w	r0, r3, #384	@ 0x180
 8002ea8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002eac:	f5a3 71be 	sub.w	r1, r3, #380	@ 0x17c
 8002eb0:	6803      	ldr	r3, [r0, #0]
 8002eb2:	0d9a      	lsrs	r2, r3, #22
 8002eb4:	680b      	ldr	r3, [r1, #0]
 8002eb6:	029b      	lsls	r3, r3, #10
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002ebe:	680b      	ldr	r3, [r1, #0]
 8002ec0:	0d9a      	lsrs	r2, r3, #22
 8002ec2:	6803      	ldr	r3, [r0, #0]
 8002ec4:	029b      	lsls	r3, r3, #10
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ecc:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	@ 0xc0
 8002ed0:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 8002ed4:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 8002ed8:	f607 13d8 	addw	r3, r7, #2520	@ 0x9d8
 8002edc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ee0:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 8002ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee8:	ea80 0602 	eor.w	r6, r0, r2
 8002eec:	f8c7 60b8 	str.w	r6, [r7, #184]	@ 0xb8
 8002ef0:	404b      	eors	r3, r1
 8002ef2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ef6:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	@ 0xb8
 8002efa:	f607 11d8 	addw	r1, r7, #2520	@ 0x9d8
 8002efe:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 8002f02:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002f06:	f5a3 70d8 	sub.w	r0, r3, #432	@ 0x1b0
 8002f0a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002f0e:	f5a3 71d6 	sub.w	r1, r3, #428	@ 0x1ac
 8002f12:	6803      	ldr	r3, [r0, #0]
 8002f14:	0c5a      	lsrs	r2, r3, #17
 8002f16:	680b      	ldr	r3, [r1, #0]
 8002f18:	03db      	lsls	r3, r3, #15
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002f20:	680b      	ldr	r3, [r1, #0]
 8002f22:	0c5a      	lsrs	r2, r3, #17
 8002f24:	6803      	ldr	r3, [r0, #0]
 8002f26:	03db      	lsls	r3, r3, #15
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002f2e:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	@ 0xb0
 8002f32:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 8002f36:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 8002f3a:	f607 13a8 	addw	r3, r7, #2472	@ 0x9a8
 8002f3e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002f42:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	ea80 0602 	eor.w	r6, r0, r2
 8002f4e:	f8c7 60a8 	str.w	r6, [r7, #168]	@ 0xa8
 8002f52:	404b      	eors	r3, r1
 8002f54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002f58:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	@ 0xa8
 8002f5c:	f607 11a8 	addw	r1, r7, #2472	@ 0x9a8
 8002f60:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 8002f64:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002f68:	f5a3 70ee 	sub.w	r0, r3, #476	@ 0x1dc
 8002f6c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8002f70:	f5a3 71f0 	sub.w	r1, r3, #480	@ 0x1e0
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	061a      	lsls	r2, r3, #24
 8002f78:	680b      	ldr	r3, [r1, #0]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f82:	680b      	ldr	r3, [r1, #0]
 8002f84:	061a      	lsls	r2, r3, #24
 8002f86:	6803      	ldr	r3, [r0, #0]
 8002f88:	0a1b      	lsrs	r3, r3, #8
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8002f90:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002f94:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 8002f98:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 8002f9c:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8002fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa4:	43d1      	mvns	r1, r2
 8002fa6:	f8c7 15d0 	str.w	r1, [r7, #1488]	@ 0x5d0
 8002faa:	43db      	mvns	r3, r3
 8002fac:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
 8002fb0:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb8:	f8d7 15d0 	ldr.w	r1, [r7, #1488]	@ 0x5d0
 8002fbc:	4011      	ands	r1, r2
 8002fbe:	f8c7 15c8 	str.w	r1, [r7, #1480]	@ 0x5c8
 8002fc2:	f8d7 15d4 	ldr.w	r1, [r7, #1492]	@ 0x5d4
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
 8002fcc:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f8d7 15c8 	ldr.w	r1, [r7, #1480]	@ 0x5c8
 8002fd8:	4051      	eors	r1, r2
 8002fda:	f8c7 1098 	str.w	r1, [r7, #152]	@ 0x98
 8002fde:	f8d7 15cc 	ldr.w	r1, [r7, #1484]	@ 0x5cc
 8002fe2:	404b      	eors	r3, r1
 8002fe4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002fe8:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002fec:	f507 6130 	add.w	r1, r7, #2816	@ 0xb00
 8002ff0:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 8002ff4:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8002ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ffc:	43d1      	mvns	r1, r2
 8002ffe:	f8c7 15c0 	str.w	r1, [r7, #1472]	@ 0x5c0
 8003002:	43db      	mvns	r3, r3
 8003004:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4
 8003008:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800300c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003010:	f8d7 15c0 	ldr.w	r1, [r7, #1472]	@ 0x5c0
 8003014:	4011      	ands	r1, r2
 8003016:	f8c7 15b8 	str.w	r1, [r7, #1464]	@ 0x5b8
 800301a:	f8d7 15c4 	ldr.w	r1, [r7, #1476]	@ 0x5c4
 800301e:	400b      	ands	r3, r1
 8003020:	f8c7 35bc 	str.w	r3, [r7, #1468]	@ 0x5bc
 8003024:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f8d7 15b8 	ldr.w	r1, [r7, #1464]	@ 0x5b8
 8003030:	4051      	eors	r1, r2
 8003032:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 8003036:	f8d7 15bc 	ldr.w	r1, [r7, #1468]	@ 0x5bc
 800303a:	404b      	eors	r3, r1
 800303c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003040:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8003044:	f607 21f8 	addw	r1, r7, #2808	@ 0xaf8
 8003048:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 800304c:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 8003050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003054:	43d1      	mvns	r1, r2
 8003056:	f8c7 15b0 	str.w	r1, [r7, #1456]	@ 0x5b0
 800305a:	43db      	mvns	r3, r3
 800305c:	f8c7 35b4 	str.w	r3, [r7, #1460]	@ 0x5b4
 8003060:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	f8d7 15b0 	ldr.w	r1, [r7, #1456]	@ 0x5b0
 800306c:	4011      	ands	r1, r2
 800306e:	f8c7 15a8 	str.w	r1, [r7, #1448]	@ 0x5a8
 8003072:	f8d7 15b4 	ldr.w	r1, [r7, #1460]	@ 0x5b4
 8003076:	400b      	ands	r3, r1
 8003078:	f8c7 35ac 	str.w	r3, [r7, #1452]	@ 0x5ac
 800307c:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f8d7 15a8 	ldr.w	r1, [r7, #1448]	@ 0x5a8
 8003088:	4051      	eors	r1, r2
 800308a:	f8c7 1088 	str.w	r1, [r7, #136]	@ 0x88
 800308e:	f8d7 15ac 	ldr.w	r1, [r7, #1452]	@ 0x5ac
 8003092:	404b      	eors	r3, r1
 8003094:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003098:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800309c:	f507 612f 	add.w	r1, r7, #2800	@ 0xaf0
 80030a0:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 80030a4:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80030a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ac:	43d1      	mvns	r1, r2
 80030ae:	f8c7 15a0 	str.w	r1, [r7, #1440]	@ 0x5a0
 80030b2:	43db      	mvns	r3, r3
 80030b4:	f8c7 35a4 	str.w	r3, [r7, #1444]	@ 0x5a4
 80030b8:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	f8d7 15a0 	ldr.w	r1, [r7, #1440]	@ 0x5a0
 80030c4:	4011      	ands	r1, r2
 80030c6:	f8c7 1598 	str.w	r1, [r7, #1432]	@ 0x598
 80030ca:	f8d7 15a4 	ldr.w	r1, [r7, #1444]	@ 0x5a4
 80030ce:	400b      	ands	r3, r1
 80030d0:	f8c7 359c 	str.w	r3, [r7, #1436]	@ 0x59c
 80030d4:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80030d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030dc:	f8d7 1598 	ldr.w	r1, [r7, #1432]	@ 0x598
 80030e0:	4051      	eors	r1, r2
 80030e2:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 80030e6:	f8d7 159c 	ldr.w	r1, [r7, #1436]	@ 0x59c
 80030ea:	404b      	eors	r3, r1
 80030ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80030f0:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80030f4:	f607 21e8 	addw	r1, r7, #2792	@ 0xae8
 80030f8:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 80030fc:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003104:	43d1      	mvns	r1, r2
 8003106:	f8c7 1590 	str.w	r1, [r7, #1424]	@ 0x590
 800310a:	43db      	mvns	r3, r3
 800310c:	f8c7 3594 	str.w	r3, [r7, #1428]	@ 0x594
 8003110:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003118:	f8d7 1590 	ldr.w	r1, [r7, #1424]	@ 0x590
 800311c:	4011      	ands	r1, r2
 800311e:	f8c7 1588 	str.w	r1, [r7, #1416]	@ 0x588
 8003122:	f8d7 1594 	ldr.w	r1, [r7, #1428]	@ 0x594
 8003126:	400b      	ands	r3, r1
 8003128:	f8c7 358c 	str.w	r3, [r7, #1420]	@ 0x58c
 800312c:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f8d7 1588 	ldr.w	r1, [r7, #1416]	@ 0x588
 8003138:	4051      	eors	r1, r2
 800313a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800313c:	f8d7 158c 	ldr.w	r1, [r7, #1420]	@ 0x58c
 8003140:	404b      	eors	r3, r1
 8003142:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003144:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003148:	f507 612e 	add.w	r1, r7, #2784	@ 0xae0
 800314c:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 8003150:	f507 6325 	add.w	r3, r7, #2640	@ 0xa50
 8003154:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003158:	f607 2378 	addw	r3, r7, #2680	@ 0xa78
 800315c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003160:	ea80 0602 	eor.w	r6, r0, r2
 8003164:	673e      	str	r6, [r7, #112]	@ 0x70
 8003166:	404b      	eors	r3, r1
 8003168:	677b      	str	r3, [r7, #116]	@ 0x74
 800316a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800316e:	f507 6125 	add.w	r1, r7, #2640	@ 0xa50
 8003172:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 8003176:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800317a:	f5a3 709a 	sub.w	r0, r3, #308	@ 0x134
 800317e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003182:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8003186:	6803      	ldr	r3, [r0, #0]
 8003188:	079a      	lsls	r2, r3, #30
 800318a:	680b      	ldr	r3, [r1, #0]
 800318c:	089b      	lsrs	r3, r3, #2
 800318e:	4313      	orrs	r3, r2
 8003190:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003192:	680b      	ldr	r3, [r1, #0]
 8003194:	079a      	lsls	r2, r3, #30
 8003196:	6803      	ldr	r3, [r0, #0]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	4313      	orrs	r3, r2
 800319c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800319e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80031a2:	f507 612b 	add.w	r1, r7, #2736	@ 0xab0
 80031a6:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 80031aa:	f507 6322 	add.w	r3, r7, #2592	@ 0xa20
 80031ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031b2:	f507 6327 	add.w	r3, r7, #2672	@ 0xa70
 80031b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ba:	ea80 0602 	eor.w	r6, r0, r2
 80031be:	663e      	str	r6, [r7, #96]	@ 0x60
 80031c0:	404b      	eors	r3, r1
 80031c2:	667b      	str	r3, [r7, #100]	@ 0x64
 80031c4:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 80031c8:	f507 6122 	add.w	r1, r7, #2592	@ 0xa20
 80031cc:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 80031d0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80031d4:	f5a3 70b2 	sub.w	r0, r3, #356	@ 0x164
 80031d8:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80031dc:	f5a3 71b4 	sub.w	r1, r3, #360	@ 0x168
 80031e0:	6803      	ldr	r3, [r0, #0]
 80031e2:	05da      	lsls	r2, r3, #23
 80031e4:	680b      	ldr	r3, [r1, #0]
 80031e6:	0a5b      	lsrs	r3, r3, #9
 80031e8:	4313      	orrs	r3, r2
 80031ea:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031ec:	680b      	ldr	r3, [r1, #0]
 80031ee:	05da      	lsls	r2, r3, #23
 80031f0:	6803      	ldr	r3, [r0, #0]
 80031f2:	0a5b      	lsrs	r3, r3, #9
 80031f4:	4313      	orrs	r3, r2
 80031f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80031f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80031fc:	f607 21a8 	addw	r1, r7, #2728	@ 0xaa8
 8003200:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8003204:	f507 631f 	add.w	r3, r7, #2544	@ 0x9f0
 8003208:	e9d3 0100 	ldrd	r0, r1, [r3]
 800320c:	f607 2368 	addw	r3, r7, #2664	@ 0xa68
 8003210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003214:	ea80 0602 	eor.w	r6, r0, r2
 8003218:	653e      	str	r6, [r7, #80]	@ 0x50
 800321a:	404b      	eors	r3, r1
 800321c:	657b      	str	r3, [r7, #84]	@ 0x54
 800321e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003222:	f507 611f 	add.w	r1, r7, #2544	@ 0x9f0
 8003226:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 800322a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800322e:	f5a3 70ca 	sub.w	r0, r3, #404	@ 0x194
 8003232:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003236:	f5a3 71cc 	sub.w	r1, r3, #408	@ 0x198
 800323a:	6803      	ldr	r3, [r0, #0]
 800323c:	01da      	lsls	r2, r3, #7
 800323e:	680b      	ldr	r3, [r1, #0]
 8003240:	0e5b      	lsrs	r3, r3, #25
 8003242:	4313      	orrs	r3, r2
 8003244:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003246:	680b      	ldr	r3, [r1, #0]
 8003248:	01da      	lsls	r2, r3, #7
 800324a:	6803      	ldr	r3, [r0, #0]
 800324c:	0e5b      	lsrs	r3, r3, #25
 800324e:	4313      	orrs	r3, r2
 8003250:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003252:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003256:	f507 612a 	add.w	r1, r7, #2720	@ 0xaa0
 800325a:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 800325e:	f607 13e8 	addw	r3, r7, #2536	@ 0x9e8
 8003262:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003266:	f607 2388 	addw	r3, r7, #2696	@ 0xa88
 800326a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800326e:	ea80 0602 	eor.w	r6, r0, r2
 8003272:	643e      	str	r6, [r7, #64]	@ 0x40
 8003274:	404b      	eors	r3, r1
 8003276:	647b      	str	r3, [r7, #68]	@ 0x44
 8003278:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800327c:	f607 11e8 	addw	r1, r7, #2536	@ 0x9e8
 8003280:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 8003284:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003288:	f5a3 70ce 	sub.w	r0, r3, #412	@ 0x19c
 800328c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003290:	f5a3 71d0 	sub.w	r1, r3, #416	@ 0x1a0
 8003294:	6803      	ldr	r3, [r0, #0]
 8003296:	025a      	lsls	r2, r3, #9
 8003298:	680b      	ldr	r3, [r1, #0]
 800329a:	0ddb      	lsrs	r3, r3, #23
 800329c:	4313      	orrs	r3, r2
 800329e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032a0:	680b      	ldr	r3, [r1, #0]
 80032a2:	025a      	lsls	r2, r3, #9
 80032a4:	6803      	ldr	r3, [r0, #0]
 80032a6:	0ddb      	lsrs	r3, r3, #23
 80032a8:	4313      	orrs	r3, r2
 80032aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80032ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80032b0:	f607 2198 	addw	r1, r7, #2712	@ 0xa98
 80032b4:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 80032b8:	f607 13b8 	addw	r3, r7, #2488	@ 0x9b8
 80032bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032c0:	f507 6328 	add.w	r3, r7, #2688	@ 0xa80
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	ea80 0602 	eor.w	r6, r0, r2
 80032cc:	633e      	str	r6, [r7, #48]	@ 0x30
 80032ce:	404b      	eors	r3, r1
 80032d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80032d2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80032d6:	f607 11b8 	addw	r1, r7, #2488	@ 0x9b8
 80032da:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 80032de:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80032e2:	f5a3 70e8 	sub.w	r0, r3, #464	@ 0x1d0
 80032e6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80032ea:	f5a3 71e6 	sub.w	r1, r3, #460	@ 0x1cc
 80032ee:	6803      	ldr	r3, [r0, #0]
 80032f0:	0f9a      	lsrs	r2, r3, #30
 80032f2:	680b      	ldr	r3, [r1, #0]
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4313      	orrs	r3, r2
 80032f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032fa:	680b      	ldr	r3, [r1, #0]
 80032fc:	0f9a      	lsrs	r2, r3, #30
 80032fe:	6803      	ldr	r3, [r0, #0]
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4313      	orrs	r3, r2
 8003304:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003306:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800330a:	f507 6129 	add.w	r1, r7, #2704	@ 0xa90
 800330e:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 8003312:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 8003316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331a:	43d1      	mvns	r1, r2
 800331c:	f8c7 1580 	str.w	r1, [r7, #1408]	@ 0x580
 8003320:	43db      	mvns	r3, r3
 8003322:	f8c7 3584 	str.w	r3, [r7, #1412]	@ 0x584
 8003326:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800332a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332e:	f8d7 1580 	ldr.w	r1, [r7, #1408]	@ 0x580
 8003332:	4011      	ands	r1, r2
 8003334:	f8c7 1578 	str.w	r1, [r7, #1400]	@ 0x578
 8003338:	f8d7 1584 	ldr.w	r1, [r7, #1412]	@ 0x584
 800333c:	400b      	ands	r3, r1
 800333e:	f8c7 357c 	str.w	r3, [r7, #1404]	@ 0x57c
 8003342:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800334a:	f8d7 1578 	ldr.w	r1, [r7, #1400]	@ 0x578
 800334e:	4051      	eors	r1, r2
 8003350:	6239      	str	r1, [r7, #32]
 8003352:	f8d7 157c 	ldr.w	r1, [r7, #1404]	@ 0x57c
 8003356:	404b      	eors	r3, r1
 8003358:	627b      	str	r3, [r7, #36]	@ 0x24
 800335a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800335e:	f607 21d8 	addw	r1, r7, #2776	@ 0xad8
 8003362:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 8003366:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 800336a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336e:	43d1      	mvns	r1, r2
 8003370:	f8c7 1570 	str.w	r1, [r7, #1392]	@ 0x570
 8003374:	43db      	mvns	r3, r3
 8003376:	f8c7 3574 	str.w	r3, [r7, #1396]	@ 0x574
 800337a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f8d7 1570 	ldr.w	r1, [r7, #1392]	@ 0x570
 8003386:	4011      	ands	r1, r2
 8003388:	f8c7 1568 	str.w	r1, [r7, #1384]	@ 0x568
 800338c:	f8d7 1574 	ldr.w	r1, [r7, #1396]	@ 0x574
 8003390:	400b      	ands	r3, r1
 8003392:	f8c7 356c 	str.w	r3, [r7, #1388]	@ 0x56c
 8003396:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f8d7 1568 	ldr.w	r1, [r7, #1384]	@ 0x568
 80033a2:	4051      	eors	r1, r2
 80033a4:	61b9      	str	r1, [r7, #24]
 80033a6:	f8d7 156c 	ldr.w	r1, [r7, #1388]	@ 0x56c
 80033aa:	404b      	eors	r3, r1
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033b2:	f507 612d 	add.w	r1, r7, #2768	@ 0xad0
 80033b6:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 80033ba:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 80033be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c2:	43d1      	mvns	r1, r2
 80033c4:	f8c7 1560 	str.w	r1, [r7, #1376]	@ 0x560
 80033c8:	43db      	mvns	r3, r3
 80033ca:	f8c7 3564 	str.w	r3, [r7, #1380]	@ 0x564
 80033ce:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 80033d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033d6:	f8d7 1560 	ldr.w	r1, [r7, #1376]	@ 0x560
 80033da:	4011      	ands	r1, r2
 80033dc:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 80033e0:	f8d7 1564 	ldr.w	r1, [r7, #1380]	@ 0x564
 80033e4:	400b      	ands	r3, r1
 80033e6:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 80033ea:	f507 632a 	add.w	r3, r7, #2720	@ 0xaa0
 80033ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033f2:	f8d7 1558 	ldr.w	r1, [r7, #1368]	@ 0x558
 80033f6:	4051      	eors	r1, r2
 80033f8:	6139      	str	r1, [r7, #16]
 80033fa:	f8d7 155c 	ldr.w	r1, [r7, #1372]	@ 0x55c
 80033fe:	404b      	eors	r3, r1
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003406:	f607 21c8 	addw	r1, r7, #2760	@ 0xac8
 800340a:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 800340e:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 8003412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003416:	43d1      	mvns	r1, r2
 8003418:	f8c7 1550 	str.w	r1, [r7, #1360]	@ 0x550
 800341c:	43db      	mvns	r3, r3
 800341e:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8003422:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	f8d7 1550 	ldr.w	r1, [r7, #1360]	@ 0x550
 800342e:	ea01 0a02 	and.w	sl, r1, r2
 8003432:	f8d7 1554 	ldr.w	r1, [r7, #1364]	@ 0x554
 8003436:	ea01 0b03 	and.w	fp, r1, r3
 800343a:	f607 2398 	addw	r3, r7, #2712	@ 0xa98
 800343e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003442:	ea82 010a 	eor.w	r1, r2, sl
 8003446:	60b9      	str	r1, [r7, #8]
 8003448:	ea83 030b 	eor.w	r3, r3, fp
 800344c:	60fb      	str	r3, [r7, #12]
 800344e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003452:	f507 612c 	add.w	r1, r7, #2752	@ 0xac0
 8003456:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 800345a:	f507 632b 	add.w	r3, r7, #2736	@ 0xab0
 800345e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003462:	ea6f 0802 	mvn.w	r8, r2
 8003466:	ea6f 0903 	mvn.w	r9, r3
 800346a:	f607 23a8 	addw	r3, r7, #2728	@ 0xaa8
 800346e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003472:	ea08 0402 	and.w	r4, r8, r2
 8003476:	ea09 0503 	and.w	r5, r9, r3
 800347a:	f507 6329 	add.w	r3, r7, #2704	@ 0xa90
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	ea82 0104 	eor.w	r1, r2, r4
 8003486:	6039      	str	r1, [r7, #0]
 8003488:	406b      	eors	r3, r5
 800348a:	607b      	str	r3, [r7, #4]
 800348c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003490:	f607 21b8 	addw	r1, r7, #2744	@ 0xab8
 8003494:	e9c1 2300 	strd	r2, r3, [r1]
        for(round = 0; round < NROUNDS; round += 2) {
 8003498:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 800349c:	3302      	adds	r3, #2
 800349e:	f8c7 3b84 	str.w	r3, [r7, #2948]	@ 0xb84
 80034a2:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	@ 0xb84
 80034a6:	2b17      	cmp	r3, #23
 80034a8:	f77d aa04 	ble.w	80008b4 <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80034ac:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80034b0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034b4:	6819      	ldr	r1, [r3, #0]
 80034b6:	f607 3378 	addw	r3, r7, #2936	@ 0xb78
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 80034c2:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80034c6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f103 0108 	add.w	r1, r3, #8
 80034d0:	f507 6337 	add.w	r3, r7, #2928	@ 0xb70
 80034d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034d8:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 80034dc:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80034e0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f103 0110 	add.w	r1, r3, #16
 80034ea:	f607 3368 	addw	r3, r7, #2920	@ 0xb68
 80034ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f2:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 80034f6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80034fa:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f103 0118 	add.w	r1, r3, #24
 8003504:	f507 6336 	add.w	r3, r7, #2912	@ 0xb60
 8003508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350c:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 8003510:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003514:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f103 0120 	add.w	r1, r3, #32
 800351e:	f607 3358 	addw	r3, r7, #2904	@ 0xb58
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 800352a:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800352e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8003538:	f507 6335 	add.w	r3, r7, #2896	@ 0xb50
 800353c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003540:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 8003544:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003548:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8003552:	f607 3348 	addw	r3, r7, #2888	@ 0xb48
 8003556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800355a:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 800355e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003562:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800356c:	f507 6334 	add.w	r3, r7, #2880	@ 0xb40
 8003570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003574:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 8003578:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800357c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8003586:	f607 3338 	addw	r3, r7, #2872	@ 0xb38
 800358a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800358e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 8003592:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003596:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f103 0148 	add.w	r1, r3, #72	@ 0x48
 80035a0:	f507 6333 	add.w	r3, r7, #2864	@ 0xb30
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 80035ac:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80035b0:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80035ba:	f607 3328 	addw	r3, r7, #2856	@ 0xb28
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 80035c6:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80035ca:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f103 0158 	add.w	r1, r3, #88	@ 0x58
 80035d4:	f507 6332 	add.w	r3, r7, #2848	@ 0xb20
 80035d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035dc:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 80035e0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80035e4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f103 0160 	add.w	r1, r3, #96	@ 0x60
 80035ee:	f607 3318 	addw	r3, r7, #2840	@ 0xb18
 80035f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f6:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 80035fa:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80035fe:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8003608:	f507 6331 	add.w	r3, r7, #2832	@ 0xb10
 800360c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003610:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 8003614:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003618:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 8003622:	f607 3308 	addw	r3, r7, #2824	@ 0xb08
 8003626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362a:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 800362e:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003632:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800363c:	f507 6330 	add.w	r3, r7, #2816	@ 0xb00
 8003640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003644:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8003648:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800364c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f103 0180 	add.w	r1, r3, #128	@ 0x80
 8003656:	f607 23f8 	addw	r3, r7, #2808	@ 0xaf8
 800365a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365e:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8003662:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003666:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f103 0188 	add.w	r1, r3, #136	@ 0x88
 8003670:	f507 632f 	add.w	r3, r7, #2800	@ 0xaf0
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 800367c:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003680:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800368a:	f607 23e8 	addw	r3, r7, #2792	@ 0xae8
 800368e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003692:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8003696:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800369a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f103 0198 	add.w	r1, r3, #152	@ 0x98
 80036a4:	f507 632e 	add.w	r3, r7, #2784	@ 0xae0
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 80036b0:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80036b4:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f103 01a0 	add.w	r1, r3, #160	@ 0xa0
 80036be:	f607 23d8 	addw	r3, r7, #2776	@ 0xad8
 80036c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c6:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 80036ca:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80036ce:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f103 01a8 	add.w	r1, r3, #168	@ 0xa8
 80036d8:	f507 632d 	add.w	r3, r7, #2768	@ 0xad0
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 80036e4:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 80036e8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f103 01b0 	add.w	r1, r3, #176	@ 0xb0
 80036f2:	f607 23c8 	addw	r3, r7, #2760	@ 0xac8
 80036f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036fa:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 80036fe:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 8003702:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f103 01b8 	add.w	r1, r3, #184	@ 0xb8
 800370c:	f507 632c 	add.w	r3, r7, #2752	@ 0xac0
 8003710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003714:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8003718:	f607 3388 	addw	r3, r7, #2952	@ 0xb88
 800371c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f103 01c0 	add.w	r1, r3, #192	@ 0xc0
 8003726:	f607 23b8 	addw	r3, r7, #2744	@ 0xab8
 800372a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003732:	bf00      	nop
 8003734:	f607 3788 	addw	r7, r7, #2952	@ 0xb88
 8003738:	46bd      	mov	sp, r7
 800373a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800373e:	4770      	bx	lr

08003740 <keccak_absorb_once>:
static void keccak_absorb_once(uint64_t s[25],
                               unsigned int r,
                               const uint8_t *in,
                               size_t inlen,
                               uint8_t p)
{
 8003740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003744:	b092      	sub	sp, #72	@ 0x48
 8003746:	af00      	add	r7, sp, #0
 8003748:	63f8      	str	r0, [r7, #60]	@ 0x3c
 800374a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800374c:	637a      	str	r2, [r7, #52]	@ 0x34
 800374e:	633b      	str	r3, [r7, #48]	@ 0x30
  unsigned int i;

  for(i=0;i<25;i++)
 8003750:	2300      	movs	r3, #0
 8003752:	647b      	str	r3, [r7, #68]	@ 0x44
 8003754:	e00c      	b.n	8003770 <keccak_absorb_once+0x30>
    s[i] = 0;
 8003756:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003758:	00da      	lsls	r2, r3, #3
 800375a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800375c:	1899      	adds	r1, r3, r2
 800375e:	f04f 0200 	mov.w	r2, #0
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 800376a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800376c:	3301      	adds	r3, #1
 800376e:	647b      	str	r3, [r7, #68]	@ 0x44
 8003770:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003772:	2b18      	cmp	r3, #24
 8003774:	d9ef      	bls.n	8003756 <keccak_absorb_once+0x16>

  while(inlen >= r) {
 8003776:	e032      	b.n	80037de <keccak_absorb_once+0x9e>
    for(i=0;i<r/8;i++)
 8003778:	2300      	movs	r3, #0
 800377a:	647b      	str	r3, [r7, #68]	@ 0x44
 800377c:	e01f      	b.n	80037be <keccak_absorb_once+0x7e>
      s[i] ^= load64(in+8*i);
 800377e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003780:	00da      	lsls	r2, r3, #3
 8003782:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003784:	4413      	add	r3, r2
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc ff08 	bl	800059c <load64>
 800378c:	4604      	mov	r4, r0
 800378e:	460d      	mov	r5, r1
 8003790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003792:	00da      	lsls	r2, r3, #3
 8003794:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003796:	4413      	add	r3, r2
 8003798:	e9d3 0100 	ldrd	r0, r1, [r3]
 800379c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800379e:	00da      	lsls	r2, r3, #3
 80037a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a2:	4413      	add	r3, r2
 80037a4:	ea84 0200 	eor.w	r2, r4, r0
 80037a8:	623a      	str	r2, [r7, #32]
 80037aa:	ea85 0201 	eor.w	r2, r5, r1
 80037ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80037b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037b4:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<r/8;i++)
 80037b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ba:	3301      	adds	r3, #1
 80037bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	08da      	lsrs	r2, r3, #3
 80037c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d3da      	bcc.n	800377e <keccak_absorb_once+0x3e>
    in += r;
 80037c8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037cc:	4413      	add	r3, r2
 80037ce:	637b      	str	r3, [r7, #52]	@ 0x34
    inlen -= r;
 80037d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d4:	1ad3      	subs	r3, r2, r3
 80037d6:	633b      	str	r3, [r7, #48]	@ 0x30
    KeccakF1600_StatePermute(s);
 80037d8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80037da:	f7fc ff49 	bl	8000670 <KeccakF1600_StatePermute>
  while(inlen >= r) {
 80037de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d2c8      	bcs.n	8003778 <keccak_absorb_once+0x38>
  }

  for(i=0;i<inlen;i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80037ea:	e038      	b.n	800385e <keccak_absorb_once+0x11e>
    s[i/8] ^= (uint64_t)in[i] << 8*(i%8);
 80037ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037ee:	f023 0207 	bic.w	r2, r3, #7
 80037f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037f4:	4413      	add	r3, r2
 80037f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80037fa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80037fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fe:	4413      	add	r3, r2
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2200      	movs	r2, #0
 8003806:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003808:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800380a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	00d9      	lsls	r1, r3, #3
 8003812:	f1a1 0320 	sub.w	r3, r1, #32
 8003816:	f1c1 0220 	rsb	r2, r1, #32
 800381a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800381c:	fa00 fb01 	lsl.w	fp, r0, r1
 8003820:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003822:	fa00 f303 	lsl.w	r3, r0, r3
 8003826:	ea4b 0b03 	orr.w	fp, fp, r3
 800382a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800382c:	fa23 f202 	lsr.w	r2, r3, r2
 8003830:	ea4b 0b02 	orr.w	fp, fp, r2
 8003834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003836:	fa03 fa01 	lsl.w	sl, r3, r1
 800383a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800383c:	f023 0207 	bic.w	r2, r3, #7
 8003840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003842:	4413      	add	r3, r2
 8003844:	ea84 020a 	eor.w	r2, r4, sl
 8003848:	61ba      	str	r2, [r7, #24]
 800384a:	ea85 020b 	eor.w	r2, r5, fp
 800384e:	61fa      	str	r2, [r7, #28]
 8003850:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003854:	e9c3 1200 	strd	r1, r2, [r3]
  for(i=0;i<inlen;i++)
 8003858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800385a:	3301      	adds	r3, #1
 800385c:	647b      	str	r3, [r7, #68]	@ 0x44
 800385e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003862:	429a      	cmp	r2, r3
 8003864:	d3c2      	bcc.n	80037ec <keccak_absorb_once+0xac>

  s[i/8] ^= (uint64_t)p << 8*(i%8);
 8003866:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003868:	f023 0307 	bic.w	r3, r3, #7
 800386c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800386e:	4413      	add	r3, r2
 8003870:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003874:	f897 3068 	ldrb.w	r3, [r7, #104]	@ 0x68
 8003878:	2200      	movs	r2, #0
 800387a:	613b      	str	r3, [r7, #16]
 800387c:	617a      	str	r2, [r7, #20]
 800387e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003880:	f003 0307 	and.w	r3, r3, #7
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	f1a3 0420 	sub.w	r4, r3, #32
 800388a:	f1c3 0220 	rsb	r2, r3, #32
 800388e:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003892:	465d      	mov	r5, fp
 8003894:	fa05 f903 	lsl.w	r9, r5, r3
 8003898:	4655      	mov	r5, sl
 800389a:	fa05 f404 	lsl.w	r4, r5, r4
 800389e:	ea49 0904 	orr.w	r9, r9, r4
 80038a2:	4654      	mov	r4, sl
 80038a4:	fa24 f202 	lsr.w	r2, r4, r2
 80038a8:	ea49 0902 	orr.w	r9, r9, r2
 80038ac:	4652      	mov	r2, sl
 80038ae:	fa02 f803 	lsl.w	r8, r2, r3
 80038b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80038b4:	f023 0307 	bic.w	r3, r3, #7
 80038b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038ba:	4413      	add	r3, r2
 80038bc:	ea80 0208 	eor.w	r2, r0, r8
 80038c0:	60ba      	str	r2, [r7, #8]
 80038c2:	ea81 0209 	eor.w	r2, r1, r9
 80038c6:	60fa      	str	r2, [r7, #12]
 80038c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80038cc:	e9c3 1200 	strd	r1, r2, [r3]
  s[(r-1)/8] ^= 1ULL << 63;
 80038d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038d2:	3b01      	subs	r3, #1
 80038d4:	f023 0307 	bic.w	r3, r3, #7
 80038d8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80038da:	4413      	add	r3, r2
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80038e2:	3901      	subs	r1, #1
 80038e4:	f021 0107 	bic.w	r1, r1, #7
 80038e8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80038ea:	4401      	add	r1, r0
 80038ec:	603a      	str	r2, [r7, #0]
 80038ee:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80038f2:	607b      	str	r3, [r7, #4]
 80038f4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80038f8:	e9c1 3400 	strd	r3, r4, [r1]
}
 80038fc:	bf00      	nop
 80038fe:	3748      	adds	r7, #72	@ 0x48
 8003900:	46bd      	mov	sp, r7
 8003902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003906 <sha3_512>:
* Arguments:   - uint8_t *h: pointer to output (64 bytes)
*              - const uint8_t *in: pointer to input
*              - size_t inlen: length of input in bytes
**************************************************/
void sha3_512(uint8_t h[64], const uint8_t *in, size_t inlen)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b0ba      	sub	sp, #232	@ 0xe8
 800390a:	af02      	add	r7, sp, #8
 800390c:	60f8      	str	r0, [r7, #12]
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
  unsigned int i;
  uint64_t s[25];

  keccak_absorb_once(s, SHA3_512_RATE, in, inlen, 0x06);
 8003912:	f107 0010 	add.w	r0, r7, #16
 8003916:	2306      	movs	r3, #6
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68ba      	ldr	r2, [r7, #8]
 800391e:	2148      	movs	r1, #72	@ 0x48
 8003920:	f7ff ff0e 	bl	8003740 <keccak_absorb_once>
  KeccakF1600_StatePermute(s);
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	4618      	mov	r0, r3
 800392a:	f7fc fea1 	bl	8000670 <KeccakF1600_StatePermute>
  for(i=0;i<8;i++)
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003934:	e014      	b.n	8003960 <sha3_512+0x5a>
    store64(h+8*i,s[i]);
 8003936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	18d1      	adds	r1, r2, r3
 8003940:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	33e0      	adds	r3, #224	@ 0xe0
 8003948:	443b      	add	r3, r7
 800394a:	3bd0      	subs	r3, #208	@ 0xd0
 800394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003950:	4608      	mov	r0, r1
 8003952:	f7fc fe60 	bl	8000616 <store64>
  for(i=0;i<8;i++)
 8003956:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800395a:	3301      	adds	r3, #1
 800395c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003960:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003964:	2b07      	cmp	r3, #7
 8003966:	d9e6      	bls.n	8003936 <sha3_512+0x30>
}
 8003968:	bf00      	nop
 800396a:	bf00      	nop
 800396c:	37e0      	adds	r7, #224	@ 0xe0
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	b29a      	uxth	r2, r3
 8003984:	f04f 33ff 	mov.w	r3, #4294967295
 8003988:	68b9      	ldr	r1, [r7, #8]
 800398a:	4804      	ldr	r0, [pc, #16]	@ (800399c <_write+0x28>)
 800398c:	f009 f94d 	bl	800cc2a <HAL_UART_Transmit>
    return len;
 8003990:	687b      	ldr	r3, [r7, #4]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	200001a8 	.word	0x200001a8

080039a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039a4:	f004 ff98 	bl	80088d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039a8:	f000 f814 	bl	80039d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039ac:	f000 f94e 	bl	8003c4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80039b0:	f000 f87a 	bl	8003aa8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80039b4:	f000 f8a6 	bl	8003b04 <MX_I2S3_Init>
  MX_SPI1_Init();
 80039b8:	f000 f8e8 	bl	8003b8c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80039bc:	f00c fede 	bl	801077c <MX_USB_HOST_Init>
  MX_RNG_Init();
 80039c0:	f000 f8d0 	bl	8003b64 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80039c4:	f000 f918 	bl	8003bf8 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_keccak();
 80039c8:	f004 fea4 	bl	8008714 <test_masked_keccak>
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80039cc:	f00c fefc 	bl	80107c8 <MX_USB_HOST_Process>
  {
 80039d0:	bf00      	nop
 80039d2:	e7f9      	b.n	80039c8 <main+0x28>

080039d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b094      	sub	sp, #80	@ 0x50
 80039d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039da:	f107 0320 	add.w	r3, r7, #32
 80039de:	2230      	movs	r2, #48	@ 0x30
 80039e0:	2100      	movs	r1, #0
 80039e2:	4618      	mov	r0, r3
 80039e4:	f00d fcb4 	bl	8011350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039e8:	f107 030c 	add.w	r3, r7, #12
 80039ec:	2200      	movs	r2, #0
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	605a      	str	r2, [r3, #4]
 80039f2:	609a      	str	r2, [r3, #8]
 80039f4:	60da      	str	r2, [r3, #12]
 80039f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039f8:	2300      	movs	r3, #0
 80039fa:	60bb      	str	r3, [r7, #8]
 80039fc:	4b28      	ldr	r3, [pc, #160]	@ (8003aa0 <SystemClock_Config+0xcc>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <SystemClock_Config+0xcc>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <SystemClock_Config+0xcc>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a14:	2300      	movs	r3, #0
 8003a16:	607b      	str	r3, [r7, #4]
 8003a18:	4b22      	ldr	r3, [pc, #136]	@ (8003aa4 <SystemClock_Config+0xd0>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a21      	ldr	r2, [pc, #132]	@ (8003aa4 <SystemClock_Config+0xd0>)
 8003a1e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	4b1f      	ldr	r3, [pc, #124]	@ (8003aa4 <SystemClock_Config+0xd0>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003a30:	2301      	movs	r3, #1
 8003a32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a34:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a38:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a3a:	2302      	movs	r3, #2
 8003a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a3e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003a44:	2308      	movs	r3, #8
 8003a46:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003a48:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8003a4c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a4e:	2302      	movs	r3, #2
 8003a50:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003a52:	2307      	movs	r3, #7
 8003a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a56:	f107 0320 	add.w	r3, r7, #32
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f008 f9b2 	bl	800bdc4 <HAL_RCC_OscConfig>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d001      	beq.n	8003a6a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003a66:	f000 f9ef 	bl	8003e48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a6a:	230f      	movs	r3, #15
 8003a6c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a72:	2300      	movs	r3, #0
 8003a74:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a76:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a7a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a7c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a80:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	2105      	movs	r1, #5
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f008 fc13 	bl	800c2b4 <HAL_RCC_ClockConfig>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d001      	beq.n	8003a98 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003a94:	f000 f9d8 	bl	8003e48 <Error_Handler>
  }
}
 8003a98:	bf00      	nop
 8003a9a:	3750      	adds	r7, #80	@ 0x50
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40007000 	.word	0x40007000

08003aa8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003aac:	4b12      	ldr	r3, [pc, #72]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003aae:	4a13      	ldr	r2, [pc, #76]	@ (8003afc <MX_I2C1_Init+0x54>)
 8003ab0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8003ab2:	4b11      	ldr	r3, [pc, #68]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ab4:	4a12      	ldr	r2, [pc, #72]	@ (8003b00 <MX_I2C1_Init+0x58>)
 8003ab6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ab8:	4b0f      	ldr	r3, [pc, #60]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003aba:	2200      	movs	r2, #0
 8003abc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003abe:	4b0e      	ldr	r3, [pc, #56]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ac6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003aca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003acc:	4b0a      	ldr	r3, [pc, #40]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003ad2:	4b09      	ldr	r3, [pc, #36]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ad8:	4b07      	ldr	r3, [pc, #28]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ada:	2200      	movs	r2, #0
 8003adc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ade:	4b06      	ldr	r3, [pc, #24]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ae4:	4804      	ldr	r0, [pc, #16]	@ (8003af8 <MX_I2C1_Init+0x50>)
 8003ae6:	f007 fb89 	bl	800b1fc <HAL_I2C_Init>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003af0:	f000 f9aa 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003af4:	bf00      	nop
 8003af6:	bd80      	pop	{r7, pc}
 8003af8:	200000a4 	.word	0x200000a4
 8003afc:	40005400 	.word	0x40005400
 8003b00:	000186a0 	.word	0x000186a0

08003b04 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8003b08:	4b13      	ldr	r3, [pc, #76]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b0a:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <MX_I2S3_Init+0x58>)
 8003b0c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003b0e:	4b12      	ldr	r3, [pc, #72]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b14:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8003b16:	4b10      	ldr	r3, [pc, #64]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003b22:	4b0d      	ldr	r3, [pc, #52]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b28:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003b2a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b2c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b60 <MX_I2S3_Init+0x5c>)
 8003b2e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8003b30:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b32:	2200      	movs	r2, #0
 8003b34:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003b36:	4b08      	ldr	r3, [pc, #32]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003b3c:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003b42:	4805      	ldr	r0, [pc, #20]	@ (8003b58 <MX_I2S3_Init+0x54>)
 8003b44:	f007 fc9e 	bl	800b484 <HAL_I2S_Init>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8003b4e:	f000 f97b 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	200000f8 	.word	0x200000f8
 8003b5c:	40003c00 	.word	0x40003c00
 8003b60:	00017700 	.word	0x00017700

08003b64 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003b68:	4b06      	ldr	r3, [pc, #24]	@ (8003b84 <MX_RNG_Init+0x20>)
 8003b6a:	4a07      	ldr	r2, [pc, #28]	@ (8003b88 <MX_RNG_Init+0x24>)
 8003b6c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003b6e:	4805      	ldr	r0, [pc, #20]	@ (8003b84 <MX_RNG_Init+0x20>)
 8003b70:	f008 ff02 	bl	800c978 <HAL_RNG_Init>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003b7a:	f000 f965 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003b7e:	bf00      	nop
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	20000140 	.word	0x20000140
 8003b88:	50060800 	.word	0x50060800

08003b8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003b90:	4b17      	ldr	r3, [pc, #92]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003b92:	4a18      	ldr	r2, [pc, #96]	@ (8003bf4 <MX_SPI1_Init+0x68>)
 8003b94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003b96:	4b16      	ldr	r3, [pc, #88]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003b98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003b9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003b9e:	4b14      	ldr	r3, [pc, #80]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003ba4:	4b12      	ldr	r3, [pc, #72]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003baa:	4b11      	ldr	r3, [pc, #68]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003bb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bbc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbe:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003bc4:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bca:	4b09      	ldr	r3, [pc, #36]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bcc:	2200      	movs	r2, #0
 8003bce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	4b07      	ldr	r3, [pc, #28]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bd6:	4b06      	ldr	r3, [pc, #24]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bd8:	220a      	movs	r2, #10
 8003bda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bdc:	4804      	ldr	r0, [pc, #16]	@ (8003bf0 <MX_SPI1_Init+0x64>)
 8003bde:	f008 ff4b 	bl	800ca78 <HAL_SPI_Init>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d001      	beq.n	8003bec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003be8:	f000 f92e 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003bec:	bf00      	nop
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	20000150 	.word	0x20000150
 8003bf4:	40013000 	.word	0x40013000

08003bf8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bfc:	4b11      	ldr	r3, [pc, #68]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003bfe:	4a12      	ldr	r2, [pc, #72]	@ (8003c48 <MX_USART2_UART_Init+0x50>)
 8003c00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003c02:	4b10      	ldr	r3, [pc, #64]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003c08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c0a:	4b0e      	ldr	r3, [pc, #56]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c10:	4b0c      	ldr	r3, [pc, #48]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c16:	4b0b      	ldr	r3, [pc, #44]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003c1c:	4b09      	ldr	r3, [pc, #36]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c1e:	220c      	movs	r2, #12
 8003c20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c22:	4b08      	ldr	r3, [pc, #32]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c28:	4b06      	ldr	r3, [pc, #24]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c2e:	4805      	ldr	r0, [pc, #20]	@ (8003c44 <MX_USART2_UART_Init+0x4c>)
 8003c30:	f008 ffab 	bl	800cb8a <HAL_UART_Init>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8003c3a:	f000 f905 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200001a8 	.word	0x200001a8
 8003c48:	40004400 	.word	0x40004400

08003c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08c      	sub	sp, #48	@ 0x30
 8003c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c52:	f107 031c 	add.w	r3, r7, #28
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	605a      	str	r2, [r3, #4]
 8003c5c:	609a      	str	r2, [r3, #8]
 8003c5e:	60da      	str	r2, [r3, #12]
 8003c60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
 8003c66:	4b72      	ldr	r3, [pc, #456]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c6a:	4a71      	ldr	r2, [pc, #452]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003c6c:	f043 0310 	orr.w	r3, r3, #16
 8003c70:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c72:	4b6f      	ldr	r3, [pc, #444]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c76:	f003 0310 	and.w	r3, r3, #16
 8003c7a:	61bb      	str	r3, [r7, #24]
 8003c7c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
 8003c82:	4b6b      	ldr	r3, [pc, #428]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c86:	4a6a      	ldr	r2, [pc, #424]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c8e:	4b68      	ldr	r3, [pc, #416]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c92:	f003 0304 	and.w	r3, r3, #4
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	613b      	str	r3, [r7, #16]
 8003c9e:	4b64      	ldr	r3, [pc, #400]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ca2:	4a63      	ldr	r2, [pc, #396]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003ca4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ca8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003caa:	4b61      	ldr	r3, [pc, #388]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cb2:	613b      	str	r3, [r7, #16]
 8003cb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	60fb      	str	r3, [r7, #12]
 8003cba:	4b5d      	ldr	r3, [pc, #372]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbe:	4a5c      	ldr	r2, [pc, #368]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cc0:	f043 0301 	orr.w	r3, r3, #1
 8003cc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc6:	4b5a      	ldr	r3, [pc, #360]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	60fb      	str	r3, [r7, #12]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
 8003cd6:	4b56      	ldr	r3, [pc, #344]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cda:	4a55      	ldr	r2, [pc, #340]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cdc:	f043 0302 	orr.w	r3, r3, #2
 8003ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce2:	4b53      	ldr	r3, [pc, #332]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	60bb      	str	r3, [r7, #8]
 8003cec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	607b      	str	r3, [r7, #4]
 8003cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	4a4e      	ldr	r2, [pc, #312]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003cf8:	f043 0308 	orr.w	r3, r3, #8
 8003cfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cfe:	4b4c      	ldr	r3, [pc, #304]	@ (8003e30 <MX_GPIO_Init+0x1e4>)
 8003d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	607b      	str	r3, [r7, #4]
 8003d08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2108      	movs	r1, #8
 8003d0e:	4849      	ldr	r0, [pc, #292]	@ (8003e34 <MX_GPIO_Init+0x1e8>)
 8003d10:	f005 f926 	bl	8008f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003d14:	2201      	movs	r2, #1
 8003d16:	2101      	movs	r1, #1
 8003d18:	4847      	ldr	r0, [pc, #284]	@ (8003e38 <MX_GPIO_Init+0x1ec>)
 8003d1a:	f005 f921 	bl	8008f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003d24:	4845      	ldr	r0, [pc, #276]	@ (8003e3c <MX_GPIO_Init+0x1f0>)
 8003d26:	f005 f91b 	bl	8008f60 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003d2a:	2308      	movs	r3, #8
 8003d2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d36:	2300      	movs	r3, #0
 8003d38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003d3a:	f107 031c 	add.w	r3, r7, #28
 8003d3e:	4619      	mov	r1, r3
 8003d40:	483c      	ldr	r0, [pc, #240]	@ (8003e34 <MX_GPIO_Init+0x1e8>)
 8003d42:	f004 ff71 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003d46:	2301      	movs	r3, #1
 8003d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d52:	2300      	movs	r3, #0
 8003d54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003d56:	f107 031c 	add.w	r3, r7, #28
 8003d5a:	4619      	mov	r1, r3
 8003d5c:	4836      	ldr	r0, [pc, #216]	@ (8003e38 <MX_GPIO_Init+0x1ec>)
 8003d5e:	f004 ff63 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003d62:	2308      	movs	r3, #8
 8003d64:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d66:	2302      	movs	r3, #2
 8003d68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d72:	2305      	movs	r3, #5
 8003d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003d76:	f107 031c 	add.w	r3, r7, #28
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	482e      	ldr	r0, [pc, #184]	@ (8003e38 <MX_GPIO_Init+0x1ec>)
 8003d7e:	f004 ff53 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003d82:	2301      	movs	r3, #1
 8003d84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003d86:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003d90:	f107 031c 	add.w	r3, r7, #28
 8003d94:	4619      	mov	r1, r3
 8003d96:	482a      	ldr	r0, [pc, #168]	@ (8003e40 <MX_GPIO_Init+0x1f4>)
 8003d98:	f004 ff46 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003da0:	2300      	movs	r3, #0
 8003da2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da4:	2300      	movs	r3, #0
 8003da6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003da8:	f107 031c 	add.w	r3, r7, #28
 8003dac:	4619      	mov	r1, r3
 8003dae:	4825      	ldr	r0, [pc, #148]	@ (8003e44 <MX_GPIO_Init+0x1f8>)
 8003db0:	f004 ff3a 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003db4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003db8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	2302      	movs	r3, #2
 8003dbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003dc6:	2305      	movs	r3, #5
 8003dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003dca:	f107 031c 	add.w	r3, r7, #28
 8003dce:	4619      	mov	r1, r3
 8003dd0:	481c      	ldr	r0, [pc, #112]	@ (8003e44 <MX_GPIO_Init+0x1f8>)
 8003dd2:	f004 ff29 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003dd6:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8003dda:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de0:	2300      	movs	r3, #0
 8003de2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003de4:	2300      	movs	r3, #0
 8003de6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003de8:	f107 031c 	add.w	r3, r7, #28
 8003dec:	4619      	mov	r1, r3
 8003dee:	4813      	ldr	r0, [pc, #76]	@ (8003e3c <MX_GPIO_Init+0x1f0>)
 8003df0:	f004 ff1a 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003df4:	2320      	movs	r3, #32
 8003df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003e00:	f107 031c 	add.w	r3, r7, #28
 8003e04:	4619      	mov	r1, r3
 8003e06:	480d      	ldr	r0, [pc, #52]	@ (8003e3c <MX_GPIO_Init+0x1f0>)
 8003e08:	f004 ff0e 	bl	8008c28 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003e10:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4804      	ldr	r0, [pc, #16]	@ (8003e34 <MX_GPIO_Init+0x1e8>)
 8003e22:	f004 ff01 	bl	8008c28 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003e26:	bf00      	nop
 8003e28:	3730      	adds	r7, #48	@ 0x30
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40023800 	.word	0x40023800
 8003e34:	40021000 	.word	0x40021000
 8003e38:	40020800 	.word	0x40020800
 8003e3c:	40020c00 	.word	0x40020c00
 8003e40:	40020000 	.word	0x40020000
 8003e44:	40020400 	.word	0x40020400

08003e48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003e4c:	b672      	cpsid	i
}
 8003e4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <Error_Handler+0x8>

08003e54 <masked_keccak>:
uint32_t random_uint32(void);
void masked_random_uniform16(uint16_t *output, size_t len);
uint16_t ct_less_than(uint16_t a, uint16_t b);


void masked_keccak(MaskedKeccakState *state) {
 8003e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e58:	f2ad 5dfc 	subw	sp, sp, #1532	@ 0x5fc
 8003e5c:	af04      	add	r7, sp, #16
 8003e5e:	f8c7 0564 	str.w	r0, [r7, #1380]	@ 0x564
  uint8_t x, y;
  for (int i = 0; i < NROUNDS; i++) {
 8003e62:	2300      	movs	r3, #0
 8003e64:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 8003e68:	f003 bbee 	b.w	8007648 <masked_keccak+0x37f4>
    // Sharewise implementation for Theta, Rho and phi
    for (int j = 0; j < MASKING_N; j++) {
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 8003e72:	f003 bad1 	b.w	8007418 <masked_keccak+0x35c4>
      uint64_t *a = &state->w[j][0];
 8003e76:	f8d7 25dc 	ldr.w	r2, [r7, #1500]	@ 0x5dc
 8003e7a:	23c8      	movs	r3, #200	@ 0xc8
 8003e7c:	fb03 f202 	mul.w	r2, r3, r2
 8003e80:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
 8003e84:	4413      	add	r3, r2
 8003e86:	f8c7 35c0 	str.w	r3, [r7, #1472]	@ 0x5c0
      uint64_t b[5];
      uint64_t t = 0;
 8003e8a:	f04f 0200 	mov.w	r2, #0
 8003e8e:	f04f 0300 	mov.w	r3, #0
 8003e92:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8003e96:	e9c1 2300 	strd	r2, r3, [r1]
      // Theta
      FOR5(x, 1, b[x] = 0; FOR5(y, 5, b[x] ^= a[x + y];))
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8003ea0:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	3388      	adds	r3, #136	@ 0x88
 8003ea8:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003eac:	4413      	add	r3, r2
 8003eae:	f1a3 0180 	sub.w	r1, r3, #128	@ 0x80
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	e9c1 2300 	strd	r2, r3, [r1]
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8003ec4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8003ec8:	00db      	lsls	r3, r3, #3
 8003eca:	3388      	adds	r3, #136	@ 0x88
 8003ecc:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003ed0:	4413      	add	r3, r2
 8003ed2:	3b80      	subs	r3, #128	@ 0x80
 8003ed4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003ed8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8003edc:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003ee0:	4413      	add	r3, r2
 8003ee2:	00da      	lsls	r2, r3, #3
 8003ee4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8003ee8:	4413      	add	r3, r2
 8003eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eee:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8003ef2:	ea84 0002 	eor.w	r0, r4, r2
 8003ef6:	f8c7 03e0 	str.w	r0, [r7, #992]	@ 0x3e0
 8003efa:	406b      	eors	r3, r5
 8003efc:	f8c7 33e4 	str.w	r3, [r7, #996]	@ 0x3e4
 8003f00:	00cb      	lsls	r3, r1, #3
 8003f02:	3388      	adds	r3, #136	@ 0x88
 8003f04:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003f08:	4413      	add	r3, r2
 8003f0a:	3b80      	subs	r3, #128	@ 0x80
 8003f0c:	e9d7 12f8 	ldrd	r1, r2, [r7, #992]	@ 0x3e0
 8003f10:	e9c3 1200 	strd	r1, r2, [r3]
 8003f14:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003f18:	3305      	adds	r3, #5
 8003f1a:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8003f1e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8003f22:	00db      	lsls	r3, r3, #3
 8003f24:	3388      	adds	r3, #136	@ 0x88
 8003f26:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003f2a:	4413      	add	r3, r2
 8003f2c:	3b80      	subs	r3, #128	@ 0x80
 8003f2e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f32:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8003f36:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003f3a:	4413      	add	r3, r2
 8003f3c:	00da      	lsls	r2, r3, #3
 8003f3e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8003f42:	4413      	add	r3, r2
 8003f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f48:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8003f4c:	ea84 0002 	eor.w	r0, r4, r2
 8003f50:	f8c7 03d8 	str.w	r0, [r7, #984]	@ 0x3d8
 8003f54:	406b      	eors	r3, r5
 8003f56:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8003f5a:	00cb      	lsls	r3, r1, #3
 8003f5c:	3388      	adds	r3, #136	@ 0x88
 8003f5e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003f62:	4413      	add	r3, r2
 8003f64:	3b80      	subs	r3, #128	@ 0x80
 8003f66:	e9d7 12f6 	ldrd	r1, r2, [r7, #984]	@ 0x3d8
 8003f6a:	e9c3 1200 	strd	r1, r2, [r3]
 8003f6e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003f72:	3305      	adds	r3, #5
 8003f74:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8003f78:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	3388      	adds	r3, #136	@ 0x88
 8003f80:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003f84:	4413      	add	r3, r2
 8003f86:	3b80      	subs	r3, #128	@ 0x80
 8003f88:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003f8c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8003f90:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003f94:	4413      	add	r3, r2
 8003f96:	00da      	lsls	r2, r3, #3
 8003f98:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8003f9c:	4413      	add	r3, r2
 8003f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa2:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8003fa6:	ea84 0002 	eor.w	r0, r4, r2
 8003faa:	f8c7 03d0 	str.w	r0, [r7, #976]	@ 0x3d0
 8003fae:	406b      	eors	r3, r5
 8003fb0:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8003fb4:	00cb      	lsls	r3, r1, #3
 8003fb6:	3388      	adds	r3, #136	@ 0x88
 8003fb8:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003fbc:	4413      	add	r3, r2
 8003fbe:	3b80      	subs	r3, #128	@ 0x80
 8003fc0:	e9d7 12f4 	ldrd	r1, r2, [r7, #976]	@ 0x3d0
 8003fc4:	e9c3 1200 	strd	r1, r2, [r3]
 8003fc8:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003fcc:	3305      	adds	r3, #5
 8003fce:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8003fd2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	3388      	adds	r3, #136	@ 0x88
 8003fda:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8003fde:	4413      	add	r3, r2
 8003fe0:	3b80      	subs	r3, #128	@ 0x80
 8003fe2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8003fe6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8003fea:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8003fee:	4413      	add	r3, r2
 8003ff0:	00da      	lsls	r2, r3, #3
 8003ff2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8003ff6:	4413      	add	r3, r2
 8003ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffc:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8004000:	ea84 0002 	eor.w	r0, r4, r2
 8004004:	f8c7 03c8 	str.w	r0, [r7, #968]	@ 0x3c8
 8004008:	406b      	eors	r3, r5
 800400a:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800400e:	00cb      	lsls	r3, r1, #3
 8004010:	3388      	adds	r3, #136	@ 0x88
 8004012:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004016:	4413      	add	r3, r2
 8004018:	3b80      	subs	r3, #128	@ 0x80
 800401a:	e9d7 12f2 	ldrd	r1, r2, [r7, #968]	@ 0x3c8
 800401e:	e9c3 1200 	strd	r1, r2, [r3]
 8004022:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004026:	3305      	adds	r3, #5
 8004028:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800402c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	3388      	adds	r3, #136	@ 0x88
 8004034:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004038:	4413      	add	r3, r2
 800403a:	3b80      	subs	r3, #128	@ 0x80
 800403c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004040:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004044:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004048:	4413      	add	r3, r2
 800404a:	00da      	lsls	r2, r3, #3
 800404c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004050:	4413      	add	r3, r2
 8004052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004056:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800405a:	ea84 0002 	eor.w	r0, r4, r2
 800405e:	f8c7 03c0 	str.w	r0, [r7, #960]	@ 0x3c0
 8004062:	406b      	eors	r3, r5
 8004064:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8004068:	00cb      	lsls	r3, r1, #3
 800406a:	3388      	adds	r3, #136	@ 0x88
 800406c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004070:	4413      	add	r3, r2
 8004072:	3b80      	subs	r3, #128	@ 0x80
 8004074:	e9d7 12f0 	ldrd	r1, r2, [r7, #960]	@ 0x3c0
 8004078:	e9c3 1200 	strd	r1, r2, [r3]
 800407c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004080:	3305      	adds	r3, #5
 8004082:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004086:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800408a:	3301      	adds	r3, #1
 800408c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8004090:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	3388      	adds	r3, #136	@ 0x88
 8004098:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800409c:	4413      	add	r3, r2
 800409e:	f1a3 0180 	sub.w	r1, r3, #128	@ 0x80
 80040a2:	f04f 0200 	mov.w	r2, #0
 80040a6:	f04f 0300 	mov.w	r3, #0
 80040aa:	e9c1 2300 	strd	r2, r3, [r1]
 80040ae:	2300      	movs	r3, #0
 80040b0:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80040b4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	3388      	adds	r3, #136	@ 0x88
 80040bc:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80040c0:	4413      	add	r3, r2
 80040c2:	3b80      	subs	r3, #128	@ 0x80
 80040c4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80040c8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80040cc:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80040d0:	4413      	add	r3, r2
 80040d2:	00da      	lsls	r2, r3, #3
 80040d4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80040d8:	4413      	add	r3, r2
 80040da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040de:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80040e2:	ea84 0002 	eor.w	r0, r4, r2
 80040e6:	f8c7 03b8 	str.w	r0, [r7, #952]	@ 0x3b8
 80040ea:	406b      	eors	r3, r5
 80040ec:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 80040f0:	00cb      	lsls	r3, r1, #3
 80040f2:	3388      	adds	r3, #136	@ 0x88
 80040f4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80040f8:	4413      	add	r3, r2
 80040fa:	3b80      	subs	r3, #128	@ 0x80
 80040fc:	e9d7 12ee 	ldrd	r1, r2, [r7, #952]	@ 0x3b8
 8004100:	e9c3 1200 	strd	r1, r2, [r3]
 8004104:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004108:	3305      	adds	r3, #5
 800410a:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800410e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	3388      	adds	r3, #136	@ 0x88
 8004116:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800411a:	4413      	add	r3, r2
 800411c:	3b80      	subs	r3, #128	@ 0x80
 800411e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004122:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004126:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800412a:	4413      	add	r3, r2
 800412c:	00da      	lsls	r2, r3, #3
 800412e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004132:	4413      	add	r3, r2
 8004134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004138:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800413c:	ea84 0002 	eor.w	r0, r4, r2
 8004140:	f8c7 03b0 	str.w	r0, [r7, #944]	@ 0x3b0
 8004144:	406b      	eors	r3, r5
 8004146:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 800414a:	00cb      	lsls	r3, r1, #3
 800414c:	3388      	adds	r3, #136	@ 0x88
 800414e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004152:	4413      	add	r3, r2
 8004154:	3b80      	subs	r3, #128	@ 0x80
 8004156:	e9d7 12ec 	ldrd	r1, r2, [r7, #944]	@ 0x3b0
 800415a:	e9c3 1200 	strd	r1, r2, [r3]
 800415e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004162:	3305      	adds	r3, #5
 8004164:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004168:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	3388      	adds	r3, #136	@ 0x88
 8004170:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004174:	4413      	add	r3, r2
 8004176:	3b80      	subs	r3, #128	@ 0x80
 8004178:	e9d3 4500 	ldrd	r4, r5, [r3]
 800417c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004180:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004184:	4413      	add	r3, r2
 8004186:	00da      	lsls	r2, r3, #3
 8004188:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800418c:	4413      	add	r3, r2
 800418e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004192:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8004196:	ea84 0002 	eor.w	r0, r4, r2
 800419a:	f8c7 03a8 	str.w	r0, [r7, #936]	@ 0x3a8
 800419e:	406b      	eors	r3, r5
 80041a0:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 80041a4:	00cb      	lsls	r3, r1, #3
 80041a6:	3388      	adds	r3, #136	@ 0x88
 80041a8:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80041ac:	4413      	add	r3, r2
 80041ae:	3b80      	subs	r3, #128	@ 0x80
 80041b0:	e9d7 12ea 	ldrd	r1, r2, [r7, #936]	@ 0x3a8
 80041b4:	e9c3 1200 	strd	r1, r2, [r3]
 80041b8:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80041bc:	3305      	adds	r3, #5
 80041be:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80041c2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80041c6:	00db      	lsls	r3, r3, #3
 80041c8:	3388      	adds	r3, #136	@ 0x88
 80041ca:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80041ce:	4413      	add	r3, r2
 80041d0:	3b80      	subs	r3, #128	@ 0x80
 80041d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80041d6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80041da:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80041de:	4413      	add	r3, r2
 80041e0:	00da      	lsls	r2, r3, #3
 80041e2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80041e6:	4413      	add	r3, r2
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80041f0:	ea84 0002 	eor.w	r0, r4, r2
 80041f4:	f8c7 03a0 	str.w	r0, [r7, #928]	@ 0x3a0
 80041f8:	406b      	eors	r3, r5
 80041fa:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 80041fe:	00cb      	lsls	r3, r1, #3
 8004200:	3388      	adds	r3, #136	@ 0x88
 8004202:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004206:	4413      	add	r3, r2
 8004208:	3b80      	subs	r3, #128	@ 0x80
 800420a:	e9d7 12e8 	ldrd	r1, r2, [r7, #928]	@ 0x3a0
 800420e:	e9c3 1200 	strd	r1, r2, [r3]
 8004212:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004216:	3305      	adds	r3, #5
 8004218:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800421c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004220:	00db      	lsls	r3, r3, #3
 8004222:	3388      	adds	r3, #136	@ 0x88
 8004224:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004228:	4413      	add	r3, r2
 800422a:	3b80      	subs	r3, #128	@ 0x80
 800422c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004230:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004234:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004238:	4413      	add	r3, r2
 800423a:	00da      	lsls	r2, r3, #3
 800423c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004240:	4413      	add	r3, r2
 8004242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004246:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800424a:	ea84 0002 	eor.w	r0, r4, r2
 800424e:	f8c7 0398 	str.w	r0, [r7, #920]	@ 0x398
 8004252:	406b      	eors	r3, r5
 8004254:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8004258:	00cb      	lsls	r3, r1, #3
 800425a:	3388      	adds	r3, #136	@ 0x88
 800425c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004260:	4413      	add	r3, r2
 8004262:	3b80      	subs	r3, #128	@ 0x80
 8004264:	e9d7 12e6 	ldrd	r1, r2, [r7, #920]	@ 0x398
 8004268:	e9c3 1200 	strd	r1, r2, [r3]
 800426c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004270:	3305      	adds	r3, #5
 8004272:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004276:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800427a:	3301      	adds	r3, #1
 800427c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8004280:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	3388      	adds	r3, #136	@ 0x88
 8004288:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800428c:	4413      	add	r3, r2
 800428e:	f1a3 0180 	sub.w	r1, r3, #128	@ 0x80
 8004292:	f04f 0200 	mov.w	r2, #0
 8004296:	f04f 0300 	mov.w	r3, #0
 800429a:	e9c1 2300 	strd	r2, r3, [r1]
 800429e:	2300      	movs	r3, #0
 80042a0:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80042a4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	3388      	adds	r3, #136	@ 0x88
 80042ac:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80042b0:	4413      	add	r3, r2
 80042b2:	3b80      	subs	r3, #128	@ 0x80
 80042b4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80042b8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80042bc:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80042c0:	4413      	add	r3, r2
 80042c2:	00da      	lsls	r2, r3, #3
 80042c4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80042c8:	4413      	add	r3, r2
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80042d2:	ea84 0002 	eor.w	r0, r4, r2
 80042d6:	f8c7 0390 	str.w	r0, [r7, #912]	@ 0x390
 80042da:	406b      	eors	r3, r5
 80042dc:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 80042e0:	00cb      	lsls	r3, r1, #3
 80042e2:	3388      	adds	r3, #136	@ 0x88
 80042e4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80042e8:	4413      	add	r3, r2
 80042ea:	3b80      	subs	r3, #128	@ 0x80
 80042ec:	e9d7 12e4 	ldrd	r1, r2, [r7, #912]	@ 0x390
 80042f0:	e9c3 1200 	strd	r1, r2, [r3]
 80042f4:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80042f8:	3305      	adds	r3, #5
 80042fa:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80042fe:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004302:	00db      	lsls	r3, r3, #3
 8004304:	3388      	adds	r3, #136	@ 0x88
 8004306:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800430a:	4413      	add	r3, r2
 800430c:	3b80      	subs	r3, #128	@ 0x80
 800430e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004312:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004316:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800431a:	4413      	add	r3, r2
 800431c:	00da      	lsls	r2, r3, #3
 800431e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004322:	4413      	add	r3, r2
 8004324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004328:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800432c:	ea84 0002 	eor.w	r0, r4, r2
 8004330:	f8c7 0388 	str.w	r0, [r7, #904]	@ 0x388
 8004334:	406b      	eors	r3, r5
 8004336:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 800433a:	00cb      	lsls	r3, r1, #3
 800433c:	3388      	adds	r3, #136	@ 0x88
 800433e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004342:	4413      	add	r3, r2
 8004344:	3b80      	subs	r3, #128	@ 0x80
 8004346:	e9d7 12e2 	ldrd	r1, r2, [r7, #904]	@ 0x388
 800434a:	e9c3 1200 	strd	r1, r2, [r3]
 800434e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004352:	3305      	adds	r3, #5
 8004354:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004358:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	3388      	adds	r3, #136	@ 0x88
 8004360:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004364:	4413      	add	r3, r2
 8004366:	3b80      	subs	r3, #128	@ 0x80
 8004368:	e9d3 4500 	ldrd	r4, r5, [r3]
 800436c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004370:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004374:	4413      	add	r3, r2
 8004376:	00da      	lsls	r2, r3, #3
 8004378:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800437c:	4413      	add	r3, r2
 800437e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004382:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8004386:	ea84 0002 	eor.w	r0, r4, r2
 800438a:	f8c7 0380 	str.w	r0, [r7, #896]	@ 0x380
 800438e:	406b      	eors	r3, r5
 8004390:	f8c7 3384 	str.w	r3, [r7, #900]	@ 0x384
 8004394:	00cb      	lsls	r3, r1, #3
 8004396:	3388      	adds	r3, #136	@ 0x88
 8004398:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800439c:	4413      	add	r3, r2
 800439e:	3b80      	subs	r3, #128	@ 0x80
 80043a0:	e9d7 12e0 	ldrd	r1, r2, [r7, #896]	@ 0x380
 80043a4:	e9c3 1200 	strd	r1, r2, [r3]
 80043a8:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80043ac:	3305      	adds	r3, #5
 80043ae:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80043b2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	3388      	adds	r3, #136	@ 0x88
 80043ba:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80043be:	4413      	add	r3, r2
 80043c0:	3b80      	subs	r3, #128	@ 0x80
 80043c2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80043c6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80043ca:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80043ce:	4413      	add	r3, r2
 80043d0:	00da      	lsls	r2, r3, #3
 80043d2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80043d6:	4413      	add	r3, r2
 80043d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043dc:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80043e0:	ea84 0002 	eor.w	r0, r4, r2
 80043e4:	f8c7 0378 	str.w	r0, [r7, #888]	@ 0x378
 80043e8:	406b      	eors	r3, r5
 80043ea:	f8c7 337c 	str.w	r3, [r7, #892]	@ 0x37c
 80043ee:	00cb      	lsls	r3, r1, #3
 80043f0:	3388      	adds	r3, #136	@ 0x88
 80043f2:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80043f6:	4413      	add	r3, r2
 80043f8:	3b80      	subs	r3, #128	@ 0x80
 80043fa:	e9d7 12de 	ldrd	r1, r2, [r7, #888]	@ 0x378
 80043fe:	e9c3 1200 	strd	r1, r2, [r3]
 8004402:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004406:	3305      	adds	r3, #5
 8004408:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800440c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	3388      	adds	r3, #136	@ 0x88
 8004414:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004418:	4413      	add	r3, r2
 800441a:	3b80      	subs	r3, #128	@ 0x80
 800441c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004420:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004424:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004428:	4413      	add	r3, r2
 800442a:	00da      	lsls	r2, r3, #3
 800442c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004430:	4413      	add	r3, r2
 8004432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004436:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800443a:	ea84 0002 	eor.w	r0, r4, r2
 800443e:	f8c7 0370 	str.w	r0, [r7, #880]	@ 0x370
 8004442:	406b      	eors	r3, r5
 8004444:	f8c7 3374 	str.w	r3, [r7, #884]	@ 0x374
 8004448:	00cb      	lsls	r3, r1, #3
 800444a:	3388      	adds	r3, #136	@ 0x88
 800444c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004450:	4413      	add	r3, r2
 8004452:	3b80      	subs	r3, #128	@ 0x80
 8004454:	e9d7 12dc 	ldrd	r1, r2, [r7, #880]	@ 0x370
 8004458:	e9c3 1200 	strd	r1, r2, [r3]
 800445c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004460:	3305      	adds	r3, #5
 8004462:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004466:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800446a:	3301      	adds	r3, #1
 800446c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8004470:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004474:	00db      	lsls	r3, r3, #3
 8004476:	3388      	adds	r3, #136	@ 0x88
 8004478:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800447c:	4413      	add	r3, r2
 800447e:	f1a3 0180 	sub.w	r1, r3, #128	@ 0x80
 8004482:	f04f 0200 	mov.w	r2, #0
 8004486:	f04f 0300 	mov.w	r3, #0
 800448a:	e9c1 2300 	strd	r2, r3, [r1]
 800448e:	2300      	movs	r3, #0
 8004490:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004494:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	3388      	adds	r3, #136	@ 0x88
 800449c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80044a0:	4413      	add	r3, r2
 80044a2:	3b80      	subs	r3, #128	@ 0x80
 80044a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 80044a8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80044ac:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80044b0:	4413      	add	r3, r2
 80044b2:	00da      	lsls	r2, r3, #3
 80044b4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80044b8:	4413      	add	r3, r2
 80044ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044be:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80044c2:	ea84 0002 	eor.w	r0, r4, r2
 80044c6:	f8c7 0368 	str.w	r0, [r7, #872]	@ 0x368
 80044ca:	406b      	eors	r3, r5
 80044cc:	f8c7 336c 	str.w	r3, [r7, #876]	@ 0x36c
 80044d0:	00cb      	lsls	r3, r1, #3
 80044d2:	3388      	adds	r3, #136	@ 0x88
 80044d4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80044d8:	4413      	add	r3, r2
 80044da:	3b80      	subs	r3, #128	@ 0x80
 80044dc:	e9d7 12da 	ldrd	r1, r2, [r7, #872]	@ 0x368
 80044e0:	e9c3 1200 	strd	r1, r2, [r3]
 80044e4:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80044e8:	3305      	adds	r3, #5
 80044ea:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80044ee:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	3388      	adds	r3, #136	@ 0x88
 80044f6:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80044fa:	4413      	add	r3, r2
 80044fc:	3b80      	subs	r3, #128	@ 0x80
 80044fe:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004502:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004506:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800450a:	4413      	add	r3, r2
 800450c:	00da      	lsls	r2, r3, #3
 800450e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004512:	4413      	add	r3, r2
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800451c:	ea84 0002 	eor.w	r0, r4, r2
 8004520:	f8c7 0360 	str.w	r0, [r7, #864]	@ 0x360
 8004524:	406b      	eors	r3, r5
 8004526:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 800452a:	00cb      	lsls	r3, r1, #3
 800452c:	3388      	adds	r3, #136	@ 0x88
 800452e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004532:	4413      	add	r3, r2
 8004534:	3b80      	subs	r3, #128	@ 0x80
 8004536:	e9d7 12d8 	ldrd	r1, r2, [r7, #864]	@ 0x360
 800453a:	e9c3 1200 	strd	r1, r2, [r3]
 800453e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004542:	3305      	adds	r3, #5
 8004544:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004548:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800454c:	00db      	lsls	r3, r3, #3
 800454e:	3388      	adds	r3, #136	@ 0x88
 8004550:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004554:	4413      	add	r3, r2
 8004556:	3b80      	subs	r3, #128	@ 0x80
 8004558:	e9d3 4500 	ldrd	r4, r5, [r3]
 800455c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004560:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004564:	4413      	add	r3, r2
 8004566:	00da      	lsls	r2, r3, #3
 8004568:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800456c:	4413      	add	r3, r2
 800456e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004572:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8004576:	ea84 0002 	eor.w	r0, r4, r2
 800457a:	f8c7 0358 	str.w	r0, [r7, #856]	@ 0x358
 800457e:	406b      	eors	r3, r5
 8004580:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8004584:	00cb      	lsls	r3, r1, #3
 8004586:	3388      	adds	r3, #136	@ 0x88
 8004588:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800458c:	4413      	add	r3, r2
 800458e:	3b80      	subs	r3, #128	@ 0x80
 8004590:	e9d7 12d6 	ldrd	r1, r2, [r7, #856]	@ 0x358
 8004594:	e9c3 1200 	strd	r1, r2, [r3]
 8004598:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800459c:	3305      	adds	r3, #5
 800459e:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80045a2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80045a6:	00db      	lsls	r3, r3, #3
 80045a8:	3388      	adds	r3, #136	@ 0x88
 80045aa:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80045ae:	4413      	add	r3, r2
 80045b0:	3b80      	subs	r3, #128	@ 0x80
 80045b2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80045b6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80045ba:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80045be:	4413      	add	r3, r2
 80045c0:	00da      	lsls	r2, r3, #3
 80045c2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80045c6:	4413      	add	r3, r2
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80045d0:	ea84 0002 	eor.w	r0, r4, r2
 80045d4:	f8c7 0350 	str.w	r0, [r7, #848]	@ 0x350
 80045d8:	406b      	eors	r3, r5
 80045da:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 80045de:	00cb      	lsls	r3, r1, #3
 80045e0:	3388      	adds	r3, #136	@ 0x88
 80045e2:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80045e6:	4413      	add	r3, r2
 80045e8:	3b80      	subs	r3, #128	@ 0x80
 80045ea:	e9d7 12d4 	ldrd	r1, r2, [r7, #848]	@ 0x350
 80045ee:	e9c3 1200 	strd	r1, r2, [r3]
 80045f2:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80045f6:	3305      	adds	r3, #5
 80045f8:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80045fc:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004600:	00db      	lsls	r3, r3, #3
 8004602:	3388      	adds	r3, #136	@ 0x88
 8004604:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004608:	4413      	add	r3, r2
 800460a:	3b80      	subs	r3, #128	@ 0x80
 800460c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004610:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004614:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004618:	4413      	add	r3, r2
 800461a:	00da      	lsls	r2, r3, #3
 800461c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004620:	4413      	add	r3, r2
 8004622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004626:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800462a:	ea84 0002 	eor.w	r0, r4, r2
 800462e:	f8c7 0348 	str.w	r0, [r7, #840]	@ 0x348
 8004632:	406b      	eors	r3, r5
 8004634:	f8c7 334c 	str.w	r3, [r7, #844]	@ 0x34c
 8004638:	00cb      	lsls	r3, r1, #3
 800463a:	3388      	adds	r3, #136	@ 0x88
 800463c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004640:	4413      	add	r3, r2
 8004642:	3b80      	subs	r3, #128	@ 0x80
 8004644:	e9d7 12d2 	ldrd	r1, r2, [r7, #840]	@ 0x348
 8004648:	e9c3 1200 	strd	r1, r2, [r3]
 800464c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004650:	3305      	adds	r3, #5
 8004652:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004656:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800465a:	3301      	adds	r3, #1
 800465c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8004660:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004664:	00db      	lsls	r3, r3, #3
 8004666:	3388      	adds	r3, #136	@ 0x88
 8004668:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800466c:	4413      	add	r3, r2
 800466e:	f1a3 0180 	sub.w	r1, r3, #128	@ 0x80
 8004672:	f04f 0200 	mov.w	r2, #0
 8004676:	f04f 0300 	mov.w	r3, #0
 800467a:	e9c1 2300 	strd	r2, r3, [r1]
 800467e:	2300      	movs	r3, #0
 8004680:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004684:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	3388      	adds	r3, #136	@ 0x88
 800468c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004690:	4413      	add	r3, r2
 8004692:	3b80      	subs	r3, #128	@ 0x80
 8004694:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004698:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800469c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80046a0:	4413      	add	r3, r2
 80046a2:	00da      	lsls	r2, r3, #3
 80046a4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80046a8:	4413      	add	r3, r2
 80046aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ae:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80046b2:	ea84 0002 	eor.w	r0, r4, r2
 80046b6:	f8c7 0340 	str.w	r0, [r7, #832]	@ 0x340
 80046ba:	406b      	eors	r3, r5
 80046bc:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 80046c0:	00cb      	lsls	r3, r1, #3
 80046c2:	3388      	adds	r3, #136	@ 0x88
 80046c4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80046c8:	4413      	add	r3, r2
 80046ca:	3b80      	subs	r3, #128	@ 0x80
 80046cc:	e9d7 12d0 	ldrd	r1, r2, [r7, #832]	@ 0x340
 80046d0:	e9c3 1200 	strd	r1, r2, [r3]
 80046d4:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80046d8:	3305      	adds	r3, #5
 80046da:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80046de:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80046e2:	00db      	lsls	r3, r3, #3
 80046e4:	3388      	adds	r3, #136	@ 0x88
 80046e6:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80046ea:	4413      	add	r3, r2
 80046ec:	3b80      	subs	r3, #128	@ 0x80
 80046ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80046f2:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80046f6:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80046fa:	4413      	add	r3, r2
 80046fc:	00da      	lsls	r2, r3, #3
 80046fe:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004702:	4413      	add	r3, r2
 8004704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004708:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800470c:	ea84 0002 	eor.w	r0, r4, r2
 8004710:	f8c7 0338 	str.w	r0, [r7, #824]	@ 0x338
 8004714:	406b      	eors	r3, r5
 8004716:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 800471a:	00cb      	lsls	r3, r1, #3
 800471c:	3388      	adds	r3, #136	@ 0x88
 800471e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004722:	4413      	add	r3, r2
 8004724:	3b80      	subs	r3, #128	@ 0x80
 8004726:	e9d7 12ce 	ldrd	r1, r2, [r7, #824]	@ 0x338
 800472a:	e9c3 1200 	strd	r1, r2, [r3]
 800472e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004732:	3305      	adds	r3, #5
 8004734:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004738:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800473c:	00db      	lsls	r3, r3, #3
 800473e:	3388      	adds	r3, #136	@ 0x88
 8004740:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004744:	4413      	add	r3, r2
 8004746:	3b80      	subs	r3, #128	@ 0x80
 8004748:	e9d3 4500 	ldrd	r4, r5, [r3]
 800474c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004750:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004754:	4413      	add	r3, r2
 8004756:	00da      	lsls	r2, r3, #3
 8004758:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800475c:	4413      	add	r3, r2
 800475e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004762:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 8004766:	ea84 0002 	eor.w	r0, r4, r2
 800476a:	f8c7 0330 	str.w	r0, [r7, #816]	@ 0x330
 800476e:	406b      	eors	r3, r5
 8004770:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8004774:	00cb      	lsls	r3, r1, #3
 8004776:	3388      	adds	r3, #136	@ 0x88
 8004778:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800477c:	4413      	add	r3, r2
 800477e:	3b80      	subs	r3, #128	@ 0x80
 8004780:	e9d7 12cc 	ldrd	r1, r2, [r7, #816]	@ 0x330
 8004784:	e9c3 1200 	strd	r1, r2, [r3]
 8004788:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800478c:	3305      	adds	r3, #5
 800478e:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004792:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004796:	00db      	lsls	r3, r3, #3
 8004798:	3388      	adds	r3, #136	@ 0x88
 800479a:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800479e:	4413      	add	r3, r2
 80047a0:	3b80      	subs	r3, #128	@ 0x80
 80047a2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80047a6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80047aa:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80047ae:	4413      	add	r3, r2
 80047b0:	00da      	lsls	r2, r3, #3
 80047b2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80047b6:	4413      	add	r3, r2
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 80047c0:	ea84 0002 	eor.w	r0, r4, r2
 80047c4:	f8c7 0328 	str.w	r0, [r7, #808]	@ 0x328
 80047c8:	406b      	eors	r3, r5
 80047ca:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
 80047ce:	00cb      	lsls	r3, r1, #3
 80047d0:	3388      	adds	r3, #136	@ 0x88
 80047d2:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80047d6:	4413      	add	r3, r2
 80047d8:	3b80      	subs	r3, #128	@ 0x80
 80047da:	e9d7 12ca 	ldrd	r1, r2, [r7, #808]	@ 0x328
 80047de:	e9c3 1200 	strd	r1, r2, [r3]
 80047e2:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80047e6:	3305      	adds	r3, #5
 80047e8:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80047ec:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	3388      	adds	r3, #136	@ 0x88
 80047f4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80047f8:	4413      	add	r3, r2
 80047fa:	3b80      	subs	r3, #128	@ 0x80
 80047fc:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004800:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8004804:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004808:	4413      	add	r3, r2
 800480a:	00da      	lsls	r2, r3, #3
 800480c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004810:	4413      	add	r3, r2
 8004812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004816:	f897 15e7 	ldrb.w	r1, [r7, #1511]	@ 0x5e7
 800481a:	ea84 0002 	eor.w	r0, r4, r2
 800481e:	f8c7 0320 	str.w	r0, [r7, #800]	@ 0x320
 8004822:	406b      	eors	r3, r5
 8004824:	f8c7 3324 	str.w	r3, [r7, #804]	@ 0x324
 8004828:	00cb      	lsls	r3, r1, #3
 800482a:	3388      	adds	r3, #136	@ 0x88
 800482c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004830:	4413      	add	r3, r2
 8004832:	3b80      	subs	r3, #128	@ 0x80
 8004834:	e9d7 12c8 	ldrd	r1, r2, [r7, #800]	@ 0x320
 8004838:	e9c3 1200 	strd	r1, r2, [r3]
 800483c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004840:	3305      	adds	r3, #5
 8004842:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004846:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800484a:	3301      	adds	r3, #1
 800484c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
      FOR5(x, 1,
 8004850:	2300      	movs	r3, #0
 8004852:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8004856:	2300      	movs	r3, #0
 8004858:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800485c:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004860:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004864:	4413      	add	r3, r2
 8004866:	00da      	lsls	r2, r3, #3
 8004868:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800486c:	4413      	add	r3, r2
 800486e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004872:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004876:	1d19      	adds	r1, r3, #4
 8004878:	4bf9      	ldr	r3, [pc, #996]	@ (8004c60 <masked_keccak+0xe0c>)
 800487a:	fb83 2301 	smull	r2, r3, r3, r1
 800487e:	105a      	asrs	r2, r3, #1
 8004880:	17cb      	asrs	r3, r1, #31
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	461a      	mov	r2, r3
 8004886:	0092      	lsls	r2, r2, #2
 8004888:	441a      	add	r2, r3
 800488a:	1a8b      	subs	r3, r1, r2
 800488c:	00db      	lsls	r3, r3, #3
 800488e:	3388      	adds	r3, #136	@ 0x88
 8004890:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004894:	4413      	add	r3, r2
 8004896:	3b80      	subs	r3, #128	@ 0x80
 8004898:	e9d3 4500 	ldrd	r4, r5, [r3]
 800489c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80048a0:	1c59      	adds	r1, r3, #1
 80048a2:	4bef      	ldr	r3, [pc, #956]	@ (8004c60 <masked_keccak+0xe0c>)
 80048a4:	fb83 2301 	smull	r2, r3, r3, r1
 80048a8:	105a      	asrs	r2, r3, #1
 80048aa:	17cb      	asrs	r3, r1, #31
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	461a      	mov	r2, r3
 80048b0:	0092      	lsls	r2, r2, #2
 80048b2:	441a      	add	r2, r3
 80048b4:	1a8b      	subs	r3, r1, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	3388      	adds	r3, #136	@ 0x88
 80048ba:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80048be:	4413      	add	r3, r2
 80048c0:	3b80      	subs	r3, #128	@ 0x80
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	0fd0      	lsrs	r0, r2, #31
 80048c8:	0059      	lsls	r1, r3, #1
 80048ca:	4301      	orrs	r1, r0
 80048cc:	f8c7 131c 	str.w	r1, [r7, #796]	@ 0x31c
 80048d0:	0fd9      	lsrs	r1, r3, #31
 80048d2:	0053      	lsls	r3, r2, #1
 80048d4:	430b      	orrs	r3, r1
 80048d6:	f8c7 3318 	str.w	r3, [r7, #792]	@ 0x318
 80048da:	e9d7 12c6 	ldrd	r1, r2, [r7, #792]	@ 0x318
 80048de:	460b      	mov	r3, r1
 80048e0:	4063      	eors	r3, r4
 80048e2:	f8c7 3310 	str.w	r3, [r7, #784]	@ 0x310
 80048e6:	4613      	mov	r3, r2
 80048e8:	406b      	eors	r3, r5
 80048ea:	f8c7 3314 	str.w	r3, [r7, #788]	@ 0x314
 80048ee:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80048f2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80048f6:	4413      	add	r3, r2
 80048f8:	00da      	lsls	r2, r3, #3
 80048fa:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80048fe:	4413      	add	r3, r2
 8004900:	e9d7 01c4 	ldrd	r0, r1, [r7, #784]	@ 0x310
 8004904:	4602      	mov	r2, r0
 8004906:	ea88 0202 	eor.w	r2, r8, r2
 800490a:	f8c7 2308 	str.w	r2, [r7, #776]	@ 0x308
 800490e:	460a      	mov	r2, r1
 8004910:	ea89 0202 	eor.w	r2, r9, r2
 8004914:	f8c7 230c 	str.w	r2, [r7, #780]	@ 0x30c
 8004918:	e9d7 12c2 	ldrd	r1, r2, [r7, #776]	@ 0x308
 800491c:	e9c3 1200 	strd	r1, r2, [r3]
 8004920:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004924:	3305      	adds	r3, #5
 8004926:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800492a:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 800492e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004932:	4413      	add	r3, r2
 8004934:	00da      	lsls	r2, r3, #3
 8004936:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800493a:	4413      	add	r3, r2
 800493c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004940:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004944:	1d19      	adds	r1, r3, #4
 8004946:	4bc6      	ldr	r3, [pc, #792]	@ (8004c60 <masked_keccak+0xe0c>)
 8004948:	fb83 2301 	smull	r2, r3, r3, r1
 800494c:	105a      	asrs	r2, r3, #1
 800494e:	17cb      	asrs	r3, r1, #31
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	461a      	mov	r2, r3
 8004954:	0092      	lsls	r2, r2, #2
 8004956:	441a      	add	r2, r3
 8004958:	1a8b      	subs	r3, r1, r2
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	3388      	adds	r3, #136	@ 0x88
 800495e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004962:	4413      	add	r3, r2
 8004964:	3b80      	subs	r3, #128	@ 0x80
 8004966:	e9d3 4500 	ldrd	r4, r5, [r3]
 800496a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800496e:	1c59      	adds	r1, r3, #1
 8004970:	4bbb      	ldr	r3, [pc, #748]	@ (8004c60 <masked_keccak+0xe0c>)
 8004972:	fb83 2301 	smull	r2, r3, r3, r1
 8004976:	105a      	asrs	r2, r3, #1
 8004978:	17cb      	asrs	r3, r1, #31
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	461a      	mov	r2, r3
 800497e:	0092      	lsls	r2, r2, #2
 8004980:	441a      	add	r2, r3
 8004982:	1a8b      	subs	r3, r1, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	3388      	adds	r3, #136	@ 0x88
 8004988:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800498c:	4413      	add	r3, r2
 800498e:	3b80      	subs	r3, #128	@ 0x80
 8004990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004994:	0fd0      	lsrs	r0, r2, #31
 8004996:	0059      	lsls	r1, r3, #1
 8004998:	4301      	orrs	r1, r0
 800499a:	f8c7 1304 	str.w	r1, [r7, #772]	@ 0x304
 800499e:	0fd9      	lsrs	r1, r3, #31
 80049a0:	0053      	lsls	r3, r2, #1
 80049a2:	430b      	orrs	r3, r1
 80049a4:	f8c7 3300 	str.w	r3, [r7, #768]	@ 0x300
 80049a8:	e9d7 12c0 	ldrd	r1, r2, [r7, #768]	@ 0x300
 80049ac:	460b      	mov	r3, r1
 80049ae:	4063      	eors	r3, r4
 80049b0:	f8c7 32f8 	str.w	r3, [r7, #760]	@ 0x2f8
 80049b4:	4613      	mov	r3, r2
 80049b6:	406b      	eors	r3, r5
 80049b8:	f8c7 32fc 	str.w	r3, [r7, #764]	@ 0x2fc
 80049bc:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80049c0:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80049c4:	4413      	add	r3, r2
 80049c6:	00da      	lsls	r2, r3, #3
 80049c8:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80049cc:	4413      	add	r3, r2
 80049ce:	e9d7 01be 	ldrd	r0, r1, [r7, #760]	@ 0x2f8
 80049d2:	4602      	mov	r2, r0
 80049d4:	ea88 0202 	eor.w	r2, r8, r2
 80049d8:	f8c7 22f0 	str.w	r2, [r7, #752]	@ 0x2f0
 80049dc:	460a      	mov	r2, r1
 80049de:	ea89 0202 	eor.w	r2, r9, r2
 80049e2:	f8c7 22f4 	str.w	r2, [r7, #756]	@ 0x2f4
 80049e6:	e9d7 12bc 	ldrd	r1, r2, [r7, #752]	@ 0x2f0
 80049ea:	e9c3 1200 	strd	r1, r2, [r3]
 80049ee:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80049f2:	3305      	adds	r3, #5
 80049f4:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80049f8:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80049fc:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004a00:	4413      	add	r3, r2
 8004a02:	00da      	lsls	r2, r3, #3
 8004a04:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004a08:	4413      	add	r3, r2
 8004a0a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a0e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004a12:	1d19      	adds	r1, r3, #4
 8004a14:	4b92      	ldr	r3, [pc, #584]	@ (8004c60 <masked_keccak+0xe0c>)
 8004a16:	fb83 2301 	smull	r2, r3, r3, r1
 8004a1a:	105a      	asrs	r2, r3, #1
 8004a1c:	17cb      	asrs	r3, r1, #31
 8004a1e:	1ad3      	subs	r3, r2, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	0092      	lsls	r2, r2, #2
 8004a24:	441a      	add	r2, r3
 8004a26:	1a8b      	subs	r3, r1, r2
 8004a28:	00db      	lsls	r3, r3, #3
 8004a2a:	3388      	adds	r3, #136	@ 0x88
 8004a2c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004a30:	4413      	add	r3, r2
 8004a32:	3b80      	subs	r3, #128	@ 0x80
 8004a34:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004a38:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004a3c:	1c59      	adds	r1, r3, #1
 8004a3e:	4b88      	ldr	r3, [pc, #544]	@ (8004c60 <masked_keccak+0xe0c>)
 8004a40:	fb83 2301 	smull	r2, r3, r3, r1
 8004a44:	105a      	asrs	r2, r3, #1
 8004a46:	17cb      	asrs	r3, r1, #31
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	0092      	lsls	r2, r2, #2
 8004a4e:	441a      	add	r2, r3
 8004a50:	1a8b      	subs	r3, r1, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	3388      	adds	r3, #136	@ 0x88
 8004a56:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004a5a:	4413      	add	r3, r2
 8004a5c:	3b80      	subs	r3, #128	@ 0x80
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	0fd0      	lsrs	r0, r2, #31
 8004a64:	0059      	lsls	r1, r3, #1
 8004a66:	4301      	orrs	r1, r0
 8004a68:	f8c7 12ec 	str.w	r1, [r7, #748]	@ 0x2ec
 8004a6c:	0fd9      	lsrs	r1, r3, #31
 8004a6e:	0053      	lsls	r3, r2, #1
 8004a70:	430b      	orrs	r3, r1
 8004a72:	f8c7 32e8 	str.w	r3, [r7, #744]	@ 0x2e8
 8004a76:	e9d7 12ba 	ldrd	r1, r2, [r7, #744]	@ 0x2e8
 8004a7a:	460b      	mov	r3, r1
 8004a7c:	4063      	eors	r3, r4
 8004a7e:	f8c7 32e0 	str.w	r3, [r7, #736]	@ 0x2e0
 8004a82:	4613      	mov	r3, r2
 8004a84:	406b      	eors	r3, r5
 8004a86:	f8c7 32e4 	str.w	r3, [r7, #740]	@ 0x2e4
 8004a8a:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004a8e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004a92:	4413      	add	r3, r2
 8004a94:	00da      	lsls	r2, r3, #3
 8004a96:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004a9a:	4413      	add	r3, r2
 8004a9c:	e9d7 01b8 	ldrd	r0, r1, [r7, #736]	@ 0x2e0
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	ea88 0202 	eor.w	r2, r8, r2
 8004aa6:	f8c7 22d8 	str.w	r2, [r7, #728]	@ 0x2d8
 8004aaa:	460a      	mov	r2, r1
 8004aac:	ea89 0202 	eor.w	r2, r9, r2
 8004ab0:	f8c7 22dc 	str.w	r2, [r7, #732]	@ 0x2dc
 8004ab4:	e9d7 12b6 	ldrd	r1, r2, [r7, #728]	@ 0x2d8
 8004ab8:	e9c3 1200 	strd	r1, r2, [r3]
 8004abc:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004ac0:	3305      	adds	r3, #5
 8004ac2:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004ac6:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004aca:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004ace:	4413      	add	r3, r2
 8004ad0:	00da      	lsls	r2, r3, #3
 8004ad2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004ad6:	4413      	add	r3, r2
 8004ad8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004adc:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004ae0:	1d19      	adds	r1, r3, #4
 8004ae2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c60 <masked_keccak+0xe0c>)
 8004ae4:	fb83 2301 	smull	r2, r3, r3, r1
 8004ae8:	105a      	asrs	r2, r3, #1
 8004aea:	17cb      	asrs	r3, r1, #31
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	0092      	lsls	r2, r2, #2
 8004af2:	441a      	add	r2, r3
 8004af4:	1a8b      	subs	r3, r1, r2
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	3388      	adds	r3, #136	@ 0x88
 8004afa:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004afe:	4413      	add	r3, r2
 8004b00:	3b80      	subs	r3, #128	@ 0x80
 8004b02:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004b06:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004b0a:	1c59      	adds	r1, r3, #1
 8004b0c:	4b54      	ldr	r3, [pc, #336]	@ (8004c60 <masked_keccak+0xe0c>)
 8004b0e:	fb83 2301 	smull	r2, r3, r3, r1
 8004b12:	105a      	asrs	r2, r3, #1
 8004b14:	17cb      	asrs	r3, r1, #31
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	461a      	mov	r2, r3
 8004b1a:	0092      	lsls	r2, r2, #2
 8004b1c:	441a      	add	r2, r3
 8004b1e:	1a8b      	subs	r3, r1, r2
 8004b20:	00db      	lsls	r3, r3, #3
 8004b22:	3388      	adds	r3, #136	@ 0x88
 8004b24:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004b28:	4413      	add	r3, r2
 8004b2a:	3b80      	subs	r3, #128	@ 0x80
 8004b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b30:	0fd0      	lsrs	r0, r2, #31
 8004b32:	0059      	lsls	r1, r3, #1
 8004b34:	4301      	orrs	r1, r0
 8004b36:	f8c7 12d4 	str.w	r1, [r7, #724]	@ 0x2d4
 8004b3a:	0fd9      	lsrs	r1, r3, #31
 8004b3c:	0053      	lsls	r3, r2, #1
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	f8c7 32d0 	str.w	r3, [r7, #720]	@ 0x2d0
 8004b44:	e9d7 12b4 	ldrd	r1, r2, [r7, #720]	@ 0x2d0
 8004b48:	460b      	mov	r3, r1
 8004b4a:	4063      	eors	r3, r4
 8004b4c:	f8c7 32c8 	str.w	r3, [r7, #712]	@ 0x2c8
 8004b50:	4613      	mov	r3, r2
 8004b52:	406b      	eors	r3, r5
 8004b54:	f8c7 32cc 	str.w	r3, [r7, #716]	@ 0x2cc
 8004b58:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004b5c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004b60:	4413      	add	r3, r2
 8004b62:	00da      	lsls	r2, r3, #3
 8004b64:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004b68:	4413      	add	r3, r2
 8004b6a:	e9d7 01b2 	ldrd	r0, r1, [r7, #712]	@ 0x2c8
 8004b6e:	4602      	mov	r2, r0
 8004b70:	ea88 0202 	eor.w	r2, r8, r2
 8004b74:	f8c7 22c0 	str.w	r2, [r7, #704]	@ 0x2c0
 8004b78:	460a      	mov	r2, r1
 8004b7a:	ea89 0202 	eor.w	r2, r9, r2
 8004b7e:	f8c7 22c4 	str.w	r2, [r7, #708]	@ 0x2c4
 8004b82:	e9d7 12b0 	ldrd	r1, r2, [r7, #704]	@ 0x2c0
 8004b86:	e9c3 1200 	strd	r1, r2, [r3]
 8004b8a:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004b8e:	3305      	adds	r3, #5
 8004b90:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004b94:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004b98:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004b9c:	4413      	add	r3, r2
 8004b9e:	00da      	lsls	r2, r3, #3
 8004ba0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004ba4:	4413      	add	r3, r2
 8004ba6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004baa:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004bae:	1d19      	adds	r1, r3, #4
 8004bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8004c60 <masked_keccak+0xe0c>)
 8004bb2:	fb83 2301 	smull	r2, r3, r3, r1
 8004bb6:	105a      	asrs	r2, r3, #1
 8004bb8:	17cb      	asrs	r3, r1, #31
 8004bba:	1ad3      	subs	r3, r2, r3
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	0092      	lsls	r2, r2, #2
 8004bc0:	441a      	add	r2, r3
 8004bc2:	1a8b      	subs	r3, r1, r2
 8004bc4:	00db      	lsls	r3, r3, #3
 8004bc6:	3388      	adds	r3, #136	@ 0x88
 8004bc8:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004bcc:	4413      	add	r3, r2
 8004bce:	3b80      	subs	r3, #128	@ 0x80
 8004bd0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004bd4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004bd8:	1c59      	adds	r1, r3, #1
 8004bda:	4b21      	ldr	r3, [pc, #132]	@ (8004c60 <masked_keccak+0xe0c>)
 8004bdc:	fb83 2301 	smull	r2, r3, r3, r1
 8004be0:	105a      	asrs	r2, r3, #1
 8004be2:	17cb      	asrs	r3, r1, #31
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	461a      	mov	r2, r3
 8004be8:	0092      	lsls	r2, r2, #2
 8004bea:	441a      	add	r2, r3
 8004bec:	1a8b      	subs	r3, r1, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	3388      	adds	r3, #136	@ 0x88
 8004bf2:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004bf6:	4413      	add	r3, r2
 8004bf8:	3b80      	subs	r3, #128	@ 0x80
 8004bfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bfe:	0fd0      	lsrs	r0, r2, #31
 8004c00:	0059      	lsls	r1, r3, #1
 8004c02:	4301      	orrs	r1, r0
 8004c04:	f8c7 12bc 	str.w	r1, [r7, #700]	@ 0x2bc
 8004c08:	0fd9      	lsrs	r1, r3, #31
 8004c0a:	0053      	lsls	r3, r2, #1
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	f8c7 32b8 	str.w	r3, [r7, #696]	@ 0x2b8
 8004c12:	e9d7 12ae 	ldrd	r1, r2, [r7, #696]	@ 0x2b8
 8004c16:	460b      	mov	r3, r1
 8004c18:	4063      	eors	r3, r4
 8004c1a:	f8c7 32b0 	str.w	r3, [r7, #688]	@ 0x2b0
 8004c1e:	4613      	mov	r3, r2
 8004c20:	406b      	eors	r3, r5
 8004c22:	f8c7 32b4 	str.w	r3, [r7, #692]	@ 0x2b4
 8004c26:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004c2a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004c2e:	4413      	add	r3, r2
 8004c30:	00da      	lsls	r2, r3, #3
 8004c32:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004c36:	4413      	add	r3, r2
 8004c38:	e9d7 01ac 	ldrd	r0, r1, [r7, #688]	@ 0x2b0
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	ea88 0202 	eor.w	r2, r8, r2
 8004c42:	f8c7 22a8 	str.w	r2, [r7, #680]	@ 0x2a8
 8004c46:	460a      	mov	r2, r1
 8004c48:	ea89 0202 	eor.w	r2, r9, r2
 8004c4c:	f8c7 22ac 	str.w	r2, [r7, #684]	@ 0x2ac
 8004c50:	e9d7 12aa 	ldrd	r1, r2, [r7, #680]	@ 0x2a8
 8004c54:	e9c3 1200 	strd	r1, r2, [r3]
 8004c58:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004c5c:	e002      	b.n	8004c64 <masked_keccak+0xe10>
 8004c5e:	bf00      	nop
 8004c60:	66666667 	.word	0x66666667
 8004c64:	3305      	adds	r3, #5
 8004c66:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004c6a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004c6e:	3301      	adds	r3, #1
 8004c70:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004c7a:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004c7e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004c82:	4413      	add	r3, r2
 8004c84:	00da      	lsls	r2, r3, #3
 8004c86:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004c8a:	4413      	add	r3, r2
 8004c8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c90:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004c94:	1d19      	adds	r1, r3, #4
 8004c96:	4bf9      	ldr	r3, [pc, #996]	@ (800507c <masked_keccak+0x1228>)
 8004c98:	fb83 2301 	smull	r2, r3, r3, r1
 8004c9c:	105a      	asrs	r2, r3, #1
 8004c9e:	17cb      	asrs	r3, r1, #31
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	0092      	lsls	r2, r2, #2
 8004ca6:	441a      	add	r2, r3
 8004ca8:	1a8b      	subs	r3, r1, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	3388      	adds	r3, #136	@ 0x88
 8004cae:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004cb2:	4413      	add	r3, r2
 8004cb4:	3b80      	subs	r3, #128	@ 0x80
 8004cb6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004cba:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004cbe:	1c59      	adds	r1, r3, #1
 8004cc0:	4bee      	ldr	r3, [pc, #952]	@ (800507c <masked_keccak+0x1228>)
 8004cc2:	fb83 2301 	smull	r2, r3, r3, r1
 8004cc6:	105a      	asrs	r2, r3, #1
 8004cc8:	17cb      	asrs	r3, r1, #31
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	461a      	mov	r2, r3
 8004cce:	0092      	lsls	r2, r2, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	1a8b      	subs	r3, r1, r2
 8004cd4:	00db      	lsls	r3, r3, #3
 8004cd6:	3388      	adds	r3, #136	@ 0x88
 8004cd8:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004cdc:	4413      	add	r3, r2
 8004cde:	3b80      	subs	r3, #128	@ 0x80
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	0fd0      	lsrs	r0, r2, #31
 8004ce6:	0059      	lsls	r1, r3, #1
 8004ce8:	4301      	orrs	r1, r0
 8004cea:	f8c7 12a4 	str.w	r1, [r7, #676]	@ 0x2a4
 8004cee:	0fd9      	lsrs	r1, r3, #31
 8004cf0:	0053      	lsls	r3, r2, #1
 8004cf2:	430b      	orrs	r3, r1
 8004cf4:	f8c7 32a0 	str.w	r3, [r7, #672]	@ 0x2a0
 8004cf8:	e9d7 12a8 	ldrd	r1, r2, [r7, #672]	@ 0x2a0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4063      	eors	r3, r4
 8004d00:	f8c7 3298 	str.w	r3, [r7, #664]	@ 0x298
 8004d04:	4613      	mov	r3, r2
 8004d06:	406b      	eors	r3, r5
 8004d08:	f8c7 329c 	str.w	r3, [r7, #668]	@ 0x29c
 8004d0c:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004d10:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004d14:	4413      	add	r3, r2
 8004d16:	00da      	lsls	r2, r3, #3
 8004d18:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004d1c:	4413      	add	r3, r2
 8004d1e:	e9d7 01a6 	ldrd	r0, r1, [r7, #664]	@ 0x298
 8004d22:	4602      	mov	r2, r0
 8004d24:	ea88 0202 	eor.w	r2, r8, r2
 8004d28:	f8c7 2290 	str.w	r2, [r7, #656]	@ 0x290
 8004d2c:	460a      	mov	r2, r1
 8004d2e:	ea89 0202 	eor.w	r2, r9, r2
 8004d32:	f8c7 2294 	str.w	r2, [r7, #660]	@ 0x294
 8004d36:	e9d7 12a4 	ldrd	r1, r2, [r7, #656]	@ 0x290
 8004d3a:	e9c3 1200 	strd	r1, r2, [r3]
 8004d3e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004d42:	3305      	adds	r3, #5
 8004d44:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004d48:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004d4c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004d50:	4413      	add	r3, r2
 8004d52:	00da      	lsls	r2, r3, #3
 8004d54:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004d58:	4413      	add	r3, r2
 8004d5a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d5e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004d62:	1d19      	adds	r1, r3, #4
 8004d64:	4bc5      	ldr	r3, [pc, #788]	@ (800507c <masked_keccak+0x1228>)
 8004d66:	fb83 2301 	smull	r2, r3, r3, r1
 8004d6a:	105a      	asrs	r2, r3, #1
 8004d6c:	17cb      	asrs	r3, r1, #31
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	461a      	mov	r2, r3
 8004d72:	0092      	lsls	r2, r2, #2
 8004d74:	441a      	add	r2, r3
 8004d76:	1a8b      	subs	r3, r1, r2
 8004d78:	00db      	lsls	r3, r3, #3
 8004d7a:	3388      	adds	r3, #136	@ 0x88
 8004d7c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004d80:	4413      	add	r3, r2
 8004d82:	3b80      	subs	r3, #128	@ 0x80
 8004d84:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004d88:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	4bbb      	ldr	r3, [pc, #748]	@ (800507c <masked_keccak+0x1228>)
 8004d90:	fb83 2301 	smull	r2, r3, r3, r1
 8004d94:	105a      	asrs	r2, r3, #1
 8004d96:	17cb      	asrs	r3, r1, #31
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	0092      	lsls	r2, r2, #2
 8004d9e:	441a      	add	r2, r3
 8004da0:	1a8b      	subs	r3, r1, r2
 8004da2:	00db      	lsls	r3, r3, #3
 8004da4:	3388      	adds	r3, #136	@ 0x88
 8004da6:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004daa:	4413      	add	r3, r2
 8004dac:	3b80      	subs	r3, #128	@ 0x80
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	0fd0      	lsrs	r0, r2, #31
 8004db4:	0059      	lsls	r1, r3, #1
 8004db6:	4301      	orrs	r1, r0
 8004db8:	f8c7 128c 	str.w	r1, [r7, #652]	@ 0x28c
 8004dbc:	0fd9      	lsrs	r1, r3, #31
 8004dbe:	0053      	lsls	r3, r2, #1
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	f8c7 3288 	str.w	r3, [r7, #648]	@ 0x288
 8004dc6:	e9d7 12a2 	ldrd	r1, r2, [r7, #648]	@ 0x288
 8004dca:	460b      	mov	r3, r1
 8004dcc:	4063      	eors	r3, r4
 8004dce:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	406b      	eors	r3, r5
 8004dd6:	f8c7 3284 	str.w	r3, [r7, #644]	@ 0x284
 8004dda:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004dde:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004de2:	4413      	add	r3, r2
 8004de4:	00da      	lsls	r2, r3, #3
 8004de6:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004dea:	4413      	add	r3, r2
 8004dec:	e9d7 01a0 	ldrd	r0, r1, [r7, #640]	@ 0x280
 8004df0:	4602      	mov	r2, r0
 8004df2:	ea88 0202 	eor.w	r2, r8, r2
 8004df6:	f8c7 2278 	str.w	r2, [r7, #632]	@ 0x278
 8004dfa:	460a      	mov	r2, r1
 8004dfc:	ea89 0202 	eor.w	r2, r9, r2
 8004e00:	f8c7 227c 	str.w	r2, [r7, #636]	@ 0x27c
 8004e04:	e9d7 129e 	ldrd	r1, r2, [r7, #632]	@ 0x278
 8004e08:	e9c3 1200 	strd	r1, r2, [r3]
 8004e0c:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004e10:	3305      	adds	r3, #5
 8004e12:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004e16:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004e1a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004e1e:	4413      	add	r3, r2
 8004e20:	00da      	lsls	r2, r3, #3
 8004e22:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004e26:	4413      	add	r3, r2
 8004e28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004e2c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004e30:	1d19      	adds	r1, r3, #4
 8004e32:	4b92      	ldr	r3, [pc, #584]	@ (800507c <masked_keccak+0x1228>)
 8004e34:	fb83 2301 	smull	r2, r3, r3, r1
 8004e38:	105a      	asrs	r2, r3, #1
 8004e3a:	17cb      	asrs	r3, r1, #31
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	461a      	mov	r2, r3
 8004e40:	0092      	lsls	r2, r2, #2
 8004e42:	441a      	add	r2, r3
 8004e44:	1a8b      	subs	r3, r1, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	3388      	adds	r3, #136	@ 0x88
 8004e4a:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004e4e:	4413      	add	r3, r2
 8004e50:	3b80      	subs	r3, #128	@ 0x80
 8004e52:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004e56:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004e5a:	1c59      	adds	r1, r3, #1
 8004e5c:	4b87      	ldr	r3, [pc, #540]	@ (800507c <masked_keccak+0x1228>)
 8004e5e:	fb83 2301 	smull	r2, r3, r3, r1
 8004e62:	105a      	asrs	r2, r3, #1
 8004e64:	17cb      	asrs	r3, r1, #31
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	461a      	mov	r2, r3
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	441a      	add	r2, r3
 8004e6e:	1a8b      	subs	r3, r1, r2
 8004e70:	00db      	lsls	r3, r3, #3
 8004e72:	3388      	adds	r3, #136	@ 0x88
 8004e74:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004e78:	4413      	add	r3, r2
 8004e7a:	3b80      	subs	r3, #128	@ 0x80
 8004e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e80:	0fd0      	lsrs	r0, r2, #31
 8004e82:	0059      	lsls	r1, r3, #1
 8004e84:	4301      	orrs	r1, r0
 8004e86:	f8c7 1274 	str.w	r1, [r7, #628]	@ 0x274
 8004e8a:	0fd9      	lsrs	r1, r3, #31
 8004e8c:	0053      	lsls	r3, r2, #1
 8004e8e:	430b      	orrs	r3, r1
 8004e90:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
 8004e94:	e9d7 129c 	ldrd	r1, r2, [r7, #624]	@ 0x270
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4063      	eors	r3, r4
 8004e9c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	406b      	eors	r3, r5
 8004ea4:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8004ea8:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004eac:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004eb0:	4413      	add	r3, r2
 8004eb2:	00da      	lsls	r2, r3, #3
 8004eb4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004eb8:	4413      	add	r3, r2
 8004eba:	e9d7 019a 	ldrd	r0, r1, [r7, #616]	@ 0x268
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	ea88 0202 	eor.w	r2, r8, r2
 8004ec4:	f8c7 2260 	str.w	r2, [r7, #608]	@ 0x260
 8004ec8:	460a      	mov	r2, r1
 8004eca:	ea89 0202 	eor.w	r2, r9, r2
 8004ece:	f8c7 2264 	str.w	r2, [r7, #612]	@ 0x264
 8004ed2:	e9d7 1298 	ldrd	r1, r2, [r7, #608]	@ 0x260
 8004ed6:	e9c3 1200 	strd	r1, r2, [r3]
 8004eda:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004ede:	3305      	adds	r3, #5
 8004ee0:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004ee4:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004ee8:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004eec:	4413      	add	r3, r2
 8004eee:	00da      	lsls	r2, r3, #3
 8004ef0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004ef4:	4413      	add	r3, r2
 8004ef6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004efa:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004efe:	1d19      	adds	r1, r3, #4
 8004f00:	4b5e      	ldr	r3, [pc, #376]	@ (800507c <masked_keccak+0x1228>)
 8004f02:	fb83 2301 	smull	r2, r3, r3, r1
 8004f06:	105a      	asrs	r2, r3, #1
 8004f08:	17cb      	asrs	r3, r1, #31
 8004f0a:	1ad3      	subs	r3, r2, r3
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	0092      	lsls	r2, r2, #2
 8004f10:	441a      	add	r2, r3
 8004f12:	1a8b      	subs	r3, r1, r2
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	3388      	adds	r3, #136	@ 0x88
 8004f18:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004f1c:	4413      	add	r3, r2
 8004f1e:	3b80      	subs	r3, #128	@ 0x80
 8004f20:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004f24:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004f28:	1c59      	adds	r1, r3, #1
 8004f2a:	4b54      	ldr	r3, [pc, #336]	@ (800507c <masked_keccak+0x1228>)
 8004f2c:	fb83 2301 	smull	r2, r3, r3, r1
 8004f30:	105a      	asrs	r2, r3, #1
 8004f32:	17cb      	asrs	r3, r1, #31
 8004f34:	1ad3      	subs	r3, r2, r3
 8004f36:	461a      	mov	r2, r3
 8004f38:	0092      	lsls	r2, r2, #2
 8004f3a:	441a      	add	r2, r3
 8004f3c:	1a8b      	subs	r3, r1, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	3388      	adds	r3, #136	@ 0x88
 8004f42:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004f46:	4413      	add	r3, r2
 8004f48:	3b80      	subs	r3, #128	@ 0x80
 8004f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f4e:	0fd0      	lsrs	r0, r2, #31
 8004f50:	0059      	lsls	r1, r3, #1
 8004f52:	4301      	orrs	r1, r0
 8004f54:	f8c7 125c 	str.w	r1, [r7, #604]	@ 0x25c
 8004f58:	0fd9      	lsrs	r1, r3, #31
 8004f5a:	0053      	lsls	r3, r2, #1
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8004f62:	e9d7 1296 	ldrd	r1, r2, [r7, #600]	@ 0x258
 8004f66:	460b      	mov	r3, r1
 8004f68:	4063      	eors	r3, r4
 8004f6a:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250
 8004f6e:	4613      	mov	r3, r2
 8004f70:	406b      	eors	r3, r5
 8004f72:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
 8004f76:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004f7a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004f7e:	4413      	add	r3, r2
 8004f80:	00da      	lsls	r2, r3, #3
 8004f82:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004f86:	4413      	add	r3, r2
 8004f88:	e9d7 0194 	ldrd	r0, r1, [r7, #592]	@ 0x250
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	ea88 0202 	eor.w	r2, r8, r2
 8004f92:	f8c7 2248 	str.w	r2, [r7, #584]	@ 0x248
 8004f96:	460a      	mov	r2, r1
 8004f98:	ea89 0202 	eor.w	r2, r9, r2
 8004f9c:	f8c7 224c 	str.w	r2, [r7, #588]	@ 0x24c
 8004fa0:	e9d7 1292 	ldrd	r1, r2, [r7, #584]	@ 0x248
 8004fa4:	e9c3 1200 	strd	r1, r2, [r3]
 8004fa8:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8004fac:	3305      	adds	r3, #5
 8004fae:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8004fb2:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8004fb6:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004fba:	4413      	add	r3, r2
 8004fbc:	00da      	lsls	r2, r3, #3
 8004fbe:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8004fc2:	4413      	add	r3, r2
 8004fc4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004fc8:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004fcc:	1d19      	adds	r1, r3, #4
 8004fce:	4b2b      	ldr	r3, [pc, #172]	@ (800507c <masked_keccak+0x1228>)
 8004fd0:	fb83 2301 	smull	r2, r3, r3, r1
 8004fd4:	105a      	asrs	r2, r3, #1
 8004fd6:	17cb      	asrs	r3, r1, #31
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	461a      	mov	r2, r3
 8004fdc:	0092      	lsls	r2, r2, #2
 8004fde:	441a      	add	r2, r3
 8004fe0:	1a8b      	subs	r3, r1, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	3388      	adds	r3, #136	@ 0x88
 8004fe6:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8004fea:	4413      	add	r3, r2
 8004fec:	3b80      	subs	r3, #128	@ 0x80
 8004fee:	e9d3 4500 	ldrd	r4, r5, [r3]
 8004ff2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8004ff6:	1c59      	adds	r1, r3, #1
 8004ff8:	4b20      	ldr	r3, [pc, #128]	@ (800507c <masked_keccak+0x1228>)
 8004ffa:	fb83 2301 	smull	r2, r3, r3, r1
 8004ffe:	105a      	asrs	r2, r3, #1
 8005000:	17cb      	asrs	r3, r1, #31
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	461a      	mov	r2, r3
 8005006:	0092      	lsls	r2, r2, #2
 8005008:	441a      	add	r2, r3
 800500a:	1a8b      	subs	r3, r1, r2
 800500c:	00db      	lsls	r3, r3, #3
 800500e:	3388      	adds	r3, #136	@ 0x88
 8005010:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005014:	4413      	add	r3, r2
 8005016:	3b80      	subs	r3, #128	@ 0x80
 8005018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800501c:	0fd0      	lsrs	r0, r2, #31
 800501e:	0059      	lsls	r1, r3, #1
 8005020:	4301      	orrs	r1, r0
 8005022:	f8c7 1244 	str.w	r1, [r7, #580]	@ 0x244
 8005026:	0fd9      	lsrs	r1, r3, #31
 8005028:	0053      	lsls	r3, r2, #1
 800502a:	430b      	orrs	r3, r1
 800502c:	f8c7 3240 	str.w	r3, [r7, #576]	@ 0x240
 8005030:	e9d7 1290 	ldrd	r1, r2, [r7, #576]	@ 0x240
 8005034:	460b      	mov	r3, r1
 8005036:	4063      	eors	r3, r4
 8005038:	f8c7 3238 	str.w	r3, [r7, #568]	@ 0x238
 800503c:	4613      	mov	r3, r2
 800503e:	406b      	eors	r3, r5
 8005040:	f8c7 323c 	str.w	r3, [r7, #572]	@ 0x23c
 8005044:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005048:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800504c:	4413      	add	r3, r2
 800504e:	00da      	lsls	r2, r3, #3
 8005050:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005054:	4413      	add	r3, r2
 8005056:	e9d7 018e 	ldrd	r0, r1, [r7, #568]	@ 0x238
 800505a:	4602      	mov	r2, r0
 800505c:	ea88 0202 	eor.w	r2, r8, r2
 8005060:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 8005064:	460a      	mov	r2, r1
 8005066:	ea89 0202 	eor.w	r2, r9, r2
 800506a:	f8c7 2234 	str.w	r2, [r7, #564]	@ 0x234
 800506e:	e9d7 128c 	ldrd	r1, r2, [r7, #560]	@ 0x230
 8005072:	e9c3 1200 	strd	r1, r2, [r3]
 8005076:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800507a:	e001      	b.n	8005080 <masked_keccak+0x122c>
 800507c:	66666667 	.word	0x66666667
 8005080:	3305      	adds	r3, #5
 8005082:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005086:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800508a:	3301      	adds	r3, #1
 800508c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8005090:	2300      	movs	r3, #0
 8005092:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005096:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 800509a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800509e:	4413      	add	r3, r2
 80050a0:	00da      	lsls	r2, r3, #3
 80050a2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80050a6:	4413      	add	r3, r2
 80050a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80050ac:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80050b0:	1d19      	adds	r1, r3, #4
 80050b2:	4bf9      	ldr	r3, [pc, #996]	@ (8005498 <masked_keccak+0x1644>)
 80050b4:	fb83 2301 	smull	r2, r3, r3, r1
 80050b8:	105a      	asrs	r2, r3, #1
 80050ba:	17cb      	asrs	r3, r1, #31
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	461a      	mov	r2, r3
 80050c0:	0092      	lsls	r2, r2, #2
 80050c2:	441a      	add	r2, r3
 80050c4:	1a8b      	subs	r3, r1, r2
 80050c6:	00db      	lsls	r3, r3, #3
 80050c8:	3388      	adds	r3, #136	@ 0x88
 80050ca:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80050ce:	4413      	add	r3, r2
 80050d0:	3b80      	subs	r3, #128	@ 0x80
 80050d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80050d6:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80050da:	1c59      	adds	r1, r3, #1
 80050dc:	4bee      	ldr	r3, [pc, #952]	@ (8005498 <masked_keccak+0x1644>)
 80050de:	fb83 2301 	smull	r2, r3, r3, r1
 80050e2:	105a      	asrs	r2, r3, #1
 80050e4:	17cb      	asrs	r3, r1, #31
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	461a      	mov	r2, r3
 80050ea:	0092      	lsls	r2, r2, #2
 80050ec:	441a      	add	r2, r3
 80050ee:	1a8b      	subs	r3, r1, r2
 80050f0:	00db      	lsls	r3, r3, #3
 80050f2:	3388      	adds	r3, #136	@ 0x88
 80050f4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80050f8:	4413      	add	r3, r2
 80050fa:	3b80      	subs	r3, #128	@ 0x80
 80050fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005100:	0fd0      	lsrs	r0, r2, #31
 8005102:	0059      	lsls	r1, r3, #1
 8005104:	4301      	orrs	r1, r0
 8005106:	f8c7 122c 	str.w	r1, [r7, #556]	@ 0x22c
 800510a:	0fd9      	lsrs	r1, r3, #31
 800510c:	0053      	lsls	r3, r2, #1
 800510e:	430b      	orrs	r3, r1
 8005110:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8005114:	e9d7 128a 	ldrd	r1, r2, [r7, #552]	@ 0x228
 8005118:	460b      	mov	r3, r1
 800511a:	4063      	eors	r3, r4
 800511c:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8005120:	4613      	mov	r3, r2
 8005122:	406b      	eors	r3, r5
 8005124:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
 8005128:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 800512c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005130:	4413      	add	r3, r2
 8005132:	00da      	lsls	r2, r3, #3
 8005134:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005138:	4413      	add	r3, r2
 800513a:	e9d7 0188 	ldrd	r0, r1, [r7, #544]	@ 0x220
 800513e:	4602      	mov	r2, r0
 8005140:	ea88 0202 	eor.w	r2, r8, r2
 8005144:	f8c7 2218 	str.w	r2, [r7, #536]	@ 0x218
 8005148:	460a      	mov	r2, r1
 800514a:	ea89 0202 	eor.w	r2, r9, r2
 800514e:	f8c7 221c 	str.w	r2, [r7, #540]	@ 0x21c
 8005152:	e9d7 1286 	ldrd	r1, r2, [r7, #536]	@ 0x218
 8005156:	e9c3 1200 	strd	r1, r2, [r3]
 800515a:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800515e:	3305      	adds	r3, #5
 8005160:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005164:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005168:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800516c:	4413      	add	r3, r2
 800516e:	00da      	lsls	r2, r3, #3
 8005170:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005174:	4413      	add	r3, r2
 8005176:	e9d3 8900 	ldrd	r8, r9, [r3]
 800517a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800517e:	1d19      	adds	r1, r3, #4
 8005180:	4bc5      	ldr	r3, [pc, #788]	@ (8005498 <masked_keccak+0x1644>)
 8005182:	fb83 2301 	smull	r2, r3, r3, r1
 8005186:	105a      	asrs	r2, r3, #1
 8005188:	17cb      	asrs	r3, r1, #31
 800518a:	1ad3      	subs	r3, r2, r3
 800518c:	461a      	mov	r2, r3
 800518e:	0092      	lsls	r2, r2, #2
 8005190:	441a      	add	r2, r3
 8005192:	1a8b      	subs	r3, r1, r2
 8005194:	00db      	lsls	r3, r3, #3
 8005196:	3388      	adds	r3, #136	@ 0x88
 8005198:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800519c:	4413      	add	r3, r2
 800519e:	3b80      	subs	r3, #128	@ 0x80
 80051a0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80051a4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80051a8:	1c59      	adds	r1, r3, #1
 80051aa:	4bbb      	ldr	r3, [pc, #748]	@ (8005498 <masked_keccak+0x1644>)
 80051ac:	fb83 2301 	smull	r2, r3, r3, r1
 80051b0:	105a      	asrs	r2, r3, #1
 80051b2:	17cb      	asrs	r3, r1, #31
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	0092      	lsls	r2, r2, #2
 80051ba:	441a      	add	r2, r3
 80051bc:	1a8b      	subs	r3, r1, r2
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	3388      	adds	r3, #136	@ 0x88
 80051c2:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80051c6:	4413      	add	r3, r2
 80051c8:	3b80      	subs	r3, #128	@ 0x80
 80051ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ce:	0fd0      	lsrs	r0, r2, #31
 80051d0:	0059      	lsls	r1, r3, #1
 80051d2:	4301      	orrs	r1, r0
 80051d4:	f8c7 1214 	str.w	r1, [r7, #532]	@ 0x214
 80051d8:	0fd9      	lsrs	r1, r3, #31
 80051da:	0053      	lsls	r3, r2, #1
 80051dc:	430b      	orrs	r3, r1
 80051de:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 80051e2:	e9d7 1284 	ldrd	r1, r2, [r7, #528]	@ 0x210
 80051e6:	460b      	mov	r3, r1
 80051e8:	4063      	eors	r3, r4
 80051ea:	f8c7 3208 	str.w	r3, [r7, #520]	@ 0x208
 80051ee:	4613      	mov	r3, r2
 80051f0:	406b      	eors	r3, r5
 80051f2:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c
 80051f6:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80051fa:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80051fe:	4413      	add	r3, r2
 8005200:	00da      	lsls	r2, r3, #3
 8005202:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005206:	4413      	add	r3, r2
 8005208:	e9d7 0182 	ldrd	r0, r1, [r7, #520]	@ 0x208
 800520c:	4602      	mov	r2, r0
 800520e:	ea88 0202 	eor.w	r2, r8, r2
 8005212:	f8c7 2200 	str.w	r2, [r7, #512]	@ 0x200
 8005216:	460a      	mov	r2, r1
 8005218:	ea89 0202 	eor.w	r2, r9, r2
 800521c:	f8c7 2204 	str.w	r2, [r7, #516]	@ 0x204
 8005220:	e9d7 1280 	ldrd	r1, r2, [r7, #512]	@ 0x200
 8005224:	e9c3 1200 	strd	r1, r2, [r3]
 8005228:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800522c:	3305      	adds	r3, #5
 800522e:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005232:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005236:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800523a:	4413      	add	r3, r2
 800523c:	00da      	lsls	r2, r3, #3
 800523e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005242:	4413      	add	r3, r2
 8005244:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005248:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800524c:	1d19      	adds	r1, r3, #4
 800524e:	4b92      	ldr	r3, [pc, #584]	@ (8005498 <masked_keccak+0x1644>)
 8005250:	fb83 2301 	smull	r2, r3, r3, r1
 8005254:	105a      	asrs	r2, r3, #1
 8005256:	17cb      	asrs	r3, r1, #31
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	461a      	mov	r2, r3
 800525c:	0092      	lsls	r2, r2, #2
 800525e:	441a      	add	r2, r3
 8005260:	1a8b      	subs	r3, r1, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	3388      	adds	r3, #136	@ 0x88
 8005266:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800526a:	4413      	add	r3, r2
 800526c:	3b80      	subs	r3, #128	@ 0x80
 800526e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005272:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005276:	1c59      	adds	r1, r3, #1
 8005278:	4b87      	ldr	r3, [pc, #540]	@ (8005498 <masked_keccak+0x1644>)
 800527a:	fb83 2301 	smull	r2, r3, r3, r1
 800527e:	105a      	asrs	r2, r3, #1
 8005280:	17cb      	asrs	r3, r1, #31
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	461a      	mov	r2, r3
 8005286:	0092      	lsls	r2, r2, #2
 8005288:	441a      	add	r2, r3
 800528a:	1a8b      	subs	r3, r1, r2
 800528c:	00db      	lsls	r3, r3, #3
 800528e:	3388      	adds	r3, #136	@ 0x88
 8005290:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005294:	4413      	add	r3, r2
 8005296:	3b80      	subs	r3, #128	@ 0x80
 8005298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529c:	0fd0      	lsrs	r0, r2, #31
 800529e:	0059      	lsls	r1, r3, #1
 80052a0:	4301      	orrs	r1, r0
 80052a2:	f8c7 11fc 	str.w	r1, [r7, #508]	@ 0x1fc
 80052a6:	0fd9      	lsrs	r1, r3, #31
 80052a8:	0053      	lsls	r3, r2, #1
 80052aa:	430b      	orrs	r3, r1
 80052ac:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
 80052b0:	e9d7 127e 	ldrd	r1, r2, [r7, #504]	@ 0x1f8
 80052b4:	460b      	mov	r3, r1
 80052b6:	4063      	eors	r3, r4
 80052b8:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 80052bc:	4613      	mov	r3, r2
 80052be:	406b      	eors	r3, r5
 80052c0:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80052c4:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80052c8:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80052cc:	4413      	add	r3, r2
 80052ce:	00da      	lsls	r2, r3, #3
 80052d0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80052d4:	4413      	add	r3, r2
 80052d6:	e9d7 017c 	ldrd	r0, r1, [r7, #496]	@ 0x1f0
 80052da:	4602      	mov	r2, r0
 80052dc:	ea88 0202 	eor.w	r2, r8, r2
 80052e0:	f8c7 21e8 	str.w	r2, [r7, #488]	@ 0x1e8
 80052e4:	460a      	mov	r2, r1
 80052e6:	ea89 0202 	eor.w	r2, r9, r2
 80052ea:	f8c7 21ec 	str.w	r2, [r7, #492]	@ 0x1ec
 80052ee:	e9d7 127a 	ldrd	r1, r2, [r7, #488]	@ 0x1e8
 80052f2:	e9c3 1200 	strd	r1, r2, [r3]
 80052f6:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80052fa:	3305      	adds	r3, #5
 80052fc:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005300:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005304:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005308:	4413      	add	r3, r2
 800530a:	00da      	lsls	r2, r3, #3
 800530c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005310:	4413      	add	r3, r2
 8005312:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005316:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800531a:	1d19      	adds	r1, r3, #4
 800531c:	4b5e      	ldr	r3, [pc, #376]	@ (8005498 <masked_keccak+0x1644>)
 800531e:	fb83 2301 	smull	r2, r3, r3, r1
 8005322:	105a      	asrs	r2, r3, #1
 8005324:	17cb      	asrs	r3, r1, #31
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	461a      	mov	r2, r3
 800532a:	0092      	lsls	r2, r2, #2
 800532c:	441a      	add	r2, r3
 800532e:	1a8b      	subs	r3, r1, r2
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	3388      	adds	r3, #136	@ 0x88
 8005334:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005338:	4413      	add	r3, r2
 800533a:	3b80      	subs	r3, #128	@ 0x80
 800533c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005340:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005344:	1c59      	adds	r1, r3, #1
 8005346:	4b54      	ldr	r3, [pc, #336]	@ (8005498 <masked_keccak+0x1644>)
 8005348:	fb83 2301 	smull	r2, r3, r3, r1
 800534c:	105a      	asrs	r2, r3, #1
 800534e:	17cb      	asrs	r3, r1, #31
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	461a      	mov	r2, r3
 8005354:	0092      	lsls	r2, r2, #2
 8005356:	441a      	add	r2, r3
 8005358:	1a8b      	subs	r3, r1, r2
 800535a:	00db      	lsls	r3, r3, #3
 800535c:	3388      	adds	r3, #136	@ 0x88
 800535e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005362:	4413      	add	r3, r2
 8005364:	3b80      	subs	r3, #128	@ 0x80
 8005366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536a:	0fd0      	lsrs	r0, r2, #31
 800536c:	0059      	lsls	r1, r3, #1
 800536e:	4301      	orrs	r1, r0
 8005370:	f8c7 11e4 	str.w	r1, [r7, #484]	@ 0x1e4
 8005374:	0fd9      	lsrs	r1, r3, #31
 8005376:	0053      	lsls	r3, r2, #1
 8005378:	430b      	orrs	r3, r1
 800537a:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800537e:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	@ 0x1e0
 8005382:	460b      	mov	r3, r1
 8005384:	4063      	eors	r3, r4
 8005386:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 800538a:	4613      	mov	r3, r2
 800538c:	406b      	eors	r3, r5
 800538e:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8005392:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005396:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800539a:	4413      	add	r3, r2
 800539c:	00da      	lsls	r2, r3, #3
 800539e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80053a2:	4413      	add	r3, r2
 80053a4:	e9d7 0176 	ldrd	r0, r1, [r7, #472]	@ 0x1d8
 80053a8:	4602      	mov	r2, r0
 80053aa:	ea88 0202 	eor.w	r2, r8, r2
 80053ae:	f8c7 21d0 	str.w	r2, [r7, #464]	@ 0x1d0
 80053b2:	460a      	mov	r2, r1
 80053b4:	ea89 0202 	eor.w	r2, r9, r2
 80053b8:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
 80053bc:	e9d7 1274 	ldrd	r1, r2, [r7, #464]	@ 0x1d0
 80053c0:	e9c3 1200 	strd	r1, r2, [r3]
 80053c4:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80053c8:	3305      	adds	r3, #5
 80053ca:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80053ce:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80053d2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80053d6:	4413      	add	r3, r2
 80053d8:	00da      	lsls	r2, r3, #3
 80053da:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80053de:	4413      	add	r3, r2
 80053e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053e4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80053e8:	1d19      	adds	r1, r3, #4
 80053ea:	4b2b      	ldr	r3, [pc, #172]	@ (8005498 <masked_keccak+0x1644>)
 80053ec:	fb83 2301 	smull	r2, r3, r3, r1
 80053f0:	105a      	asrs	r2, r3, #1
 80053f2:	17cb      	asrs	r3, r1, #31
 80053f4:	1ad3      	subs	r3, r2, r3
 80053f6:	461a      	mov	r2, r3
 80053f8:	0092      	lsls	r2, r2, #2
 80053fa:	441a      	add	r2, r3
 80053fc:	1a8b      	subs	r3, r1, r2
 80053fe:	00db      	lsls	r3, r3, #3
 8005400:	3388      	adds	r3, #136	@ 0x88
 8005402:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005406:	4413      	add	r3, r2
 8005408:	3b80      	subs	r3, #128	@ 0x80
 800540a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800540e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005412:	1c59      	adds	r1, r3, #1
 8005414:	4b20      	ldr	r3, [pc, #128]	@ (8005498 <masked_keccak+0x1644>)
 8005416:	fb83 2301 	smull	r2, r3, r3, r1
 800541a:	105a      	asrs	r2, r3, #1
 800541c:	17cb      	asrs	r3, r1, #31
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	461a      	mov	r2, r3
 8005422:	0092      	lsls	r2, r2, #2
 8005424:	441a      	add	r2, r3
 8005426:	1a8b      	subs	r3, r1, r2
 8005428:	00db      	lsls	r3, r3, #3
 800542a:	3388      	adds	r3, #136	@ 0x88
 800542c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005430:	4413      	add	r3, r2
 8005432:	3b80      	subs	r3, #128	@ 0x80
 8005434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005438:	0fd0      	lsrs	r0, r2, #31
 800543a:	0059      	lsls	r1, r3, #1
 800543c:	4301      	orrs	r1, r0
 800543e:	f8c7 11cc 	str.w	r1, [r7, #460]	@ 0x1cc
 8005442:	0fd9      	lsrs	r1, r3, #31
 8005444:	0053      	lsls	r3, r2, #1
 8005446:	430b      	orrs	r3, r1
 8005448:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800544c:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	@ 0x1c8
 8005450:	460b      	mov	r3, r1
 8005452:	4063      	eors	r3, r4
 8005454:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8005458:	4613      	mov	r3, r2
 800545a:	406b      	eors	r3, r5
 800545c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8005460:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005464:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005468:	4413      	add	r3, r2
 800546a:	00da      	lsls	r2, r3, #3
 800546c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005470:	4413      	add	r3, r2
 8005472:	e9d7 0170 	ldrd	r0, r1, [r7, #448]	@ 0x1c0
 8005476:	4602      	mov	r2, r0
 8005478:	ea88 0202 	eor.w	r2, r8, r2
 800547c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8005480:	460a      	mov	r2, r1
 8005482:	ea89 0202 	eor.w	r2, r9, r2
 8005486:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800548a:	e9d7 126e 	ldrd	r1, r2, [r7, #440]	@ 0x1b8
 800548e:	e9c3 1200 	strd	r1, r2, [r3]
 8005492:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005496:	e001      	b.n	800549c <masked_keccak+0x1648>
 8005498:	66666667 	.word	0x66666667
 800549c:	3305      	adds	r3, #5
 800549e:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80054a2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80054a6:	3301      	adds	r3, #1
 80054a8:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80054ac:	2300      	movs	r3, #0
 80054ae:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80054b2:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80054b6:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80054ba:	4413      	add	r3, r2
 80054bc:	00da      	lsls	r2, r3, #3
 80054be:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80054c2:	4413      	add	r3, r2
 80054c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054c8:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80054cc:	1d19      	adds	r1, r3, #4
 80054ce:	4bf9      	ldr	r3, [pc, #996]	@ (80058b4 <masked_keccak+0x1a60>)
 80054d0:	fb83 2301 	smull	r2, r3, r3, r1
 80054d4:	105a      	asrs	r2, r3, #1
 80054d6:	17cb      	asrs	r3, r1, #31
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	0092      	lsls	r2, r2, #2
 80054de:	441a      	add	r2, r3
 80054e0:	1a8b      	subs	r3, r1, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	3388      	adds	r3, #136	@ 0x88
 80054e6:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80054ea:	4413      	add	r3, r2
 80054ec:	3b80      	subs	r3, #128	@ 0x80
 80054ee:	e9d3 4500 	ldrd	r4, r5, [r3]
 80054f2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80054f6:	1c59      	adds	r1, r3, #1
 80054f8:	4bee      	ldr	r3, [pc, #952]	@ (80058b4 <masked_keccak+0x1a60>)
 80054fa:	fb83 2301 	smull	r2, r3, r3, r1
 80054fe:	105a      	asrs	r2, r3, #1
 8005500:	17cb      	asrs	r3, r1, #31
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	461a      	mov	r2, r3
 8005506:	0092      	lsls	r2, r2, #2
 8005508:	441a      	add	r2, r3
 800550a:	1a8b      	subs	r3, r1, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	3388      	adds	r3, #136	@ 0x88
 8005510:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005514:	4413      	add	r3, r2
 8005516:	3b80      	subs	r3, #128	@ 0x80
 8005518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551c:	0fd0      	lsrs	r0, r2, #31
 800551e:	0059      	lsls	r1, r3, #1
 8005520:	4301      	orrs	r1, r0
 8005522:	f8c7 11b4 	str.w	r1, [r7, #436]	@ 0x1b4
 8005526:	0fd9      	lsrs	r1, r3, #31
 8005528:	0053      	lsls	r3, r2, #1
 800552a:	430b      	orrs	r3, r1
 800552c:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
 8005530:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	@ 0x1b0
 8005534:	460b      	mov	r3, r1
 8005536:	4063      	eors	r3, r4
 8005538:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800553c:	4613      	mov	r3, r2
 800553e:	406b      	eors	r3, r5
 8005540:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8005544:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005548:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800554c:	4413      	add	r3, r2
 800554e:	00da      	lsls	r2, r3, #3
 8005550:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005554:	4413      	add	r3, r2
 8005556:	e9d7 016a 	ldrd	r0, r1, [r7, #424]	@ 0x1a8
 800555a:	4602      	mov	r2, r0
 800555c:	ea88 0202 	eor.w	r2, r8, r2
 8005560:	f8c7 21a0 	str.w	r2, [r7, #416]	@ 0x1a0
 8005564:	460a      	mov	r2, r1
 8005566:	ea89 0202 	eor.w	r2, r9, r2
 800556a:	f8c7 21a4 	str.w	r2, [r7, #420]	@ 0x1a4
 800556e:	e9d7 1268 	ldrd	r1, r2, [r7, #416]	@ 0x1a0
 8005572:	e9c3 1200 	strd	r1, r2, [r3]
 8005576:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 800557a:	3305      	adds	r3, #5
 800557c:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005580:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005584:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005588:	4413      	add	r3, r2
 800558a:	00da      	lsls	r2, r3, #3
 800558c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005590:	4413      	add	r3, r2
 8005592:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005596:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800559a:	1d19      	adds	r1, r3, #4
 800559c:	4bc5      	ldr	r3, [pc, #788]	@ (80058b4 <masked_keccak+0x1a60>)
 800559e:	fb83 2301 	smull	r2, r3, r3, r1
 80055a2:	105a      	asrs	r2, r3, #1
 80055a4:	17cb      	asrs	r3, r1, #31
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	461a      	mov	r2, r3
 80055aa:	0092      	lsls	r2, r2, #2
 80055ac:	441a      	add	r2, r3
 80055ae:	1a8b      	subs	r3, r1, r2
 80055b0:	00db      	lsls	r3, r3, #3
 80055b2:	3388      	adds	r3, #136	@ 0x88
 80055b4:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80055b8:	4413      	add	r3, r2
 80055ba:	3b80      	subs	r3, #128	@ 0x80
 80055bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80055c0:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80055c4:	1c59      	adds	r1, r3, #1
 80055c6:	4bbb      	ldr	r3, [pc, #748]	@ (80058b4 <masked_keccak+0x1a60>)
 80055c8:	fb83 2301 	smull	r2, r3, r3, r1
 80055cc:	105a      	asrs	r2, r3, #1
 80055ce:	17cb      	asrs	r3, r1, #31
 80055d0:	1ad3      	subs	r3, r2, r3
 80055d2:	461a      	mov	r2, r3
 80055d4:	0092      	lsls	r2, r2, #2
 80055d6:	441a      	add	r2, r3
 80055d8:	1a8b      	subs	r3, r1, r2
 80055da:	00db      	lsls	r3, r3, #3
 80055dc:	3388      	adds	r3, #136	@ 0x88
 80055de:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80055e2:	4413      	add	r3, r2
 80055e4:	3b80      	subs	r3, #128	@ 0x80
 80055e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ea:	0fd0      	lsrs	r0, r2, #31
 80055ec:	0059      	lsls	r1, r3, #1
 80055ee:	4301      	orrs	r1, r0
 80055f0:	f8c7 119c 	str.w	r1, [r7, #412]	@ 0x19c
 80055f4:	0fd9      	lsrs	r1, r3, #31
 80055f6:	0053      	lsls	r3, r2, #1
 80055f8:	430b      	orrs	r3, r1
 80055fa:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 80055fe:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	@ 0x198
 8005602:	460b      	mov	r3, r1
 8005604:	4063      	eors	r3, r4
 8005606:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
 800560a:	4613      	mov	r3, r2
 800560c:	406b      	eors	r3, r5
 800560e:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8005612:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005616:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800561a:	4413      	add	r3, r2
 800561c:	00da      	lsls	r2, r3, #3
 800561e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005622:	4413      	add	r3, r2
 8005624:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	@ 0x190
 8005628:	4602      	mov	r2, r0
 800562a:	ea88 0202 	eor.w	r2, r8, r2
 800562e:	f8c7 2188 	str.w	r2, [r7, #392]	@ 0x188
 8005632:	460a      	mov	r2, r1
 8005634:	ea89 0202 	eor.w	r2, r9, r2
 8005638:	f8c7 218c 	str.w	r2, [r7, #396]	@ 0x18c
 800563c:	e9d7 1262 	ldrd	r1, r2, [r7, #392]	@ 0x188
 8005640:	e9c3 1200 	strd	r1, r2, [r3]
 8005644:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005648:	3305      	adds	r3, #5
 800564a:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800564e:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005652:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005656:	4413      	add	r3, r2
 8005658:	00da      	lsls	r2, r3, #3
 800565a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800565e:	4413      	add	r3, r2
 8005660:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005664:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005668:	1d19      	adds	r1, r3, #4
 800566a:	4b92      	ldr	r3, [pc, #584]	@ (80058b4 <masked_keccak+0x1a60>)
 800566c:	fb83 2301 	smull	r2, r3, r3, r1
 8005670:	105a      	asrs	r2, r3, #1
 8005672:	17cb      	asrs	r3, r1, #31
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	461a      	mov	r2, r3
 8005678:	0092      	lsls	r2, r2, #2
 800567a:	441a      	add	r2, r3
 800567c:	1a8b      	subs	r3, r1, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	3388      	adds	r3, #136	@ 0x88
 8005682:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005686:	4413      	add	r3, r2
 8005688:	3b80      	subs	r3, #128	@ 0x80
 800568a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800568e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005692:	1c59      	adds	r1, r3, #1
 8005694:	4b87      	ldr	r3, [pc, #540]	@ (80058b4 <masked_keccak+0x1a60>)
 8005696:	fb83 2301 	smull	r2, r3, r3, r1
 800569a:	105a      	asrs	r2, r3, #1
 800569c:	17cb      	asrs	r3, r1, #31
 800569e:	1ad3      	subs	r3, r2, r3
 80056a0:	461a      	mov	r2, r3
 80056a2:	0092      	lsls	r2, r2, #2
 80056a4:	441a      	add	r2, r3
 80056a6:	1a8b      	subs	r3, r1, r2
 80056a8:	00db      	lsls	r3, r3, #3
 80056aa:	3388      	adds	r3, #136	@ 0x88
 80056ac:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80056b0:	4413      	add	r3, r2
 80056b2:	3b80      	subs	r3, #128	@ 0x80
 80056b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b8:	0fd0      	lsrs	r0, r2, #31
 80056ba:	0059      	lsls	r1, r3, #1
 80056bc:	4301      	orrs	r1, r0
 80056be:	f8c7 1184 	str.w	r1, [r7, #388]	@ 0x184
 80056c2:	0fd9      	lsrs	r1, r3, #31
 80056c4:	0053      	lsls	r3, r2, #1
 80056c6:	430b      	orrs	r3, r1
 80056c8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80056cc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	@ 0x180
 80056d0:	460b      	mov	r3, r1
 80056d2:	4063      	eors	r3, r4
 80056d4:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80056d8:	4613      	mov	r3, r2
 80056da:	406b      	eors	r3, r5
 80056dc:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80056e0:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80056e4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80056e8:	4413      	add	r3, r2
 80056ea:	00da      	lsls	r2, r3, #3
 80056ec:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80056f0:	4413      	add	r3, r2
 80056f2:	e9d7 015e 	ldrd	r0, r1, [r7, #376]	@ 0x178
 80056f6:	4602      	mov	r2, r0
 80056f8:	ea88 0202 	eor.w	r2, r8, r2
 80056fc:	f8c7 2170 	str.w	r2, [r7, #368]	@ 0x170
 8005700:	460a      	mov	r2, r1
 8005702:	ea89 0202 	eor.w	r2, r9, r2
 8005706:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
 800570a:	e9d7 125c 	ldrd	r1, r2, [r7, #368]	@ 0x170
 800570e:	e9c3 1200 	strd	r1, r2, [r3]
 8005712:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005716:	3305      	adds	r3, #5
 8005718:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800571c:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005720:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005724:	4413      	add	r3, r2
 8005726:	00da      	lsls	r2, r3, #3
 8005728:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800572c:	4413      	add	r3, r2
 800572e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005732:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005736:	1d19      	adds	r1, r3, #4
 8005738:	4b5e      	ldr	r3, [pc, #376]	@ (80058b4 <masked_keccak+0x1a60>)
 800573a:	fb83 2301 	smull	r2, r3, r3, r1
 800573e:	105a      	asrs	r2, r3, #1
 8005740:	17cb      	asrs	r3, r1, #31
 8005742:	1ad3      	subs	r3, r2, r3
 8005744:	461a      	mov	r2, r3
 8005746:	0092      	lsls	r2, r2, #2
 8005748:	441a      	add	r2, r3
 800574a:	1a8b      	subs	r3, r1, r2
 800574c:	00db      	lsls	r3, r3, #3
 800574e:	3388      	adds	r3, #136	@ 0x88
 8005750:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005754:	4413      	add	r3, r2
 8005756:	3b80      	subs	r3, #128	@ 0x80
 8005758:	e9d3 4500 	ldrd	r4, r5, [r3]
 800575c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005760:	1c59      	adds	r1, r3, #1
 8005762:	4b54      	ldr	r3, [pc, #336]	@ (80058b4 <masked_keccak+0x1a60>)
 8005764:	fb83 2301 	smull	r2, r3, r3, r1
 8005768:	105a      	asrs	r2, r3, #1
 800576a:	17cb      	asrs	r3, r1, #31
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	461a      	mov	r2, r3
 8005770:	0092      	lsls	r2, r2, #2
 8005772:	441a      	add	r2, r3
 8005774:	1a8b      	subs	r3, r1, r2
 8005776:	00db      	lsls	r3, r3, #3
 8005778:	3388      	adds	r3, #136	@ 0x88
 800577a:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800577e:	4413      	add	r3, r2
 8005780:	3b80      	subs	r3, #128	@ 0x80
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	0fd0      	lsrs	r0, r2, #31
 8005788:	0059      	lsls	r1, r3, #1
 800578a:	4301      	orrs	r1, r0
 800578c:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
 8005790:	0fd9      	lsrs	r1, r3, #31
 8005792:	0053      	lsls	r3, r2, #1
 8005794:	430b      	orrs	r3, r1
 8005796:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800579a:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	@ 0x168
 800579e:	460b      	mov	r3, r1
 80057a0:	4063      	eors	r3, r4
 80057a2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80057a6:	4613      	mov	r3, r2
 80057a8:	406b      	eors	r3, r5
 80057aa:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80057ae:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80057b2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80057b6:	4413      	add	r3, r2
 80057b8:	00da      	lsls	r2, r3, #3
 80057ba:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80057be:	4413      	add	r3, r2
 80057c0:	e9d7 0158 	ldrd	r0, r1, [r7, #352]	@ 0x160
 80057c4:	4602      	mov	r2, r0
 80057c6:	ea88 0202 	eor.w	r2, r8, r2
 80057ca:	f8c7 2158 	str.w	r2, [r7, #344]	@ 0x158
 80057ce:	460a      	mov	r2, r1
 80057d0:	ea89 0202 	eor.w	r2, r9, r2
 80057d4:	f8c7 215c 	str.w	r2, [r7, #348]	@ 0x15c
 80057d8:	e9d7 1256 	ldrd	r1, r2, [r7, #344]	@ 0x158
 80057dc:	e9c3 1200 	strd	r1, r2, [r3]
 80057e0:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80057e4:	3305      	adds	r3, #5
 80057e6:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80057ea:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80057ee:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80057f2:	4413      	add	r3, r2
 80057f4:	00da      	lsls	r2, r3, #3
 80057f6:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80057fa:	4413      	add	r3, r2
 80057fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005800:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005804:	1d19      	adds	r1, r3, #4
 8005806:	4b2b      	ldr	r3, [pc, #172]	@ (80058b4 <masked_keccak+0x1a60>)
 8005808:	fb83 2301 	smull	r2, r3, r3, r1
 800580c:	105a      	asrs	r2, r3, #1
 800580e:	17cb      	asrs	r3, r1, #31
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	461a      	mov	r2, r3
 8005814:	0092      	lsls	r2, r2, #2
 8005816:	441a      	add	r2, r3
 8005818:	1a8b      	subs	r3, r1, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	3388      	adds	r3, #136	@ 0x88
 800581e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005822:	4413      	add	r3, r2
 8005824:	3b80      	subs	r3, #128	@ 0x80
 8005826:	e9d3 4500 	ldrd	r4, r5, [r3]
 800582a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800582e:	1c59      	adds	r1, r3, #1
 8005830:	4b20      	ldr	r3, [pc, #128]	@ (80058b4 <masked_keccak+0x1a60>)
 8005832:	fb83 2301 	smull	r2, r3, r3, r1
 8005836:	105a      	asrs	r2, r3, #1
 8005838:	17cb      	asrs	r3, r1, #31
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	461a      	mov	r2, r3
 800583e:	0092      	lsls	r2, r2, #2
 8005840:	441a      	add	r2, r3
 8005842:	1a8b      	subs	r3, r1, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	3388      	adds	r3, #136	@ 0x88
 8005848:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 800584c:	4413      	add	r3, r2
 800584e:	3b80      	subs	r3, #128	@ 0x80
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	0fd0      	lsrs	r0, r2, #31
 8005856:	0059      	lsls	r1, r3, #1
 8005858:	4301      	orrs	r1, r0
 800585a:	f8c7 1154 	str.w	r1, [r7, #340]	@ 0x154
 800585e:	0fd9      	lsrs	r1, r3, #31
 8005860:	0053      	lsls	r3, r2, #1
 8005862:	430b      	orrs	r3, r1
 8005864:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8005868:	e9d7 1254 	ldrd	r1, r2, [r7, #336]	@ 0x150
 800586c:	460b      	mov	r3, r1
 800586e:	4063      	eors	r3, r4
 8005870:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8005874:	4613      	mov	r3, r2
 8005876:	406b      	eors	r3, r5
 8005878:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 800587c:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005880:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005884:	4413      	add	r3, r2
 8005886:	00da      	lsls	r2, r3, #3
 8005888:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800588c:	4413      	add	r3, r2
 800588e:	e9d7 0152 	ldrd	r0, r1, [r7, #328]	@ 0x148
 8005892:	4602      	mov	r2, r0
 8005894:	ea88 0202 	eor.w	r2, r8, r2
 8005898:	f8c7 2140 	str.w	r2, [r7, #320]	@ 0x140
 800589c:	460a      	mov	r2, r1
 800589e:	ea89 0202 	eor.w	r2, r9, r2
 80058a2:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
 80058a6:	e9d7 1250 	ldrd	r1, r2, [r7, #320]	@ 0x140
 80058aa:	e9c3 1200 	strd	r1, r2, [r3]
 80058ae:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80058b2:	e001      	b.n	80058b8 <masked_keccak+0x1a64>
 80058b4:	66666667 	.word	0x66666667
 80058b8:	3305      	adds	r3, #5
 80058ba:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80058be:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80058c2:	3301      	adds	r3, #1
 80058c4:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80058c8:	2300      	movs	r3, #0
 80058ca:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 80058ce:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80058d2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80058d6:	4413      	add	r3, r2
 80058d8:	00da      	lsls	r2, r3, #3
 80058da:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80058de:	4413      	add	r3, r2
 80058e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058e4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80058e8:	1d19      	adds	r1, r3, #4
 80058ea:	4bf9      	ldr	r3, [pc, #996]	@ (8005cd0 <masked_keccak+0x1e7c>)
 80058ec:	fb83 2301 	smull	r2, r3, r3, r1
 80058f0:	105a      	asrs	r2, r3, #1
 80058f2:	17cb      	asrs	r3, r1, #31
 80058f4:	1ad3      	subs	r3, r2, r3
 80058f6:	461a      	mov	r2, r3
 80058f8:	0092      	lsls	r2, r2, #2
 80058fa:	441a      	add	r2, r3
 80058fc:	1a8b      	subs	r3, r1, r2
 80058fe:	00db      	lsls	r3, r3, #3
 8005900:	3388      	adds	r3, #136	@ 0x88
 8005902:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005906:	4413      	add	r3, r2
 8005908:	3b80      	subs	r3, #128	@ 0x80
 800590a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800590e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005912:	1c59      	adds	r1, r3, #1
 8005914:	4bee      	ldr	r3, [pc, #952]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005916:	fb83 2301 	smull	r2, r3, r3, r1
 800591a:	105a      	asrs	r2, r3, #1
 800591c:	17cb      	asrs	r3, r1, #31
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	461a      	mov	r2, r3
 8005922:	0092      	lsls	r2, r2, #2
 8005924:	441a      	add	r2, r3
 8005926:	1a8b      	subs	r3, r1, r2
 8005928:	00db      	lsls	r3, r3, #3
 800592a:	3388      	adds	r3, #136	@ 0x88
 800592c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005930:	4413      	add	r3, r2
 8005932:	3b80      	subs	r3, #128	@ 0x80
 8005934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005938:	0fd0      	lsrs	r0, r2, #31
 800593a:	0059      	lsls	r1, r3, #1
 800593c:	4301      	orrs	r1, r0
 800593e:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
 8005942:	0fd9      	lsrs	r1, r3, #31
 8005944:	0053      	lsls	r3, r2, #1
 8005946:	430b      	orrs	r3, r1
 8005948:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800594c:	e9d7 124e 	ldrd	r1, r2, [r7, #312]	@ 0x138
 8005950:	460b      	mov	r3, r1
 8005952:	4063      	eors	r3, r4
 8005954:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8005958:	4613      	mov	r3, r2
 800595a:	406b      	eors	r3, r5
 800595c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8005960:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005964:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005968:	4413      	add	r3, r2
 800596a:	00da      	lsls	r2, r3, #3
 800596c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005970:	4413      	add	r3, r2
 8005972:	e9d7 014c 	ldrd	r0, r1, [r7, #304]	@ 0x130
 8005976:	4602      	mov	r2, r0
 8005978:	ea88 0202 	eor.w	r2, r8, r2
 800597c:	f8c7 2128 	str.w	r2, [r7, #296]	@ 0x128
 8005980:	460a      	mov	r2, r1
 8005982:	ea89 0202 	eor.w	r2, r9, r2
 8005986:	f8c7 212c 	str.w	r2, [r7, #300]	@ 0x12c
 800598a:	e9d7 124a 	ldrd	r1, r2, [r7, #296]	@ 0x128
 800598e:	e9c3 1200 	strd	r1, r2, [r3]
 8005992:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005996:	3305      	adds	r3, #5
 8005998:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 800599c:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 80059a0:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80059a4:	4413      	add	r3, r2
 80059a6:	00da      	lsls	r2, r3, #3
 80059a8:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80059ac:	4413      	add	r3, r2
 80059ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 80059b2:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80059b6:	1d19      	adds	r1, r3, #4
 80059b8:	4bc5      	ldr	r3, [pc, #788]	@ (8005cd0 <masked_keccak+0x1e7c>)
 80059ba:	fb83 2301 	smull	r2, r3, r3, r1
 80059be:	105a      	asrs	r2, r3, #1
 80059c0:	17cb      	asrs	r3, r1, #31
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	441a      	add	r2, r3
 80059ca:	1a8b      	subs	r3, r1, r2
 80059cc:	00db      	lsls	r3, r3, #3
 80059ce:	3388      	adds	r3, #136	@ 0x88
 80059d0:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80059d4:	4413      	add	r3, r2
 80059d6:	3b80      	subs	r3, #128	@ 0x80
 80059d8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80059dc:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80059e0:	1c59      	adds	r1, r3, #1
 80059e2:	4bbb      	ldr	r3, [pc, #748]	@ (8005cd0 <masked_keccak+0x1e7c>)
 80059e4:	fb83 2301 	smull	r2, r3, r3, r1
 80059e8:	105a      	asrs	r2, r3, #1
 80059ea:	17cb      	asrs	r3, r1, #31
 80059ec:	1ad3      	subs	r3, r2, r3
 80059ee:	461a      	mov	r2, r3
 80059f0:	0092      	lsls	r2, r2, #2
 80059f2:	441a      	add	r2, r3
 80059f4:	1a8b      	subs	r3, r1, r2
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	3388      	adds	r3, #136	@ 0x88
 80059fa:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80059fe:	4413      	add	r3, r2
 8005a00:	3b80      	subs	r3, #128	@ 0x80
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	0fd0      	lsrs	r0, r2, #31
 8005a08:	0059      	lsls	r1, r3, #1
 8005a0a:	4301      	orrs	r1, r0
 8005a0c:	f8c7 1124 	str.w	r1, [r7, #292]	@ 0x124
 8005a10:	0fd9      	lsrs	r1, r3, #31
 8005a12:	0053      	lsls	r3, r2, #1
 8005a14:	430b      	orrs	r3, r1
 8005a16:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8005a1a:	e9d7 1248 	ldrd	r1, r2, [r7, #288]	@ 0x120
 8005a1e:	460b      	mov	r3, r1
 8005a20:	4063      	eors	r3, r4
 8005a22:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
 8005a26:	4613      	mov	r3, r2
 8005a28:	406b      	eors	r3, r5
 8005a2a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8005a2e:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005a32:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005a36:	4413      	add	r3, r2
 8005a38:	00da      	lsls	r2, r3, #3
 8005a3a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005a3e:	4413      	add	r3, r2
 8005a40:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8005a44:	4602      	mov	r2, r0
 8005a46:	ea88 0202 	eor.w	r2, r8, r2
 8005a4a:	f8c7 2110 	str.w	r2, [r7, #272]	@ 0x110
 8005a4e:	460a      	mov	r2, r1
 8005a50:	ea89 0202 	eor.w	r2, r9, r2
 8005a54:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 8005a58:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8005a5c:	e9c3 1200 	strd	r1, r2, [r3]
 8005a60:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005a64:	3305      	adds	r3, #5
 8005a66:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005a6a:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005a6e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005a72:	4413      	add	r3, r2
 8005a74:	00da      	lsls	r2, r3, #3
 8005a76:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005a7a:	4413      	add	r3, r2
 8005a7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a80:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005a84:	1d19      	adds	r1, r3, #4
 8005a86:	4b92      	ldr	r3, [pc, #584]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005a88:	fb83 2301 	smull	r2, r3, r3, r1
 8005a8c:	105a      	asrs	r2, r3, #1
 8005a8e:	17cb      	asrs	r3, r1, #31
 8005a90:	1ad3      	subs	r3, r2, r3
 8005a92:	461a      	mov	r2, r3
 8005a94:	0092      	lsls	r2, r2, #2
 8005a96:	441a      	add	r2, r3
 8005a98:	1a8b      	subs	r3, r1, r2
 8005a9a:	00db      	lsls	r3, r3, #3
 8005a9c:	3388      	adds	r3, #136	@ 0x88
 8005a9e:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005aa2:	4413      	add	r3, r2
 8005aa4:	3b80      	subs	r3, #128	@ 0x80
 8005aa6:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005aaa:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005aae:	1c59      	adds	r1, r3, #1
 8005ab0:	4b87      	ldr	r3, [pc, #540]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005ab2:	fb83 2301 	smull	r2, r3, r3, r1
 8005ab6:	105a      	asrs	r2, r3, #1
 8005ab8:	17cb      	asrs	r3, r1, #31
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	461a      	mov	r2, r3
 8005abe:	0092      	lsls	r2, r2, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	1a8b      	subs	r3, r1, r2
 8005ac4:	00db      	lsls	r3, r3, #3
 8005ac6:	3388      	adds	r3, #136	@ 0x88
 8005ac8:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005acc:	4413      	add	r3, r2
 8005ace:	3b80      	subs	r3, #128	@ 0x80
 8005ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad4:	0fd0      	lsrs	r0, r2, #31
 8005ad6:	0059      	lsls	r1, r3, #1
 8005ad8:	4301      	orrs	r1, r0
 8005ada:	f8c7 110c 	str.w	r1, [r7, #268]	@ 0x10c
 8005ade:	0fd9      	lsrs	r1, r3, #31
 8005ae0:	0053      	lsls	r3, r2, #1
 8005ae2:	430b      	orrs	r3, r1
 8005ae4:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8005ae8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8005aec:	460b      	mov	r3, r1
 8005aee:	4063      	eors	r3, r4
 8005af0:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8005af4:	4613      	mov	r3, r2
 8005af6:	406b      	eors	r3, r5
 8005af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8005afc:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005b00:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005b04:	4413      	add	r3, r2
 8005b06:	00da      	lsls	r2, r3, #3
 8005b08:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005b0c:	4413      	add	r3, r2
 8005b0e:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 8005b12:	4602      	mov	r2, r0
 8005b14:	ea88 0202 	eor.w	r2, r8, r2
 8005b18:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 8005b1c:	460a      	mov	r2, r1
 8005b1e:	ea89 0202 	eor.w	r2, r9, r2
 8005b22:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 8005b26:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005b2a:	e9c3 1200 	strd	r1, r2, [r3]
 8005b2e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005b32:	3305      	adds	r3, #5
 8005b34:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005b38:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005b3c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005b40:	4413      	add	r3, r2
 8005b42:	00da      	lsls	r2, r3, #3
 8005b44:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005b48:	4413      	add	r3, r2
 8005b4a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b4e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005b52:	1d19      	adds	r1, r3, #4
 8005b54:	4b5e      	ldr	r3, [pc, #376]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005b56:	fb83 2301 	smull	r2, r3, r3, r1
 8005b5a:	105a      	asrs	r2, r3, #1
 8005b5c:	17cb      	asrs	r3, r1, #31
 8005b5e:	1ad3      	subs	r3, r2, r3
 8005b60:	461a      	mov	r2, r3
 8005b62:	0092      	lsls	r2, r2, #2
 8005b64:	441a      	add	r2, r3
 8005b66:	1a8b      	subs	r3, r1, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	3388      	adds	r3, #136	@ 0x88
 8005b6c:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005b70:	4413      	add	r3, r2
 8005b72:	3b80      	subs	r3, #128	@ 0x80
 8005b74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005b78:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005b7c:	1c59      	adds	r1, r3, #1
 8005b7e:	4b54      	ldr	r3, [pc, #336]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005b80:	fb83 2301 	smull	r2, r3, r3, r1
 8005b84:	105a      	asrs	r2, r3, #1
 8005b86:	17cb      	asrs	r3, r1, #31
 8005b88:	1ad3      	subs	r3, r2, r3
 8005b8a:	461a      	mov	r2, r3
 8005b8c:	0092      	lsls	r2, r2, #2
 8005b8e:	441a      	add	r2, r3
 8005b90:	1a8b      	subs	r3, r1, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	3388      	adds	r3, #136	@ 0x88
 8005b96:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005b9a:	4413      	add	r3, r2
 8005b9c:	3b80      	subs	r3, #128	@ 0x80
 8005b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ba2:	0fd0      	lsrs	r0, r2, #31
 8005ba4:	0059      	lsls	r1, r3, #1
 8005ba6:	4301      	orrs	r1, r0
 8005ba8:	f8c7 10f4 	str.w	r1, [r7, #244]	@ 0xf4
 8005bac:	0fd9      	lsrs	r1, r3, #31
 8005bae:	0053      	lsls	r3, r2, #1
 8005bb0:	430b      	orrs	r3, r1
 8005bb2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005bb6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005bba:	460b      	mov	r3, r1
 8005bbc:	4063      	eors	r3, r4
 8005bbe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	406b      	eors	r3, r5
 8005bc6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005bca:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005bce:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005bd2:	4413      	add	r3, r2
 8005bd4:	00da      	lsls	r2, r3, #3
 8005bd6:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005bda:	4413      	add	r3, r2
 8005bdc:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8005be0:	4602      	mov	r2, r0
 8005be2:	ea88 0202 	eor.w	r2, r8, r2
 8005be6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8005bea:	460a      	mov	r2, r1
 8005bec:	ea89 0202 	eor.w	r2, r9, r2
 8005bf0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8005bf4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005bf8:	e9c3 1200 	strd	r1, r2, [r3]
 8005bfc:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005c00:	3305      	adds	r3, #5
 8005c02:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005c06:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005c0a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005c0e:	4413      	add	r3, r2
 8005c10:	00da      	lsls	r2, r3, #3
 8005c12:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005c16:	4413      	add	r3, r2
 8005c18:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c1c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005c20:	1d19      	adds	r1, r3, #4
 8005c22:	4b2b      	ldr	r3, [pc, #172]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005c24:	fb83 2301 	smull	r2, r3, r3, r1
 8005c28:	105a      	asrs	r2, r3, #1
 8005c2a:	17cb      	asrs	r3, r1, #31
 8005c2c:	1ad3      	subs	r3, r2, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	0092      	lsls	r2, r2, #2
 8005c32:	441a      	add	r2, r3
 8005c34:	1a8b      	subs	r3, r1, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	3388      	adds	r3, #136	@ 0x88
 8005c3a:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005c3e:	4413      	add	r3, r2
 8005c40:	3b80      	subs	r3, #128	@ 0x80
 8005c42:	e9d3 4500 	ldrd	r4, r5, [r3]
 8005c46:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005c4a:	1c59      	adds	r1, r3, #1
 8005c4c:	4b20      	ldr	r3, [pc, #128]	@ (8005cd0 <masked_keccak+0x1e7c>)
 8005c4e:	fb83 2301 	smull	r2, r3, r3, r1
 8005c52:	105a      	asrs	r2, r3, #1
 8005c54:	17cb      	asrs	r3, r1, #31
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	461a      	mov	r2, r3
 8005c5a:	0092      	lsls	r2, r2, #2
 8005c5c:	441a      	add	r2, r3
 8005c5e:	1a8b      	subs	r3, r1, r2
 8005c60:	00db      	lsls	r3, r3, #3
 8005c62:	3388      	adds	r3, #136	@ 0x88
 8005c64:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 8005c68:	4413      	add	r3, r2
 8005c6a:	3b80      	subs	r3, #128	@ 0x80
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	0fd0      	lsrs	r0, r2, #31
 8005c72:	0059      	lsls	r1, r3, #1
 8005c74:	4301      	orrs	r1, r0
 8005c76:	f8c7 10dc 	str.w	r1, [r7, #220]	@ 0xdc
 8005c7a:	0fd9      	lsrs	r1, r3, #31
 8005c7c:	0053      	lsls	r3, r2, #1
 8005c7e:	430b      	orrs	r3, r1
 8005c80:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c84:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c88:	460b      	mov	r3, r1
 8005c8a:	4063      	eors	r3, r4
 8005c8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c90:	4613      	mov	r3, r2
 8005c92:	406b      	eors	r3, r5
 8005c94:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c98:	f897 25e6 	ldrb.w	r2, [r7, #1510]	@ 0x5e6
 8005c9c:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005ca0:	4413      	add	r3, r2
 8005ca2:	00da      	lsls	r2, r3, #3
 8005ca4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005ca8:	4413      	add	r3, r2
 8005caa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	@ 0xd0
 8005cae:	4602      	mov	r2, r0
 8005cb0:	ea88 0202 	eor.w	r2, r8, r2
 8005cb4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8005cb8:	460a      	mov	r2, r1
 8005cba:	ea89 0202 	eor.w	r2, r9, r2
 8005cbe:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8005cc2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005cc6:	e9c3 1200 	strd	r1, r2, [r3]
 8005cca:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8005cce:	e001      	b.n	8005cd4 <masked_keccak+0x1e80>
 8005cd0:	66666667 	.word	0x66666667
 8005cd4:	3305      	adds	r3, #5
 8005cd6:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8005cda:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005cde:	3301      	adds	r3, #1
 8005ce0:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
           FOR5(y, 5, a[y + x] ^= b[(x + 4) % 5] ^ ROL(b[(x + 1) % 5], 1);))
      // Rho and pi
      t = a[1];
 8005ce4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005ce8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8005cec:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8005cf0:	e9c1 2300 	strd	r2, r3, [r1]
      x = 0;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
      REPEAT24(b[0] = a[pi[x]]; a[pi[x]] = ROL(t, rho[x]); t = b[0]; x++;)
 8005cfa:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005cfe:	4bf1      	ldr	r3, [pc, #964]	@ (80060c4 <masked_keccak+0x2270>)
 8005d00:	5c9b      	ldrb	r3, [r3, r2]
 8005d02:	00da      	lsls	r2, r3, #3
 8005d04:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005d08:	4413      	add	r3, r2
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005d12:	e9c1 2300 	strd	r2, r3, [r1]
 8005d16:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005d1a:	4beb      	ldr	r3, [pc, #940]	@ (80060c8 <masked_keccak+0x2274>)
 8005d1c:	5c9b      	ldrb	r3, [r3, r2]
 8005d1e:	461c      	mov	r4, r3
 8005d20:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005d24:	4be7      	ldr	r3, [pc, #924]	@ (80060c4 <masked_keccak+0x2270>)
 8005d26:	5c9b      	ldrb	r3, [r3, r2]
 8005d28:	00da      	lsls	r2, r3, #3
 8005d2a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005d2e:	189d      	adds	r5, r3, r2
 8005d30:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8005d34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d38:	f1a4 0120 	sub.w	r1, r4, #32
 8005d3c:	f1c4 0020 	rsb	r0, r4, #32
 8005d40:	fa03 f604 	lsl.w	r6, r3, r4
 8005d44:	f8c7 64a4 	str.w	r6, [r7, #1188]	@ 0x4a4
 8005d48:	fa02 f101 	lsl.w	r1, r2, r1
 8005d4c:	f8d7 64a4 	ldr.w	r6, [r7, #1188]	@ 0x4a4
 8005d50:	430e      	orrs	r6, r1
 8005d52:	f8c7 64a4 	str.w	r6, [r7, #1188]	@ 0x4a4
 8005d56:	fa22 f000 	lsr.w	r0, r2, r0
 8005d5a:	f8d7 14a4 	ldr.w	r1, [r7, #1188]	@ 0x4a4
 8005d5e:	4301      	orrs	r1, r0
 8005d60:	f8c7 14a4 	str.w	r1, [r7, #1188]	@ 0x4a4
 8005d64:	fa02 f104 	lsl.w	r1, r2, r4
 8005d68:	f8c7 14a0 	str.w	r1, [r7, #1184]	@ 0x4a0
 8005d6c:	4264      	negs	r4, r4
 8005d6e:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8005d72:	f1c4 0120 	rsb	r1, r4, #32
 8005d76:	f1a4 0020 	sub.w	r0, r4, #32
 8005d7a:	fa22 fa04 	lsr.w	sl, r2, r4
 8005d7e:	fa03 f101 	lsl.w	r1, r3, r1
 8005d82:	ea4a 0a01 	orr.w	sl, sl, r1
 8005d86:	fa23 f000 	lsr.w	r0, r3, r0
 8005d8a:	ea4a 0a00 	orr.w	sl, sl, r0
 8005d8e:	fa23 fb04 	lsr.w	fp, r3, r4
 8005d92:	f507 6394 	add.w	r3, r7, #1184	@ 0x4a0
 8005d96:	e9d3 1200 	ldrd	r1, r2, [r3]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	ea43 030a 	orr.w	r3, r3, sl
 8005da0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005da4:	4613      	mov	r3, r2
 8005da6:	ea43 030b 	orr.w	r3, r3, fp
 8005daa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005dae:	e9d7 ab2e 	ldrd	sl, fp, [r7, #184]	@ 0xb8
 8005db2:	e9c5 ab00 	strd	sl, fp, [r5]
 8005db6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dbe:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8005dc2:	e9c1 2300 	strd	r2, r3, [r1]
 8005dc6:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005dca:	3301      	adds	r3, #1
 8005dcc:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8005dd0:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005dd4:	4bbb      	ldr	r3, [pc, #748]	@ (80060c4 <masked_keccak+0x2270>)
 8005dd6:	5c9b      	ldrb	r3, [r3, r2]
 8005dd8:	00da      	lsls	r2, r3, #3
 8005dda:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005dde:	4413      	add	r3, r2
 8005de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de4:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005de8:	e9c1 2300 	strd	r2, r3, [r1]
 8005dec:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005df0:	4bb5      	ldr	r3, [pc, #724]	@ (80060c8 <masked_keccak+0x2274>)
 8005df2:	5c9b      	ldrb	r3, [r3, r2]
 8005df4:	461c      	mov	r4, r3
 8005df6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005dfa:	4bb2      	ldr	r3, [pc, #712]	@ (80060c4 <masked_keccak+0x2270>)
 8005dfc:	5c9b      	ldrb	r3, [r3, r2]
 8005dfe:	00da      	lsls	r2, r3, #3
 8005e00:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005e04:	189d      	adds	r5, r3, r2
 8005e06:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	f1a4 0120 	sub.w	r1, r4, #32
 8005e12:	f1c4 0020 	rsb	r0, r4, #32
 8005e16:	fa03 f604 	lsl.w	r6, r3, r4
 8005e1a:	f8c7 649c 	str.w	r6, [r7, #1180]	@ 0x49c
 8005e1e:	fa02 f101 	lsl.w	r1, r2, r1
 8005e22:	f8d7 649c 	ldr.w	r6, [r7, #1180]	@ 0x49c
 8005e26:	430e      	orrs	r6, r1
 8005e28:	f8c7 649c 	str.w	r6, [r7, #1180]	@ 0x49c
 8005e2c:	fa22 f000 	lsr.w	r0, r2, r0
 8005e30:	f8d7 149c 	ldr.w	r1, [r7, #1180]	@ 0x49c
 8005e34:	4301      	orrs	r1, r0
 8005e36:	f8c7 149c 	str.w	r1, [r7, #1180]	@ 0x49c
 8005e3a:	fa02 f104 	lsl.w	r1, r2, r4
 8005e3e:	f8c7 1498 	str.w	r1, [r7, #1176]	@ 0x498
 8005e42:	4264      	negs	r4, r4
 8005e44:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8005e48:	f1c4 0120 	rsb	r1, r4, #32
 8005e4c:	f1a4 0020 	sub.w	r0, r4, #32
 8005e50:	fa22 f604 	lsr.w	r6, r2, r4
 8005e54:	f8c7 6558 	str.w	r6, [r7, #1368]	@ 0x558
 8005e58:	fa03 f101 	lsl.w	r1, r3, r1
 8005e5c:	f8d7 6558 	ldr.w	r6, [r7, #1368]	@ 0x558
 8005e60:	430e      	orrs	r6, r1
 8005e62:	f8c7 6558 	str.w	r6, [r7, #1368]	@ 0x558
 8005e66:	fa23 f000 	lsr.w	r0, r3, r0
 8005e6a:	f8d7 1558 	ldr.w	r1, [r7, #1368]	@ 0x558
 8005e6e:	4301      	orrs	r1, r0
 8005e70:	f8c7 1558 	str.w	r1, [r7, #1368]	@ 0x558
 8005e74:	40e3      	lsrs	r3, r4
 8005e76:	f8c7 355c 	str.w	r3, [r7, #1372]	@ 0x55c
 8005e7a:	f507 6393 	add.w	r3, r7, #1176	@ 0x498
 8005e7e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e82:	4643      	mov	r3, r8
 8005e84:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 8005e88:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005e94:	460b      	mov	r3, r1
 8005e96:	464a      	mov	r2, r9
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e9e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8005ea2:	f507 62ab 	add.w	r2, r7, #1368	@ 0x558
 8005ea6:	e9c2 3400 	strd	r3, r4, [r2]
 8005eaa:	e9c5 3400 	strd	r3, r4, [r5]
 8005eae:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8005eba:	e9c1 2300 	strd	r2, r3, [r1]
 8005ebe:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8005ec8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005ecc:	4b7d      	ldr	r3, [pc, #500]	@ (80060c4 <masked_keccak+0x2270>)
 8005ece:	5c9b      	ldrb	r3, [r3, r2]
 8005ed0:	00da      	lsls	r2, r3, #3
 8005ed2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005ed6:	4413      	add	r3, r2
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005ee0:	e9c1 2300 	strd	r2, r3, [r1]
 8005ee4:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005ee8:	4b77      	ldr	r3, [pc, #476]	@ (80060c8 <masked_keccak+0x2274>)
 8005eea:	5c9b      	ldrb	r3, [r3, r2]
 8005eec:	461c      	mov	r4, r3
 8005eee:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005ef2:	4b74      	ldr	r3, [pc, #464]	@ (80060c4 <masked_keccak+0x2270>)
 8005ef4:	5c9b      	ldrb	r3, [r3, r2]
 8005ef6:	00da      	lsls	r2, r3, #3
 8005ef8:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005efc:	189d      	adds	r5, r3, r2
 8005efe:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	f1a4 0120 	sub.w	r1, r4, #32
 8005f0a:	f1c4 0020 	rsb	r0, r4, #32
 8005f0e:	fa03 f604 	lsl.w	r6, r3, r4
 8005f12:	f8c7 6494 	str.w	r6, [r7, #1172]	@ 0x494
 8005f16:	fa02 f101 	lsl.w	r1, r2, r1
 8005f1a:	f8d7 6494 	ldr.w	r6, [r7, #1172]	@ 0x494
 8005f1e:	430e      	orrs	r6, r1
 8005f20:	f8c7 6494 	str.w	r6, [r7, #1172]	@ 0x494
 8005f24:	fa22 f000 	lsr.w	r0, r2, r0
 8005f28:	f8d7 1494 	ldr.w	r1, [r7, #1172]	@ 0x494
 8005f2c:	4301      	orrs	r1, r0
 8005f2e:	f8c7 1494 	str.w	r1, [r7, #1172]	@ 0x494
 8005f32:	fa02 f104 	lsl.w	r1, r2, r4
 8005f36:	f8c7 1490 	str.w	r1, [r7, #1168]	@ 0x490
 8005f3a:	4264      	negs	r4, r4
 8005f3c:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8005f40:	f1c4 0120 	rsb	r1, r4, #32
 8005f44:	f1a4 0020 	sub.w	r0, r4, #32
 8005f48:	fa22 f604 	lsr.w	r6, r2, r4
 8005f4c:	f8c7 6550 	str.w	r6, [r7, #1360]	@ 0x550
 8005f50:	fa03 f101 	lsl.w	r1, r3, r1
 8005f54:	f8d7 6550 	ldr.w	r6, [r7, #1360]	@ 0x550
 8005f58:	430e      	orrs	r6, r1
 8005f5a:	f8c7 6550 	str.w	r6, [r7, #1360]	@ 0x550
 8005f5e:	fa23 f000 	lsr.w	r0, r3, r0
 8005f62:	f8d7 1550 	ldr.w	r1, [r7, #1360]	@ 0x550
 8005f66:	4301      	orrs	r1, r0
 8005f68:	f8c7 1550 	str.w	r1, [r7, #1360]	@ 0x550
 8005f6c:	40e3      	lsrs	r3, r4
 8005f6e:	f8c7 3554 	str.w	r3, [r7, #1364]	@ 0x554
 8005f72:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8005f76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f7a:	4643      	mov	r3, r8
 8005f7c:	f507 62aa 	add.w	r2, r7, #1360	@ 0x550
 8005f80:	e9d2 0100 	ldrd	r0, r1, [r2]
 8005f84:	4602      	mov	r2, r0
 8005f86:	4313      	orrs	r3, r2
 8005f88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	464a      	mov	r2, r9
 8005f90:	4313      	orrs	r3, r2
 8005f92:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005f96:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	@ 0xa8
 8005f9a:	f507 62aa 	add.w	r2, r7, #1360	@ 0x550
 8005f9e:	e9c2 3400 	strd	r3, r4, [r2]
 8005fa2:	e9c5 3400 	strd	r3, r4, [r5]
 8005fa6:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8005faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fae:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8005fb2:	e9c1 2300 	strd	r2, r3, [r1]
 8005fb6:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8005fc0:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005fc4:	4b3f      	ldr	r3, [pc, #252]	@ (80060c4 <masked_keccak+0x2270>)
 8005fc6:	5c9b      	ldrb	r3, [r3, r2]
 8005fc8:	00da      	lsls	r2, r3, #3
 8005fca:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005fce:	4413      	add	r3, r2
 8005fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fd4:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8005fd8:	e9c1 2300 	strd	r2, r3, [r1]
 8005fdc:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005fe0:	4b39      	ldr	r3, [pc, #228]	@ (80060c8 <masked_keccak+0x2274>)
 8005fe2:	5c9b      	ldrb	r3, [r3, r2]
 8005fe4:	461c      	mov	r4, r3
 8005fe6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8005fea:	4b36      	ldr	r3, [pc, #216]	@ (80060c4 <masked_keccak+0x2270>)
 8005fec:	5c9b      	ldrb	r3, [r3, r2]
 8005fee:	00da      	lsls	r2, r3, #3
 8005ff0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8005ff4:	189d      	adds	r5, r3, r2
 8005ff6:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8005ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ffe:	f1a4 0120 	sub.w	r1, r4, #32
 8006002:	f1c4 0020 	rsb	r0, r4, #32
 8006006:	fa03 f604 	lsl.w	r6, r3, r4
 800600a:	f8c7 648c 	str.w	r6, [r7, #1164]	@ 0x48c
 800600e:	fa02 f101 	lsl.w	r1, r2, r1
 8006012:	f8d7 648c 	ldr.w	r6, [r7, #1164]	@ 0x48c
 8006016:	430e      	orrs	r6, r1
 8006018:	f8c7 648c 	str.w	r6, [r7, #1164]	@ 0x48c
 800601c:	fa22 f000 	lsr.w	r0, r2, r0
 8006020:	f8d7 148c 	ldr.w	r1, [r7, #1164]	@ 0x48c
 8006024:	4301      	orrs	r1, r0
 8006026:	f8c7 148c 	str.w	r1, [r7, #1164]	@ 0x48c
 800602a:	fa02 f104 	lsl.w	r1, r2, r4
 800602e:	f8c7 1488 	str.w	r1, [r7, #1160]	@ 0x488
 8006032:	4264      	negs	r4, r4
 8006034:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006038:	f1c4 0120 	rsb	r1, r4, #32
 800603c:	f1a4 0020 	sub.w	r0, r4, #32
 8006040:	fa22 f604 	lsr.w	r6, r2, r4
 8006044:	f8c7 6548 	str.w	r6, [r7, #1352]	@ 0x548
 8006048:	fa03 f101 	lsl.w	r1, r3, r1
 800604c:	f8d7 6548 	ldr.w	r6, [r7, #1352]	@ 0x548
 8006050:	430e      	orrs	r6, r1
 8006052:	f8c7 6548 	str.w	r6, [r7, #1352]	@ 0x548
 8006056:	fa23 f000 	lsr.w	r0, r3, r0
 800605a:	f8d7 1548 	ldr.w	r1, [r7, #1352]	@ 0x548
 800605e:	4301      	orrs	r1, r0
 8006060:	f8c7 1548 	str.w	r1, [r7, #1352]	@ 0x548
 8006064:	40e3      	lsrs	r3, r4
 8006066:	f8c7 354c 	str.w	r3, [r7, #1356]	@ 0x54c
 800606a:	f507 6391 	add.w	r3, r7, #1160	@ 0x488
 800606e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006072:	4643      	mov	r3, r8
 8006074:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8006078:	e9d2 0100 	ldrd	r0, r1, [r2]
 800607c:	4602      	mov	r2, r0
 800607e:	4313      	orrs	r3, r2
 8006080:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006084:	460b      	mov	r3, r1
 8006086:	464a      	mov	r2, r9
 8006088:	4313      	orrs	r3, r2
 800608a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800608e:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	@ 0xa0
 8006092:	f507 62a9 	add.w	r2, r7, #1352	@ 0x548
 8006096:	e9c2 3400 	strd	r3, r4, [r2]
 800609a:	e9c5 3400 	strd	r3, r4, [r5]
 800609e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80060a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a6:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 80060aa:	e9c1 2300 	strd	r2, r3, [r1]
 80060ae:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80060b2:	3301      	adds	r3, #1
 80060b4:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80060b8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80060bc:	4b01      	ldr	r3, [pc, #4]	@ (80060c4 <masked_keccak+0x2270>)
 80060be:	5c9b      	ldrb	r3, [r3, r2]
 80060c0:	00da      	lsls	r2, r3, #3
 80060c2:	e003      	b.n	80060cc <masked_keccak+0x2278>
 80060c4:	08012020 	.word	0x08012020
 80060c8:	08012008 	.word	0x08012008
 80060cc:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80060d0:	4413      	add	r3, r2
 80060d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060d6:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80060da:	e9c1 2300 	strd	r2, r3, [r1]
 80060de:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80060e2:	4bf2      	ldr	r3, [pc, #968]	@ (80064ac <masked_keccak+0x2658>)
 80060e4:	5c9b      	ldrb	r3, [r3, r2]
 80060e6:	461c      	mov	r4, r3
 80060e8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80060ec:	4bf0      	ldr	r3, [pc, #960]	@ (80064b0 <masked_keccak+0x265c>)
 80060ee:	5c9b      	ldrb	r3, [r3, r2]
 80060f0:	00da      	lsls	r2, r3, #3
 80060f2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80060f6:	189d      	adds	r5, r3, r2
 80060f8:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80060fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006100:	f1a4 0120 	sub.w	r1, r4, #32
 8006104:	f1c4 0020 	rsb	r0, r4, #32
 8006108:	fa03 f604 	lsl.w	r6, r3, r4
 800610c:	f8c7 6484 	str.w	r6, [r7, #1156]	@ 0x484
 8006110:	fa02 f101 	lsl.w	r1, r2, r1
 8006114:	f8d7 6484 	ldr.w	r6, [r7, #1156]	@ 0x484
 8006118:	430e      	orrs	r6, r1
 800611a:	f8c7 6484 	str.w	r6, [r7, #1156]	@ 0x484
 800611e:	fa22 f000 	lsr.w	r0, r2, r0
 8006122:	f8d7 1484 	ldr.w	r1, [r7, #1156]	@ 0x484
 8006126:	4301      	orrs	r1, r0
 8006128:	f8c7 1484 	str.w	r1, [r7, #1156]	@ 0x484
 800612c:	fa02 f104 	lsl.w	r1, r2, r4
 8006130:	f8c7 1480 	str.w	r1, [r7, #1152]	@ 0x480
 8006134:	4264      	negs	r4, r4
 8006136:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 800613a:	f1c4 0120 	rsb	r1, r4, #32
 800613e:	f1a4 0020 	sub.w	r0, r4, #32
 8006142:	fa22 f604 	lsr.w	r6, r2, r4
 8006146:	f8c7 6540 	str.w	r6, [r7, #1344]	@ 0x540
 800614a:	fa03 f101 	lsl.w	r1, r3, r1
 800614e:	f8d7 6540 	ldr.w	r6, [r7, #1344]	@ 0x540
 8006152:	430e      	orrs	r6, r1
 8006154:	f8c7 6540 	str.w	r6, [r7, #1344]	@ 0x540
 8006158:	fa23 f000 	lsr.w	r0, r3, r0
 800615c:	f8d7 1540 	ldr.w	r1, [r7, #1344]	@ 0x540
 8006160:	4301      	orrs	r1, r0
 8006162:	f8c7 1540 	str.w	r1, [r7, #1344]	@ 0x540
 8006166:	40e3      	lsrs	r3, r4
 8006168:	f8c7 3544 	str.w	r3, [r7, #1348]	@ 0x544
 800616c:	f507 6390 	add.w	r3, r7, #1152	@ 0x480
 8006170:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006174:	4643      	mov	r3, r8
 8006176:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 800617a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800617e:	4602      	mov	r2, r0
 8006180:	4313      	orrs	r3, r2
 8006182:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006186:	460b      	mov	r3, r1
 8006188:	464a      	mov	r2, r9
 800618a:	4313      	orrs	r3, r2
 800618c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006190:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	@ 0x98
 8006194:	f507 62a8 	add.w	r2, r7, #1344	@ 0x540
 8006198:	e9c2 3400 	strd	r3, r4, [r2]
 800619c:	e9c5 3400 	strd	r3, r4, [r5]
 80061a0:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 80061ac:	e9c1 2300 	strd	r2, r3, [r1]
 80061b0:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80061b4:	3301      	adds	r3, #1
 80061b6:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80061ba:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80061be:	4bbc      	ldr	r3, [pc, #752]	@ (80064b0 <masked_keccak+0x265c>)
 80061c0:	5c9b      	ldrb	r3, [r3, r2]
 80061c2:	00da      	lsls	r2, r3, #3
 80061c4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80061c8:	4413      	add	r3, r2
 80061ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ce:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80061d2:	e9c1 2300 	strd	r2, r3, [r1]
 80061d6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80061da:	4bb4      	ldr	r3, [pc, #720]	@ (80064ac <masked_keccak+0x2658>)
 80061dc:	5c9b      	ldrb	r3, [r3, r2]
 80061de:	461c      	mov	r4, r3
 80061e0:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80061e4:	4bb2      	ldr	r3, [pc, #712]	@ (80064b0 <masked_keccak+0x265c>)
 80061e6:	5c9b      	ldrb	r3, [r3, r2]
 80061e8:	00da      	lsls	r2, r3, #3
 80061ea:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80061ee:	189d      	adds	r5, r3, r2
 80061f0:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80061f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061f8:	f1a4 0120 	sub.w	r1, r4, #32
 80061fc:	f1c4 0020 	rsb	r0, r4, #32
 8006200:	fa03 f604 	lsl.w	r6, r3, r4
 8006204:	f8c7 647c 	str.w	r6, [r7, #1148]	@ 0x47c
 8006208:	fa02 f101 	lsl.w	r1, r2, r1
 800620c:	f8d7 647c 	ldr.w	r6, [r7, #1148]	@ 0x47c
 8006210:	430e      	orrs	r6, r1
 8006212:	f8c7 647c 	str.w	r6, [r7, #1148]	@ 0x47c
 8006216:	fa22 f000 	lsr.w	r0, r2, r0
 800621a:	f8d7 147c 	ldr.w	r1, [r7, #1148]	@ 0x47c
 800621e:	4301      	orrs	r1, r0
 8006220:	f8c7 147c 	str.w	r1, [r7, #1148]	@ 0x47c
 8006224:	fa02 f104 	lsl.w	r1, r2, r4
 8006228:	f8c7 1478 	str.w	r1, [r7, #1144]	@ 0x478
 800622c:	4264      	negs	r4, r4
 800622e:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006232:	f1c4 0120 	rsb	r1, r4, #32
 8006236:	f1a4 0020 	sub.w	r0, r4, #32
 800623a:	fa22 f604 	lsr.w	r6, r2, r4
 800623e:	f8c7 6538 	str.w	r6, [r7, #1336]	@ 0x538
 8006242:	fa03 f101 	lsl.w	r1, r3, r1
 8006246:	f8d7 6538 	ldr.w	r6, [r7, #1336]	@ 0x538
 800624a:	430e      	orrs	r6, r1
 800624c:	f8c7 6538 	str.w	r6, [r7, #1336]	@ 0x538
 8006250:	fa23 f000 	lsr.w	r0, r3, r0
 8006254:	f8d7 1538 	ldr.w	r1, [r7, #1336]	@ 0x538
 8006258:	4301      	orrs	r1, r0
 800625a:	f8c7 1538 	str.w	r1, [r7, #1336]	@ 0x538
 800625e:	40e3      	lsrs	r3, r4
 8006260:	f8c7 353c 	str.w	r3, [r7, #1340]	@ 0x53c
 8006264:	f507 638f 	add.w	r3, r7, #1144	@ 0x478
 8006268:	e9d3 8900 	ldrd	r8, r9, [r3]
 800626c:	4643      	mov	r3, r8
 800626e:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8006272:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006276:	4602      	mov	r2, r0
 8006278:	4313      	orrs	r3, r2
 800627a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800627e:	460b      	mov	r3, r1
 8006280:	464a      	mov	r2, r9
 8006282:	4313      	orrs	r3, r2
 8006284:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006288:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	@ 0x90
 800628c:	f507 62a7 	add.w	r2, r7, #1336	@ 0x538
 8006290:	e9c2 3400 	strd	r3, r4, [r2]
 8006294:	e9c5 3400 	strd	r3, r4, [r5]
 8006298:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800629c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a0:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 80062a4:	e9c1 2300 	strd	r2, r3, [r1]
 80062a8:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80062ac:	3301      	adds	r3, #1
 80062ae:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80062b2:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80062b6:	4b7e      	ldr	r3, [pc, #504]	@ (80064b0 <masked_keccak+0x265c>)
 80062b8:	5c9b      	ldrb	r3, [r3, r2]
 80062ba:	00da      	lsls	r2, r3, #3
 80062bc:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80062c0:	4413      	add	r3, r2
 80062c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062c6:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80062ca:	e9c1 2300 	strd	r2, r3, [r1]
 80062ce:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80062d2:	4b76      	ldr	r3, [pc, #472]	@ (80064ac <masked_keccak+0x2658>)
 80062d4:	5c9b      	ldrb	r3, [r3, r2]
 80062d6:	461c      	mov	r4, r3
 80062d8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80062dc:	4b74      	ldr	r3, [pc, #464]	@ (80064b0 <masked_keccak+0x265c>)
 80062de:	5c9b      	ldrb	r3, [r3, r2]
 80062e0:	00da      	lsls	r2, r3, #3
 80062e2:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80062e6:	189d      	adds	r5, r3, r2
 80062e8:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80062ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062f0:	f1a4 0120 	sub.w	r1, r4, #32
 80062f4:	f1c4 0020 	rsb	r0, r4, #32
 80062f8:	fa03 f604 	lsl.w	r6, r3, r4
 80062fc:	f8c7 6474 	str.w	r6, [r7, #1140]	@ 0x474
 8006300:	fa02 f101 	lsl.w	r1, r2, r1
 8006304:	f8d7 6474 	ldr.w	r6, [r7, #1140]	@ 0x474
 8006308:	430e      	orrs	r6, r1
 800630a:	f8c7 6474 	str.w	r6, [r7, #1140]	@ 0x474
 800630e:	fa22 f000 	lsr.w	r0, r2, r0
 8006312:	f8d7 1474 	ldr.w	r1, [r7, #1140]	@ 0x474
 8006316:	4301      	orrs	r1, r0
 8006318:	f8c7 1474 	str.w	r1, [r7, #1140]	@ 0x474
 800631c:	fa02 f104 	lsl.w	r1, r2, r4
 8006320:	f8c7 1470 	str.w	r1, [r7, #1136]	@ 0x470
 8006324:	4264      	negs	r4, r4
 8006326:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 800632a:	f1c4 0120 	rsb	r1, r4, #32
 800632e:	f1a4 0020 	sub.w	r0, r4, #32
 8006332:	fa22 f604 	lsr.w	r6, r2, r4
 8006336:	f8c7 6530 	str.w	r6, [r7, #1328]	@ 0x530
 800633a:	fa03 f101 	lsl.w	r1, r3, r1
 800633e:	f8d7 6530 	ldr.w	r6, [r7, #1328]	@ 0x530
 8006342:	430e      	orrs	r6, r1
 8006344:	f8c7 6530 	str.w	r6, [r7, #1328]	@ 0x530
 8006348:	fa23 f000 	lsr.w	r0, r3, r0
 800634c:	f8d7 1530 	ldr.w	r1, [r7, #1328]	@ 0x530
 8006350:	4301      	orrs	r1, r0
 8006352:	f8c7 1530 	str.w	r1, [r7, #1328]	@ 0x530
 8006356:	40e3      	lsrs	r3, r4
 8006358:	f8c7 3534 	str.w	r3, [r7, #1332]	@ 0x534
 800635c:	f507 638e 	add.w	r3, r7, #1136	@ 0x470
 8006360:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006364:	4643      	mov	r3, r8
 8006366:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 800636a:	e9d2 0100 	ldrd	r0, r1, [r2]
 800636e:	4602      	mov	r2, r0
 8006370:	4313      	orrs	r3, r2
 8006372:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006376:	460b      	mov	r3, r1
 8006378:	464a      	mov	r2, r9
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006380:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	@ 0x88
 8006384:	f507 62a6 	add.w	r2, r7, #1328	@ 0x530
 8006388:	e9c2 3400 	strd	r3, r4, [r2]
 800638c:	e9c5 3400 	strd	r3, r4, [r5]
 8006390:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006398:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 800639c:	e9c1 2300 	strd	r2, r3, [r1]
 80063a0:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80063a4:	3301      	adds	r3, #1
 80063a6:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80063aa:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80063ae:	4b40      	ldr	r3, [pc, #256]	@ (80064b0 <masked_keccak+0x265c>)
 80063b0:	5c9b      	ldrb	r3, [r3, r2]
 80063b2:	00da      	lsls	r2, r3, #3
 80063b4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80063b8:	4413      	add	r3, r2
 80063ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063be:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80063c2:	e9c1 2300 	strd	r2, r3, [r1]
 80063c6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80063ca:	4b38      	ldr	r3, [pc, #224]	@ (80064ac <masked_keccak+0x2658>)
 80063cc:	5c9b      	ldrb	r3, [r3, r2]
 80063ce:	461c      	mov	r4, r3
 80063d0:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80063d4:	4b36      	ldr	r3, [pc, #216]	@ (80064b0 <masked_keccak+0x265c>)
 80063d6:	5c9b      	ldrb	r3, [r3, r2]
 80063d8:	00da      	lsls	r2, r3, #3
 80063da:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80063de:	189d      	adds	r5, r3, r2
 80063e0:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80063e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e8:	f1a4 0120 	sub.w	r1, r4, #32
 80063ec:	f1c4 0020 	rsb	r0, r4, #32
 80063f0:	fa03 f604 	lsl.w	r6, r3, r4
 80063f4:	f8c7 646c 	str.w	r6, [r7, #1132]	@ 0x46c
 80063f8:	fa02 f101 	lsl.w	r1, r2, r1
 80063fc:	f8d7 646c 	ldr.w	r6, [r7, #1132]	@ 0x46c
 8006400:	430e      	orrs	r6, r1
 8006402:	f8c7 646c 	str.w	r6, [r7, #1132]	@ 0x46c
 8006406:	fa22 f000 	lsr.w	r0, r2, r0
 800640a:	f8d7 146c 	ldr.w	r1, [r7, #1132]	@ 0x46c
 800640e:	4301      	orrs	r1, r0
 8006410:	f8c7 146c 	str.w	r1, [r7, #1132]	@ 0x46c
 8006414:	fa02 f104 	lsl.w	r1, r2, r4
 8006418:	f8c7 1468 	str.w	r1, [r7, #1128]	@ 0x468
 800641c:	4264      	negs	r4, r4
 800641e:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006422:	f1c4 0120 	rsb	r1, r4, #32
 8006426:	f1a4 0020 	sub.w	r0, r4, #32
 800642a:	fa22 f604 	lsr.w	r6, r2, r4
 800642e:	f8c7 6528 	str.w	r6, [r7, #1320]	@ 0x528
 8006432:	fa03 f101 	lsl.w	r1, r3, r1
 8006436:	f8d7 6528 	ldr.w	r6, [r7, #1320]	@ 0x528
 800643a:	430e      	orrs	r6, r1
 800643c:	f8c7 6528 	str.w	r6, [r7, #1320]	@ 0x528
 8006440:	fa23 f000 	lsr.w	r0, r3, r0
 8006444:	f8d7 1528 	ldr.w	r1, [r7, #1320]	@ 0x528
 8006448:	4301      	orrs	r1, r0
 800644a:	f8c7 1528 	str.w	r1, [r7, #1320]	@ 0x528
 800644e:	40e3      	lsrs	r3, r4
 8006450:	f8c7 352c 	str.w	r3, [r7, #1324]	@ 0x52c
 8006454:	f507 638d 	add.w	r3, r7, #1128	@ 0x468
 8006458:	e9d3 8900 	ldrd	r8, r9, [r3]
 800645c:	4643      	mov	r3, r8
 800645e:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8006462:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006466:	4602      	mov	r2, r0
 8006468:	4313      	orrs	r3, r2
 800646a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800646e:	460b      	mov	r3, r1
 8006470:	464a      	mov	r2, r9
 8006472:	4313      	orrs	r3, r2
 8006474:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006478:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	@ 0x80
 800647c:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8006480:	e9c2 3400 	strd	r3, r4, [r2]
 8006484:	e9c5 3400 	strd	r3, r4, [r5]
 8006488:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800648c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006490:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006494:	e9c1 2300 	strd	r2, r3, [r1]
 8006498:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800649c:	3301      	adds	r3, #1
 800649e:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80064a2:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80064a6:	4b02      	ldr	r3, [pc, #8]	@ (80064b0 <masked_keccak+0x265c>)
 80064a8:	5c9b      	ldrb	r3, [r3, r2]
 80064aa:	e003      	b.n	80064b4 <masked_keccak+0x2660>
 80064ac:	08012008 	.word	0x08012008
 80064b0:	08012020 	.word	0x08012020
 80064b4:	00da      	lsls	r2, r3, #3
 80064b6:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80064ba:	4413      	add	r3, r2
 80064bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064c0:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80064c4:	e9c1 2300 	strd	r2, r3, [r1]
 80064c8:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80064cc:	4bee      	ldr	r3, [pc, #952]	@ (8006888 <masked_keccak+0x2a34>)
 80064ce:	5c9b      	ldrb	r3, [r3, r2]
 80064d0:	461c      	mov	r4, r3
 80064d2:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80064d6:	4bed      	ldr	r3, [pc, #948]	@ (800688c <masked_keccak+0x2a38>)
 80064d8:	5c9b      	ldrb	r3, [r3, r2]
 80064da:	00da      	lsls	r2, r3, #3
 80064dc:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80064e0:	189d      	adds	r5, r3, r2
 80064e2:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80064e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ea:	f1a4 0120 	sub.w	r1, r4, #32
 80064ee:	f1c4 0020 	rsb	r0, r4, #32
 80064f2:	fa03 f604 	lsl.w	r6, r3, r4
 80064f6:	f8c7 6464 	str.w	r6, [r7, #1124]	@ 0x464
 80064fa:	fa02 f101 	lsl.w	r1, r2, r1
 80064fe:	f8d7 6464 	ldr.w	r6, [r7, #1124]	@ 0x464
 8006502:	430e      	orrs	r6, r1
 8006504:	f8c7 6464 	str.w	r6, [r7, #1124]	@ 0x464
 8006508:	fa22 f000 	lsr.w	r0, r2, r0
 800650c:	f8d7 1464 	ldr.w	r1, [r7, #1124]	@ 0x464
 8006510:	4301      	orrs	r1, r0
 8006512:	f8c7 1464 	str.w	r1, [r7, #1124]	@ 0x464
 8006516:	fa02 f104 	lsl.w	r1, r2, r4
 800651a:	f8c7 1460 	str.w	r1, [r7, #1120]	@ 0x460
 800651e:	4264      	negs	r4, r4
 8006520:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006524:	f1c4 0120 	rsb	r1, r4, #32
 8006528:	f1a4 0020 	sub.w	r0, r4, #32
 800652c:	fa22 f604 	lsr.w	r6, r2, r4
 8006530:	f8c7 6520 	str.w	r6, [r7, #1312]	@ 0x520
 8006534:	fa03 f101 	lsl.w	r1, r3, r1
 8006538:	f8d7 6520 	ldr.w	r6, [r7, #1312]	@ 0x520
 800653c:	430e      	orrs	r6, r1
 800653e:	f8c7 6520 	str.w	r6, [r7, #1312]	@ 0x520
 8006542:	fa23 f000 	lsr.w	r0, r3, r0
 8006546:	f8d7 1520 	ldr.w	r1, [r7, #1312]	@ 0x520
 800654a:	4301      	orrs	r1, r0
 800654c:	f8c7 1520 	str.w	r1, [r7, #1312]	@ 0x520
 8006550:	40e3      	lsrs	r3, r4
 8006552:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8006556:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 800655a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800655e:	4643      	mov	r3, r8
 8006560:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 8006564:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006568:	4602      	mov	r2, r0
 800656a:	4313      	orrs	r3, r2
 800656c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800656e:	460b      	mov	r3, r1
 8006570:	464a      	mov	r2, r9
 8006572:	4313      	orrs	r3, r2
 8006574:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006576:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	@ 0x78
 800657a:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 800657e:	e9c2 3400 	strd	r3, r4, [r2]
 8006582:	e9c5 3400 	strd	r3, r4, [r5]
 8006586:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800658a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800658e:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006592:	e9c1 2300 	strd	r2, r3, [r1]
 8006596:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800659a:	3301      	adds	r3, #1
 800659c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80065a0:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80065a4:	4bb9      	ldr	r3, [pc, #740]	@ (800688c <masked_keccak+0x2a38>)
 80065a6:	5c9b      	ldrb	r3, [r3, r2]
 80065a8:	00da      	lsls	r2, r3, #3
 80065aa:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80065ae:	4413      	add	r3, r2
 80065b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b4:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80065b8:	e9c1 2300 	strd	r2, r3, [r1]
 80065bc:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80065c0:	4bb1      	ldr	r3, [pc, #708]	@ (8006888 <masked_keccak+0x2a34>)
 80065c2:	5c9b      	ldrb	r3, [r3, r2]
 80065c4:	461c      	mov	r4, r3
 80065c6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80065ca:	4bb0      	ldr	r3, [pc, #704]	@ (800688c <masked_keccak+0x2a38>)
 80065cc:	5c9b      	ldrb	r3, [r3, r2]
 80065ce:	00da      	lsls	r2, r3, #3
 80065d0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80065d4:	189d      	adds	r5, r3, r2
 80065d6:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80065da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065de:	f1a4 0120 	sub.w	r1, r4, #32
 80065e2:	f1c4 0020 	rsb	r0, r4, #32
 80065e6:	fa03 f604 	lsl.w	r6, r3, r4
 80065ea:	f8c7 645c 	str.w	r6, [r7, #1116]	@ 0x45c
 80065ee:	fa02 f101 	lsl.w	r1, r2, r1
 80065f2:	f8d7 645c 	ldr.w	r6, [r7, #1116]	@ 0x45c
 80065f6:	430e      	orrs	r6, r1
 80065f8:	f8c7 645c 	str.w	r6, [r7, #1116]	@ 0x45c
 80065fc:	fa22 f000 	lsr.w	r0, r2, r0
 8006600:	f8d7 145c 	ldr.w	r1, [r7, #1116]	@ 0x45c
 8006604:	4301      	orrs	r1, r0
 8006606:	f8c7 145c 	str.w	r1, [r7, #1116]	@ 0x45c
 800660a:	fa02 f104 	lsl.w	r1, r2, r4
 800660e:	f8c7 1458 	str.w	r1, [r7, #1112]	@ 0x458
 8006612:	4264      	negs	r4, r4
 8006614:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006618:	f1c4 0120 	rsb	r1, r4, #32
 800661c:	f1a4 0020 	sub.w	r0, r4, #32
 8006620:	fa22 f604 	lsr.w	r6, r2, r4
 8006624:	f8c7 6518 	str.w	r6, [r7, #1304]	@ 0x518
 8006628:	fa03 f101 	lsl.w	r1, r3, r1
 800662c:	f8d7 6518 	ldr.w	r6, [r7, #1304]	@ 0x518
 8006630:	430e      	orrs	r6, r1
 8006632:	f8c7 6518 	str.w	r6, [r7, #1304]	@ 0x518
 8006636:	fa23 f000 	lsr.w	r0, r3, r0
 800663a:	f8d7 1518 	ldr.w	r1, [r7, #1304]	@ 0x518
 800663e:	4301      	orrs	r1, r0
 8006640:	f8c7 1518 	str.w	r1, [r7, #1304]	@ 0x518
 8006644:	40e3      	lsrs	r3, r4
 8006646:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 800664a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 800664e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006652:	4643      	mov	r3, r8
 8006654:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8006658:	e9d2 0100 	ldrd	r0, r1, [r2]
 800665c:	4602      	mov	r2, r0
 800665e:	4313      	orrs	r3, r2
 8006660:	673b      	str	r3, [r7, #112]	@ 0x70
 8006662:	460b      	mov	r3, r1
 8006664:	464a      	mov	r2, r9
 8006666:	4313      	orrs	r3, r2
 8006668:	677b      	str	r3, [r7, #116]	@ 0x74
 800666a:	e9d7 341c 	ldrd	r3, r4, [r7, #112]	@ 0x70
 800666e:	f507 62a3 	add.w	r2, r7, #1304	@ 0x518
 8006672:	e9c2 3400 	strd	r3, r4, [r2]
 8006676:	e9c5 3400 	strd	r3, r4, [r5]
 800667a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800667e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006682:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006686:	e9c1 2300 	strd	r2, r3, [r1]
 800668a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800668e:	3301      	adds	r3, #1
 8006690:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006694:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006698:	4b7c      	ldr	r3, [pc, #496]	@ (800688c <masked_keccak+0x2a38>)
 800669a:	5c9b      	ldrb	r3, [r3, r2]
 800669c:	00da      	lsls	r2, r3, #3
 800669e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80066a2:	4413      	add	r3, r2
 80066a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a8:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80066ac:	e9c1 2300 	strd	r2, r3, [r1]
 80066b0:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80066b4:	4b74      	ldr	r3, [pc, #464]	@ (8006888 <masked_keccak+0x2a34>)
 80066b6:	5c9b      	ldrb	r3, [r3, r2]
 80066b8:	461c      	mov	r4, r3
 80066ba:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80066be:	4b73      	ldr	r3, [pc, #460]	@ (800688c <masked_keccak+0x2a38>)
 80066c0:	5c9b      	ldrb	r3, [r3, r2]
 80066c2:	00da      	lsls	r2, r3, #3
 80066c4:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80066c8:	189d      	adds	r5, r3, r2
 80066ca:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80066ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066d2:	f1a4 0120 	sub.w	r1, r4, #32
 80066d6:	f1c4 0020 	rsb	r0, r4, #32
 80066da:	fa03 f604 	lsl.w	r6, r3, r4
 80066de:	f8c7 6454 	str.w	r6, [r7, #1108]	@ 0x454
 80066e2:	fa02 f101 	lsl.w	r1, r2, r1
 80066e6:	f8d7 6454 	ldr.w	r6, [r7, #1108]	@ 0x454
 80066ea:	430e      	orrs	r6, r1
 80066ec:	f8c7 6454 	str.w	r6, [r7, #1108]	@ 0x454
 80066f0:	fa22 f000 	lsr.w	r0, r2, r0
 80066f4:	f8d7 1454 	ldr.w	r1, [r7, #1108]	@ 0x454
 80066f8:	4301      	orrs	r1, r0
 80066fa:	f8c7 1454 	str.w	r1, [r7, #1108]	@ 0x454
 80066fe:	fa02 f104 	lsl.w	r1, r2, r4
 8006702:	f8c7 1450 	str.w	r1, [r7, #1104]	@ 0x450
 8006706:	4264      	negs	r4, r4
 8006708:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 800670c:	f1c4 0120 	rsb	r1, r4, #32
 8006710:	f1a4 0020 	sub.w	r0, r4, #32
 8006714:	fa22 f604 	lsr.w	r6, r2, r4
 8006718:	f8c7 6510 	str.w	r6, [r7, #1296]	@ 0x510
 800671c:	fa03 f101 	lsl.w	r1, r3, r1
 8006720:	f8d7 6510 	ldr.w	r6, [r7, #1296]	@ 0x510
 8006724:	430e      	orrs	r6, r1
 8006726:	f8c7 6510 	str.w	r6, [r7, #1296]	@ 0x510
 800672a:	fa23 f000 	lsr.w	r0, r3, r0
 800672e:	f8d7 1510 	ldr.w	r1, [r7, #1296]	@ 0x510
 8006732:	4301      	orrs	r1, r0
 8006734:	f8c7 1510 	str.w	r1, [r7, #1296]	@ 0x510
 8006738:	40e3      	lsrs	r3, r4
 800673a:	f8c7 3514 	str.w	r3, [r7, #1300]	@ 0x514
 800673e:	f507 638a 	add.w	r3, r7, #1104	@ 0x450
 8006742:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006746:	4643      	mov	r3, r8
 8006748:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 800674c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006750:	4602      	mov	r2, r0
 8006752:	4313      	orrs	r3, r2
 8006754:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006756:	460b      	mov	r3, r1
 8006758:	464a      	mov	r2, r9
 800675a:	4313      	orrs	r3, r2
 800675c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800675e:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	@ 0x68
 8006762:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 8006766:	e9c2 3400 	strd	r3, r4, [r2]
 800676a:	e9c5 3400 	strd	r3, r4, [r5]
 800676e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006776:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 800677a:	e9c1 2300 	strd	r2, r3, [r1]
 800677e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006782:	3301      	adds	r3, #1
 8006784:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006788:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800678c:	4b3f      	ldr	r3, [pc, #252]	@ (800688c <masked_keccak+0x2a38>)
 800678e:	5c9b      	ldrb	r3, [r3, r2]
 8006790:	00da      	lsls	r2, r3, #3
 8006792:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006796:	4413      	add	r3, r2
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80067a0:	e9c1 2300 	strd	r2, r3, [r1]
 80067a4:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80067a8:	4b37      	ldr	r3, [pc, #220]	@ (8006888 <masked_keccak+0x2a34>)
 80067aa:	5c9b      	ldrb	r3, [r3, r2]
 80067ac:	461c      	mov	r4, r3
 80067ae:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80067b2:	4b36      	ldr	r3, [pc, #216]	@ (800688c <masked_keccak+0x2a38>)
 80067b4:	5c9b      	ldrb	r3, [r3, r2]
 80067b6:	00da      	lsls	r2, r3, #3
 80067b8:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80067bc:	189d      	adds	r5, r3, r2
 80067be:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f1a4 0120 	sub.w	r1, r4, #32
 80067ca:	f1c4 0020 	rsb	r0, r4, #32
 80067ce:	fa03 f604 	lsl.w	r6, r3, r4
 80067d2:	f8c7 644c 	str.w	r6, [r7, #1100]	@ 0x44c
 80067d6:	fa02 f101 	lsl.w	r1, r2, r1
 80067da:	f8d7 644c 	ldr.w	r6, [r7, #1100]	@ 0x44c
 80067de:	430e      	orrs	r6, r1
 80067e0:	f8c7 644c 	str.w	r6, [r7, #1100]	@ 0x44c
 80067e4:	fa22 f000 	lsr.w	r0, r2, r0
 80067e8:	f8d7 144c 	ldr.w	r1, [r7, #1100]	@ 0x44c
 80067ec:	4301      	orrs	r1, r0
 80067ee:	f8c7 144c 	str.w	r1, [r7, #1100]	@ 0x44c
 80067f2:	fa02 f104 	lsl.w	r1, r2, r4
 80067f6:	f8c7 1448 	str.w	r1, [r7, #1096]	@ 0x448
 80067fa:	4264      	negs	r4, r4
 80067fc:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006800:	f1c4 0120 	rsb	r1, r4, #32
 8006804:	f1a4 0020 	sub.w	r0, r4, #32
 8006808:	fa22 f604 	lsr.w	r6, r2, r4
 800680c:	f8c7 6508 	str.w	r6, [r7, #1288]	@ 0x508
 8006810:	fa03 f101 	lsl.w	r1, r3, r1
 8006814:	f8d7 6508 	ldr.w	r6, [r7, #1288]	@ 0x508
 8006818:	430e      	orrs	r6, r1
 800681a:	f8c7 6508 	str.w	r6, [r7, #1288]	@ 0x508
 800681e:	fa23 f000 	lsr.w	r0, r3, r0
 8006822:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 8006826:	4301      	orrs	r1, r0
 8006828:	f8c7 1508 	str.w	r1, [r7, #1288]	@ 0x508
 800682c:	40e3      	lsrs	r3, r4
 800682e:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8006832:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8006836:	e9d3 8900 	ldrd	r8, r9, [r3]
 800683a:	4643      	mov	r3, r8
 800683c:	f507 62a1 	add.w	r2, r7, #1288	@ 0x508
 8006840:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006844:	4602      	mov	r2, r0
 8006846:	4313      	orrs	r3, r2
 8006848:	663b      	str	r3, [r7, #96]	@ 0x60
 800684a:	460b      	mov	r3, r1
 800684c:	464a      	mov	r2, r9
 800684e:	4313      	orrs	r3, r2
 8006850:	667b      	str	r3, [r7, #100]	@ 0x64
 8006852:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	@ 0x60
 8006856:	f507 62a1 	add.w	r2, r7, #1288	@ 0x508
 800685a:	e9c2 3400 	strd	r3, r4, [r2]
 800685e:	e9c5 3400 	strd	r3, r4, [r5]
 8006862:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800686a:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 800686e:	e9c1 2300 	strd	r2, r3, [r1]
 8006872:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006876:	3301      	adds	r3, #1
 8006878:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 800687c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006880:	4b02      	ldr	r3, [pc, #8]	@ (800688c <masked_keccak+0x2a38>)
 8006882:	5c9b      	ldrb	r3, [r3, r2]
 8006884:	e004      	b.n	8006890 <masked_keccak+0x2a3c>
 8006886:	bf00      	nop
 8006888:	08012008 	.word	0x08012008
 800688c:	08012020 	.word	0x08012020
 8006890:	00da      	lsls	r2, r3, #3
 8006892:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006896:	4413      	add	r3, r2
 8006898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800689c:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 80068a0:	e9c1 2300 	strd	r2, r3, [r1]
 80068a4:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80068a8:	4bee      	ldr	r3, [pc, #952]	@ (8006c64 <masked_keccak+0x2e10>)
 80068aa:	5c9b      	ldrb	r3, [r3, r2]
 80068ac:	461c      	mov	r4, r3
 80068ae:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80068b2:	4bed      	ldr	r3, [pc, #948]	@ (8006c68 <masked_keccak+0x2e14>)
 80068b4:	5c9b      	ldrb	r3, [r3, r2]
 80068b6:	00da      	lsls	r2, r3, #3
 80068b8:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80068bc:	189d      	adds	r5, r3, r2
 80068be:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80068c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c6:	f1a4 0120 	sub.w	r1, r4, #32
 80068ca:	f1c4 0020 	rsb	r0, r4, #32
 80068ce:	fa03 f604 	lsl.w	r6, r3, r4
 80068d2:	f8c7 6444 	str.w	r6, [r7, #1092]	@ 0x444
 80068d6:	fa02 f101 	lsl.w	r1, r2, r1
 80068da:	f8d7 6444 	ldr.w	r6, [r7, #1092]	@ 0x444
 80068de:	430e      	orrs	r6, r1
 80068e0:	f8c7 6444 	str.w	r6, [r7, #1092]	@ 0x444
 80068e4:	fa22 f000 	lsr.w	r0, r2, r0
 80068e8:	f8d7 1444 	ldr.w	r1, [r7, #1092]	@ 0x444
 80068ec:	4301      	orrs	r1, r0
 80068ee:	f8c7 1444 	str.w	r1, [r7, #1092]	@ 0x444
 80068f2:	fa02 f104 	lsl.w	r1, r2, r4
 80068f6:	f8c7 1440 	str.w	r1, [r7, #1088]	@ 0x440
 80068fa:	4264      	negs	r4, r4
 80068fc:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006900:	f1c4 0120 	rsb	r1, r4, #32
 8006904:	f1a4 0020 	sub.w	r0, r4, #32
 8006908:	fa22 f604 	lsr.w	r6, r2, r4
 800690c:	f8c7 6500 	str.w	r6, [r7, #1280]	@ 0x500
 8006910:	fa03 f101 	lsl.w	r1, r3, r1
 8006914:	f8d7 6500 	ldr.w	r6, [r7, #1280]	@ 0x500
 8006918:	430e      	orrs	r6, r1
 800691a:	f8c7 6500 	str.w	r6, [r7, #1280]	@ 0x500
 800691e:	fa23 f000 	lsr.w	r0, r3, r0
 8006922:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 8006926:	4301      	orrs	r1, r0
 8006928:	f8c7 1500 	str.w	r1, [r7, #1280]	@ 0x500
 800692c:	40e3      	lsrs	r3, r4
 800692e:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8006932:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8006936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800693a:	4643      	mov	r3, r8
 800693c:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 8006940:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006944:	4602      	mov	r2, r0
 8006946:	4313      	orrs	r3, r2
 8006948:	65bb      	str	r3, [r7, #88]	@ 0x58
 800694a:	460b      	mov	r3, r1
 800694c:	464a      	mov	r2, r9
 800694e:	4313      	orrs	r3, r2
 8006950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006952:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 8006956:	f507 62a0 	add.w	r2, r7, #1280	@ 0x500
 800695a:	e9c2 3400 	strd	r3, r4, [r2]
 800695e:	e9c5 3400 	strd	r3, r4, [r5]
 8006962:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800696a:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 800696e:	e9c1 2300 	strd	r2, r3, [r1]
 8006972:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006976:	3301      	adds	r3, #1
 8006978:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 800697c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006980:	4bb9      	ldr	r3, [pc, #740]	@ (8006c68 <masked_keccak+0x2e14>)
 8006982:	5c9b      	ldrb	r3, [r3, r2]
 8006984:	00da      	lsls	r2, r3, #3
 8006986:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800698a:	4413      	add	r3, r2
 800698c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006990:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006994:	e9c1 2300 	strd	r2, r3, [r1]
 8006998:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800699c:	4bb1      	ldr	r3, [pc, #708]	@ (8006c64 <masked_keccak+0x2e10>)
 800699e:	5c9b      	ldrb	r3, [r3, r2]
 80069a0:	461c      	mov	r4, r3
 80069a2:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80069a6:	4bb0      	ldr	r3, [pc, #704]	@ (8006c68 <masked_keccak+0x2e14>)
 80069a8:	5c9b      	ldrb	r3, [r3, r2]
 80069aa:	00da      	lsls	r2, r3, #3
 80069ac:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 80069b0:	189d      	adds	r5, r3, r2
 80069b2:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 80069b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ba:	f1a4 0120 	sub.w	r1, r4, #32
 80069be:	f1c4 0020 	rsb	r0, r4, #32
 80069c2:	fa03 f604 	lsl.w	r6, r3, r4
 80069c6:	f8c7 643c 	str.w	r6, [r7, #1084]	@ 0x43c
 80069ca:	fa02 f101 	lsl.w	r1, r2, r1
 80069ce:	f8d7 643c 	ldr.w	r6, [r7, #1084]	@ 0x43c
 80069d2:	430e      	orrs	r6, r1
 80069d4:	f8c7 643c 	str.w	r6, [r7, #1084]	@ 0x43c
 80069d8:	fa22 f000 	lsr.w	r0, r2, r0
 80069dc:	f8d7 143c 	ldr.w	r1, [r7, #1084]	@ 0x43c
 80069e0:	4301      	orrs	r1, r0
 80069e2:	f8c7 143c 	str.w	r1, [r7, #1084]	@ 0x43c
 80069e6:	fa02 f104 	lsl.w	r1, r2, r4
 80069ea:	f8c7 1438 	str.w	r1, [r7, #1080]	@ 0x438
 80069ee:	4264      	negs	r4, r4
 80069f0:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80069f4:	f1c4 0120 	rsb	r1, r4, #32
 80069f8:	f1a4 0020 	sub.w	r0, r4, #32
 80069fc:	fa22 f604 	lsr.w	r6, r2, r4
 8006a00:	f8c7 64f8 	str.w	r6, [r7, #1272]	@ 0x4f8
 8006a04:	fa03 f101 	lsl.w	r1, r3, r1
 8006a08:	f8d7 64f8 	ldr.w	r6, [r7, #1272]	@ 0x4f8
 8006a0c:	430e      	orrs	r6, r1
 8006a0e:	f8c7 64f8 	str.w	r6, [r7, #1272]	@ 0x4f8
 8006a12:	fa23 f000 	lsr.w	r0, r3, r0
 8006a16:	f8d7 14f8 	ldr.w	r1, [r7, #1272]	@ 0x4f8
 8006a1a:	4301      	orrs	r1, r0
 8006a1c:	f8c7 14f8 	str.w	r1, [r7, #1272]	@ 0x4f8
 8006a20:	40e3      	lsrs	r3, r4
 8006a22:	f8c7 34fc 	str.w	r3, [r7, #1276]	@ 0x4fc
 8006a26:	f507 6387 	add.w	r3, r7, #1080	@ 0x438
 8006a2a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a2e:	4643      	mov	r3, r8
 8006a30:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8006a34:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006a38:	4602      	mov	r2, r0
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a3e:	460b      	mov	r3, r1
 8006a40:	464a      	mov	r2, r9
 8006a42:	4313      	orrs	r3, r2
 8006a44:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a46:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 8006a4a:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8006a4e:	e9c2 3400 	strd	r3, r4, [r2]
 8006a52:	e9c5 3400 	strd	r3, r4, [r5]
 8006a56:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a5e:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006a62:	e9c1 2300 	strd	r2, r3, [r1]
 8006a66:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006a70:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006a74:	4b7c      	ldr	r3, [pc, #496]	@ (8006c68 <masked_keccak+0x2e14>)
 8006a76:	5c9b      	ldrb	r3, [r3, r2]
 8006a78:	00da      	lsls	r2, r3, #3
 8006a7a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006a7e:	4413      	add	r3, r2
 8006a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a84:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006a88:	e9c1 2300 	strd	r2, r3, [r1]
 8006a8c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006a90:	4b74      	ldr	r3, [pc, #464]	@ (8006c64 <masked_keccak+0x2e10>)
 8006a92:	5c9b      	ldrb	r3, [r3, r2]
 8006a94:	461c      	mov	r4, r3
 8006a96:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006a9a:	4b73      	ldr	r3, [pc, #460]	@ (8006c68 <masked_keccak+0x2e14>)
 8006a9c:	5c9b      	ldrb	r3, [r3, r2]
 8006a9e:	00da      	lsls	r2, r3, #3
 8006aa0:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006aa4:	189d      	adds	r5, r3, r2
 8006aa6:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006aaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aae:	f1a4 0120 	sub.w	r1, r4, #32
 8006ab2:	f1c4 0020 	rsb	r0, r4, #32
 8006ab6:	fa03 f604 	lsl.w	r6, r3, r4
 8006aba:	f8c7 6434 	str.w	r6, [r7, #1076]	@ 0x434
 8006abe:	fa02 f101 	lsl.w	r1, r2, r1
 8006ac2:	f8d7 6434 	ldr.w	r6, [r7, #1076]	@ 0x434
 8006ac6:	430e      	orrs	r6, r1
 8006ac8:	f8c7 6434 	str.w	r6, [r7, #1076]	@ 0x434
 8006acc:	fa22 f000 	lsr.w	r0, r2, r0
 8006ad0:	f8d7 1434 	ldr.w	r1, [r7, #1076]	@ 0x434
 8006ad4:	4301      	orrs	r1, r0
 8006ad6:	f8c7 1434 	str.w	r1, [r7, #1076]	@ 0x434
 8006ada:	fa02 f104 	lsl.w	r1, r2, r4
 8006ade:	f8c7 1430 	str.w	r1, [r7, #1072]	@ 0x430
 8006ae2:	4264      	negs	r4, r4
 8006ae4:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006ae8:	f1c4 0120 	rsb	r1, r4, #32
 8006aec:	f1a4 0020 	sub.w	r0, r4, #32
 8006af0:	fa22 f604 	lsr.w	r6, r2, r4
 8006af4:	f8c7 64f0 	str.w	r6, [r7, #1264]	@ 0x4f0
 8006af8:	fa03 f101 	lsl.w	r1, r3, r1
 8006afc:	f8d7 64f0 	ldr.w	r6, [r7, #1264]	@ 0x4f0
 8006b00:	430e      	orrs	r6, r1
 8006b02:	f8c7 64f0 	str.w	r6, [r7, #1264]	@ 0x4f0
 8006b06:	fa23 f000 	lsr.w	r0, r3, r0
 8006b0a:	f8d7 14f0 	ldr.w	r1, [r7, #1264]	@ 0x4f0
 8006b0e:	4301      	orrs	r1, r0
 8006b10:	f8c7 14f0 	str.w	r1, [r7, #1264]	@ 0x4f0
 8006b14:	40e3      	lsrs	r3, r4
 8006b16:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8006b1a:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8006b1e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b22:	4643      	mov	r3, r8
 8006b24:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8006b28:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	4313      	orrs	r3, r2
 8006b30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b32:	460b      	mov	r3, r1
 8006b34:	464a      	mov	r2, r9
 8006b36:	4313      	orrs	r3, r2
 8006b38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b3a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8006b3e:	f507 629e 	add.w	r2, r7, #1264	@ 0x4f0
 8006b42:	e9c2 3400 	strd	r3, r4, [r2]
 8006b46:	e9c5 3400 	strd	r3, r4, [r5]
 8006b4a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006b56:	e9c1 2300 	strd	r2, r3, [r1]
 8006b5a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006b64:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006b68:	4b3f      	ldr	r3, [pc, #252]	@ (8006c68 <masked_keccak+0x2e14>)
 8006b6a:	5c9b      	ldrb	r3, [r3, r2]
 8006b6c:	00da      	lsls	r2, r3, #3
 8006b6e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006b72:	4413      	add	r3, r2
 8006b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b78:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006b7c:	e9c1 2300 	strd	r2, r3, [r1]
 8006b80:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006b84:	4b37      	ldr	r3, [pc, #220]	@ (8006c64 <masked_keccak+0x2e10>)
 8006b86:	5c9b      	ldrb	r3, [r3, r2]
 8006b88:	461c      	mov	r4, r3
 8006b8a:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006b8e:	4b36      	ldr	r3, [pc, #216]	@ (8006c68 <masked_keccak+0x2e14>)
 8006b90:	5c9b      	ldrb	r3, [r3, r2]
 8006b92:	00da      	lsls	r2, r3, #3
 8006b94:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006b98:	189d      	adds	r5, r3, r2
 8006b9a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ba2:	f1a4 0120 	sub.w	r1, r4, #32
 8006ba6:	f1c4 0020 	rsb	r0, r4, #32
 8006baa:	fa03 f604 	lsl.w	r6, r3, r4
 8006bae:	f8c7 642c 	str.w	r6, [r7, #1068]	@ 0x42c
 8006bb2:	fa02 f101 	lsl.w	r1, r2, r1
 8006bb6:	f8d7 642c 	ldr.w	r6, [r7, #1068]	@ 0x42c
 8006bba:	430e      	orrs	r6, r1
 8006bbc:	f8c7 642c 	str.w	r6, [r7, #1068]	@ 0x42c
 8006bc0:	fa22 f000 	lsr.w	r0, r2, r0
 8006bc4:	f8d7 142c 	ldr.w	r1, [r7, #1068]	@ 0x42c
 8006bc8:	4301      	orrs	r1, r0
 8006bca:	f8c7 142c 	str.w	r1, [r7, #1068]	@ 0x42c
 8006bce:	fa02 f104 	lsl.w	r1, r2, r4
 8006bd2:	f8c7 1428 	str.w	r1, [r7, #1064]	@ 0x428
 8006bd6:	4264      	negs	r4, r4
 8006bd8:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006bdc:	f1c4 0120 	rsb	r1, r4, #32
 8006be0:	f1a4 0020 	sub.w	r0, r4, #32
 8006be4:	fa22 f604 	lsr.w	r6, r2, r4
 8006be8:	f8c7 64e8 	str.w	r6, [r7, #1256]	@ 0x4e8
 8006bec:	fa03 f101 	lsl.w	r1, r3, r1
 8006bf0:	f8d7 64e8 	ldr.w	r6, [r7, #1256]	@ 0x4e8
 8006bf4:	430e      	orrs	r6, r1
 8006bf6:	f8c7 64e8 	str.w	r6, [r7, #1256]	@ 0x4e8
 8006bfa:	fa23 f000 	lsr.w	r0, r3, r0
 8006bfe:	f8d7 14e8 	ldr.w	r1, [r7, #1256]	@ 0x4e8
 8006c02:	4301      	orrs	r1, r0
 8006c04:	f8c7 14e8 	str.w	r1, [r7, #1256]	@ 0x4e8
 8006c08:	40e3      	lsrs	r3, r4
 8006c0a:	f8c7 34ec 	str.w	r3, [r7, #1260]	@ 0x4ec
 8006c0e:	f507 6385 	add.w	r3, r7, #1064	@ 0x428
 8006c12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c16:	4643      	mov	r3, r8
 8006c18:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8006c1c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006c20:	4602      	mov	r2, r0
 8006c22:	4313      	orrs	r3, r2
 8006c24:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c26:	460b      	mov	r3, r1
 8006c28:	464a      	mov	r2, r9
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c2e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8006c32:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8006c36:	e9c2 3400 	strd	r3, r4, [r2]
 8006c3a:	e9c5 3400 	strd	r3, r4, [r5]
 8006c3e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c46:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006c4a:	e9c1 2300 	strd	r2, r3, [r1]
 8006c4e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006c52:	3301      	adds	r3, #1
 8006c54:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006c58:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006c5c:	4b02      	ldr	r3, [pc, #8]	@ (8006c68 <masked_keccak+0x2e14>)
 8006c5e:	5c9b      	ldrb	r3, [r3, r2]
 8006c60:	e004      	b.n	8006c6c <masked_keccak+0x2e18>
 8006c62:	bf00      	nop
 8006c64:	08012008 	.word	0x08012008
 8006c68:	08012020 	.word	0x08012020
 8006c6c:	00da      	lsls	r2, r3, #3
 8006c6e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006c72:	4413      	add	r3, r2
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006c7c:	e9c1 2300 	strd	r2, r3, [r1]
 8006c80:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006c84:	4bee      	ldr	r3, [pc, #952]	@ (8007040 <masked_keccak+0x31ec>)
 8006c86:	5c9b      	ldrb	r3, [r3, r2]
 8006c88:	461c      	mov	r4, r3
 8006c8a:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006c8e:	4bed      	ldr	r3, [pc, #948]	@ (8007044 <masked_keccak+0x31f0>)
 8006c90:	5c9b      	ldrb	r3, [r3, r2]
 8006c92:	00da      	lsls	r2, r3, #3
 8006c94:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006c98:	189d      	adds	r5, r3, r2
 8006c9a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ca2:	f1a4 0120 	sub.w	r1, r4, #32
 8006ca6:	f1c4 0020 	rsb	r0, r4, #32
 8006caa:	fa03 f604 	lsl.w	r6, r3, r4
 8006cae:	f8c7 6424 	str.w	r6, [r7, #1060]	@ 0x424
 8006cb2:	fa02 f101 	lsl.w	r1, r2, r1
 8006cb6:	f8d7 6424 	ldr.w	r6, [r7, #1060]	@ 0x424
 8006cba:	430e      	orrs	r6, r1
 8006cbc:	f8c7 6424 	str.w	r6, [r7, #1060]	@ 0x424
 8006cc0:	fa22 f000 	lsr.w	r0, r2, r0
 8006cc4:	f8d7 1424 	ldr.w	r1, [r7, #1060]	@ 0x424
 8006cc8:	4301      	orrs	r1, r0
 8006cca:	f8c7 1424 	str.w	r1, [r7, #1060]	@ 0x424
 8006cce:	fa02 f104 	lsl.w	r1, r2, r4
 8006cd2:	f8c7 1420 	str.w	r1, [r7, #1056]	@ 0x420
 8006cd6:	4264      	negs	r4, r4
 8006cd8:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006cdc:	f1c4 0120 	rsb	r1, r4, #32
 8006ce0:	f1a4 0020 	sub.w	r0, r4, #32
 8006ce4:	fa22 f604 	lsr.w	r6, r2, r4
 8006ce8:	f8c7 64e0 	str.w	r6, [r7, #1248]	@ 0x4e0
 8006cec:	fa03 f101 	lsl.w	r1, r3, r1
 8006cf0:	f8d7 64e0 	ldr.w	r6, [r7, #1248]	@ 0x4e0
 8006cf4:	430e      	orrs	r6, r1
 8006cf6:	f8c7 64e0 	str.w	r6, [r7, #1248]	@ 0x4e0
 8006cfa:	fa23 f000 	lsr.w	r0, r3, r0
 8006cfe:	f8d7 14e0 	ldr.w	r1, [r7, #1248]	@ 0x4e0
 8006d02:	4301      	orrs	r1, r0
 8006d04:	f8c7 14e0 	str.w	r1, [r7, #1248]	@ 0x4e0
 8006d08:	40e3      	lsrs	r3, r4
 8006d0a:	f8c7 34e4 	str.w	r3, [r7, #1252]	@ 0x4e4
 8006d0e:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8006d12:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006d16:	4643      	mov	r3, r8
 8006d18:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 8006d1c:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006d20:	4602      	mov	r2, r0
 8006d22:	4313      	orrs	r3, r2
 8006d24:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d26:	460b      	mov	r3, r1
 8006d28:	464a      	mov	r2, r9
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d2e:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8006d32:	f507 629c 	add.w	r2, r7, #1248	@ 0x4e0
 8006d36:	e9c2 3400 	strd	r3, r4, [r2]
 8006d3a:	e9c5 3400 	strd	r3, r4, [r5]
 8006d3e:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d46:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006d4a:	e9c1 2300 	strd	r2, r3, [r1]
 8006d4e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006d52:	3301      	adds	r3, #1
 8006d54:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006d58:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006d5c:	4bb9      	ldr	r3, [pc, #740]	@ (8007044 <masked_keccak+0x31f0>)
 8006d5e:	5c9b      	ldrb	r3, [r3, r2]
 8006d60:	00da      	lsls	r2, r3, #3
 8006d62:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006d66:	4413      	add	r3, r2
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006d70:	e9c1 2300 	strd	r2, r3, [r1]
 8006d74:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006d78:	4bb1      	ldr	r3, [pc, #708]	@ (8007040 <masked_keccak+0x31ec>)
 8006d7a:	5c9b      	ldrb	r3, [r3, r2]
 8006d7c:	461c      	mov	r4, r3
 8006d7e:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006d82:	4bb0      	ldr	r3, [pc, #704]	@ (8007044 <masked_keccak+0x31f0>)
 8006d84:	5c9b      	ldrb	r3, [r3, r2]
 8006d86:	00da      	lsls	r2, r3, #3
 8006d88:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006d8c:	189d      	adds	r5, r3, r2
 8006d8e:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d96:	f1a4 0120 	sub.w	r1, r4, #32
 8006d9a:	f1c4 0020 	rsb	r0, r4, #32
 8006d9e:	fa03 f604 	lsl.w	r6, r3, r4
 8006da2:	f8c7 641c 	str.w	r6, [r7, #1052]	@ 0x41c
 8006da6:	fa02 f101 	lsl.w	r1, r2, r1
 8006daa:	f8d7 641c 	ldr.w	r6, [r7, #1052]	@ 0x41c
 8006dae:	430e      	orrs	r6, r1
 8006db0:	f8c7 641c 	str.w	r6, [r7, #1052]	@ 0x41c
 8006db4:	fa22 f000 	lsr.w	r0, r2, r0
 8006db8:	f8d7 141c 	ldr.w	r1, [r7, #1052]	@ 0x41c
 8006dbc:	4301      	orrs	r1, r0
 8006dbe:	f8c7 141c 	str.w	r1, [r7, #1052]	@ 0x41c
 8006dc2:	fa02 f104 	lsl.w	r1, r2, r4
 8006dc6:	f8c7 1418 	str.w	r1, [r7, #1048]	@ 0x418
 8006dca:	4264      	negs	r4, r4
 8006dcc:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006dd0:	f1c4 0120 	rsb	r1, r4, #32
 8006dd4:	f1a4 0020 	sub.w	r0, r4, #32
 8006dd8:	fa22 f604 	lsr.w	r6, r2, r4
 8006ddc:	f8c7 64d8 	str.w	r6, [r7, #1240]	@ 0x4d8
 8006de0:	fa03 f101 	lsl.w	r1, r3, r1
 8006de4:	f8d7 64d8 	ldr.w	r6, [r7, #1240]	@ 0x4d8
 8006de8:	430e      	orrs	r6, r1
 8006dea:	f8c7 64d8 	str.w	r6, [r7, #1240]	@ 0x4d8
 8006dee:	fa23 f000 	lsr.w	r0, r3, r0
 8006df2:	f8d7 14d8 	ldr.w	r1, [r7, #1240]	@ 0x4d8
 8006df6:	4301      	orrs	r1, r0
 8006df8:	f8c7 14d8 	str.w	r1, [r7, #1240]	@ 0x4d8
 8006dfc:	40e3      	lsrs	r3, r4
 8006dfe:	f8c7 34dc 	str.w	r3, [r7, #1244]	@ 0x4dc
 8006e02:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8006e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006e0a:	4643      	mov	r3, r8
 8006e0c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8006e10:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006e14:	4602      	mov	r2, r0
 8006e16:	4313      	orrs	r3, r2
 8006e18:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	464a      	mov	r2, r9
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e22:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8006e26:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8006e2a:	e9c2 3400 	strd	r3, r4, [r2]
 8006e2e:	e9c5 3400 	strd	r3, r4, [r5]
 8006e32:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3a:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006e3e:	e9c1 2300 	strd	r2, r3, [r1]
 8006e42:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006e46:	3301      	adds	r3, #1
 8006e48:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006e4c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006e50:	4b7c      	ldr	r3, [pc, #496]	@ (8007044 <masked_keccak+0x31f0>)
 8006e52:	5c9b      	ldrb	r3, [r3, r2]
 8006e54:	00da      	lsls	r2, r3, #3
 8006e56:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006e5a:	4413      	add	r3, r2
 8006e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e60:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006e64:	e9c1 2300 	strd	r2, r3, [r1]
 8006e68:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006e6c:	4b74      	ldr	r3, [pc, #464]	@ (8007040 <masked_keccak+0x31ec>)
 8006e6e:	5c9b      	ldrb	r3, [r3, r2]
 8006e70:	461c      	mov	r4, r3
 8006e72:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006e76:	4b73      	ldr	r3, [pc, #460]	@ (8007044 <masked_keccak+0x31f0>)
 8006e78:	5c9b      	ldrb	r3, [r3, r2]
 8006e7a:	00da      	lsls	r2, r3, #3
 8006e7c:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006e80:	189d      	adds	r5, r3, r2
 8006e82:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e8a:	f1a4 0120 	sub.w	r1, r4, #32
 8006e8e:	f1c4 0020 	rsb	r0, r4, #32
 8006e92:	fa03 f604 	lsl.w	r6, r3, r4
 8006e96:	f8c7 6414 	str.w	r6, [r7, #1044]	@ 0x414
 8006e9a:	fa02 f101 	lsl.w	r1, r2, r1
 8006e9e:	f8d7 6414 	ldr.w	r6, [r7, #1044]	@ 0x414
 8006ea2:	430e      	orrs	r6, r1
 8006ea4:	f8c7 6414 	str.w	r6, [r7, #1044]	@ 0x414
 8006ea8:	fa22 f000 	lsr.w	r0, r2, r0
 8006eac:	f8d7 1414 	ldr.w	r1, [r7, #1044]	@ 0x414
 8006eb0:	4301      	orrs	r1, r0
 8006eb2:	f8c7 1414 	str.w	r1, [r7, #1044]	@ 0x414
 8006eb6:	fa02 f104 	lsl.w	r1, r2, r4
 8006eba:	f8c7 1410 	str.w	r1, [r7, #1040]	@ 0x410
 8006ebe:	4264      	negs	r4, r4
 8006ec0:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006ec4:	f1c4 0120 	rsb	r1, r4, #32
 8006ec8:	f1a4 0020 	sub.w	r0, r4, #32
 8006ecc:	fa22 f604 	lsr.w	r6, r2, r4
 8006ed0:	f8c7 64d0 	str.w	r6, [r7, #1232]	@ 0x4d0
 8006ed4:	fa03 f101 	lsl.w	r1, r3, r1
 8006ed8:	f8d7 64d0 	ldr.w	r6, [r7, #1232]	@ 0x4d0
 8006edc:	430e      	orrs	r6, r1
 8006ede:	f8c7 64d0 	str.w	r6, [r7, #1232]	@ 0x4d0
 8006ee2:	fa23 f000 	lsr.w	r0, r3, r0
 8006ee6:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	@ 0x4d0
 8006eea:	4301      	orrs	r1, r0
 8006eec:	f8c7 14d0 	str.w	r1, [r7, #1232]	@ 0x4d0
 8006ef0:	40e3      	lsrs	r3, r4
 8006ef2:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8006ef6:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8006efa:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006efe:	4643      	mov	r3, r8
 8006f00:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8006f04:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006f08:	4602      	mov	r2, r0
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f0e:	460b      	mov	r3, r1
 8006f10:	464a      	mov	r2, r9
 8006f12:	4313      	orrs	r3, r2
 8006f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f16:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8006f1a:	f507 629a 	add.w	r2, r7, #1232	@ 0x4d0
 8006f1e:	e9c2 3400 	strd	r3, r4, [r2]
 8006f22:	e9c5 3400 	strd	r3, r4, [r5]
 8006f26:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8006f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2e:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8006f32:	e9c1 2300 	strd	r2, r3, [r1]
 8006f36:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8006f40:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006f44:	4b3f      	ldr	r3, [pc, #252]	@ (8007044 <masked_keccak+0x31f0>)
 8006f46:	5c9b      	ldrb	r3, [r3, r2]
 8006f48:	00da      	lsls	r2, r3, #3
 8006f4a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006f4e:	4413      	add	r3, r2
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8006f58:	e9c1 2300 	strd	r2, r3, [r1]
 8006f5c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006f60:	4b37      	ldr	r3, [pc, #220]	@ (8007040 <masked_keccak+0x31ec>)
 8006f62:	5c9b      	ldrb	r3, [r3, r2]
 8006f64:	461c      	mov	r4, r3
 8006f66:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8006f6a:	4b36      	ldr	r3, [pc, #216]	@ (8007044 <masked_keccak+0x31f0>)
 8006f6c:	5c9b      	ldrb	r3, [r3, r2]
 8006f6e:	00da      	lsls	r2, r3, #3
 8006f70:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8006f74:	189d      	adds	r5, r3, r2
 8006f76:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 8006f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7e:	f1a4 0120 	sub.w	r1, r4, #32
 8006f82:	f1c4 0020 	rsb	r0, r4, #32
 8006f86:	fa03 f604 	lsl.w	r6, r3, r4
 8006f8a:	f8c7 640c 	str.w	r6, [r7, #1036]	@ 0x40c
 8006f8e:	fa02 f101 	lsl.w	r1, r2, r1
 8006f92:	f8d7 640c 	ldr.w	r6, [r7, #1036]	@ 0x40c
 8006f96:	430e      	orrs	r6, r1
 8006f98:	f8c7 640c 	str.w	r6, [r7, #1036]	@ 0x40c
 8006f9c:	fa22 f000 	lsr.w	r0, r2, r0
 8006fa0:	f8d7 140c 	ldr.w	r1, [r7, #1036]	@ 0x40c
 8006fa4:	4301      	orrs	r1, r0
 8006fa6:	f8c7 140c 	str.w	r1, [r7, #1036]	@ 0x40c
 8006faa:	fa02 f104 	lsl.w	r1, r2, r4
 8006fae:	f8c7 1408 	str.w	r1, [r7, #1032]	@ 0x408
 8006fb2:	4264      	negs	r4, r4
 8006fb4:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 8006fb8:	f1c4 0120 	rsb	r1, r4, #32
 8006fbc:	f1a4 0020 	sub.w	r0, r4, #32
 8006fc0:	fa22 f604 	lsr.w	r6, r2, r4
 8006fc4:	f8c7 64c8 	str.w	r6, [r7, #1224]	@ 0x4c8
 8006fc8:	fa03 f101 	lsl.w	r1, r3, r1
 8006fcc:	f8d7 64c8 	ldr.w	r6, [r7, #1224]	@ 0x4c8
 8006fd0:	430e      	orrs	r6, r1
 8006fd2:	f8c7 64c8 	str.w	r6, [r7, #1224]	@ 0x4c8
 8006fd6:	fa23 f000 	lsr.w	r0, r3, r0
 8006fda:	f8d7 14c8 	ldr.w	r1, [r7, #1224]	@ 0x4c8
 8006fde:	4301      	orrs	r1, r0
 8006fe0:	f8c7 14c8 	str.w	r1, [r7, #1224]	@ 0x4c8
 8006fe4:	40e3      	lsrs	r3, r4
 8006fe6:	f8c7 34cc 	str.w	r3, [r7, #1228]	@ 0x4cc
 8006fea:	f507 6381 	add.w	r3, r7, #1032	@ 0x408
 8006fee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ff2:	4643      	mov	r3, r8
 8006ff4:	f507 6299 	add.w	r2, r7, #1224	@ 0x4c8
 8006ff8:	e9d2 0100 	ldrd	r0, r1, [r2]
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	4313      	orrs	r3, r2
 8007000:	623b      	str	r3, [r7, #32]
 8007002:	460b      	mov	r3, r1
 8007004:	464a      	mov	r2, r9
 8007006:	4313      	orrs	r3, r2
 8007008:	627b      	str	r3, [r7, #36]	@ 0x24
 800700a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800700e:	f507 6299 	add.w	r2, r7, #1224	@ 0x4c8
 8007012:	e9c2 3400 	strd	r3, r4, [r2]
 8007016:	e9c5 3400 	strd	r3, r4, [r5]
 800701a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007022:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8007026:	e9c1 2300 	strd	r2, r3, [r1]
 800702a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800702e:	3301      	adds	r3, #1
 8007030:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8007034:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007038:	4b02      	ldr	r3, [pc, #8]	@ (8007044 <masked_keccak+0x31f0>)
 800703a:	5c9b      	ldrb	r3, [r3, r2]
 800703c:	e004      	b.n	8007048 <masked_keccak+0x31f4>
 800703e:	bf00      	nop
 8007040:	08012008 	.word	0x08012008
 8007044:	08012020 	.word	0x08012020
 8007048:	00da      	lsls	r2, r3, #3
 800704a:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 800704e:	4413      	add	r3, r2
 8007050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007054:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 8007058:	e9c1 2300 	strd	r2, r3, [r1]
 800705c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007060:	4beb      	ldr	r3, [pc, #940]	@ (8007410 <masked_keccak+0x35bc>)
 8007062:	5c9b      	ldrb	r3, [r3, r2]
 8007064:	461c      	mov	r4, r3
 8007066:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800706a:	4bea      	ldr	r3, [pc, #936]	@ (8007414 <masked_keccak+0x35c0>)
 800706c:	5c9b      	ldrb	r3, [r3, r2]
 800706e:	00da      	lsls	r2, r3, #3
 8007070:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007074:	189d      	adds	r5, r3, r2
 8007076:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800707a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800707e:	f1a4 0120 	sub.w	r1, r4, #32
 8007082:	f1c4 0020 	rsb	r0, r4, #32
 8007086:	fa03 f604 	lsl.w	r6, r3, r4
 800708a:	f8c7 6404 	str.w	r6, [r7, #1028]	@ 0x404
 800708e:	fa02 f101 	lsl.w	r1, r2, r1
 8007092:	f8d7 6404 	ldr.w	r6, [r7, #1028]	@ 0x404
 8007096:	430e      	orrs	r6, r1
 8007098:	f8c7 6404 	str.w	r6, [r7, #1028]	@ 0x404
 800709c:	fa22 f000 	lsr.w	r0, r2, r0
 80070a0:	f8d7 1404 	ldr.w	r1, [r7, #1028]	@ 0x404
 80070a4:	4301      	orrs	r1, r0
 80070a6:	f8c7 1404 	str.w	r1, [r7, #1028]	@ 0x404
 80070aa:	fa02 f104 	lsl.w	r1, r2, r4
 80070ae:	f8c7 1400 	str.w	r1, [r7, #1024]	@ 0x400
 80070b2:	4264      	negs	r4, r4
 80070b4:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80070b8:	f1c4 0120 	rsb	r1, r4, #32
 80070bc:	f1a4 0020 	sub.w	r0, r4, #32
 80070c0:	fa22 f604 	lsr.w	r6, r2, r4
 80070c4:	f8c7 64c0 	str.w	r6, [r7, #1216]	@ 0x4c0
 80070c8:	fa03 f101 	lsl.w	r1, r3, r1
 80070cc:	f8d7 64c0 	ldr.w	r6, [r7, #1216]	@ 0x4c0
 80070d0:	430e      	orrs	r6, r1
 80070d2:	f8c7 64c0 	str.w	r6, [r7, #1216]	@ 0x4c0
 80070d6:	fa23 f000 	lsr.w	r0, r3, r0
 80070da:	f8d7 14c0 	ldr.w	r1, [r7, #1216]	@ 0x4c0
 80070de:	4301      	orrs	r1, r0
 80070e0:	f8c7 14c0 	str.w	r1, [r7, #1216]	@ 0x4c0
 80070e4:	40e3      	lsrs	r3, r4
 80070e6:	f8c7 34c4 	str.w	r3, [r7, #1220]	@ 0x4c4
 80070ea:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 80070ee:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070f2:	4643      	mov	r3, r8
 80070f4:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 80070f8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80070fc:	4602      	mov	r2, r0
 80070fe:	4313      	orrs	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
 8007102:	460b      	mov	r3, r1
 8007104:	464a      	mov	r2, r9
 8007106:	4313      	orrs	r3, r2
 8007108:	61fb      	str	r3, [r7, #28]
 800710a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800710e:	f507 6298 	add.w	r2, r7, #1216	@ 0x4c0
 8007112:	e9c2 3400 	strd	r3, r4, [r2]
 8007116:	e9c5 3400 	strd	r3, r4, [r5]
 800711a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007122:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8007126:	e9c1 2300 	strd	r2, r3, [r1]
 800712a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800712e:	3301      	adds	r3, #1
 8007130:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8007134:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007138:	4bb6      	ldr	r3, [pc, #728]	@ (8007414 <masked_keccak+0x35c0>)
 800713a:	5c9b      	ldrb	r3, [r3, r2]
 800713c:	00da      	lsls	r2, r3, #3
 800713e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007142:	4413      	add	r3, r2
 8007144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007148:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800714c:	e9c1 2300 	strd	r2, r3, [r1]
 8007150:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007154:	4bae      	ldr	r3, [pc, #696]	@ (8007410 <masked_keccak+0x35bc>)
 8007156:	5c9b      	ldrb	r3, [r3, r2]
 8007158:	461c      	mov	r4, r3
 800715a:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800715e:	4bad      	ldr	r3, [pc, #692]	@ (8007414 <masked_keccak+0x35c0>)
 8007160:	5c9b      	ldrb	r3, [r3, r2]
 8007162:	00da      	lsls	r2, r3, #3
 8007164:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007168:	189d      	adds	r5, r3, r2
 800716a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800716e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007172:	f1a4 0120 	sub.w	r1, r4, #32
 8007176:	f1c4 0020 	rsb	r0, r4, #32
 800717a:	fa03 f604 	lsl.w	r6, r3, r4
 800717e:	f8c7 63fc 	str.w	r6, [r7, #1020]	@ 0x3fc
 8007182:	fa02 f101 	lsl.w	r1, r2, r1
 8007186:	f8d7 63fc 	ldr.w	r6, [r7, #1020]	@ 0x3fc
 800718a:	430e      	orrs	r6, r1
 800718c:	f8c7 63fc 	str.w	r6, [r7, #1020]	@ 0x3fc
 8007190:	fa22 f000 	lsr.w	r0, r2, r0
 8007194:	f8d7 13fc 	ldr.w	r1, [r7, #1020]	@ 0x3fc
 8007198:	4301      	orrs	r1, r0
 800719a:	f8c7 13fc 	str.w	r1, [r7, #1020]	@ 0x3fc
 800719e:	fa02 f104 	lsl.w	r1, r2, r4
 80071a2:	f8c7 13f8 	str.w	r1, [r7, #1016]	@ 0x3f8
 80071a6:	4264      	negs	r4, r4
 80071a8:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 80071ac:	f1c4 0120 	rsb	r1, r4, #32
 80071b0:	f1a4 0020 	sub.w	r0, r4, #32
 80071b4:	fa22 f604 	lsr.w	r6, r2, r4
 80071b8:	f8c7 64b8 	str.w	r6, [r7, #1208]	@ 0x4b8
 80071bc:	fa03 f101 	lsl.w	r1, r3, r1
 80071c0:	f8d7 64b8 	ldr.w	r6, [r7, #1208]	@ 0x4b8
 80071c4:	430e      	orrs	r6, r1
 80071c6:	f8c7 64b8 	str.w	r6, [r7, #1208]	@ 0x4b8
 80071ca:	fa23 f000 	lsr.w	r0, r3, r0
 80071ce:	f8d7 14b8 	ldr.w	r1, [r7, #1208]	@ 0x4b8
 80071d2:	4301      	orrs	r1, r0
 80071d4:	f8c7 14b8 	str.w	r1, [r7, #1208]	@ 0x4b8
 80071d8:	40e3      	lsrs	r3, r4
 80071da:	f8c7 34bc 	str.w	r3, [r7, #1212]	@ 0x4bc
 80071de:	e9d7 89fe 	ldrd	r8, r9, [r7, #1016]	@ 0x3f8
 80071e2:	4643      	mov	r3, r8
 80071e4:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 80071e8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80071ec:	4602      	mov	r2, r0
 80071ee:	4313      	orrs	r3, r2
 80071f0:	613b      	str	r3, [r7, #16]
 80071f2:	460b      	mov	r3, r1
 80071f4:	464a      	mov	r2, r9
 80071f6:	4313      	orrs	r3, r2
 80071f8:	617b      	str	r3, [r7, #20]
 80071fa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80071fe:	f507 6297 	add.w	r2, r7, #1208	@ 0x4b8
 8007202:	e9c2 3400 	strd	r3, r4, [r2]
 8007206:	e9c5 3400 	strd	r3, r4, [r5]
 800720a:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800720e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007212:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8007216:	e9c1 2300 	strd	r2, r3, [r1]
 800721a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800721e:	3301      	adds	r3, #1
 8007220:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8007224:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007228:	4b7a      	ldr	r3, [pc, #488]	@ (8007414 <masked_keccak+0x35c0>)
 800722a:	5c9b      	ldrb	r3, [r3, r2]
 800722c:	00da      	lsls	r2, r3, #3
 800722e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007232:	4413      	add	r3, r2
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800723c:	e9c1 2300 	strd	r2, r3, [r1]
 8007240:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007244:	4b72      	ldr	r3, [pc, #456]	@ (8007410 <masked_keccak+0x35bc>)
 8007246:	5c9b      	ldrb	r3, [r3, r2]
 8007248:	461c      	mov	r4, r3
 800724a:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800724e:	4b71      	ldr	r3, [pc, #452]	@ (8007414 <masked_keccak+0x35c0>)
 8007250:	5c9b      	ldrb	r3, [r3, r2]
 8007252:	00da      	lsls	r2, r3, #3
 8007254:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007258:	189d      	adds	r5, r3, r2
 800725a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f1a4 0120 	sub.w	r1, r4, #32
 8007266:	f1c4 0020 	rsb	r0, r4, #32
 800726a:	fa03 f604 	lsl.w	r6, r3, r4
 800726e:	f8c7 63f4 	str.w	r6, [r7, #1012]	@ 0x3f4
 8007272:	fa02 f101 	lsl.w	r1, r2, r1
 8007276:	f8d7 63f4 	ldr.w	r6, [r7, #1012]	@ 0x3f4
 800727a:	430e      	orrs	r6, r1
 800727c:	f8c7 63f4 	str.w	r6, [r7, #1012]	@ 0x3f4
 8007280:	fa22 f000 	lsr.w	r0, r2, r0
 8007284:	f8d7 13f4 	ldr.w	r1, [r7, #1012]	@ 0x3f4
 8007288:	4301      	orrs	r1, r0
 800728a:	f8c7 13f4 	str.w	r1, [r7, #1012]	@ 0x3f4
 800728e:	fa02 f104 	lsl.w	r1, r2, r4
 8007292:	f8c7 13f0 	str.w	r1, [r7, #1008]	@ 0x3f0
 8007296:	4264      	negs	r4, r4
 8007298:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 800729c:	f1c4 0120 	rsb	r1, r4, #32
 80072a0:	f1a4 0020 	sub.w	r0, r4, #32
 80072a4:	fa22 f604 	lsr.w	r6, r2, r4
 80072a8:	f8c7 64b0 	str.w	r6, [r7, #1200]	@ 0x4b0
 80072ac:	fa03 f101 	lsl.w	r1, r3, r1
 80072b0:	f8d7 64b0 	ldr.w	r6, [r7, #1200]	@ 0x4b0
 80072b4:	430e      	orrs	r6, r1
 80072b6:	f8c7 64b0 	str.w	r6, [r7, #1200]	@ 0x4b0
 80072ba:	fa23 f000 	lsr.w	r0, r3, r0
 80072be:	f8d7 14b0 	ldr.w	r1, [r7, #1200]	@ 0x4b0
 80072c2:	4301      	orrs	r1, r0
 80072c4:	f8c7 14b0 	str.w	r1, [r7, #1200]	@ 0x4b0
 80072c8:	40e3      	lsrs	r3, r4
 80072ca:	f8c7 34b4 	str.w	r3, [r7, #1204]	@ 0x4b4
 80072ce:	e9d7 89fc 	ldrd	r8, r9, [r7, #1008]	@ 0x3f0
 80072d2:	4643      	mov	r3, r8
 80072d4:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 80072d8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80072dc:	4602      	mov	r2, r0
 80072de:	4313      	orrs	r3, r2
 80072e0:	60bb      	str	r3, [r7, #8]
 80072e2:	460b      	mov	r3, r1
 80072e4:	464a      	mov	r2, r9
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]
 80072ea:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80072ee:	f507 6296 	add.w	r2, r7, #1200	@ 0x4b0
 80072f2:	e9c2 3400 	strd	r3, r4, [r2]
 80072f6:	e9c5 3400 	strd	r3, r4, [r5]
 80072fa:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80072fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007302:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 8007306:	e9c1 2300 	strd	r2, r3, [r1]
 800730a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800730e:	3301      	adds	r3, #1
 8007310:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8007314:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007318:	4b3e      	ldr	r3, [pc, #248]	@ (8007414 <masked_keccak+0x35c0>)
 800731a:	5c9b      	ldrb	r3, [r3, r2]
 800731c:	00da      	lsls	r2, r3, #3
 800731e:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007322:	4413      	add	r3, r2
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	f507 61ad 	add.w	r1, r7, #1384	@ 0x568
 800732c:	e9c1 2300 	strd	r2, r3, [r1]
 8007330:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007334:	4b36      	ldr	r3, [pc, #216]	@ (8007410 <masked_keccak+0x35bc>)
 8007336:	5c9b      	ldrb	r3, [r3, r2]
 8007338:	461c      	mov	r4, r3
 800733a:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800733e:	4b35      	ldr	r3, [pc, #212]	@ (8007414 <masked_keccak+0x35c0>)
 8007340:	5c9b      	ldrb	r3, [r3, r2]
 8007342:	00da      	lsls	r2, r3, #3
 8007344:	f8d7 35c0 	ldr.w	r3, [r7, #1472]	@ 0x5c0
 8007348:	189d      	adds	r5, r3, r2
 800734a:	f507 63b7 	add.w	r3, r7, #1464	@ 0x5b8
 800734e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007352:	f1a4 0120 	sub.w	r1, r4, #32
 8007356:	f1c4 0020 	rsb	r0, r4, #32
 800735a:	fa03 f604 	lsl.w	r6, r3, r4
 800735e:	f8c7 63ec 	str.w	r6, [r7, #1004]	@ 0x3ec
 8007362:	fa02 f101 	lsl.w	r1, r2, r1
 8007366:	f8d7 63ec 	ldr.w	r6, [r7, #1004]	@ 0x3ec
 800736a:	430e      	orrs	r6, r1
 800736c:	f8c7 63ec 	str.w	r6, [r7, #1004]	@ 0x3ec
 8007370:	fa22 f000 	lsr.w	r0, r2, r0
 8007374:	f8d7 13ec 	ldr.w	r1, [r7, #1004]	@ 0x3ec
 8007378:	4301      	orrs	r1, r0
 800737a:	f8c7 13ec 	str.w	r1, [r7, #1004]	@ 0x3ec
 800737e:	fa02 f104 	lsl.w	r1, r2, r4
 8007382:	f8c7 13e8 	str.w	r1, [r7, #1000]	@ 0x3e8
 8007386:	4264      	negs	r4, r4
 8007388:	f004 043f 	and.w	r4, r4, #63	@ 0x3f
 800738c:	f1c4 0120 	rsb	r1, r4, #32
 8007390:	f1a4 0020 	sub.w	r0, r4, #32
 8007394:	fa22 f604 	lsr.w	r6, r2, r4
 8007398:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8
 800739c:	fa03 f101 	lsl.w	r1, r3, r1
 80073a0:	f8d7 64a8 	ldr.w	r6, [r7, #1192]	@ 0x4a8
 80073a4:	430e      	orrs	r6, r1
 80073a6:	f8c7 64a8 	str.w	r6, [r7, #1192]	@ 0x4a8
 80073aa:	fa23 f000 	lsr.w	r0, r3, r0
 80073ae:	f8d7 14a8 	ldr.w	r1, [r7, #1192]	@ 0x4a8
 80073b2:	4301      	orrs	r1, r0
 80073b4:	f8c7 14a8 	str.w	r1, [r7, #1192]	@ 0x4a8
 80073b8:	40e3      	lsrs	r3, r4
 80073ba:	f8c7 34ac 	str.w	r3, [r7, #1196]	@ 0x4ac
 80073be:	e9d7 89fa 	ldrd	r8, r9, [r7, #1000]	@ 0x3e8
 80073c2:	4643      	mov	r3, r8
 80073c4:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 80073c8:	e9d2 0100 	ldrd	r0, r1, [r2]
 80073cc:	4602      	mov	r2, r0
 80073ce:	4313      	orrs	r3, r2
 80073d0:	603b      	str	r3, [r7, #0]
 80073d2:	460b      	mov	r3, r1
 80073d4:	464a      	mov	r2, r9
 80073d6:	4313      	orrs	r3, r2
 80073d8:	607b      	str	r3, [r7, #4]
 80073da:	e9d7 3400 	ldrd	r3, r4, [r7]
 80073de:	f507 6295 	add.w	r2, r7, #1192	@ 0x4a8
 80073e2:	e9c2 3400 	strd	r3, r4, [r2]
 80073e6:	e9c5 3400 	strd	r3, r4, [r5]
 80073ea:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80073ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073f2:	f507 61b7 	add.w	r1, r7, #1464	@ 0x5b8
 80073f6:	e9c1 2300 	strd	r2, r3, [r1]
 80073fa:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80073fe:	3301      	adds	r3, #1
 8007400:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
    for (int j = 0; j < MASKING_N; j++) {
 8007404:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 8007408:	3301      	adds	r3, #1
 800740a:	f8c7 35dc 	str.w	r3, [r7, #1500]	@ 0x5dc
 800740e:	e003      	b.n	8007418 <masked_keccak+0x35c4>
 8007410:	08012008 	.word	0x08012008
 8007414:	08012020 	.word	0x08012020
 8007418:	f8d7 35dc 	ldr.w	r3, [r7, #1500]	@ 0x5dc
 800741c:	2b03      	cmp	r3, #3
 800741e:	f77c ad2a 	ble.w	8003e76 <masked_keccak+0x22>
    }
    // Chi: non-linear -> not sharewise.
    // Masked gadgets are implemented on 32-bit words and Chi does not contain
    // rotations, so we can work on 32-bit words
    for (y = 0; y < 25; y += 5) {
 8007422:	2300      	movs	r3, #0
 8007424:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8007428:	e0ec      	b.n	8007604 <masked_keccak+0x37b0>
      for (int off = 0; off < 2; off++) {
 800742a:	2300      	movs	r3, #0
 800742c:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 8007430:	e0de      	b.n	80075f0 <masked_keccak+0x379c>
        uint32_t sb_state[5 * MASKING_N];
        size_t sb_state_msk_stride = 1;        // in 32-bit words
 8007432:	2301      	movs	r3, #1
 8007434:	f8c7 35d4 	str.w	r3, [r7, #1492]	@ 0x5d4
        size_t sb_state_data_stride = MASKING_N; // in 32-bit words
 8007438:	2304      	movs	r3, #4
 800743a:	f8c7 35d0 	str.w	r3, [r7, #1488]	@ 0x5d0
        uint32_t *sb_in = &state->h[0][2 * y + off];
 800743e:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8007442:	005a      	lsls	r2, r3, #1
 8007444:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 8007448:	4413      	add	r3, r2
 800744a:	009a      	lsls	r2, r3, #2
 800744c:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
 8007450:	4413      	add	r3, r2
 8007452:	f8c7 35cc 	str.w	r3, [r7, #1484]	@ 0x5cc
        size_t sb_in_data_stride = 2;     // in 32-bit words
 8007456:	2302      	movs	r3, #2
 8007458:	f8c7 35c8 	str.w	r3, [r7, #1480]	@ 0x5c8
        size_t sb_in_msk_stride = 2 * 25; // in 32-bit words
 800745c:	2332      	movs	r3, #50	@ 0x32
 800745e:	f8c7 35c4 	str.w	r3, [r7, #1476]	@ 0x5c4

        for (x = 0; x < 5; x++) {
 8007462:	2300      	movs	r3, #0
 8007464:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 8007468:	e07f      	b.n	800756a <masked_keccak+0x3716>
          copy_sharing(
              MASKING_N, sb_state + x * sb_state_data_stride, sb_state_msk_stride,
 800746a:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800746e:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 8007472:	fb02 f303 	mul.w	r3, r2, r3
 8007476:	009a      	lsls	r2, r3, #2
          copy_sharing(
 8007478:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 800747c:	1898      	adds	r0, r3, r2
              sb_in + ((x + 1) % 5) * sb_in_data_stride, sb_in_msk_stride);
 800747e:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8007482:	1c59      	adds	r1, r3, #1
 8007484:	4b76      	ldr	r3, [pc, #472]	@ (8007660 <masked_keccak+0x380c>)
 8007486:	fb83 2301 	smull	r2, r3, r3, r1
 800748a:	105a      	asrs	r2, r3, #1
 800748c:	17cb      	asrs	r3, r1, #31
 800748e:	1ad2      	subs	r2, r2, r3
 8007490:	4613      	mov	r3, r2
 8007492:	009b      	lsls	r3, r3, #2
 8007494:	4413      	add	r3, r2
 8007496:	1aca      	subs	r2, r1, r3
 8007498:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 800749c:	fb02 f303 	mul.w	r3, r2, r3
 80074a0:	009a      	lsls	r2, r3, #2
 80074a2:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80074a6:	441a      	add	r2, r3
          copy_sharing(
 80074a8:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 80074b4:	4601      	mov	r1, r0
 80074b6:	2004      	movs	r0, #4
 80074b8:	f000 fd56 	bl	8007f68 <copy_sharing>
          sb_state[x * sb_state_data_stride] =
              ~sb_state[x * sb_state_data_stride]; // NOT: on a single share
 80074bc:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80074c0:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80074c4:	fb02 f303 	mul.w	r3, r2, r3
 80074c8:	009b      	lsls	r3, r3, #2
 80074ca:	3388      	adds	r3, #136	@ 0x88
 80074cc:	f507 62ac 	add.w	r2, r7, #1376	@ 0x560
 80074d0:	4413      	add	r3, r2
 80074d2:	f853 1c80 	ldr.w	r1, [r3, #-128]
          sb_state[x * sb_state_data_stride] =
 80074d6:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80074da:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80074de:	fb02 f303 	mul.w	r3, r2, r3
              ~sb_state[x * sb_state_data_stride]; // NOT: on a single share
 80074e2:	43ca      	mvns	r2, r1
          sb_state[x * sb_state_data_stride] =
 80074e4:	009b      	lsls	r3, r3, #2
 80074e6:	3388      	adds	r3, #136	@ 0x88
 80074e8:	f507 61ac 	add.w	r1, r7, #1376	@ 0x560
 80074ec:	440b      	add	r3, r1
 80074ee:	f843 2c80 	str.w	r2, [r3, #-128]
          masked_and(
              MASKING_N, sb_state + x * sb_state_data_stride, sb_state_msk_stride,
 80074f2:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80074f6:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	009a      	lsls	r2, r3, #2
          masked_and(
 8007500:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007504:	189c      	adds	r4, r3, r2
              sb_state + x * sb_state_data_stride, sb_state_msk_stride,
 8007506:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 800750a:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 800750e:	fb02 f303 	mul.w	r3, r2, r3
 8007512:	009a      	lsls	r2, r3, #2
          masked_and(
 8007514:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 8007518:	1898      	adds	r0, r3, r2
              sb_in + ((x + 2) % 5) * sb_in_data_stride, sb_in_msk_stride);
 800751a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800751e:	1c99      	adds	r1, r3, #2
 8007520:	4b4f      	ldr	r3, [pc, #316]	@ (8007660 <masked_keccak+0x380c>)
 8007522:	fb83 2301 	smull	r2, r3, r3, r1
 8007526:	105a      	asrs	r2, r3, #1
 8007528:	17cb      	asrs	r3, r1, #31
 800752a:	1ad2      	subs	r2, r2, r3
 800752c:	4613      	mov	r3, r2
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	4413      	add	r3, r2
 8007532:	1aca      	subs	r2, r1, r3
 8007534:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8007538:	fb02 f303 	mul.w	r3, r2, r3
 800753c:	009a      	lsls	r2, r3, #2
 800753e:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 8007542:	441a      	add	r2, r3
          masked_and(
 8007544:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 8007548:	9302      	str	r3, [sp, #8]
 800754a:	9201      	str	r2, [sp, #4]
 800754c:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 8007550:	9300      	str	r3, [sp, #0]
 8007552:	4603      	mov	r3, r0
 8007554:	f8d7 25d4 	ldr.w	r2, [r7, #1492]	@ 0x5d4
 8007558:	4621      	mov	r1, r4
 800755a:	2004      	movs	r0, #4
 800755c:	f000 fd2c 	bl	8007fb8 <masked_and>
        for (x = 0; x < 5; x++) {
 8007560:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 8007564:	3301      	adds	r3, #1
 8007566:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 800756a:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 800756e:	2b04      	cmp	r3, #4
 8007570:	f67f af7b 	bls.w	800746a <masked_keccak+0x3616>
        }
        for (x = 0; x < 5; x++) {
 8007574:	2300      	movs	r3, #0
 8007576:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 800757a:	e030      	b.n	80075de <masked_keccak+0x378a>
          masked_xor(MASKING_N, sb_in + x * sb_in_data_stride, sb_in_msk_stride,
 800757c:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007580:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8007584:	fb02 f303 	mul.w	r3, r2, r3
 8007588:	009a      	lsls	r2, r3, #2
 800758a:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 800758e:	1898      	adds	r0, r3, r2
                     sb_in + x * sb_in_data_stride, sb_in_msk_stride,
 8007590:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 8007594:	f8d7 35c8 	ldr.w	r3, [r7, #1480]	@ 0x5c8
 8007598:	fb02 f303 	mul.w	r3, r2, r3
 800759c:	009a      	lsls	r2, r3, #2
 800759e:	f8d7 35cc 	ldr.w	r3, [r7, #1484]	@ 0x5cc
 80075a2:	1899      	adds	r1, r3, r2
                     sb_state + x * sb_state_data_stride, sb_state_msk_stride);
 80075a4:	f897 25e7 	ldrb.w	r2, [r7, #1511]	@ 0x5e7
 80075a8:	f8d7 35d0 	ldr.w	r3, [r7, #1488]	@ 0x5d0
 80075ac:	fb02 f303 	mul.w	r3, r2, r3
 80075b0:	009a      	lsls	r2, r3, #2
          masked_xor(MASKING_N, sb_in + x * sb_in_data_stride, sb_in_msk_stride,
 80075b2:	f507 63ad 	add.w	r3, r7, #1384	@ 0x568
 80075b6:	441a      	add	r2, r3
 80075b8:	f8d7 35d4 	ldr.w	r3, [r7, #1492]	@ 0x5d4
 80075bc:	9302      	str	r3, [sp, #8]
 80075be:	9201      	str	r2, [sp, #4]
 80075c0:	f8d7 35c4 	ldr.w	r3, [r7, #1476]	@ 0x5c4
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	460b      	mov	r3, r1
 80075c8:	f8d7 25c4 	ldr.w	r2, [r7, #1476]	@ 0x5c4
 80075cc:	4601      	mov	r1, r0
 80075ce:	2004      	movs	r0, #4
 80075d0:	f000 fd5f 	bl	8008092 <masked_xor>
        for (x = 0; x < 5; x++) {
 80075d4:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80075d8:	3301      	adds	r3, #1
 80075da:	f887 35e7 	strb.w	r3, [r7, #1511]	@ 0x5e7
 80075de:	f897 35e7 	ldrb.w	r3, [r7, #1511]	@ 0x5e7
 80075e2:	2b04      	cmp	r3, #4
 80075e4:	d9ca      	bls.n	800757c <masked_keccak+0x3728>
      for (int off = 0; off < 2; off++) {
 80075e6:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80075ea:	3301      	adds	r3, #1
 80075ec:	f8c7 35d8 	str.w	r3, [r7, #1496]	@ 0x5d8
 80075f0:	f8d7 35d8 	ldr.w	r3, [r7, #1496]	@ 0x5d8
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	f77f af1c 	ble.w	8007432 <masked_keccak+0x35de>
    for (y = 0; y < 25; y += 5) {
 80075fa:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 80075fe:	3305      	adds	r3, #5
 8007600:	f887 35e6 	strb.w	r3, [r7, #1510]	@ 0x5e6
 8007604:	f897 35e6 	ldrb.w	r3, [r7, #1510]	@ 0x5e6
 8007608:	2b18      	cmp	r3, #24
 800760a:	f67f af0e 	bls.w	800742a <masked_keccak+0x35d6>
        }
      }
    }
    // Iota
    // Add constant: on a single share
    state->w[0][0] ^= RC[i];
 800760e:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
 8007612:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007616:	4a13      	ldr	r2, [pc, #76]	@ (8007664 <masked_keccak+0x3810>)
 8007618:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	@ 0x5e0
 800761c:	00db      	lsls	r3, r3, #3
 800761e:	4413      	add	r3, r2
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	ea80 0402 	eor.w	r4, r0, r2
 8007628:	f8c7 40c0 	str.w	r4, [r7, #192]	@ 0xc0
 800762c:	404b      	eors	r3, r1
 800762e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007632:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
 8007636:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800763a:	e9c3 1200 	strd	r1, r2, [r3]
  for (int i = 0; i < NROUNDS; i++) {
 800763e:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	@ 0x5e0
 8007642:	3301      	adds	r3, #1
 8007644:	f8c7 35e0 	str.w	r3, [r7, #1504]	@ 0x5e0
 8007648:	f8d7 35e0 	ldr.w	r3, [r7, #1504]	@ 0x5e0
 800764c:	2b17      	cmp	r3, #23
 800764e:	f77c ac0d 	ble.w	8003e6c <masked_keccak+0x18>
  }
}
 8007652:	bf00      	nop
 8007654:	bf00      	nop
 8007656:	f207 57ec 	addw	r7, r7, #1516	@ 0x5ec
 800765a:	46bd      	mov	sp, r7
 800765c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007660:	66666667 	.word	0x66666667
 8007664:	08012038 	.word	0x08012038

08007668 <masked_hash_keccak>:
    } while (0)

void masked_hash_keccak(uint8_t *out, size_t outlen, size_t out_msk_stride,
                        size_t out_data_stride, const uint8_t *in, size_t inlen,
                        size_t in_msk_stride, size_t in_data_stride,
                        size_t rate, uint8_t delim) {
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	f5ad 7d7b 	sub.w	sp, sp, #1004	@ 0x3ec
 8007670:	af02      	add	r7, sp, #8
 8007672:	f507 7478 	add.w	r4, r7, #992	@ 0x3e0
 8007676:	f5a4 745f 	sub.w	r4, r4, #892	@ 0x37c
 800767a:	6020      	str	r0, [r4, #0]
 800767c:	f507 7078 	add.w	r0, r7, #992	@ 0x3e0
 8007680:	f5a0 7060 	sub.w	r0, r0, #896	@ 0x380
 8007684:	6001      	str	r1, [r0, #0]
 8007686:	f507 7178 	add.w	r1, r7, #992	@ 0x3e0
 800768a:	f5a1 7161 	sub.w	r1, r1, #900	@ 0x384
 800768e:	600a      	str	r2, [r1, #0]
 8007690:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 8007694:	f5a2 7262 	sub.w	r2, r2, #904	@ 0x388
 8007698:	6013      	str	r3, [r2, #0]
  MaskedKeccakState state;
  memset(&state.w[0][0], 0, sizeof(state));
 800769a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800769e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80076a2:	2100      	movs	r1, #0
 80076a4:	4618      	mov	r0, r3
 80076a6:	f009 fe53 	bl	8011350 <memset>
  uint64_t *msk_a = &state.w[0][0];
 80076aa:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80076ae:	f8c7 3388 	str.w	r3, [r7, #904]	@ 0x388

  PRINT_STATE_LANES("Initial zeroed state", &state);
 80076b2:	49ab      	ldr	r1, [pc, #684]	@ (8007960 <masked_hash_keccak+0x2f8>)
 80076b4:	48ab      	ldr	r0, [pc, #684]	@ (8007964 <masked_hash_keccak+0x2fc>)
 80076b6:	f009 fceb 	bl	8011090 <iprintf>
 80076ba:	2300      	movs	r3, #0
 80076bc:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 80076c0:	e031      	b.n	8007726 <masked_hash_keccak+0xbe>
 80076c2:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 80076c6:	48a8      	ldr	r0, [pc, #672]	@ (8007968 <masked_hash_keccak+0x300>)
 80076c8:	f009 fce2 	bl	8011090 <iprintf>
 80076cc:	2300      	movs	r3, #0
 80076ce:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 80076d2:	e01f      	b.n	8007714 <masked_hash_keccak+0xac>
 80076d4:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 80076d8:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 80076dc:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 80076e0:	461a      	mov	r2, r3
 80076e2:	0092      	lsls	r2, r2, #2
 80076e4:	441a      	add	r2, r3
 80076e6:	0093      	lsls	r3, r2, #2
 80076e8:	441a      	add	r2, r3
 80076ea:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 80076ee:	4413      	add	r3, r2
 80076f0:	00db      	lsls	r3, r3, #3
 80076f2:	440b      	add	r3, r1
 80076f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f8:	e9cd 2300 	strd	r2, r3, [sp]
 80076fc:	f8d7 23d8 	ldr.w	r2, [r7, #984]	@ 0x3d8
 8007700:	f8d7 13dc 	ldr.w	r1, [r7, #988]	@ 0x3dc
 8007704:	4899      	ldr	r0, [pc, #612]	@ (800796c <masked_hash_keccak+0x304>)
 8007706:	f009 fcc3 	bl	8011090 <iprintf>
 800770a:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 800770e:	3301      	adds	r3, #1
 8007710:	f8c7 33d8 	str.w	r3, [r7, #984]	@ 0x3d8
 8007714:	f8d7 33d8 	ldr.w	r3, [r7, #984]	@ 0x3d8
 8007718:	2b18      	cmp	r3, #24
 800771a:	dddb      	ble.n	80076d4 <masked_hash_keccak+0x6c>
 800771c:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 8007720:	3301      	adds	r3, #1
 8007722:	f8c7 33dc 	str.w	r3, [r7, #988]	@ 0x3dc
 8007726:	f8d7 33dc 	ldr.w	r3, [r7, #988]	@ 0x3dc
 800772a:	2b03      	cmp	r3, #3
 800772c:	ddc9      	ble.n	80076c2 <masked_hash_keccak+0x5a>

  // Absorb input.
  while (inlen >= rate) {
 800772e:	e108      	b.n	8007942 <masked_hash_keccak+0x2da>
    for (size_t i = 0; i < rate; i++) {
 8007730:	2300      	movs	r3, #0
 8007732:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8007736:	e06b      	b.n	8007810 <masked_hash_keccak+0x1a8>
      for (size_t j = 0; j < MASKING_N; j++) {
 8007738:	2300      	movs	r3, #0
 800773a:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 800773e:	e05e      	b.n	80077fe <masked_hash_keccak+0x196>
        XORU64(msk_a, i + j * Plen, in[j * in_msk_stride + i * in_data_stride]);
 8007740:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8007744:	23c8      	movs	r3, #200	@ 0xc8
 8007746:	fb03 f202 	mul.w	r2, r3, r2
 800774a:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 800774e:	4413      	add	r3, r2
 8007750:	08db      	lsrs	r3, r3, #3
 8007752:	00da      	lsls	r2, r3, #3
 8007754:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007758:	4413      	add	r3, r2
 800775a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800775e:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 8007762:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8007766:	fb03 f102 	mul.w	r1, r3, r2
 800776a:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 800776e:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8007772:	fb02 f303 	mul.w	r3, r2, r3
 8007776:	18ca      	adds	r2, r1, r3
 8007778:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800777c:	4413      	add	r3, r2
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2200      	movs	r2, #0
 8007784:	633b      	str	r3, [r7, #48]	@ 0x30
 8007786:	637a      	str	r2, [r7, #52]	@ 0x34
 8007788:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 800778c:	23c8      	movs	r3, #200	@ 0xc8
 800778e:	fb03 f202 	mul.w	r2, r3, r2
 8007792:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 8007796:	4413      	add	r3, r2
 8007798:	f003 0307 	and.w	r3, r3, #7
 800779c:	00d9      	lsls	r1, r3, #3
 800779e:	f1a1 0320 	sub.w	r3, r1, #32
 80077a2:	f1c1 0220 	rsb	r2, r1, #32
 80077a6:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80077a8:	fa00 f901 	lsl.w	r9, r0, r1
 80077ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077ae:	fa00 f303 	lsl.w	r3, r0, r3
 80077b2:	ea49 0903 	orr.w	r9, r9, r3
 80077b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b8:	fa23 f202 	lsr.w	r2, r3, r2
 80077bc:	ea49 0902 	orr.w	r9, r9, r2
 80077c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077c2:	fa03 f801 	lsl.w	r8, r3, r1
 80077c6:	f8d7 23d0 	ldr.w	r2, [r7, #976]	@ 0x3d0
 80077ca:	23c8      	movs	r3, #200	@ 0xc8
 80077cc:	fb03 f202 	mul.w	r2, r3, r2
 80077d0:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 80077d4:	4413      	add	r3, r2
 80077d6:	08db      	lsrs	r3, r3, #3
 80077d8:	00da      	lsls	r2, r3, #3
 80077da:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 80077de:	4413      	add	r3, r2
 80077e0:	ea84 0208 	eor.w	r2, r4, r8
 80077e4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80077e6:	ea85 0209 	eor.w	r2, r5, r9
 80077ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80077ec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80077f0:	e9c3 1200 	strd	r1, r2, [r3]
      for (size_t j = 0; j < MASKING_N; j++) {
 80077f4:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 80077f8:	3301      	adds	r3, #1
 80077fa:	f8c7 33d0 	str.w	r3, [r7, #976]	@ 0x3d0
 80077fe:	f8d7 33d0 	ldr.w	r3, [r7, #976]	@ 0x3d0
 8007802:	2b03      	cmp	r3, #3
 8007804:	d99c      	bls.n	8007740 <masked_hash_keccak+0xd8>
    for (size_t i = 0; i < rate; i++) {
 8007806:	f8d7 33d4 	ldr.w	r3, [r7, #980]	@ 0x3d4
 800780a:	3301      	adds	r3, #1
 800780c:	f8c7 33d4 	str.w	r3, [r7, #980]	@ 0x3d4
 8007810:	f8d7 23d4 	ldr.w	r2, [r7, #980]	@ 0x3d4
 8007814:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007818:	429a      	cmp	r2, r3
 800781a:	d38d      	bcc.n	8007738 <masked_hash_keccak+0xd0>
      }
    }
    PRINT_STATE_LANES("After absorbing full input block", &state);
 800781c:	4954      	ldr	r1, [pc, #336]	@ (8007970 <masked_hash_keccak+0x308>)
 800781e:	4851      	ldr	r0, [pc, #324]	@ (8007964 <masked_hash_keccak+0x2fc>)
 8007820:	f009 fc36 	bl	8011090 <iprintf>
 8007824:	2300      	movs	r3, #0
 8007826:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 800782a:	e031      	b.n	8007890 <masked_hash_keccak+0x228>
 800782c:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 8007830:	484d      	ldr	r0, [pc, #308]	@ (8007968 <masked_hash_keccak+0x300>)
 8007832:	f009 fc2d 	bl	8011090 <iprintf>
 8007836:	2300      	movs	r3, #0
 8007838:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 800783c:	e01f      	b.n	800787e <masked_hash_keccak+0x216>
 800783e:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007842:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 8007846:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800784a:	461a      	mov	r2, r3
 800784c:	0092      	lsls	r2, r2, #2
 800784e:	441a      	add	r2, r3
 8007850:	0093      	lsls	r3, r2, #2
 8007852:	441a      	add	r2, r3
 8007854:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8007858:	4413      	add	r3, r2
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	440b      	add	r3, r1
 800785e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007862:	e9cd 2300 	strd	r2, r3, [sp]
 8007866:	f8d7 23c8 	ldr.w	r2, [r7, #968]	@ 0x3c8
 800786a:	f8d7 13cc 	ldr.w	r1, [r7, #972]	@ 0x3cc
 800786e:	483f      	ldr	r0, [pc, #252]	@ (800796c <masked_hash_keccak+0x304>)
 8007870:	f009 fc0e 	bl	8011090 <iprintf>
 8007874:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8007878:	3301      	adds	r3, #1
 800787a:	f8c7 33c8 	str.w	r3, [r7, #968]	@ 0x3c8
 800787e:	f8d7 33c8 	ldr.w	r3, [r7, #968]	@ 0x3c8
 8007882:	2b18      	cmp	r3, #24
 8007884:	dddb      	ble.n	800783e <masked_hash_keccak+0x1d6>
 8007886:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 800788a:	3301      	adds	r3, #1
 800788c:	f8c7 33cc 	str.w	r3, [r7, #972]	@ 0x3cc
 8007890:	f8d7 33cc 	ldr.w	r3, [r7, #972]	@ 0x3cc
 8007894:	2b03      	cmp	r3, #3
 8007896:	ddc9      	ble.n	800782c <masked_hash_keccak+0x1c4>
    masked_keccak(&state);
 8007898:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800789c:	4618      	mov	r0, r3
 800789e:	f7fc fad9 	bl	8003e54 <masked_keccak>
    PRINT_STATE_LANES("After Keccak on full input block", &state);
 80078a2:	4934      	ldr	r1, [pc, #208]	@ (8007974 <masked_hash_keccak+0x30c>)
 80078a4:	482f      	ldr	r0, [pc, #188]	@ (8007964 <masked_hash_keccak+0x2fc>)
 80078a6:	f009 fbf3 	bl	8011090 <iprintf>
 80078aa:	2300      	movs	r3, #0
 80078ac:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 80078b0:	e031      	b.n	8007916 <masked_hash_keccak+0x2ae>
 80078b2:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80078b6:	482c      	ldr	r0, [pc, #176]	@ (8007968 <masked_hash_keccak+0x300>)
 80078b8:	f009 fbea 	bl	8011090 <iprintf>
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 80078c2:	e01f      	b.n	8007904 <masked_hash_keccak+0x29c>
 80078c4:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 80078c8:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 80078cc:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 80078d0:	461a      	mov	r2, r3
 80078d2:	0092      	lsls	r2, r2, #2
 80078d4:	441a      	add	r2, r3
 80078d6:	0093      	lsls	r3, r2, #2
 80078d8:	441a      	add	r2, r3
 80078da:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 80078de:	4413      	add	r3, r2
 80078e0:	00db      	lsls	r3, r3, #3
 80078e2:	440b      	add	r3, r1
 80078e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80078e8:	e9cd 2300 	strd	r2, r3, [sp]
 80078ec:	f8d7 23c0 	ldr.w	r2, [r7, #960]	@ 0x3c0
 80078f0:	f8d7 13c4 	ldr.w	r1, [r7, #964]	@ 0x3c4
 80078f4:	481d      	ldr	r0, [pc, #116]	@ (800796c <masked_hash_keccak+0x304>)
 80078f6:	f009 fbcb 	bl	8011090 <iprintf>
 80078fa:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 80078fe:	3301      	adds	r3, #1
 8007900:	f8c7 33c0 	str.w	r3, [r7, #960]	@ 0x3c0
 8007904:	f8d7 33c0 	ldr.w	r3, [r7, #960]	@ 0x3c0
 8007908:	2b18      	cmp	r3, #24
 800790a:	dddb      	ble.n	80078c4 <masked_hash_keccak+0x25c>
 800790c:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 8007910:	3301      	adds	r3, #1
 8007912:	f8c7 33c4 	str.w	r3, [r7, #964]	@ 0x3c4
 8007916:	f8d7 33c4 	ldr.w	r3, [r7, #964]	@ 0x3c4
 800791a:	2b03      	cmp	r3, #3
 800791c:	ddc9      	ble.n	80078b2 <masked_hash_keccak+0x24a>
    in += rate * in_data_stride;
 800791e:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8007922:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8007926:	fb03 f202 	mul.w	r2, r3, r2
 800792a:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800792e:	4413      	add	r3, r2
 8007930:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
    inlen -= rate;
 8007934:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8007938:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 800793c:	1ad3      	subs	r3, r2, r3
 800793e:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
  while (inlen >= rate) {
 8007942:	f8d7 240c 	ldr.w	r2, [r7, #1036]	@ 0x40c
 8007946:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 800794a:	429a      	cmp	r2, r3
 800794c:	f4bf aef0 	bcs.w	8007730 <masked_hash_keccak+0xc8>
  }

  // Absorb last block if any
  for (size_t i = 0; i < inlen; i++) {
 8007950:	2300      	movs	r3, #0
 8007952:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8007956:	e079      	b.n	8007a4c <masked_hash_keccak+0x3e4>
    for (size_t j = 0; j < MASKING_N; j++) {
 8007958:	2300      	movs	r3, #0
 800795a:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 800795e:	e06c      	b.n	8007a3a <masked_hash_keccak+0x3d2>
 8007960:	08011d78 	.word	0x08011d78
 8007964:	08011d90 	.word	0x08011d90
 8007968:	08011da0 	.word	0x08011da0
 800796c:	08011dac 	.word	0x08011dac
 8007970:	08011dc8 	.word	0x08011dc8
 8007974:	08011dec 	.word	0x08011dec
      XORU64(msk_a, i + j * Plen, in[j * in_msk_stride + i * in_data_stride]);
 8007978:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 800797c:	23c8      	movs	r3, #200	@ 0xc8
 800797e:	fb03 f202 	mul.w	r2, r3, r2
 8007982:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8007986:	4413      	add	r3, r2
 8007988:	08db      	lsrs	r3, r3, #3
 800798a:	00da      	lsls	r2, r3, #3
 800798c:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007990:	4413      	add	r3, r2
 8007992:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007996:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 800799a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 800799e:	fb03 f102 	mul.w	r1, r3, r2
 80079a2:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 80079a6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 80079aa:	fb02 f303 	mul.w	r3, r2, r3
 80079ae:	18ca      	adds	r2, r1, r3
 80079b0:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 80079b4:	4413      	add	r3, r2
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	b2db      	uxtb	r3, r3
 80079ba:	2200      	movs	r2, #0
 80079bc:	623b      	str	r3, [r7, #32]
 80079be:	627a      	str	r2, [r7, #36]	@ 0x24
 80079c0:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 80079c4:	23c8      	movs	r3, #200	@ 0xc8
 80079c6:	fb03 f202 	mul.w	r2, r3, r2
 80079ca:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 80079ce:	4413      	add	r3, r2
 80079d0:	f003 0307 	and.w	r3, r3, #7
 80079d4:	00d9      	lsls	r1, r3, #3
 80079d6:	f1a1 0320 	sub.w	r3, r1, #32
 80079da:	f1c1 0220 	rsb	r2, r1, #32
 80079de:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80079e2:	4648      	mov	r0, r9
 80079e4:	fa00 fb01 	lsl.w	fp, r0, r1
 80079e8:	4640      	mov	r0, r8
 80079ea:	fa00 f303 	lsl.w	r3, r0, r3
 80079ee:	ea4b 0b03 	orr.w	fp, fp, r3
 80079f2:	4643      	mov	r3, r8
 80079f4:	fa23 f202 	lsr.w	r2, r3, r2
 80079f8:	ea4b 0b02 	orr.w	fp, fp, r2
 80079fc:	4643      	mov	r3, r8
 80079fe:	fa03 fa01 	lsl.w	sl, r3, r1
 8007a02:	f8d7 23b8 	ldr.w	r2, [r7, #952]	@ 0x3b8
 8007a06:	23c8      	movs	r3, #200	@ 0xc8
 8007a08:	fb03 f202 	mul.w	r2, r3, r2
 8007a0c:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8007a10:	4413      	add	r3, r2
 8007a12:	08db      	lsrs	r3, r3, #3
 8007a14:	00da      	lsls	r2, r3, #3
 8007a16:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007a1a:	4413      	add	r3, r2
 8007a1c:	ea84 020a 	eor.w	r2, r4, sl
 8007a20:	61ba      	str	r2, [r7, #24]
 8007a22:	ea85 020b 	eor.w	r2, r5, fp
 8007a26:	61fa      	str	r2, [r7, #28]
 8007a28:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8007a2c:	e9c3 1200 	strd	r1, r2, [r3]
    for (size_t j = 0; j < MASKING_N; j++) {
 8007a30:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8007a34:	3301      	adds	r3, #1
 8007a36:	f8c7 33b8 	str.w	r3, [r7, #952]	@ 0x3b8
 8007a3a:	f8d7 33b8 	ldr.w	r3, [r7, #952]	@ 0x3b8
 8007a3e:	2b03      	cmp	r3, #3
 8007a40:	d99a      	bls.n	8007978 <masked_hash_keccak+0x310>
  for (size_t i = 0; i < inlen; i++) {
 8007a42:	f8d7 33bc 	ldr.w	r3, [r7, #956]	@ 0x3bc
 8007a46:	3301      	adds	r3, #1
 8007a48:	f8c7 33bc 	str.w	r3, [r7, #956]	@ 0x3bc
 8007a4c:	f8d7 23bc 	ldr.w	r2, [r7, #956]	@ 0x3bc
 8007a50:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8007a54:	429a      	cmp	r2, r3
 8007a56:	f4ff af7f 	bcc.w	8007958 <masked_hash_keccak+0x2f0>
    }
  }
  PRINT_STATE_LANES("After absorbing partial input block", &state);
 8007a5a:	49a1      	ldr	r1, [pc, #644]	@ (8007ce0 <masked_hash_keccak+0x678>)
 8007a5c:	48a1      	ldr	r0, [pc, #644]	@ (8007ce4 <masked_hash_keccak+0x67c>)
 8007a5e:	f009 fb17 	bl	8011090 <iprintf>
 8007a62:	2300      	movs	r3, #0
 8007a64:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8007a68:	e031      	b.n	8007ace <masked_hash_keccak+0x466>
 8007a6a:	f8d7 13b4 	ldr.w	r1, [r7, #948]	@ 0x3b4
 8007a6e:	489e      	ldr	r0, [pc, #632]	@ (8007ce8 <masked_hash_keccak+0x680>)
 8007a70:	f009 fb0e 	bl	8011090 <iprintf>
 8007a74:	2300      	movs	r3, #0
 8007a76:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8007a7a:	e01f      	b.n	8007abc <masked_hash_keccak+0x454>
 8007a7c:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007a80:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 8007a84:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8007a88:	461a      	mov	r2, r3
 8007a8a:	0092      	lsls	r2, r2, #2
 8007a8c:	441a      	add	r2, r3
 8007a8e:	0093      	lsls	r3, r2, #2
 8007a90:	441a      	add	r2, r3
 8007a92:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8007a96:	4413      	add	r3, r2
 8007a98:	00db      	lsls	r3, r3, #3
 8007a9a:	440b      	add	r3, r1
 8007a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa0:	e9cd 2300 	strd	r2, r3, [sp]
 8007aa4:	f8d7 23b0 	ldr.w	r2, [r7, #944]	@ 0x3b0
 8007aa8:	f8d7 13b4 	ldr.w	r1, [r7, #948]	@ 0x3b4
 8007aac:	488f      	ldr	r0, [pc, #572]	@ (8007cec <masked_hash_keccak+0x684>)
 8007aae:	f009 faef 	bl	8011090 <iprintf>
 8007ab2:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8007ab6:	3301      	adds	r3, #1
 8007ab8:	f8c7 33b0 	str.w	r3, [r7, #944]	@ 0x3b0
 8007abc:	f8d7 33b0 	ldr.w	r3, [r7, #944]	@ 0x3b0
 8007ac0:	2b18      	cmp	r3, #24
 8007ac2:	dddb      	ble.n	8007a7c <masked_hash_keccak+0x414>
 8007ac4:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8007ac8:	3301      	adds	r3, #1
 8007aca:	f8c7 33b4 	str.w	r3, [r7, #948]	@ 0x3b4
 8007ace:	f8d7 33b4 	ldr.w	r3, [r7, #948]	@ 0x3b4
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	ddc9      	ble.n	8007a6a <masked_hash_keccak+0x402>

  // Xor in the DS and pad frame.
  XORU64(msk_a, inlen, delim);
 8007ad6:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8007ada:	08db      	lsrs	r3, r3, #3
 8007adc:	00da      	lsls	r2, r3, #3
 8007ade:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007ae2:	4413      	add	r3, r2
 8007ae4:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007ae8:	f897 341c 	ldrb.w	r3, [r7, #1052]	@ 0x41c
 8007aec:	2200      	movs	r2, #0
 8007aee:	613b      	str	r3, [r7, #16]
 8007af0:	617a      	str	r2, [r7, #20]
 8007af2:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8007af6:	f003 0307 	and.w	r3, r3, #7
 8007afa:	00d9      	lsls	r1, r3, #3
 8007afc:	f1a1 0320 	sub.w	r3, r1, #32
 8007b00:	f1c1 0220 	rsb	r2, r1, #32
 8007b04:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8007b08:	4648      	mov	r0, r9
 8007b0a:	4088      	lsls	r0, r1
 8007b0c:	6578      	str	r0, [r7, #84]	@ 0x54
 8007b0e:	4640      	mov	r0, r8
 8007b10:	fa00 f303 	lsl.w	r3, r0, r3
 8007b14:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8007b16:	4318      	orrs	r0, r3
 8007b18:	6578      	str	r0, [r7, #84]	@ 0x54
 8007b1a:	4643      	mov	r3, r8
 8007b1c:	fa23 f202 	lsr.w	r2, r3, r2
 8007b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b22:	4313      	orrs	r3, r2
 8007b24:	657b      	str	r3, [r7, #84]	@ 0x54
 8007b26:	4643      	mov	r3, r8
 8007b28:	408b      	lsls	r3, r1
 8007b2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8007b2c:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8007b30:	08db      	lsrs	r3, r3, #3
 8007b32:	00da      	lsls	r2, r3, #3
 8007b34:	f8d7 3388 	ldr.w	r3, [r7, #904]	@ 0x388
 8007b38:	4413      	add	r3, r2
 8007b3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8007b3e:	4602      	mov	r2, r0
 8007b40:	4062      	eors	r2, r4
 8007b42:	60ba      	str	r2, [r7, #8]
 8007b44:	460a      	mov	r2, r1
 8007b46:	406a      	eors	r2, r5
 8007b48:	60fa      	str	r2, [r7, #12]
 8007b4a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8007b4e:	e9c3 1200 	strd	r1, r2, [r3]
  XORU64(msk_a, rate - 1, 0x80);
 8007b52:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007b56:	3b01      	subs	r3, #1
 8007b58:	08db      	lsrs	r3, r3, #3
 8007b5a:	00db      	lsls	r3, r3, #3
 8007b5c:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8007b60:	4413      	add	r3, r2
 8007b62:	e9d3 4500 	ldrd	r4, r5, [r3]
 8007b66:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	f003 0307 	and.w	r3, r3, #7
 8007b70:	00d8      	lsls	r0, r3, #3
 8007b72:	f04f 0280 	mov.w	r2, #128	@ 0x80
 8007b76:	f04f 0300 	mov.w	r3, #0
 8007b7a:	f1a0 0620 	sub.w	r6, r0, #32
 8007b7e:	f1c0 0c20 	rsb	ip, r0, #32
 8007b82:	fa03 f100 	lsl.w	r1, r3, r0
 8007b86:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8007b88:	fa02 f606 	lsl.w	r6, r2, r6
 8007b8c:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007b8e:	4331      	orrs	r1, r6
 8007b90:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8007b92:	fa22 fc0c 	lsr.w	ip, r2, ip
 8007b96:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8007b98:	ea41 010c 	orr.w	r1, r1, ip
 8007b9c:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8007b9e:	fa02 f300 	lsl.w	r3, r2, r0
 8007ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ba4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007ba8:	3b01      	subs	r3, #1
 8007baa:	08db      	lsrs	r3, r3, #3
 8007bac:	00db      	lsls	r3, r3, #3
 8007bae:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8007bb2:	4413      	add	r3, r2
 8007bb4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8007bb8:	4602      	mov	r2, r0
 8007bba:	4062      	eors	r2, r4
 8007bbc:	603a      	str	r2, [r7, #0]
 8007bbe:	460a      	mov	r2, r1
 8007bc0:	406a      	eors	r2, r5
 8007bc2:	607a      	str	r2, [r7, #4]
 8007bc4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8007bc8:	e9c3 1200 	strd	r1, r2, [r3]
  PRINT_STATE_LANES("After adding delim and padding", &state);
 8007bcc:	4948      	ldr	r1, [pc, #288]	@ (8007cf0 <masked_hash_keccak+0x688>)
 8007bce:	4845      	ldr	r0, [pc, #276]	@ (8007ce4 <masked_hash_keccak+0x67c>)
 8007bd0:	f009 fa5e 	bl	8011090 <iprintf>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8007bda:	e031      	b.n	8007c40 <masked_hash_keccak+0x5d8>
 8007bdc:	f8d7 13ac 	ldr.w	r1, [r7, #940]	@ 0x3ac
 8007be0:	4841      	ldr	r0, [pc, #260]	@ (8007ce8 <masked_hash_keccak+0x680>)
 8007be2:	f009 fa55 	bl	8011090 <iprintf>
 8007be6:	2300      	movs	r3, #0
 8007be8:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8007bec:	e01f      	b.n	8007c2e <masked_hash_keccak+0x5c6>
 8007bee:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007bf2:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 8007bf6:	f8d7 23ac 	ldr.w	r2, [r7, #940]	@ 0x3ac
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009a      	lsls	r2, r3, #2
 8007c02:	4413      	add	r3, r2
 8007c04:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8007c08:	4413      	add	r3, r2
 8007c0a:	00db      	lsls	r3, r3, #3
 8007c0c:	440b      	add	r3, r1
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	e9cd 2300 	strd	r2, r3, [sp]
 8007c16:	f8d7 23a8 	ldr.w	r2, [r7, #936]	@ 0x3a8
 8007c1a:	f8d7 13ac 	ldr.w	r1, [r7, #940]	@ 0x3ac
 8007c1e:	4833      	ldr	r0, [pc, #204]	@ (8007cec <masked_hash_keccak+0x684>)
 8007c20:	f009 fa36 	bl	8011090 <iprintf>
 8007c24:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8007c28:	3301      	adds	r3, #1
 8007c2a:	f8c7 33a8 	str.w	r3, [r7, #936]	@ 0x3a8
 8007c2e:	f8d7 33a8 	ldr.w	r3, [r7, #936]	@ 0x3a8
 8007c32:	2b18      	cmp	r3, #24
 8007c34:	dddb      	ble.n	8007bee <masked_hash_keccak+0x586>
 8007c36:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8007c3a:	3301      	adds	r3, #1
 8007c3c:	f8c7 33ac 	str.w	r3, [r7, #940]	@ 0x3ac
 8007c40:	f8d7 33ac 	ldr.w	r3, [r7, #940]	@ 0x3ac
 8007c44:	2b03      	cmp	r3, #3
 8007c46:	ddc9      	ble.n	8007bdc <masked_hash_keccak+0x574>

  // Apply P
  masked_keccak(&state);
 8007c48:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fc f901 	bl	8003e54 <masked_keccak>
  PRINT_STATE_LANES("After final Keccak before squeezing", &state);
 8007c52:	4928      	ldr	r1, [pc, #160]	@ (8007cf4 <masked_hash_keccak+0x68c>)
 8007c54:	4823      	ldr	r0, [pc, #140]	@ (8007ce4 <masked_hash_keccak+0x67c>)
 8007c56:	f009 fa1b 	bl	8011090 <iprintf>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8007c60:	e031      	b.n	8007cc6 <masked_hash_keccak+0x65e>
 8007c62:	f8d7 13a4 	ldr.w	r1, [r7, #932]	@ 0x3a4
 8007c66:	4820      	ldr	r0, [pc, #128]	@ (8007ce8 <masked_hash_keccak+0x680>)
 8007c68:	f009 fa12 	bl	8011090 <iprintf>
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8007c72:	e01f      	b.n	8007cb4 <masked_hash_keccak+0x64c>
 8007c74:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007c78:	f5a3 715e 	sub.w	r1, r3, #888	@ 0x378
 8007c7c:	f8d7 23a4 	ldr.w	r2, [r7, #932]	@ 0x3a4
 8007c80:	4613      	mov	r3, r2
 8007c82:	009b      	lsls	r3, r3, #2
 8007c84:	4413      	add	r3, r2
 8007c86:	009a      	lsls	r2, r3, #2
 8007c88:	4413      	add	r3, r2
 8007c8a:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8007c8e:	4413      	add	r3, r2
 8007c90:	00db      	lsls	r3, r3, #3
 8007c92:	440b      	add	r3, r1
 8007c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c98:	e9cd 2300 	strd	r2, r3, [sp]
 8007c9c:	f8d7 23a0 	ldr.w	r2, [r7, #928]	@ 0x3a0
 8007ca0:	f8d7 13a4 	ldr.w	r1, [r7, #932]	@ 0x3a4
 8007ca4:	4811      	ldr	r0, [pc, #68]	@ (8007cec <masked_hash_keccak+0x684>)
 8007ca6:	f009 f9f3 	bl	8011090 <iprintf>
 8007caa:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8007cae:	3301      	adds	r3, #1
 8007cb0:	f8c7 33a0 	str.w	r3, [r7, #928]	@ 0x3a0
 8007cb4:	f8d7 33a0 	ldr.w	r3, [r7, #928]	@ 0x3a0
 8007cb8:	2b18      	cmp	r3, #24
 8007cba:	dddb      	ble.n	8007c74 <masked_hash_keccak+0x60c>
 8007cbc:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8007cc0:	3301      	adds	r3, #1
 8007cc2:	f8c7 33a4 	str.w	r3, [r7, #932]	@ 0x3a4
 8007cc6:	f8d7 33a4 	ldr.w	r3, [r7, #932]	@ 0x3a4
 8007cca:	2b03      	cmp	r3, #3
 8007ccc:	ddc9      	ble.n	8007c62 <masked_hash_keccak+0x5fa>

  // Squeeze output.
  while (outlen >= rate) {
 8007cce:	e096      	b.n	8007dfe <masked_hash_keccak+0x796>
    for (size_t i = 0; i < rate; i++) {
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8007cd6:	e066      	b.n	8007da6 <masked_hash_keccak+0x73e>
      for (size_t j = 0; j < MASKING_N; j++) {
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8007cde:	e059      	b.n	8007d94 <masked_hash_keccak+0x72c>
 8007ce0:	08011e10 	.word	0x08011e10
 8007ce4:	08011d90 	.word	0x08011d90
 8007ce8:	08011da0 	.word	0x08011da0
 8007cec:	08011dac 	.word	0x08011dac
 8007cf0:	08011e34 	.word	0x08011e34
 8007cf4:	08011e54 	.word	0x08011e54
        out[i * out_data_stride + j * out_msk_stride] =
            ExtractU64(msk_a, i + j * Plen);
 8007cf8:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8007cfc:	22c8      	movs	r2, #200	@ 0xc8
 8007cfe:	fb03 f202 	mul.w	r2, r3, r2
 8007d02:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8007d06:	4413      	add	r3, r2
 8007d08:	08db      	lsrs	r3, r3, #3
 8007d0a:	00db      	lsls	r3, r3, #3
 8007d0c:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8007d10:	4413      	add	r3, r2
 8007d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d16:	f8d7 1398 	ldr.w	r1, [r7, #920]	@ 0x398
 8007d1a:	20c8      	movs	r0, #200	@ 0xc8
 8007d1c:	fb01 f000 	mul.w	r0, r1, r0
 8007d20:	f8d7 139c 	ldr.w	r1, [r7, #924]	@ 0x39c
 8007d24:	4401      	add	r1, r0
 8007d26:	f001 0107 	and.w	r1, r1, #7
 8007d2a:	00c9      	lsls	r1, r1, #3
 8007d2c:	f1c1 0420 	rsb	r4, r1, #32
 8007d30:	f1a1 0020 	sub.w	r0, r1, #32
 8007d34:	fa22 f501 	lsr.w	r5, r2, r1
 8007d38:	643d      	str	r5, [r7, #64]	@ 0x40
 8007d3a:	fa03 f404 	lsl.w	r4, r3, r4
 8007d3e:	6c3d      	ldr	r5, [r7, #64]	@ 0x40
 8007d40:	4325      	orrs	r5, r4
 8007d42:	643d      	str	r5, [r7, #64]	@ 0x40
 8007d44:	fa23 f000 	lsr.w	r0, r3, r0
 8007d48:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8007d4a:	4304      	orrs	r4, r0
 8007d4c:	643c      	str	r4, [r7, #64]	@ 0x40
 8007d4e:	40cb      	lsrs	r3, r1
 8007d50:	647b      	str	r3, [r7, #68]	@ 0x44
        out[i * out_data_stride + j * out_msk_stride] =
 8007d52:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007d56:	f5a3 7262 	sub.w	r2, r3, #904	@ 0x388
 8007d5a:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8007d5e:	6812      	ldr	r2, [r2, #0]
 8007d60:	fb03 f202 	mul.w	r2, r3, r2
 8007d64:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007d68:	f5a3 7161 	sub.w	r1, r3, #900	@ 0x384
 8007d6c:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8007d70:	6809      	ldr	r1, [r1, #0]
 8007d72:	fb01 f303 	mul.w	r3, r1, r3
 8007d76:	4413      	add	r3, r2
 8007d78:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 8007d7c:	f5a2 725f 	sub.w	r2, r2, #892	@ 0x37c
 8007d80:	6812      	ldr	r2, [r2, #0]
 8007d82:	4413      	add	r3, r2
 8007d84:	f897 2040 	ldrb.w	r2, [r7, #64]	@ 0x40
 8007d88:	701a      	strb	r2, [r3, #0]
      for (size_t j = 0; j < MASKING_N; j++) {
 8007d8a:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8007d8e:	3301      	adds	r3, #1
 8007d90:	f8c7 3398 	str.w	r3, [r7, #920]	@ 0x398
 8007d94:	f8d7 3398 	ldr.w	r3, [r7, #920]	@ 0x398
 8007d98:	2b03      	cmp	r3, #3
 8007d9a:	d9ad      	bls.n	8007cf8 <masked_hash_keccak+0x690>
    for (size_t i = 0; i < rate; i++) {
 8007d9c:	f8d7 339c 	ldr.w	r3, [r7, #924]	@ 0x39c
 8007da0:	3301      	adds	r3, #1
 8007da2:	f8c7 339c 	str.w	r3, [r7, #924]	@ 0x39c
 8007da6:	f8d7 239c 	ldr.w	r2, [r7, #924]	@ 0x39c
 8007daa:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007dae:	429a      	cmp	r2, r3
 8007db0:	d392      	bcc.n	8007cd8 <masked_hash_keccak+0x670>
      }
    }
    masked_keccak(&state);
 8007db2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fc f84c 	bl	8003e54 <masked_keccak>
    out += rate * out_data_stride;
 8007dbc:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007dc0:	f5a3 7262 	sub.w	r2, r3, #904	@ 0x388
 8007dc4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007dc8:	6812      	ldr	r2, [r2, #0]
 8007dca:	fb03 f202 	mul.w	r2, r3, r2
 8007dce:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007dd2:	f5a3 735f 	sub.w	r3, r3, #892	@ 0x37c
 8007dd6:	f507 7178 	add.w	r1, r7, #992	@ 0x3e0
 8007dda:	f5a1 715f 	sub.w	r1, r1, #892	@ 0x37c
 8007dde:	6809      	ldr	r1, [r1, #0]
 8007de0:	440a      	add	r2, r1
 8007de2:	601a      	str	r2, [r3, #0]
    outlen -= rate;
 8007de4:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007de8:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8007dec:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 8007df0:	f5a2 7260 	sub.w	r2, r2, #896	@ 0x380
 8007df4:	6811      	ldr	r1, [r2, #0]
 8007df6:	f8d7 2418 	ldr.w	r2, [r7, #1048]	@ 0x418
 8007dfa:	1a8a      	subs	r2, r1, r2
 8007dfc:	601a      	str	r2, [r3, #0]
  while (outlen >= rate) {
 8007dfe:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007e02:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8007e06:	681a      	ldr	r2, [r3, #0]
 8007e08:	f8d7 3418 	ldr.w	r3, [r7, #1048]	@ 0x418
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	f4bf af5f 	bcs.w	8007cd0 <masked_hash_keccak+0x668>
  }

  for (size_t i = 0; i < outlen; i++) {
 8007e12:	2300      	movs	r3, #0
 8007e14:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8007e18:	e05a      	b.n	8007ed0 <masked_hash_keccak+0x868>
    for (size_t j = 0; j < MASKING_N; j++) {
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8007e20:	e04d      	b.n	8007ebe <masked_hash_keccak+0x856>
      out[i * out_data_stride + j * out_msk_stride] =
          ExtractU64(msk_a, i + j * Plen);
 8007e22:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007e26:	22c8      	movs	r2, #200	@ 0xc8
 8007e28:	fb03 f202 	mul.w	r2, r3, r2
 8007e2c:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007e30:	4413      	add	r3, r2
 8007e32:	08db      	lsrs	r3, r3, #3
 8007e34:	00db      	lsls	r3, r3, #3
 8007e36:	f8d7 2388 	ldr.w	r2, [r7, #904]	@ 0x388
 8007e3a:	4413      	add	r3, r2
 8007e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e40:	f8d7 1390 	ldr.w	r1, [r7, #912]	@ 0x390
 8007e44:	20c8      	movs	r0, #200	@ 0xc8
 8007e46:	fb01 f000 	mul.w	r0, r1, r0
 8007e4a:	f8d7 1394 	ldr.w	r1, [r7, #916]	@ 0x394
 8007e4e:	4401      	add	r1, r0
 8007e50:	f001 0107 	and.w	r1, r1, #7
 8007e54:	00c9      	lsls	r1, r1, #3
 8007e56:	f1c1 0420 	rsb	r4, r1, #32
 8007e5a:	f1a1 0020 	sub.w	r0, r1, #32
 8007e5e:	fa22 f501 	lsr.w	r5, r2, r1
 8007e62:	63bd      	str	r5, [r7, #56]	@ 0x38
 8007e64:	fa03 f404 	lsl.w	r4, r3, r4
 8007e68:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8007e6a:	4325      	orrs	r5, r4
 8007e6c:	63bd      	str	r5, [r7, #56]	@ 0x38
 8007e6e:	fa23 f000 	lsr.w	r0, r3, r0
 8007e72:	6bbc      	ldr	r4, [r7, #56]	@ 0x38
 8007e74:	4304      	orrs	r4, r0
 8007e76:	63bc      	str	r4, [r7, #56]	@ 0x38
 8007e78:	40cb      	lsrs	r3, r1
 8007e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      out[i * out_data_stride + j * out_msk_stride] =
 8007e7c:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007e80:	f5a3 7262 	sub.w	r2, r3, #904	@ 0x388
 8007e84:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007e88:	6812      	ldr	r2, [r2, #0]
 8007e8a:	fb03 f202 	mul.w	r2, r3, r2
 8007e8e:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007e92:	f5a3 7161 	sub.w	r1, r3, #900	@ 0x384
 8007e96:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007e9a:	6809      	ldr	r1, [r1, #0]
 8007e9c:	fb01 f303 	mul.w	r3, r1, r3
 8007ea0:	4413      	add	r3, r2
 8007ea2:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 8007ea6:	f5a2 725f 	sub.w	r2, r2, #892	@ 0x37c
 8007eaa:	6812      	ldr	r2, [r2, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007eb2:	701a      	strb	r2, [r3, #0]
    for (size_t j = 0; j < MASKING_N; j++) {
 8007eb4:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007eb8:	3301      	adds	r3, #1
 8007eba:	f8c7 3390 	str.w	r3, [r7, #912]	@ 0x390
 8007ebe:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d9ad      	bls.n	8007e22 <masked_hash_keccak+0x7ba>
  for (size_t i = 0; i < outlen; i++) {
 8007ec6:	f8d7 3394 	ldr.w	r3, [r7, #916]	@ 0x394
 8007eca:	3301      	adds	r3, #1
 8007ecc:	f8c7 3394 	str.w	r3, [r7, #916]	@ 0x394
 8007ed0:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007ed4:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8007ed8:	f8d7 2394 	ldr.w	r2, [r7, #916]	@ 0x394
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d39b      	bcc.n	8007e1a <masked_hash_keccak+0x7b2>
    }
  }

  PRINT_OUTPUT("Extracted Output Share 0", out, outlen, out_data_stride);
 8007ee2:	491e      	ldr	r1, [pc, #120]	@ (8007f5c <masked_hash_keccak+0x8f4>)
 8007ee4:	481e      	ldr	r0, [pc, #120]	@ (8007f60 <masked_hash_keccak+0x8f8>)
 8007ee6:	f009 f8d3 	bl	8011090 <iprintf>
 8007eea:	2300      	movs	r3, #0
 8007eec:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8007ef0:	e022      	b.n	8007f38 <masked_hash_keccak+0x8d0>
 8007ef2:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007ef6:	f5a3 7262 	sub.w	r2, r3, #904	@ 0x388
 8007efa:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007efe:	6812      	ldr	r2, [r2, #0]
 8007f00:	fb02 f303 	mul.w	r3, r2, r3
 8007f04:	f507 7278 	add.w	r2, r7, #992	@ 0x3e0
 8007f08:	f5a2 725f 	sub.w	r2, r2, #892	@ 0x37c
 8007f0c:	6812      	ldr	r2, [r2, #0]
 8007f0e:	4413      	add	r3, r2
 8007f10:	781b      	ldrb	r3, [r3, #0]
 8007f12:	4619      	mov	r1, r3
 8007f14:	4813      	ldr	r0, [pc, #76]	@ (8007f64 <masked_hash_keccak+0x8fc>)
 8007f16:	f009 f8bb 	bl	8011090 <iprintf>
 8007f1a:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007f1e:	3301      	adds	r3, #1
 8007f20:	f003 030f 	and.w	r3, r3, #15
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d102      	bne.n	8007f2e <masked_hash_keccak+0x8c6>
 8007f28:	200a      	movs	r0, #10
 8007f2a:	f009 f8c3 	bl	80110b4 <putchar>
 8007f2e:	f8d7 338c 	ldr.w	r3, [r7, #908]	@ 0x38c
 8007f32:	3301      	adds	r3, #1
 8007f34:	f8c7 338c 	str.w	r3, [r7, #908]	@ 0x38c
 8007f38:	f507 7378 	add.w	r3, r7, #992	@ 0x3e0
 8007f3c:	f5a3 7360 	sub.w	r3, r3, #896	@ 0x380
 8007f40:	f8d7 238c 	ldr.w	r2, [r7, #908]	@ 0x38c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	429a      	cmp	r2, r3
 8007f48:	d3d3      	bcc.n	8007ef2 <masked_hash_keccak+0x88a>
 8007f4a:	200a      	movs	r0, #10
 8007f4c:	f009 f8b2 	bl	80110b4 <putchar>
}
 8007f50:	bf00      	nop
 8007f52:	f507 7779 	add.w	r7, r7, #996	@ 0x3e4
 8007f56:	46bd      	mov	sp, r7
 8007f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5c:	08011e78 	.word	0x08011e78
 8007f60:	08011d90 	.word	0x08011d90
 8007f64:	08011e94 	.word	0x08011e94

08007f68 <copy_sharing>:
    return ctr;
}

void copy_sharing(size_t d,
                  uint32_t *dst, size_t dst_stride,
                  const uint32_t *src, size_t src_stride) {
 8007f68:	b480      	push	{r7}
 8007f6a:	b087      	sub	sp, #28
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	60f8      	str	r0, [r7, #12]
 8007f70:	60b9      	str	r1, [r7, #8]
 8007f72:	607a      	str	r2, [r7, #4]
 8007f74:	603b      	str	r3, [r7, #0]
  for (size_t i = 0; i < d; i++) {
 8007f76:	2300      	movs	r3, #0
 8007f78:	617b      	str	r3, [r7, #20]
 8007f7a:	e012      	b.n	8007fa2 <copy_sharing+0x3a>
    dst[i * dst_stride] = src[i * src_stride];
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	6a3a      	ldr	r2, [r7, #32]
 8007f80:	fb02 f303 	mul.w	r3, r2, r3
 8007f84:	009b      	lsls	r3, r3, #2
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	441a      	add	r2, r3
 8007f8a:	697b      	ldr	r3, [r7, #20]
 8007f8c:	6879      	ldr	r1, [r7, #4]
 8007f8e:	fb01 f303 	mul.w	r3, r1, r3
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	68b9      	ldr	r1, [r7, #8]
 8007f96:	440b      	add	r3, r1
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < d; i++) {
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	617b      	str	r3, [r7, #20]
 8007fa2:	697a      	ldr	r2, [r7, #20]
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d3e8      	bcc.n	8007f7c <copy_sharing+0x14>
  }
}
 8007faa:	bf00      	nop
 8007fac:	bf00      	nop
 8007fae:	371c      	adds	r7, #28
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <masked_and>:

void masked_and(size_t d,
                uint32_t *out, size_t out_stride,
                const uint32_t *a, size_t a_stride,
                const uint32_t *b, size_t b_stride) {
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  for (size_t i = 0; i < d; i++) {
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	61fb      	str	r3, [r7, #28]
 8007fca:	e059      	b.n	8008080 <masked_and+0xc8>
    for (size_t j = 0; j < d; j++) {
 8007fcc:	2300      	movs	r3, #0
 8007fce:	61bb      	str	r3, [r7, #24]
 8007fd0:	e04f      	b.n	8008072 <masked_and+0xba>
      uint32_t x = a[i * a_stride] & b[j * b_stride];
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fd6:	fb02 f303 	mul.w	r3, r2, r3
 8007fda:	009b      	lsls	r3, r3, #2
 8007fdc:	683a      	ldr	r2, [r7, #0]
 8007fde:	4413      	add	r3, r2
 8007fe0:	681a      	ldr	r2, [r3, #0]
 8007fe2:	69bb      	ldr	r3, [r7, #24]
 8007fe4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007fe6:	fb01 f303 	mul.w	r3, r1, r3
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fee:	440b      	add	r3, r1
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4013      	ands	r3, r2
 8007ff4:	617b      	str	r3, [r7, #20]
      if (i == j) {
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	69bb      	ldr	r3, [r7, #24]
 8007ffa:	429a      	cmp	r2, r3
 8007ffc:	d109      	bne.n	8008012 <masked_and+0x5a>
        out[i * out_stride] = x;
 8007ffe:	69fb      	ldr	r3, [r7, #28]
 8008000:	687a      	ldr	r2, [r7, #4]
 8008002:	fb02 f303 	mul.w	r3, r2, r3
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	68ba      	ldr	r2, [r7, #8]
 800800a:	4413      	add	r3, r2
 800800c:	697a      	ldr	r2, [r7, #20]
 800800e:	601a      	str	r2, [r3, #0]
 8008010:	e02c      	b.n	800806c <masked_and+0xb4>
      } else if (i < j) {
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	69bb      	ldr	r3, [r7, #24]
 8008016:	429a      	cmp	r2, r3
 8008018:	d228      	bcs.n	800806c <masked_and+0xb4>
        uint32_t r = random_uint32();  // Secure random per pair
 800801a:	f000 f86b 	bl	80080f4 <random_uint32>
 800801e:	6138      	str	r0, [r7, #16]
        out[i * out_stride] ^= r;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	fb02 f303 	mul.w	r3, r2, r3
 8008028:	009b      	lsls	r3, r3, #2
 800802a:	68ba      	ldr	r2, [r7, #8]
 800802c:	4413      	add	r3, r2
 800802e:	6819      	ldr	r1, [r3, #0]
 8008030:	69fb      	ldr	r3, [r7, #28]
 8008032:	687a      	ldr	r2, [r7, #4]
 8008034:	fb02 f303 	mul.w	r3, r2, r3
 8008038:	009b      	lsls	r3, r3, #2
 800803a:	68ba      	ldr	r2, [r7, #8]
 800803c:	4413      	add	r3, r2
 800803e:	693a      	ldr	r2, [r7, #16]
 8008040:	404a      	eors	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
        out[j * out_stride] ^= x ^ r;
 8008044:	69bb      	ldr	r3, [r7, #24]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	fb02 f303 	mul.w	r3, r2, r3
 800804c:	009b      	lsls	r3, r3, #2
 800804e:	68ba      	ldr	r2, [r7, #8]
 8008050:	4413      	add	r3, r2
 8008052:	6819      	ldr	r1, [r3, #0]
 8008054:	697a      	ldr	r2, [r7, #20]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	405a      	eors	r2, r3
 800805a:	69bb      	ldr	r3, [r7, #24]
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	fb00 f303 	mul.w	r3, r0, r3
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	68b8      	ldr	r0, [r7, #8]
 8008066:	4403      	add	r3, r0
 8008068:	404a      	eors	r2, r1
 800806a:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < d; j++) {
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	3301      	adds	r3, #1
 8008070:	61bb      	str	r3, [r7, #24]
 8008072:	69ba      	ldr	r2, [r7, #24]
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	429a      	cmp	r2, r3
 8008078:	d3ab      	bcc.n	8007fd2 <masked_and+0x1a>
  for (size_t i = 0; i < d; i++) {
 800807a:	69fb      	ldr	r3, [r7, #28]
 800807c:	3301      	adds	r3, #1
 800807e:	61fb      	str	r3, [r7, #28]
 8008080:	69fa      	ldr	r2, [r7, #28]
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	429a      	cmp	r2, r3
 8008086:	d3a1      	bcc.n	8007fcc <masked_and+0x14>
      }
    }
  }
}
 8008088:	bf00      	nop
 800808a:	bf00      	nop
 800808c:	3720      	adds	r7, #32
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <masked_xor>:


void masked_xor(size_t d,
                uint32_t *out, size_t out_stride,
                const uint32_t *a, size_t a_stride,
                const uint32_t *b, size_t b_stride) {
 8008092:	b480      	push	{r7}
 8008094:	b087      	sub	sp, #28
 8008096:	af00      	add	r7, sp, #0
 8008098:	60f8      	str	r0, [r7, #12]
 800809a:	60b9      	str	r1, [r7, #8]
 800809c:	607a      	str	r2, [r7, #4]
 800809e:	603b      	str	r3, [r7, #0]
  for (size_t i = 0; i < d; i++) {
 80080a0:	2300      	movs	r3, #0
 80080a2:	617b      	str	r3, [r7, #20]
 80080a4:	e01b      	b.n	80080de <masked_xor+0x4c>
    out[i * out_stride] = a[i * a_stride] ^ b[i * b_stride];
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	6a3a      	ldr	r2, [r7, #32]
 80080aa:	fb02 f303 	mul.w	r3, r2, r3
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	683a      	ldr	r2, [r7, #0]
 80080b2:	4413      	add	r3, r2
 80080b4:	6819      	ldr	r1, [r3, #0]
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080ba:	fb02 f303 	mul.w	r3, r2, r3
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080c2:	4413      	add	r3, r2
 80080c4:	681a      	ldr	r2, [r3, #0]
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	fb00 f303 	mul.w	r3, r0, r3
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	68b8      	ldr	r0, [r7, #8]
 80080d2:	4403      	add	r3, r0
 80080d4:	404a      	eors	r2, r1
 80080d6:	601a      	str	r2, [r3, #0]
  for (size_t i = 0; i < d; i++) {
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	3301      	adds	r3, #1
 80080dc:	617b      	str	r3, [r7, #20]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d3df      	bcc.n	80080a6 <masked_xor+0x14>
  }
}
 80080e6:	bf00      	nop
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <random_uint32>:

uint32_t random_uint32(void) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
    uint32_t value;
    while (HAL_RNG_GenerateRandomNumber(&hrng, &value) != HAL_OK) {
 80080fa:	bf00      	nop
 80080fc:	1d3b      	adds	r3, r7, #4
 80080fe:	4619      	mov	r1, r3
 8008100:	4805      	ldr	r0, [pc, #20]	@ (8008118 <random_uint32+0x24>)
 8008102:	f004 fc63 	bl	800c9cc <HAL_RNG_GenerateRandomNumber>
 8008106:	4603      	mov	r3, r0
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1f7      	bne.n	80080fc <random_uint32+0x8>
        // Optionally: insert timeout or fail-safe to avoid infinite loop
    }
    return value;
 800810c:	687b      	ldr	r3, [r7, #4]
}
 800810e:	4618      	mov	r0, r3
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	20000140 	.word	0x20000140

0800811c <masked_sha3_512>:

void masked_sha3_512(uint8_t *output, size_t out_msk_stride,
                     size_t out_data_stride, const uint8_t *input, size_t inlen,
                     size_t in_msk_stride, size_t in_data_stride) {
 800811c:	b580      	push	{r7, lr}
 800811e:	b08a      	sub	sp, #40	@ 0x28
 8008120:	af06      	add	r7, sp, #24
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
  masked_hash_keccak(output, 64, out_msk_stride, out_data_stride, input, inlen,
 800812a:	2306      	movs	r3, #6
 800812c:	9305      	str	r3, [sp, #20]
 800812e:	2348      	movs	r3, #72	@ 0x48
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	6a3b      	ldr	r3, [r7, #32]
 8008134:	9303      	str	r3, [sp, #12]
 8008136:	69fb      	ldr	r3, [r7, #28]
 8008138:	9302      	str	r3, [sp, #8]
 800813a:	69bb      	ldr	r3, [r7, #24]
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68ba      	ldr	r2, [r7, #8]
 8008146:	2140      	movs	r1, #64	@ 0x40
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f7ff fa8d 	bl	8007668 <masked_hash_keccak>
                     in_msk_stride, in_data_stride, 72, 0x06);
}
 800814e:	bf00      	nop
 8008150:	3710      	adds	r7, #16
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
	...

08008158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800815e:	2300      	movs	r3, #0
 8008160:	607b      	str	r3, [r7, #4]
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <HAL_MspInit+0x4c>)
 8008164:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008166:	4a0f      	ldr	r2, [pc, #60]	@ (80081a4 <HAL_MspInit+0x4c>)
 8008168:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800816c:	6453      	str	r3, [r2, #68]	@ 0x44
 800816e:	4b0d      	ldr	r3, [pc, #52]	@ (80081a4 <HAL_MspInit+0x4c>)
 8008170:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008172:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008176:	607b      	str	r3, [r7, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800817a:	2300      	movs	r3, #0
 800817c:	603b      	str	r3, [r7, #0]
 800817e:	4b09      	ldr	r3, [pc, #36]	@ (80081a4 <HAL_MspInit+0x4c>)
 8008180:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008182:	4a08      	ldr	r2, [pc, #32]	@ (80081a4 <HAL_MspInit+0x4c>)
 8008184:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008188:	6413      	str	r3, [r2, #64]	@ 0x40
 800818a:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <HAL_MspInit+0x4c>)
 800818c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800818e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008192:	603b      	str	r3, [r7, #0]
 8008194:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8008196:	2007      	movs	r0, #7
 8008198:	f000 fd04 	bl	8008ba4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800819c:	bf00      	nop
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	40023800 	.word	0x40023800

080081a8 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b08a      	sub	sp, #40	@ 0x28
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b0:	f107 0314 	add.w	r3, r7, #20
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]
 80081b8:	605a      	str	r2, [r3, #4]
 80081ba:	609a      	str	r2, [r3, #8]
 80081bc:	60da      	str	r2, [r3, #12]
 80081be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a19      	ldr	r2, [pc, #100]	@ (800822c <HAL_I2C_MspInit+0x84>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d12c      	bne.n	8008224 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80081ca:	2300      	movs	r3, #0
 80081cc:	613b      	str	r3, [r7, #16]
 80081ce:	4b18      	ldr	r3, [pc, #96]	@ (8008230 <HAL_I2C_MspInit+0x88>)
 80081d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d2:	4a17      	ldr	r2, [pc, #92]	@ (8008230 <HAL_I2C_MspInit+0x88>)
 80081d4:	f043 0302 	orr.w	r3, r3, #2
 80081d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80081da:	4b15      	ldr	r3, [pc, #84]	@ (8008230 <HAL_I2C_MspInit+0x88>)
 80081dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	613b      	str	r3, [r7, #16]
 80081e4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80081e6:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80081ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80081ec:	2312      	movs	r3, #18
 80081ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80081f0:	2301      	movs	r3, #1
 80081f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081f4:	2300      	movs	r3, #0
 80081f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80081f8:	2304      	movs	r3, #4
 80081fa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80081fc:	f107 0314 	add.w	r3, r7, #20
 8008200:	4619      	mov	r1, r3
 8008202:	480c      	ldr	r0, [pc, #48]	@ (8008234 <HAL_I2C_MspInit+0x8c>)
 8008204:	f000 fd10 	bl	8008c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008208:	2300      	movs	r3, #0
 800820a:	60fb      	str	r3, [r7, #12]
 800820c:	4b08      	ldr	r3, [pc, #32]	@ (8008230 <HAL_I2C_MspInit+0x88>)
 800820e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008210:	4a07      	ldr	r2, [pc, #28]	@ (8008230 <HAL_I2C_MspInit+0x88>)
 8008212:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008216:	6413      	str	r3, [r2, #64]	@ 0x40
 8008218:	4b05      	ldr	r3, [pc, #20]	@ (8008230 <HAL_I2C_MspInit+0x88>)
 800821a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800821c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008220:	60fb      	str	r3, [r7, #12]
 8008222:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8008224:	bf00      	nop
 8008226:	3728      	adds	r7, #40	@ 0x28
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	40005400 	.word	0x40005400
 8008230:	40023800 	.word	0x40023800
 8008234:	40020400 	.word	0x40020400

08008238 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b08e      	sub	sp, #56	@ 0x38
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008240:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]
 8008248:	605a      	str	r2, [r3, #4]
 800824a:	609a      	str	r2, [r3, #8]
 800824c:	60da      	str	r2, [r3, #12]
 800824e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008250:	f107 0314 	add.w	r3, r7, #20
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
 8008258:	605a      	str	r2, [r3, #4]
 800825a:	609a      	str	r2, [r3, #8]
 800825c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a31      	ldr	r2, [pc, #196]	@ (8008328 <HAL_I2S_MspInit+0xf0>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d15a      	bne.n	800831e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8008268:	2301      	movs	r3, #1
 800826a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800826c:	23c0      	movs	r3, #192	@ 0xc0
 800826e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8008270:	2302      	movs	r3, #2
 8008272:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008274:	f107 0314 	add.w	r3, r7, #20
 8008278:	4618      	mov	r0, r3
 800827a:	f004 fa3b 	bl	800c6f4 <HAL_RCCEx_PeriphCLKConfig>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8008284:	f7fb fde0 	bl	8003e48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8008288:	2300      	movs	r3, #0
 800828a:	613b      	str	r3, [r7, #16]
 800828c:	4b27      	ldr	r3, [pc, #156]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 800828e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008290:	4a26      	ldr	r2, [pc, #152]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 8008292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008296:	6413      	str	r3, [r2, #64]	@ 0x40
 8008298:	4b24      	ldr	r3, [pc, #144]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 800829a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800829c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80082a0:	613b      	str	r3, [r7, #16]
 80082a2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80082a4:	2300      	movs	r3, #0
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	4b20      	ldr	r3, [pc, #128]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 80082aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082ac:	4a1f      	ldr	r2, [pc, #124]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 80082ae:	f043 0301 	orr.w	r3, r3, #1
 80082b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80082b4:	4b1d      	ldr	r3, [pc, #116]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 80082b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082b8:	f003 0301 	and.w	r3, r3, #1
 80082bc:	60fb      	str	r3, [r7, #12]
 80082be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80082c0:	2300      	movs	r3, #0
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	4b19      	ldr	r3, [pc, #100]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 80082c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082c8:	4a18      	ldr	r2, [pc, #96]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 80082ca:	f043 0304 	orr.w	r3, r3, #4
 80082ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80082d0:	4b16      	ldr	r3, [pc, #88]	@ (800832c <HAL_I2S_MspInit+0xf4>)
 80082d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80082d4:	f003 0304 	and.w	r3, r3, #4
 80082d8:	60bb      	str	r3, [r7, #8]
 80082da:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80082dc:	2310      	movs	r3, #16
 80082de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082e0:	2302      	movs	r3, #2
 80082e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082e4:	2300      	movs	r3, #0
 80082e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082e8:	2300      	movs	r3, #0
 80082ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80082ec:	2306      	movs	r3, #6
 80082ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80082f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082f4:	4619      	mov	r1, r3
 80082f6:	480e      	ldr	r0, [pc, #56]	@ (8008330 <HAL_I2S_MspInit+0xf8>)
 80082f8:	f000 fc96 	bl	8008c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80082fc:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8008300:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008302:	2302      	movs	r3, #2
 8008304:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008306:	2300      	movs	r3, #0
 8008308:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800830a:	2300      	movs	r3, #0
 800830c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800830e:	2306      	movs	r3, #6
 8008310:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008312:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008316:	4619      	mov	r1, r3
 8008318:	4806      	ldr	r0, [pc, #24]	@ (8008334 <HAL_I2S_MspInit+0xfc>)
 800831a:	f000 fc85 	bl	8008c28 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800831e:	bf00      	nop
 8008320:	3738      	adds	r7, #56	@ 0x38
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40003c00 	.word	0x40003c00
 800832c:	40023800 	.word	0x40023800
 8008330:	40020000 	.word	0x40020000
 8008334:	40020800 	.word	0x40020800

08008338 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a0b      	ldr	r2, [pc, #44]	@ (8008374 <HAL_RNG_MspInit+0x3c>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d10d      	bne.n	8008366 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800834a:	2300      	movs	r3, #0
 800834c:	60fb      	str	r3, [r7, #12]
 800834e:	4b0a      	ldr	r3, [pc, #40]	@ (8008378 <HAL_RNG_MspInit+0x40>)
 8008350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008352:	4a09      	ldr	r2, [pc, #36]	@ (8008378 <HAL_RNG_MspInit+0x40>)
 8008354:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008358:	6353      	str	r3, [r2, #52]	@ 0x34
 800835a:	4b07      	ldr	r3, [pc, #28]	@ (8008378 <HAL_RNG_MspInit+0x40>)
 800835c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800835e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008362:	60fb      	str	r3, [r7, #12]
 8008364:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8008366:	bf00      	nop
 8008368:	3714      	adds	r7, #20
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	50060800 	.word	0x50060800
 8008378:	40023800 	.word	0x40023800

0800837c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b08a      	sub	sp, #40	@ 0x28
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008384:	f107 0314 	add.w	r3, r7, #20
 8008388:	2200      	movs	r2, #0
 800838a:	601a      	str	r2, [r3, #0]
 800838c:	605a      	str	r2, [r3, #4]
 800838e:	609a      	str	r2, [r3, #8]
 8008390:	60da      	str	r2, [r3, #12]
 8008392:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a19      	ldr	r2, [pc, #100]	@ (8008400 <HAL_SPI_MspInit+0x84>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d12b      	bne.n	80083f6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800839e:	2300      	movs	r3, #0
 80083a0:	613b      	str	r3, [r7, #16]
 80083a2:	4b18      	ldr	r3, [pc, #96]	@ (8008404 <HAL_SPI_MspInit+0x88>)
 80083a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083a6:	4a17      	ldr	r2, [pc, #92]	@ (8008404 <HAL_SPI_MspInit+0x88>)
 80083a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80083ac:	6453      	str	r3, [r2, #68]	@ 0x44
 80083ae:	4b15      	ldr	r3, [pc, #84]	@ (8008404 <HAL_SPI_MspInit+0x88>)
 80083b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083b6:	613b      	str	r3, [r7, #16]
 80083b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80083ba:	2300      	movs	r3, #0
 80083bc:	60fb      	str	r3, [r7, #12]
 80083be:	4b11      	ldr	r3, [pc, #68]	@ (8008404 <HAL_SPI_MspInit+0x88>)
 80083c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083c2:	4a10      	ldr	r2, [pc, #64]	@ (8008404 <HAL_SPI_MspInit+0x88>)
 80083c4:	f043 0301 	orr.w	r3, r3, #1
 80083c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80083ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008404 <HAL_SPI_MspInit+0x88>)
 80083cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083ce:	f003 0301 	and.w	r3, r3, #1
 80083d2:	60fb      	str	r3, [r7, #12]
 80083d4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80083d6:	23e0      	movs	r3, #224	@ 0xe0
 80083d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083da:	2302      	movs	r3, #2
 80083dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083de:	2300      	movs	r3, #0
 80083e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083e2:	2300      	movs	r3, #0
 80083e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80083e6:	2305      	movs	r3, #5
 80083e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80083ea:	f107 0314 	add.w	r3, r7, #20
 80083ee:	4619      	mov	r1, r3
 80083f0:	4805      	ldr	r0, [pc, #20]	@ (8008408 <HAL_SPI_MspInit+0x8c>)
 80083f2:	f000 fc19 	bl	8008c28 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80083f6:	bf00      	nop
 80083f8:	3728      	adds	r7, #40	@ 0x28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}
 80083fe:	bf00      	nop
 8008400:	40013000 	.word	0x40013000
 8008404:	40023800 	.word	0x40023800
 8008408:	40020000 	.word	0x40020000

0800840c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	@ 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008414:	f107 0314 	add.w	r3, r7, #20
 8008418:	2200      	movs	r2, #0
 800841a:	601a      	str	r2, [r3, #0]
 800841c:	605a      	str	r2, [r3, #4]
 800841e:	609a      	str	r2, [r3, #8]
 8008420:	60da      	str	r2, [r3, #12]
 8008422:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	4a19      	ldr	r2, [pc, #100]	@ (8008490 <HAL_UART_MspInit+0x84>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d12b      	bne.n	8008486 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800842e:	2300      	movs	r3, #0
 8008430:	613b      	str	r3, [r7, #16]
 8008432:	4b18      	ldr	r3, [pc, #96]	@ (8008494 <HAL_UART_MspInit+0x88>)
 8008434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008436:	4a17      	ldr	r2, [pc, #92]	@ (8008494 <HAL_UART_MspInit+0x88>)
 8008438:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800843c:	6413      	str	r3, [r2, #64]	@ 0x40
 800843e:	4b15      	ldr	r3, [pc, #84]	@ (8008494 <HAL_UART_MspInit+0x88>)
 8008440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008446:	613b      	str	r3, [r7, #16]
 8008448:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800844a:	2300      	movs	r3, #0
 800844c:	60fb      	str	r3, [r7, #12]
 800844e:	4b11      	ldr	r3, [pc, #68]	@ (8008494 <HAL_UART_MspInit+0x88>)
 8008450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008452:	4a10      	ldr	r2, [pc, #64]	@ (8008494 <HAL_UART_MspInit+0x88>)
 8008454:	f043 0301 	orr.w	r3, r3, #1
 8008458:	6313      	str	r3, [r2, #48]	@ 0x30
 800845a:	4b0e      	ldr	r3, [pc, #56]	@ (8008494 <HAL_UART_MspInit+0x88>)
 800845c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800845e:	f003 0301 	and.w	r3, r3, #1
 8008462:	60fb      	str	r3, [r7, #12]
 8008464:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008466:	230c      	movs	r3, #12
 8008468:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800846a:	2302      	movs	r3, #2
 800846c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800846e:	2300      	movs	r3, #0
 8008470:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008472:	2303      	movs	r3, #3
 8008474:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008476:	2307      	movs	r3, #7
 8008478:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800847a:	f107 0314 	add.w	r3, r7, #20
 800847e:	4619      	mov	r1, r3
 8008480:	4805      	ldr	r0, [pc, #20]	@ (8008498 <HAL_UART_MspInit+0x8c>)
 8008482:	f000 fbd1 	bl	8008c28 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8008486:	bf00      	nop
 8008488:	3728      	adds	r7, #40	@ 0x28
 800848a:	46bd      	mov	sp, r7
 800848c:	bd80      	pop	{r7, pc}
 800848e:	bf00      	nop
 8008490:	40004400 	.word	0x40004400
 8008494:	40023800 	.word	0x40023800
 8008498:	40020000 	.word	0x40020000

0800849c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800849c:	b480      	push	{r7}
 800849e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80084a0:	bf00      	nop
 80084a2:	e7fd      	b.n	80084a0 <NMI_Handler+0x4>

080084a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80084a4:	b480      	push	{r7}
 80084a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80084a8:	bf00      	nop
 80084aa:	e7fd      	b.n	80084a8 <HardFault_Handler+0x4>

080084ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80084ac:	b480      	push	{r7}
 80084ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80084b0:	bf00      	nop
 80084b2:	e7fd      	b.n	80084b0 <MemManage_Handler+0x4>

080084b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80084b4:	b480      	push	{r7}
 80084b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80084b8:	bf00      	nop
 80084ba:	e7fd      	b.n	80084b8 <BusFault_Handler+0x4>

080084bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80084c0:	bf00      	nop
 80084c2:	e7fd      	b.n	80084c0 <UsageFault_Handler+0x4>

080084c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80084c4:	b480      	push	{r7}
 80084c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80084c8:	bf00      	nop
 80084ca:	46bd      	mov	sp, r7
 80084cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d0:	4770      	bx	lr

080084d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80084d2:	b480      	push	{r7}
 80084d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80084d6:	bf00      	nop
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80084e4:	bf00      	nop
 80084e6:	46bd      	mov	sp, r7
 80084e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ec:	4770      	bx	lr

080084ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80084ee:	b580      	push	{r7, lr}
 80084f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80084f2:	f000 fa43 	bl	800897c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80084f6:	bf00      	nop
 80084f8:	bd80      	pop	{r7, pc}
	...

080084fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8008500:	4802      	ldr	r0, [pc, #8]	@ (800850c <OTG_FS_IRQHandler+0x10>)
 8008502:	f001 f827 	bl	8009554 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008506:	bf00      	nop
 8008508:	bd80      	pop	{r7, pc}
 800850a:	bf00      	nop
 800850c:	200005d4 	.word	0x200005d4

08008510 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008510:	b580      	push	{r7, lr}
 8008512:	b086      	sub	sp, #24
 8008514:	af00      	add	r7, sp, #0
 8008516:	60f8      	str	r0, [r7, #12]
 8008518:	60b9      	str	r1, [r7, #8]
 800851a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800851c:	2300      	movs	r3, #0
 800851e:	617b      	str	r3, [r7, #20]
 8008520:	e00a      	b.n	8008538 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008522:	f3af 8000 	nop.w
 8008526:	4601      	mov	r1, r0
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	1c5a      	adds	r2, r3, #1
 800852c:	60ba      	str	r2, [r7, #8]
 800852e:	b2ca      	uxtb	r2, r1
 8008530:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	3301      	adds	r3, #1
 8008536:	617b      	str	r3, [r7, #20]
 8008538:	697a      	ldr	r2, [r7, #20]
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	429a      	cmp	r2, r3
 800853e:	dbf0      	blt.n	8008522 <_read+0x12>
  }

  return len;
 8008540:	687b      	ldr	r3, [r7, #4]
}
 8008542:	4618      	mov	r0, r3
 8008544:	3718      	adds	r7, #24
 8008546:	46bd      	mov	sp, r7
 8008548:	bd80      	pop	{r7, pc}

0800854a <_close>:
  }
  return len;
}

int _close(int file)
{
 800854a:	b480      	push	{r7}
 800854c:	b083      	sub	sp, #12
 800854e:	af00      	add	r7, sp, #0
 8008550:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008552:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008556:	4618      	mov	r0, r3
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008562:	b480      	push	{r7}
 8008564:	b083      	sub	sp, #12
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800856c:	683b      	ldr	r3, [r7, #0]
 800856e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008572:	605a      	str	r2, [r3, #4]
  return 0;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <_isatty>:

int _isatty(int file)
{
 8008582:	b480      	push	{r7}
 8008584:	b083      	sub	sp, #12
 8008586:	af00      	add	r7, sp, #0
 8008588:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800858a:	2301      	movs	r3, #1
}
 800858c:	4618      	mov	r0, r3
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80085a4:	2300      	movs	r3, #0
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b086      	sub	sp, #24
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80085bc:	4a14      	ldr	r2, [pc, #80]	@ (8008610 <_sbrk+0x5c>)
 80085be:	4b15      	ldr	r3, [pc, #84]	@ (8008614 <_sbrk+0x60>)
 80085c0:	1ad3      	subs	r3, r2, r3
 80085c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80085c4:	697b      	ldr	r3, [r7, #20]
 80085c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80085c8:	4b13      	ldr	r3, [pc, #76]	@ (8008618 <_sbrk+0x64>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80085d0:	4b11      	ldr	r3, [pc, #68]	@ (8008618 <_sbrk+0x64>)
 80085d2:	4a12      	ldr	r2, [pc, #72]	@ (800861c <_sbrk+0x68>)
 80085d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80085d6:	4b10      	ldr	r3, [pc, #64]	@ (8008618 <_sbrk+0x64>)
 80085d8:	681a      	ldr	r2, [r3, #0]
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4413      	add	r3, r2
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d207      	bcs.n	80085f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80085e4:	f008 ff12 	bl	801140c <__errno>
 80085e8:	4603      	mov	r3, r0
 80085ea:	220c      	movs	r2, #12
 80085ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80085ee:	f04f 33ff 	mov.w	r3, #4294967295
 80085f2:	e009      	b.n	8008608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80085f4:	4b08      	ldr	r3, [pc, #32]	@ (8008618 <_sbrk+0x64>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80085fa:	4b07      	ldr	r3, [pc, #28]	@ (8008618 <_sbrk+0x64>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	4413      	add	r3, r2
 8008602:	4a05      	ldr	r2, [pc, #20]	@ (8008618 <_sbrk+0x64>)
 8008604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008606:	68fb      	ldr	r3, [r7, #12]
}
 8008608:	4618      	mov	r0, r3
 800860a:	3718      	adds	r7, #24
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20020000 	.word	0x20020000
 8008614:	00000400 	.word	0x00000400
 8008618:	200001f0 	.word	0x200001f0
 800861c:	20000b00 	.word	0x20000b00

08008620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008620:	b480      	push	{r7}
 8008622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008624:	4b06      	ldr	r3, [pc, #24]	@ (8008640 <SystemInit+0x20>)
 8008626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800862a:	4a05      	ldr	r2, [pc, #20]	@ (8008640 <SystemInit+0x20>)
 800862c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008630:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008634:	bf00      	nop
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	e000ed00 	.word	0xe000ed00

08008644 <print_hex>:
#include <stdio.h>

extern RNG_HandleTypeDef hrng;

// === Print utility for UART/semihosting ===
void print_hex(const char *label, const uint8_t *buf, size_t len) {
 8008644:	b580      	push	{r7, lr}
 8008646:	b086      	sub	sp, #24
 8008648:	af00      	add	r7, sp, #0
 800864a:	60f8      	str	r0, [r7, #12]
 800864c:	60b9      	str	r1, [r7, #8]
 800864e:	607a      	str	r2, [r7, #4]
    printf("%s:\n", label);
 8008650:	68f9      	ldr	r1, [r7, #12]
 8008652:	4815      	ldr	r0, [pc, #84]	@ (80086a8 <print_hex+0x64>)
 8008654:	f008 fd1c 	bl	8011090 <iprintf>
    for (size_t i = 0; i < len; i++) {
 8008658:	2300      	movs	r3, #0
 800865a:	617b      	str	r3, [r7, #20]
 800865c:	e013      	b.n	8008686 <print_hex+0x42>
        printf("%02x", buf[i]);
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	697b      	ldr	r3, [r7, #20]
 8008662:	4413      	add	r3, r2
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	4619      	mov	r1, r3
 8008668:	4810      	ldr	r0, [pc, #64]	@ (80086ac <print_hex+0x68>)
 800866a:	f008 fd11 	bl	8011090 <iprintf>
        if ((i + 1) % 16 == 0) printf("\n");
 800866e:	697b      	ldr	r3, [r7, #20]
 8008670:	3301      	adds	r3, #1
 8008672:	f003 030f 	and.w	r3, r3, #15
 8008676:	2b00      	cmp	r3, #0
 8008678:	d102      	bne.n	8008680 <print_hex+0x3c>
 800867a:	200a      	movs	r0, #10
 800867c:	f008 fd1a 	bl	80110b4 <putchar>
    for (size_t i = 0; i < len; i++) {
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	3301      	adds	r3, #1
 8008684:	617b      	str	r3, [r7, #20]
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d3e7      	bcc.n	800865e <print_hex+0x1a>
    }
    if (len % 16 != 0) printf("\n");
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f003 030f 	and.w	r3, r3, #15
 8008694:	2b00      	cmp	r3, #0
 8008696:	d002      	beq.n	800869e <print_hex+0x5a>
 8008698:	200a      	movs	r0, #10
 800869a:	f008 fd0b 	bl	80110b4 <putchar>
}
 800869e:	bf00      	nop
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08011e9c 	.word	0x08011e9c
 80086ac:	08011ea4 	.word	0x08011ea4

080086b0 <trivial_mask_input>:

// === Convert scalar input into masked shares ===
void trivial_mask_input(uint8_t *masked_input, const uint8_t *input, size_t len) {
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	60f8      	str	r0, [r7, #12]
 80086b8:	60b9      	str	r1, [r7, #8]
 80086ba:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < len; i++) {
 80086bc:	2300      	movs	r3, #0
 80086be:	617b      	str	r3, [r7, #20]
 80086c0:	e01c      	b.n	80086fc <trivial_mask_input+0x4c>
        masked_input[i * MASKING_N] = input[i];         // Share 0 = data
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	441a      	add	r2, r3
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	68f9      	ldr	r1, [r7, #12]
 80086ce:	440b      	add	r3, r1
 80086d0:	7812      	ldrb	r2, [r2, #0]
 80086d2:	701a      	strb	r2, [r3, #0]
        for (size_t j = 1; j < MASKING_N; j++) {
 80086d4:	2301      	movs	r3, #1
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	e00a      	b.n	80086f0 <trivial_mask_input+0x40>
            masked_input[i * MASKING_N + j] = 0;         // Other shares = 0
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	009a      	lsls	r2, r3, #2
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	4413      	add	r3, r2
 80086e2:	68fa      	ldr	r2, [r7, #12]
 80086e4:	4413      	add	r3, r2
 80086e6:	2200      	movs	r2, #0
 80086e8:	701a      	strb	r2, [r3, #0]
        for (size_t j = 1; j < MASKING_N; j++) {
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	3301      	adds	r3, #1
 80086ee:	613b      	str	r3, [r7, #16]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	2b03      	cmp	r3, #3
 80086f4:	d9f1      	bls.n	80086da <trivial_mask_input+0x2a>
    for (size_t i = 0; i < len; i++) {
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	3301      	adds	r3, #1
 80086fa:	617b      	str	r3, [r7, #20]
 80086fc:	697a      	ldr	r2, [r7, #20]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	429a      	cmp	r2, r3
 8008702:	d3de      	bcc.n	80086c2 <trivial_mask_input+0x12>
        }
    }
}
 8008704:	bf00      	nop
 8008706:	bf00      	nop
 8008708:	371c      	adds	r7, #28
 800870a:	46bd      	mov	sp, r7
 800870c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008710:	4770      	bx	lr
	...

08008714 <test_masked_keccak>:

void test_masked_keccak(void) {
 8008714:	b580      	push	{r7, lr}
 8008716:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 800871a:	af04      	add	r7, sp, #16
    const size_t inlen = 33;
 800871c:	2321      	movs	r3, #33	@ 0x21
 800871e:	f8c7 3254 	str.w	r3, [r7, #596]	@ 0x254
    const size_t outlen = 64;
 8008722:	2340      	movs	r3, #64	@ 0x40
 8008724:	f8c7 3250 	str.w	r3, [r7, #592]	@ 0x250

    uint8_t input[33] = {0};
 8008728:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 800872c:	2221      	movs	r2, #33	@ 0x21
 800872e:	2100      	movs	r1, #0
 8008730:	4618      	mov	r0, r3
 8008732:	f008 fe0d 	bl	8011350 <memset>
    input[32] = KYBER_K;
 8008736:	2303      	movs	r3, #3
 8008738:	f887 324c 	strb.w	r3, [r7, #588]	@ 0x24c
    uint8_t ref_output[64];
    uint8_t masked_output[64 * MASKING_N];
    uint8_t masked_input[33 * MASKING_N];

    // 1. Get reference unmasked hash
    sha3_512(ref_output, input, inlen);
 800873c:	f507 710b 	add.w	r1, r7, #556	@ 0x22c
 8008740:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8008744:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8008748:	4618      	mov	r0, r3
 800874a:	f7fb f8dc 	bl	8003906 <sha3_512>


    // === DEBUG: Print input
    print_hex("Input", input, inlen);
 800874e:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 8008752:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 8008756:	4619      	mov	r1, r3
 8008758:	4844      	ldr	r0, [pc, #272]	@ (800886c <test_masked_keccak+0x158>)
 800875a:	f7ff ff73 	bl	8008644 <print_hex>

    // 2. Prepare masked input
    trivial_mask_input(masked_input, input, inlen);
 800875e:	f507 710b 	add.w	r1, r7, #556	@ 0x22c
 8008762:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8008766:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 800876a:	4618      	mov	r0, r3
 800876c:	f7ff ffa0 	bl	80086b0 <trivial_mask_input>

    // === DEBUG: Print masked input Share[0]
    uint8_t masked_input_share0[33];
    for (size_t i = 0; i < inlen; i++) {
 8008770:	2300      	movs	r3, #0
 8008772:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 8008776:	e015      	b.n	80087a4 <test_masked_keccak+0x90>
        masked_input_share0[i] = masked_input[i * MASKING_N];
 8008778:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800877c:	009b      	lsls	r3, r3, #2
 800877e:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 8008782:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8008786:	5cd1      	ldrb	r1, [r2, r3]
 8008788:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 800878c:	f5a3 7207 	sub.w	r2, r3, #540	@ 0x21c
 8008790:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 8008794:	4413      	add	r3, r2
 8008796:	460a      	mov	r2, r1
 8008798:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < inlen; i++) {
 800879a:	f8d7 325c 	ldr.w	r3, [r7, #604]	@ 0x25c
 800879e:	3301      	adds	r3, #1
 80087a0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
 80087a4:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80087a8:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80087ac:	429a      	cmp	r2, r3
 80087ae:	d3e3      	bcc.n	8008778 <test_masked_keccak+0x64>
    }
    print_hex("Masked Input Share[0]", masked_input_share0, inlen);
 80087b0:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80087b4:	f8d7 2254 	ldr.w	r2, [r7, #596]	@ 0x254
 80087b8:	4619      	mov	r1, r3
 80087ba:	482d      	ldr	r0, [pc, #180]	@ (8008870 <test_masked_keccak+0x15c>)
 80087bc:	f7ff ff42 	bl	8008644 <print_hex>

    // 3. Run masked SHA3-512 (not SHAKE256!)
    masked_sha3_512(masked_output,    // [byte][share]
 80087c0:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80087c4:	f107 00ec 	add.w	r0, r7, #236	@ 0xec
 80087c8:	2301      	movs	r3, #1
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	2304      	movs	r3, #4
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	f8d7 3254 	ldr.w	r3, [r7, #596]	@ 0x254
 80087d4:	9300      	str	r3, [sp, #0]
 80087d6:	4613      	mov	r3, r2
 80087d8:	2204      	movs	r2, #4
 80087da:	2101      	movs	r1, #1
 80087dc:	f7ff fc9e 	bl	800811c <masked_sha3_512>
                    MASKING_N, 1);    // in_msk_stride, in_data_stride


    // 4. Extract and print Share[0] of masked output
    uint8_t first_share[64];
    for (size_t i = 0; i < outlen; i++) {
 80087e0:	2300      	movs	r3, #0
 80087e2:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 80087e6:	e015      	b.n	8008814 <test_masked_keccak+0x100>
        first_share[i] = masked_output[i * MASKING_N];
 80087e8:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	f507 7218 	add.w	r2, r7, #608	@ 0x260
 80087f2:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 80087f6:	5cd1      	ldrb	r1, [r2, r3]
 80087f8:	f507 7318 	add.w	r3, r7, #608	@ 0x260
 80087fc:	f5a3 7217 	sub.w	r2, r3, #604	@ 0x25c
 8008800:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 8008804:	4413      	add	r3, r2
 8008806:	460a      	mov	r2, r1
 8008808:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < outlen; i++) {
 800880a:	f8d7 3258 	ldr.w	r3, [r7, #600]	@ 0x258
 800880e:	3301      	adds	r3, #1
 8008810:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
 8008814:	f8d7 2258 	ldr.w	r2, [r7, #600]	@ 0x258
 8008818:	f8d7 3250 	ldr.w	r3, [r7, #592]	@ 0x250
 800881c:	429a      	cmp	r2, r3
 800881e:	d3e3      	bcc.n	80087e8 <test_masked_keccak+0xd4>
    }

    print_hex("Reference SHAKE256", ref_output, outlen);
 8008820:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8008824:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8008828:	4619      	mov	r1, r3
 800882a:	4812      	ldr	r0, [pc, #72]	@ (8008874 <test_masked_keccak+0x160>)
 800882c:	f7ff ff0a 	bl	8008644 <print_hex>
    print_hex("Masked Output Share[0]", first_share, outlen);
 8008830:	1d3b      	adds	r3, r7, #4
 8008832:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8008836:	4619      	mov	r1, r3
 8008838:	480f      	ldr	r0, [pc, #60]	@ (8008878 <test_masked_keccak+0x164>)
 800883a:	f7ff ff03 	bl	8008644 <print_hex>

    // 5. Compare only Share[0] to reference
    if (memcmp(ref_output, first_share, outlen) == 0) {
 800883e:	1d39      	adds	r1, r7, #4
 8008840:	f507 73f6 	add.w	r3, r7, #492	@ 0x1ec
 8008844:	f8d7 2250 	ldr.w	r2, [r7, #592]	@ 0x250
 8008848:	4618      	mov	r0, r3
 800884a:	f008 fd71 	bl	8011330 <memcmp>
 800884e:	4603      	mov	r3, r0
 8008850:	2b00      	cmp	r3, #0
 8008852:	d103      	bne.n	800885c <test_masked_keccak+0x148>
        printf("\n✅ First share matches reference.\n");
 8008854:	4809      	ldr	r0, [pc, #36]	@ (800887c <test_masked_keccak+0x168>)
 8008856:	f008 fc8b 	bl	8011170 <puts>
    } else {
        printf("\n❌ First share does NOT match.\n");
    }
}
 800885a:	e002      	b.n	8008862 <test_masked_keccak+0x14e>
        printf("\n❌ First share does NOT match.\n");
 800885c:	4808      	ldr	r0, [pc, #32]	@ (8008880 <test_masked_keccak+0x16c>)
 800885e:	f008 fc87 	bl	8011170 <puts>
}
 8008862:	bf00      	nop
 8008864:	f507 7718 	add.w	r7, r7, #608	@ 0x260
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	08011eac 	.word	0x08011eac
 8008870:	08011eb4 	.word	0x08011eb4
 8008874:	08011ecc 	.word	0x08011ecc
 8008878:	08011ee0 	.word	0x08011ee0
 800887c:	08011ef8 	.word	0x08011ef8
 8008880:	08011f1c 	.word	0x08011f1c

08008884 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8008884:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80088bc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8008888:	f7ff feca 	bl	8008620 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800888c:	480c      	ldr	r0, [pc, #48]	@ (80088c0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800888e:	490d      	ldr	r1, [pc, #52]	@ (80088c4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008890:	4a0d      	ldr	r2, [pc, #52]	@ (80088c8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008894:	e002      	b.n	800889c <LoopCopyDataInit>

08008896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800889a:	3304      	adds	r3, #4

0800889c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800889c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800889e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80088a0:	d3f9      	bcc.n	8008896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80088a2:	4a0a      	ldr	r2, [pc, #40]	@ (80088cc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80088a4:	4c0a      	ldr	r4, [pc, #40]	@ (80088d0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80088a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80088a8:	e001      	b.n	80088ae <LoopFillZerobss>

080088aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80088aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80088ac:	3204      	adds	r2, #4

080088ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80088ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80088b0:	d3fb      	bcc.n	80088aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80088b2:	f008 fdb1 	bl	8011418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80088b6:	f7fb f873 	bl	80039a0 <main>
  bx  lr    
 80088ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80088bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80088c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80088c4:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80088c8:	08012154 	.word	0x08012154
  ldr r2, =_sbss
 80088cc:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80088d0:	20000b00 	.word	0x20000b00

080088d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80088d4:	e7fe      	b.n	80088d4 <ADC_IRQHandler>
	...

080088d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80088dc:	4b0e      	ldr	r3, [pc, #56]	@ (8008918 <HAL_Init+0x40>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008918 <HAL_Init+0x40>)
 80088e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80088e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80088e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008918 <HAL_Init+0x40>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a0a      	ldr	r2, [pc, #40]	@ (8008918 <HAL_Init+0x40>)
 80088ee:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80088f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80088f4:	4b08      	ldr	r3, [pc, #32]	@ (8008918 <HAL_Init+0x40>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a07      	ldr	r2, [pc, #28]	@ (8008918 <HAL_Init+0x40>)
 80088fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80088fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008900:	2003      	movs	r0, #3
 8008902:	f000 f94f 	bl	8008ba4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008906:	2000      	movs	r0, #0
 8008908:	f000 f808 	bl	800891c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800890c:	f7ff fc24 	bl	8008158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008910:	2300      	movs	r3, #0
}
 8008912:	4618      	mov	r0, r3
 8008914:	bd80      	pop	{r7, pc}
 8008916:	bf00      	nop
 8008918:	40023c00 	.word	0x40023c00

0800891c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008924:	4b12      	ldr	r3, [pc, #72]	@ (8008970 <HAL_InitTick+0x54>)
 8008926:	681a      	ldr	r2, [r3, #0]
 8008928:	4b12      	ldr	r3, [pc, #72]	@ (8008974 <HAL_InitTick+0x58>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4619      	mov	r1, r3
 800892e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008932:	fbb3 f3f1 	udiv	r3, r3, r1
 8008936:	fbb2 f3f3 	udiv	r3, r2, r3
 800893a:	4618      	mov	r0, r3
 800893c:	f000 f967 	bl	8008c0e <HAL_SYSTICK_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	2b00      	cmp	r3, #0
 8008944:	d001      	beq.n	800894a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	e00e      	b.n	8008968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2b0f      	cmp	r3, #15
 800894e:	d80a      	bhi.n	8008966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008950:	2200      	movs	r2, #0
 8008952:	6879      	ldr	r1, [r7, #4]
 8008954:	f04f 30ff 	mov.w	r0, #4294967295
 8008958:	f000 f92f 	bl	8008bba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800895c:	4a06      	ldr	r2, [pc, #24]	@ (8008978 <HAL_InitTick+0x5c>)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
 8008964:	e000      	b.n	8008968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
}
 8008968:	4618      	mov	r0, r3
 800896a:	3708      	adds	r7, #8
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	20000000 	.word	0x20000000
 8008974:	20000008 	.word	0x20000008
 8008978:	20000004 	.word	0x20000004

0800897c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800897c:	b480      	push	{r7}
 800897e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008980:	4b06      	ldr	r3, [pc, #24]	@ (800899c <HAL_IncTick+0x20>)
 8008982:	781b      	ldrb	r3, [r3, #0]
 8008984:	461a      	mov	r2, r3
 8008986:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <HAL_IncTick+0x24>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4413      	add	r3, r2
 800898c:	4a04      	ldr	r2, [pc, #16]	@ (80089a0 <HAL_IncTick+0x24>)
 800898e:	6013      	str	r3, [r2, #0]
}
 8008990:	bf00      	nop
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	20000008 	.word	0x20000008
 80089a0:	200001f4 	.word	0x200001f4

080089a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80089a4:	b480      	push	{r7}
 80089a6:	af00      	add	r7, sp, #0
  return uwTick;
 80089a8:	4b03      	ldr	r3, [pc, #12]	@ (80089b8 <HAL_GetTick+0x14>)
 80089aa:	681b      	ldr	r3, [r3, #0]
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	46bd      	mov	sp, r7
 80089b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b4:	4770      	bx	lr
 80089b6:	bf00      	nop
 80089b8:	200001f4 	.word	0x200001f4

080089bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b084      	sub	sp, #16
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80089c4:	f7ff ffee 	bl	80089a4 <HAL_GetTick>
 80089c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d4:	d005      	beq.n	80089e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80089d6:	4b0a      	ldr	r3, [pc, #40]	@ (8008a00 <HAL_Delay+0x44>)
 80089d8:	781b      	ldrb	r3, [r3, #0]
 80089da:	461a      	mov	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	4413      	add	r3, r2
 80089e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80089e2:	bf00      	nop
 80089e4:	f7ff ffde 	bl	80089a4 <HAL_GetTick>
 80089e8:	4602      	mov	r2, r0
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	1ad3      	subs	r3, r2, r3
 80089ee:	68fa      	ldr	r2, [r7, #12]
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d8f7      	bhi.n	80089e4 <HAL_Delay+0x28>
  {
  }
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20000008 	.word	0x20000008

08008a04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008a04:	b480      	push	{r7}
 8008a06:	b085      	sub	sp, #20
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f003 0307 	and.w	r3, r3, #7
 8008a12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008a14:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <__NVIC_SetPriorityGrouping+0x44>)
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8008a20:	4013      	ands	r3, r2
 8008a22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008a2c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8008a30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a34:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008a36:	4a04      	ldr	r2, [pc, #16]	@ (8008a48 <__NVIC_SetPriorityGrouping+0x44>)
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	60d3      	str	r3, [r2, #12]
}
 8008a3c:	bf00      	nop
 8008a3e:	3714      	adds	r7, #20
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	e000ed00 	.word	0xe000ed00

08008a4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8008a50:	4b04      	ldr	r3, [pc, #16]	@ (8008a64 <__NVIC_GetPriorityGrouping+0x18>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	0a1b      	lsrs	r3, r3, #8
 8008a56:	f003 0307 	and.w	r3, r3, #7
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr
 8008a64:	e000ed00 	.word	0xe000ed00

08008a68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	4603      	mov	r3, r0
 8008a70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	db0b      	blt.n	8008a92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008a7a:	79fb      	ldrb	r3, [r7, #7]
 8008a7c:	f003 021f 	and.w	r2, r3, #31
 8008a80:	4907      	ldr	r1, [pc, #28]	@ (8008aa0 <__NVIC_EnableIRQ+0x38>)
 8008a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008a86:	095b      	lsrs	r3, r3, #5
 8008a88:	2001      	movs	r0, #1
 8008a8a:	fa00 f202 	lsl.w	r2, r0, r2
 8008a8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8008a92:	bf00      	nop
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	e000e100 	.word	0xe000e100

08008aa4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	6039      	str	r1, [r7, #0]
 8008aae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	db0a      	blt.n	8008ace <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	b2da      	uxtb	r2, r3
 8008abc:	490c      	ldr	r1, [pc, #48]	@ (8008af0 <__NVIC_SetPriority+0x4c>)
 8008abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008ac2:	0112      	lsls	r2, r2, #4
 8008ac4:	b2d2      	uxtb	r2, r2
 8008ac6:	440b      	add	r3, r1
 8008ac8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8008acc:	e00a      	b.n	8008ae4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	b2da      	uxtb	r2, r3
 8008ad2:	4908      	ldr	r1, [pc, #32]	@ (8008af4 <__NVIC_SetPriority+0x50>)
 8008ad4:	79fb      	ldrb	r3, [r7, #7]
 8008ad6:	f003 030f 	and.w	r3, r3, #15
 8008ada:	3b04      	subs	r3, #4
 8008adc:	0112      	lsls	r2, r2, #4
 8008ade:	b2d2      	uxtb	r2, r2
 8008ae0:	440b      	add	r3, r1
 8008ae2:	761a      	strb	r2, [r3, #24]
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr
 8008af0:	e000e100 	.word	0xe000e100
 8008af4:	e000ed00 	.word	0xe000ed00

08008af8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b089      	sub	sp, #36	@ 0x24
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f003 0307 	and.w	r3, r3, #7
 8008b0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008b0c:	69fb      	ldr	r3, [r7, #28]
 8008b0e:	f1c3 0307 	rsb	r3, r3, #7
 8008b12:	2b04      	cmp	r3, #4
 8008b14:	bf28      	it	cs
 8008b16:	2304      	movcs	r3, #4
 8008b18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008b1a:	69fb      	ldr	r3, [r7, #28]
 8008b1c:	3304      	adds	r3, #4
 8008b1e:	2b06      	cmp	r3, #6
 8008b20:	d902      	bls.n	8008b28 <NVIC_EncodePriority+0x30>
 8008b22:	69fb      	ldr	r3, [r7, #28]
 8008b24:	3b03      	subs	r3, #3
 8008b26:	e000      	b.n	8008b2a <NVIC_EncodePriority+0x32>
 8008b28:	2300      	movs	r3, #0
 8008b2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b30:	69bb      	ldr	r3, [r7, #24]
 8008b32:	fa02 f303 	lsl.w	r3, r2, r3
 8008b36:	43da      	mvns	r2, r3
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008b40:	f04f 31ff 	mov.w	r1, #4294967295
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	fa01 f303 	lsl.w	r3, r1, r3
 8008b4a:	43d9      	mvns	r1, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008b50:	4313      	orrs	r3, r2
         );
}
 8008b52:	4618      	mov	r0, r3
 8008b54:	3724      	adds	r7, #36	@ 0x24
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr
	...

08008b60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	3b01      	subs	r3, #1
 8008b6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b70:	d301      	bcc.n	8008b76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008b72:	2301      	movs	r3, #1
 8008b74:	e00f      	b.n	8008b96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008b76:	4a0a      	ldr	r2, [pc, #40]	@ (8008ba0 <SysTick_Config+0x40>)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008b7e:	210f      	movs	r1, #15
 8008b80:	f04f 30ff 	mov.w	r0, #4294967295
 8008b84:	f7ff ff8e 	bl	8008aa4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008b88:	4b05      	ldr	r3, [pc, #20]	@ (8008ba0 <SysTick_Config+0x40>)
 8008b8a:	2200      	movs	r2, #0
 8008b8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008b8e:	4b04      	ldr	r3, [pc, #16]	@ (8008ba0 <SysTick_Config+0x40>)
 8008b90:	2207      	movs	r2, #7
 8008b92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008b94:	2300      	movs	r3, #0
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	e000e010 	.word	0xe000e010

08008ba4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f7ff ff29 	bl	8008a04 <__NVIC_SetPriorityGrouping>
}
 8008bb2:	bf00      	nop
 8008bb4:	3708      	adds	r7, #8
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bd80      	pop	{r7, pc}

08008bba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008bba:	b580      	push	{r7, lr}
 8008bbc:	b086      	sub	sp, #24
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	4603      	mov	r3, r0
 8008bc2:	60b9      	str	r1, [r7, #8]
 8008bc4:	607a      	str	r2, [r7, #4]
 8008bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008bcc:	f7ff ff3e 	bl	8008a4c <__NVIC_GetPriorityGrouping>
 8008bd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008bd2:	687a      	ldr	r2, [r7, #4]
 8008bd4:	68b9      	ldr	r1, [r7, #8]
 8008bd6:	6978      	ldr	r0, [r7, #20]
 8008bd8:	f7ff ff8e 	bl	8008af8 <NVIC_EncodePriority>
 8008bdc:	4602      	mov	r2, r0
 8008bde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008be2:	4611      	mov	r1, r2
 8008be4:	4618      	mov	r0, r3
 8008be6:	f7ff ff5d 	bl	8008aa4 <__NVIC_SetPriority>
}
 8008bea:	bf00      	nop
 8008bec:	3718      	adds	r7, #24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}

08008bf2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008bf2:	b580      	push	{r7, lr}
 8008bf4:	b082      	sub	sp, #8
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7ff ff31 	bl	8008a68 <__NVIC_EnableIRQ>
}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b082      	sub	sp, #8
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff ffa2 	bl	8008b60 <SysTick_Config>
 8008c1c:	4603      	mov	r3, r0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3708      	adds	r7, #8
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
	...

08008c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	b089      	sub	sp, #36	@ 0x24
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008c32:	2300      	movs	r3, #0
 8008c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008c3e:	2300      	movs	r3, #0
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	e16b      	b.n	8008f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008c44:	2201      	movs	r2, #1
 8008c46:	69fb      	ldr	r3, [r7, #28]
 8008c48:	fa02 f303 	lsl.w	r3, r2, r3
 8008c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	4013      	ands	r3, r2
 8008c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008c58:	693a      	ldr	r2, [r7, #16]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	429a      	cmp	r2, r3
 8008c5e:	f040 815a 	bne.w	8008f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	f003 0303 	and.w	r3, r3, #3
 8008c6a:	2b01      	cmp	r3, #1
 8008c6c:	d005      	beq.n	8008c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008c76:	2b02      	cmp	r3, #2
 8008c78:	d130      	bne.n	8008cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008c80:	69fb      	ldr	r3, [r7, #28]
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	2203      	movs	r2, #3
 8008c86:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8a:	43db      	mvns	r3, r3
 8008c8c:	69ba      	ldr	r2, [r7, #24]
 8008c8e:	4013      	ands	r3, r2
 8008c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008c92:	683b      	ldr	r3, [r7, #0]
 8008c94:	68da      	ldr	r2, [r3, #12]
 8008c96:	69fb      	ldr	r3, [r7, #28]
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c9e:	69ba      	ldr	r2, [r7, #24]
 8008ca0:	4313      	orrs	r3, r2
 8008ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cb8:	43db      	mvns	r3, r3
 8008cba:	69ba      	ldr	r2, [r7, #24]
 8008cbc:	4013      	ands	r3, r2
 8008cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	685b      	ldr	r3, [r3, #4]
 8008cc4:	091b      	lsrs	r3, r3, #4
 8008cc6:	f003 0201 	and.w	r2, r3, #1
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	69ba      	ldr	r2, [r7, #24]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	69ba      	ldr	r2, [r7, #24]
 8008cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	f003 0303 	and.w	r3, r3, #3
 8008ce4:	2b03      	cmp	r3, #3
 8008ce6:	d017      	beq.n	8008d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	68db      	ldr	r3, [r3, #12]
 8008cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008cee:	69fb      	ldr	r3, [r7, #28]
 8008cf0:	005b      	lsls	r3, r3, #1
 8008cf2:	2203      	movs	r2, #3
 8008cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cf8:	43db      	mvns	r3, r3
 8008cfa:	69ba      	ldr	r2, [r7, #24]
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	fa02 f303 	lsl.w	r3, r2, r3
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	69ba      	ldr	r2, [r7, #24]
 8008d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f003 0303 	and.w	r3, r3, #3
 8008d20:	2b02      	cmp	r3, #2
 8008d22:	d123      	bne.n	8008d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	08da      	lsrs	r2, r3, #3
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	3208      	adds	r2, #8
 8008d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f003 0307 	and.w	r3, r3, #7
 8008d38:	009b      	lsls	r3, r3, #2
 8008d3a:	220f      	movs	r2, #15
 8008d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008d40:	43db      	mvns	r3, r3
 8008d42:	69ba      	ldr	r2, [r7, #24]
 8008d44:	4013      	ands	r3, r2
 8008d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	691a      	ldr	r2, [r3, #16]
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	f003 0307 	and.w	r3, r3, #7
 8008d52:	009b      	lsls	r3, r3, #2
 8008d54:	fa02 f303 	lsl.w	r3, r2, r3
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008d5e:	69fb      	ldr	r3, [r7, #28]
 8008d60:	08da      	lsrs	r2, r3, #3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	3208      	adds	r2, #8
 8008d66:	69b9      	ldr	r1, [r7, #24]
 8008d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008d72:	69fb      	ldr	r3, [r7, #28]
 8008d74:	005b      	lsls	r3, r3, #1
 8008d76:	2203      	movs	r2, #3
 8008d78:	fa02 f303 	lsl.w	r3, r2, r3
 8008d7c:	43db      	mvns	r3, r3
 8008d7e:	69ba      	ldr	r2, [r7, #24]
 8008d80:	4013      	ands	r3, r2
 8008d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	f003 0203 	and.w	r2, r3, #3
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	005b      	lsls	r3, r3, #1
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	69ba      	ldr	r2, [r7, #24]
 8008d96:	4313      	orrs	r3, r2
 8008d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	69ba      	ldr	r2, [r7, #24]
 8008d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f000 80b4 	beq.w	8008f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dae:	2300      	movs	r3, #0
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	4b60      	ldr	r3, [pc, #384]	@ (8008f34 <HAL_GPIO_Init+0x30c>)
 8008db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008db6:	4a5f      	ldr	r2, [pc, #380]	@ (8008f34 <HAL_GPIO_Init+0x30c>)
 8008db8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8008dbe:	4b5d      	ldr	r3, [pc, #372]	@ (8008f34 <HAL_GPIO_Init+0x30c>)
 8008dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008dc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8008dc6:	60fb      	str	r3, [r7, #12]
 8008dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008dca:	4a5b      	ldr	r2, [pc, #364]	@ (8008f38 <HAL_GPIO_Init+0x310>)
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	089b      	lsrs	r3, r3, #2
 8008dd0:	3302      	adds	r3, #2
 8008dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	f003 0303 	and.w	r3, r3, #3
 8008dde:	009b      	lsls	r3, r3, #2
 8008de0:	220f      	movs	r2, #15
 8008de2:	fa02 f303 	lsl.w	r3, r2, r3
 8008de6:	43db      	mvns	r3, r3
 8008de8:	69ba      	ldr	r2, [r7, #24]
 8008dea:	4013      	ands	r3, r2
 8008dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	4a52      	ldr	r2, [pc, #328]	@ (8008f3c <HAL_GPIO_Init+0x314>)
 8008df2:	4293      	cmp	r3, r2
 8008df4:	d02b      	beq.n	8008e4e <HAL_GPIO_Init+0x226>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a51      	ldr	r2, [pc, #324]	@ (8008f40 <HAL_GPIO_Init+0x318>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d025      	beq.n	8008e4a <HAL_GPIO_Init+0x222>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a50      	ldr	r2, [pc, #320]	@ (8008f44 <HAL_GPIO_Init+0x31c>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d01f      	beq.n	8008e46 <HAL_GPIO_Init+0x21e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a4f      	ldr	r2, [pc, #316]	@ (8008f48 <HAL_GPIO_Init+0x320>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d019      	beq.n	8008e42 <HAL_GPIO_Init+0x21a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a4e      	ldr	r2, [pc, #312]	@ (8008f4c <HAL_GPIO_Init+0x324>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d013      	beq.n	8008e3e <HAL_GPIO_Init+0x216>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a4d      	ldr	r2, [pc, #308]	@ (8008f50 <HAL_GPIO_Init+0x328>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d00d      	beq.n	8008e3a <HAL_GPIO_Init+0x212>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a4c      	ldr	r2, [pc, #304]	@ (8008f54 <HAL_GPIO_Init+0x32c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d007      	beq.n	8008e36 <HAL_GPIO_Init+0x20e>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a4b      	ldr	r2, [pc, #300]	@ (8008f58 <HAL_GPIO_Init+0x330>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d101      	bne.n	8008e32 <HAL_GPIO_Init+0x20a>
 8008e2e:	2307      	movs	r3, #7
 8008e30:	e00e      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e32:	2308      	movs	r3, #8
 8008e34:	e00c      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e36:	2306      	movs	r3, #6
 8008e38:	e00a      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e3a:	2305      	movs	r3, #5
 8008e3c:	e008      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e3e:	2304      	movs	r3, #4
 8008e40:	e006      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e42:	2303      	movs	r3, #3
 8008e44:	e004      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e46:	2302      	movs	r3, #2
 8008e48:	e002      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e000      	b.n	8008e50 <HAL_GPIO_Init+0x228>
 8008e4e:	2300      	movs	r3, #0
 8008e50:	69fa      	ldr	r2, [r7, #28]
 8008e52:	f002 0203 	and.w	r2, r2, #3
 8008e56:	0092      	lsls	r2, r2, #2
 8008e58:	4093      	lsls	r3, r2
 8008e5a:	69ba      	ldr	r2, [r7, #24]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008e60:	4935      	ldr	r1, [pc, #212]	@ (8008f38 <HAL_GPIO_Init+0x310>)
 8008e62:	69fb      	ldr	r3, [r7, #28]
 8008e64:	089b      	lsrs	r3, r3, #2
 8008e66:	3302      	adds	r3, #2
 8008e68:	69ba      	ldr	r2, [r7, #24]
 8008e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008e6e:	4b3b      	ldr	r3, [pc, #236]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008e70:	689b      	ldr	r3, [r3, #8]
 8008e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	43db      	mvns	r3, r3
 8008e78:	69ba      	ldr	r2, [r7, #24]
 8008e7a:	4013      	ands	r3, r2
 8008e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008e7e:	683b      	ldr	r3, [r7, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d003      	beq.n	8008e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008e8a:	69ba      	ldr	r2, [r7, #24]
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008e92:	4a32      	ldr	r2, [pc, #200]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008e98:	4b30      	ldr	r3, [pc, #192]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008e9a:	68db      	ldr	r3, [r3, #12]
 8008e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	43db      	mvns	r3, r3
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	685b      	ldr	r3, [r3, #4]
 8008eac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d003      	beq.n	8008ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008eb4:	69ba      	ldr	r2, [r7, #24]
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008ebc:	4a27      	ldr	r2, [pc, #156]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008ebe:	69bb      	ldr	r3, [r7, #24]
 8008ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008ec2:	4b26      	ldr	r3, [pc, #152]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	43db      	mvns	r3, r3
 8008ecc:	69ba      	ldr	r2, [r7, #24]
 8008ece:	4013      	ands	r3, r2
 8008ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d003      	beq.n	8008ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	4313      	orrs	r3, r2
 8008ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008ee8:	69bb      	ldr	r3, [r7, #24]
 8008eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008eec:	4b1b      	ldr	r3, [pc, #108]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	43db      	mvns	r3, r3
 8008ef6:	69ba      	ldr	r2, [r7, #24]
 8008ef8:	4013      	ands	r3, r2
 8008efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d003      	beq.n	8008f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008f10:	4a12      	ldr	r2, [pc, #72]	@ (8008f5c <HAL_GPIO_Init+0x334>)
 8008f12:	69bb      	ldr	r3, [r7, #24]
 8008f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	3301      	adds	r3, #1
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	69fb      	ldr	r3, [r7, #28]
 8008f1e:	2b0f      	cmp	r3, #15
 8008f20:	f67f ae90 	bls.w	8008c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008f24:	bf00      	nop
 8008f26:	bf00      	nop
 8008f28:	3724      	adds	r7, #36	@ 0x24
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f30:	4770      	bx	lr
 8008f32:	bf00      	nop
 8008f34:	40023800 	.word	0x40023800
 8008f38:	40013800 	.word	0x40013800
 8008f3c:	40020000 	.word	0x40020000
 8008f40:	40020400 	.word	0x40020400
 8008f44:	40020800 	.word	0x40020800
 8008f48:	40020c00 	.word	0x40020c00
 8008f4c:	40021000 	.word	0x40021000
 8008f50:	40021400 	.word	0x40021400
 8008f54:	40021800 	.word	0x40021800
 8008f58:	40021c00 	.word	0x40021c00
 8008f5c:	40013c00 	.word	0x40013c00

08008f60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f60:	b480      	push	{r7}
 8008f62:	b083      	sub	sp, #12
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	460b      	mov	r3, r1
 8008f6a:	807b      	strh	r3, [r7, #2]
 8008f6c:	4613      	mov	r3, r2
 8008f6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008f70:	787b      	ldrb	r3, [r7, #1]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d003      	beq.n	8008f7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f76:	887a      	ldrh	r2, [r7, #2]
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008f7c:	e003      	b.n	8008f86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008f7e:	887b      	ldrh	r3, [r7, #2]
 8008f80:	041a      	lsls	r2, r3, #16
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	619a      	str	r2, [r3, #24]
}
 8008f86:	bf00      	nop
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af02      	add	r7, sp, #8
 8008f98:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	e059      	b.n	8009058 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d106      	bne.n	8008fc4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2200      	movs	r2, #0
 8008fba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f007 fc3a 	bl	8010838 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2203      	movs	r2, #3
 8008fc8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008fd2:	d102      	bne.n	8008fda <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f004 fa53 	bl	800d48a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6818      	ldr	r0, [r3, #0]
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	7c1a      	ldrb	r2, [r3, #16]
 8008fec:	f88d 2000 	strb.w	r2, [sp]
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008ff4:	f004 f9d4 	bl	800d3a0 <USB_CoreInit>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d005      	beq.n	800900a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	2202      	movs	r2, #2
 8009002:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8009006:	2301      	movs	r3, #1
 8009008:	e026      	b.n	8009058 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2101      	movs	r1, #1
 8009010:	4618      	mov	r0, r3
 8009012:	f004 fa4b 	bl	800d4ac <USB_SetCurrentMode>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d005      	beq.n	8009028 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2202      	movs	r2, #2
 8009020:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8009024:	2301      	movs	r3, #1
 8009026:	e017      	b.n	8009058 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6818      	ldr	r0, [r3, #0]
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	7c1a      	ldrb	r2, [r3, #16]
 8009030:	f88d 2000 	strb.w	r2, [sp]
 8009034:	3304      	adds	r3, #4
 8009036:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009038:	f004 fbee 	bl	800d818 <USB_HostInit>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d005      	beq.n	800904e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2202      	movs	r2, #2
 8009046:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e004      	b.n	8009058 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2201      	movs	r2, #1
 8009052:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8009056:	2300      	movs	r3, #0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009060:	b590      	push	{r4, r7, lr}
 8009062:	b08b      	sub	sp, #44	@ 0x2c
 8009064:	af04      	add	r7, sp, #16
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	4608      	mov	r0, r1
 800906a:	4611      	mov	r1, r2
 800906c:	461a      	mov	r2, r3
 800906e:	4603      	mov	r3, r0
 8009070:	70fb      	strb	r3, [r7, #3]
 8009072:	460b      	mov	r3, r1
 8009074:	70bb      	strb	r3, [r7, #2]
 8009076:	4613      	mov	r3, r2
 8009078:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800907a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800907c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_HCD_HC_Init+0x2c>
 8009088:	2302      	movs	r3, #2
 800908a:	e09d      	b.n	80091c8 <HAL_HCD_HC_Init+0x168>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8009094:	78fa      	ldrb	r2, [r7, #3]
 8009096:	6879      	ldr	r1, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	011b      	lsls	r3, r3, #4
 800909c:	1a9b      	subs	r3, r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	3319      	adds	r3, #25
 80090a4:	2200      	movs	r2, #0
 80090a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80090a8:	78fa      	ldrb	r2, [r7, #3]
 80090aa:	6879      	ldr	r1, [r7, #4]
 80090ac:	4613      	mov	r3, r2
 80090ae:	011b      	lsls	r3, r3, #4
 80090b0:	1a9b      	subs	r3, r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	3314      	adds	r3, #20
 80090b8:	787a      	ldrb	r2, [r7, #1]
 80090ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80090bc:	78fa      	ldrb	r2, [r7, #3]
 80090be:	6879      	ldr	r1, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	011b      	lsls	r3, r3, #4
 80090c4:	1a9b      	subs	r3, r3, r2
 80090c6:	009b      	lsls	r3, r3, #2
 80090c8:	440b      	add	r3, r1
 80090ca:	3315      	adds	r3, #21
 80090cc:	78fa      	ldrb	r2, [r7, #3]
 80090ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	6879      	ldr	r1, [r7, #4]
 80090d4:	4613      	mov	r3, r2
 80090d6:	011b      	lsls	r3, r3, #4
 80090d8:	1a9b      	subs	r3, r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	440b      	add	r3, r1
 80090de:	3326      	adds	r3, #38	@ 0x26
 80090e0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80090e4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80090e6:	78fa      	ldrb	r2, [r7, #3]
 80090e8:	78bb      	ldrb	r3, [r7, #2]
 80090ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090ee:	b2d8      	uxtb	r0, r3
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	1a9b      	subs	r3, r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	3316      	adds	r3, #22
 80090fe:	4602      	mov	r2, r0
 8009100:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8009102:	78fb      	ldrb	r3, [r7, #3]
 8009104:	4619      	mov	r1, r3
 8009106:	6878      	ldr	r0, [r7, #4]
 8009108:	f000 fbc8 	bl	800989c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 800910c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009110:	2b00      	cmp	r3, #0
 8009112:	da0a      	bge.n	800912a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8009114:	78fa      	ldrb	r2, [r7, #3]
 8009116:	6879      	ldr	r1, [r7, #4]
 8009118:	4613      	mov	r3, r2
 800911a:	011b      	lsls	r3, r3, #4
 800911c:	1a9b      	subs	r3, r3, r2
 800911e:	009b      	lsls	r3, r3, #2
 8009120:	440b      	add	r3, r1
 8009122:	3317      	adds	r3, #23
 8009124:	2201      	movs	r2, #1
 8009126:	701a      	strb	r2, [r3, #0]
 8009128:	e009      	b.n	800913e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800912a:	78fa      	ldrb	r2, [r7, #3]
 800912c:	6879      	ldr	r1, [r7, #4]
 800912e:	4613      	mov	r3, r2
 8009130:	011b      	lsls	r3, r3, #4
 8009132:	1a9b      	subs	r3, r3, r2
 8009134:	009b      	lsls	r3, r3, #2
 8009136:	440b      	add	r3, r1
 8009138:	3317      	adds	r3, #23
 800913a:	2200      	movs	r2, #0
 800913c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	4618      	mov	r0, r3
 8009144:	f004 fccc 	bl	800dae0 <USB_GetHostSpeed>
 8009148:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800914a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800914e:	2b01      	cmp	r3, #1
 8009150:	d10b      	bne.n	800916a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8009152:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009156:	2b01      	cmp	r3, #1
 8009158:	d107      	bne.n	800916a <HAL_HCD_HC_Init+0x10a>
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	2b00      	cmp	r3, #0
 800915e:	d104      	bne.n	800916a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	2bbc      	cmp	r3, #188	@ 0xbc
 8009164:	d901      	bls.n	800916a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8009166:	23bc      	movs	r3, #188	@ 0xbc
 8009168:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800916a:	78fa      	ldrb	r2, [r7, #3]
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	4613      	mov	r3, r2
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	1a9b      	subs	r3, r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	440b      	add	r3, r1
 8009178:	3318      	adds	r3, #24
 800917a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800917e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8009180:	78fa      	ldrb	r2, [r7, #3]
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	b298      	uxth	r0, r3
 8009186:	6879      	ldr	r1, [r7, #4]
 8009188:	4613      	mov	r3, r2
 800918a:	011b      	lsls	r3, r3, #4
 800918c:	1a9b      	subs	r3, r3, r2
 800918e:	009b      	lsls	r3, r3, #2
 8009190:	440b      	add	r3, r1
 8009192:	3328      	adds	r3, #40	@ 0x28
 8009194:	4602      	mov	r2, r0
 8009196:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6818      	ldr	r0, [r3, #0]
 800919c:	697b      	ldr	r3, [r7, #20]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	787c      	ldrb	r4, [r7, #1]
 80091a2:	78ba      	ldrb	r2, [r7, #2]
 80091a4:	78f9      	ldrb	r1, [r7, #3]
 80091a6:	9302      	str	r3, [sp, #8]
 80091a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80091ac:	9301      	str	r3, [sp, #4]
 80091ae:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80091b2:	9300      	str	r3, [sp, #0]
 80091b4:	4623      	mov	r3, r4
 80091b6:	f004 fcbb 	bl	800db30 <USB_HC_Init>
 80091ba:	4603      	mov	r3, r0
 80091bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	2200      	movs	r2, #0
 80091c2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80091c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd90      	pop	{r4, r7, pc}

080091d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	460b      	mov	r3, r1
 80091da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <HAL_HCD_HC_Halt+0x1e>
 80091ea:	2302      	movs	r3, #2
 80091ec:	e00f      	b.n	800920e <HAL_HCD_HC_Halt+0x3e>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2201      	movs	r2, #1
 80091f2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	4618      	mov	r0, r3
 8009200:	f005 f84d 	bl	800e29e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2200      	movs	r2, #0
 8009208:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}
	...

08009218 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b082      	sub	sp, #8
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
 8009220:	4608      	mov	r0, r1
 8009222:	4611      	mov	r1, r2
 8009224:	461a      	mov	r2, r3
 8009226:	4603      	mov	r3, r0
 8009228:	70fb      	strb	r3, [r7, #3]
 800922a:	460b      	mov	r3, r1
 800922c:	70bb      	strb	r3, [r7, #2]
 800922e:	4613      	mov	r3, r2
 8009230:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8009232:	78fa      	ldrb	r2, [r7, #3]
 8009234:	6879      	ldr	r1, [r7, #4]
 8009236:	4613      	mov	r3, r2
 8009238:	011b      	lsls	r3, r3, #4
 800923a:	1a9b      	subs	r3, r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	440b      	add	r3, r1
 8009240:	3317      	adds	r3, #23
 8009242:	78ba      	ldrb	r2, [r7, #2]
 8009244:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	3326      	adds	r3, #38	@ 0x26
 8009256:	787a      	ldrb	r2, [r7, #1]
 8009258:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800925a:	7c3b      	ldrb	r3, [r7, #16]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d114      	bne.n	800928a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8009260:	78fa      	ldrb	r2, [r7, #3]
 8009262:	6879      	ldr	r1, [r7, #4]
 8009264:	4613      	mov	r3, r2
 8009266:	011b      	lsls	r3, r3, #4
 8009268:	1a9b      	subs	r3, r3, r2
 800926a:	009b      	lsls	r3, r3, #2
 800926c:	440b      	add	r3, r1
 800926e:	332a      	adds	r3, #42	@ 0x2a
 8009270:	2203      	movs	r2, #3
 8009272:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8009274:	78fa      	ldrb	r2, [r7, #3]
 8009276:	6879      	ldr	r1, [r7, #4]
 8009278:	4613      	mov	r3, r2
 800927a:	011b      	lsls	r3, r3, #4
 800927c:	1a9b      	subs	r3, r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	440b      	add	r3, r1
 8009282:	3319      	adds	r3, #25
 8009284:	7f3a      	ldrb	r2, [r7, #28]
 8009286:	701a      	strb	r2, [r3, #0]
 8009288:	e009      	b.n	800929e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800928a:	78fa      	ldrb	r2, [r7, #3]
 800928c:	6879      	ldr	r1, [r7, #4]
 800928e:	4613      	mov	r3, r2
 8009290:	011b      	lsls	r3, r3, #4
 8009292:	1a9b      	subs	r3, r3, r2
 8009294:	009b      	lsls	r3, r3, #2
 8009296:	440b      	add	r3, r1
 8009298:	332a      	adds	r3, #42	@ 0x2a
 800929a:	2202      	movs	r2, #2
 800929c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800929e:	787b      	ldrb	r3, [r7, #1]
 80092a0:	2b03      	cmp	r3, #3
 80092a2:	f200 8102 	bhi.w	80094aa <HAL_HCD_HC_SubmitRequest+0x292>
 80092a6:	a201      	add	r2, pc, #4	@ (adr r2, 80092ac <HAL_HCD_HC_SubmitRequest+0x94>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	080092bd 	.word	0x080092bd
 80092b0:	08009495 	.word	0x08009495
 80092b4:	08009381 	.word	0x08009381
 80092b8:	0800940b 	.word	0x0800940b
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80092bc:	7c3b      	ldrb	r3, [r7, #16]
 80092be:	2b01      	cmp	r3, #1
 80092c0:	f040 80f5 	bne.w	80094ae <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80092c4:	78bb      	ldrb	r3, [r7, #2]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d12d      	bne.n	8009326 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80092ca:	8b3b      	ldrh	r3, [r7, #24]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d109      	bne.n	80092e4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80092d0:	78fa      	ldrb	r2, [r7, #3]
 80092d2:	6879      	ldr	r1, [r7, #4]
 80092d4:	4613      	mov	r3, r2
 80092d6:	011b      	lsls	r3, r3, #4
 80092d8:	1a9b      	subs	r3, r3, r2
 80092da:	009b      	lsls	r3, r3, #2
 80092dc:	440b      	add	r3, r1
 80092de:	333d      	adds	r3, #61	@ 0x3d
 80092e0:	2201      	movs	r2, #1
 80092e2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80092e4:	78fa      	ldrb	r2, [r7, #3]
 80092e6:	6879      	ldr	r1, [r7, #4]
 80092e8:	4613      	mov	r3, r2
 80092ea:	011b      	lsls	r3, r3, #4
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	333d      	adds	r3, #61	@ 0x3d
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d10a      	bne.n	8009310 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80092fa:	78fa      	ldrb	r2, [r7, #3]
 80092fc:	6879      	ldr	r1, [r7, #4]
 80092fe:	4613      	mov	r3, r2
 8009300:	011b      	lsls	r3, r3, #4
 8009302:	1a9b      	subs	r3, r3, r2
 8009304:	009b      	lsls	r3, r3, #2
 8009306:	440b      	add	r3, r1
 8009308:	332a      	adds	r3, #42	@ 0x2a
 800930a:	2200      	movs	r2, #0
 800930c:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 800930e:	e0ce      	b.n	80094ae <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8009310:	78fa      	ldrb	r2, [r7, #3]
 8009312:	6879      	ldr	r1, [r7, #4]
 8009314:	4613      	mov	r3, r2
 8009316:	011b      	lsls	r3, r3, #4
 8009318:	1a9b      	subs	r3, r3, r2
 800931a:	009b      	lsls	r3, r3, #2
 800931c:	440b      	add	r3, r1
 800931e:	332a      	adds	r3, #42	@ 0x2a
 8009320:	2202      	movs	r2, #2
 8009322:	701a      	strb	r2, [r3, #0]
      break;
 8009324:	e0c3      	b.n	80094ae <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8009326:	78fa      	ldrb	r2, [r7, #3]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	4613      	mov	r3, r2
 800932c:	011b      	lsls	r3, r3, #4
 800932e:	1a9b      	subs	r3, r3, r2
 8009330:	009b      	lsls	r3, r3, #2
 8009332:	440b      	add	r3, r1
 8009334:	331a      	adds	r3, #26
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	f040 80b8 	bne.w	80094ae <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800933e:	78fa      	ldrb	r2, [r7, #3]
 8009340:	6879      	ldr	r1, [r7, #4]
 8009342:	4613      	mov	r3, r2
 8009344:	011b      	lsls	r3, r3, #4
 8009346:	1a9b      	subs	r3, r3, r2
 8009348:	009b      	lsls	r3, r3, #2
 800934a:	440b      	add	r3, r1
 800934c:	333c      	adds	r3, #60	@ 0x3c
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d10a      	bne.n	800936a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009354:	78fa      	ldrb	r2, [r7, #3]
 8009356:	6879      	ldr	r1, [r7, #4]
 8009358:	4613      	mov	r3, r2
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	1a9b      	subs	r3, r3, r2
 800935e:	009b      	lsls	r3, r3, #2
 8009360:	440b      	add	r3, r1
 8009362:	332a      	adds	r3, #42	@ 0x2a
 8009364:	2200      	movs	r2, #0
 8009366:	701a      	strb	r2, [r3, #0]
      break;
 8009368:	e0a1      	b.n	80094ae <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800936a:	78fa      	ldrb	r2, [r7, #3]
 800936c:	6879      	ldr	r1, [r7, #4]
 800936e:	4613      	mov	r3, r2
 8009370:	011b      	lsls	r3, r3, #4
 8009372:	1a9b      	subs	r3, r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	440b      	add	r3, r1
 8009378:	332a      	adds	r3, #42	@ 0x2a
 800937a:	2202      	movs	r2, #2
 800937c:	701a      	strb	r2, [r3, #0]
      break;
 800937e:	e096      	b.n	80094ae <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8009380:	78bb      	ldrb	r3, [r7, #2]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d120      	bne.n	80093c8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009386:	78fa      	ldrb	r2, [r7, #3]
 8009388:	6879      	ldr	r1, [r7, #4]
 800938a:	4613      	mov	r3, r2
 800938c:	011b      	lsls	r3, r3, #4
 800938e:	1a9b      	subs	r3, r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	440b      	add	r3, r1
 8009394:	333d      	adds	r3, #61	@ 0x3d
 8009396:	781b      	ldrb	r3, [r3, #0]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d10a      	bne.n	80093b2 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800939c:	78fa      	ldrb	r2, [r7, #3]
 800939e:	6879      	ldr	r1, [r7, #4]
 80093a0:	4613      	mov	r3, r2
 80093a2:	011b      	lsls	r3, r3, #4
 80093a4:	1a9b      	subs	r3, r3, r2
 80093a6:	009b      	lsls	r3, r3, #2
 80093a8:	440b      	add	r3, r1
 80093aa:	332a      	adds	r3, #42	@ 0x2a
 80093ac:	2200      	movs	r2, #0
 80093ae:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80093b0:	e07e      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80093b2:	78fa      	ldrb	r2, [r7, #3]
 80093b4:	6879      	ldr	r1, [r7, #4]
 80093b6:	4613      	mov	r3, r2
 80093b8:	011b      	lsls	r3, r3, #4
 80093ba:	1a9b      	subs	r3, r3, r2
 80093bc:	009b      	lsls	r3, r3, #2
 80093be:	440b      	add	r3, r1
 80093c0:	332a      	adds	r3, #42	@ 0x2a
 80093c2:	2202      	movs	r2, #2
 80093c4:	701a      	strb	r2, [r3, #0]
      break;
 80093c6:	e073      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80093c8:	78fa      	ldrb	r2, [r7, #3]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	4613      	mov	r3, r2
 80093ce:	011b      	lsls	r3, r3, #4
 80093d0:	1a9b      	subs	r3, r3, r2
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	440b      	add	r3, r1
 80093d6:	333c      	adds	r3, #60	@ 0x3c
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d10a      	bne.n	80093f4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80093de:	78fa      	ldrb	r2, [r7, #3]
 80093e0:	6879      	ldr	r1, [r7, #4]
 80093e2:	4613      	mov	r3, r2
 80093e4:	011b      	lsls	r3, r3, #4
 80093e6:	1a9b      	subs	r3, r3, r2
 80093e8:	009b      	lsls	r3, r3, #2
 80093ea:	440b      	add	r3, r1
 80093ec:	332a      	adds	r3, #42	@ 0x2a
 80093ee:	2200      	movs	r2, #0
 80093f0:	701a      	strb	r2, [r3, #0]
      break;
 80093f2:	e05d      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80093f4:	78fa      	ldrb	r2, [r7, #3]
 80093f6:	6879      	ldr	r1, [r7, #4]
 80093f8:	4613      	mov	r3, r2
 80093fa:	011b      	lsls	r3, r3, #4
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	440b      	add	r3, r1
 8009402:	332a      	adds	r3, #42	@ 0x2a
 8009404:	2202      	movs	r2, #2
 8009406:	701a      	strb	r2, [r3, #0]
      break;
 8009408:	e052      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800940a:	78bb      	ldrb	r3, [r7, #2]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d120      	bne.n	8009452 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8009410:	78fa      	ldrb	r2, [r7, #3]
 8009412:	6879      	ldr	r1, [r7, #4]
 8009414:	4613      	mov	r3, r2
 8009416:	011b      	lsls	r3, r3, #4
 8009418:	1a9b      	subs	r3, r3, r2
 800941a:	009b      	lsls	r3, r3, #2
 800941c:	440b      	add	r3, r1
 800941e:	333d      	adds	r3, #61	@ 0x3d
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d10a      	bne.n	800943c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009426:	78fa      	ldrb	r2, [r7, #3]
 8009428:	6879      	ldr	r1, [r7, #4]
 800942a:	4613      	mov	r3, r2
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	440b      	add	r3, r1
 8009434:	332a      	adds	r3, #42	@ 0x2a
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800943a:	e039      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800943c:	78fa      	ldrb	r2, [r7, #3]
 800943e:	6879      	ldr	r1, [r7, #4]
 8009440:	4613      	mov	r3, r2
 8009442:	011b      	lsls	r3, r3, #4
 8009444:	1a9b      	subs	r3, r3, r2
 8009446:	009b      	lsls	r3, r3, #2
 8009448:	440b      	add	r3, r1
 800944a:	332a      	adds	r3, #42	@ 0x2a
 800944c:	2202      	movs	r2, #2
 800944e:	701a      	strb	r2, [r3, #0]
      break;
 8009450:	e02e      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8009452:	78fa      	ldrb	r2, [r7, #3]
 8009454:	6879      	ldr	r1, [r7, #4]
 8009456:	4613      	mov	r3, r2
 8009458:	011b      	lsls	r3, r3, #4
 800945a:	1a9b      	subs	r3, r3, r2
 800945c:	009b      	lsls	r3, r3, #2
 800945e:	440b      	add	r3, r1
 8009460:	333c      	adds	r3, #60	@ 0x3c
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	2b00      	cmp	r3, #0
 8009466:	d10a      	bne.n	800947e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009468:	78fa      	ldrb	r2, [r7, #3]
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	4613      	mov	r3, r2
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	1a9b      	subs	r3, r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	332a      	adds	r3, #42	@ 0x2a
 8009478:	2200      	movs	r2, #0
 800947a:	701a      	strb	r2, [r3, #0]
      break;
 800947c:	e018      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800947e:	78fa      	ldrb	r2, [r7, #3]
 8009480:	6879      	ldr	r1, [r7, #4]
 8009482:	4613      	mov	r3, r2
 8009484:	011b      	lsls	r3, r3, #4
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	009b      	lsls	r3, r3, #2
 800948a:	440b      	add	r3, r1
 800948c:	332a      	adds	r3, #42	@ 0x2a
 800948e:	2202      	movs	r2, #2
 8009490:	701a      	strb	r2, [r3, #0]
      break;
 8009492:	e00d      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8009494:	78fa      	ldrb	r2, [r7, #3]
 8009496:	6879      	ldr	r1, [r7, #4]
 8009498:	4613      	mov	r3, r2
 800949a:	011b      	lsls	r3, r3, #4
 800949c:	1a9b      	subs	r3, r3, r2
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	440b      	add	r3, r1
 80094a2:	332a      	adds	r3, #42	@ 0x2a
 80094a4:	2200      	movs	r2, #0
 80094a6:	701a      	strb	r2, [r3, #0]
      break;
 80094a8:	e002      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80094aa:	bf00      	nop
 80094ac:	e000      	b.n	80094b0 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80094ae:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	6879      	ldr	r1, [r7, #4]
 80094b4:	4613      	mov	r3, r2
 80094b6:	011b      	lsls	r3, r3, #4
 80094b8:	1a9b      	subs	r3, r3, r2
 80094ba:	009b      	lsls	r3, r3, #2
 80094bc:	440b      	add	r3, r1
 80094be:	332c      	adds	r3, #44	@ 0x2c
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	8b39      	ldrh	r1, [r7, #24]
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	4613      	mov	r3, r2
 80094cc:	011b      	lsls	r3, r3, #4
 80094ce:	1a9b      	subs	r3, r3, r2
 80094d0:	009b      	lsls	r3, r3, #2
 80094d2:	4403      	add	r3, r0
 80094d4:	3334      	adds	r3, #52	@ 0x34
 80094d6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80094d8:	78fa      	ldrb	r2, [r7, #3]
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4613      	mov	r3, r2
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	334c      	adds	r3, #76	@ 0x4c
 80094e8:	2200      	movs	r2, #0
 80094ea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	3338      	adds	r3, #56	@ 0x38
 80094fc:	2200      	movs	r2, #0
 80094fe:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8009500:	78fa      	ldrb	r2, [r7, #3]
 8009502:	6879      	ldr	r1, [r7, #4]
 8009504:	4613      	mov	r3, r2
 8009506:	011b      	lsls	r3, r3, #4
 8009508:	1a9b      	subs	r3, r3, r2
 800950a:	009b      	lsls	r3, r3, #2
 800950c:	440b      	add	r3, r1
 800950e:	3315      	adds	r3, #21
 8009510:	78fa      	ldrb	r2, [r7, #3]
 8009512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	6879      	ldr	r1, [r7, #4]
 8009518:	4613      	mov	r3, r2
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	1a9b      	subs	r3, r3, r2
 800951e:	009b      	lsls	r3, r3, #2
 8009520:	440b      	add	r3, r1
 8009522:	334d      	adds	r3, #77	@ 0x4d
 8009524:	2200      	movs	r2, #0
 8009526:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6818      	ldr	r0, [r3, #0]
 800952c:	78fa      	ldrb	r2, [r7, #3]
 800952e:	4613      	mov	r3, r2
 8009530:	011b      	lsls	r3, r3, #4
 8009532:	1a9b      	subs	r3, r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	3310      	adds	r3, #16
 8009538:	687a      	ldr	r2, [r7, #4]
 800953a:	4413      	add	r3, r2
 800953c:	1d19      	adds	r1, r3, #4
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	799b      	ldrb	r3, [r3, #6]
 8009542:	461a      	mov	r2, r3
 8009544:	f004 fc20 	bl	800dd88 <USB_HC_StartXfer>
 8009548:	4603      	mov	r3, r0
}
 800954a:	4618      	mov	r0, r3
 800954c:	3708      	adds	r7, #8
 800954e:	46bd      	mov	sp, r7
 8009550:	bd80      	pop	{r7, pc}
 8009552:	bf00      	nop

08009554 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8009554:	b580      	push	{r7, lr}
 8009556:	b086      	sub	sp, #24
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4618      	mov	r0, r3
 800956c:	f004 f914 	bl	800d798 <USB_GetMode>
 8009570:	4603      	mov	r3, r0
 8009572:	2b01      	cmp	r3, #1
 8009574:	f040 80fb 	bne.w	800976e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4618      	mov	r0, r3
 800957e:	f004 f8d7 	bl	800d730 <USB_ReadInterrupts>
 8009582:	4603      	mov	r3, r0
 8009584:	2b00      	cmp	r3, #0
 8009586:	f000 80f1 	beq.w	800976c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	4618      	mov	r0, r3
 8009590:	f004 f8ce 	bl	800d730 <USB_ReadInterrupts>
 8009594:	4603      	mov	r3, r0
 8009596:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800959a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800959e:	d104      	bne.n	80095aa <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80095a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	4618      	mov	r0, r3
 80095b0:	f004 f8be 	bl	800d730 <USB_ReadInterrupts>
 80095b4:	4603      	mov	r3, r0
 80095b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80095ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80095be:	d104      	bne.n	80095ca <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80095c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4618      	mov	r0, r3
 80095d0:	f004 f8ae 	bl	800d730 <USB_ReadInterrupts>
 80095d4:	4603      	mov	r3, r0
 80095d6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80095da:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80095de:	d104      	bne.n	80095ea <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80095e8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4618      	mov	r0, r3
 80095f0:	f004 f89e 	bl	800d730 <USB_ReadInterrupts>
 80095f4:	4603      	mov	r3, r0
 80095f6:	f003 0302 	and.w	r3, r3, #2
 80095fa:	2b02      	cmp	r3, #2
 80095fc:	d103      	bne.n	8009606 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2202      	movs	r2, #2
 8009604:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4618      	mov	r0, r3
 800960c:	f004 f890 	bl	800d730 <USB_ReadInterrupts>
 8009610:	4603      	mov	r3, r0
 8009612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800961a:	d120      	bne.n	800965e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009624:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d113      	bne.n	800965e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8009636:	2110      	movs	r1, #16
 8009638:	6938      	ldr	r0, [r7, #16]
 800963a:	f003 ff83 	bl	800d544 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800963e:	6938      	ldr	r0, [r7, #16]
 8009640:	f003 ffb2 	bl	800d5a8 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	7a5b      	ldrb	r3, [r3, #9]
 8009648:	2b02      	cmp	r3, #2
 800964a:	d105      	bne.n	8009658 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	2101      	movs	r1, #1
 8009652:	4618      	mov	r0, r3
 8009654:	f004 f9a4 	bl	800d9a0 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8009658:	6878      	ldr	r0, [r7, #4]
 800965a:	f007 f96b 	bl	8010934 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	4618      	mov	r0, r3
 8009664:	f004 f864 	bl	800d730 <USB_ReadInterrupts>
 8009668:	4603      	mov	r3, r0
 800966a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800966e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009672:	d102      	bne.n	800967a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f001 fd4d 	bl	800b114 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	4618      	mov	r0, r3
 8009680:	f004 f856 	bl	800d730 <USB_ReadInterrupts>
 8009684:	4603      	mov	r3, r0
 8009686:	f003 0308 	and.w	r3, r3, #8
 800968a:	2b08      	cmp	r3, #8
 800968c:	d106      	bne.n	800969c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f007 f934 	bl	80108fc <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	2208      	movs	r2, #8
 800969a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4618      	mov	r0, r3
 80096a2:	f004 f845 	bl	800d730 <USB_ReadInterrupts>
 80096a6:	4603      	mov	r3, r0
 80096a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096ac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80096b0:	d139      	bne.n	8009726 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	4618      	mov	r0, r3
 80096b8:	f004 fde0 	bl	800e27c <USB_HC_ReadInterrupt>
 80096bc:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	e025      	b.n	8009710 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80096c4:	697b      	ldr	r3, [r7, #20]
 80096c6:	f003 030f 	and.w	r3, r3, #15
 80096ca:	68ba      	ldr	r2, [r7, #8]
 80096cc:	fa22 f303 	lsr.w	r3, r2, r3
 80096d0:	f003 0301 	and.w	r3, r3, #1
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d018      	beq.n	800970a <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80096d8:	697b      	ldr	r3, [r7, #20]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80096ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80096ee:	d106      	bne.n	80096fe <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80096f0:	697b      	ldr	r3, [r7, #20]
 80096f2:	b2db      	uxtb	r3, r3
 80096f4:	4619      	mov	r1, r3
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f905 	bl	8009906 <HCD_HC_IN_IRQHandler>
 80096fc:	e005      	b.n	800970a <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80096fe:	697b      	ldr	r3, [r7, #20]
 8009700:	b2db      	uxtb	r3, r3
 8009702:	4619      	mov	r1, r3
 8009704:	6878      	ldr	r0, [r7, #4]
 8009706:	f000 ff67 	bl	800a5d8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	3301      	adds	r3, #1
 800970e:	617b      	str	r3, [r7, #20]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	795b      	ldrb	r3, [r3, #5]
 8009714:	461a      	mov	r2, r3
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	4293      	cmp	r3, r2
 800971a:	d3d3      	bcc.n	80096c4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8009724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	4618      	mov	r0, r3
 800972c:	f004 f800 	bl	800d730 <USB_ReadInterrupts>
 8009730:	4603      	mov	r3, r0
 8009732:	f003 0310 	and.w	r3, r3, #16
 8009736:	2b10      	cmp	r3, #16
 8009738:	d101      	bne.n	800973e <HAL_HCD_IRQHandler+0x1ea>
 800973a:	2301      	movs	r3, #1
 800973c:	e000      	b.n	8009740 <HAL_HCD_IRQHandler+0x1ec>
 800973e:	2300      	movs	r3, #0
 8009740:	2b00      	cmp	r3, #0
 8009742:	d014      	beq.n	800976e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	699a      	ldr	r2, [r3, #24]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0210 	bic.w	r2, r2, #16
 8009752:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8009754:	6878      	ldr	r0, [r7, #4]
 8009756:	f001 fbfe 	bl	800af56 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	699a      	ldr	r2, [r3, #24]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f042 0210 	orr.w	r2, r2, #16
 8009768:	619a      	str	r2, [r3, #24]
 800976a:	e000      	b.n	800976e <HAL_HCD_IRQHandler+0x21a>
      return;
 800976c:	bf00      	nop
    }
  }
}
 800976e:	3718      	adds	r7, #24
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8009782:	2b01      	cmp	r3, #1
 8009784:	d101      	bne.n	800978a <HAL_HCD_Start+0x16>
 8009786:	2302      	movs	r3, #2
 8009788:	e013      	b.n	80097b2 <HAL_HCD_Start+0x3e>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	2101      	movs	r1, #1
 8009798:	4618      	mov	r0, r3
 800979a:	f004 f968 	bl	800da6e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4618      	mov	r0, r3
 80097a4:	f003 fe60 	bl	800d468 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3708      	adds	r7, #8
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_HCD_Stop+0x16>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e00d      	b.n	80097ec <HAL_HCD_Stop+0x32>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	4618      	mov	r0, r3
 80097de:	f004 febb 	bl	800e558 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80097ea:	2300      	movs	r3, #0
}
 80097ec:	4618      	mov	r0, r3
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4618      	mov	r0, r3
 8009802:	f004 f90a 	bl	800da1a <USB_ResetPort>
 8009806:	4603      	mov	r3, r0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8009810:	b480      	push	{r7}
 8009812:	b083      	sub	sp, #12
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800981c:	78fa      	ldrb	r2, [r7, #3]
 800981e:	6879      	ldr	r1, [r7, #4]
 8009820:	4613      	mov	r3, r2
 8009822:	011b      	lsls	r3, r3, #4
 8009824:	1a9b      	subs	r3, r3, r2
 8009826:	009b      	lsls	r3, r3, #2
 8009828:	440b      	add	r3, r1
 800982a:	334c      	adds	r3, #76	@ 0x4c
 800982c:	781b      	ldrb	r3, [r3, #0]
}
 800982e:	4618      	mov	r0, r3
 8009830:	370c      	adds	r7, #12
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr

0800983a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800983a:	b480      	push	{r7}
 800983c:	b083      	sub	sp, #12
 800983e:	af00      	add	r7, sp, #0
 8009840:	6078      	str	r0, [r7, #4]
 8009842:	460b      	mov	r3, r1
 8009844:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8009846:	78fa      	ldrb	r2, [r7, #3]
 8009848:	6879      	ldr	r1, [r7, #4]
 800984a:	4613      	mov	r3, r2
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	1a9b      	subs	r3, r3, r2
 8009850:	009b      	lsls	r3, r3, #2
 8009852:	440b      	add	r3, r1
 8009854:	3338      	adds	r3, #56	@ 0x38
 8009856:	681b      	ldr	r3, [r3, #0]
}
 8009858:	4618      	mov	r0, r3
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4618      	mov	r0, r3
 8009872:	f004 f94c 	bl	800db0e <USB_GetCurrentFrame>
 8009876:	4603      	mov	r3, r0
}
 8009878:	4618      	mov	r0, r3
 800987a:	3708      	adds	r7, #8
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}

08009880 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4618      	mov	r0, r3
 800988e:	f004 f927 	bl	800dae0 <USB_GetHostSpeed>
 8009892:	4603      	mov	r3, r0
}
 8009894:	4618      	mov	r0, r3
 8009896:	3708      	adds	r7, #8
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
 80098a4:	460b      	mov	r3, r1
 80098a6:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80098a8:	78fa      	ldrb	r2, [r7, #3]
 80098aa:	6879      	ldr	r1, [r7, #4]
 80098ac:	4613      	mov	r3, r2
 80098ae:	011b      	lsls	r3, r3, #4
 80098b0:	1a9b      	subs	r3, r3, r2
 80098b2:	009b      	lsls	r3, r3, #2
 80098b4:	440b      	add	r3, r1
 80098b6:	331a      	adds	r3, #26
 80098b8:	2200      	movs	r2, #0
 80098ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 80098bc:	78fa      	ldrb	r2, [r7, #3]
 80098be:	6879      	ldr	r1, [r7, #4]
 80098c0:	4613      	mov	r3, r2
 80098c2:	011b      	lsls	r3, r3, #4
 80098c4:	1a9b      	subs	r3, r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	440b      	add	r3, r1
 80098ca:	331b      	adds	r3, #27
 80098cc:	2200      	movs	r2, #0
 80098ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	3325      	adds	r3, #37	@ 0x25
 80098e0:	2200      	movs	r2, #0
 80098e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80098e4:	78fa      	ldrb	r2, [r7, #3]
 80098e6:	6879      	ldr	r1, [r7, #4]
 80098e8:	4613      	mov	r3, r2
 80098ea:	011b      	lsls	r3, r3, #4
 80098ec:	1a9b      	subs	r3, r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	3324      	adds	r3, #36	@ 0x24
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr

08009906 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8009906:	b580      	push	{r7, lr}
 8009908:	b086      	sub	sp, #24
 800990a:	af00      	add	r7, sp, #0
 800990c:	6078      	str	r0, [r7, #4]
 800990e:	460b      	mov	r3, r1
 8009910:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009918:	697b      	ldr	r3, [r7, #20]
 800991a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	78fa      	ldrb	r2, [r7, #3]
 8009922:	4611      	mov	r1, r2
 8009924:	4618      	mov	r0, r3
 8009926:	f003 ff16 	bl	800d756 <USB_ReadChInterrupts>
 800992a:	4603      	mov	r3, r0
 800992c:	f003 0304 	and.w	r3, r3, #4
 8009930:	2b04      	cmp	r3, #4
 8009932:	d11a      	bne.n	800996a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8009934:	78fb      	ldrb	r3, [r7, #3]
 8009936:	015a      	lsls	r2, r3, #5
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	4413      	add	r3, r2
 800993c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009940:	461a      	mov	r2, r3
 8009942:	2304      	movs	r3, #4
 8009944:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009946:	78fa      	ldrb	r2, [r7, #3]
 8009948:	6879      	ldr	r1, [r7, #4]
 800994a:	4613      	mov	r3, r2
 800994c:	011b      	lsls	r3, r3, #4
 800994e:	1a9b      	subs	r3, r3, r2
 8009950:	009b      	lsls	r3, r3, #2
 8009952:	440b      	add	r3, r1
 8009954:	334d      	adds	r3, #77	@ 0x4d
 8009956:	2207      	movs	r2, #7
 8009958:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	78fa      	ldrb	r2, [r7, #3]
 8009960:	4611      	mov	r1, r2
 8009962:	4618      	mov	r0, r3
 8009964:	f004 fc9b 	bl	800e29e <USB_HC_Halt>
 8009968:	e09e      	b.n	8009aa8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	78fa      	ldrb	r2, [r7, #3]
 8009970:	4611      	mov	r1, r2
 8009972:	4618      	mov	r0, r3
 8009974:	f003 feef 	bl	800d756 <USB_ReadChInterrupts>
 8009978:	4603      	mov	r3, r0
 800997a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800997e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009982:	d11b      	bne.n	80099bc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	015a      	lsls	r2, r3, #5
 8009988:	693b      	ldr	r3, [r7, #16]
 800998a:	4413      	add	r3, r2
 800998c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009990:	461a      	mov	r2, r3
 8009992:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009996:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8009998:	78fa      	ldrb	r2, [r7, #3]
 800999a:	6879      	ldr	r1, [r7, #4]
 800999c:	4613      	mov	r3, r2
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	1a9b      	subs	r3, r3, r2
 80099a2:	009b      	lsls	r3, r3, #2
 80099a4:	440b      	add	r3, r1
 80099a6:	334d      	adds	r3, #77	@ 0x4d
 80099a8:	2208      	movs	r2, #8
 80099aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	78fa      	ldrb	r2, [r7, #3]
 80099b2:	4611      	mov	r1, r2
 80099b4:	4618      	mov	r0, r3
 80099b6:	f004 fc72 	bl	800e29e <USB_HC_Halt>
 80099ba:	e075      	b.n	8009aa8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	78fa      	ldrb	r2, [r7, #3]
 80099c2:	4611      	mov	r1, r2
 80099c4:	4618      	mov	r0, r3
 80099c6:	f003 fec6 	bl	800d756 <USB_ReadChInterrupts>
 80099ca:	4603      	mov	r3, r0
 80099cc:	f003 0308 	and.w	r3, r3, #8
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	d11a      	bne.n	8009a0a <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80099d4:	78fb      	ldrb	r3, [r7, #3]
 80099d6:	015a      	lsls	r2, r3, #5
 80099d8:	693b      	ldr	r3, [r7, #16]
 80099da:	4413      	add	r3, r2
 80099dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099e0:	461a      	mov	r2, r3
 80099e2:	2308      	movs	r3, #8
 80099e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80099e6:	78fa      	ldrb	r2, [r7, #3]
 80099e8:	6879      	ldr	r1, [r7, #4]
 80099ea:	4613      	mov	r3, r2
 80099ec:	011b      	lsls	r3, r3, #4
 80099ee:	1a9b      	subs	r3, r3, r2
 80099f0:	009b      	lsls	r3, r3, #2
 80099f2:	440b      	add	r3, r1
 80099f4:	334d      	adds	r3, #77	@ 0x4d
 80099f6:	2206      	movs	r2, #6
 80099f8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	78fa      	ldrb	r2, [r7, #3]
 8009a00:	4611      	mov	r1, r2
 8009a02:	4618      	mov	r0, r3
 8009a04:	f004 fc4b 	bl	800e29e <USB_HC_Halt>
 8009a08:	e04e      	b.n	8009aa8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	78fa      	ldrb	r2, [r7, #3]
 8009a10:	4611      	mov	r1, r2
 8009a12:	4618      	mov	r0, r3
 8009a14:	f003 fe9f 	bl	800d756 <USB_ReadChInterrupts>
 8009a18:	4603      	mov	r3, r0
 8009a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009a1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009a22:	d11b      	bne.n	8009a5c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009a24:	78fb      	ldrb	r3, [r7, #3]
 8009a26:	015a      	lsls	r2, r3, #5
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	4413      	add	r3, r2
 8009a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a30:	461a      	mov	r2, r3
 8009a32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a36:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009a38:	78fa      	ldrb	r2, [r7, #3]
 8009a3a:	6879      	ldr	r1, [r7, #4]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	011b      	lsls	r3, r3, #4
 8009a40:	1a9b      	subs	r3, r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	440b      	add	r3, r1
 8009a46:	334d      	adds	r3, #77	@ 0x4d
 8009a48:	2209      	movs	r2, #9
 8009a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	78fa      	ldrb	r2, [r7, #3]
 8009a52:	4611      	mov	r1, r2
 8009a54:	4618      	mov	r0, r3
 8009a56:	f004 fc22 	bl	800e29e <USB_HC_Halt>
 8009a5a:	e025      	b.n	8009aa8 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	78fa      	ldrb	r2, [r7, #3]
 8009a62:	4611      	mov	r1, r2
 8009a64:	4618      	mov	r0, r3
 8009a66:	f003 fe76 	bl	800d756 <USB_ReadChInterrupts>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a70:	2b80      	cmp	r3, #128	@ 0x80
 8009a72:	d119      	bne.n	8009aa8 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009a74:	78fb      	ldrb	r3, [r7, #3]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	693b      	ldr	r3, [r7, #16]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a80:	461a      	mov	r2, r3
 8009a82:	2380      	movs	r3, #128	@ 0x80
 8009a84:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009a86:	78fa      	ldrb	r2, [r7, #3]
 8009a88:	6879      	ldr	r1, [r7, #4]
 8009a8a:	4613      	mov	r3, r2
 8009a8c:	011b      	lsls	r3, r3, #4
 8009a8e:	1a9b      	subs	r3, r3, r2
 8009a90:	009b      	lsls	r3, r3, #2
 8009a92:	440b      	add	r3, r1
 8009a94:	334d      	adds	r3, #77	@ 0x4d
 8009a96:	2207      	movs	r2, #7
 8009a98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	78fa      	ldrb	r2, [r7, #3]
 8009aa0:	4611      	mov	r1, r2
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f004 fbfb 	bl	800e29e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	78fa      	ldrb	r2, [r7, #3]
 8009aae:	4611      	mov	r1, r2
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	f003 fe50 	bl	800d756 <USB_ReadChInterrupts>
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009abc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009ac0:	d112      	bne.n	8009ae8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	78fa      	ldrb	r2, [r7, #3]
 8009ac8:	4611      	mov	r1, r2
 8009aca:	4618      	mov	r0, r3
 8009acc:	f004 fbe7 	bl	800e29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8009ad0:	78fb      	ldrb	r3, [r7, #3]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009adc:	461a      	mov	r2, r3
 8009ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ae2:	6093      	str	r3, [r2, #8]
 8009ae4:	f000 bd75 	b.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	78fa      	ldrb	r2, [r7, #3]
 8009aee:	4611      	mov	r1, r2
 8009af0:	4618      	mov	r0, r3
 8009af2:	f003 fe30 	bl	800d756 <USB_ReadChInterrupts>
 8009af6:	4603      	mov	r3, r0
 8009af8:	f003 0301 	and.w	r3, r3, #1
 8009afc:	2b01      	cmp	r3, #1
 8009afe:	f040 8128 	bne.w	8009d52 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009b02:	78fb      	ldrb	r3, [r7, #3]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	693b      	ldr	r3, [r7, #16]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b0e:	461a      	mov	r2, r3
 8009b10:	2320      	movs	r3, #32
 8009b12:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8009b14:	78fa      	ldrb	r2, [r7, #3]
 8009b16:	6879      	ldr	r1, [r7, #4]
 8009b18:	4613      	mov	r3, r2
 8009b1a:	011b      	lsls	r3, r3, #4
 8009b1c:	1a9b      	subs	r3, r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	331b      	adds	r3, #27
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d119      	bne.n	8009b5e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009b2a:	78fa      	ldrb	r2, [r7, #3]
 8009b2c:	6879      	ldr	r1, [r7, #4]
 8009b2e:	4613      	mov	r3, r2
 8009b30:	011b      	lsls	r3, r3, #4
 8009b32:	1a9b      	subs	r3, r3, r2
 8009b34:	009b      	lsls	r3, r3, #2
 8009b36:	440b      	add	r3, r1
 8009b38:	331b      	adds	r3, #27
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009b3e:	78fb      	ldrb	r3, [r7, #3]
 8009b40:	015a      	lsls	r2, r3, #5
 8009b42:	693b      	ldr	r3, [r7, #16]
 8009b44:	4413      	add	r3, r2
 8009b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	78fa      	ldrb	r2, [r7, #3]
 8009b4e:	0151      	lsls	r1, r2, #5
 8009b50:	693a      	ldr	r2, [r7, #16]
 8009b52:	440a      	add	r2, r1
 8009b54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009b58:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b5c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	799b      	ldrb	r3, [r3, #6]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d01b      	beq.n	8009b9e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8009b66:	78fa      	ldrb	r2, [r7, #3]
 8009b68:	6879      	ldr	r1, [r7, #4]
 8009b6a:	4613      	mov	r3, r2
 8009b6c:	011b      	lsls	r3, r3, #4
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	440b      	add	r3, r1
 8009b74:	3330      	adds	r3, #48	@ 0x30
 8009b76:	6819      	ldr	r1, [r3, #0]
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b8a:	78fa      	ldrb	r2, [r7, #3]
 8009b8c:	1ac9      	subs	r1, r1, r3
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	4613      	mov	r3, r2
 8009b92:	011b      	lsls	r3, r3, #4
 8009b94:	1a9b      	subs	r3, r3, r2
 8009b96:	009b      	lsls	r3, r3, #2
 8009b98:	4403      	add	r3, r0
 8009b9a:	3338      	adds	r3, #56	@ 0x38
 8009b9c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8009b9e:	78fa      	ldrb	r2, [r7, #3]
 8009ba0:	6879      	ldr	r1, [r7, #4]
 8009ba2:	4613      	mov	r3, r2
 8009ba4:	011b      	lsls	r3, r3, #4
 8009ba6:	1a9b      	subs	r3, r3, r2
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	440b      	add	r3, r1
 8009bac:	334d      	adds	r3, #77	@ 0x4d
 8009bae:	2201      	movs	r2, #1
 8009bb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8009bb2:	78fa      	ldrb	r2, [r7, #3]
 8009bb4:	6879      	ldr	r1, [r7, #4]
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	011b      	lsls	r3, r3, #4
 8009bba:	1a9b      	subs	r3, r3, r2
 8009bbc:	009b      	lsls	r3, r3, #2
 8009bbe:	440b      	add	r3, r1
 8009bc0:	3344      	adds	r3, #68	@ 0x44
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009bc6:	78fb      	ldrb	r3, [r7, #3]
 8009bc8:	015a      	lsls	r2, r3, #5
 8009bca:	693b      	ldr	r3, [r7, #16]
 8009bcc:	4413      	add	r3, r2
 8009bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bd2:	461a      	mov	r2, r3
 8009bd4:	2301      	movs	r3, #1
 8009bd6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009bd8:	78fa      	ldrb	r2, [r7, #3]
 8009bda:	6879      	ldr	r1, [r7, #4]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	011b      	lsls	r3, r3, #4
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	009b      	lsls	r3, r3, #2
 8009be4:	440b      	add	r3, r1
 8009be6:	3326      	adds	r3, #38	@ 0x26
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00a      	beq.n	8009c04 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009bee:	78fa      	ldrb	r2, [r7, #3]
 8009bf0:	6879      	ldr	r1, [r7, #4]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	011b      	lsls	r3, r3, #4
 8009bf6:	1a9b      	subs	r3, r3, r2
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	440b      	add	r3, r1
 8009bfc:	3326      	adds	r3, #38	@ 0x26
 8009bfe:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d110      	bne.n	8009c26 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	78fa      	ldrb	r2, [r7, #3]
 8009c0a:	4611      	mov	r1, r2
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f004 fb46 	bl	800e29e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009c12:	78fb      	ldrb	r3, [r7, #3]
 8009c14:	015a      	lsls	r2, r3, #5
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	4413      	add	r3, r2
 8009c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c1e:	461a      	mov	r2, r3
 8009c20:	2310      	movs	r3, #16
 8009c22:	6093      	str	r3, [r2, #8]
 8009c24:	e03d      	b.n	8009ca2 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009c26:	78fa      	ldrb	r2, [r7, #3]
 8009c28:	6879      	ldr	r1, [r7, #4]
 8009c2a:	4613      	mov	r3, r2
 8009c2c:	011b      	lsls	r3, r3, #4
 8009c2e:	1a9b      	subs	r3, r3, r2
 8009c30:	009b      	lsls	r3, r3, #2
 8009c32:	440b      	add	r3, r1
 8009c34:	3326      	adds	r3, #38	@ 0x26
 8009c36:	781b      	ldrb	r3, [r3, #0]
 8009c38:	2b03      	cmp	r3, #3
 8009c3a:	d00a      	beq.n	8009c52 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8009c3c:	78fa      	ldrb	r2, [r7, #3]
 8009c3e:	6879      	ldr	r1, [r7, #4]
 8009c40:	4613      	mov	r3, r2
 8009c42:	011b      	lsls	r3, r3, #4
 8009c44:	1a9b      	subs	r3, r3, r2
 8009c46:	009b      	lsls	r3, r3, #2
 8009c48:	440b      	add	r3, r1
 8009c4a:	3326      	adds	r3, #38	@ 0x26
 8009c4c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d127      	bne.n	8009ca2 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009c52:	78fb      	ldrb	r3, [r7, #3]
 8009c54:	015a      	lsls	r2, r3, #5
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	4413      	add	r3, r2
 8009c5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	78fa      	ldrb	r2, [r7, #3]
 8009c62:	0151      	lsls	r1, r2, #5
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	440a      	add	r2, r1
 8009c68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009c6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c70:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009c72:	78fa      	ldrb	r2, [r7, #3]
 8009c74:	6879      	ldr	r1, [r7, #4]
 8009c76:	4613      	mov	r3, r2
 8009c78:	011b      	lsls	r3, r3, #4
 8009c7a:	1a9b      	subs	r3, r3, r2
 8009c7c:	009b      	lsls	r3, r3, #2
 8009c7e:	440b      	add	r3, r1
 8009c80:	334c      	adds	r3, #76	@ 0x4c
 8009c82:	2201      	movs	r2, #1
 8009c84:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009c86:	78fa      	ldrb	r2, [r7, #3]
 8009c88:	6879      	ldr	r1, [r7, #4]
 8009c8a:	4613      	mov	r3, r2
 8009c8c:	011b      	lsls	r3, r3, #4
 8009c8e:	1a9b      	subs	r3, r3, r2
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	440b      	add	r3, r1
 8009c94:	334c      	adds	r3, #76	@ 0x4c
 8009c96:	781a      	ldrb	r2, [r3, #0]
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	4619      	mov	r1, r3
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f006 fe57 	bl	8010950 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	799b      	ldrb	r3, [r3, #6]
 8009ca6:	2b01      	cmp	r3, #1
 8009ca8:	d13b      	bne.n	8009d22 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8009caa:	78fa      	ldrb	r2, [r7, #3]
 8009cac:	6879      	ldr	r1, [r7, #4]
 8009cae:	4613      	mov	r3, r2
 8009cb0:	011b      	lsls	r3, r3, #4
 8009cb2:	1a9b      	subs	r3, r3, r2
 8009cb4:	009b      	lsls	r3, r3, #2
 8009cb6:	440b      	add	r3, r1
 8009cb8:	3338      	adds	r3, #56	@ 0x38
 8009cba:	6819      	ldr	r1, [r3, #0]
 8009cbc:	78fa      	ldrb	r2, [r7, #3]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	011b      	lsls	r3, r3, #4
 8009cc4:	1a9b      	subs	r3, r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4403      	add	r3, r0
 8009cca:	3328      	adds	r3, #40	@ 0x28
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	440b      	add	r3, r1
 8009cd0:	1e59      	subs	r1, r3, #1
 8009cd2:	78fa      	ldrb	r2, [r7, #3]
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	011b      	lsls	r3, r3, #4
 8009cda:	1a9b      	subs	r3, r3, r2
 8009cdc:	009b      	lsls	r3, r3, #2
 8009cde:	4403      	add	r3, r0
 8009ce0:	3328      	adds	r3, #40	@ 0x28
 8009ce2:	881b      	ldrh	r3, [r3, #0]
 8009ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	f000 8470 	beq.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8009cf2:	78fa      	ldrb	r2, [r7, #3]
 8009cf4:	6879      	ldr	r1, [r7, #4]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	011b      	lsls	r3, r3, #4
 8009cfa:	1a9b      	subs	r3, r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	440b      	add	r3, r1
 8009d00:	333c      	adds	r3, #60	@ 0x3c
 8009d02:	781b      	ldrb	r3, [r3, #0]
 8009d04:	78fa      	ldrb	r2, [r7, #3]
 8009d06:	f083 0301 	eor.w	r3, r3, #1
 8009d0a:	b2d8      	uxtb	r0, r3
 8009d0c:	6879      	ldr	r1, [r7, #4]
 8009d0e:	4613      	mov	r3, r2
 8009d10:	011b      	lsls	r3, r3, #4
 8009d12:	1a9b      	subs	r3, r3, r2
 8009d14:	009b      	lsls	r3, r3, #2
 8009d16:	440b      	add	r3, r1
 8009d18:	333c      	adds	r3, #60	@ 0x3c
 8009d1a:	4602      	mov	r2, r0
 8009d1c:	701a      	strb	r2, [r3, #0]
 8009d1e:	f000 bc58 	b.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8009d22:	78fa      	ldrb	r2, [r7, #3]
 8009d24:	6879      	ldr	r1, [r7, #4]
 8009d26:	4613      	mov	r3, r2
 8009d28:	011b      	lsls	r3, r3, #4
 8009d2a:	1a9b      	subs	r3, r3, r2
 8009d2c:	009b      	lsls	r3, r3, #2
 8009d2e:	440b      	add	r3, r1
 8009d30:	333c      	adds	r3, #60	@ 0x3c
 8009d32:	781b      	ldrb	r3, [r3, #0]
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	f083 0301 	eor.w	r3, r3, #1
 8009d3a:	b2d8      	uxtb	r0, r3
 8009d3c:	6879      	ldr	r1, [r7, #4]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	011b      	lsls	r3, r3, #4
 8009d42:	1a9b      	subs	r3, r3, r2
 8009d44:	009b      	lsls	r3, r3, #2
 8009d46:	440b      	add	r3, r1
 8009d48:	333c      	adds	r3, #60	@ 0x3c
 8009d4a:	4602      	mov	r2, r0
 8009d4c:	701a      	strb	r2, [r3, #0]
 8009d4e:	f000 bc40 	b.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	78fa      	ldrb	r2, [r7, #3]
 8009d58:	4611      	mov	r1, r2
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	f003 fcfb 	bl	800d756 <USB_ReadChInterrupts>
 8009d60:	4603      	mov	r3, r0
 8009d62:	f003 0320 	and.w	r3, r3, #32
 8009d66:	2b20      	cmp	r3, #32
 8009d68:	d131      	bne.n	8009dce <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009d6a:	78fb      	ldrb	r3, [r7, #3]
 8009d6c:	015a      	lsls	r2, r3, #5
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	4413      	add	r3, r2
 8009d72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d76:	461a      	mov	r2, r3
 8009d78:	2320      	movs	r3, #32
 8009d7a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8009d7c:	78fa      	ldrb	r2, [r7, #3]
 8009d7e:	6879      	ldr	r1, [r7, #4]
 8009d80:	4613      	mov	r3, r2
 8009d82:	011b      	lsls	r3, r3, #4
 8009d84:	1a9b      	subs	r3, r3, r2
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	331a      	adds	r3, #26
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	2b01      	cmp	r3, #1
 8009d90:	f040 841f 	bne.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8009d94:	78fa      	ldrb	r2, [r7, #3]
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	4613      	mov	r3, r2
 8009d9a:	011b      	lsls	r3, r3, #4
 8009d9c:	1a9b      	subs	r3, r3, r2
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	440b      	add	r3, r1
 8009da2:	331b      	adds	r3, #27
 8009da4:	2201      	movs	r2, #1
 8009da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8009da8:	78fa      	ldrb	r2, [r7, #3]
 8009daa:	6879      	ldr	r1, [r7, #4]
 8009dac:	4613      	mov	r3, r2
 8009dae:	011b      	lsls	r3, r3, #4
 8009db0:	1a9b      	subs	r3, r3, r2
 8009db2:	009b      	lsls	r3, r3, #2
 8009db4:	440b      	add	r3, r1
 8009db6:	334d      	adds	r3, #77	@ 0x4d
 8009db8:	2203      	movs	r2, #3
 8009dba:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	78fa      	ldrb	r2, [r7, #3]
 8009dc2:	4611      	mov	r1, r2
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f004 fa6a 	bl	800e29e <USB_HC_Halt>
 8009dca:	f000 bc02 	b.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	78fa      	ldrb	r2, [r7, #3]
 8009dd4:	4611      	mov	r1, r2
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	f003 fcbd 	bl	800d756 <USB_ReadChInterrupts>
 8009ddc:	4603      	mov	r3, r0
 8009dde:	f003 0302 	and.w	r3, r3, #2
 8009de2:	2b02      	cmp	r3, #2
 8009de4:	f040 8305 	bne.w	800a3f2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009de8:	78fb      	ldrb	r3, [r7, #3]
 8009dea:	015a      	lsls	r2, r3, #5
 8009dec:	693b      	ldr	r3, [r7, #16]
 8009dee:	4413      	add	r3, r2
 8009df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009df4:	461a      	mov	r2, r3
 8009df6:	2302      	movs	r3, #2
 8009df8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009dfa:	78fa      	ldrb	r2, [r7, #3]
 8009dfc:	6879      	ldr	r1, [r7, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	1a9b      	subs	r3, r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	440b      	add	r3, r1
 8009e08:	334d      	adds	r3, #77	@ 0x4d
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	2b01      	cmp	r3, #1
 8009e0e:	d114      	bne.n	8009e3a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009e10:	78fa      	ldrb	r2, [r7, #3]
 8009e12:	6879      	ldr	r1, [r7, #4]
 8009e14:	4613      	mov	r3, r2
 8009e16:	011b      	lsls	r3, r3, #4
 8009e18:	1a9b      	subs	r3, r3, r2
 8009e1a:	009b      	lsls	r3, r3, #2
 8009e1c:	440b      	add	r3, r1
 8009e1e:	334d      	adds	r3, #77	@ 0x4d
 8009e20:	2202      	movs	r2, #2
 8009e22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009e24:	78fa      	ldrb	r2, [r7, #3]
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	1a9b      	subs	r3, r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	334c      	adds	r3, #76	@ 0x4c
 8009e34:	2201      	movs	r2, #1
 8009e36:	701a      	strb	r2, [r3, #0]
 8009e38:	e2cc      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009e3a:	78fa      	ldrb	r2, [r7, #3]
 8009e3c:	6879      	ldr	r1, [r7, #4]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	011b      	lsls	r3, r3, #4
 8009e42:	1a9b      	subs	r3, r3, r2
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	440b      	add	r3, r1
 8009e48:	334d      	adds	r3, #77	@ 0x4d
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	2b06      	cmp	r3, #6
 8009e4e:	d114      	bne.n	8009e7a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009e50:	78fa      	ldrb	r2, [r7, #3]
 8009e52:	6879      	ldr	r1, [r7, #4]
 8009e54:	4613      	mov	r3, r2
 8009e56:	011b      	lsls	r3, r3, #4
 8009e58:	1a9b      	subs	r3, r3, r2
 8009e5a:	009b      	lsls	r3, r3, #2
 8009e5c:	440b      	add	r3, r1
 8009e5e:	334d      	adds	r3, #77	@ 0x4d
 8009e60:	2202      	movs	r2, #2
 8009e62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8009e64:	78fa      	ldrb	r2, [r7, #3]
 8009e66:	6879      	ldr	r1, [r7, #4]
 8009e68:	4613      	mov	r3, r2
 8009e6a:	011b      	lsls	r3, r3, #4
 8009e6c:	1a9b      	subs	r3, r3, r2
 8009e6e:	009b      	lsls	r3, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	334c      	adds	r3, #76	@ 0x4c
 8009e74:	2205      	movs	r2, #5
 8009e76:	701a      	strb	r2, [r3, #0]
 8009e78:	e2ac      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	6879      	ldr	r1, [r7, #4]
 8009e7e:	4613      	mov	r3, r2
 8009e80:	011b      	lsls	r3, r3, #4
 8009e82:	1a9b      	subs	r3, r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	440b      	add	r3, r1
 8009e88:	334d      	adds	r3, #77	@ 0x4d
 8009e8a:	781b      	ldrb	r3, [r3, #0]
 8009e8c:	2b07      	cmp	r3, #7
 8009e8e:	d00b      	beq.n	8009ea8 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	6879      	ldr	r1, [r7, #4]
 8009e94:	4613      	mov	r3, r2
 8009e96:	011b      	lsls	r3, r3, #4
 8009e98:	1a9b      	subs	r3, r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	440b      	add	r3, r1
 8009e9e:	334d      	adds	r3, #77	@ 0x4d
 8009ea0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009ea2:	2b09      	cmp	r3, #9
 8009ea4:	f040 80a6 	bne.w	8009ff4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009ea8:	78fa      	ldrb	r2, [r7, #3]
 8009eaa:	6879      	ldr	r1, [r7, #4]
 8009eac:	4613      	mov	r3, r2
 8009eae:	011b      	lsls	r3, r3, #4
 8009eb0:	1a9b      	subs	r3, r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	334d      	adds	r3, #77	@ 0x4d
 8009eb8:	2202      	movs	r2, #2
 8009eba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009ebc:	78fa      	ldrb	r2, [r7, #3]
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4613      	mov	r3, r2
 8009ec2:	011b      	lsls	r3, r3, #4
 8009ec4:	1a9b      	subs	r3, r3, r2
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	3344      	adds	r3, #68	@ 0x44
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	4613      	mov	r3, r2
 8009ed4:	011b      	lsls	r3, r3, #4
 8009ed6:	1a9b      	subs	r3, r3, r2
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4403      	add	r3, r0
 8009edc:	3344      	adds	r3, #68	@ 0x44
 8009ede:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009ee0:	78fa      	ldrb	r2, [r7, #3]
 8009ee2:	6879      	ldr	r1, [r7, #4]
 8009ee4:	4613      	mov	r3, r2
 8009ee6:	011b      	lsls	r3, r3, #4
 8009ee8:	1a9b      	subs	r3, r3, r2
 8009eea:	009b      	lsls	r3, r3, #2
 8009eec:	440b      	add	r3, r1
 8009eee:	3344      	adds	r3, #68	@ 0x44
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2b02      	cmp	r3, #2
 8009ef4:	d943      	bls.n	8009f7e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009ef6:	78fa      	ldrb	r2, [r7, #3]
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	4613      	mov	r3, r2
 8009efc:	011b      	lsls	r3, r3, #4
 8009efe:	1a9b      	subs	r3, r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	3344      	adds	r3, #68	@ 0x44
 8009f06:	2200      	movs	r2, #0
 8009f08:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8009f0a:	78fa      	ldrb	r2, [r7, #3]
 8009f0c:	6879      	ldr	r1, [r7, #4]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	011b      	lsls	r3, r3, #4
 8009f12:	1a9b      	subs	r3, r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	331a      	adds	r3, #26
 8009f1a:	781b      	ldrb	r3, [r3, #0]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d123      	bne.n	8009f68 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8009f20:	78fa      	ldrb	r2, [r7, #3]
 8009f22:	6879      	ldr	r1, [r7, #4]
 8009f24:	4613      	mov	r3, r2
 8009f26:	011b      	lsls	r3, r3, #4
 8009f28:	1a9b      	subs	r3, r3, r2
 8009f2a:	009b      	lsls	r3, r3, #2
 8009f2c:	440b      	add	r3, r1
 8009f2e:	331b      	adds	r3, #27
 8009f30:	2200      	movs	r2, #0
 8009f32:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8009f34:	78fa      	ldrb	r2, [r7, #3]
 8009f36:	6879      	ldr	r1, [r7, #4]
 8009f38:	4613      	mov	r3, r2
 8009f3a:	011b      	lsls	r3, r3, #4
 8009f3c:	1a9b      	subs	r3, r3, r2
 8009f3e:	009b      	lsls	r3, r3, #2
 8009f40:	440b      	add	r3, r1
 8009f42:	331c      	adds	r3, #28
 8009f44:	2200      	movs	r2, #0
 8009f46:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009f48:	78fb      	ldrb	r3, [r7, #3]
 8009f4a:	015a      	lsls	r2, r3, #5
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	4413      	add	r3, r2
 8009f50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	78fa      	ldrb	r2, [r7, #3]
 8009f58:	0151      	lsls	r1, r2, #5
 8009f5a:	693a      	ldr	r2, [r7, #16]
 8009f5c:	440a      	add	r2, r1
 8009f5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009f62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f66:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009f68:	78fa      	ldrb	r2, [r7, #3]
 8009f6a:	6879      	ldr	r1, [r7, #4]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	011b      	lsls	r3, r3, #4
 8009f70:	1a9b      	subs	r3, r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	440b      	add	r3, r1
 8009f76:	334c      	adds	r3, #76	@ 0x4c
 8009f78:	2204      	movs	r2, #4
 8009f7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009f7c:	e229      	b.n	800a3d2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f7e:	78fa      	ldrb	r2, [r7, #3]
 8009f80:	6879      	ldr	r1, [r7, #4]
 8009f82:	4613      	mov	r3, r2
 8009f84:	011b      	lsls	r3, r3, #4
 8009f86:	1a9b      	subs	r3, r3, r2
 8009f88:	009b      	lsls	r3, r3, #2
 8009f8a:	440b      	add	r3, r1
 8009f8c:	334c      	adds	r3, #76	@ 0x4c
 8009f8e:	2202      	movs	r2, #2
 8009f90:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009f92:	78fa      	ldrb	r2, [r7, #3]
 8009f94:	6879      	ldr	r1, [r7, #4]
 8009f96:	4613      	mov	r3, r2
 8009f98:	011b      	lsls	r3, r3, #4
 8009f9a:	1a9b      	subs	r3, r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	440b      	add	r3, r1
 8009fa0:	3326      	adds	r3, #38	@ 0x26
 8009fa2:	781b      	ldrb	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d00b      	beq.n	8009fc0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009fa8:	78fa      	ldrb	r2, [r7, #3]
 8009faa:	6879      	ldr	r1, [r7, #4]
 8009fac:	4613      	mov	r3, r2
 8009fae:	011b      	lsls	r3, r3, #4
 8009fb0:	1a9b      	subs	r3, r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	440b      	add	r3, r1
 8009fb6:	3326      	adds	r3, #38	@ 0x26
 8009fb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009fba:	2b02      	cmp	r3, #2
 8009fbc:	f040 8209 	bne.w	800a3d2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009fc0:	78fb      	ldrb	r3, [r7, #3]
 8009fc2:	015a      	lsls	r2, r3, #5
 8009fc4:	693b      	ldr	r3, [r7, #16]
 8009fc6:	4413      	add	r3, r2
 8009fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009fd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009fde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009fe0:	78fb      	ldrb	r3, [r7, #3]
 8009fe2:	015a      	lsls	r2, r3, #5
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4413      	add	r3, r2
 8009fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fec:	461a      	mov	r2, r3
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009ff2:	e1ee      	b.n	800a3d2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009ff4:	78fa      	ldrb	r2, [r7, #3]
 8009ff6:	6879      	ldr	r1, [r7, #4]
 8009ff8:	4613      	mov	r3, r2
 8009ffa:	011b      	lsls	r3, r3, #4
 8009ffc:	1a9b      	subs	r3, r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	440b      	add	r3, r1
 800a002:	334d      	adds	r3, #77	@ 0x4d
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	2b05      	cmp	r3, #5
 800a008:	f040 80c8 	bne.w	800a19c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a00c:	78fa      	ldrb	r2, [r7, #3]
 800a00e:	6879      	ldr	r1, [r7, #4]
 800a010:	4613      	mov	r3, r2
 800a012:	011b      	lsls	r3, r3, #4
 800a014:	1a9b      	subs	r3, r3, r2
 800a016:	009b      	lsls	r3, r3, #2
 800a018:	440b      	add	r3, r1
 800a01a:	334d      	adds	r3, #77	@ 0x4d
 800a01c:	2202      	movs	r2, #2
 800a01e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	6879      	ldr	r1, [r7, #4]
 800a024:	4613      	mov	r3, r2
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	1a9b      	subs	r3, r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	440b      	add	r3, r1
 800a02e:	331b      	adds	r3, #27
 800a030:	781b      	ldrb	r3, [r3, #0]
 800a032:	2b01      	cmp	r3, #1
 800a034:	f040 81ce 	bne.w	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	1a9b      	subs	r3, r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	3326      	adds	r3, #38	@ 0x26
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d16b      	bne.n	800a126 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800a04e:	78fa      	ldrb	r2, [r7, #3]
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	3348      	adds	r3, #72	@ 0x48
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	1c59      	adds	r1, r3, #1
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	4613      	mov	r3, r2
 800a066:	011b      	lsls	r3, r3, #4
 800a068:	1a9b      	subs	r3, r3, r2
 800a06a:	009b      	lsls	r3, r3, #2
 800a06c:	4403      	add	r3, r0
 800a06e:	3348      	adds	r3, #72	@ 0x48
 800a070:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800a072:	78fa      	ldrb	r2, [r7, #3]
 800a074:	6879      	ldr	r1, [r7, #4]
 800a076:	4613      	mov	r3, r2
 800a078:	011b      	lsls	r3, r3, #4
 800a07a:	1a9b      	subs	r3, r3, r2
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	440b      	add	r3, r1
 800a080:	3348      	adds	r3, #72	@ 0x48
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	2b02      	cmp	r3, #2
 800a086:	d943      	bls.n	800a110 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800a088:	78fa      	ldrb	r2, [r7, #3]
 800a08a:	6879      	ldr	r1, [r7, #4]
 800a08c:	4613      	mov	r3, r2
 800a08e:	011b      	lsls	r3, r3, #4
 800a090:	1a9b      	subs	r3, r3, r2
 800a092:	009b      	lsls	r3, r3, #2
 800a094:	440b      	add	r3, r1
 800a096:	3348      	adds	r3, #72	@ 0x48
 800a098:	2200      	movs	r2, #0
 800a09a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	331b      	adds	r3, #27
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800a0b0:	78fa      	ldrb	r2, [r7, #3]
 800a0b2:	6879      	ldr	r1, [r7, #4]
 800a0b4:	4613      	mov	r3, r2
 800a0b6:	011b      	lsls	r3, r3, #4
 800a0b8:	1a9b      	subs	r3, r3, r2
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	440b      	add	r3, r1
 800a0be:	3344      	adds	r3, #68	@ 0x44
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	2b02      	cmp	r3, #2
 800a0c4:	d809      	bhi.n	800a0da <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	6879      	ldr	r1, [r7, #4]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	1a9b      	subs	r3, r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	440b      	add	r3, r1
 800a0d4:	331c      	adds	r3, #28
 800a0d6:	2201      	movs	r2, #1
 800a0d8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a0da:	78fb      	ldrb	r3, [r7, #3]
 800a0dc:	015a      	lsls	r2, r3, #5
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	4413      	add	r3, r2
 800a0e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	78fa      	ldrb	r2, [r7, #3]
 800a0ea:	0151      	lsls	r1, r2, #5
 800a0ec:	693a      	ldr	r2, [r7, #16]
 800a0ee:	440a      	add	r2, r1
 800a0f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a0f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a0f8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 800a0fa:	78fa      	ldrb	r2, [r7, #3]
 800a0fc:	6879      	ldr	r1, [r7, #4]
 800a0fe:	4613      	mov	r3, r2
 800a100:	011b      	lsls	r3, r3, #4
 800a102:	1a9b      	subs	r3, r3, r2
 800a104:	009b      	lsls	r3, r3, #2
 800a106:	440b      	add	r3, r1
 800a108:	334c      	adds	r3, #76	@ 0x4c
 800a10a:	2204      	movs	r2, #4
 800a10c:	701a      	strb	r2, [r3, #0]
 800a10e:	e014      	b.n	800a13a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a110:	78fa      	ldrb	r2, [r7, #3]
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	4613      	mov	r3, r2
 800a116:	011b      	lsls	r3, r3, #4
 800a118:	1a9b      	subs	r3, r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	440b      	add	r3, r1
 800a11e:	334c      	adds	r3, #76	@ 0x4c
 800a120:	2202      	movs	r2, #2
 800a122:	701a      	strb	r2, [r3, #0]
 800a124:	e009      	b.n	800a13a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a126:	78fa      	ldrb	r2, [r7, #3]
 800a128:	6879      	ldr	r1, [r7, #4]
 800a12a:	4613      	mov	r3, r2
 800a12c:	011b      	lsls	r3, r3, #4
 800a12e:	1a9b      	subs	r3, r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	440b      	add	r3, r1
 800a134:	334c      	adds	r3, #76	@ 0x4c
 800a136:	2202      	movs	r2, #2
 800a138:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a13a:	78fa      	ldrb	r2, [r7, #3]
 800a13c:	6879      	ldr	r1, [r7, #4]
 800a13e:	4613      	mov	r3, r2
 800a140:	011b      	lsls	r3, r3, #4
 800a142:	1a9b      	subs	r3, r3, r2
 800a144:	009b      	lsls	r3, r3, #2
 800a146:	440b      	add	r3, r1
 800a148:	3326      	adds	r3, #38	@ 0x26
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a150:	78fa      	ldrb	r2, [r7, #3]
 800a152:	6879      	ldr	r1, [r7, #4]
 800a154:	4613      	mov	r3, r2
 800a156:	011b      	lsls	r3, r3, #4
 800a158:	1a9b      	subs	r3, r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	440b      	add	r3, r1
 800a15e:	3326      	adds	r3, #38	@ 0x26
 800a160:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a162:	2b02      	cmp	r3, #2
 800a164:	f040 8136 	bne.w	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800a168:	78fb      	ldrb	r3, [r7, #3]
 800a16a:	015a      	lsls	r2, r3, #5
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	4413      	add	r3, r2
 800a170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a17e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a186:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800a188:	78fb      	ldrb	r3, [r7, #3]
 800a18a:	015a      	lsls	r2, r3, #5
 800a18c:	693b      	ldr	r3, [r7, #16]
 800a18e:	4413      	add	r3, r2
 800a190:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a194:	461a      	mov	r2, r3
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	6013      	str	r3, [r2, #0]
 800a19a:	e11b      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800a19c:	78fa      	ldrb	r2, [r7, #3]
 800a19e:	6879      	ldr	r1, [r7, #4]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	334d      	adds	r3, #77	@ 0x4d
 800a1ac:	781b      	ldrb	r3, [r3, #0]
 800a1ae:	2b03      	cmp	r3, #3
 800a1b0:	f040 8081 	bne.w	800a2b6 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a1b4:	78fa      	ldrb	r2, [r7, #3]
 800a1b6:	6879      	ldr	r1, [r7, #4]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	1a9b      	subs	r3, r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	334d      	adds	r3, #77	@ 0x4d
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800a1c8:	78fa      	ldrb	r2, [r7, #3]
 800a1ca:	6879      	ldr	r1, [r7, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	011b      	lsls	r3, r3, #4
 800a1d0:	1a9b      	subs	r3, r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	440b      	add	r3, r1
 800a1d6:	331b      	adds	r3, #27
 800a1d8:	781b      	ldrb	r3, [r3, #0]
 800a1da:	2b01      	cmp	r3, #1
 800a1dc:	f040 80fa 	bne.w	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a1e0:	78fa      	ldrb	r2, [r7, #3]
 800a1e2:	6879      	ldr	r1, [r7, #4]
 800a1e4:	4613      	mov	r3, r2
 800a1e6:	011b      	lsls	r3, r3, #4
 800a1e8:	1a9b      	subs	r3, r3, r2
 800a1ea:	009b      	lsls	r3, r3, #2
 800a1ec:	440b      	add	r3, r1
 800a1ee:	334c      	adds	r3, #76	@ 0x4c
 800a1f0:	2202      	movs	r2, #2
 800a1f2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a1f4:	78fb      	ldrb	r3, [r7, #3]
 800a1f6:	015a      	lsls	r2, r3, #5
 800a1f8:	693b      	ldr	r3, [r7, #16]
 800a1fa:	4413      	add	r3, r2
 800a1fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	78fa      	ldrb	r2, [r7, #3]
 800a204:	0151      	lsls	r1, r2, #5
 800a206:	693a      	ldr	r2, [r7, #16]
 800a208:	440a      	add	r2, r1
 800a20a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a20e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a212:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a214:	78fb      	ldrb	r3, [r7, #3]
 800a216:	015a      	lsls	r2, r3, #5
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	4413      	add	r3, r2
 800a21c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	78fa      	ldrb	r2, [r7, #3]
 800a224:	0151      	lsls	r1, r2, #5
 800a226:	693a      	ldr	r2, [r7, #16]
 800a228:	440a      	add	r2, r1
 800a22a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a22e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a232:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800a234:	78fb      	ldrb	r3, [r7, #3]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	693b      	ldr	r3, [r7, #16]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a240:	68db      	ldr	r3, [r3, #12]
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	0151      	lsls	r1, r2, #5
 800a246:	693a      	ldr	r2, [r7, #16]
 800a248:	440a      	add	r2, r1
 800a24a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a24e:	f023 0320 	bic.w	r3, r3, #32
 800a252:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a254:	78fa      	ldrb	r2, [r7, #3]
 800a256:	6879      	ldr	r1, [r7, #4]
 800a258:	4613      	mov	r3, r2
 800a25a:	011b      	lsls	r3, r3, #4
 800a25c:	1a9b      	subs	r3, r3, r2
 800a25e:	009b      	lsls	r3, r3, #2
 800a260:	440b      	add	r3, r1
 800a262:	3326      	adds	r3, #38	@ 0x26
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	2b00      	cmp	r3, #0
 800a268:	d00b      	beq.n	800a282 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a26a:	78fa      	ldrb	r2, [r7, #3]
 800a26c:	6879      	ldr	r1, [r7, #4]
 800a26e:	4613      	mov	r3, r2
 800a270:	011b      	lsls	r3, r3, #4
 800a272:	1a9b      	subs	r3, r3, r2
 800a274:	009b      	lsls	r3, r3, #2
 800a276:	440b      	add	r3, r1
 800a278:	3326      	adds	r3, #38	@ 0x26
 800a27a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	f040 80a9 	bne.w	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800a282:	78fb      	ldrb	r3, [r7, #3]
 800a284:	015a      	lsls	r2, r3, #5
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	4413      	add	r3, r2
 800a28a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a298:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a2a0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800a2a2:	78fb      	ldrb	r3, [r7, #3]
 800a2a4:	015a      	lsls	r2, r3, #5
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	4413      	add	r3, r2
 800a2aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2ae:	461a      	mov	r2, r3
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	6013      	str	r3, [r2, #0]
 800a2b4:	e08e      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800a2b6:	78fa      	ldrb	r2, [r7, #3]
 800a2b8:	6879      	ldr	r1, [r7, #4]
 800a2ba:	4613      	mov	r3, r2
 800a2bc:	011b      	lsls	r3, r3, #4
 800a2be:	1a9b      	subs	r3, r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	440b      	add	r3, r1
 800a2c4:	334d      	adds	r3, #77	@ 0x4d
 800a2c6:	781b      	ldrb	r3, [r3, #0]
 800a2c8:	2b04      	cmp	r3, #4
 800a2ca:	d143      	bne.n	800a354 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a2cc:	78fa      	ldrb	r2, [r7, #3]
 800a2ce:	6879      	ldr	r1, [r7, #4]
 800a2d0:	4613      	mov	r3, r2
 800a2d2:	011b      	lsls	r3, r3, #4
 800a2d4:	1a9b      	subs	r3, r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	440b      	add	r3, r1
 800a2da:	334d      	adds	r3, #77	@ 0x4d
 800a2dc:	2202      	movs	r2, #2
 800a2de:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a2e0:	78fa      	ldrb	r2, [r7, #3]
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	011b      	lsls	r3, r3, #4
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	440b      	add	r3, r1
 800a2ee:	334c      	adds	r3, #76	@ 0x4c
 800a2f0:	2202      	movs	r2, #2
 800a2f2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a2f4:	78fa      	ldrb	r2, [r7, #3]
 800a2f6:	6879      	ldr	r1, [r7, #4]
 800a2f8:	4613      	mov	r3, r2
 800a2fa:	011b      	lsls	r3, r3, #4
 800a2fc:	1a9b      	subs	r3, r3, r2
 800a2fe:	009b      	lsls	r3, r3, #2
 800a300:	440b      	add	r3, r1
 800a302:	3326      	adds	r3, #38	@ 0x26
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d00a      	beq.n	800a320 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a30a:	78fa      	ldrb	r2, [r7, #3]
 800a30c:	6879      	ldr	r1, [r7, #4]
 800a30e:	4613      	mov	r3, r2
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	1a9b      	subs	r3, r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	440b      	add	r3, r1
 800a318:	3326      	adds	r3, #38	@ 0x26
 800a31a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a31c:	2b02      	cmp	r3, #2
 800a31e:	d159      	bne.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a320:	78fb      	ldrb	r3, [r7, #3]
 800a322:	015a      	lsls	r2, r3, #5
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	4413      	add	r3, r2
 800a328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a336:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a33e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a340:	78fb      	ldrb	r3, [r7, #3]
 800a342:	015a      	lsls	r2, r3, #5
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	4413      	add	r3, r2
 800a348:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a34c:	461a      	mov	r2, r3
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6013      	str	r3, [r2, #0]
 800a352:	e03f      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	011b      	lsls	r3, r3, #4
 800a35c:	1a9b      	subs	r3, r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	440b      	add	r3, r1
 800a362:	334d      	adds	r3, #77	@ 0x4d
 800a364:	781b      	ldrb	r3, [r3, #0]
 800a366:	2b08      	cmp	r3, #8
 800a368:	d126      	bne.n	800a3b8 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a36a:	78fa      	ldrb	r2, [r7, #3]
 800a36c:	6879      	ldr	r1, [r7, #4]
 800a36e:	4613      	mov	r3, r2
 800a370:	011b      	lsls	r3, r3, #4
 800a372:	1a9b      	subs	r3, r3, r2
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	440b      	add	r3, r1
 800a378:	334d      	adds	r3, #77	@ 0x4d
 800a37a:	2202      	movs	r2, #2
 800a37c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a37e:	78fa      	ldrb	r2, [r7, #3]
 800a380:	6879      	ldr	r1, [r7, #4]
 800a382:	4613      	mov	r3, r2
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	1a9b      	subs	r3, r3, r2
 800a388:	009b      	lsls	r3, r3, #2
 800a38a:	440b      	add	r3, r1
 800a38c:	3344      	adds	r3, #68	@ 0x44
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	1c59      	adds	r1, r3, #1
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	4613      	mov	r3, r2
 800a396:	011b      	lsls	r3, r3, #4
 800a398:	1a9b      	subs	r3, r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4403      	add	r3, r0
 800a39e:	3344      	adds	r3, #68	@ 0x44
 800a3a0:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800a3a2:	78fa      	ldrb	r2, [r7, #3]
 800a3a4:	6879      	ldr	r1, [r7, #4]
 800a3a6:	4613      	mov	r3, r2
 800a3a8:	011b      	lsls	r3, r3, #4
 800a3aa:	1a9b      	subs	r3, r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	440b      	add	r3, r1
 800a3b0:	334c      	adds	r3, #76	@ 0x4c
 800a3b2:	2204      	movs	r2, #4
 800a3b4:	701a      	strb	r2, [r3, #0]
 800a3b6:	e00d      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800a3b8:	78fa      	ldrb	r2, [r7, #3]
 800a3ba:	6879      	ldr	r1, [r7, #4]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	011b      	lsls	r3, r3, #4
 800a3c0:	1a9b      	subs	r3, r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	440b      	add	r3, r1
 800a3c6:	334d      	adds	r3, #77	@ 0x4d
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b02      	cmp	r3, #2
 800a3cc:	f000 8100 	beq.w	800a5d0 <HCD_HC_IN_IRQHandler+0xcca>
 800a3d0:	e000      	b.n	800a3d4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a3d2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a3d4:	78fa      	ldrb	r2, [r7, #3]
 800a3d6:	6879      	ldr	r1, [r7, #4]
 800a3d8:	4613      	mov	r3, r2
 800a3da:	011b      	lsls	r3, r3, #4
 800a3dc:	1a9b      	subs	r3, r3, r2
 800a3de:	009b      	lsls	r3, r3, #2
 800a3e0:	440b      	add	r3, r1
 800a3e2:	334c      	adds	r3, #76	@ 0x4c
 800a3e4:	781a      	ldrb	r2, [r3, #0]
 800a3e6:	78fb      	ldrb	r3, [r7, #3]
 800a3e8:	4619      	mov	r1, r3
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f006 fab0 	bl	8010950 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a3f0:	e0ef      	b.n	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f003 f9ab 	bl	800d756 <USB_ReadChInterrupts>
 800a400:	4603      	mov	r3, r0
 800a402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a406:	2b40      	cmp	r3, #64	@ 0x40
 800a408:	d12f      	bne.n	800a46a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a40a:	78fb      	ldrb	r3, [r7, #3]
 800a40c:	015a      	lsls	r2, r3, #5
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	4413      	add	r3, r2
 800a412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a416:	461a      	mov	r2, r3
 800a418:	2340      	movs	r3, #64	@ 0x40
 800a41a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 800a41c:	78fa      	ldrb	r2, [r7, #3]
 800a41e:	6879      	ldr	r1, [r7, #4]
 800a420:	4613      	mov	r3, r2
 800a422:	011b      	lsls	r3, r3, #4
 800a424:	1a9b      	subs	r3, r3, r2
 800a426:	009b      	lsls	r3, r3, #2
 800a428:	440b      	add	r3, r1
 800a42a:	334d      	adds	r3, #77	@ 0x4d
 800a42c:	2205      	movs	r2, #5
 800a42e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800a430:	78fa      	ldrb	r2, [r7, #3]
 800a432:	6879      	ldr	r1, [r7, #4]
 800a434:	4613      	mov	r3, r2
 800a436:	011b      	lsls	r3, r3, #4
 800a438:	1a9b      	subs	r3, r3, r2
 800a43a:	009b      	lsls	r3, r3, #2
 800a43c:	440b      	add	r3, r1
 800a43e:	331a      	adds	r3, #26
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d109      	bne.n	800a45a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a446:	78fa      	ldrb	r2, [r7, #3]
 800a448:	6879      	ldr	r1, [r7, #4]
 800a44a:	4613      	mov	r3, r2
 800a44c:	011b      	lsls	r3, r3, #4
 800a44e:	1a9b      	subs	r3, r3, r2
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	440b      	add	r3, r1
 800a454:	3344      	adds	r3, #68	@ 0x44
 800a456:	2200      	movs	r2, #0
 800a458:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	78fa      	ldrb	r2, [r7, #3]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f003 ff1b 	bl	800e29e <USB_HC_Halt>
 800a468:	e0b3      	b.n	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	78fa      	ldrb	r2, [r7, #3]
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f003 f96f 	bl	800d756 <USB_ReadChInterrupts>
 800a478:	4603      	mov	r3, r0
 800a47a:	f003 0310 	and.w	r3, r3, #16
 800a47e:	2b10      	cmp	r3, #16
 800a480:	f040 80a7 	bne.w	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800a484:	78fa      	ldrb	r2, [r7, #3]
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	4613      	mov	r3, r2
 800a48a:	011b      	lsls	r3, r3, #4
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	440b      	add	r3, r1
 800a492:	3326      	adds	r3, #38	@ 0x26
 800a494:	781b      	ldrb	r3, [r3, #0]
 800a496:	2b03      	cmp	r3, #3
 800a498:	d11b      	bne.n	800a4d2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a49a:	78fa      	ldrb	r2, [r7, #3]
 800a49c:	6879      	ldr	r1, [r7, #4]
 800a49e:	4613      	mov	r3, r2
 800a4a0:	011b      	lsls	r3, r3, #4
 800a4a2:	1a9b      	subs	r3, r3, r2
 800a4a4:	009b      	lsls	r3, r3, #2
 800a4a6:	440b      	add	r3, r1
 800a4a8:	3344      	adds	r3, #68	@ 0x44
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800a4ae:	78fa      	ldrb	r2, [r7, #3]
 800a4b0:	6879      	ldr	r1, [r7, #4]
 800a4b2:	4613      	mov	r3, r2
 800a4b4:	011b      	lsls	r3, r3, #4
 800a4b6:	1a9b      	subs	r3, r3, r2
 800a4b8:	009b      	lsls	r3, r3, #2
 800a4ba:	440b      	add	r3, r1
 800a4bc:	334d      	adds	r3, #77	@ 0x4d
 800a4be:	2204      	movs	r2, #4
 800a4c0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	78fa      	ldrb	r2, [r7, #3]
 800a4c8:	4611      	mov	r1, r2
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f003 fee7 	bl	800e29e <USB_HC_Halt>
 800a4d0:	e03f      	b.n	800a552 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a4d2:	78fa      	ldrb	r2, [r7, #3]
 800a4d4:	6879      	ldr	r1, [r7, #4]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	011b      	lsls	r3, r3, #4
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	440b      	add	r3, r1
 800a4e0:	3326      	adds	r3, #38	@ 0x26
 800a4e2:	781b      	ldrb	r3, [r3, #0]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d00a      	beq.n	800a4fe <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800a4e8:	78fa      	ldrb	r2, [r7, #3]
 800a4ea:	6879      	ldr	r1, [r7, #4]
 800a4ec:	4613      	mov	r3, r2
 800a4ee:	011b      	lsls	r3, r3, #4
 800a4f0:	1a9b      	subs	r3, r3, r2
 800a4f2:	009b      	lsls	r3, r3, #2
 800a4f4:	440b      	add	r3, r1
 800a4f6:	3326      	adds	r3, #38	@ 0x26
 800a4f8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800a4fa:	2b02      	cmp	r3, #2
 800a4fc:	d129      	bne.n	800a552 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800a4fe:	78fa      	ldrb	r2, [r7, #3]
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	4613      	mov	r3, r2
 800a504:	011b      	lsls	r3, r3, #4
 800a506:	1a9b      	subs	r3, r3, r2
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	440b      	add	r3, r1
 800a50c:	3344      	adds	r3, #68	@ 0x44
 800a50e:	2200      	movs	r2, #0
 800a510:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	799b      	ldrb	r3, [r3, #6]
 800a516:	2b00      	cmp	r3, #0
 800a518:	d00a      	beq.n	800a530 <HCD_HC_IN_IRQHandler+0xc2a>
 800a51a:	78fa      	ldrb	r2, [r7, #3]
 800a51c:	6879      	ldr	r1, [r7, #4]
 800a51e:	4613      	mov	r3, r2
 800a520:	011b      	lsls	r3, r3, #4
 800a522:	1a9b      	subs	r3, r3, r2
 800a524:	009b      	lsls	r3, r3, #2
 800a526:	440b      	add	r3, r1
 800a528:	331b      	adds	r3, #27
 800a52a:	781b      	ldrb	r3, [r3, #0]
 800a52c:	2b01      	cmp	r3, #1
 800a52e:	d110      	bne.n	800a552 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800a530:	78fa      	ldrb	r2, [r7, #3]
 800a532:	6879      	ldr	r1, [r7, #4]
 800a534:	4613      	mov	r3, r2
 800a536:	011b      	lsls	r3, r3, #4
 800a538:	1a9b      	subs	r3, r3, r2
 800a53a:	009b      	lsls	r3, r3, #2
 800a53c:	440b      	add	r3, r1
 800a53e:	334d      	adds	r3, #77	@ 0x4d
 800a540:	2204      	movs	r2, #4
 800a542:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	78fa      	ldrb	r2, [r7, #3]
 800a54a:	4611      	mov	r1, r2
 800a54c:	4618      	mov	r0, r3
 800a54e:	f003 fea6 	bl	800e29e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800a552:	78fa      	ldrb	r2, [r7, #3]
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	4613      	mov	r3, r2
 800a558:	011b      	lsls	r3, r3, #4
 800a55a:	1a9b      	subs	r3, r3, r2
 800a55c:	009b      	lsls	r3, r3, #2
 800a55e:	440b      	add	r3, r1
 800a560:	331b      	adds	r3, #27
 800a562:	781b      	ldrb	r3, [r3, #0]
 800a564:	2b01      	cmp	r3, #1
 800a566:	d129      	bne.n	800a5bc <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800a568:	78fa      	ldrb	r2, [r7, #3]
 800a56a:	6879      	ldr	r1, [r7, #4]
 800a56c:	4613      	mov	r3, r2
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	1a9b      	subs	r3, r3, r2
 800a572:	009b      	lsls	r3, r3, #2
 800a574:	440b      	add	r3, r1
 800a576:	331b      	adds	r3, #27
 800a578:	2200      	movs	r2, #0
 800a57a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a57c:	78fb      	ldrb	r3, [r7, #3]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	4413      	add	r3, r2
 800a584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a588:	685b      	ldr	r3, [r3, #4]
 800a58a:	78fa      	ldrb	r2, [r7, #3]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	693a      	ldr	r2, [r7, #16]
 800a590:	440a      	add	r2, r1
 800a592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a596:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a59a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800a59c:	78fb      	ldrb	r3, [r7, #3]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	78fa      	ldrb	r2, [r7, #3]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5b6:	f043 0320 	orr.w	r3, r3, #32
 800a5ba:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a5bc:	78fb      	ldrb	r3, [r7, #3]
 800a5be:	015a      	lsls	r2, r3, #5
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	4413      	add	r3, r2
 800a5c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5c8:	461a      	mov	r2, r3
 800a5ca:	2310      	movs	r3, #16
 800a5cc:	6093      	str	r3, [r2, #8]
 800a5ce:	e000      	b.n	800a5d2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800a5d0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800a5d2:	3718      	adds	r7, #24
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b086      	sub	sp, #24
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	78fa      	ldrb	r2, [r7, #3]
 800a5f4:	4611      	mov	r1, r2
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	f003 f8ad 	bl	800d756 <USB_ReadChInterrupts>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	f003 0304 	and.w	r3, r3, #4
 800a602:	2b04      	cmp	r3, #4
 800a604:	d11b      	bne.n	800a63e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800a606:	78fb      	ldrb	r3, [r7, #3]
 800a608:	015a      	lsls	r2, r3, #5
 800a60a:	693b      	ldr	r3, [r7, #16]
 800a60c:	4413      	add	r3, r2
 800a60e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a612:	461a      	mov	r2, r3
 800a614:	2304      	movs	r3, #4
 800a616:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800a618:	78fa      	ldrb	r2, [r7, #3]
 800a61a:	6879      	ldr	r1, [r7, #4]
 800a61c:	4613      	mov	r3, r2
 800a61e:	011b      	lsls	r3, r3, #4
 800a620:	1a9b      	subs	r3, r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	440b      	add	r3, r1
 800a626:	334d      	adds	r3, #77	@ 0x4d
 800a628:	2207      	movs	r2, #7
 800a62a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	78fa      	ldrb	r2, [r7, #3]
 800a632:	4611      	mov	r1, r2
 800a634:	4618      	mov	r0, r3
 800a636:	f003 fe32 	bl	800e29e <USB_HC_Halt>
 800a63a:	f000 bc89 	b.w	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	78fa      	ldrb	r2, [r7, #3]
 800a644:	4611      	mov	r1, r2
 800a646:	4618      	mov	r0, r3
 800a648:	f003 f885 	bl	800d756 <USB_ReadChInterrupts>
 800a64c:	4603      	mov	r3, r0
 800a64e:	f003 0320 	and.w	r3, r3, #32
 800a652:	2b20      	cmp	r3, #32
 800a654:	f040 8082 	bne.w	800a75c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800a658:	78fb      	ldrb	r3, [r7, #3]
 800a65a:	015a      	lsls	r2, r3, #5
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	4413      	add	r3, r2
 800a660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a664:	461a      	mov	r2, r3
 800a666:	2320      	movs	r3, #32
 800a668:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800a66a:	78fa      	ldrb	r2, [r7, #3]
 800a66c:	6879      	ldr	r1, [r7, #4]
 800a66e:	4613      	mov	r3, r2
 800a670:	011b      	lsls	r3, r3, #4
 800a672:	1a9b      	subs	r3, r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	440b      	add	r3, r1
 800a678:	3319      	adds	r3, #25
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d124      	bne.n	800a6ca <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800a680:	78fa      	ldrb	r2, [r7, #3]
 800a682:	6879      	ldr	r1, [r7, #4]
 800a684:	4613      	mov	r3, r2
 800a686:	011b      	lsls	r3, r3, #4
 800a688:	1a9b      	subs	r3, r3, r2
 800a68a:	009b      	lsls	r3, r3, #2
 800a68c:	440b      	add	r3, r1
 800a68e:	3319      	adds	r3, #25
 800a690:	2200      	movs	r2, #0
 800a692:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a694:	78fa      	ldrb	r2, [r7, #3]
 800a696:	6879      	ldr	r1, [r7, #4]
 800a698:	4613      	mov	r3, r2
 800a69a:	011b      	lsls	r3, r3, #4
 800a69c:	1a9b      	subs	r3, r3, r2
 800a69e:	009b      	lsls	r3, r3, #2
 800a6a0:	440b      	add	r3, r1
 800a6a2:	334c      	adds	r3, #76	@ 0x4c
 800a6a4:	2202      	movs	r2, #2
 800a6a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800a6a8:	78fa      	ldrb	r2, [r7, #3]
 800a6aa:	6879      	ldr	r1, [r7, #4]
 800a6ac:	4613      	mov	r3, r2
 800a6ae:	011b      	lsls	r3, r3, #4
 800a6b0:	1a9b      	subs	r3, r3, r2
 800a6b2:	009b      	lsls	r3, r3, #2
 800a6b4:	440b      	add	r3, r1
 800a6b6:	334d      	adds	r3, #77	@ 0x4d
 800a6b8:	2203      	movs	r2, #3
 800a6ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	78fa      	ldrb	r2, [r7, #3]
 800a6c2:	4611      	mov	r1, r2
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f003 fdea 	bl	800e29e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800a6ca:	78fa      	ldrb	r2, [r7, #3]
 800a6cc:	6879      	ldr	r1, [r7, #4]
 800a6ce:	4613      	mov	r3, r2
 800a6d0:	011b      	lsls	r3, r3, #4
 800a6d2:	1a9b      	subs	r3, r3, r2
 800a6d4:	009b      	lsls	r3, r3, #2
 800a6d6:	440b      	add	r3, r1
 800a6d8:	331a      	adds	r3, #26
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	f040 8437 	bne.w	800af50 <HCD_HC_OUT_IRQHandler+0x978>
 800a6e2:	78fa      	ldrb	r2, [r7, #3]
 800a6e4:	6879      	ldr	r1, [r7, #4]
 800a6e6:	4613      	mov	r3, r2
 800a6e8:	011b      	lsls	r3, r3, #4
 800a6ea:	1a9b      	subs	r3, r3, r2
 800a6ec:	009b      	lsls	r3, r3, #2
 800a6ee:	440b      	add	r3, r1
 800a6f0:	331b      	adds	r3, #27
 800a6f2:	781b      	ldrb	r3, [r3, #0]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	f040 842b 	bne.w	800af50 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800a6fa:	78fa      	ldrb	r2, [r7, #3]
 800a6fc:	6879      	ldr	r1, [r7, #4]
 800a6fe:	4613      	mov	r3, r2
 800a700:	011b      	lsls	r3, r3, #4
 800a702:	1a9b      	subs	r3, r3, r2
 800a704:	009b      	lsls	r3, r3, #2
 800a706:	440b      	add	r3, r1
 800a708:	3326      	adds	r3, #38	@ 0x26
 800a70a:	781b      	ldrb	r3, [r3, #0]
 800a70c:	2b01      	cmp	r3, #1
 800a70e:	d009      	beq.n	800a724 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800a710:	78fa      	ldrb	r2, [r7, #3]
 800a712:	6879      	ldr	r1, [r7, #4]
 800a714:	4613      	mov	r3, r2
 800a716:	011b      	lsls	r3, r3, #4
 800a718:	1a9b      	subs	r3, r3, r2
 800a71a:	009b      	lsls	r3, r3, #2
 800a71c:	440b      	add	r3, r1
 800a71e:	331b      	adds	r3, #27
 800a720:	2201      	movs	r2, #1
 800a722:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800a724:	78fa      	ldrb	r2, [r7, #3]
 800a726:	6879      	ldr	r1, [r7, #4]
 800a728:	4613      	mov	r3, r2
 800a72a:	011b      	lsls	r3, r3, #4
 800a72c:	1a9b      	subs	r3, r3, r2
 800a72e:	009b      	lsls	r3, r3, #2
 800a730:	440b      	add	r3, r1
 800a732:	334d      	adds	r3, #77	@ 0x4d
 800a734:	2203      	movs	r2, #3
 800a736:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	78fa      	ldrb	r2, [r7, #3]
 800a73e:	4611      	mov	r1, r2
 800a740:	4618      	mov	r0, r3
 800a742:	f003 fdac 	bl	800e29e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800a746:	78fa      	ldrb	r2, [r7, #3]
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	4613      	mov	r3, r2
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	1a9b      	subs	r3, r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	440b      	add	r3, r1
 800a754:	3344      	adds	r3, #68	@ 0x44
 800a756:	2200      	movs	r2, #0
 800a758:	601a      	str	r2, [r3, #0]
 800a75a:	e3f9      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	78fa      	ldrb	r2, [r7, #3]
 800a762:	4611      	mov	r1, r2
 800a764:	4618      	mov	r0, r3
 800a766:	f002 fff6 	bl	800d756 <USB_ReadChInterrupts>
 800a76a:	4603      	mov	r3, r0
 800a76c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a774:	d111      	bne.n	800a79a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800a776:	78fb      	ldrb	r3, [r7, #3]
 800a778:	015a      	lsls	r2, r3, #5
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	4413      	add	r3, r2
 800a77e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a782:	461a      	mov	r2, r3
 800a784:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a788:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	78fa      	ldrb	r2, [r7, #3]
 800a790:	4611      	mov	r1, r2
 800a792:	4618      	mov	r0, r3
 800a794:	f003 fd83 	bl	800e29e <USB_HC_Halt>
 800a798:	e3da      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	78fa      	ldrb	r2, [r7, #3]
 800a7a0:	4611      	mov	r1, r2
 800a7a2:	4618      	mov	r0, r3
 800a7a4:	f002 ffd7 	bl	800d756 <USB_ReadChInterrupts>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	f003 0301 	and.w	r3, r3, #1
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d168      	bne.n	800a884 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a7b2:	78fa      	ldrb	r2, [r7, #3]
 800a7b4:	6879      	ldr	r1, [r7, #4]
 800a7b6:	4613      	mov	r3, r2
 800a7b8:	011b      	lsls	r3, r3, #4
 800a7ba:	1a9b      	subs	r3, r3, r2
 800a7bc:	009b      	lsls	r3, r3, #2
 800a7be:	440b      	add	r3, r1
 800a7c0:	3344      	adds	r3, #68	@ 0x44
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	78fa      	ldrb	r2, [r7, #3]
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f002 ffc1 	bl	800d756 <USB_ReadChInterrupts>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7da:	2b40      	cmp	r3, #64	@ 0x40
 800a7dc:	d112      	bne.n	800a804 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	6879      	ldr	r1, [r7, #4]
 800a7e2:	4613      	mov	r3, r2
 800a7e4:	011b      	lsls	r3, r3, #4
 800a7e6:	1a9b      	subs	r3, r3, r2
 800a7e8:	009b      	lsls	r3, r3, #2
 800a7ea:	440b      	add	r3, r1
 800a7ec:	3319      	adds	r3, #25
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a7f2:	78fb      	ldrb	r3, [r7, #3]
 800a7f4:	015a      	lsls	r2, r3, #5
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	4413      	add	r3, r2
 800a7fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7fe:	461a      	mov	r2, r3
 800a800:	2340      	movs	r3, #64	@ 0x40
 800a802:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800a804:	78fa      	ldrb	r2, [r7, #3]
 800a806:	6879      	ldr	r1, [r7, #4]
 800a808:	4613      	mov	r3, r2
 800a80a:	011b      	lsls	r3, r3, #4
 800a80c:	1a9b      	subs	r3, r3, r2
 800a80e:	009b      	lsls	r3, r3, #2
 800a810:	440b      	add	r3, r1
 800a812:	331b      	adds	r3, #27
 800a814:	781b      	ldrb	r3, [r3, #0]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d019      	beq.n	800a84e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800a81a:	78fa      	ldrb	r2, [r7, #3]
 800a81c:	6879      	ldr	r1, [r7, #4]
 800a81e:	4613      	mov	r3, r2
 800a820:	011b      	lsls	r3, r3, #4
 800a822:	1a9b      	subs	r3, r3, r2
 800a824:	009b      	lsls	r3, r3, #2
 800a826:	440b      	add	r3, r1
 800a828:	331b      	adds	r3, #27
 800a82a:	2200      	movs	r2, #0
 800a82c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800a82e:	78fb      	ldrb	r3, [r7, #3]
 800a830:	015a      	lsls	r2, r3, #5
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	4413      	add	r3, r2
 800a836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a83a:	685b      	ldr	r3, [r3, #4]
 800a83c:	78fa      	ldrb	r2, [r7, #3]
 800a83e:	0151      	lsls	r1, r2, #5
 800a840:	693a      	ldr	r2, [r7, #16]
 800a842:	440a      	add	r2, r1
 800a844:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a848:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800a84c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800a84e:	78fb      	ldrb	r3, [r7, #3]
 800a850:	015a      	lsls	r2, r3, #5
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	4413      	add	r3, r2
 800a856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a85a:	461a      	mov	r2, r3
 800a85c:	2301      	movs	r3, #1
 800a85e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800a860:	78fa      	ldrb	r2, [r7, #3]
 800a862:	6879      	ldr	r1, [r7, #4]
 800a864:	4613      	mov	r3, r2
 800a866:	011b      	lsls	r3, r3, #4
 800a868:	1a9b      	subs	r3, r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	440b      	add	r3, r1
 800a86e:	334d      	adds	r3, #77	@ 0x4d
 800a870:	2201      	movs	r2, #1
 800a872:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	78fa      	ldrb	r2, [r7, #3]
 800a87a:	4611      	mov	r1, r2
 800a87c:	4618      	mov	r0, r3
 800a87e:	f003 fd0e 	bl	800e29e <USB_HC_Halt>
 800a882:	e365      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	78fa      	ldrb	r2, [r7, #3]
 800a88a:	4611      	mov	r1, r2
 800a88c:	4618      	mov	r0, r3
 800a88e:	f002 ff62 	bl	800d756 <USB_ReadChInterrupts>
 800a892:	4603      	mov	r3, r0
 800a894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a898:	2b40      	cmp	r3, #64	@ 0x40
 800a89a:	d139      	bne.n	800a910 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800a89c:	78fa      	ldrb	r2, [r7, #3]
 800a89e:	6879      	ldr	r1, [r7, #4]
 800a8a0:	4613      	mov	r3, r2
 800a8a2:	011b      	lsls	r3, r3, #4
 800a8a4:	1a9b      	subs	r3, r3, r2
 800a8a6:	009b      	lsls	r3, r3, #2
 800a8a8:	440b      	add	r3, r1
 800a8aa:	334d      	adds	r3, #77	@ 0x4d
 800a8ac:	2205      	movs	r2, #5
 800a8ae:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800a8b0:	78fa      	ldrb	r2, [r7, #3]
 800a8b2:	6879      	ldr	r1, [r7, #4]
 800a8b4:	4613      	mov	r3, r2
 800a8b6:	011b      	lsls	r3, r3, #4
 800a8b8:	1a9b      	subs	r3, r3, r2
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	440b      	add	r3, r1
 800a8be:	331a      	adds	r3, #26
 800a8c0:	781b      	ldrb	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800a8c6:	78fa      	ldrb	r2, [r7, #3]
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	4613      	mov	r3, r2
 800a8cc:	011b      	lsls	r3, r3, #4
 800a8ce:	1a9b      	subs	r3, r3, r2
 800a8d0:	009b      	lsls	r3, r3, #2
 800a8d2:	440b      	add	r3, r1
 800a8d4:	3319      	adds	r3, #25
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800a8da:	78fa      	ldrb	r2, [r7, #3]
 800a8dc:	6879      	ldr	r1, [r7, #4]
 800a8de:	4613      	mov	r3, r2
 800a8e0:	011b      	lsls	r3, r3, #4
 800a8e2:	1a9b      	subs	r3, r3, r2
 800a8e4:	009b      	lsls	r3, r3, #2
 800a8e6:	440b      	add	r3, r1
 800a8e8:	3344      	adds	r3, #68	@ 0x44
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	78fa      	ldrb	r2, [r7, #3]
 800a8f4:	4611      	mov	r1, r2
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f003 fcd1 	bl	800e29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800a8fc:	78fb      	ldrb	r3, [r7, #3]
 800a8fe:	015a      	lsls	r2, r3, #5
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	4413      	add	r3, r2
 800a904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a908:	461a      	mov	r2, r3
 800a90a:	2340      	movs	r3, #64	@ 0x40
 800a90c:	6093      	str	r3, [r2, #8]
 800a90e:	e31f      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	78fa      	ldrb	r2, [r7, #3]
 800a916:	4611      	mov	r1, r2
 800a918:	4618      	mov	r0, r3
 800a91a:	f002 ff1c 	bl	800d756 <USB_ReadChInterrupts>
 800a91e:	4603      	mov	r3, r0
 800a920:	f003 0308 	and.w	r3, r3, #8
 800a924:	2b08      	cmp	r3, #8
 800a926:	d11a      	bne.n	800a95e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800a928:	78fb      	ldrb	r3, [r7, #3]
 800a92a:	015a      	lsls	r2, r3, #5
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	4413      	add	r3, r2
 800a930:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a934:	461a      	mov	r2, r3
 800a936:	2308      	movs	r3, #8
 800a938:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800a93a:	78fa      	ldrb	r2, [r7, #3]
 800a93c:	6879      	ldr	r1, [r7, #4]
 800a93e:	4613      	mov	r3, r2
 800a940:	011b      	lsls	r3, r3, #4
 800a942:	1a9b      	subs	r3, r3, r2
 800a944:	009b      	lsls	r3, r3, #2
 800a946:	440b      	add	r3, r1
 800a948:	334d      	adds	r3, #77	@ 0x4d
 800a94a:	2206      	movs	r2, #6
 800a94c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	78fa      	ldrb	r2, [r7, #3]
 800a954:	4611      	mov	r1, r2
 800a956:	4618      	mov	r0, r3
 800a958:	f003 fca1 	bl	800e29e <USB_HC_Halt>
 800a95c:	e2f8      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	78fa      	ldrb	r2, [r7, #3]
 800a964:	4611      	mov	r1, r2
 800a966:	4618      	mov	r0, r3
 800a968:	f002 fef5 	bl	800d756 <USB_ReadChInterrupts>
 800a96c:	4603      	mov	r3, r0
 800a96e:	f003 0310 	and.w	r3, r3, #16
 800a972:	2b10      	cmp	r3, #16
 800a974:	d144      	bne.n	800aa00 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800a976:	78fa      	ldrb	r2, [r7, #3]
 800a978:	6879      	ldr	r1, [r7, #4]
 800a97a:	4613      	mov	r3, r2
 800a97c:	011b      	lsls	r3, r3, #4
 800a97e:	1a9b      	subs	r3, r3, r2
 800a980:	009b      	lsls	r3, r3, #2
 800a982:	440b      	add	r3, r1
 800a984:	3344      	adds	r3, #68	@ 0x44
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800a98a:	78fa      	ldrb	r2, [r7, #3]
 800a98c:	6879      	ldr	r1, [r7, #4]
 800a98e:	4613      	mov	r3, r2
 800a990:	011b      	lsls	r3, r3, #4
 800a992:	1a9b      	subs	r3, r3, r2
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	440b      	add	r3, r1
 800a998:	334d      	adds	r3, #77	@ 0x4d
 800a99a:	2204      	movs	r2, #4
 800a99c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800a99e:	78fa      	ldrb	r2, [r7, #3]
 800a9a0:	6879      	ldr	r1, [r7, #4]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	011b      	lsls	r3, r3, #4
 800a9a6:	1a9b      	subs	r3, r3, r2
 800a9a8:	009b      	lsls	r3, r3, #2
 800a9aa:	440b      	add	r3, r1
 800a9ac:	3319      	adds	r3, #25
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d114      	bne.n	800a9de <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800a9b4:	78fa      	ldrb	r2, [r7, #3]
 800a9b6:	6879      	ldr	r1, [r7, #4]
 800a9b8:	4613      	mov	r3, r2
 800a9ba:	011b      	lsls	r3, r3, #4
 800a9bc:	1a9b      	subs	r3, r3, r2
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	440b      	add	r3, r1
 800a9c2:	3318      	adds	r3, #24
 800a9c4:	781b      	ldrb	r3, [r3, #0]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800a9ca:	78fa      	ldrb	r2, [r7, #3]
 800a9cc:	6879      	ldr	r1, [r7, #4]
 800a9ce:	4613      	mov	r3, r2
 800a9d0:	011b      	lsls	r3, r3, #4
 800a9d2:	1a9b      	subs	r3, r3, r2
 800a9d4:	009b      	lsls	r3, r3, #2
 800a9d6:	440b      	add	r3, r1
 800a9d8:	3319      	adds	r3, #25
 800a9da:	2201      	movs	r2, #1
 800a9dc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	78fa      	ldrb	r2, [r7, #3]
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f003 fc59 	bl	800e29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800a9ec:	78fb      	ldrb	r3, [r7, #3]
 800a9ee:	015a      	lsls	r2, r3, #5
 800a9f0:	693b      	ldr	r3, [r7, #16]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a9f8:	461a      	mov	r2, r3
 800a9fa:	2310      	movs	r3, #16
 800a9fc:	6093      	str	r3, [r2, #8]
 800a9fe:	e2a7      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	78fa      	ldrb	r2, [r7, #3]
 800aa06:	4611      	mov	r1, r2
 800aa08:	4618      	mov	r0, r3
 800aa0a:	f002 fea4 	bl	800d756 <USB_ReadChInterrupts>
 800aa0e:	4603      	mov	r3, r0
 800aa10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa14:	2b80      	cmp	r3, #128	@ 0x80
 800aa16:	f040 8083 	bne.w	800ab20 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	799b      	ldrb	r3, [r3, #6]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d111      	bne.n	800aa46 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800aa22:	78fa      	ldrb	r2, [r7, #3]
 800aa24:	6879      	ldr	r1, [r7, #4]
 800aa26:	4613      	mov	r3, r2
 800aa28:	011b      	lsls	r3, r3, #4
 800aa2a:	1a9b      	subs	r3, r3, r2
 800aa2c:	009b      	lsls	r3, r3, #2
 800aa2e:	440b      	add	r3, r1
 800aa30:	334d      	adds	r3, #77	@ 0x4d
 800aa32:	2207      	movs	r2, #7
 800aa34:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	78fa      	ldrb	r2, [r7, #3]
 800aa3c:	4611      	mov	r1, r2
 800aa3e:	4618      	mov	r0, r3
 800aa40:	f003 fc2d 	bl	800e29e <USB_HC_Halt>
 800aa44:	e062      	b.n	800ab0c <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	6879      	ldr	r1, [r7, #4]
 800aa4a:	4613      	mov	r3, r2
 800aa4c:	011b      	lsls	r3, r3, #4
 800aa4e:	1a9b      	subs	r3, r3, r2
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	440b      	add	r3, r1
 800aa54:	3344      	adds	r3, #68	@ 0x44
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	1c59      	adds	r1, r3, #1
 800aa5a:	6878      	ldr	r0, [r7, #4]
 800aa5c:	4613      	mov	r3, r2
 800aa5e:	011b      	lsls	r3, r3, #4
 800aa60:	1a9b      	subs	r3, r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4403      	add	r3, r0
 800aa66:	3344      	adds	r3, #68	@ 0x44
 800aa68:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	6879      	ldr	r1, [r7, #4]
 800aa6e:	4613      	mov	r3, r2
 800aa70:	011b      	lsls	r3, r3, #4
 800aa72:	1a9b      	subs	r3, r3, r2
 800aa74:	009b      	lsls	r3, r3, #2
 800aa76:	440b      	add	r3, r1
 800aa78:	3344      	adds	r3, #68	@ 0x44
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	2b02      	cmp	r3, #2
 800aa7e:	d922      	bls.n	800aac6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800aa80:	78fa      	ldrb	r2, [r7, #3]
 800aa82:	6879      	ldr	r1, [r7, #4]
 800aa84:	4613      	mov	r3, r2
 800aa86:	011b      	lsls	r3, r3, #4
 800aa88:	1a9b      	subs	r3, r3, r2
 800aa8a:	009b      	lsls	r3, r3, #2
 800aa8c:	440b      	add	r3, r1
 800aa8e:	3344      	adds	r3, #68	@ 0x44
 800aa90:	2200      	movs	r2, #0
 800aa92:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800aa94:	78fa      	ldrb	r2, [r7, #3]
 800aa96:	6879      	ldr	r1, [r7, #4]
 800aa98:	4613      	mov	r3, r2
 800aa9a:	011b      	lsls	r3, r3, #4
 800aa9c:	1a9b      	subs	r3, r3, r2
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	440b      	add	r3, r1
 800aaa2:	334c      	adds	r3, #76	@ 0x4c
 800aaa4:	2204      	movs	r2, #4
 800aaa6:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800aaa8:	78fa      	ldrb	r2, [r7, #3]
 800aaaa:	6879      	ldr	r1, [r7, #4]
 800aaac:	4613      	mov	r3, r2
 800aaae:	011b      	lsls	r3, r3, #4
 800aab0:	1a9b      	subs	r3, r3, r2
 800aab2:	009b      	lsls	r3, r3, #2
 800aab4:	440b      	add	r3, r1
 800aab6:	334c      	adds	r3, #76	@ 0x4c
 800aab8:	781a      	ldrb	r2, [r3, #0]
 800aaba:	78fb      	ldrb	r3, [r7, #3]
 800aabc:	4619      	mov	r1, r3
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f005 ff46 	bl	8010950 <HAL_HCD_HC_NotifyURBChange_Callback>
 800aac4:	e022      	b.n	800ab0c <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aac6:	78fa      	ldrb	r2, [r7, #3]
 800aac8:	6879      	ldr	r1, [r7, #4]
 800aaca:	4613      	mov	r3, r2
 800aacc:	011b      	lsls	r3, r3, #4
 800aace:	1a9b      	subs	r3, r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	440b      	add	r3, r1
 800aad4:	334c      	adds	r3, #76	@ 0x4c
 800aad6:	2202      	movs	r2, #2
 800aad8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800aada:	78fb      	ldrb	r3, [r7, #3]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800aaf0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800aaf8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	693b      	ldr	r3, [r7, #16]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab06:	461a      	mov	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800ab0c:	78fb      	ldrb	r3, [r7, #3]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab18:	461a      	mov	r2, r3
 800ab1a:	2380      	movs	r3, #128	@ 0x80
 800ab1c:	6093      	str	r3, [r2, #8]
 800ab1e:	e217      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	78fa      	ldrb	r2, [r7, #3]
 800ab26:	4611      	mov	r1, r2
 800ab28:	4618      	mov	r0, r3
 800ab2a:	f002 fe14 	bl	800d756 <USB_ReadChInterrupts>
 800ab2e:	4603      	mov	r3, r0
 800ab30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ab34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ab38:	d11b      	bne.n	800ab72 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800ab3a:	78fa      	ldrb	r2, [r7, #3]
 800ab3c:	6879      	ldr	r1, [r7, #4]
 800ab3e:	4613      	mov	r3, r2
 800ab40:	011b      	lsls	r3, r3, #4
 800ab42:	1a9b      	subs	r3, r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	440b      	add	r3, r1
 800ab48:	334d      	adds	r3, #77	@ 0x4d
 800ab4a:	2209      	movs	r2, #9
 800ab4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	4611      	mov	r1, r2
 800ab56:	4618      	mov	r0, r3
 800ab58:	f003 fba1 	bl	800e29e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800ab5c:	78fb      	ldrb	r3, [r7, #3]
 800ab5e:	015a      	lsls	r2, r3, #5
 800ab60:	693b      	ldr	r3, [r7, #16]
 800ab62:	4413      	add	r3, r2
 800ab64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab68:	461a      	mov	r2, r3
 800ab6a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab6e:	6093      	str	r3, [r2, #8]
 800ab70:	e1ee      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	78fa      	ldrb	r2, [r7, #3]
 800ab78:	4611      	mov	r1, r2
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f002 fdeb 	bl	800d756 <USB_ReadChInterrupts>
 800ab80:	4603      	mov	r3, r0
 800ab82:	f003 0302 	and.w	r3, r3, #2
 800ab86:	2b02      	cmp	r3, #2
 800ab88:	f040 81df 	bne.w	800af4a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800ab8c:	78fb      	ldrb	r3, [r7, #3]
 800ab8e:	015a      	lsls	r2, r3, #5
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	4413      	add	r3, r2
 800ab94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ab98:	461a      	mov	r2, r3
 800ab9a:	2302      	movs	r3, #2
 800ab9c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800ab9e:	78fa      	ldrb	r2, [r7, #3]
 800aba0:	6879      	ldr	r1, [r7, #4]
 800aba2:	4613      	mov	r3, r2
 800aba4:	011b      	lsls	r3, r3, #4
 800aba6:	1a9b      	subs	r3, r3, r2
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	440b      	add	r3, r1
 800abac:	334d      	adds	r3, #77	@ 0x4d
 800abae:	781b      	ldrb	r3, [r3, #0]
 800abb0:	2b01      	cmp	r3, #1
 800abb2:	f040 8093 	bne.w	800acdc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800abb6:	78fa      	ldrb	r2, [r7, #3]
 800abb8:	6879      	ldr	r1, [r7, #4]
 800abba:	4613      	mov	r3, r2
 800abbc:	011b      	lsls	r3, r3, #4
 800abbe:	1a9b      	subs	r3, r3, r2
 800abc0:	009b      	lsls	r3, r3, #2
 800abc2:	440b      	add	r3, r1
 800abc4:	334d      	adds	r3, #77	@ 0x4d
 800abc6:	2202      	movs	r2, #2
 800abc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800abca:	78fa      	ldrb	r2, [r7, #3]
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4613      	mov	r3, r2
 800abd0:	011b      	lsls	r3, r3, #4
 800abd2:	1a9b      	subs	r3, r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	334c      	adds	r3, #76	@ 0x4c
 800abda:	2201      	movs	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	4613      	mov	r3, r2
 800abe4:	011b      	lsls	r3, r3, #4
 800abe6:	1a9b      	subs	r3, r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	440b      	add	r3, r1
 800abec:	3326      	adds	r3, #38	@ 0x26
 800abee:	781b      	ldrb	r3, [r3, #0]
 800abf0:	2b02      	cmp	r3, #2
 800abf2:	d00b      	beq.n	800ac0c <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800abf4:	78fa      	ldrb	r2, [r7, #3]
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4613      	mov	r3, r2
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	1a9b      	subs	r3, r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	3326      	adds	r3, #38	@ 0x26
 800ac04:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800ac06:	2b03      	cmp	r3, #3
 800ac08:	f040 8190 	bne.w	800af2c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	799b      	ldrb	r3, [r3, #6]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d115      	bne.n	800ac40 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800ac14:	78fa      	ldrb	r2, [r7, #3]
 800ac16:	6879      	ldr	r1, [r7, #4]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	011b      	lsls	r3, r3, #4
 800ac1c:	1a9b      	subs	r3, r3, r2
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	440b      	add	r3, r1
 800ac22:	333d      	adds	r3, #61	@ 0x3d
 800ac24:	781b      	ldrb	r3, [r3, #0]
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	f083 0301 	eor.w	r3, r3, #1
 800ac2c:	b2d8      	uxtb	r0, r3
 800ac2e:	6879      	ldr	r1, [r7, #4]
 800ac30:	4613      	mov	r3, r2
 800ac32:	011b      	lsls	r3, r3, #4
 800ac34:	1a9b      	subs	r3, r3, r2
 800ac36:	009b      	lsls	r3, r3, #2
 800ac38:	440b      	add	r3, r1
 800ac3a:	333d      	adds	r3, #61	@ 0x3d
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	799b      	ldrb	r3, [r3, #6]
 800ac44:	2b01      	cmp	r3, #1
 800ac46:	f040 8171 	bne.w	800af2c <HCD_HC_OUT_IRQHandler+0x954>
 800ac4a:	78fa      	ldrb	r2, [r7, #3]
 800ac4c:	6879      	ldr	r1, [r7, #4]
 800ac4e:	4613      	mov	r3, r2
 800ac50:	011b      	lsls	r3, r3, #4
 800ac52:	1a9b      	subs	r3, r3, r2
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	440b      	add	r3, r1
 800ac58:	3334      	adds	r3, #52	@ 0x34
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	f000 8165 	beq.w	800af2c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 800ac62:	78fa      	ldrb	r2, [r7, #3]
 800ac64:	6879      	ldr	r1, [r7, #4]
 800ac66:	4613      	mov	r3, r2
 800ac68:	011b      	lsls	r3, r3, #4
 800ac6a:	1a9b      	subs	r3, r3, r2
 800ac6c:	009b      	lsls	r3, r3, #2
 800ac6e:	440b      	add	r3, r1
 800ac70:	3334      	adds	r3, #52	@ 0x34
 800ac72:	6819      	ldr	r1, [r3, #0]
 800ac74:	78fa      	ldrb	r2, [r7, #3]
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	4613      	mov	r3, r2
 800ac7a:	011b      	lsls	r3, r3, #4
 800ac7c:	1a9b      	subs	r3, r3, r2
 800ac7e:	009b      	lsls	r3, r3, #2
 800ac80:	4403      	add	r3, r0
 800ac82:	3328      	adds	r3, #40	@ 0x28
 800ac84:	881b      	ldrh	r3, [r3, #0]
 800ac86:	440b      	add	r3, r1
 800ac88:	1e59      	subs	r1, r3, #1
 800ac8a:	78fa      	ldrb	r2, [r7, #3]
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	4613      	mov	r3, r2
 800ac90:	011b      	lsls	r3, r3, #4
 800ac92:	1a9b      	subs	r3, r3, r2
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4403      	add	r3, r0
 800ac98:	3328      	adds	r3, #40	@ 0x28
 800ac9a:	881b      	ldrh	r3, [r3, #0]
 800ac9c:	fbb1 f3f3 	udiv	r3, r1, r3
 800aca0:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800aca2:	68bb      	ldr	r3, [r7, #8]
 800aca4:	f003 0301 	and.w	r3, r3, #1
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	f000 813f 	beq.w	800af2c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800acae:	78fa      	ldrb	r2, [r7, #3]
 800acb0:	6879      	ldr	r1, [r7, #4]
 800acb2:	4613      	mov	r3, r2
 800acb4:	011b      	lsls	r3, r3, #4
 800acb6:	1a9b      	subs	r3, r3, r2
 800acb8:	009b      	lsls	r3, r3, #2
 800acba:	440b      	add	r3, r1
 800acbc:	333d      	adds	r3, #61	@ 0x3d
 800acbe:	781b      	ldrb	r3, [r3, #0]
 800acc0:	78fa      	ldrb	r2, [r7, #3]
 800acc2:	f083 0301 	eor.w	r3, r3, #1
 800acc6:	b2d8      	uxtb	r0, r3
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	011b      	lsls	r3, r3, #4
 800acce:	1a9b      	subs	r3, r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	333d      	adds	r3, #61	@ 0x3d
 800acd6:	4602      	mov	r2, r0
 800acd8:	701a      	strb	r2, [r3, #0]
 800acda:	e127      	b.n	800af2c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800acdc:	78fa      	ldrb	r2, [r7, #3]
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	011b      	lsls	r3, r3, #4
 800ace4:	1a9b      	subs	r3, r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	334d      	adds	r3, #77	@ 0x4d
 800acec:	781b      	ldrb	r3, [r3, #0]
 800acee:	2b03      	cmp	r3, #3
 800acf0:	d120      	bne.n	800ad34 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800acf2:	78fa      	ldrb	r2, [r7, #3]
 800acf4:	6879      	ldr	r1, [r7, #4]
 800acf6:	4613      	mov	r3, r2
 800acf8:	011b      	lsls	r3, r3, #4
 800acfa:	1a9b      	subs	r3, r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	440b      	add	r3, r1
 800ad00:	334d      	adds	r3, #77	@ 0x4d
 800ad02:	2202      	movs	r2, #2
 800ad04:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800ad06:	78fa      	ldrb	r2, [r7, #3]
 800ad08:	6879      	ldr	r1, [r7, #4]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	011b      	lsls	r3, r3, #4
 800ad0e:	1a9b      	subs	r3, r3, r2
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	440b      	add	r3, r1
 800ad14:	331b      	adds	r3, #27
 800ad16:	781b      	ldrb	r3, [r3, #0]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	f040 8107 	bne.w	800af2c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ad1e:	78fa      	ldrb	r2, [r7, #3]
 800ad20:	6879      	ldr	r1, [r7, #4]
 800ad22:	4613      	mov	r3, r2
 800ad24:	011b      	lsls	r3, r3, #4
 800ad26:	1a9b      	subs	r3, r3, r2
 800ad28:	009b      	lsls	r3, r3, #2
 800ad2a:	440b      	add	r3, r1
 800ad2c:	334c      	adds	r3, #76	@ 0x4c
 800ad2e:	2202      	movs	r2, #2
 800ad30:	701a      	strb	r2, [r3, #0]
 800ad32:	e0fb      	b.n	800af2c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800ad34:	78fa      	ldrb	r2, [r7, #3]
 800ad36:	6879      	ldr	r1, [r7, #4]
 800ad38:	4613      	mov	r3, r2
 800ad3a:	011b      	lsls	r3, r3, #4
 800ad3c:	1a9b      	subs	r3, r3, r2
 800ad3e:	009b      	lsls	r3, r3, #2
 800ad40:	440b      	add	r3, r1
 800ad42:	334d      	adds	r3, #77	@ 0x4d
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d13a      	bne.n	800adc0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ad4a:	78fa      	ldrb	r2, [r7, #3]
 800ad4c:	6879      	ldr	r1, [r7, #4]
 800ad4e:	4613      	mov	r3, r2
 800ad50:	011b      	lsls	r3, r3, #4
 800ad52:	1a9b      	subs	r3, r3, r2
 800ad54:	009b      	lsls	r3, r3, #2
 800ad56:	440b      	add	r3, r1
 800ad58:	334d      	adds	r3, #77	@ 0x4d
 800ad5a:	2202      	movs	r2, #2
 800ad5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800ad5e:	78fa      	ldrb	r2, [r7, #3]
 800ad60:	6879      	ldr	r1, [r7, #4]
 800ad62:	4613      	mov	r3, r2
 800ad64:	011b      	lsls	r3, r3, #4
 800ad66:	1a9b      	subs	r3, r3, r2
 800ad68:	009b      	lsls	r3, r3, #2
 800ad6a:	440b      	add	r3, r1
 800ad6c:	334c      	adds	r3, #76	@ 0x4c
 800ad6e:	2202      	movs	r2, #2
 800ad70:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800ad72:	78fa      	ldrb	r2, [r7, #3]
 800ad74:	6879      	ldr	r1, [r7, #4]
 800ad76:	4613      	mov	r3, r2
 800ad78:	011b      	lsls	r3, r3, #4
 800ad7a:	1a9b      	subs	r3, r3, r2
 800ad7c:	009b      	lsls	r3, r3, #2
 800ad7e:	440b      	add	r3, r1
 800ad80:	331b      	adds	r3, #27
 800ad82:	781b      	ldrb	r3, [r3, #0]
 800ad84:	2b01      	cmp	r3, #1
 800ad86:	f040 80d1 	bne.w	800af2c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	6879      	ldr	r1, [r7, #4]
 800ad8e:	4613      	mov	r3, r2
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	1a9b      	subs	r3, r3, r2
 800ad94:	009b      	lsls	r3, r3, #2
 800ad96:	440b      	add	r3, r1
 800ad98:	331b      	adds	r3, #27
 800ad9a:	2200      	movs	r2, #0
 800ad9c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800ad9e:	78fb      	ldrb	r3, [r7, #3]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	78fa      	ldrb	r2, [r7, #3]
 800adae:	0151      	lsls	r1, r2, #5
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	440a      	add	r2, r1
 800adb4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800adb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800adbc:	6053      	str	r3, [r2, #4]
 800adbe:	e0b5      	b.n	800af2c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800adc0:	78fa      	ldrb	r2, [r7, #3]
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4613      	mov	r3, r2
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	1a9b      	subs	r3, r3, r2
 800adca:	009b      	lsls	r3, r3, #2
 800adcc:	440b      	add	r3, r1
 800adce:	334d      	adds	r3, #77	@ 0x4d
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	2b05      	cmp	r3, #5
 800add4:	d114      	bne.n	800ae00 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800add6:	78fa      	ldrb	r2, [r7, #3]
 800add8:	6879      	ldr	r1, [r7, #4]
 800adda:	4613      	mov	r3, r2
 800addc:	011b      	lsls	r3, r3, #4
 800adde:	1a9b      	subs	r3, r3, r2
 800ade0:	009b      	lsls	r3, r3, #2
 800ade2:	440b      	add	r3, r1
 800ade4:	334d      	adds	r3, #77	@ 0x4d
 800ade6:	2202      	movs	r2, #2
 800ade8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 800adea:	78fa      	ldrb	r2, [r7, #3]
 800adec:	6879      	ldr	r1, [r7, #4]
 800adee:	4613      	mov	r3, r2
 800adf0:	011b      	lsls	r3, r3, #4
 800adf2:	1a9b      	subs	r3, r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	440b      	add	r3, r1
 800adf8:	334c      	adds	r3, #76	@ 0x4c
 800adfa:	2202      	movs	r2, #2
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	e095      	b.n	800af2c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800ae00:	78fa      	ldrb	r2, [r7, #3]
 800ae02:	6879      	ldr	r1, [r7, #4]
 800ae04:	4613      	mov	r3, r2
 800ae06:	011b      	lsls	r3, r3, #4
 800ae08:	1a9b      	subs	r3, r3, r2
 800ae0a:	009b      	lsls	r3, r3, #2
 800ae0c:	440b      	add	r3, r1
 800ae0e:	334d      	adds	r3, #77	@ 0x4d
 800ae10:	781b      	ldrb	r3, [r3, #0]
 800ae12:	2b06      	cmp	r3, #6
 800ae14:	d114      	bne.n	800ae40 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ae16:	78fa      	ldrb	r2, [r7, #3]
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	011b      	lsls	r3, r3, #4
 800ae1e:	1a9b      	subs	r3, r3, r2
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	440b      	add	r3, r1
 800ae24:	334d      	adds	r3, #77	@ 0x4d
 800ae26:	2202      	movs	r2, #2
 800ae28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800ae2a:	78fa      	ldrb	r2, [r7, #3]
 800ae2c:	6879      	ldr	r1, [r7, #4]
 800ae2e:	4613      	mov	r3, r2
 800ae30:	011b      	lsls	r3, r3, #4
 800ae32:	1a9b      	subs	r3, r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	440b      	add	r3, r1
 800ae38:	334c      	adds	r3, #76	@ 0x4c
 800ae3a:	2205      	movs	r2, #5
 800ae3c:	701a      	strb	r2, [r3, #0]
 800ae3e:	e075      	b.n	800af2c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ae40:	78fa      	ldrb	r2, [r7, #3]
 800ae42:	6879      	ldr	r1, [r7, #4]
 800ae44:	4613      	mov	r3, r2
 800ae46:	011b      	lsls	r3, r3, #4
 800ae48:	1a9b      	subs	r3, r3, r2
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	440b      	add	r3, r1
 800ae4e:	334d      	adds	r3, #77	@ 0x4d
 800ae50:	781b      	ldrb	r3, [r3, #0]
 800ae52:	2b07      	cmp	r3, #7
 800ae54:	d00a      	beq.n	800ae6c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800ae56:	78fa      	ldrb	r2, [r7, #3]
 800ae58:	6879      	ldr	r1, [r7, #4]
 800ae5a:	4613      	mov	r3, r2
 800ae5c:	011b      	lsls	r3, r3, #4
 800ae5e:	1a9b      	subs	r3, r3, r2
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	440b      	add	r3, r1
 800ae64:	334d      	adds	r3, #77	@ 0x4d
 800ae66:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800ae68:	2b09      	cmp	r3, #9
 800ae6a:	d170      	bne.n	800af4e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800ae6c:	78fa      	ldrb	r2, [r7, #3]
 800ae6e:	6879      	ldr	r1, [r7, #4]
 800ae70:	4613      	mov	r3, r2
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	1a9b      	subs	r3, r3, r2
 800ae76:	009b      	lsls	r3, r3, #2
 800ae78:	440b      	add	r3, r1
 800ae7a:	334d      	adds	r3, #77	@ 0x4d
 800ae7c:	2202      	movs	r2, #2
 800ae7e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800ae80:	78fa      	ldrb	r2, [r7, #3]
 800ae82:	6879      	ldr	r1, [r7, #4]
 800ae84:	4613      	mov	r3, r2
 800ae86:	011b      	lsls	r3, r3, #4
 800ae88:	1a9b      	subs	r3, r3, r2
 800ae8a:	009b      	lsls	r3, r3, #2
 800ae8c:	440b      	add	r3, r1
 800ae8e:	3344      	adds	r3, #68	@ 0x44
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	1c59      	adds	r1, r3, #1
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	4613      	mov	r3, r2
 800ae98:	011b      	lsls	r3, r3, #4
 800ae9a:	1a9b      	subs	r3, r3, r2
 800ae9c:	009b      	lsls	r3, r3, #2
 800ae9e:	4403      	add	r3, r0
 800aea0:	3344      	adds	r3, #68	@ 0x44
 800aea2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aea4:	78fa      	ldrb	r2, [r7, #3]
 800aea6:	6879      	ldr	r1, [r7, #4]
 800aea8:	4613      	mov	r3, r2
 800aeaa:	011b      	lsls	r3, r3, #4
 800aeac:	1a9b      	subs	r3, r3, r2
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	440b      	add	r3, r1
 800aeb2:	3344      	adds	r3, #68	@ 0x44
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d914      	bls.n	800aee4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800aeba:	78fa      	ldrb	r2, [r7, #3]
 800aebc:	6879      	ldr	r1, [r7, #4]
 800aebe:	4613      	mov	r3, r2
 800aec0:	011b      	lsls	r3, r3, #4
 800aec2:	1a9b      	subs	r3, r3, r2
 800aec4:	009b      	lsls	r3, r3, #2
 800aec6:	440b      	add	r3, r1
 800aec8:	3344      	adds	r3, #68	@ 0x44
 800aeca:	2200      	movs	r2, #0
 800aecc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800aece:	78fa      	ldrb	r2, [r7, #3]
 800aed0:	6879      	ldr	r1, [r7, #4]
 800aed2:	4613      	mov	r3, r2
 800aed4:	011b      	lsls	r3, r3, #4
 800aed6:	1a9b      	subs	r3, r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	440b      	add	r3, r1
 800aedc:	334c      	adds	r3, #76	@ 0x4c
 800aede:	2204      	movs	r2, #4
 800aee0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800aee2:	e022      	b.n	800af2a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800aee4:	78fa      	ldrb	r2, [r7, #3]
 800aee6:	6879      	ldr	r1, [r7, #4]
 800aee8:	4613      	mov	r3, r2
 800aeea:	011b      	lsls	r3, r3, #4
 800aeec:	1a9b      	subs	r3, r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	440b      	add	r3, r1
 800aef2:	334c      	adds	r3, #76	@ 0x4c
 800aef4:	2202      	movs	r2, #2
 800aef6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800aef8:	78fb      	ldrb	r3, [r7, #3]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800af0e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800af16:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800af18:	78fb      	ldrb	r3, [r7, #3]
 800af1a:	015a      	lsls	r2, r3, #5
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	4413      	add	r3, r2
 800af20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800af24:	461a      	mov	r2, r3
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800af2a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800af2c:	78fa      	ldrb	r2, [r7, #3]
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4613      	mov	r3, r2
 800af32:	011b      	lsls	r3, r3, #4
 800af34:	1a9b      	subs	r3, r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	334c      	adds	r3, #76	@ 0x4c
 800af3c:	781a      	ldrb	r2, [r3, #0]
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	4619      	mov	r1, r3
 800af42:	6878      	ldr	r0, [r7, #4]
 800af44:	f005 fd04 	bl	8010950 <HAL_HCD_HC_NotifyURBChange_Callback>
 800af48:	e002      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800af4a:	bf00      	nop
 800af4c:	e000      	b.n	800af50 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800af4e:	bf00      	nop
  }
}
 800af50:	3718      	adds	r7, #24
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b08a      	sub	sp, #40	@ 0x28
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af66:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	f003 030f 	and.w	r3, r3, #15
 800af76:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	0c5b      	lsrs	r3, r3, #17
 800af7c:	f003 030f 	and.w	r3, r3, #15
 800af80:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	091b      	lsrs	r3, r3, #4
 800af86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af8a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	2b02      	cmp	r3, #2
 800af90:	d004      	beq.n	800af9c <HCD_RXQLVL_IRQHandler+0x46>
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2b05      	cmp	r3, #5
 800af96:	f000 80b6 	beq.w	800b106 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800af9a:	e0b7      	b.n	800b10c <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 80b3 	beq.w	800b10a <HCD_RXQLVL_IRQHandler+0x1b4>
 800afa4:	6879      	ldr	r1, [r7, #4]
 800afa6:	69ba      	ldr	r2, [r7, #24]
 800afa8:	4613      	mov	r3, r2
 800afaa:	011b      	lsls	r3, r3, #4
 800afac:	1a9b      	subs	r3, r3, r2
 800afae:	009b      	lsls	r3, r3, #2
 800afb0:	440b      	add	r3, r1
 800afb2:	332c      	adds	r3, #44	@ 0x2c
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	f000 80a7 	beq.w	800b10a <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800afbc:	6879      	ldr	r1, [r7, #4]
 800afbe:	69ba      	ldr	r2, [r7, #24]
 800afc0:	4613      	mov	r3, r2
 800afc2:	011b      	lsls	r3, r3, #4
 800afc4:	1a9b      	subs	r3, r3, r2
 800afc6:	009b      	lsls	r3, r3, #2
 800afc8:	440b      	add	r3, r1
 800afca:	3338      	adds	r3, #56	@ 0x38
 800afcc:	681a      	ldr	r2, [r3, #0]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	18d1      	adds	r1, r2, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	69ba      	ldr	r2, [r7, #24]
 800afd6:	4613      	mov	r3, r2
 800afd8:	011b      	lsls	r3, r3, #4
 800afda:	1a9b      	subs	r3, r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4403      	add	r3, r0
 800afe0:	3334      	adds	r3, #52	@ 0x34
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4299      	cmp	r1, r3
 800afe6:	f200 8083 	bhi.w	800b0f0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	6818      	ldr	r0, [r3, #0]
 800afee:	6879      	ldr	r1, [r7, #4]
 800aff0:	69ba      	ldr	r2, [r7, #24]
 800aff2:	4613      	mov	r3, r2
 800aff4:	011b      	lsls	r3, r3, #4
 800aff6:	1a9b      	subs	r3, r3, r2
 800aff8:	009b      	lsls	r3, r3, #2
 800affa:	440b      	add	r3, r1
 800affc:	332c      	adds	r3, #44	@ 0x2c
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	b292      	uxth	r2, r2
 800b004:	4619      	mov	r1, r3
 800b006:	f002 fb3b 	bl	800d680 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800b00a:	6879      	ldr	r1, [r7, #4]
 800b00c:	69ba      	ldr	r2, [r7, #24]
 800b00e:	4613      	mov	r3, r2
 800b010:	011b      	lsls	r3, r3, #4
 800b012:	1a9b      	subs	r3, r3, r2
 800b014:	009b      	lsls	r3, r3, #2
 800b016:	440b      	add	r3, r1
 800b018:	332c      	adds	r3, #44	@ 0x2c
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	18d1      	adds	r1, r2, r3
 800b020:	6878      	ldr	r0, [r7, #4]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	4613      	mov	r3, r2
 800b026:	011b      	lsls	r3, r3, #4
 800b028:	1a9b      	subs	r3, r3, r2
 800b02a:	009b      	lsls	r3, r3, #2
 800b02c:	4403      	add	r3, r0
 800b02e:	332c      	adds	r3, #44	@ 0x2c
 800b030:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800b032:	6879      	ldr	r1, [r7, #4]
 800b034:	69ba      	ldr	r2, [r7, #24]
 800b036:	4613      	mov	r3, r2
 800b038:	011b      	lsls	r3, r3, #4
 800b03a:	1a9b      	subs	r3, r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	3338      	adds	r3, #56	@ 0x38
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	18d1      	adds	r1, r2, r3
 800b048:	6878      	ldr	r0, [r7, #4]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	4613      	mov	r3, r2
 800b04e:	011b      	lsls	r3, r3, #4
 800b050:	1a9b      	subs	r3, r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4403      	add	r3, r0
 800b056:	3338      	adds	r3, #56	@ 0x38
 800b058:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	015a      	lsls	r2, r3, #5
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	4413      	add	r3, r2
 800b062:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b066:	691b      	ldr	r3, [r3, #16]
 800b068:	0cdb      	lsrs	r3, r3, #19
 800b06a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800b06e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	69ba      	ldr	r2, [r7, #24]
 800b074:	4613      	mov	r3, r2
 800b076:	011b      	lsls	r3, r3, #4
 800b078:	1a9b      	subs	r3, r3, r2
 800b07a:	009b      	lsls	r3, r3, #2
 800b07c:	440b      	add	r3, r1
 800b07e:	3328      	adds	r3, #40	@ 0x28
 800b080:	881b      	ldrh	r3, [r3, #0]
 800b082:	461a      	mov	r2, r3
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	4293      	cmp	r3, r2
 800b088:	d13f      	bne.n	800b10a <HCD_RXQLVL_IRQHandler+0x1b4>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d03c      	beq.n	800b10a <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800b090:	69bb      	ldr	r3, [r7, #24]
 800b092:	015a      	lsls	r2, r3, #5
 800b094:	6a3b      	ldr	r3, [r7, #32]
 800b096:	4413      	add	r3, r2
 800b098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800b0a0:	68bb      	ldr	r3, [r7, #8]
 800b0a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b0a6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b0ae:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800b0b0:	69bb      	ldr	r3, [r7, #24]
 800b0b2:	015a      	lsls	r2, r3, #5
 800b0b4:	6a3b      	ldr	r3, [r7, #32]
 800b0b6:	4413      	add	r3, r2
 800b0b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800b0bc:	461a      	mov	r2, r3
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800b0c2:	6879      	ldr	r1, [r7, #4]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	4613      	mov	r3, r2
 800b0c8:	011b      	lsls	r3, r3, #4
 800b0ca:	1a9b      	subs	r3, r3, r2
 800b0cc:	009b      	lsls	r3, r3, #2
 800b0ce:	440b      	add	r3, r1
 800b0d0:	333c      	adds	r3, #60	@ 0x3c
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	f083 0301 	eor.w	r3, r3, #1
 800b0d8:	b2d8      	uxtb	r0, r3
 800b0da:	6879      	ldr	r1, [r7, #4]
 800b0dc:	69ba      	ldr	r2, [r7, #24]
 800b0de:	4613      	mov	r3, r2
 800b0e0:	011b      	lsls	r3, r3, #4
 800b0e2:	1a9b      	subs	r3, r3, r2
 800b0e4:	009b      	lsls	r3, r3, #2
 800b0e6:	440b      	add	r3, r1
 800b0e8:	333c      	adds	r3, #60	@ 0x3c
 800b0ea:	4602      	mov	r2, r0
 800b0ec:	701a      	strb	r2, [r3, #0]
      break;
 800b0ee:	e00c      	b.n	800b10a <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800b0f0:	6879      	ldr	r1, [r7, #4]
 800b0f2:	69ba      	ldr	r2, [r7, #24]
 800b0f4:	4613      	mov	r3, r2
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	1a9b      	subs	r3, r3, r2
 800b0fa:	009b      	lsls	r3, r3, #2
 800b0fc:	440b      	add	r3, r1
 800b0fe:	334c      	adds	r3, #76	@ 0x4c
 800b100:	2204      	movs	r2, #4
 800b102:	701a      	strb	r2, [r3, #0]
      break;
 800b104:	e001      	b.n	800b10a <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800b10a:	bf00      	nop
  }
}
 800b10c:	bf00      	nop
 800b10e:	3728      	adds	r7, #40	@ 0x28
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800b130:	693b      	ldr	r3, [r7, #16]
 800b132:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800b140:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f003 0302 	and.w	r3, r3, #2
 800b148:	2b02      	cmp	r3, #2
 800b14a:	d10b      	bne.n	800b164 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	f003 0301 	and.w	r3, r3, #1
 800b152:	2b01      	cmp	r3, #1
 800b154:	d102      	bne.n	800b15c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800b156:	6878      	ldr	r0, [r7, #4]
 800b158:	f005 fbde 	bl	8010918 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	f043 0302 	orr.w	r3, r3, #2
 800b162:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f003 0308 	and.w	r3, r3, #8
 800b16a:	2b08      	cmp	r3, #8
 800b16c:	d132      	bne.n	800b1d4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800b16e:	68bb      	ldr	r3, [r7, #8]
 800b170:	f043 0308 	orr.w	r3, r3, #8
 800b174:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	f003 0304 	and.w	r3, r3, #4
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d126      	bne.n	800b1ce <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	7a5b      	ldrb	r3, [r3, #9]
 800b184:	2b02      	cmp	r3, #2
 800b186:	d113      	bne.n	800b1b0 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800b18e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800b192:	d106      	bne.n	800b1a2 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2102      	movs	r1, #2
 800b19a:	4618      	mov	r0, r3
 800b19c:	f002 fc00 	bl	800d9a0 <USB_InitFSLSPClkSel>
 800b1a0:	e011      	b.n	800b1c6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	2101      	movs	r1, #1
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f002 fbf9 	bl	800d9a0 <USB_InitFSLSPClkSel>
 800b1ae:	e00a      	b.n	800b1c6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	79db      	ldrb	r3, [r3, #7]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d106      	bne.n	800b1c6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800b1be:	461a      	mov	r2, r3
 800b1c0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800b1c4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800b1c6:	6878      	ldr	r0, [r7, #4]
 800b1c8:	f005 fbd0 	bl	801096c <HAL_HCD_PortEnabled_Callback>
 800b1cc:	e002      	b.n	800b1d4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800b1ce:	6878      	ldr	r0, [r7, #4]
 800b1d0:	f005 fbda 	bl	8010988 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f003 0320 	and.w	r3, r3, #32
 800b1da:	2b20      	cmp	r3, #32
 800b1dc:	d103      	bne.n	800b1e6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	f043 0320 	orr.w	r3, r3, #32
 800b1e4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800b1e6:	693b      	ldr	r3, [r7, #16]
 800b1e8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6013      	str	r3, [r2, #0]
}
 800b1f2:	bf00      	nop
 800b1f4:	3718      	adds	r7, #24
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d101      	bne.n	800b20e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	e12b      	b.n	800b466 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b214:	b2db      	uxtb	r3, r3
 800b216:	2b00      	cmp	r3, #0
 800b218:	d106      	bne.n	800b228 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fc ffc0 	bl	80081a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2224      	movs	r2, #36	@ 0x24
 800b22c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	681a      	ldr	r2, [r3, #0]
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f022 0201 	bic.w	r2, r2, #1
 800b23e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	681a      	ldr	r2, [r3, #0]
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b24e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	681a      	ldr	r2, [r3, #0]
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b25e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800b260:	f001 fa20 	bl	800c6a4 <HAL_RCC_GetPCLK1Freq>
 800b264:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	685b      	ldr	r3, [r3, #4]
 800b26a:	4a81      	ldr	r2, [pc, #516]	@ (800b470 <HAL_I2C_Init+0x274>)
 800b26c:	4293      	cmp	r3, r2
 800b26e:	d807      	bhi.n	800b280 <HAL_I2C_Init+0x84>
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	4a80      	ldr	r2, [pc, #512]	@ (800b474 <HAL_I2C_Init+0x278>)
 800b274:	4293      	cmp	r3, r2
 800b276:	bf94      	ite	ls
 800b278:	2301      	movls	r3, #1
 800b27a:	2300      	movhi	r3, #0
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	e006      	b.n	800b28e <HAL_I2C_Init+0x92>
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4a7d      	ldr	r2, [pc, #500]	@ (800b478 <HAL_I2C_Init+0x27c>)
 800b284:	4293      	cmp	r3, r2
 800b286:	bf94      	ite	ls
 800b288:	2301      	movls	r3, #1
 800b28a:	2300      	movhi	r3, #0
 800b28c:	b2db      	uxtb	r3, r3
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d001      	beq.n	800b296 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	e0e7      	b.n	800b466 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	4a78      	ldr	r2, [pc, #480]	@ (800b47c <HAL_I2C_Init+0x280>)
 800b29a:	fba2 2303 	umull	r2, r3, r2, r3
 800b29e:	0c9b      	lsrs	r3, r3, #18
 800b2a0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	685b      	ldr	r3, [r3, #4]
 800b2a8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	68ba      	ldr	r2, [r7, #8]
 800b2b2:	430a      	orrs	r2, r1
 800b2b4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	6a1b      	ldr	r3, [r3, #32]
 800b2bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	4a6a      	ldr	r2, [pc, #424]	@ (800b470 <HAL_I2C_Init+0x274>)
 800b2c6:	4293      	cmp	r3, r2
 800b2c8:	d802      	bhi.n	800b2d0 <HAL_I2C_Init+0xd4>
 800b2ca:	68bb      	ldr	r3, [r7, #8]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	e009      	b.n	800b2e4 <HAL_I2C_Init+0xe8>
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800b2d6:	fb02 f303 	mul.w	r3, r2, r3
 800b2da:	4a69      	ldr	r2, [pc, #420]	@ (800b480 <HAL_I2C_Init+0x284>)
 800b2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e0:	099b      	lsrs	r3, r3, #6
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6812      	ldr	r2, [r2, #0]
 800b2e8:	430b      	orrs	r3, r1
 800b2ea:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69db      	ldr	r3, [r3, #28]
 800b2f2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800b2f6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	495c      	ldr	r1, [pc, #368]	@ (800b470 <HAL_I2C_Init+0x274>)
 800b300:	428b      	cmp	r3, r1
 800b302:	d819      	bhi.n	800b338 <HAL_I2C_Init+0x13c>
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	1e59      	subs	r1, r3, #1
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	005b      	lsls	r3, r3, #1
 800b30e:	fbb1 f3f3 	udiv	r3, r1, r3
 800b312:	1c59      	adds	r1, r3, #1
 800b314:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800b318:	400b      	ands	r3, r1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d00a      	beq.n	800b334 <HAL_I2C_Init+0x138>
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1e59      	subs	r1, r3, #1
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	685b      	ldr	r3, [r3, #4]
 800b326:	005b      	lsls	r3, r3, #1
 800b328:	fbb1 f3f3 	udiv	r3, r1, r3
 800b32c:	3301      	adds	r3, #1
 800b32e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b332:	e051      	b.n	800b3d8 <HAL_I2C_Init+0x1dc>
 800b334:	2304      	movs	r3, #4
 800b336:	e04f      	b.n	800b3d8 <HAL_I2C_Init+0x1dc>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d111      	bne.n	800b364 <HAL_I2C_Init+0x168>
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	1e58      	subs	r0, r3, #1
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6859      	ldr	r1, [r3, #4]
 800b348:	460b      	mov	r3, r1
 800b34a:	005b      	lsls	r3, r3, #1
 800b34c:	440b      	add	r3, r1
 800b34e:	fbb0 f3f3 	udiv	r3, r0, r3
 800b352:	3301      	adds	r3, #1
 800b354:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b358:	2b00      	cmp	r3, #0
 800b35a:	bf0c      	ite	eq
 800b35c:	2301      	moveq	r3, #1
 800b35e:	2300      	movne	r3, #0
 800b360:	b2db      	uxtb	r3, r3
 800b362:	e012      	b.n	800b38a <HAL_I2C_Init+0x18e>
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	1e58      	subs	r0, r3, #1
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	6859      	ldr	r1, [r3, #4]
 800b36c:	460b      	mov	r3, r1
 800b36e:	009b      	lsls	r3, r3, #2
 800b370:	440b      	add	r3, r1
 800b372:	0099      	lsls	r1, r3, #2
 800b374:	440b      	add	r3, r1
 800b376:	fbb0 f3f3 	udiv	r3, r0, r3
 800b37a:	3301      	adds	r3, #1
 800b37c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b380:	2b00      	cmp	r3, #0
 800b382:	bf0c      	ite	eq
 800b384:	2301      	moveq	r3, #1
 800b386:	2300      	movne	r3, #0
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d001      	beq.n	800b392 <HAL_I2C_Init+0x196>
 800b38e:	2301      	movs	r3, #1
 800b390:	e022      	b.n	800b3d8 <HAL_I2C_Init+0x1dc>
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d10e      	bne.n	800b3b8 <HAL_I2C_Init+0x1bc>
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	1e58      	subs	r0, r3, #1
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	6859      	ldr	r1, [r3, #4]
 800b3a2:	460b      	mov	r3, r1
 800b3a4:	005b      	lsls	r3, r3, #1
 800b3a6:	440b      	add	r3, r1
 800b3a8:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3ac:	3301      	adds	r3, #1
 800b3ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b3b6:	e00f      	b.n	800b3d8 <HAL_I2C_Init+0x1dc>
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	1e58      	subs	r0, r3, #1
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6859      	ldr	r1, [r3, #4]
 800b3c0:	460b      	mov	r3, r1
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	440b      	add	r3, r1
 800b3c6:	0099      	lsls	r1, r3, #2
 800b3c8:	440b      	add	r3, r1
 800b3ca:	fbb0 f3f3 	udiv	r3, r0, r3
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3d4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800b3d8:	6879      	ldr	r1, [r7, #4]
 800b3da:	6809      	ldr	r1, [r1, #0]
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	69da      	ldr	r2, [r3, #28]
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6a1b      	ldr	r3, [r3, #32]
 800b3f2:	431a      	orrs	r2, r3
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	430a      	orrs	r2, r1
 800b3fa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	689b      	ldr	r3, [r3, #8]
 800b402:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800b406:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	6911      	ldr	r1, [r2, #16]
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	68d2      	ldr	r2, [r2, #12]
 800b412:	4311      	orrs	r1, r2
 800b414:	687a      	ldr	r2, [r7, #4]
 800b416:	6812      	ldr	r2, [r2, #0]
 800b418:	430b      	orrs	r3, r1
 800b41a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68db      	ldr	r3, [r3, #12]
 800b422:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	695a      	ldr	r2, [r3, #20]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	699b      	ldr	r3, [r3, #24]
 800b42e:	431a      	orrs	r2, r3
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	430a      	orrs	r2, r1
 800b436:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	681a      	ldr	r2, [r3, #0]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f042 0201 	orr.w	r2, r2, #1
 800b446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2200      	movs	r2, #0
 800b44c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2220      	movs	r2, #32
 800b452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2200      	movs	r2, #0
 800b460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
 800b46e:	bf00      	nop
 800b470:	000186a0 	.word	0x000186a0
 800b474:	001e847f 	.word	0x001e847f
 800b478:	003d08ff 	.word	0x003d08ff
 800b47c:	431bde83 	.word	0x431bde83
 800b480:	10624dd3 	.word	0x10624dd3

0800b484 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800b484:	b580      	push	{r7, lr}
 800b486:	b088      	sub	sp, #32
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d101      	bne.n	800b496 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800b492:	2301      	movs	r3, #1
 800b494:	e128      	b.n	800b6e8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d109      	bne.n	800b4b6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4a90      	ldr	r2, [pc, #576]	@ (800b6f0 <HAL_I2S_Init+0x26c>)
 800b4ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800b4b0:	6878      	ldr	r0, [r7, #4]
 800b4b2:	f7fc fec1 	bl	8008238 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2202      	movs	r2, #2
 800b4ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	69db      	ldr	r3, [r3, #28]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	6812      	ldr	r2, [r2, #0]
 800b4c8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800b4cc:	f023 030f 	bic.w	r3, r3, #15
 800b4d0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d060      	beq.n	800b5a4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	68db      	ldr	r3, [r3, #12]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d102      	bne.n	800b4f0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800b4ea:	2310      	movs	r3, #16
 800b4ec:	617b      	str	r3, [r7, #20]
 800b4ee:	e001      	b.n	800b4f4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800b4f0:	2320      	movs	r3, #32
 800b4f2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	689b      	ldr	r3, [r3, #8]
 800b4f8:	2b20      	cmp	r3, #32
 800b4fa:	d802      	bhi.n	800b502 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	005b      	lsls	r3, r3, #1
 800b500:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800b502:	2001      	movs	r0, #1
 800b504:	f001 f9d8 	bl	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq>
 800b508:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	691b      	ldr	r3, [r3, #16]
 800b50e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b512:	d125      	bne.n	800b560 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	68db      	ldr	r3, [r3, #12]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d010      	beq.n	800b53e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	009b      	lsls	r3, r3, #2
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	fbb2 f2f3 	udiv	r2, r2, r3
 800b526:	4613      	mov	r3, r2
 800b528:	009b      	lsls	r3, r3, #2
 800b52a:	4413      	add	r3, r2
 800b52c:	005b      	lsls	r3, r3, #1
 800b52e:	461a      	mov	r2, r3
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	fbb2 f3f3 	udiv	r3, r2, r3
 800b538:	3305      	adds	r3, #5
 800b53a:	613b      	str	r3, [r7, #16]
 800b53c:	e01f      	b.n	800b57e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b53e:	697b      	ldr	r3, [r7, #20]
 800b540:	00db      	lsls	r3, r3, #3
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	fbb2 f2f3 	udiv	r2, r2, r3
 800b548:	4613      	mov	r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4413      	add	r3, r2
 800b54e:	005b      	lsls	r3, r3, #1
 800b550:	461a      	mov	r2, r3
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	fbb2 f3f3 	udiv	r3, r2, r3
 800b55a:	3305      	adds	r3, #5
 800b55c:	613b      	str	r3, [r7, #16]
 800b55e:	e00e      	b.n	800b57e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	697b      	ldr	r3, [r7, #20]
 800b564:	fbb2 f2f3 	udiv	r2, r2, r3
 800b568:	4613      	mov	r3, r2
 800b56a:	009b      	lsls	r3, r3, #2
 800b56c:	4413      	add	r3, r2
 800b56e:	005b      	lsls	r3, r3, #1
 800b570:	461a      	mov	r2, r3
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	695b      	ldr	r3, [r3, #20]
 800b576:	fbb2 f3f3 	udiv	r3, r2, r3
 800b57a:	3305      	adds	r3, #5
 800b57c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800b57e:	693b      	ldr	r3, [r7, #16]
 800b580:	4a5c      	ldr	r2, [pc, #368]	@ (800b6f4 <HAL_I2S_Init+0x270>)
 800b582:	fba2 2303 	umull	r2, r3, r2, r3
 800b586:	08db      	lsrs	r3, r3, #3
 800b588:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800b58a:	693b      	ldr	r3, [r7, #16]
 800b58c:	f003 0301 	and.w	r3, r3, #1
 800b590:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800b592:	693a      	ldr	r2, [r7, #16]
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	1ad3      	subs	r3, r2, r3
 800b598:	085b      	lsrs	r3, r3, #1
 800b59a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b59c:	69bb      	ldr	r3, [r7, #24]
 800b59e:	021b      	lsls	r3, r3, #8
 800b5a0:	61bb      	str	r3, [r7, #24]
 800b5a2:	e003      	b.n	800b5ac <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b5a4:	2302      	movs	r3, #2
 800b5a6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b5ac:	69fb      	ldr	r3, [r7, #28]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d902      	bls.n	800b5b8 <HAL_I2S_Init+0x134>
 800b5b2:	69fb      	ldr	r3, [r7, #28]
 800b5b4:	2bff      	cmp	r3, #255	@ 0xff
 800b5b6:	d907      	bls.n	800b5c8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b5bc:	f043 0210 	orr.w	r2, r3, #16
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800b5c4:	2301      	movs	r3, #1
 800b5c6:	e08f      	b.n	800b6e8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	691a      	ldr	r2, [r3, #16]
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	ea42 0103 	orr.w	r1, r2, r3
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	69fa      	ldr	r2, [r7, #28]
 800b5d8:	430a      	orrs	r2, r1
 800b5da:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	69db      	ldr	r3, [r3, #28]
 800b5e2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800b5e6:	f023 030f 	bic.w	r3, r3, #15
 800b5ea:	687a      	ldr	r2, [r7, #4]
 800b5ec:	6851      	ldr	r1, [r2, #4]
 800b5ee:	687a      	ldr	r2, [r7, #4]
 800b5f0:	6892      	ldr	r2, [r2, #8]
 800b5f2:	4311      	orrs	r1, r2
 800b5f4:	687a      	ldr	r2, [r7, #4]
 800b5f6:	68d2      	ldr	r2, [r2, #12]
 800b5f8:	4311      	orrs	r1, r2
 800b5fa:	687a      	ldr	r2, [r7, #4]
 800b5fc:	6992      	ldr	r2, [r2, #24]
 800b5fe:	430a      	orrs	r2, r1
 800b600:	431a      	orrs	r2, r3
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800b60a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6a1b      	ldr	r3, [r3, #32]
 800b610:	2b01      	cmp	r3, #1
 800b612:	d161      	bne.n	800b6d8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	4a38      	ldr	r2, [pc, #224]	@ (800b6f8 <HAL_I2S_Init+0x274>)
 800b618:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	4a37      	ldr	r2, [pc, #220]	@ (800b6fc <HAL_I2S_Init+0x278>)
 800b620:	4293      	cmp	r3, r2
 800b622:	d101      	bne.n	800b628 <HAL_I2S_Init+0x1a4>
 800b624:	4b36      	ldr	r3, [pc, #216]	@ (800b700 <HAL_I2S_Init+0x27c>)
 800b626:	e001      	b.n	800b62c <HAL_I2S_Init+0x1a8>
 800b628:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b62c:	69db      	ldr	r3, [r3, #28]
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	6812      	ldr	r2, [r2, #0]
 800b632:	4932      	ldr	r1, [pc, #200]	@ (800b6fc <HAL_I2S_Init+0x278>)
 800b634:	428a      	cmp	r2, r1
 800b636:	d101      	bne.n	800b63c <HAL_I2S_Init+0x1b8>
 800b638:	4a31      	ldr	r2, [pc, #196]	@ (800b700 <HAL_I2S_Init+0x27c>)
 800b63a:	e001      	b.n	800b640 <HAL_I2S_Init+0x1bc>
 800b63c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800b640:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800b644:	f023 030f 	bic.w	r3, r3, #15
 800b648:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	4a2b      	ldr	r2, [pc, #172]	@ (800b6fc <HAL_I2S_Init+0x278>)
 800b650:	4293      	cmp	r3, r2
 800b652:	d101      	bne.n	800b658 <HAL_I2S_Init+0x1d4>
 800b654:	4b2a      	ldr	r3, [pc, #168]	@ (800b700 <HAL_I2S_Init+0x27c>)
 800b656:	e001      	b.n	800b65c <HAL_I2S_Init+0x1d8>
 800b658:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b65c:	2202      	movs	r2, #2
 800b65e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	4a25      	ldr	r2, [pc, #148]	@ (800b6fc <HAL_I2S_Init+0x278>)
 800b666:	4293      	cmp	r3, r2
 800b668:	d101      	bne.n	800b66e <HAL_I2S_Init+0x1ea>
 800b66a:	4b25      	ldr	r3, [pc, #148]	@ (800b700 <HAL_I2S_Init+0x27c>)
 800b66c:	e001      	b.n	800b672 <HAL_I2S_Init+0x1ee>
 800b66e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b672:	69db      	ldr	r3, [r3, #28]
 800b674:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b67e:	d003      	beq.n	800b688 <HAL_I2S_Init+0x204>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	685b      	ldr	r3, [r3, #4]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d103      	bne.n	800b690 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800b688:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800b68c:	613b      	str	r3, [r7, #16]
 800b68e:	e001      	b.n	800b694 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800b690:	2300      	movs	r3, #0
 800b692:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800b694:	693b      	ldr	r3, [r7, #16]
 800b696:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b6a8:	4313      	orrs	r3, r2
 800b6aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	699b      	ldr	r3, [r3, #24]
 800b6b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	b29a      	uxth	r2, r3
 800b6b6:	897b      	ldrh	r3, [r7, #10]
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	b29b      	uxth	r3, r3
 800b6bc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800b6c0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4a0d      	ldr	r2, [pc, #52]	@ (800b6fc <HAL_I2S_Init+0x278>)
 800b6c8:	4293      	cmp	r3, r2
 800b6ca:	d101      	bne.n	800b6d0 <HAL_I2S_Init+0x24c>
 800b6cc:	4b0c      	ldr	r3, [pc, #48]	@ (800b700 <HAL_I2S_Init+0x27c>)
 800b6ce:	e001      	b.n	800b6d4 <HAL_I2S_Init+0x250>
 800b6d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b6d4:	897a      	ldrh	r2, [r7, #10]
 800b6d6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2200      	movs	r2, #0
 800b6dc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2201      	movs	r2, #1
 800b6e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	3720      	adds	r7, #32
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	bd80      	pop	{r7, pc}
 800b6f0:	0800b7fb 	.word	0x0800b7fb
 800b6f4:	cccccccd 	.word	0xcccccccd
 800b6f8:	0800b911 	.word	0x0800b911
 800b6fc:	40003800 	.word	0x40003800
 800b700:	40003400 	.word	0x40003400

0800b704 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b704:	b480      	push	{r7}
 800b706:	b083      	sub	sp, #12
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b718:	b480      	push	{r7}
 800b71a:	b083      	sub	sp, #12
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800b720:	bf00      	nop
 800b722:	370c      	adds	r7, #12
 800b724:	46bd      	mov	sp, r7
 800b726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72a:	4770      	bx	lr

0800b72c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b72c:	b480      	push	{r7}
 800b72e:	b083      	sub	sp, #12
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b734:	bf00      	nop
 800b736:	370c      	adds	r7, #12
 800b738:	46bd      	mov	sp, r7
 800b73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73e:	4770      	bx	lr

0800b740 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b082      	sub	sp, #8
 800b744:	af00      	add	r7, sp, #0
 800b746:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b74c:	881a      	ldrh	r2, [r3, #0]
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b758:	1c9a      	adds	r2, r3, #2
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b762:	b29b      	uxth	r3, r3
 800b764:	3b01      	subs	r3, #1
 800b766:	b29a      	uxth	r2, r3
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b770:	b29b      	uxth	r3, r3
 800b772:	2b00      	cmp	r3, #0
 800b774:	d10e      	bne.n	800b794 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	685a      	ldr	r2, [r3, #4]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800b784:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800b78e:	6878      	ldr	r0, [r7, #4]
 800b790:	f7ff ffb8 	bl	800b704 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}

0800b79c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7ae:	b292      	uxth	r2, r2
 800b7b0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7b6:	1c9a      	adds	r2, r3, #2
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7c0:	b29b      	uxth	r3, r3
 800b7c2:	3b01      	subs	r3, #1
 800b7c4:	b29a      	uxth	r2, r3
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800b7ce:	b29b      	uxth	r3, r3
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d10e      	bne.n	800b7f2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800b7e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800b7ec:	6878      	ldr	r0, [r7, #4]
 800b7ee:	f7ff ff93 	bl	800b718 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800b7f2:	bf00      	nop
 800b7f4:	3708      	adds	r7, #8
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	bd80      	pop	{r7, pc}

0800b7fa <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b7fa:	b580      	push	{r7, lr}
 800b7fc:	b086      	sub	sp, #24
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	689b      	ldr	r3, [r3, #8]
 800b808:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b810:	b2db      	uxtb	r3, r3
 800b812:	2b04      	cmp	r3, #4
 800b814:	d13a      	bne.n	800b88c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800b816:	697b      	ldr	r3, [r7, #20]
 800b818:	f003 0301 	and.w	r3, r3, #1
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d109      	bne.n	800b834 <I2S_IRQHandler+0x3a>
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	685b      	ldr	r3, [r3, #4]
 800b826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b82a:	2b40      	cmp	r3, #64	@ 0x40
 800b82c:	d102      	bne.n	800b834 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800b82e:	6878      	ldr	r0, [r7, #4]
 800b830:	f7ff ffb4 	bl	800b79c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b834:	697b      	ldr	r3, [r7, #20]
 800b836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b83a:	2b40      	cmp	r3, #64	@ 0x40
 800b83c:	d126      	bne.n	800b88c <I2S_IRQHandler+0x92>
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	f003 0320 	and.w	r3, r3, #32
 800b848:	2b20      	cmp	r3, #32
 800b84a:	d11f      	bne.n	800b88c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	685a      	ldr	r2, [r3, #4]
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800b85a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b85c:	2300      	movs	r3, #0
 800b85e:	613b      	str	r3, [r7, #16]
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	613b      	str	r3, [r7, #16]
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	613b      	str	r3, [r7, #16]
 800b870:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2201      	movs	r2, #1
 800b876:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b87e:	f043 0202 	orr.w	r2, r3, #2
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b886:	6878      	ldr	r0, [r7, #4]
 800b888:	f7ff ff50 	bl	800b72c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b892:	b2db      	uxtb	r3, r3
 800b894:	2b03      	cmp	r3, #3
 800b896:	d136      	bne.n	800b906 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	f003 0302 	and.w	r3, r3, #2
 800b89e:	2b02      	cmp	r3, #2
 800b8a0:	d109      	bne.n	800b8b6 <I2S_IRQHandler+0xbc>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	685b      	ldr	r3, [r3, #4]
 800b8a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b8ac:	2b80      	cmp	r3, #128	@ 0x80
 800b8ae:	d102      	bne.n	800b8b6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f7ff ff45 	bl	800b740 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	f003 0308 	and.w	r3, r3, #8
 800b8bc:	2b08      	cmp	r3, #8
 800b8be:	d122      	bne.n	800b906 <I2S_IRQHandler+0x10c>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	685b      	ldr	r3, [r3, #4]
 800b8c6:	f003 0320 	and.w	r3, r3, #32
 800b8ca:	2b20      	cmp	r3, #32
 800b8cc:	d11b      	bne.n	800b906 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800b8dc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b8de:	2300      	movs	r3, #0
 800b8e0:	60fb      	str	r3, [r7, #12]
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	681b      	ldr	r3, [r3, #0]
 800b8e6:	689b      	ldr	r3, [r3, #8]
 800b8e8:	60fb      	str	r3, [r7, #12]
 800b8ea:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2201      	movs	r2, #1
 800b8f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8f8:	f043 0204 	orr.w	r2, r3, #4
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800b900:	6878      	ldr	r0, [r7, #4]
 800b902:	f7ff ff13 	bl	800b72c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800b906:	bf00      	nop
 800b908:	3718      	adds	r7, #24
 800b90a:	46bd      	mov	sp, r7
 800b90c:	bd80      	pop	{r7, pc}
	...

0800b910 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800b910:	b580      	push	{r7, lr}
 800b912:	b088      	sub	sp, #32
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	689b      	ldr	r3, [r3, #8]
 800b91e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	4a92      	ldr	r2, [pc, #584]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b926:	4293      	cmp	r3, r2
 800b928:	d101      	bne.n	800b92e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800b92a:	4b92      	ldr	r3, [pc, #584]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b92c:	e001      	b.n	800b932 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800b92e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	4a8b      	ldr	r2, [pc, #556]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b944:	4293      	cmp	r3, r2
 800b946:	d101      	bne.n	800b94c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800b948:	4b8a      	ldr	r3, [pc, #552]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b94a:	e001      	b.n	800b950 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800b94c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b950:	685b      	ldr	r3, [r3, #4]
 800b952:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	685b      	ldr	r3, [r3, #4]
 800b958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b95c:	d004      	beq.n	800b968 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	685b      	ldr	r3, [r3, #4]
 800b962:	2b00      	cmp	r3, #0
 800b964:	f040 8099 	bne.w	800ba9a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800b968:	69fb      	ldr	r3, [r7, #28]
 800b96a:	f003 0302 	and.w	r3, r3, #2
 800b96e:	2b02      	cmp	r3, #2
 800b970:	d107      	bne.n	800b982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d002      	beq.n	800b982 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800b97c:	6878      	ldr	r0, [r7, #4]
 800b97e:	f000 f925 	bl	800bbcc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800b982:	69bb      	ldr	r3, [r7, #24]
 800b984:	f003 0301 	and.w	r3, r3, #1
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d107      	bne.n	800b99c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b992:	2b00      	cmp	r3, #0
 800b994:	d002      	beq.n	800b99c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	f000 f9c8 	bl	800bd2c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800b99c:	69bb      	ldr	r3, [r7, #24]
 800b99e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b9a2:	2b40      	cmp	r3, #64	@ 0x40
 800b9a4:	d13a      	bne.n	800ba1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800b9a6:	693b      	ldr	r3, [r7, #16]
 800b9a8:	f003 0320 	and.w	r3, r3, #32
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d035      	beq.n	800ba1c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	4a6e      	ldr	r2, [pc, #440]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b9b6:	4293      	cmp	r3, r2
 800b9b8:	d101      	bne.n	800b9be <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800b9ba:	4b6e      	ldr	r3, [pc, #440]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b9bc:	e001      	b.n	800b9c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800b9be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b9c2:	685a      	ldr	r2, [r3, #4]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	4969      	ldr	r1, [pc, #420]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800b9ca:	428b      	cmp	r3, r1
 800b9cc:	d101      	bne.n	800b9d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800b9ce:	4b69      	ldr	r3, [pc, #420]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800b9d0:	e001      	b.n	800b9d6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800b9d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800b9d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800b9da:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	685a      	ldr	r2, [r3, #4]
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800b9ea:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	60fb      	str	r3, [r7, #12]
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	60fb      	str	r3, [r7, #12]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	60fb      	str	r3, [r7, #12]
 800ba00:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2201      	movs	r2, #1
 800ba06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba0e:	f043 0202 	orr.w	r2, r3, #2
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f7ff fe88 	bl	800b72c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800ba1c:	69fb      	ldr	r3, [r7, #28]
 800ba1e:	f003 0308 	and.w	r3, r3, #8
 800ba22:	2b08      	cmp	r3, #8
 800ba24:	f040 80c3 	bne.w	800bbae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	f003 0320 	and.w	r3, r3, #32
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	f000 80bd 	beq.w	800bbae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	685a      	ldr	r2, [r3, #4]
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ba42:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	4a49      	ldr	r2, [pc, #292]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800ba4a:	4293      	cmp	r3, r2
 800ba4c:	d101      	bne.n	800ba52 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800ba4e:	4b49      	ldr	r3, [pc, #292]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800ba50:	e001      	b.n	800ba56 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800ba52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ba56:	685a      	ldr	r2, [r3, #4]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	4944      	ldr	r1, [pc, #272]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800ba5e:	428b      	cmp	r3, r1
 800ba60:	d101      	bne.n	800ba66 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800ba62:	4b44      	ldr	r3, [pc, #272]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800ba64:	e001      	b.n	800ba6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800ba66:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ba6a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ba6e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800ba70:	2300      	movs	r3, #0
 800ba72:	60bb      	str	r3, [r7, #8]
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	689b      	ldr	r3, [r3, #8]
 800ba7a:	60bb      	str	r3, [r7, #8]
 800ba7c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba8a:	f043 0204 	orr.w	r2, r3, #4
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800ba92:	6878      	ldr	r0, [r7, #4]
 800ba94:	f7ff fe4a 	bl	800b72c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800ba98:	e089      	b.n	800bbae <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800ba9a:	69bb      	ldr	r3, [r7, #24]
 800ba9c:	f003 0302 	and.w	r3, r3, #2
 800baa0:	2b02      	cmp	r3, #2
 800baa2:	d107      	bne.n	800bab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800baa4:	693b      	ldr	r3, [r7, #16]
 800baa6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d002      	beq.n	800bab4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f8be 	bl	800bc30 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800bab4:	69fb      	ldr	r3, [r7, #28]
 800bab6:	f003 0301 	and.w	r3, r3, #1
 800baba:	2b01      	cmp	r3, #1
 800babc:	d107      	bne.n	800bace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d002      	beq.n	800bace <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	f000 f8fd 	bl	800bcc8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800bace:	69fb      	ldr	r3, [r7, #28]
 800bad0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bad4:	2b40      	cmp	r3, #64	@ 0x40
 800bad6:	d12f      	bne.n	800bb38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800bad8:	697b      	ldr	r3, [r7, #20]
 800bada:	f003 0320 	and.w	r3, r3, #32
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d02a      	beq.n	800bb38 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	685a      	ldr	r2, [r3, #4]
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800baf0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a1e      	ldr	r2, [pc, #120]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d101      	bne.n	800bb00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800bafc:	4b1d      	ldr	r3, [pc, #116]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800bafe:	e001      	b.n	800bb04 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800bb00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bb04:	685a      	ldr	r2, [r3, #4]
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4919      	ldr	r1, [pc, #100]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800bb0c:	428b      	cmp	r3, r1
 800bb0e:	d101      	bne.n	800bb14 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800bb10:	4b18      	ldr	r3, [pc, #96]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800bb12:	e001      	b.n	800bb18 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800bb14:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bb18:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bb1c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2201      	movs	r2, #1
 800bb22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb2a:	f043 0202 	orr.w	r2, r3, #2
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7ff fdfa 	bl	800b72c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	f003 0308 	and.w	r3, r3, #8
 800bb3e:	2b08      	cmp	r3, #8
 800bb40:	d136      	bne.n	800bbb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	f003 0320 	and.w	r3, r3, #32
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d031      	beq.n	800bbb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a07      	ldr	r2, [pc, #28]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d101      	bne.n	800bb5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800bb56:	4b07      	ldr	r3, [pc, #28]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800bb58:	e001      	b.n	800bb5e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800bb5a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bb5e:	685a      	ldr	r2, [r3, #4]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4902      	ldr	r1, [pc, #8]	@ (800bb70 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800bb66:	428b      	cmp	r3, r1
 800bb68:	d106      	bne.n	800bb78 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800bb6a:	4b02      	ldr	r3, [pc, #8]	@ (800bb74 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800bb6c:	e006      	b.n	800bb7c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800bb6e:	bf00      	nop
 800bb70:	40003800 	.word	0x40003800
 800bb74:	40003400 	.word	0x40003400
 800bb78:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bb7c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bb80:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	685a      	ldr	r2, [r3, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800bb90:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bb9e:	f043 0204 	orr.w	r2, r3, #4
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7ff fdc0 	bl	800b72c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bbac:	e000      	b.n	800bbb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800bbae:	bf00      	nop
}
 800bbb0:	bf00      	nop
 800bbb2:	3720      	adds	r7, #32
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	bd80      	pop	{r7, pc}

0800bbb8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800bbb8:	b480      	push	{r7}
 800bbba:	b083      	sub	sp, #12
 800bbbc:	af00      	add	r7, sp, #0
 800bbbe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800bbc0:	bf00      	nop
 800bbc2:	370c      	adds	r7, #12
 800bbc4:	46bd      	mov	sp, r7
 800bbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbca:	4770      	bx	lr

0800bbcc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b082      	sub	sp, #8
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd8:	1c99      	adds	r1, r3, #2
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	6251      	str	r1, [r2, #36]	@ 0x24
 800bbde:	881a      	ldrh	r2, [r3, #0]
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbea:	b29b      	uxth	r3, r3
 800bbec:	3b01      	subs	r3, #1
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d113      	bne.n	800bc26 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	685a      	ldr	r2, [r3, #4]
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bc0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d106      	bne.n	800bc26 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f7ff ffc9 	bl	800bbb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bc26:	bf00      	nop
 800bc28:	3708      	adds	r7, #8
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b082      	sub	sp, #8
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc3c:	1c99      	adds	r1, r3, #2
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	6251      	str	r1, [r2, #36]	@ 0x24
 800bc42:	8819      	ldrh	r1, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	4a1d      	ldr	r2, [pc, #116]	@ (800bcc0 <I2SEx_TxISR_I2SExt+0x90>)
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	d101      	bne.n	800bc52 <I2SEx_TxISR_I2SExt+0x22>
 800bc4e:	4b1d      	ldr	r3, [pc, #116]	@ (800bcc4 <I2SEx_TxISR_I2SExt+0x94>)
 800bc50:	e001      	b.n	800bc56 <I2SEx_TxISR_I2SExt+0x26>
 800bc52:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bc56:	460a      	mov	r2, r1
 800bc58:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc5e:	b29b      	uxth	r3, r3
 800bc60:	3b01      	subs	r3, #1
 800bc62:	b29a      	uxth	r2, r3
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d121      	bne.n	800bcb6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4a12      	ldr	r2, [pc, #72]	@ (800bcc0 <I2SEx_TxISR_I2SExt+0x90>)
 800bc78:	4293      	cmp	r3, r2
 800bc7a:	d101      	bne.n	800bc80 <I2SEx_TxISR_I2SExt+0x50>
 800bc7c:	4b11      	ldr	r3, [pc, #68]	@ (800bcc4 <I2SEx_TxISR_I2SExt+0x94>)
 800bc7e:	e001      	b.n	800bc84 <I2SEx_TxISR_I2SExt+0x54>
 800bc80:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bc84:	685a      	ldr	r2, [r3, #4]
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	490d      	ldr	r1, [pc, #52]	@ (800bcc0 <I2SEx_TxISR_I2SExt+0x90>)
 800bc8c:	428b      	cmp	r3, r1
 800bc8e:	d101      	bne.n	800bc94 <I2SEx_TxISR_I2SExt+0x64>
 800bc90:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc4 <I2SEx_TxISR_I2SExt+0x94>)
 800bc92:	e001      	b.n	800bc98 <I2SEx_TxISR_I2SExt+0x68>
 800bc94:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bc98:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800bc9c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d106      	bne.n	800bcb6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2201      	movs	r2, #1
 800bcac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7ff ff81 	bl	800bbb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	40003800 	.word	0x40003800
 800bcc4:	40003400 	.word	0x40003400

0800bcc8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b082      	sub	sp, #8
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	68d8      	ldr	r0, [r3, #12]
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcda:	1c99      	adds	r1, r3, #2
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800bce0:	b282      	uxth	r2, r0
 800bce2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bce8:	b29b      	uxth	r3, r3
 800bcea:	3b01      	subs	r3, #1
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d113      	bne.n	800bd24 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	685a      	ldr	r2, [r3, #4]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800bd0a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d106      	bne.n	800bd24 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	2201      	movs	r2, #1
 800bd1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f7ff ff4a 	bl	800bbb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bd24:	bf00      	nop
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}

0800bd2c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800bd2c:	b580      	push	{r7, lr}
 800bd2e:	b082      	sub	sp, #8
 800bd30:	af00      	add	r7, sp, #0
 800bd32:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a20      	ldr	r2, [pc, #128]	@ (800bdbc <I2SEx_RxISR_I2SExt+0x90>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d101      	bne.n	800bd42 <I2SEx_RxISR_I2SExt+0x16>
 800bd3e:	4b20      	ldr	r3, [pc, #128]	@ (800bdc0 <I2SEx_RxISR_I2SExt+0x94>)
 800bd40:	e001      	b.n	800bd46 <I2SEx_RxISR_I2SExt+0x1a>
 800bd42:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bd46:	68d8      	ldr	r0, [r3, #12]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd4c:	1c99      	adds	r1, r3, #2
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800bd52:	b282      	uxth	r2, r0
 800bd54:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd5a:	b29b      	uxth	r3, r3
 800bd5c:	3b01      	subs	r3, #1
 800bd5e:	b29a      	uxth	r2, r3
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d121      	bne.n	800bdb2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	4a12      	ldr	r2, [pc, #72]	@ (800bdbc <I2SEx_RxISR_I2SExt+0x90>)
 800bd74:	4293      	cmp	r3, r2
 800bd76:	d101      	bne.n	800bd7c <I2SEx_RxISR_I2SExt+0x50>
 800bd78:	4b11      	ldr	r3, [pc, #68]	@ (800bdc0 <I2SEx_RxISR_I2SExt+0x94>)
 800bd7a:	e001      	b.n	800bd80 <I2SEx_RxISR_I2SExt+0x54>
 800bd7c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bd80:	685a      	ldr	r2, [r3, #4]
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	490d      	ldr	r1, [pc, #52]	@ (800bdbc <I2SEx_RxISR_I2SExt+0x90>)
 800bd88:	428b      	cmp	r3, r1
 800bd8a:	d101      	bne.n	800bd90 <I2SEx_RxISR_I2SExt+0x64>
 800bd8c:	4b0c      	ldr	r3, [pc, #48]	@ (800bdc0 <I2SEx_RxISR_I2SExt+0x94>)
 800bd8e:	e001      	b.n	800bd94 <I2SEx_RxISR_I2SExt+0x68>
 800bd90:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800bd94:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800bd98:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d106      	bne.n	800bdb2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	2201      	movs	r2, #1
 800bda8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800bdac:	6878      	ldr	r0, [r7, #4]
 800bdae:	f7ff ff03 	bl	800bbb8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800bdb2:	bf00      	nop
 800bdb4:	3708      	adds	r7, #8
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	bd80      	pop	{r7, pc}
 800bdba:	bf00      	nop
 800bdbc:	40003800 	.word	0x40003800
 800bdc0:	40003400 	.word	0x40003400

0800bdc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0
 800bdca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d101      	bne.n	800bdd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800bdd2:	2301      	movs	r3, #1
 800bdd4:	e267      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f003 0301 	and.w	r3, r3, #1
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d075      	beq.n	800bece <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800bde2:	4b88      	ldr	r3, [pc, #544]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bde4:	689b      	ldr	r3, [r3, #8]
 800bde6:	f003 030c 	and.w	r3, r3, #12
 800bdea:	2b04      	cmp	r3, #4
 800bdec:	d00c      	beq.n	800be08 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bdee:	4b85      	ldr	r3, [pc, #532]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bdf0:	689b      	ldr	r3, [r3, #8]
 800bdf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800bdf6:	2b08      	cmp	r3, #8
 800bdf8:	d112      	bne.n	800be20 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800bdfa:	4b82      	ldr	r3, [pc, #520]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800be02:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800be06:	d10b      	bne.n	800be20 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800be08:	4b7e      	ldr	r3, [pc, #504]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be10:	2b00      	cmp	r3, #0
 800be12:	d05b      	beq.n	800becc <HAL_RCC_OscConfig+0x108>
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685b      	ldr	r3, [r3, #4]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d157      	bne.n	800becc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800be1c:	2301      	movs	r3, #1
 800be1e:	e242      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800be28:	d106      	bne.n	800be38 <HAL_RCC_OscConfig+0x74>
 800be2a:	4b76      	ldr	r3, [pc, #472]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4a75      	ldr	r2, [pc, #468]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be34:	6013      	str	r3, [r2, #0]
 800be36:	e01d      	b.n	800be74 <HAL_RCC_OscConfig+0xb0>
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	685b      	ldr	r3, [r3, #4]
 800be3c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800be40:	d10c      	bne.n	800be5c <HAL_RCC_OscConfig+0x98>
 800be42:	4b70      	ldr	r3, [pc, #448]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a6f      	ldr	r2, [pc, #444]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be48:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800be4c:	6013      	str	r3, [r2, #0]
 800be4e:	4b6d      	ldr	r3, [pc, #436]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be50:	681b      	ldr	r3, [r3, #0]
 800be52:	4a6c      	ldr	r2, [pc, #432]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800be58:	6013      	str	r3, [r2, #0]
 800be5a:	e00b      	b.n	800be74 <HAL_RCC_OscConfig+0xb0>
 800be5c:	4b69      	ldr	r3, [pc, #420]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	4a68      	ldr	r2, [pc, #416]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be62:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800be66:	6013      	str	r3, [r2, #0]
 800be68:	4b66      	ldr	r3, [pc, #408]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	4a65      	ldr	r2, [pc, #404]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be6e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800be72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	685b      	ldr	r3, [r3, #4]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d013      	beq.n	800bea4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be7c:	f7fc fd92 	bl	80089a4 <HAL_GetTick>
 800be80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be82:	e008      	b.n	800be96 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800be84:	f7fc fd8e 	bl	80089a4 <HAL_GetTick>
 800be88:	4602      	mov	r2, r0
 800be8a:	693b      	ldr	r3, [r7, #16]
 800be8c:	1ad3      	subs	r3, r2, r3
 800be8e:	2b64      	cmp	r3, #100	@ 0x64
 800be90:	d901      	bls.n	800be96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800be92:	2303      	movs	r3, #3
 800be94:	e207      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800be96:	4b5b      	ldr	r3, [pc, #364]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d0f0      	beq.n	800be84 <HAL_RCC_OscConfig+0xc0>
 800bea2:	e014      	b.n	800bece <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bea4:	f7fc fd7e 	bl	80089a4 <HAL_GetTick>
 800bea8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800beaa:	e008      	b.n	800bebe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800beac:	f7fc fd7a 	bl	80089a4 <HAL_GetTick>
 800beb0:	4602      	mov	r2, r0
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	1ad3      	subs	r3, r2, r3
 800beb6:	2b64      	cmp	r3, #100	@ 0x64
 800beb8:	d901      	bls.n	800bebe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e1f3      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800bebe:	4b51      	ldr	r3, [pc, #324]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	d1f0      	bne.n	800beac <HAL_RCC_OscConfig+0xe8>
 800beca:	e000      	b.n	800bece <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800becc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f003 0302 	and.w	r3, r3, #2
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d063      	beq.n	800bfa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800beda:	4b4a      	ldr	r3, [pc, #296]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	f003 030c 	and.w	r3, r3, #12
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00b      	beq.n	800befe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bee6:	4b47      	ldr	r3, [pc, #284]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bee8:	689b      	ldr	r3, [r3, #8]
 800beea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800beee:	2b08      	cmp	r3, #8
 800bef0:	d11c      	bne.n	800bf2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800bef2:	4b44      	ldr	r3, [pc, #272]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d116      	bne.n	800bf2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800befe:	4b41      	ldr	r3, [pc, #260]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	f003 0302 	and.w	r3, r3, #2
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d005      	beq.n	800bf16 <HAL_RCC_OscConfig+0x152>
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	2b01      	cmp	r3, #1
 800bf10:	d001      	beq.n	800bf16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800bf12:	2301      	movs	r3, #1
 800bf14:	e1c7      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf16:	4b3b      	ldr	r3, [pc, #236]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	691b      	ldr	r3, [r3, #16]
 800bf22:	00db      	lsls	r3, r3, #3
 800bf24:	4937      	ldr	r1, [pc, #220]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf26:	4313      	orrs	r3, r2
 800bf28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800bf2a:	e03a      	b.n	800bfa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	68db      	ldr	r3, [r3, #12]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d020      	beq.n	800bf76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800bf34:	4b34      	ldr	r3, [pc, #208]	@ (800c008 <HAL_RCC_OscConfig+0x244>)
 800bf36:	2201      	movs	r2, #1
 800bf38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf3a:	f7fc fd33 	bl	80089a4 <HAL_GetTick>
 800bf3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf40:	e008      	b.n	800bf54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf42:	f7fc fd2f 	bl	80089a4 <HAL_GetTick>
 800bf46:	4602      	mov	r2, r0
 800bf48:	693b      	ldr	r3, [r7, #16]
 800bf4a:	1ad3      	subs	r3, r2, r3
 800bf4c:	2b02      	cmp	r3, #2
 800bf4e:	d901      	bls.n	800bf54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800bf50:	2303      	movs	r3, #3
 800bf52:	e1a8      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bf54:	4b2b      	ldr	r3, [pc, #172]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	f003 0302 	and.w	r3, r3, #2
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d0f0      	beq.n	800bf42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bf60:	4b28      	ldr	r3, [pc, #160]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	00db      	lsls	r3, r3, #3
 800bf6e:	4925      	ldr	r1, [pc, #148]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf70:	4313      	orrs	r3, r2
 800bf72:	600b      	str	r3, [r1, #0]
 800bf74:	e015      	b.n	800bfa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bf76:	4b24      	ldr	r3, [pc, #144]	@ (800c008 <HAL_RCC_OscConfig+0x244>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf7c:	f7fc fd12 	bl	80089a4 <HAL_GetTick>
 800bf80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf82:	e008      	b.n	800bf96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf84:	f7fc fd0e 	bl	80089a4 <HAL_GetTick>
 800bf88:	4602      	mov	r2, r0
 800bf8a:	693b      	ldr	r3, [r7, #16]
 800bf8c:	1ad3      	subs	r3, r2, r3
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d901      	bls.n	800bf96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800bf92:	2303      	movs	r3, #3
 800bf94:	e187      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800bf96:	4b1b      	ldr	r3, [pc, #108]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	f003 0302 	and.w	r3, r3, #2
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d1f0      	bne.n	800bf84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f003 0308 	and.w	r3, r3, #8
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d036      	beq.n	800c01c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	695b      	ldr	r3, [r3, #20]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d016      	beq.n	800bfe4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bfb6:	4b15      	ldr	r3, [pc, #84]	@ (800c00c <HAL_RCC_OscConfig+0x248>)
 800bfb8:	2201      	movs	r2, #1
 800bfba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bfbc:	f7fc fcf2 	bl	80089a4 <HAL_GetTick>
 800bfc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfc2:	e008      	b.n	800bfd6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bfc4:	f7fc fcee 	bl	80089a4 <HAL_GetTick>
 800bfc8:	4602      	mov	r2, r0
 800bfca:	693b      	ldr	r3, [r7, #16]
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	d901      	bls.n	800bfd6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800bfd2:	2303      	movs	r3, #3
 800bfd4:	e167      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800bfd6:	4b0b      	ldr	r3, [pc, #44]	@ (800c004 <HAL_RCC_OscConfig+0x240>)
 800bfd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bfda:	f003 0302 	and.w	r3, r3, #2
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d0f0      	beq.n	800bfc4 <HAL_RCC_OscConfig+0x200>
 800bfe2:	e01b      	b.n	800c01c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bfe4:	4b09      	ldr	r3, [pc, #36]	@ (800c00c <HAL_RCC_OscConfig+0x248>)
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bfea:	f7fc fcdb 	bl	80089a4 <HAL_GetTick>
 800bfee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800bff0:	e00e      	b.n	800c010 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800bff2:	f7fc fcd7 	bl	80089a4 <HAL_GetTick>
 800bff6:	4602      	mov	r2, r0
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	1ad3      	subs	r3, r2, r3
 800bffc:	2b02      	cmp	r3, #2
 800bffe:	d907      	bls.n	800c010 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c000:	2303      	movs	r3, #3
 800c002:	e150      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
 800c004:	40023800 	.word	0x40023800
 800c008:	42470000 	.word	0x42470000
 800c00c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c010:	4b88      	ldr	r3, [pc, #544]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c014:	f003 0302 	and.w	r3, r3, #2
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d1ea      	bne.n	800bff2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	f003 0304 	and.w	r3, r3, #4
 800c024:	2b00      	cmp	r3, #0
 800c026:	f000 8097 	beq.w	800c158 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c02a:	2300      	movs	r3, #0
 800c02c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c02e:	4b81      	ldr	r3, [pc, #516]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c036:	2b00      	cmp	r3, #0
 800c038:	d10f      	bne.n	800c05a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c03a:	2300      	movs	r3, #0
 800c03c:	60bb      	str	r3, [r7, #8]
 800c03e:	4b7d      	ldr	r3, [pc, #500]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c042:	4a7c      	ldr	r2, [pc, #496]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c044:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c048:	6413      	str	r3, [r2, #64]	@ 0x40
 800c04a:	4b7a      	ldr	r3, [pc, #488]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c04c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c04e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c052:	60bb      	str	r3, [r7, #8]
 800c054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c056:	2301      	movs	r3, #1
 800c058:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c05a:	4b77      	ldr	r3, [pc, #476]	@ (800c238 <HAL_RCC_OscConfig+0x474>)
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c062:	2b00      	cmp	r3, #0
 800c064:	d118      	bne.n	800c098 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c066:	4b74      	ldr	r3, [pc, #464]	@ (800c238 <HAL_RCC_OscConfig+0x474>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	4a73      	ldr	r2, [pc, #460]	@ (800c238 <HAL_RCC_OscConfig+0x474>)
 800c06c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c072:	f7fc fc97 	bl	80089a4 <HAL_GetTick>
 800c076:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c078:	e008      	b.n	800c08c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c07a:	f7fc fc93 	bl	80089a4 <HAL_GetTick>
 800c07e:	4602      	mov	r2, r0
 800c080:	693b      	ldr	r3, [r7, #16]
 800c082:	1ad3      	subs	r3, r2, r3
 800c084:	2b02      	cmp	r3, #2
 800c086:	d901      	bls.n	800c08c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c088:	2303      	movs	r3, #3
 800c08a:	e10c      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c08c:	4b6a      	ldr	r3, [pc, #424]	@ (800c238 <HAL_RCC_OscConfig+0x474>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c094:	2b00      	cmp	r3, #0
 800c096:	d0f0      	beq.n	800c07a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	689b      	ldr	r3, [r3, #8]
 800c09c:	2b01      	cmp	r3, #1
 800c09e:	d106      	bne.n	800c0ae <HAL_RCC_OscConfig+0x2ea>
 800c0a0:	4b64      	ldr	r3, [pc, #400]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0a4:	4a63      	ldr	r2, [pc, #396]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0a6:	f043 0301 	orr.w	r3, r3, #1
 800c0aa:	6713      	str	r3, [r2, #112]	@ 0x70
 800c0ac:	e01c      	b.n	800c0e8 <HAL_RCC_OscConfig+0x324>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	2b05      	cmp	r3, #5
 800c0b4:	d10c      	bne.n	800c0d0 <HAL_RCC_OscConfig+0x30c>
 800c0b6:	4b5f      	ldr	r3, [pc, #380]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0ba:	4a5e      	ldr	r2, [pc, #376]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0bc:	f043 0304 	orr.w	r3, r3, #4
 800c0c0:	6713      	str	r3, [r2, #112]	@ 0x70
 800c0c2:	4b5c      	ldr	r3, [pc, #368]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0c6:	4a5b      	ldr	r2, [pc, #364]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0c8:	f043 0301 	orr.w	r3, r3, #1
 800c0cc:	6713      	str	r3, [r2, #112]	@ 0x70
 800c0ce:	e00b      	b.n	800c0e8 <HAL_RCC_OscConfig+0x324>
 800c0d0:	4b58      	ldr	r3, [pc, #352]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0d4:	4a57      	ldr	r2, [pc, #348]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0d6:	f023 0301 	bic.w	r3, r3, #1
 800c0da:	6713      	str	r3, [r2, #112]	@ 0x70
 800c0dc:	4b55      	ldr	r3, [pc, #340]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c0e0:	4a54      	ldr	r2, [pc, #336]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c0e2:	f023 0304 	bic.w	r3, r3, #4
 800c0e6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d015      	beq.n	800c11c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0f0:	f7fc fc58 	bl	80089a4 <HAL_GetTick>
 800c0f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c0f6:	e00a      	b.n	800c10e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0f8:	f7fc fc54 	bl	80089a4 <HAL_GetTick>
 800c0fc:	4602      	mov	r2, r0
 800c0fe:	693b      	ldr	r3, [r7, #16]
 800c100:	1ad3      	subs	r3, r2, r3
 800c102:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c106:	4293      	cmp	r3, r2
 800c108:	d901      	bls.n	800c10e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c10a:	2303      	movs	r3, #3
 800c10c:	e0cb      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c10e:	4b49      	ldr	r3, [pc, #292]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c110:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c112:	f003 0302 	and.w	r3, r3, #2
 800c116:	2b00      	cmp	r3, #0
 800c118:	d0ee      	beq.n	800c0f8 <HAL_RCC_OscConfig+0x334>
 800c11a:	e014      	b.n	800c146 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c11c:	f7fc fc42 	bl	80089a4 <HAL_GetTick>
 800c120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c122:	e00a      	b.n	800c13a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c124:	f7fc fc3e 	bl	80089a4 <HAL_GetTick>
 800c128:	4602      	mov	r2, r0
 800c12a:	693b      	ldr	r3, [r7, #16]
 800c12c:	1ad3      	subs	r3, r2, r3
 800c12e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c132:	4293      	cmp	r3, r2
 800c134:	d901      	bls.n	800c13a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c136:	2303      	movs	r3, #3
 800c138:	e0b5      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c13a:	4b3e      	ldr	r3, [pc, #248]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c13c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c13e:	f003 0302 	and.w	r3, r3, #2
 800c142:	2b00      	cmp	r3, #0
 800c144:	d1ee      	bne.n	800c124 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c146:	7dfb      	ldrb	r3, [r7, #23]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	d105      	bne.n	800c158 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c14c:	4b39      	ldr	r3, [pc, #228]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c14e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c150:	4a38      	ldr	r2, [pc, #224]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c156:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	699b      	ldr	r3, [r3, #24]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	f000 80a1 	beq.w	800c2a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c162:	4b34      	ldr	r3, [pc, #208]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	f003 030c 	and.w	r3, r3, #12
 800c16a:	2b08      	cmp	r3, #8
 800c16c:	d05c      	beq.n	800c228 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	699b      	ldr	r3, [r3, #24]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d141      	bne.n	800c1fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c176:	4b31      	ldr	r3, [pc, #196]	@ (800c23c <HAL_RCC_OscConfig+0x478>)
 800c178:	2200      	movs	r2, #0
 800c17a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c17c:	f7fc fc12 	bl	80089a4 <HAL_GetTick>
 800c180:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c182:	e008      	b.n	800c196 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c184:	f7fc fc0e 	bl	80089a4 <HAL_GetTick>
 800c188:	4602      	mov	r2, r0
 800c18a:	693b      	ldr	r3, [r7, #16]
 800c18c:	1ad3      	subs	r3, r2, r3
 800c18e:	2b02      	cmp	r3, #2
 800c190:	d901      	bls.n	800c196 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c192:	2303      	movs	r3, #3
 800c194:	e087      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c196:	4b27      	ldr	r3, [pc, #156]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d1f0      	bne.n	800c184 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	69da      	ldr	r2, [r3, #28]
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6a1b      	ldr	r3, [r3, #32]
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c1b0:	019b      	lsls	r3, r3, #6
 800c1b2:	431a      	orrs	r2, r3
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b8:	085b      	lsrs	r3, r3, #1
 800c1ba:	3b01      	subs	r3, #1
 800c1bc:	041b      	lsls	r3, r3, #16
 800c1be:	431a      	orrs	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1c4:	061b      	lsls	r3, r3, #24
 800c1c6:	491b      	ldr	r1, [pc, #108]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c1cc:	4b1b      	ldr	r3, [pc, #108]	@ (800c23c <HAL_RCC_OscConfig+0x478>)
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c1d2:	f7fc fbe7 	bl	80089a4 <HAL_GetTick>
 800c1d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1d8:	e008      	b.n	800c1ec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c1da:	f7fc fbe3 	bl	80089a4 <HAL_GetTick>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	1ad3      	subs	r3, r2, r3
 800c1e4:	2b02      	cmp	r3, #2
 800c1e6:	d901      	bls.n	800c1ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e05c      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c1ec:	4b11      	ldr	r3, [pc, #68]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	d0f0      	beq.n	800c1da <HAL_RCC_OscConfig+0x416>
 800c1f8:	e054      	b.n	800c2a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c1fa:	4b10      	ldr	r3, [pc, #64]	@ (800c23c <HAL_RCC_OscConfig+0x478>)
 800c1fc:	2200      	movs	r2, #0
 800c1fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c200:	f7fc fbd0 	bl	80089a4 <HAL_GetTick>
 800c204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c206:	e008      	b.n	800c21a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c208:	f7fc fbcc 	bl	80089a4 <HAL_GetTick>
 800c20c:	4602      	mov	r2, r0
 800c20e:	693b      	ldr	r3, [r7, #16]
 800c210:	1ad3      	subs	r3, r2, r3
 800c212:	2b02      	cmp	r3, #2
 800c214:	d901      	bls.n	800c21a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c216:	2303      	movs	r3, #3
 800c218:	e045      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c21a:	4b06      	ldr	r3, [pc, #24]	@ (800c234 <HAL_RCC_OscConfig+0x470>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1f0      	bne.n	800c208 <HAL_RCC_OscConfig+0x444>
 800c226:	e03d      	b.n	800c2a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	699b      	ldr	r3, [r3, #24]
 800c22c:	2b01      	cmp	r3, #1
 800c22e:	d107      	bne.n	800c240 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c230:	2301      	movs	r3, #1
 800c232:	e038      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
 800c234:	40023800 	.word	0x40023800
 800c238:	40007000 	.word	0x40007000
 800c23c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c240:	4b1b      	ldr	r3, [pc, #108]	@ (800c2b0 <HAL_RCC_OscConfig+0x4ec>)
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	699b      	ldr	r3, [r3, #24]
 800c24a:	2b01      	cmp	r3, #1
 800c24c:	d028      	beq.n	800c2a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c258:	429a      	cmp	r2, r3
 800c25a:	d121      	bne.n	800c2a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c266:	429a      	cmp	r2, r3
 800c268:	d11a      	bne.n	800c2a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800c270:	4013      	ands	r3, r2
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800c276:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c278:	4293      	cmp	r3, r2
 800c27a:	d111      	bne.n	800c2a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c286:	085b      	lsrs	r3, r3, #1
 800c288:	3b01      	subs	r3, #1
 800c28a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c28c:	429a      	cmp	r2, r3
 800c28e:	d107      	bne.n	800c2a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c29a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c29c:	429a      	cmp	r2, r3
 800c29e:	d001      	beq.n	800c2a4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e000      	b.n	800c2a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c2a4:	2300      	movs	r3, #0
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	40023800 	.word	0x40023800

0800c2b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d101      	bne.n	800c2c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	e0cc      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c2c8:	4b68      	ldr	r3, [pc, #416]	@ (800c46c <HAL_RCC_ClockConfig+0x1b8>)
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	f003 0307 	and.w	r3, r3, #7
 800c2d0:	683a      	ldr	r2, [r7, #0]
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d90c      	bls.n	800c2f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c2d6:	4b65      	ldr	r3, [pc, #404]	@ (800c46c <HAL_RCC_ClockConfig+0x1b8>)
 800c2d8:	683a      	ldr	r2, [r7, #0]
 800c2da:	b2d2      	uxtb	r2, r2
 800c2dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c2de:	4b63      	ldr	r3, [pc, #396]	@ (800c46c <HAL_RCC_ClockConfig+0x1b8>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 0307 	and.w	r3, r3, #7
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d001      	beq.n	800c2f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e0b8      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	f003 0302 	and.w	r3, r3, #2
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d020      	beq.n	800c33e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	f003 0304 	and.w	r3, r3, #4
 800c304:	2b00      	cmp	r3, #0
 800c306:	d005      	beq.n	800c314 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c308:	4b59      	ldr	r3, [pc, #356]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	4a58      	ldr	r2, [pc, #352]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c30e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800c312:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	f003 0308 	and.w	r3, r3, #8
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d005      	beq.n	800c32c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c320:	4b53      	ldr	r3, [pc, #332]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c322:	689b      	ldr	r3, [r3, #8]
 800c324:	4a52      	ldr	r2, [pc, #328]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c326:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800c32a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c32c:	4b50      	ldr	r3, [pc, #320]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	689b      	ldr	r3, [r3, #8]
 800c338:	494d      	ldr	r1, [pc, #308]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c33a:	4313      	orrs	r3, r2
 800c33c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	f003 0301 	and.w	r3, r3, #1
 800c346:	2b00      	cmp	r3, #0
 800c348:	d044      	beq.n	800c3d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	2b01      	cmp	r3, #1
 800c350:	d107      	bne.n	800c362 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c352:	4b47      	ldr	r3, [pc, #284]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d119      	bne.n	800c392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c35e:	2301      	movs	r3, #1
 800c360:	e07f      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	685b      	ldr	r3, [r3, #4]
 800c366:	2b02      	cmp	r3, #2
 800c368:	d003      	beq.n	800c372 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c36e:	2b03      	cmp	r3, #3
 800c370:	d107      	bne.n	800c382 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c372:	4b3f      	ldr	r3, [pc, #252]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d109      	bne.n	800c392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c37e:	2301      	movs	r3, #1
 800c380:	e06f      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c382:	4b3b      	ldr	r3, [pc, #236]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c384:	681b      	ldr	r3, [r3, #0]
 800c386:	f003 0302 	and.w	r3, r3, #2
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d101      	bne.n	800c392 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c38e:	2301      	movs	r3, #1
 800c390:	e067      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c392:	4b37      	ldr	r3, [pc, #220]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c394:	689b      	ldr	r3, [r3, #8]
 800c396:	f023 0203 	bic.w	r2, r3, #3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	4934      	ldr	r1, [pc, #208]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c3a4:	f7fc fafe 	bl	80089a4 <HAL_GetTick>
 800c3a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3aa:	e00a      	b.n	800c3c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c3ac:	f7fc fafa 	bl	80089a4 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c3ba:	4293      	cmp	r3, r2
 800c3bc:	d901      	bls.n	800c3c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c3be:	2303      	movs	r3, #3
 800c3c0:	e04f      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c3c2:	4b2b      	ldr	r3, [pc, #172]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c3c4:	689b      	ldr	r3, [r3, #8]
 800c3c6:	f003 020c 	and.w	r2, r3, #12
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	009b      	lsls	r3, r3, #2
 800c3d0:	429a      	cmp	r2, r3
 800c3d2:	d1eb      	bne.n	800c3ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c3d4:	4b25      	ldr	r3, [pc, #148]	@ (800c46c <HAL_RCC_ClockConfig+0x1b8>)
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f003 0307 	and.w	r3, r3, #7
 800c3dc:	683a      	ldr	r2, [r7, #0]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d20c      	bcs.n	800c3fc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c3e2:	4b22      	ldr	r3, [pc, #136]	@ (800c46c <HAL_RCC_ClockConfig+0x1b8>)
 800c3e4:	683a      	ldr	r2, [r7, #0]
 800c3e6:	b2d2      	uxtb	r2, r2
 800c3e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c3ea:	4b20      	ldr	r3, [pc, #128]	@ (800c46c <HAL_RCC_ClockConfig+0x1b8>)
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f003 0307 	and.w	r3, r3, #7
 800c3f2:	683a      	ldr	r2, [r7, #0]
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	d001      	beq.n	800c3fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	e032      	b.n	800c462 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d008      	beq.n	800c41a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c408:	4b19      	ldr	r3, [pc, #100]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	68db      	ldr	r3, [r3, #12]
 800c414:	4916      	ldr	r1, [pc, #88]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c416:	4313      	orrs	r3, r2
 800c418:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f003 0308 	and.w	r3, r3, #8
 800c422:	2b00      	cmp	r3, #0
 800c424:	d009      	beq.n	800c43a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c426:	4b12      	ldr	r3, [pc, #72]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c428:	689b      	ldr	r3, [r3, #8]
 800c42a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	691b      	ldr	r3, [r3, #16]
 800c432:	00db      	lsls	r3, r3, #3
 800c434:	490e      	ldr	r1, [pc, #56]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c436:	4313      	orrs	r3, r2
 800c438:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800c43a:	f000 f821 	bl	800c480 <HAL_RCC_GetSysClockFreq>
 800c43e:	4602      	mov	r2, r0
 800c440:	4b0b      	ldr	r3, [pc, #44]	@ (800c470 <HAL_RCC_ClockConfig+0x1bc>)
 800c442:	689b      	ldr	r3, [r3, #8]
 800c444:	091b      	lsrs	r3, r3, #4
 800c446:	f003 030f 	and.w	r3, r3, #15
 800c44a:	490a      	ldr	r1, [pc, #40]	@ (800c474 <HAL_RCC_ClockConfig+0x1c0>)
 800c44c:	5ccb      	ldrb	r3, [r1, r3]
 800c44e:	fa22 f303 	lsr.w	r3, r2, r3
 800c452:	4a09      	ldr	r2, [pc, #36]	@ (800c478 <HAL_RCC_ClockConfig+0x1c4>)
 800c454:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800c456:	4b09      	ldr	r3, [pc, #36]	@ (800c47c <HAL_RCC_ClockConfig+0x1c8>)
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	4618      	mov	r0, r3
 800c45c:	f7fc fa5e 	bl	800891c <HAL_InitTick>

  return HAL_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3710      	adds	r7, #16
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	bf00      	nop
 800c46c:	40023c00 	.word	0x40023c00
 800c470:	40023800 	.word	0x40023800
 800c474:	080120f8 	.word	0x080120f8
 800c478:	20000000 	.word	0x20000000
 800c47c:	20000004 	.word	0x20000004

0800c480 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c484:	b094      	sub	sp, #80	@ 0x50
 800c486:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800c48c:	2300      	movs	r3, #0
 800c48e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800c490:	2300      	movs	r3, #0
 800c492:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800c494:	2300      	movs	r3, #0
 800c496:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c498:	4b79      	ldr	r3, [pc, #484]	@ (800c680 <HAL_RCC_GetSysClockFreq+0x200>)
 800c49a:	689b      	ldr	r3, [r3, #8]
 800c49c:	f003 030c 	and.w	r3, r3, #12
 800c4a0:	2b08      	cmp	r3, #8
 800c4a2:	d00d      	beq.n	800c4c0 <HAL_RCC_GetSysClockFreq+0x40>
 800c4a4:	2b08      	cmp	r3, #8
 800c4a6:	f200 80e1 	bhi.w	800c66c <HAL_RCC_GetSysClockFreq+0x1ec>
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d002      	beq.n	800c4b4 <HAL_RCC_GetSysClockFreq+0x34>
 800c4ae:	2b04      	cmp	r3, #4
 800c4b0:	d003      	beq.n	800c4ba <HAL_RCC_GetSysClockFreq+0x3a>
 800c4b2:	e0db      	b.n	800c66c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c4b4:	4b73      	ldr	r3, [pc, #460]	@ (800c684 <HAL_RCC_GetSysClockFreq+0x204>)
 800c4b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c4b8:	e0db      	b.n	800c672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c4ba:	4b73      	ldr	r3, [pc, #460]	@ (800c688 <HAL_RCC_GetSysClockFreq+0x208>)
 800c4bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c4be:	e0d8      	b.n	800c672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c4c0:	4b6f      	ldr	r3, [pc, #444]	@ (800c680 <HAL_RCC_GetSysClockFreq+0x200>)
 800c4c2:	685b      	ldr	r3, [r3, #4]
 800c4c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c4c8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c4ca:	4b6d      	ldr	r3, [pc, #436]	@ (800c680 <HAL_RCC_GetSysClockFreq+0x200>)
 800c4cc:	685b      	ldr	r3, [r3, #4]
 800c4ce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d063      	beq.n	800c59e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c4d6:	4b6a      	ldr	r3, [pc, #424]	@ (800c680 <HAL_RCC_GetSysClockFreq+0x200>)
 800c4d8:	685b      	ldr	r3, [r3, #4]
 800c4da:	099b      	lsrs	r3, r3, #6
 800c4dc:	2200      	movs	r2, #0
 800c4de:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c4e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800c4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c4e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800c4ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	462b      	mov	r3, r5
 800c4f6:	f04f 0000 	mov.w	r0, #0
 800c4fa:	f04f 0100 	mov.w	r1, #0
 800c4fe:	0159      	lsls	r1, r3, #5
 800c500:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c504:	0150      	lsls	r0, r2, #5
 800c506:	4602      	mov	r2, r0
 800c508:	460b      	mov	r3, r1
 800c50a:	4621      	mov	r1, r4
 800c50c:	1a51      	subs	r1, r2, r1
 800c50e:	6139      	str	r1, [r7, #16]
 800c510:	4629      	mov	r1, r5
 800c512:	eb63 0301 	sbc.w	r3, r3, r1
 800c516:	617b      	str	r3, [r7, #20]
 800c518:	f04f 0200 	mov.w	r2, #0
 800c51c:	f04f 0300 	mov.w	r3, #0
 800c520:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c524:	4659      	mov	r1, fp
 800c526:	018b      	lsls	r3, r1, #6
 800c528:	4651      	mov	r1, sl
 800c52a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c52e:	4651      	mov	r1, sl
 800c530:	018a      	lsls	r2, r1, #6
 800c532:	4651      	mov	r1, sl
 800c534:	ebb2 0801 	subs.w	r8, r2, r1
 800c538:	4659      	mov	r1, fp
 800c53a:	eb63 0901 	sbc.w	r9, r3, r1
 800c53e:	f04f 0200 	mov.w	r2, #0
 800c542:	f04f 0300 	mov.w	r3, #0
 800c546:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c54a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c54e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c552:	4690      	mov	r8, r2
 800c554:	4699      	mov	r9, r3
 800c556:	4623      	mov	r3, r4
 800c558:	eb18 0303 	adds.w	r3, r8, r3
 800c55c:	60bb      	str	r3, [r7, #8]
 800c55e:	462b      	mov	r3, r5
 800c560:	eb49 0303 	adc.w	r3, r9, r3
 800c564:	60fb      	str	r3, [r7, #12]
 800c566:	f04f 0200 	mov.w	r2, #0
 800c56a:	f04f 0300 	mov.w	r3, #0
 800c56e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c572:	4629      	mov	r1, r5
 800c574:	024b      	lsls	r3, r1, #9
 800c576:	4621      	mov	r1, r4
 800c578:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c57c:	4621      	mov	r1, r4
 800c57e:	024a      	lsls	r2, r1, #9
 800c580:	4610      	mov	r0, r2
 800c582:	4619      	mov	r1, r3
 800c584:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c586:	2200      	movs	r2, #0
 800c588:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c58a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c58c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800c590:	f7f3 fe6e 	bl	8000270 <__aeabi_uldivmod>
 800c594:	4602      	mov	r2, r0
 800c596:	460b      	mov	r3, r1
 800c598:	4613      	mov	r3, r2
 800c59a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c59c:	e058      	b.n	800c650 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c59e:	4b38      	ldr	r3, [pc, #224]	@ (800c680 <HAL_RCC_GetSysClockFreq+0x200>)
 800c5a0:	685b      	ldr	r3, [r3, #4]
 800c5a2:	099b      	lsrs	r3, r3, #6
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	4611      	mov	r1, r2
 800c5aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c5ae:	623b      	str	r3, [r7, #32]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	627b      	str	r3, [r7, #36]	@ 0x24
 800c5b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800c5b8:	4642      	mov	r2, r8
 800c5ba:	464b      	mov	r3, r9
 800c5bc:	f04f 0000 	mov.w	r0, #0
 800c5c0:	f04f 0100 	mov.w	r1, #0
 800c5c4:	0159      	lsls	r1, r3, #5
 800c5c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c5ca:	0150      	lsls	r0, r2, #5
 800c5cc:	4602      	mov	r2, r0
 800c5ce:	460b      	mov	r3, r1
 800c5d0:	4641      	mov	r1, r8
 800c5d2:	ebb2 0a01 	subs.w	sl, r2, r1
 800c5d6:	4649      	mov	r1, r9
 800c5d8:	eb63 0b01 	sbc.w	fp, r3, r1
 800c5dc:	f04f 0200 	mov.w	r2, #0
 800c5e0:	f04f 0300 	mov.w	r3, #0
 800c5e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800c5e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800c5ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800c5f0:	ebb2 040a 	subs.w	r4, r2, sl
 800c5f4:	eb63 050b 	sbc.w	r5, r3, fp
 800c5f8:	f04f 0200 	mov.w	r2, #0
 800c5fc:	f04f 0300 	mov.w	r3, #0
 800c600:	00eb      	lsls	r3, r5, #3
 800c602:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c606:	00e2      	lsls	r2, r4, #3
 800c608:	4614      	mov	r4, r2
 800c60a:	461d      	mov	r5, r3
 800c60c:	4643      	mov	r3, r8
 800c60e:	18e3      	adds	r3, r4, r3
 800c610:	603b      	str	r3, [r7, #0]
 800c612:	464b      	mov	r3, r9
 800c614:	eb45 0303 	adc.w	r3, r5, r3
 800c618:	607b      	str	r3, [r7, #4]
 800c61a:	f04f 0200 	mov.w	r2, #0
 800c61e:	f04f 0300 	mov.w	r3, #0
 800c622:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c626:	4629      	mov	r1, r5
 800c628:	028b      	lsls	r3, r1, #10
 800c62a:	4621      	mov	r1, r4
 800c62c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c630:	4621      	mov	r1, r4
 800c632:	028a      	lsls	r2, r1, #10
 800c634:	4610      	mov	r0, r2
 800c636:	4619      	mov	r1, r3
 800c638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c63a:	2200      	movs	r2, #0
 800c63c:	61bb      	str	r3, [r7, #24]
 800c63e:	61fa      	str	r2, [r7, #28]
 800c640:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c644:	f7f3 fe14 	bl	8000270 <__aeabi_uldivmod>
 800c648:	4602      	mov	r2, r0
 800c64a:	460b      	mov	r3, r1
 800c64c:	4613      	mov	r3, r2
 800c64e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800c650:	4b0b      	ldr	r3, [pc, #44]	@ (800c680 <HAL_RCC_GetSysClockFreq+0x200>)
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	0c1b      	lsrs	r3, r3, #16
 800c656:	f003 0303 	and.w	r3, r3, #3
 800c65a:	3301      	adds	r3, #1
 800c65c:	005b      	lsls	r3, r3, #1
 800c65e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800c660:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c662:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c664:	fbb2 f3f3 	udiv	r3, r2, r3
 800c668:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c66a:	e002      	b.n	800c672 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c66c:	4b05      	ldr	r3, [pc, #20]	@ (800c684 <HAL_RCC_GetSysClockFreq+0x204>)
 800c66e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800c670:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c672:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800c674:	4618      	mov	r0, r3
 800c676:	3750      	adds	r7, #80	@ 0x50
 800c678:	46bd      	mov	sp, r7
 800c67a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c67e:	bf00      	nop
 800c680:	40023800 	.word	0x40023800
 800c684:	00f42400 	.word	0x00f42400
 800c688:	007a1200 	.word	0x007a1200

0800c68c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c690:	4b03      	ldr	r3, [pc, #12]	@ (800c6a0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c692:	681b      	ldr	r3, [r3, #0]
}
 800c694:	4618      	mov	r0, r3
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr
 800c69e:	bf00      	nop
 800c6a0:	20000000 	.word	0x20000000

0800c6a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c6a4:	b580      	push	{r7, lr}
 800c6a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c6a8:	f7ff fff0 	bl	800c68c <HAL_RCC_GetHCLKFreq>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	4b05      	ldr	r3, [pc, #20]	@ (800c6c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c6b0:	689b      	ldr	r3, [r3, #8]
 800c6b2:	0a9b      	lsrs	r3, r3, #10
 800c6b4:	f003 0307 	and.w	r3, r3, #7
 800c6b8:	4903      	ldr	r1, [pc, #12]	@ (800c6c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c6ba:	5ccb      	ldrb	r3, [r1, r3]
 800c6bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	bd80      	pop	{r7, pc}
 800c6c4:	40023800 	.word	0x40023800
 800c6c8:	08012108 	.word	0x08012108

0800c6cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c6cc:	b580      	push	{r7, lr}
 800c6ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c6d0:	f7ff ffdc 	bl	800c68c <HAL_RCC_GetHCLKFreq>
 800c6d4:	4602      	mov	r2, r0
 800c6d6:	4b05      	ldr	r3, [pc, #20]	@ (800c6ec <HAL_RCC_GetPCLK2Freq+0x20>)
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	0b5b      	lsrs	r3, r3, #13
 800c6dc:	f003 0307 	and.w	r3, r3, #7
 800c6e0:	4903      	ldr	r1, [pc, #12]	@ (800c6f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c6e2:	5ccb      	ldrb	r3, [r1, r3]
 800c6e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	40023800 	.word	0x40023800
 800c6f0:	08012108 	.word	0x08012108

0800c6f4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	f003 0301 	and.w	r3, r3, #1
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d105      	bne.n	800c71c <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d035      	beq.n	800c788 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800c71c:	4b62      	ldr	r3, [pc, #392]	@ (800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c71e:	2200      	movs	r2, #0
 800c720:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c722:	f7fc f93f 	bl	80089a4 <HAL_GetTick>
 800c726:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c728:	e008      	b.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c72a:	f7fc f93b 	bl	80089a4 <HAL_GetTick>
 800c72e:	4602      	mov	r2, r0
 800c730:	697b      	ldr	r3, [r7, #20]
 800c732:	1ad3      	subs	r3, r2, r3
 800c734:	2b02      	cmp	r3, #2
 800c736:	d901      	bls.n	800c73c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c738:	2303      	movs	r3, #3
 800c73a:	e0b0      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800c73c:	4b5b      	ldr	r3, [pc, #364]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d1f0      	bne.n	800c72a <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	685b      	ldr	r3, [r3, #4]
 800c74c:	019a      	lsls	r2, r3, #6
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	071b      	lsls	r3, r3, #28
 800c754:	4955      	ldr	r1, [pc, #340]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c756:	4313      	orrs	r3, r2
 800c758:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800c75c:	4b52      	ldr	r3, [pc, #328]	@ (800c8a8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800c75e:	2201      	movs	r2, #1
 800c760:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800c762:	f7fc f91f 	bl	80089a4 <HAL_GetTick>
 800c766:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c768:	e008      	b.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800c76a:	f7fc f91b 	bl	80089a4 <HAL_GetTick>
 800c76e:	4602      	mov	r2, r0
 800c770:	697b      	ldr	r3, [r7, #20]
 800c772:	1ad3      	subs	r3, r2, r3
 800c774:	2b02      	cmp	r3, #2
 800c776:	d901      	bls.n	800c77c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800c778:	2303      	movs	r3, #3
 800c77a:	e090      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800c77c:	4b4b      	ldr	r3, [pc, #300]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800c784:	2b00      	cmp	r3, #0
 800c786:	d0f0      	beq.n	800c76a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 0302 	and.w	r3, r3, #2
 800c790:	2b00      	cmp	r3, #0
 800c792:	f000 8083 	beq.w	800c89c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800c796:	2300      	movs	r3, #0
 800c798:	60fb      	str	r3, [r7, #12]
 800c79a:	4b44      	ldr	r3, [pc, #272]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c79c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c79e:	4a43      	ldr	r2, [pc, #268]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c7a4:	6413      	str	r3, [r2, #64]	@ 0x40
 800c7a6:	4b41      	ldr	r3, [pc, #260]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c7aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c7ae:	60fb      	str	r3, [r7, #12]
 800c7b0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800c7b2:	4b3f      	ldr	r3, [pc, #252]	@ (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	4a3e      	ldr	r2, [pc, #248]	@ (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c7b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c7bc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c7be:	f7fc f8f1 	bl	80089a4 <HAL_GetTick>
 800c7c2:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800c7c4:	e008      	b.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c7c6:	f7fc f8ed 	bl	80089a4 <HAL_GetTick>
 800c7ca:	4602      	mov	r2, r0
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	1ad3      	subs	r3, r2, r3
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d901      	bls.n	800c7d8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	e062      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800c7d8:	4b35      	ldr	r3, [pc, #212]	@ (800c8b0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0f0      	beq.n	800c7c6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800c7e4:	4b31      	ldr	r3, [pc, #196]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c7e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c7e8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7ec:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d02f      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	68db      	ldr	r3, [r3, #12]
 800c7f8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c7fc:	693a      	ldr	r2, [r7, #16]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d028      	beq.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c802:	4b2a      	ldr	r3, [pc, #168]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c806:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c80a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c80c:	4b29      	ldr	r3, [pc, #164]	@ (800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c80e:	2201      	movs	r2, #1
 800c810:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c812:	4b28      	ldr	r3, [pc, #160]	@ (800c8b4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800c814:	2200      	movs	r2, #0
 800c816:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800c818:	4a24      	ldr	r2, [pc, #144]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c81a:	693b      	ldr	r3, [r7, #16]
 800c81c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800c81e:	4b23      	ldr	r3, [pc, #140]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c822:	f003 0301 	and.w	r3, r3, #1
 800c826:	2b01      	cmp	r3, #1
 800c828:	d114      	bne.n	800c854 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800c82a:	f7fc f8bb 	bl	80089a4 <HAL_GetTick>
 800c82e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c830:	e00a      	b.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c832:	f7fc f8b7 	bl	80089a4 <HAL_GetTick>
 800c836:	4602      	mov	r2, r0
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c840:	4293      	cmp	r3, r2
 800c842:	d901      	bls.n	800c848 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800c844:	2303      	movs	r3, #3
 800c846:	e02a      	b.n	800c89e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c848:	4b18      	ldr	r3, [pc, #96]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c84a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c84c:	f003 0302 	and.w	r3, r3, #2
 800c850:	2b00      	cmp	r3, #0
 800c852:	d0ee      	beq.n	800c832 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	68db      	ldr	r3, [r3, #12]
 800c858:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c85c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c860:	d10d      	bne.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800c862:	4b12      	ldr	r3, [pc, #72]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c864:	689b      	ldr	r3, [r3, #8]
 800c866:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c872:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c876:	490d      	ldr	r1, [pc, #52]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c878:	4313      	orrs	r3, r2
 800c87a:	608b      	str	r3, [r1, #8]
 800c87c:	e005      	b.n	800c88a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800c87e:	4b0b      	ldr	r3, [pc, #44]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c880:	689b      	ldr	r3, [r3, #8]
 800c882:	4a0a      	ldr	r2, [pc, #40]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c884:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800c888:	6093      	str	r3, [r2, #8]
 800c88a:	4b08      	ldr	r3, [pc, #32]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c88c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	68db      	ldr	r3, [r3, #12]
 800c892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c896:	4905      	ldr	r1, [pc, #20]	@ (800c8ac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800c898:	4313      	orrs	r3, r2
 800c89a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3718      	adds	r7, #24
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	42470068 	.word	0x42470068
 800c8ac:	40023800 	.word	0x40023800
 800c8b0:	40007000 	.word	0x40007000
 800c8b4:	42470e40 	.word	0x42470e40

0800c8b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b087      	sub	sp, #28
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	2b01      	cmp	r3, #1
 800c8d4:	d13f      	bne.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800c8d6:	4b24      	ldr	r3, [pc, #144]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c8d8:	689b      	ldr	r3, [r3, #8]
 800c8da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800c8de:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d006      	beq.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c8ec:	d12f      	bne.n	800c94e <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800c8ee:	4b1f      	ldr	r3, [pc, #124]	@ (800c96c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800c8f0:	617b      	str	r3, [r7, #20]
          break;
 800c8f2:	e02f      	b.n	800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800c8f4:	4b1c      	ldr	r3, [pc, #112]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c8f6:	685b      	ldr	r3, [r3, #4]
 800c8f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800c8fc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c900:	d108      	bne.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c902:	4b19      	ldr	r3, [pc, #100]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c90a:	4a19      	ldr	r2, [pc, #100]	@ (800c970 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800c90c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c910:	613b      	str	r3, [r7, #16]
 800c912:	e007      	b.n	800c924 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800c914:	4b14      	ldr	r3, [pc, #80]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c91c:	4a15      	ldr	r2, [pc, #84]	@ (800c974 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800c91e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c922:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800c924:	4b10      	ldr	r3, [pc, #64]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c92a:	099b      	lsrs	r3, r3, #6
 800c92c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	fb02 f303 	mul.w	r3, r2, r3
 800c936:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800c938:	4b0b      	ldr	r3, [pc, #44]	@ (800c968 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800c93a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800c93e:	0f1b      	lsrs	r3, r3, #28
 800c940:	f003 0307 	and.w	r3, r3, #7
 800c944:	68ba      	ldr	r2, [r7, #8]
 800c946:	fbb2 f3f3 	udiv	r3, r2, r3
 800c94a:	617b      	str	r3, [r7, #20]
          break;
 800c94c:	e002      	b.n	800c954 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800c94e:	2300      	movs	r3, #0
 800c950:	617b      	str	r3, [r7, #20]
          break;
 800c952:	bf00      	nop
        }
      }
      break;
 800c954:	e000      	b.n	800c958 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800c956:	bf00      	nop
    }
  }
  return frequency;
 800c958:	697b      	ldr	r3, [r7, #20]
}
 800c95a:	4618      	mov	r0, r3
 800c95c:	371c      	adds	r7, #28
 800c95e:	46bd      	mov	sp, r7
 800c960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c964:	4770      	bx	lr
 800c966:	bf00      	nop
 800c968:	40023800 	.word	0x40023800
 800c96c:	00bb8000 	.word	0x00bb8000
 800c970:	007a1200 	.word	0x007a1200
 800c974:	00f42400 	.word	0x00f42400

0800c978 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800c978:	b580      	push	{r7, lr}
 800c97a:	b082      	sub	sp, #8
 800c97c:	af00      	add	r7, sp, #0
 800c97e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d101      	bne.n	800c98a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800c986:	2301      	movs	r3, #1
 800c988:	e01c      	b.n	800c9c4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	795b      	ldrb	r3, [r3, #5]
 800c98e:	b2db      	uxtb	r3, r3
 800c990:	2b00      	cmp	r3, #0
 800c992:	d105      	bne.n	800c9a0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7fb fccc 	bl	8008338 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	2202      	movs	r2, #2
 800c9a4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	681a      	ldr	r2, [r3, #0]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f042 0204 	orr.w	r2, r2, #4
 800c9b4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	2201      	movs	r2, #1
 800c9ba:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]
 800c9d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	791b      	ldrb	r3, [r3, #4]
 800c9de:	2b01      	cmp	r3, #1
 800c9e0:	d101      	bne.n	800c9e6 <HAL_RNG_GenerateRandomNumber+0x1a>
 800c9e2:	2302      	movs	r3, #2
 800c9e4:	e044      	b.n	800ca70 <HAL_RNG_GenerateRandomNumber+0xa4>
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	2201      	movs	r2, #1
 800c9ea:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	795b      	ldrb	r3, [r3, #5]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	2b01      	cmp	r3, #1
 800c9f4:	d133      	bne.n	800ca5e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2202      	movs	r2, #2
 800c9fa:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 800c9fc:	f7fb ffd2 	bl	80089a4 <HAL_GetTick>
 800ca00:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ca02:	e018      	b.n	800ca36 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800ca04:	f7fb ffce 	bl	80089a4 <HAL_GetTick>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	68bb      	ldr	r3, [r7, #8]
 800ca0c:	1ad3      	subs	r3, r2, r3
 800ca0e:	2b02      	cmp	r3, #2
 800ca10:	d911      	bls.n	800ca36 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	f003 0301 	and.w	r3, r3, #1
 800ca1c:	2b01      	cmp	r3, #1
 800ca1e:	d00a      	beq.n	800ca36 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	2201      	movs	r2, #1
 800ca24:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	2202      	movs	r2, #2
 800ca2a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800ca32:	2301      	movs	r3, #1
 800ca34:	e01c      	b.n	800ca70 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	685b      	ldr	r3, [r3, #4]
 800ca3c:	f003 0301 	and.w	r3, r3, #1
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d1df      	bne.n	800ca04 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	689a      	ldr	r2, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	68da      	ldr	r2, [r3, #12]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	2201      	movs	r2, #1
 800ca5a:	715a      	strb	r2, [r3, #5]
 800ca5c:	e004      	b.n	800ca68 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2204      	movs	r2, #4
 800ca62:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800ca64:	2301      	movs	r3, #1
 800ca66:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	711a      	strb	r2, [r3, #4]

  return status;
 800ca6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3710      	adds	r7, #16
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d101      	bne.n	800ca8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ca86:	2301      	movs	r3, #1
 800ca88:	e07b      	b.n	800cb82 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d108      	bne.n	800caa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	685b      	ldr	r3, [r3, #4]
 800ca96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800ca9a:	d009      	beq.n	800cab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	61da      	str	r2, [r3, #28]
 800caa2:	e005      	b.n	800cab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	2200      	movs	r2, #0
 800caa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	2200      	movs	r2, #0
 800caae:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	2200      	movs	r2, #0
 800cab4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800cabc:	b2db      	uxtb	r3, r3
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d106      	bne.n	800cad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7fb fc56 	bl	800837c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	2202      	movs	r2, #2
 800cad4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	681a      	ldr	r2, [r3, #0]
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cae6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	689b      	ldr	r3, [r3, #8]
 800caf4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800caf8:	431a      	orrs	r2, r3
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800cb02:	431a      	orrs	r2, r3
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	691b      	ldr	r3, [r3, #16]
 800cb08:	f003 0302 	and.w	r3, r3, #2
 800cb0c:	431a      	orrs	r2, r3
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	695b      	ldr	r3, [r3, #20]
 800cb12:	f003 0301 	and.w	r3, r3, #1
 800cb16:	431a      	orrs	r2, r3
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800cb20:	431a      	orrs	r2, r3
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	69db      	ldr	r3, [r3, #28]
 800cb26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a1b      	ldr	r3, [r3, #32]
 800cb30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cb34:	ea42 0103 	orr.w	r1, r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cb3c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	430a      	orrs	r2, r1
 800cb46:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	699b      	ldr	r3, [r3, #24]
 800cb4c:	0c1b      	lsrs	r3, r3, #16
 800cb4e:	f003 0104 	and.w	r1, r3, #4
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cb56:	f003 0210 	and.w	r2, r3, #16
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	430a      	orrs	r2, r1
 800cb60:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	681b      	ldr	r3, [r3, #0]
 800cb66:	69da      	ldr	r2, [r3, #28]
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800cb70:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3708      	adds	r7, #8
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e042      	b.n	800cc22 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cba2:	b2db      	uxtb	r3, r3
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d106      	bne.n	800cbb6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	2200      	movs	r2, #0
 800cbac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800cbb0:	6878      	ldr	r0, [r7, #4]
 800cbb2:	f7fb fc2b 	bl	800840c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2224      	movs	r2, #36	@ 0x24
 800cbba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	68da      	ldr	r2, [r3, #12]
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800cbcc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800cbce:	6878      	ldr	r0, [r7, #4]
 800cbd0:	f000 f972 	bl	800ceb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	691a      	ldr	r2, [r3, #16]
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800cbe2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	695a      	ldr	r2, [r3, #20]
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800cbf2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	68da      	ldr	r2, [r3, #12]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800cc02:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	2200      	movs	r2, #0
 800cc08:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2220      	movs	r2, #32
 800cc0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	2220      	movs	r2, #32
 800cc16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800cc20:	2300      	movs	r3, #0
}
 800cc22:	4618      	mov	r0, r3
 800cc24:	3708      	adds	r7, #8
 800cc26:	46bd      	mov	sp, r7
 800cc28:	bd80      	pop	{r7, pc}

0800cc2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b08a      	sub	sp, #40	@ 0x28
 800cc2e:	af02      	add	r7, sp, #8
 800cc30:	60f8      	str	r0, [r7, #12]
 800cc32:	60b9      	str	r1, [r7, #8]
 800cc34:	603b      	str	r3, [r7, #0]
 800cc36:	4613      	mov	r3, r2
 800cc38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800cc3a:	2300      	movs	r3, #0
 800cc3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cc3e:	68fb      	ldr	r3, [r7, #12]
 800cc40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cc44:	b2db      	uxtb	r3, r3
 800cc46:	2b20      	cmp	r3, #32
 800cc48:	d175      	bne.n	800cd36 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d002      	beq.n	800cc56 <HAL_UART_Transmit+0x2c>
 800cc50:	88fb      	ldrh	r3, [r7, #6]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d101      	bne.n	800cc5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800cc56:	2301      	movs	r3, #1
 800cc58:	e06e      	b.n	800cd38 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2221      	movs	r2, #33	@ 0x21
 800cc64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cc68:	f7fb fe9c 	bl	80089a4 <HAL_GetTick>
 800cc6c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	88fa      	ldrh	r2, [r7, #6]
 800cc72:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	88fa      	ldrh	r2, [r7, #6]
 800cc78:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	689b      	ldr	r3, [r3, #8]
 800cc7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc82:	d108      	bne.n	800cc96 <HAL_UART_Transmit+0x6c>
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d104      	bne.n	800cc96 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	61bb      	str	r3, [r7, #24]
 800cc94:	e003      	b.n	800cc9e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cc9e:	e02e      	b.n	800ccfe <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	697b      	ldr	r3, [r7, #20]
 800cca6:	2200      	movs	r2, #0
 800cca8:	2180      	movs	r1, #128	@ 0x80
 800ccaa:	68f8      	ldr	r0, [r7, #12]
 800ccac:	f000 f848 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800ccb0:	4603      	mov	r3, r0
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d005      	beq.n	800ccc2 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	2220      	movs	r2, #32
 800ccba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800ccbe:	2303      	movs	r3, #3
 800ccc0:	e03a      	b.n	800cd38 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800ccc2:	69fb      	ldr	r3, [r7, #28]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d10b      	bne.n	800cce0 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ccc8:	69bb      	ldr	r3, [r7, #24]
 800ccca:	881b      	ldrh	r3, [r3, #0]
 800cccc:	461a      	mov	r2, r3
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ccd6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800ccd8:	69bb      	ldr	r3, [r7, #24]
 800ccda:	3302      	adds	r3, #2
 800ccdc:	61bb      	str	r3, [r7, #24]
 800ccde:	e007      	b.n	800ccf0 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800cce0:	69fb      	ldr	r3, [r7, #28]
 800cce2:	781a      	ldrb	r2, [r3, #0]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800ccea:	69fb      	ldr	r3, [r7, #28]
 800ccec:	3301      	adds	r3, #1
 800ccee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800ccf4:	b29b      	uxth	r3, r3
 800ccf6:	3b01      	subs	r3, #1
 800ccf8:	b29a      	uxth	r2, r3
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d1cb      	bne.n	800cca0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800cd08:	683b      	ldr	r3, [r7, #0]
 800cd0a:	9300      	str	r3, [sp, #0]
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	2140      	movs	r1, #64	@ 0x40
 800cd12:	68f8      	ldr	r0, [r7, #12]
 800cd14:	f000 f814 	bl	800cd40 <UART_WaitOnFlagUntilTimeout>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d005      	beq.n	800cd2a <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	2220      	movs	r2, #32
 800cd22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800cd26:	2303      	movs	r3, #3
 800cd28:	e006      	b.n	800cd38 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2220      	movs	r2, #32
 800cd2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800cd32:	2300      	movs	r3, #0
 800cd34:	e000      	b.n	800cd38 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800cd36:	2302      	movs	r3, #2
  }
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3720      	adds	r7, #32
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800cd40:	b580      	push	{r7, lr}
 800cd42:	b086      	sub	sp, #24
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	60f8      	str	r0, [r7, #12]
 800cd48:	60b9      	str	r1, [r7, #8]
 800cd4a:	603b      	str	r3, [r7, #0]
 800cd4c:	4613      	mov	r3, r2
 800cd4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cd50:	e03b      	b.n	800cdca <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800cd52:	6a3b      	ldr	r3, [r7, #32]
 800cd54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd58:	d037      	beq.n	800cdca <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800cd5a:	f7fb fe23 	bl	80089a4 <HAL_GetTick>
 800cd5e:	4602      	mov	r2, r0
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	1ad3      	subs	r3, r2, r3
 800cd64:	6a3a      	ldr	r2, [r7, #32]
 800cd66:	429a      	cmp	r2, r3
 800cd68:	d302      	bcc.n	800cd70 <UART_WaitOnFlagUntilTimeout+0x30>
 800cd6a:	6a3b      	ldr	r3, [r7, #32]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e03a      	b.n	800cdea <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	f003 0304 	and.w	r3, r3, #4
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d023      	beq.n	800cdca <UART_WaitOnFlagUntilTimeout+0x8a>
 800cd82:	68bb      	ldr	r3, [r7, #8]
 800cd84:	2b80      	cmp	r3, #128	@ 0x80
 800cd86:	d020      	beq.n	800cdca <UART_WaitOnFlagUntilTimeout+0x8a>
 800cd88:	68bb      	ldr	r3, [r7, #8]
 800cd8a:	2b40      	cmp	r3, #64	@ 0x40
 800cd8c:	d01d      	beq.n	800cdca <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	f003 0308 	and.w	r3, r3, #8
 800cd98:	2b08      	cmp	r3, #8
 800cd9a:	d116      	bne.n	800cdca <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800cd9c:	2300      	movs	r3, #0
 800cd9e:	617b      	str	r3, [r7, #20]
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	617b      	str	r3, [r7, #20]
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	617b      	str	r3, [r7, #20]
 800cdb0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cdb2:	68f8      	ldr	r0, [r7, #12]
 800cdb4:	f000 f81d 	bl	800cdf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	2208      	movs	r2, #8
 800cdbc:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	2200      	movs	r2, #0
 800cdc2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	e00f      	b.n	800cdea <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	681a      	ldr	r2, [r3, #0]
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	4013      	ands	r3, r2
 800cdd4:	68ba      	ldr	r2, [r7, #8]
 800cdd6:	429a      	cmp	r2, r3
 800cdd8:	bf0c      	ite	eq
 800cdda:	2301      	moveq	r3, #1
 800cddc:	2300      	movne	r3, #0
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	461a      	mov	r2, r3
 800cde2:	79fb      	ldrb	r3, [r7, #7]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d0b4      	beq.n	800cd52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cde8:	2300      	movs	r3, #0
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	3718      	adds	r7, #24
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	bd80      	pop	{r7, pc}

0800cdf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cdf2:	b480      	push	{r7}
 800cdf4:	b095      	sub	sp, #84	@ 0x54
 800cdf6:	af00      	add	r7, sp, #0
 800cdf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	330c      	adds	r3, #12
 800ce00:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce04:	e853 3f00 	ldrex	r3, [r3]
 800ce08:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ce0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ce0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ce10:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	330c      	adds	r3, #12
 800ce18:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ce1a:	643a      	str	r2, [r7, #64]	@ 0x40
 800ce1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ce20:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ce22:	e841 2300 	strex	r3, r2, [r1]
 800ce26:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ce28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	d1e5      	bne.n	800cdfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	3314      	adds	r3, #20
 800ce34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce36:	6a3b      	ldr	r3, [r7, #32]
 800ce38:	e853 3f00 	ldrex	r3, [r3]
 800ce3c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	f023 0301 	bic.w	r3, r3, #1
 800ce44:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	3314      	adds	r3, #20
 800ce4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ce4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ce50:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ce54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ce56:	e841 2300 	strex	r3, r2, [r1]
 800ce5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d1e5      	bne.n	800ce2e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ce66:	2b01      	cmp	r3, #1
 800ce68:	d119      	bne.n	800ce9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	330c      	adds	r3, #12
 800ce70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	e853 3f00 	ldrex	r3, [r3]
 800ce78:	60bb      	str	r3, [r7, #8]
   return(result);
 800ce7a:	68bb      	ldr	r3, [r7, #8]
 800ce7c:	f023 0310 	bic.w	r3, r3, #16
 800ce80:	647b      	str	r3, [r7, #68]	@ 0x44
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	330c      	adds	r3, #12
 800ce88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ce8a:	61ba      	str	r2, [r7, #24]
 800ce8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce8e:	6979      	ldr	r1, [r7, #20]
 800ce90:	69ba      	ldr	r2, [r7, #24]
 800ce92:	e841 2300 	strex	r3, r2, [r1]
 800ce96:	613b      	str	r3, [r7, #16]
   return(result);
 800ce98:	693b      	ldr	r3, [r7, #16]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d1e5      	bne.n	800ce6a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	2220      	movs	r2, #32
 800cea2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800ceac:	bf00      	nop
 800ceae:	3754      	adds	r7, #84	@ 0x54
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ceb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cebc:	b0c0      	sub	sp, #256	@ 0x100
 800cebe:	af00      	add	r7, sp, #0
 800cec0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	691b      	ldr	r3, [r3, #16]
 800cecc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800ced0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ced4:	68d9      	ldr	r1, [r3, #12]
 800ced6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceda:	681a      	ldr	r2, [r3, #0]
 800cedc:	ea40 0301 	orr.w	r3, r0, r1
 800cee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cee6:	689a      	ldr	r2, [r3, #8]
 800cee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ceec:	691b      	ldr	r3, [r3, #16]
 800ceee:	431a      	orrs	r2, r3
 800cef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cef4:	695b      	ldr	r3, [r3, #20]
 800cef6:	431a      	orrs	r2, r3
 800cef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cefc:	69db      	ldr	r3, [r3, #28]
 800cefe:	4313      	orrs	r3, r2
 800cf00:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800cf04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf08:	681b      	ldr	r3, [r3, #0]
 800cf0a:	68db      	ldr	r3, [r3, #12]
 800cf0c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800cf10:	f021 010c 	bic.w	r1, r1, #12
 800cf14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf18:	681a      	ldr	r2, [r3, #0]
 800cf1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800cf1e:	430b      	orrs	r3, r1
 800cf20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	695b      	ldr	r3, [r3, #20]
 800cf2a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800cf2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf32:	6999      	ldr	r1, [r3, #24]
 800cf34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf38:	681a      	ldr	r2, [r3, #0]
 800cf3a:	ea40 0301 	orr.w	r3, r0, r1
 800cf3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cf40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf44:	681a      	ldr	r2, [r3, #0]
 800cf46:	4b8f      	ldr	r3, [pc, #572]	@ (800d184 <UART_SetConfig+0x2cc>)
 800cf48:	429a      	cmp	r2, r3
 800cf4a:	d005      	beq.n	800cf58 <UART_SetConfig+0xa0>
 800cf4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf50:	681a      	ldr	r2, [r3, #0]
 800cf52:	4b8d      	ldr	r3, [pc, #564]	@ (800d188 <UART_SetConfig+0x2d0>)
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d104      	bne.n	800cf62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cf58:	f7ff fbb8 	bl	800c6cc <HAL_RCC_GetPCLK2Freq>
 800cf5c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800cf60:	e003      	b.n	800cf6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cf62:	f7ff fb9f 	bl	800c6a4 <HAL_RCC_GetPCLK1Freq>
 800cf66:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cf6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cf6e:	69db      	ldr	r3, [r3, #28]
 800cf70:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800cf74:	f040 810c 	bne.w	800d190 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cf78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800cf82:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800cf86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800cf8a:	4622      	mov	r2, r4
 800cf8c:	462b      	mov	r3, r5
 800cf8e:	1891      	adds	r1, r2, r2
 800cf90:	65b9      	str	r1, [r7, #88]	@ 0x58
 800cf92:	415b      	adcs	r3, r3
 800cf94:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cf96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800cf9a:	4621      	mov	r1, r4
 800cf9c:	eb12 0801 	adds.w	r8, r2, r1
 800cfa0:	4629      	mov	r1, r5
 800cfa2:	eb43 0901 	adc.w	r9, r3, r1
 800cfa6:	f04f 0200 	mov.w	r2, #0
 800cfaa:	f04f 0300 	mov.w	r3, #0
 800cfae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800cfb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800cfb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800cfba:	4690      	mov	r8, r2
 800cfbc:	4699      	mov	r9, r3
 800cfbe:	4623      	mov	r3, r4
 800cfc0:	eb18 0303 	adds.w	r3, r8, r3
 800cfc4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800cfc8:	462b      	mov	r3, r5
 800cfca:	eb49 0303 	adc.w	r3, r9, r3
 800cfce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800cfd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800cfd6:	685b      	ldr	r3, [r3, #4]
 800cfd8:	2200      	movs	r2, #0
 800cfda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800cfde:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800cfe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	18db      	adds	r3, r3, r3
 800cfea:	653b      	str	r3, [r7, #80]	@ 0x50
 800cfec:	4613      	mov	r3, r2
 800cfee:	eb42 0303 	adc.w	r3, r2, r3
 800cff2:	657b      	str	r3, [r7, #84]	@ 0x54
 800cff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800cff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800cffc:	f7f3 f938 	bl	8000270 <__aeabi_uldivmod>
 800d000:	4602      	mov	r2, r0
 800d002:	460b      	mov	r3, r1
 800d004:	4b61      	ldr	r3, [pc, #388]	@ (800d18c <UART_SetConfig+0x2d4>)
 800d006:	fba3 2302 	umull	r2, r3, r3, r2
 800d00a:	095b      	lsrs	r3, r3, #5
 800d00c:	011c      	lsls	r4, r3, #4
 800d00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d012:	2200      	movs	r2, #0
 800d014:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d018:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800d01c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800d020:	4642      	mov	r2, r8
 800d022:	464b      	mov	r3, r9
 800d024:	1891      	adds	r1, r2, r2
 800d026:	64b9      	str	r1, [r7, #72]	@ 0x48
 800d028:	415b      	adcs	r3, r3
 800d02a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800d02c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800d030:	4641      	mov	r1, r8
 800d032:	eb12 0a01 	adds.w	sl, r2, r1
 800d036:	4649      	mov	r1, r9
 800d038:	eb43 0b01 	adc.w	fp, r3, r1
 800d03c:	f04f 0200 	mov.w	r2, #0
 800d040:	f04f 0300 	mov.w	r3, #0
 800d044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800d048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800d04c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800d050:	4692      	mov	sl, r2
 800d052:	469b      	mov	fp, r3
 800d054:	4643      	mov	r3, r8
 800d056:	eb1a 0303 	adds.w	r3, sl, r3
 800d05a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d05e:	464b      	mov	r3, r9
 800d060:	eb4b 0303 	adc.w	r3, fp, r3
 800d064:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	2200      	movs	r2, #0
 800d070:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d074:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800d078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d07c:	460b      	mov	r3, r1
 800d07e:	18db      	adds	r3, r3, r3
 800d080:	643b      	str	r3, [r7, #64]	@ 0x40
 800d082:	4613      	mov	r3, r2
 800d084:	eb42 0303 	adc.w	r3, r2, r3
 800d088:	647b      	str	r3, [r7, #68]	@ 0x44
 800d08a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800d08e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800d092:	f7f3 f8ed 	bl	8000270 <__aeabi_uldivmod>
 800d096:	4602      	mov	r2, r0
 800d098:	460b      	mov	r3, r1
 800d09a:	4611      	mov	r1, r2
 800d09c:	4b3b      	ldr	r3, [pc, #236]	@ (800d18c <UART_SetConfig+0x2d4>)
 800d09e:	fba3 2301 	umull	r2, r3, r3, r1
 800d0a2:	095b      	lsrs	r3, r3, #5
 800d0a4:	2264      	movs	r2, #100	@ 0x64
 800d0a6:	fb02 f303 	mul.w	r3, r2, r3
 800d0aa:	1acb      	subs	r3, r1, r3
 800d0ac:	00db      	lsls	r3, r3, #3
 800d0ae:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800d0b2:	4b36      	ldr	r3, [pc, #216]	@ (800d18c <UART_SetConfig+0x2d4>)
 800d0b4:	fba3 2302 	umull	r2, r3, r3, r2
 800d0b8:	095b      	lsrs	r3, r3, #5
 800d0ba:	005b      	lsls	r3, r3, #1
 800d0bc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800d0c0:	441c      	add	r4, r3
 800d0c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d0cc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800d0d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800d0d4:	4642      	mov	r2, r8
 800d0d6:	464b      	mov	r3, r9
 800d0d8:	1891      	adds	r1, r2, r2
 800d0da:	63b9      	str	r1, [r7, #56]	@ 0x38
 800d0dc:	415b      	adcs	r3, r3
 800d0de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d0e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800d0e4:	4641      	mov	r1, r8
 800d0e6:	1851      	adds	r1, r2, r1
 800d0e8:	6339      	str	r1, [r7, #48]	@ 0x30
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	414b      	adcs	r3, r1
 800d0ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0f0:	f04f 0200 	mov.w	r2, #0
 800d0f4:	f04f 0300 	mov.w	r3, #0
 800d0f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800d0fc:	4659      	mov	r1, fp
 800d0fe:	00cb      	lsls	r3, r1, #3
 800d100:	4651      	mov	r1, sl
 800d102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d106:	4651      	mov	r1, sl
 800d108:	00ca      	lsls	r2, r1, #3
 800d10a:	4610      	mov	r0, r2
 800d10c:	4619      	mov	r1, r3
 800d10e:	4603      	mov	r3, r0
 800d110:	4642      	mov	r2, r8
 800d112:	189b      	adds	r3, r3, r2
 800d114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d118:	464b      	mov	r3, r9
 800d11a:	460a      	mov	r2, r1
 800d11c:	eb42 0303 	adc.w	r3, r2, r3
 800d120:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d128:	685b      	ldr	r3, [r3, #4]
 800d12a:	2200      	movs	r2, #0
 800d12c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d130:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800d134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d138:	460b      	mov	r3, r1
 800d13a:	18db      	adds	r3, r3, r3
 800d13c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d13e:	4613      	mov	r3, r2
 800d140:	eb42 0303 	adc.w	r3, r2, r3
 800d144:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800d14a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800d14e:	f7f3 f88f 	bl	8000270 <__aeabi_uldivmod>
 800d152:	4602      	mov	r2, r0
 800d154:	460b      	mov	r3, r1
 800d156:	4b0d      	ldr	r3, [pc, #52]	@ (800d18c <UART_SetConfig+0x2d4>)
 800d158:	fba3 1302 	umull	r1, r3, r3, r2
 800d15c:	095b      	lsrs	r3, r3, #5
 800d15e:	2164      	movs	r1, #100	@ 0x64
 800d160:	fb01 f303 	mul.w	r3, r1, r3
 800d164:	1ad3      	subs	r3, r2, r3
 800d166:	00db      	lsls	r3, r3, #3
 800d168:	3332      	adds	r3, #50	@ 0x32
 800d16a:	4a08      	ldr	r2, [pc, #32]	@ (800d18c <UART_SetConfig+0x2d4>)
 800d16c:	fba2 2303 	umull	r2, r3, r2, r3
 800d170:	095b      	lsrs	r3, r3, #5
 800d172:	f003 0207 	and.w	r2, r3, #7
 800d176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	4422      	add	r2, r4
 800d17e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800d180:	e106      	b.n	800d390 <UART_SetConfig+0x4d8>
 800d182:	bf00      	nop
 800d184:	40011000 	.word	0x40011000
 800d188:	40011400 	.word	0x40011400
 800d18c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800d190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d194:	2200      	movs	r2, #0
 800d196:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d19a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800d19e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800d1a2:	4642      	mov	r2, r8
 800d1a4:	464b      	mov	r3, r9
 800d1a6:	1891      	adds	r1, r2, r2
 800d1a8:	6239      	str	r1, [r7, #32]
 800d1aa:	415b      	adcs	r3, r3
 800d1ac:	627b      	str	r3, [r7, #36]	@ 0x24
 800d1ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800d1b2:	4641      	mov	r1, r8
 800d1b4:	1854      	adds	r4, r2, r1
 800d1b6:	4649      	mov	r1, r9
 800d1b8:	eb43 0501 	adc.w	r5, r3, r1
 800d1bc:	f04f 0200 	mov.w	r2, #0
 800d1c0:	f04f 0300 	mov.w	r3, #0
 800d1c4:	00eb      	lsls	r3, r5, #3
 800d1c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800d1ca:	00e2      	lsls	r2, r4, #3
 800d1cc:	4614      	mov	r4, r2
 800d1ce:	461d      	mov	r5, r3
 800d1d0:	4643      	mov	r3, r8
 800d1d2:	18e3      	adds	r3, r4, r3
 800d1d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d1d8:	464b      	mov	r3, r9
 800d1da:	eb45 0303 	adc.w	r3, r5, r3
 800d1de:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800d1ee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	f04f 0300 	mov.w	r3, #0
 800d1fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800d1fe:	4629      	mov	r1, r5
 800d200:	008b      	lsls	r3, r1, #2
 800d202:	4621      	mov	r1, r4
 800d204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d208:	4621      	mov	r1, r4
 800d20a:	008a      	lsls	r2, r1, #2
 800d20c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800d210:	f7f3 f82e 	bl	8000270 <__aeabi_uldivmod>
 800d214:	4602      	mov	r2, r0
 800d216:	460b      	mov	r3, r1
 800d218:	4b60      	ldr	r3, [pc, #384]	@ (800d39c <UART_SetConfig+0x4e4>)
 800d21a:	fba3 2302 	umull	r2, r3, r3, r2
 800d21e:	095b      	lsrs	r3, r3, #5
 800d220:	011c      	lsls	r4, r3, #4
 800d222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d226:	2200      	movs	r2, #0
 800d228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800d22c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800d230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800d234:	4642      	mov	r2, r8
 800d236:	464b      	mov	r3, r9
 800d238:	1891      	adds	r1, r2, r2
 800d23a:	61b9      	str	r1, [r7, #24]
 800d23c:	415b      	adcs	r3, r3
 800d23e:	61fb      	str	r3, [r7, #28]
 800d240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800d244:	4641      	mov	r1, r8
 800d246:	1851      	adds	r1, r2, r1
 800d248:	6139      	str	r1, [r7, #16]
 800d24a:	4649      	mov	r1, r9
 800d24c:	414b      	adcs	r3, r1
 800d24e:	617b      	str	r3, [r7, #20]
 800d250:	f04f 0200 	mov.w	r2, #0
 800d254:	f04f 0300 	mov.w	r3, #0
 800d258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800d25c:	4659      	mov	r1, fp
 800d25e:	00cb      	lsls	r3, r1, #3
 800d260:	4651      	mov	r1, sl
 800d262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d266:	4651      	mov	r1, sl
 800d268:	00ca      	lsls	r2, r1, #3
 800d26a:	4610      	mov	r0, r2
 800d26c:	4619      	mov	r1, r3
 800d26e:	4603      	mov	r3, r0
 800d270:	4642      	mov	r2, r8
 800d272:	189b      	adds	r3, r3, r2
 800d274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800d278:	464b      	mov	r3, r9
 800d27a:	460a      	mov	r2, r1
 800d27c:	eb42 0303 	adc.w	r3, r2, r3
 800d280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800d284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d288:	685b      	ldr	r3, [r3, #4]
 800d28a:	2200      	movs	r2, #0
 800d28c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d28e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800d290:	f04f 0200 	mov.w	r2, #0
 800d294:	f04f 0300 	mov.w	r3, #0
 800d298:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800d29c:	4649      	mov	r1, r9
 800d29e:	008b      	lsls	r3, r1, #2
 800d2a0:	4641      	mov	r1, r8
 800d2a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d2a6:	4641      	mov	r1, r8
 800d2a8:	008a      	lsls	r2, r1, #2
 800d2aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800d2ae:	f7f2 ffdf 	bl	8000270 <__aeabi_uldivmod>
 800d2b2:	4602      	mov	r2, r0
 800d2b4:	460b      	mov	r3, r1
 800d2b6:	4611      	mov	r1, r2
 800d2b8:	4b38      	ldr	r3, [pc, #224]	@ (800d39c <UART_SetConfig+0x4e4>)
 800d2ba:	fba3 2301 	umull	r2, r3, r3, r1
 800d2be:	095b      	lsrs	r3, r3, #5
 800d2c0:	2264      	movs	r2, #100	@ 0x64
 800d2c2:	fb02 f303 	mul.w	r3, r2, r3
 800d2c6:	1acb      	subs	r3, r1, r3
 800d2c8:	011b      	lsls	r3, r3, #4
 800d2ca:	3332      	adds	r3, #50	@ 0x32
 800d2cc:	4a33      	ldr	r2, [pc, #204]	@ (800d39c <UART_SetConfig+0x4e4>)
 800d2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800d2d2:	095b      	lsrs	r3, r3, #5
 800d2d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800d2d8:	441c      	add	r4, r3
 800d2da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800d2de:	2200      	movs	r2, #0
 800d2e0:	673b      	str	r3, [r7, #112]	@ 0x70
 800d2e2:	677a      	str	r2, [r7, #116]	@ 0x74
 800d2e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800d2e8:	4642      	mov	r2, r8
 800d2ea:	464b      	mov	r3, r9
 800d2ec:	1891      	adds	r1, r2, r2
 800d2ee:	60b9      	str	r1, [r7, #8]
 800d2f0:	415b      	adcs	r3, r3
 800d2f2:	60fb      	str	r3, [r7, #12]
 800d2f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d2f8:	4641      	mov	r1, r8
 800d2fa:	1851      	adds	r1, r2, r1
 800d2fc:	6039      	str	r1, [r7, #0]
 800d2fe:	4649      	mov	r1, r9
 800d300:	414b      	adcs	r3, r1
 800d302:	607b      	str	r3, [r7, #4]
 800d304:	f04f 0200 	mov.w	r2, #0
 800d308:	f04f 0300 	mov.w	r3, #0
 800d30c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800d310:	4659      	mov	r1, fp
 800d312:	00cb      	lsls	r3, r1, #3
 800d314:	4651      	mov	r1, sl
 800d316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800d31a:	4651      	mov	r1, sl
 800d31c:	00ca      	lsls	r2, r1, #3
 800d31e:	4610      	mov	r0, r2
 800d320:	4619      	mov	r1, r3
 800d322:	4603      	mov	r3, r0
 800d324:	4642      	mov	r2, r8
 800d326:	189b      	adds	r3, r3, r2
 800d328:	66bb      	str	r3, [r7, #104]	@ 0x68
 800d32a:	464b      	mov	r3, r9
 800d32c:	460a      	mov	r2, r1
 800d32e:	eb42 0303 	adc.w	r3, r2, r3
 800d332:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d338:	685b      	ldr	r3, [r3, #4]
 800d33a:	2200      	movs	r2, #0
 800d33c:	663b      	str	r3, [r7, #96]	@ 0x60
 800d33e:	667a      	str	r2, [r7, #100]	@ 0x64
 800d340:	f04f 0200 	mov.w	r2, #0
 800d344:	f04f 0300 	mov.w	r3, #0
 800d348:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800d34c:	4649      	mov	r1, r9
 800d34e:	008b      	lsls	r3, r1, #2
 800d350:	4641      	mov	r1, r8
 800d352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800d356:	4641      	mov	r1, r8
 800d358:	008a      	lsls	r2, r1, #2
 800d35a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800d35e:	f7f2 ff87 	bl	8000270 <__aeabi_uldivmod>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	4b0d      	ldr	r3, [pc, #52]	@ (800d39c <UART_SetConfig+0x4e4>)
 800d368:	fba3 1302 	umull	r1, r3, r3, r2
 800d36c:	095b      	lsrs	r3, r3, #5
 800d36e:	2164      	movs	r1, #100	@ 0x64
 800d370:	fb01 f303 	mul.w	r3, r1, r3
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	011b      	lsls	r3, r3, #4
 800d378:	3332      	adds	r3, #50	@ 0x32
 800d37a:	4a08      	ldr	r2, [pc, #32]	@ (800d39c <UART_SetConfig+0x4e4>)
 800d37c:	fba2 2303 	umull	r2, r3, r2, r3
 800d380:	095b      	lsrs	r3, r3, #5
 800d382:	f003 020f 	and.w	r2, r3, #15
 800d386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	4422      	add	r2, r4
 800d38e:	609a      	str	r2, [r3, #8]
}
 800d390:	bf00      	nop
 800d392:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800d396:	46bd      	mov	sp, r7
 800d398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d39c:	51eb851f 	.word	0x51eb851f

0800d3a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d3a0:	b084      	sub	sp, #16
 800d3a2:	b580      	push	{r7, lr}
 800d3a4:	b084      	sub	sp, #16
 800d3a6:	af00      	add	r7, sp, #0
 800d3a8:	6078      	str	r0, [r7, #4]
 800d3aa:	f107 001c 	add.w	r0, r7, #28
 800d3ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800d3b2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d123      	bne.n	800d402 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d3be:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800d3ce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800d3d2:	687a      	ldr	r2, [r7, #4]
 800d3d4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	68db      	ldr	r3, [r3, #12]
 800d3da:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800d3e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d3e6:	2b01      	cmp	r3, #1
 800d3e8:	d105      	bne.n	800d3f6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	68db      	ldr	r3, [r3, #12]
 800d3ee:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d3f6:	6878      	ldr	r0, [r7, #4]
 800d3f8:	f000 f9dc 	bl	800d7b4 <USB_CoreReset>
 800d3fc:	4603      	mov	r3, r0
 800d3fe:	73fb      	strb	r3, [r7, #15]
 800d400:	e01b      	b.n	800d43a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	68db      	ldr	r3, [r3, #12]
 800d406:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 f9d0 	bl	800d7b4 <USB_CoreReset>
 800d414:	4603      	mov	r3, r0
 800d416:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800d418:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d106      	bne.n	800d42e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d424:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	639a      	str	r2, [r3, #56]	@ 0x38
 800d42c:	e005      	b.n	800d43a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d432:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800d43a:	7fbb      	ldrb	r3, [r7, #30]
 800d43c:	2b01      	cmp	r3, #1
 800d43e:	d10b      	bne.n	800d458 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	f043 0206 	orr.w	r2, r3, #6
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	689b      	ldr	r3, [r3, #8]
 800d450:	f043 0220 	orr.w	r2, r3, #32
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800d458:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45a:	4618      	mov	r0, r3
 800d45c:	3710      	adds	r7, #16
 800d45e:	46bd      	mov	sp, r7
 800d460:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d464:	b004      	add	sp, #16
 800d466:	4770      	bx	lr

0800d468 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d468:	b480      	push	{r7}
 800d46a:	b083      	sub	sp, #12
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	f043 0201 	orr.w	r2, r3, #1
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d47c:	2300      	movs	r3, #0
}
 800d47e:	4618      	mov	r0, r3
 800d480:	370c      	adds	r7, #12
 800d482:	46bd      	mov	sp, r7
 800d484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d488:	4770      	bx	lr

0800d48a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800d48a:	b480      	push	{r7}
 800d48c:	b083      	sub	sp, #12
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	689b      	ldr	r3, [r3, #8]
 800d496:	f023 0201 	bic.w	r2, r3, #1
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800d49e:	2300      	movs	r3, #0
}
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	370c      	adds	r7, #12
 800d4a4:	46bd      	mov	sp, r7
 800d4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4aa:	4770      	bx	lr

0800d4ac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800d4ac:	b580      	push	{r7, lr}
 800d4ae:	b084      	sub	sp, #16
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
 800d4b4:	460b      	mov	r3, r1
 800d4b6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	68db      	ldr	r3, [r3, #12]
 800d4c0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800d4c8:	78fb      	ldrb	r3, [r7, #3]
 800d4ca:	2b01      	cmp	r3, #1
 800d4cc:	d115      	bne.n	800d4fa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	68db      	ldr	r3, [r3, #12]
 800d4d2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d4da:	200a      	movs	r0, #10
 800d4dc:	f7fb fa6e 	bl	80089bc <HAL_Delay>
      ms += 10U;
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	330a      	adds	r3, #10
 800d4e4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 f956 	bl	800d798 <USB_GetMode>
 800d4ec:	4603      	mov	r3, r0
 800d4ee:	2b01      	cmp	r3, #1
 800d4f0:	d01e      	beq.n	800d530 <USB_SetCurrentMode+0x84>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2bc7      	cmp	r3, #199	@ 0xc7
 800d4f6:	d9f0      	bls.n	800d4da <USB_SetCurrentMode+0x2e>
 800d4f8:	e01a      	b.n	800d530 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800d4fa:	78fb      	ldrb	r3, [r7, #3]
 800d4fc:	2b00      	cmp	r3, #0
 800d4fe:	d115      	bne.n	800d52c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800d50c:	200a      	movs	r0, #10
 800d50e:	f7fb fa55 	bl	80089bc <HAL_Delay>
      ms += 10U;
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	330a      	adds	r3, #10
 800d516:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f000 f93d 	bl	800d798 <USB_GetMode>
 800d51e:	4603      	mov	r3, r0
 800d520:	2b00      	cmp	r3, #0
 800d522:	d005      	beq.n	800d530 <USB_SetCurrentMode+0x84>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2bc7      	cmp	r3, #199	@ 0xc7
 800d528:	d9f0      	bls.n	800d50c <USB_SetCurrentMode+0x60>
 800d52a:	e001      	b.n	800d530 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800d52c:	2301      	movs	r3, #1
 800d52e:	e005      	b.n	800d53c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	2bc8      	cmp	r3, #200	@ 0xc8
 800d534:	d101      	bne.n	800d53a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800d536:	2301      	movs	r3, #1
 800d538:	e000      	b.n	800d53c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800d53a:	2300      	movs	r3, #0
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3710      	adds	r7, #16
 800d540:	46bd      	mov	sp, r7
 800d542:	bd80      	pop	{r7, pc}

0800d544 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800d544:	b480      	push	{r7}
 800d546:	b085      	sub	sp, #20
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
 800d54c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800d54e:	2300      	movs	r3, #0
 800d550:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	3301      	adds	r3, #1
 800d556:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d55e:	d901      	bls.n	800d564 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800d560:	2303      	movs	r3, #3
 800d562:	e01b      	b.n	800d59c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	691b      	ldr	r3, [r3, #16]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	daf2      	bge.n	800d552 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800d56c:	2300      	movs	r3, #0
 800d56e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	019b      	lsls	r3, r3, #6
 800d574:	f043 0220 	orr.w	r2, r3, #32
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	3301      	adds	r3, #1
 800d580:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d588:	d901      	bls.n	800d58e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e006      	b.n	800d59c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	691b      	ldr	r3, [r3, #16]
 800d592:	f003 0320 	and.w	r3, r3, #32
 800d596:	2b20      	cmp	r3, #32
 800d598:	d0f0      	beq.n	800d57c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800d59a:	2300      	movs	r3, #0
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3714      	adds	r7, #20
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5a6:	4770      	bx	lr

0800d5a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	3301      	adds	r3, #1
 800d5b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5c0:	d901      	bls.n	800d5c6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800d5c2:	2303      	movs	r3, #3
 800d5c4:	e018      	b.n	800d5f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	691b      	ldr	r3, [r3, #16]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	daf2      	bge.n	800d5b4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2210      	movs	r2, #16
 800d5d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	3301      	adds	r3, #1
 800d5dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d5e4:	d901      	bls.n	800d5ea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800d5e6:	2303      	movs	r3, #3
 800d5e8:	e006      	b.n	800d5f8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	691b      	ldr	r3, [r3, #16]
 800d5ee:	f003 0310 	and.w	r3, r3, #16
 800d5f2:	2b10      	cmp	r3, #16
 800d5f4:	d0f0      	beq.n	800d5d8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800d5f6:	2300      	movs	r3, #0
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3714      	adds	r7, #20
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d602:	4770      	bx	lr

0800d604 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d604:	b480      	push	{r7}
 800d606:	b089      	sub	sp, #36	@ 0x24
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60f8      	str	r0, [r7, #12]
 800d60c:	60b9      	str	r1, [r7, #8]
 800d60e:	4611      	mov	r1, r2
 800d610:	461a      	mov	r2, r3
 800d612:	460b      	mov	r3, r1
 800d614:	71fb      	strb	r3, [r7, #7]
 800d616:	4613      	mov	r3, r2
 800d618:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d61e:	68bb      	ldr	r3, [r7, #8]
 800d620:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d622:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800d626:	2b00      	cmp	r3, #0
 800d628:	d123      	bne.n	800d672 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d62a:	88bb      	ldrh	r3, [r7, #4]
 800d62c:	3303      	adds	r3, #3
 800d62e:	089b      	lsrs	r3, r3, #2
 800d630:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d632:	2300      	movs	r3, #0
 800d634:	61bb      	str	r3, [r7, #24]
 800d636:	e018      	b.n	800d66a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	031a      	lsls	r2, r3, #12
 800d63c:	697b      	ldr	r3, [r7, #20]
 800d63e:	4413      	add	r3, r2
 800d640:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d644:	461a      	mov	r2, r3
 800d646:	69fb      	ldr	r3, [r7, #28]
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	3301      	adds	r3, #1
 800d650:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d652:	69fb      	ldr	r3, [r7, #28]
 800d654:	3301      	adds	r3, #1
 800d656:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	3301      	adds	r3, #1
 800d65c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d65e:	69fb      	ldr	r3, [r7, #28]
 800d660:	3301      	adds	r3, #1
 800d662:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d664:	69bb      	ldr	r3, [r7, #24]
 800d666:	3301      	adds	r3, #1
 800d668:	61bb      	str	r3, [r7, #24]
 800d66a:	69ba      	ldr	r2, [r7, #24]
 800d66c:	693b      	ldr	r3, [r7, #16]
 800d66e:	429a      	cmp	r2, r3
 800d670:	d3e2      	bcc.n	800d638 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d672:	2300      	movs	r3, #0
}
 800d674:	4618      	mov	r0, r3
 800d676:	3724      	adds	r7, #36	@ 0x24
 800d678:	46bd      	mov	sp, r7
 800d67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67e:	4770      	bx	lr

0800d680 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d680:	b480      	push	{r7}
 800d682:	b08b      	sub	sp, #44	@ 0x2c
 800d684:	af00      	add	r7, sp, #0
 800d686:	60f8      	str	r0, [r7, #12]
 800d688:	60b9      	str	r1, [r7, #8]
 800d68a:	4613      	mov	r3, r2
 800d68c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d696:	88fb      	ldrh	r3, [r7, #6]
 800d698:	089b      	lsrs	r3, r3, #2
 800d69a:	b29b      	uxth	r3, r3
 800d69c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d69e:	88fb      	ldrh	r3, [r7, #6]
 800d6a0:	f003 0303 	and.w	r3, r3, #3
 800d6a4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	623b      	str	r3, [r7, #32]
 800d6aa:	e014      	b.n	800d6d6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6b2:	681a      	ldr	r2, [r3, #0]
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6b6:	601a      	str	r2, [r3, #0]
    pDest++;
 800d6b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c0:	3301      	adds	r3, #1
 800d6c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d6c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	3301      	adds	r3, #1
 800d6d4:	623b      	str	r3, [r7, #32]
 800d6d6:	6a3a      	ldr	r2, [r7, #32]
 800d6d8:	697b      	ldr	r3, [r7, #20]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d3e6      	bcc.n	800d6ac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d6de:	8bfb      	ldrh	r3, [r7, #30]
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d01e      	beq.n	800d722 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d6e8:	69bb      	ldr	r3, [r7, #24]
 800d6ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	f107 0310 	add.w	r3, r7, #16
 800d6f4:	6812      	ldr	r2, [r2, #0]
 800d6f6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d6f8:	693a      	ldr	r2, [r7, #16]
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	00db      	lsls	r3, r3, #3
 800d700:	fa22 f303 	lsr.w	r3, r2, r3
 800d704:	b2da      	uxtb	r2, r3
 800d706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d708:	701a      	strb	r2, [r3, #0]
      i++;
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	3301      	adds	r3, #1
 800d70e:	623b      	str	r3, [r7, #32]
      pDest++;
 800d710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d712:	3301      	adds	r3, #1
 800d714:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800d716:	8bfb      	ldrh	r3, [r7, #30]
 800d718:	3b01      	subs	r3, #1
 800d71a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d71c:	8bfb      	ldrh	r3, [r7, #30]
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d1ea      	bne.n	800d6f8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d724:	4618      	mov	r0, r3
 800d726:	372c      	adds	r7, #44	@ 0x2c
 800d728:	46bd      	mov	sp, r7
 800d72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72e:	4770      	bx	lr

0800d730 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800d730:	b480      	push	{r7}
 800d732:	b085      	sub	sp, #20
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	695b      	ldr	r3, [r3, #20]
 800d73c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	699b      	ldr	r3, [r3, #24]
 800d742:	68fa      	ldr	r2, [r7, #12]
 800d744:	4013      	ands	r3, r2
 800d746:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d748:	68fb      	ldr	r3, [r7, #12]
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr

0800d756 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800d756:	b480      	push	{r7}
 800d758:	b085      	sub	sp, #20
 800d75a:	af00      	add	r7, sp, #0
 800d75c:	6078      	str	r0, [r7, #4]
 800d75e:	460b      	mov	r3, r1
 800d760:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800d766:	78fb      	ldrb	r3, [r7, #3]
 800d768:	015a      	lsls	r2, r3, #5
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	4413      	add	r3, r2
 800d76e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d772:	689b      	ldr	r3, [r3, #8]
 800d774:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800d776:	78fb      	ldrb	r3, [r7, #3]
 800d778:	015a      	lsls	r2, r3, #5
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	4413      	add	r3, r2
 800d77e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d782:	68db      	ldr	r3, [r3, #12]
 800d784:	68ba      	ldr	r2, [r7, #8]
 800d786:	4013      	ands	r3, r2
 800d788:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d78a:	68bb      	ldr	r3, [r7, #8]
}
 800d78c:	4618      	mov	r0, r3
 800d78e:	3714      	adds	r7, #20
 800d790:	46bd      	mov	sp, r7
 800d792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d796:	4770      	bx	lr

0800d798 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	695b      	ldr	r3, [r3, #20]
 800d7a4:	f003 0301 	and.w	r3, r3, #1
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b2:	4770      	bx	lr

0800d7b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d7b4:	b480      	push	{r7}
 800d7b6:	b085      	sub	sp, #20
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	3301      	adds	r3, #1
 800d7c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7cc:	d901      	bls.n	800d7d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e01b      	b.n	800d80a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	691b      	ldr	r3, [r3, #16]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	daf2      	bge.n	800d7c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	691b      	ldr	r3, [r3, #16]
 800d7e2:	f043 0201 	orr.w	r2, r3, #1
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800d7f6:	d901      	bls.n	800d7fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d7f8:	2303      	movs	r3, #3
 800d7fa:	e006      	b.n	800d80a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	f003 0301 	and.w	r3, r3, #1
 800d804:	2b01      	cmp	r3, #1
 800d806:	d0f0      	beq.n	800d7ea <USB_CoreReset+0x36>

  return HAL_OK;
 800d808:	2300      	movs	r3, #0
}
 800d80a:	4618      	mov	r0, r3
 800d80c:	3714      	adds	r7, #20
 800d80e:	46bd      	mov	sp, r7
 800d810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d814:	4770      	bx	lr
	...

0800d818 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800d818:	b084      	sub	sp, #16
 800d81a:	b580      	push	{r7, lr}
 800d81c:	b086      	sub	sp, #24
 800d81e:	af00      	add	r7, sp, #0
 800d820:	6078      	str	r0, [r7, #4]
 800d822:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800d826:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800d82a:	2300      	movs	r3, #0
 800d82c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d838:	461a      	mov	r2, r3
 800d83a:	2300      	movs	r3, #0
 800d83c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d842:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d84e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d85a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d119      	bne.n	800d8a2 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800d86e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d872:	2b01      	cmp	r3, #1
 800d874:	d10a      	bne.n	800d88c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	68fa      	ldr	r2, [r7, #12]
 800d880:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d884:	f043 0304 	orr.w	r3, r3, #4
 800d888:	6013      	str	r3, [r2, #0]
 800d88a:	e014      	b.n	800d8b6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	68fa      	ldr	r2, [r7, #12]
 800d896:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d89a:	f023 0304 	bic.w	r3, r3, #4
 800d89e:	6013      	str	r3, [r2, #0]
 800d8a0:	e009      	b.n	800d8b6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	68fa      	ldr	r2, [r7, #12]
 800d8ac:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d8b0:	f023 0304 	bic.w	r3, r3, #4
 800d8b4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d8b6:	2110      	movs	r1, #16
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	f7ff fe43 	bl	800d544 <USB_FlushTxFifo>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800d8c4:	2301      	movs	r3, #1
 800d8c6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d8c8:	6878      	ldr	r0, [r7, #4]
 800d8ca:	f7ff fe6d 	bl	800d5a8 <USB_FlushRxFifo>
 800d8ce:	4603      	mov	r3, r0
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d001      	beq.n	800d8d8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800d8d8:	2300      	movs	r3, #0
 800d8da:	613b      	str	r3, [r7, #16]
 800d8dc:	e015      	b.n	800d90a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800d8de:	693b      	ldr	r3, [r7, #16]
 800d8e0:	015a      	lsls	r2, r3, #5
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8ea:	461a      	mov	r2, r3
 800d8ec:	f04f 33ff 	mov.w	r3, #4294967295
 800d8f0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800d8f2:	693b      	ldr	r3, [r7, #16]
 800d8f4:	015a      	lsls	r2, r3, #5
 800d8f6:	68fb      	ldr	r3, [r7, #12]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800d8fe:	461a      	mov	r2, r3
 800d900:	2300      	movs	r3, #0
 800d902:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	3301      	adds	r3, #1
 800d908:	613b      	str	r3, [r7, #16]
 800d90a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800d90e:	461a      	mov	r2, r3
 800d910:	693b      	ldr	r3, [r7, #16]
 800d912:	4293      	cmp	r3, r2
 800d914:	d3e3      	bcc.n	800d8de <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	2200      	movs	r2, #0
 800d91a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f04f 32ff 	mov.w	r2, #4294967295
 800d922:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	4a18      	ldr	r2, [pc, #96]	@ (800d988 <USB_HostInit+0x170>)
 800d928:	4293      	cmp	r3, r2
 800d92a:	d10b      	bne.n	800d944 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d932:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	4a15      	ldr	r2, [pc, #84]	@ (800d98c <USB_HostInit+0x174>)
 800d938:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4a14      	ldr	r2, [pc, #80]	@ (800d990 <USB_HostInit+0x178>)
 800d93e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800d942:	e009      	b.n	800d958 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	2280      	movs	r2, #128	@ 0x80
 800d948:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	4a11      	ldr	r2, [pc, #68]	@ (800d994 <USB_HostInit+0x17c>)
 800d94e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	4a11      	ldr	r2, [pc, #68]	@ (800d998 <USB_HostInit+0x180>)
 800d954:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800d958:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d105      	bne.n	800d96c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	699b      	ldr	r3, [r3, #24]
 800d964:	f043 0210 	orr.w	r2, r3, #16
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	699a      	ldr	r2, [r3, #24]
 800d970:	4b0a      	ldr	r3, [pc, #40]	@ (800d99c <USB_HostInit+0x184>)
 800d972:	4313      	orrs	r3, r2
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d978:	7dfb      	ldrb	r3, [r7, #23]
}
 800d97a:	4618      	mov	r0, r3
 800d97c:	3718      	adds	r7, #24
 800d97e:	46bd      	mov	sp, r7
 800d980:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d984:	b004      	add	sp, #16
 800d986:	4770      	bx	lr
 800d988:	40040000 	.word	0x40040000
 800d98c:	01000200 	.word	0x01000200
 800d990:	00e00300 	.word	0x00e00300
 800d994:	00600080 	.word	0x00600080
 800d998:	004000e0 	.word	0x004000e0
 800d99c:	a3200008 	.word	0xa3200008

0800d9a0 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	460b      	mov	r3, r1
 800d9aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	68fa      	ldr	r2, [r7, #12]
 800d9ba:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800d9be:	f023 0303 	bic.w	r3, r3, #3
 800d9c2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9ca:	681a      	ldr	r2, [r3, #0]
 800d9cc:	78fb      	ldrb	r3, [r7, #3]
 800d9ce:	f003 0303 	and.w	r3, r3, #3
 800d9d2:	68f9      	ldr	r1, [r7, #12]
 800d9d4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800d9d8:	4313      	orrs	r3, r2
 800d9da:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d9dc:	78fb      	ldrb	r3, [r7, #3]
 800d9de:	2b01      	cmp	r3, #1
 800d9e0:	d107      	bne.n	800d9f2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9e8:	461a      	mov	r2, r3
 800d9ea:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800d9ee:	6053      	str	r3, [r2, #4]
 800d9f0:	e00c      	b.n	800da0c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800d9f2:	78fb      	ldrb	r3, [r7, #3]
 800d9f4:	2b02      	cmp	r3, #2
 800d9f6:	d107      	bne.n	800da08 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800d9fe:	461a      	mov	r2, r3
 800da00:	f241 7370 	movw	r3, #6000	@ 0x1770
 800da04:	6053      	str	r3, [r2, #4]
 800da06:	e001      	b.n	800da0c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800da08:	2301      	movs	r3, #1
 800da0a:	e000      	b.n	800da0e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800da0c:	2300      	movs	r3, #0
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b084      	sub	sp, #16
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800da26:	2300      	movs	r3, #0
 800da28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800da3a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	68fa      	ldr	r2, [r7, #12]
 800da40:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800da44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800da48:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800da4a:	2064      	movs	r0, #100	@ 0x64
 800da4c:	f7fa ffb6 	bl	80089bc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800da50:	68bb      	ldr	r3, [r7, #8]
 800da52:	68fa      	ldr	r2, [r7, #12]
 800da54:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800da58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800da5c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800da5e:	200a      	movs	r0, #10
 800da60:	f7fa ffac 	bl	80089bc <HAL_Delay>

  return HAL_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800da6e:	b480      	push	{r7}
 800da70:	b085      	sub	sp, #20
 800da72:	af00      	add	r7, sp, #0
 800da74:	6078      	str	r0, [r7, #4]
 800da76:	460b      	mov	r3, r1
 800da78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800da7e:	2300      	movs	r3, #0
 800da80:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800da8c:	68bb      	ldr	r3, [r7, #8]
 800da8e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800da92:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800da94:	68bb      	ldr	r3, [r7, #8]
 800da96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d109      	bne.n	800dab2 <USB_DriveVbus+0x44>
 800da9e:	78fb      	ldrb	r3, [r7, #3]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	d106      	bne.n	800dab2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800daac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800dab0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800dab2:	68bb      	ldr	r3, [r7, #8]
 800dab4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800dab8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dabc:	d109      	bne.n	800dad2 <USB_DriveVbus+0x64>
 800dabe:	78fb      	ldrb	r3, [r7, #3]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d106      	bne.n	800dad2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800dac4:	68bb      	ldr	r3, [r7, #8]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800dacc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800dad0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800dad2:	2300      	movs	r3, #0
}
 800dad4:	4618      	mov	r0, r3
 800dad6:	3714      	adds	r7, #20
 800dad8:	46bd      	mov	sp, r7
 800dada:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dade:	4770      	bx	lr

0800dae0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800dae0:	b480      	push	{r7}
 800dae2:	b085      	sub	sp, #20
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800daec:	2300      	movs	r3, #0
 800daee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800dafa:	68bb      	ldr	r3, [r7, #8]
 800dafc:	0c5b      	lsrs	r3, r3, #17
 800dafe:	f003 0303 	and.w	r3, r3, #3
}
 800db02:	4618      	mov	r0, r3
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800db0e:	b480      	push	{r7}
 800db10:	b085      	sub	sp, #20
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800db20:	689b      	ldr	r3, [r3, #8]
 800db22:	b29b      	uxth	r3, r3
}
 800db24:	4618      	mov	r0, r3
 800db26:	3714      	adds	r7, #20
 800db28:	46bd      	mov	sp, r7
 800db2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2e:	4770      	bx	lr

0800db30 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800db30:	b580      	push	{r7, lr}
 800db32:	b088      	sub	sp, #32
 800db34:	af00      	add	r7, sp, #0
 800db36:	6078      	str	r0, [r7, #4]
 800db38:	4608      	mov	r0, r1
 800db3a:	4611      	mov	r1, r2
 800db3c:	461a      	mov	r2, r3
 800db3e:	4603      	mov	r3, r0
 800db40:	70fb      	strb	r3, [r7, #3]
 800db42:	460b      	mov	r3, r1
 800db44:	70bb      	strb	r3, [r7, #2]
 800db46:	4613      	mov	r3, r2
 800db48:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800db4a:	2300      	movs	r3, #0
 800db4c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800db52:	78fb      	ldrb	r3, [r7, #3]
 800db54:	015a      	lsls	r2, r3, #5
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	4413      	add	r3, r2
 800db5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db5e:	461a      	mov	r2, r3
 800db60:	f04f 33ff 	mov.w	r3, #4294967295
 800db64:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800db66:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800db6a:	2b03      	cmp	r3, #3
 800db6c:	d87c      	bhi.n	800dc68 <USB_HC_Init+0x138>
 800db6e:	a201      	add	r2, pc, #4	@ (adr r2, 800db74 <USB_HC_Init+0x44>)
 800db70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db74:	0800db85 	.word	0x0800db85
 800db78:	0800dc2b 	.word	0x0800dc2b
 800db7c:	0800db85 	.word	0x0800db85
 800db80:	0800dbed 	.word	0x0800dbed
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800db84:	78fb      	ldrb	r3, [r7, #3]
 800db86:	015a      	lsls	r2, r3, #5
 800db88:	693b      	ldr	r3, [r7, #16]
 800db8a:	4413      	add	r3, r2
 800db8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800db90:	461a      	mov	r2, r3
 800db92:	f240 439d 	movw	r3, #1181	@ 0x49d
 800db96:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800db98:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	da10      	bge.n	800dbc2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dba0:	78fb      	ldrb	r3, [r7, #3]
 800dba2:	015a      	lsls	r2, r3, #5
 800dba4:	693b      	ldr	r3, [r7, #16]
 800dba6:	4413      	add	r3, r2
 800dba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbac:	68db      	ldr	r3, [r3, #12]
 800dbae:	78fa      	ldrb	r2, [r7, #3]
 800dbb0:	0151      	lsls	r1, r2, #5
 800dbb2:	693a      	ldr	r2, [r7, #16]
 800dbb4:	440a      	add	r2, r1
 800dbb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dbbe:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800dbc0:	e055      	b.n	800dc6e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	4a6f      	ldr	r2, [pc, #444]	@ (800dd84 <USB_HC_Init+0x254>)
 800dbc6:	4293      	cmp	r3, r2
 800dbc8:	d151      	bne.n	800dc6e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800dbca:	78fb      	ldrb	r3, [r7, #3]
 800dbcc:	015a      	lsls	r2, r3, #5
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	4413      	add	r3, r2
 800dbd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbd6:	68db      	ldr	r3, [r3, #12]
 800dbd8:	78fa      	ldrb	r2, [r7, #3]
 800dbda:	0151      	lsls	r1, r2, #5
 800dbdc:	693a      	ldr	r2, [r7, #16]
 800dbde:	440a      	add	r2, r1
 800dbe0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dbe4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800dbe8:	60d3      	str	r3, [r2, #12]
      break;
 800dbea:	e040      	b.n	800dc6e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dbec:	78fb      	ldrb	r3, [r7, #3]
 800dbee:	015a      	lsls	r2, r3, #5
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dbf8:	461a      	mov	r2, r3
 800dbfa:	f240 639d 	movw	r3, #1693	@ 0x69d
 800dbfe:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc00:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	da34      	bge.n	800dc72 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800dc08:	78fb      	ldrb	r3, [r7, #3]
 800dc0a:	015a      	lsls	r2, r3, #5
 800dc0c:	693b      	ldr	r3, [r7, #16]
 800dc0e:	4413      	add	r3, r2
 800dc10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	78fa      	ldrb	r2, [r7, #3]
 800dc18:	0151      	lsls	r1, r2, #5
 800dc1a:	693a      	ldr	r2, [r7, #16]
 800dc1c:	440a      	add	r2, r1
 800dc1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc22:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800dc26:	60d3      	str	r3, [r2, #12]
      }

      break;
 800dc28:	e023      	b.n	800dc72 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800dc2a:	78fb      	ldrb	r3, [r7, #3]
 800dc2c:	015a      	lsls	r2, r3, #5
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	4413      	add	r3, r2
 800dc32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc36:	461a      	mov	r2, r3
 800dc38:	f240 2325 	movw	r3, #549	@ 0x225
 800dc3c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800dc3e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	da17      	bge.n	800dc76 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800dc46:	78fb      	ldrb	r3, [r7, #3]
 800dc48:	015a      	lsls	r2, r3, #5
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	4413      	add	r3, r2
 800dc4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	78fa      	ldrb	r2, [r7, #3]
 800dc56:	0151      	lsls	r1, r2, #5
 800dc58:	693a      	ldr	r2, [r7, #16]
 800dc5a:	440a      	add	r2, r1
 800dc5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dc60:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800dc64:	60d3      	str	r3, [r2, #12]
      }
      break;
 800dc66:	e006      	b.n	800dc76 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800dc68:	2301      	movs	r3, #1
 800dc6a:	77fb      	strb	r3, [r7, #31]
      break;
 800dc6c:	e004      	b.n	800dc78 <USB_HC_Init+0x148>
      break;
 800dc6e:	bf00      	nop
 800dc70:	e002      	b.n	800dc78 <USB_HC_Init+0x148>
      break;
 800dc72:	bf00      	nop
 800dc74:	e000      	b.n	800dc78 <USB_HC_Init+0x148>
      break;
 800dc76:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800dc78:	78fb      	ldrb	r3, [r7, #3]
 800dc7a:	015a      	lsls	r2, r3, #5
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	4413      	add	r3, r2
 800dc80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc84:	461a      	mov	r2, r3
 800dc86:	2300      	movs	r3, #0
 800dc88:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800dc8a:	78fb      	ldrb	r3, [r7, #3]
 800dc8c:	015a      	lsls	r2, r3, #5
 800dc8e:	693b      	ldr	r3, [r7, #16]
 800dc90:	4413      	add	r3, r2
 800dc92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dc96:	68db      	ldr	r3, [r3, #12]
 800dc98:	78fa      	ldrb	r2, [r7, #3]
 800dc9a:	0151      	lsls	r1, r2, #5
 800dc9c:	693a      	ldr	r2, [r7, #16]
 800dc9e:	440a      	add	r2, r1
 800dca0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dca4:	f043 0302 	orr.w	r3, r3, #2
 800dca8:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800dcaa:	693b      	ldr	r3, [r7, #16]
 800dcac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800dcb0:	699a      	ldr	r2, [r3, #24]
 800dcb2:	78fb      	ldrb	r3, [r7, #3]
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	2101      	movs	r1, #1
 800dcba:	fa01 f303 	lsl.w	r3, r1, r3
 800dcbe:	6939      	ldr	r1, [r7, #16]
 800dcc0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800dcc4:	4313      	orrs	r3, r2
 800dcc6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	699b      	ldr	r3, [r3, #24]
 800dccc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800dcd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	da03      	bge.n	800dce4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800dcdc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800dce0:	61bb      	str	r3, [r7, #24]
 800dce2:	e001      	b.n	800dce8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800dce4:	2300      	movs	r3, #0
 800dce6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f7ff fef9 	bl	800dae0 <USB_GetHostSpeed>
 800dcee:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800dcf0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800dcf4:	2b02      	cmp	r3, #2
 800dcf6:	d106      	bne.n	800dd06 <USB_HC_Init+0x1d6>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2b02      	cmp	r3, #2
 800dcfc:	d003      	beq.n	800dd06 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800dcfe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800dd02:	617b      	str	r3, [r7, #20]
 800dd04:	e001      	b.n	800dd0a <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800dd06:	2300      	movs	r3, #0
 800dd08:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd0a:	787b      	ldrb	r3, [r7, #1]
 800dd0c:	059b      	lsls	r3, r3, #22
 800dd0e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dd12:	78bb      	ldrb	r3, [r7, #2]
 800dd14:	02db      	lsls	r3, r3, #11
 800dd16:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd1a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dd1c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd20:	049b      	lsls	r3, r3, #18
 800dd22:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800dd26:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800dd28:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800dd2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800dd2e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dd30:	69bb      	ldr	r3, [r7, #24]
 800dd32:	431a      	orrs	r2, r3
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd38:	78fa      	ldrb	r2, [r7, #3]
 800dd3a:	0151      	lsls	r1, r2, #5
 800dd3c:	693a      	ldr	r2, [r7, #16]
 800dd3e:	440a      	add	r2, r1
 800dd40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800dd44:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800dd48:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800dd4a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd4e:	2b03      	cmp	r3, #3
 800dd50:	d003      	beq.n	800dd5a <USB_HC_Init+0x22a>
 800dd52:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d10f      	bne.n	800dd7a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800dd5a:	78fb      	ldrb	r3, [r7, #3]
 800dd5c:	015a      	lsls	r2, r3, #5
 800dd5e:	693b      	ldr	r3, [r7, #16]
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	78fa      	ldrb	r2, [r7, #3]
 800dd6a:	0151      	lsls	r1, r2, #5
 800dd6c:	693a      	ldr	r2, [r7, #16]
 800dd6e:	440a      	add	r2, r1
 800dd70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dd74:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800dd78:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800dd7a:	7ffb      	ldrb	r3, [r7, #31]
}
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	3720      	adds	r7, #32
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}
 800dd84:	40040000 	.word	0x40040000

0800dd88 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b08c      	sub	sp, #48	@ 0x30
 800dd8c:	af02      	add	r7, sp, #8
 800dd8e:	60f8      	str	r0, [r7, #12]
 800dd90:	60b9      	str	r1, [r7, #8]
 800dd92:	4613      	mov	r3, r2
 800dd94:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	785b      	ldrb	r3, [r3, #1]
 800dd9e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800dda0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dda4:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	4a5d      	ldr	r2, [pc, #372]	@ (800df20 <USB_HC_StartXfer+0x198>)
 800ddaa:	4293      	cmp	r3, r2
 800ddac:	d12f      	bne.n	800de0e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800ddae:	79fb      	ldrb	r3, [r7, #7]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d11c      	bne.n	800ddee <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800ddb4:	68bb      	ldr	r3, [r7, #8]
 800ddb6:	7c9b      	ldrb	r3, [r3, #18]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d003      	beq.n	800ddc4 <USB_HC_StartXfer+0x3c>
 800ddbc:	68bb      	ldr	r3, [r7, #8]
 800ddbe:	7c9b      	ldrb	r3, [r3, #18]
 800ddc0:	2b02      	cmp	r3, #2
 800ddc2:	d124      	bne.n	800de0e <USB_HC_StartXfer+0x86>
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	799b      	ldrb	r3, [r3, #6]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d120      	bne.n	800de0e <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800ddcc:	69fb      	ldr	r3, [r7, #28]
 800ddce:	015a      	lsls	r2, r3, #5
 800ddd0:	6a3b      	ldr	r3, [r7, #32]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ddd8:	68db      	ldr	r3, [r3, #12]
 800ddda:	69fa      	ldr	r2, [r7, #28]
 800dddc:	0151      	lsls	r1, r2, #5
 800ddde:	6a3a      	ldr	r2, [r7, #32]
 800dde0:	440a      	add	r2, r1
 800dde2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dde6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ddea:	60d3      	str	r3, [r2, #12]
 800ddec:	e00f      	b.n	800de0e <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800ddee:	68bb      	ldr	r3, [r7, #8]
 800ddf0:	791b      	ldrb	r3, [r3, #4]
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	d10b      	bne.n	800de0e <USB_HC_StartXfer+0x86>
 800ddf6:	68bb      	ldr	r3, [r7, #8]
 800ddf8:	795b      	ldrb	r3, [r3, #5]
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d107      	bne.n	800de0e <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	785b      	ldrb	r3, [r3, #1]
 800de02:	4619      	mov	r1, r3
 800de04:	68f8      	ldr	r0, [r7, #12]
 800de06:	f000 fb6b 	bl	800e4e0 <USB_DoPing>
        return HAL_OK;
 800de0a:	2300      	movs	r3, #0
 800de0c:	e232      	b.n	800e274 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800de0e:	68bb      	ldr	r3, [r7, #8]
 800de10:	799b      	ldrb	r3, [r3, #6]
 800de12:	2b01      	cmp	r3, #1
 800de14:	d158      	bne.n	800dec8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800de16:	2301      	movs	r3, #1
 800de18:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	78db      	ldrb	r3, [r3, #3]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d007      	beq.n	800de32 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800de22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800de24:	68ba      	ldr	r2, [r7, #8]
 800de26:	8a92      	ldrh	r2, [r2, #20]
 800de28:	fb03 f202 	mul.w	r2, r3, r2
 800de2c:	68bb      	ldr	r3, [r7, #8]
 800de2e:	61da      	str	r2, [r3, #28]
 800de30:	e07c      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	7c9b      	ldrb	r3, [r3, #18]
 800de36:	2b01      	cmp	r3, #1
 800de38:	d130      	bne.n	800de9c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800de3a:	68bb      	ldr	r3, [r7, #8]
 800de3c:	6a1b      	ldr	r3, [r3, #32]
 800de3e:	2bbc      	cmp	r3, #188	@ 0xbc
 800de40:	d918      	bls.n	800de74 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800de42:	68bb      	ldr	r3, [r7, #8]
 800de44:	8a9b      	ldrh	r3, [r3, #20]
 800de46:	461a      	mov	r2, r3
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800de4c:	68bb      	ldr	r3, [r7, #8]
 800de4e:	69da      	ldr	r2, [r3, #28]
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	68db      	ldr	r3, [r3, #12]
 800de58:	2b01      	cmp	r3, #1
 800de5a:	d003      	beq.n	800de64 <USB_HC_StartXfer+0xdc>
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	68db      	ldr	r3, [r3, #12]
 800de60:	2b02      	cmp	r3, #2
 800de62:	d103      	bne.n	800de6c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	2202      	movs	r2, #2
 800de68:	60da      	str	r2, [r3, #12]
 800de6a:	e05f      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800de6c:	68bb      	ldr	r3, [r7, #8]
 800de6e:	2201      	movs	r2, #1
 800de70:	60da      	str	r2, [r3, #12]
 800de72:	e05b      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800de74:	68bb      	ldr	r3, [r7, #8]
 800de76:	6a1a      	ldr	r2, [r3, #32]
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800de7c:	68bb      	ldr	r3, [r7, #8]
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	2b01      	cmp	r3, #1
 800de82:	d007      	beq.n	800de94 <USB_HC_StartXfer+0x10c>
 800de84:	68bb      	ldr	r3, [r7, #8]
 800de86:	68db      	ldr	r3, [r3, #12]
 800de88:	2b02      	cmp	r3, #2
 800de8a:	d003      	beq.n	800de94 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800de8c:	68bb      	ldr	r3, [r7, #8]
 800de8e:	2204      	movs	r2, #4
 800de90:	60da      	str	r2, [r3, #12]
 800de92:	e04b      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	2203      	movs	r2, #3
 800de98:	60da      	str	r2, [r3, #12]
 800de9a:	e047      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800de9c:	79fb      	ldrb	r3, [r7, #7]
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d10d      	bne.n	800debe <USB_HC_StartXfer+0x136>
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	6a1b      	ldr	r3, [r3, #32]
 800dea6:	68ba      	ldr	r2, [r7, #8]
 800dea8:	8a92      	ldrh	r2, [r2, #20]
 800deaa:	4293      	cmp	r3, r2
 800deac:	d907      	bls.n	800debe <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800deae:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800deb0:	68ba      	ldr	r2, [r7, #8]
 800deb2:	8a92      	ldrh	r2, [r2, #20]
 800deb4:	fb03 f202 	mul.w	r2, r3, r2
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	61da      	str	r2, [r3, #28]
 800debc:	e036      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800debe:	68bb      	ldr	r3, [r7, #8]
 800dec0:	6a1a      	ldr	r2, [r3, #32]
 800dec2:	68bb      	ldr	r3, [r7, #8]
 800dec4:	61da      	str	r2, [r3, #28]
 800dec6:	e031      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800dec8:	68bb      	ldr	r3, [r7, #8]
 800deca:	6a1b      	ldr	r3, [r3, #32]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d018      	beq.n	800df02 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	6a1b      	ldr	r3, [r3, #32]
 800ded4:	68ba      	ldr	r2, [r7, #8]
 800ded6:	8a92      	ldrh	r2, [r2, #20]
 800ded8:	4413      	add	r3, r2
 800deda:	3b01      	subs	r3, #1
 800dedc:	68ba      	ldr	r2, [r7, #8]
 800dede:	8a92      	ldrh	r2, [r2, #20]
 800dee0:	fbb3 f3f2 	udiv	r3, r3, r2
 800dee4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800dee6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800dee8:	8b7b      	ldrh	r3, [r7, #26]
 800deea:	429a      	cmp	r2, r3
 800deec:	d90b      	bls.n	800df06 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800deee:	8b7b      	ldrh	r3, [r7, #26]
 800def0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800def2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800def4:	68ba      	ldr	r2, [r7, #8]
 800def6:	8a92      	ldrh	r2, [r2, #20]
 800def8:	fb03 f202 	mul.w	r2, r3, r2
 800defc:	68bb      	ldr	r3, [r7, #8]
 800defe:	61da      	str	r2, [r3, #28]
 800df00:	e001      	b.n	800df06 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800df02:	2301      	movs	r3, #1
 800df04:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	78db      	ldrb	r3, [r3, #3]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d00a      	beq.n	800df24 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800df0e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	8a92      	ldrh	r2, [r2, #20]
 800df14:	fb03 f202 	mul.w	r2, r3, r2
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	61da      	str	r2, [r3, #28]
 800df1c:	e006      	b.n	800df2c <USB_HC_StartXfer+0x1a4>
 800df1e:	bf00      	nop
 800df20:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800df24:	68bb      	ldr	r3, [r7, #8]
 800df26:	6a1a      	ldr	r2, [r3, #32]
 800df28:	68bb      	ldr	r3, [r7, #8]
 800df2a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	69db      	ldr	r3, [r3, #28]
 800df30:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800df36:	04d9      	lsls	r1, r3, #19
 800df38:	4ba3      	ldr	r3, [pc, #652]	@ (800e1c8 <USB_HC_StartXfer+0x440>)
 800df3a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df3c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	7d9b      	ldrb	r3, [r3, #22]
 800df42:	075b      	lsls	r3, r3, #29
 800df44:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df48:	69f9      	ldr	r1, [r7, #28]
 800df4a:	0148      	lsls	r0, r1, #5
 800df4c:	6a39      	ldr	r1, [r7, #32]
 800df4e:	4401      	add	r1, r0
 800df50:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800df54:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800df56:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800df58:	79fb      	ldrb	r3, [r7, #7]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d009      	beq.n	800df72 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800df5e:	68bb      	ldr	r3, [r7, #8]
 800df60:	6999      	ldr	r1, [r3, #24]
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	015a      	lsls	r2, r3, #5
 800df66:	6a3b      	ldr	r3, [r7, #32]
 800df68:	4413      	add	r3, r2
 800df6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df6e:	460a      	mov	r2, r1
 800df70:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800df72:	6a3b      	ldr	r3, [r7, #32]
 800df74:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	f003 0301 	and.w	r3, r3, #1
 800df7e:	2b00      	cmp	r3, #0
 800df80:	bf0c      	ite	eq
 800df82:	2301      	moveq	r3, #1
 800df84:	2300      	movne	r3, #0
 800df86:	b2db      	uxtb	r3, r3
 800df88:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800df8a:	69fb      	ldr	r3, [r7, #28]
 800df8c:	015a      	lsls	r2, r3, #5
 800df8e:	6a3b      	ldr	r3, [r7, #32]
 800df90:	4413      	add	r3, r2
 800df92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	69fa      	ldr	r2, [r7, #28]
 800df9a:	0151      	lsls	r1, r2, #5
 800df9c:	6a3a      	ldr	r2, [r7, #32]
 800df9e:	440a      	add	r2, r1
 800dfa0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800dfa4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800dfa8:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800dfaa:	69fb      	ldr	r3, [r7, #28]
 800dfac:	015a      	lsls	r2, r3, #5
 800dfae:	6a3b      	ldr	r3, [r7, #32]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	7e7b      	ldrb	r3, [r7, #25]
 800dfba:	075b      	lsls	r3, r3, #29
 800dfbc:	69f9      	ldr	r1, [r7, #28]
 800dfbe:	0148      	lsls	r0, r1, #5
 800dfc0:	6a39      	ldr	r1, [r7, #32]
 800dfc2:	4401      	add	r1, r0
 800dfc4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800dfc8:	4313      	orrs	r3, r2
 800dfca:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800dfcc:	68bb      	ldr	r3, [r7, #8]
 800dfce:	799b      	ldrb	r3, [r3, #6]
 800dfd0:	2b01      	cmp	r3, #1
 800dfd2:	f040 80c3 	bne.w	800e15c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800dfd6:	68bb      	ldr	r3, [r7, #8]
 800dfd8:	7c5b      	ldrb	r3, [r3, #17]
 800dfda:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800dfdc:	68ba      	ldr	r2, [r7, #8]
 800dfde:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800dfe0:	4313      	orrs	r3, r2
 800dfe2:	69fa      	ldr	r2, [r7, #28]
 800dfe4:	0151      	lsls	r1, r2, #5
 800dfe6:	6a3a      	ldr	r2, [r7, #32]
 800dfe8:	440a      	add	r2, r1
 800dfea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800dfee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800dff2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800dff4:	69fb      	ldr	r3, [r7, #28]
 800dff6:	015a      	lsls	r2, r3, #5
 800dff8:	6a3b      	ldr	r3, [r7, #32]
 800dffa:	4413      	add	r3, r2
 800dffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	69fa      	ldr	r2, [r7, #28]
 800e004:	0151      	lsls	r1, r2, #5
 800e006:	6a3a      	ldr	r2, [r7, #32]
 800e008:	440a      	add	r2, r1
 800e00a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e00e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800e012:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	79db      	ldrb	r3, [r3, #7]
 800e018:	2b01      	cmp	r3, #1
 800e01a:	d123      	bne.n	800e064 <USB_HC_StartXfer+0x2dc>
 800e01c:	68bb      	ldr	r3, [r7, #8]
 800e01e:	78db      	ldrb	r3, [r3, #3]
 800e020:	2b00      	cmp	r3, #0
 800e022:	d11f      	bne.n	800e064 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e024:	69fb      	ldr	r3, [r7, #28]
 800e026:	015a      	lsls	r2, r3, #5
 800e028:	6a3b      	ldr	r3, [r7, #32]
 800e02a:	4413      	add	r3, r2
 800e02c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e030:	685b      	ldr	r3, [r3, #4]
 800e032:	69fa      	ldr	r2, [r7, #28]
 800e034:	0151      	lsls	r1, r2, #5
 800e036:	6a3a      	ldr	r2, [r7, #32]
 800e038:	440a      	add	r2, r1
 800e03a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e03e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e042:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800e044:	69fb      	ldr	r3, [r7, #28]
 800e046:	015a      	lsls	r2, r3, #5
 800e048:	6a3b      	ldr	r3, [r7, #32]
 800e04a:	4413      	add	r3, r2
 800e04c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e050:	68db      	ldr	r3, [r3, #12]
 800e052:	69fa      	ldr	r2, [r7, #28]
 800e054:	0151      	lsls	r1, r2, #5
 800e056:	6a3a      	ldr	r2, [r7, #32]
 800e058:	440a      	add	r2, r1
 800e05a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e05e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e062:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e064:	68bb      	ldr	r3, [r7, #8]
 800e066:	7c9b      	ldrb	r3, [r3, #18]
 800e068:	2b01      	cmp	r3, #1
 800e06a:	d003      	beq.n	800e074 <USB_HC_StartXfer+0x2ec>
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	7c9b      	ldrb	r3, [r3, #18]
 800e070:	2b03      	cmp	r3, #3
 800e072:	d117      	bne.n	800e0a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e074:	68bb      	ldr	r3, [r7, #8]
 800e076:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800e078:	2b01      	cmp	r3, #1
 800e07a:	d113      	bne.n	800e0a4 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	78db      	ldrb	r3, [r3, #3]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d10f      	bne.n	800e0a4 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	015a      	lsls	r2, r3, #5
 800e088:	6a3b      	ldr	r3, [r7, #32]
 800e08a:	4413      	add	r3, r2
 800e08c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	69fa      	ldr	r2, [r7, #28]
 800e094:	0151      	lsls	r1, r2, #5
 800e096:	6a3a      	ldr	r2, [r7, #32]
 800e098:	440a      	add	r2, r1
 800e09a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e09e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800e0a2:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800e0a4:	68bb      	ldr	r3, [r7, #8]
 800e0a6:	7c9b      	ldrb	r3, [r3, #18]
 800e0a8:	2b01      	cmp	r3, #1
 800e0aa:	d162      	bne.n	800e172 <USB_HC_StartXfer+0x3ea>
 800e0ac:	68bb      	ldr	r3, [r7, #8]
 800e0ae:	78db      	ldrb	r3, [r3, #3]
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d15e      	bne.n	800e172 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800e0b4:	68bb      	ldr	r3, [r7, #8]
 800e0b6:	68db      	ldr	r3, [r3, #12]
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	2b03      	cmp	r3, #3
 800e0bc:	d858      	bhi.n	800e170 <USB_HC_StartXfer+0x3e8>
 800e0be:	a201      	add	r2, pc, #4	@ (adr r2, 800e0c4 <USB_HC_StartXfer+0x33c>)
 800e0c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e0c4:	0800e0d5 	.word	0x0800e0d5
 800e0c8:	0800e0f7 	.word	0x0800e0f7
 800e0cc:	0800e119 	.word	0x0800e119
 800e0d0:	0800e13b 	.word	0x0800e13b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	015a      	lsls	r2, r3, #5
 800e0d8:	6a3b      	ldr	r3, [r7, #32]
 800e0da:	4413      	add	r3, r2
 800e0dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e0e0:	685b      	ldr	r3, [r3, #4]
 800e0e2:	69fa      	ldr	r2, [r7, #28]
 800e0e4:	0151      	lsls	r1, r2, #5
 800e0e6:	6a3a      	ldr	r2, [r7, #32]
 800e0e8:	440a      	add	r2, r1
 800e0ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e0ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e0f2:	6053      	str	r3, [r2, #4]
          break;
 800e0f4:	e03d      	b.n	800e172 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800e0f6:	69fb      	ldr	r3, [r7, #28]
 800e0f8:	015a      	lsls	r2, r3, #5
 800e0fa:	6a3b      	ldr	r3, [r7, #32]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e102:	685b      	ldr	r3, [r3, #4]
 800e104:	69fa      	ldr	r2, [r7, #28]
 800e106:	0151      	lsls	r1, r2, #5
 800e108:	6a3a      	ldr	r2, [r7, #32]
 800e10a:	440a      	add	r2, r1
 800e10c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e110:	f043 030e 	orr.w	r3, r3, #14
 800e114:	6053      	str	r3, [r2, #4]
          break;
 800e116:	e02c      	b.n	800e172 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800e118:	69fb      	ldr	r3, [r7, #28]
 800e11a:	015a      	lsls	r2, r3, #5
 800e11c:	6a3b      	ldr	r3, [r7, #32]
 800e11e:	4413      	add	r3, r2
 800e120:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e124:	685b      	ldr	r3, [r3, #4]
 800e126:	69fa      	ldr	r2, [r7, #28]
 800e128:	0151      	lsls	r1, r2, #5
 800e12a:	6a3a      	ldr	r2, [r7, #32]
 800e12c:	440a      	add	r2, r1
 800e12e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e136:	6053      	str	r3, [r2, #4]
          break;
 800e138:	e01b      	b.n	800e172 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800e13a:	69fb      	ldr	r3, [r7, #28]
 800e13c:	015a      	lsls	r2, r3, #5
 800e13e:	6a3b      	ldr	r3, [r7, #32]
 800e140:	4413      	add	r3, r2
 800e142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	69fa      	ldr	r2, [r7, #28]
 800e14a:	0151      	lsls	r1, r2, #5
 800e14c:	6a3a      	ldr	r2, [r7, #32]
 800e14e:	440a      	add	r2, r1
 800e150:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e154:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800e158:	6053      	str	r3, [r2, #4]
          break;
 800e15a:	e00a      	b.n	800e172 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800e15c:	69fb      	ldr	r3, [r7, #28]
 800e15e:	015a      	lsls	r2, r3, #5
 800e160:	6a3b      	ldr	r3, [r7, #32]
 800e162:	4413      	add	r3, r2
 800e164:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e168:	461a      	mov	r2, r3
 800e16a:	2300      	movs	r3, #0
 800e16c:	6053      	str	r3, [r2, #4]
 800e16e:	e000      	b.n	800e172 <USB_HC_StartXfer+0x3ea>
          break;
 800e170:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800e172:	69fb      	ldr	r3, [r7, #28]
 800e174:	015a      	lsls	r2, r3, #5
 800e176:	6a3b      	ldr	r3, [r7, #32]
 800e178:	4413      	add	r3, r2
 800e17a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e182:	693b      	ldr	r3, [r7, #16]
 800e184:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e188:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800e18a:	68bb      	ldr	r3, [r7, #8]
 800e18c:	78db      	ldrb	r3, [r3, #3]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d004      	beq.n	800e19c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800e198:	613b      	str	r3, [r7, #16]
 800e19a:	e003      	b.n	800e1a4 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800e19c:	693b      	ldr	r3, [r7, #16]
 800e19e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e1a2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e1aa:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800e1ac:	69fb      	ldr	r3, [r7, #28]
 800e1ae:	015a      	lsls	r2, r3, #5
 800e1b0:	6a3b      	ldr	r3, [r7, #32]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e1b8:	461a      	mov	r2, r3
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800e1be:	79fb      	ldrb	r3, [r7, #7]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d003      	beq.n	800e1cc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e055      	b.n	800e274 <USB_HC_StartXfer+0x4ec>
 800e1c8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	78db      	ldrb	r3, [r3, #3]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d14e      	bne.n	800e272 <USB_HC_StartXfer+0x4ea>
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	6a1b      	ldr	r3, [r3, #32]
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d04a      	beq.n	800e272 <USB_HC_StartXfer+0x4ea>
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	79db      	ldrb	r3, [r3, #7]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d146      	bne.n	800e272 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800e1e4:	68bb      	ldr	r3, [r7, #8]
 800e1e6:	7c9b      	ldrb	r3, [r3, #18]
 800e1e8:	2b03      	cmp	r3, #3
 800e1ea:	d831      	bhi.n	800e250 <USB_HC_StartXfer+0x4c8>
 800e1ec:	a201      	add	r2, pc, #4	@ (adr r2, 800e1f4 <USB_HC_StartXfer+0x46c>)
 800e1ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1f2:	bf00      	nop
 800e1f4:	0800e205 	.word	0x0800e205
 800e1f8:	0800e229 	.word	0x0800e229
 800e1fc:	0800e205 	.word	0x0800e205
 800e200:	0800e229 	.word	0x0800e229
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e204:	68bb      	ldr	r3, [r7, #8]
 800e206:	6a1b      	ldr	r3, [r3, #32]
 800e208:	3303      	adds	r3, #3
 800e20a:	089b      	lsrs	r3, r3, #2
 800e20c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800e20e:	8afa      	ldrh	r2, [r7, #22]
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e214:	b29b      	uxth	r3, r3
 800e216:	429a      	cmp	r2, r3
 800e218:	d91c      	bls.n	800e254 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	699b      	ldr	r3, [r3, #24]
 800e21e:	f043 0220 	orr.w	r2, r3, #32
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	619a      	str	r2, [r3, #24]
        }
        break;
 800e226:	e015      	b.n	800e254 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	6a1b      	ldr	r3, [r3, #32]
 800e22c:	3303      	adds	r3, #3
 800e22e:	089b      	lsrs	r3, r3, #2
 800e230:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800e232:	8afa      	ldrh	r2, [r7, #22]
 800e234:	6a3b      	ldr	r3, [r7, #32]
 800e236:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e23a:	691b      	ldr	r3, [r3, #16]
 800e23c:	b29b      	uxth	r3, r3
 800e23e:	429a      	cmp	r2, r3
 800e240:	d90a      	bls.n	800e258 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	699b      	ldr	r3, [r3, #24]
 800e246:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	619a      	str	r2, [r3, #24]
        }
        break;
 800e24e:	e003      	b.n	800e258 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800e250:	bf00      	nop
 800e252:	e002      	b.n	800e25a <USB_HC_StartXfer+0x4d2>
        break;
 800e254:	bf00      	nop
 800e256:	e000      	b.n	800e25a <USB_HC_StartXfer+0x4d2>
        break;
 800e258:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	6999      	ldr	r1, [r3, #24]
 800e25e:	68bb      	ldr	r3, [r7, #8]
 800e260:	785a      	ldrb	r2, [r3, #1]
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	6a1b      	ldr	r3, [r3, #32]
 800e266:	b29b      	uxth	r3, r3
 800e268:	2000      	movs	r0, #0
 800e26a:	9000      	str	r0, [sp, #0]
 800e26c:	68f8      	ldr	r0, [r7, #12]
 800e26e:	f7ff f9c9 	bl	800d604 <USB_WritePacket>
  }

  return HAL_OK;
 800e272:	2300      	movs	r3, #0
}
 800e274:	4618      	mov	r0, r3
 800e276:	3728      	adds	r7, #40	@ 0x28
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b085      	sub	sp, #20
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e28e:	695b      	ldr	r3, [r3, #20]
 800e290:	b29b      	uxth	r3, r3
}
 800e292:	4618      	mov	r0, r3
 800e294:	3714      	adds	r7, #20
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800e29e:	b480      	push	{r7}
 800e2a0:	b089      	sub	sp, #36	@ 0x24
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800e2ae:	78fb      	ldrb	r3, [r7, #3]
 800e2b0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800e2b2:	2300      	movs	r3, #0
 800e2b4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800e2b6:	69bb      	ldr	r3, [r7, #24]
 800e2b8:	015a      	lsls	r2, r3, #5
 800e2ba:	69fb      	ldr	r3, [r7, #28]
 800e2bc:	4413      	add	r3, r2
 800e2be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	0c9b      	lsrs	r3, r3, #18
 800e2c6:	f003 0303 	and.w	r3, r3, #3
 800e2ca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	015a      	lsls	r2, r3, #5
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	4413      	add	r3, r2
 800e2d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	0fdb      	lsrs	r3, r3, #31
 800e2dc:	f003 0301 	and.w	r3, r3, #1
 800e2e0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800e2e2:	69bb      	ldr	r3, [r7, #24]
 800e2e4:	015a      	lsls	r2, r3, #5
 800e2e6:	69fb      	ldr	r3, [r7, #28]
 800e2e8:	4413      	add	r3, r2
 800e2ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e2ee:	685b      	ldr	r3, [r3, #4]
 800e2f0:	0fdb      	lsrs	r3, r3, #31
 800e2f2:	f003 0301 	and.w	r3, r3, #1
 800e2f6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	689b      	ldr	r3, [r3, #8]
 800e2fc:	f003 0320 	and.w	r3, r3, #32
 800e300:	2b20      	cmp	r3, #32
 800e302:	d10d      	bne.n	800e320 <USB_HC_Halt+0x82>
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d10a      	bne.n	800e320 <USB_HC_Halt+0x82>
 800e30a:	693b      	ldr	r3, [r7, #16]
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d005      	beq.n	800e31c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800e310:	697b      	ldr	r3, [r7, #20]
 800e312:	2b01      	cmp	r3, #1
 800e314:	d002      	beq.n	800e31c <USB_HC_Halt+0x7e>
 800e316:	697b      	ldr	r3, [r7, #20]
 800e318:	2b03      	cmp	r3, #3
 800e31a:	d101      	bne.n	800e320 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	e0d8      	b.n	800e4d2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	2b00      	cmp	r3, #0
 800e324:	d002      	beq.n	800e32c <USB_HC_Halt+0x8e>
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	2b02      	cmp	r3, #2
 800e32a:	d173      	bne.n	800e414 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e32c:	69bb      	ldr	r3, [r7, #24]
 800e32e:	015a      	lsls	r2, r3, #5
 800e330:	69fb      	ldr	r3, [r7, #28]
 800e332:	4413      	add	r3, r2
 800e334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	69ba      	ldr	r2, [r7, #24]
 800e33c:	0151      	lsls	r1, r2, #5
 800e33e:	69fa      	ldr	r2, [r7, #28]
 800e340:	440a      	add	r2, r1
 800e342:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e346:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e34a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	689b      	ldr	r3, [r3, #8]
 800e350:	f003 0320 	and.w	r3, r3, #32
 800e354:	2b00      	cmp	r3, #0
 800e356:	d14a      	bne.n	800e3ee <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e35c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e360:	2b00      	cmp	r3, #0
 800e362:	d133      	bne.n	800e3cc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	015a      	lsls	r2, r3, #5
 800e368:	69fb      	ldr	r3, [r7, #28]
 800e36a:	4413      	add	r3, r2
 800e36c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	69ba      	ldr	r2, [r7, #24]
 800e374:	0151      	lsls	r1, r2, #5
 800e376:	69fa      	ldr	r2, [r7, #28]
 800e378:	440a      	add	r2, r1
 800e37a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e37e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e382:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e384:	69bb      	ldr	r3, [r7, #24]
 800e386:	015a      	lsls	r2, r3, #5
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	4413      	add	r3, r2
 800e38c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	69ba      	ldr	r2, [r7, #24]
 800e394:	0151      	lsls	r1, r2, #5
 800e396:	69fa      	ldr	r2, [r7, #28]
 800e398:	440a      	add	r2, r1
 800e39a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e39e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3a2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800e3a4:	68bb      	ldr	r3, [r7, #8]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e3b0:	d82e      	bhi.n	800e410 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	015a      	lsls	r2, r3, #5
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	4413      	add	r3, r2
 800e3ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e3c4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e3c8:	d0ec      	beq.n	800e3a4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3ca:	e081      	b.n	800e4d0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3cc:	69bb      	ldr	r3, [r7, #24]
 800e3ce:	015a      	lsls	r2, r3, #5
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	4413      	add	r3, r2
 800e3d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	69ba      	ldr	r2, [r7, #24]
 800e3dc:	0151      	lsls	r1, r2, #5
 800e3de:	69fa      	ldr	r2, [r7, #28]
 800e3e0:	440a      	add	r2, r1
 800e3e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e3e6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e3ea:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e3ec:	e070      	b.n	800e4d0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e3ee:	69bb      	ldr	r3, [r7, #24]
 800e3f0:	015a      	lsls	r2, r3, #5
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	4413      	add	r3, r2
 800e3f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	69ba      	ldr	r2, [r7, #24]
 800e3fe:	0151      	lsls	r1, r2, #5
 800e400:	69fa      	ldr	r2, [r7, #28]
 800e402:	440a      	add	r2, r1
 800e404:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e408:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e40c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e40e:	e05f      	b.n	800e4d0 <USB_HC_Halt+0x232>
            break;
 800e410:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800e412:	e05d      	b.n	800e4d0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800e414:	69bb      	ldr	r3, [r7, #24]
 800e416:	015a      	lsls	r2, r3, #5
 800e418:	69fb      	ldr	r3, [r7, #28]
 800e41a:	4413      	add	r3, r2
 800e41c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	69ba      	ldr	r2, [r7, #24]
 800e424:	0151      	lsls	r1, r2, #5
 800e426:	69fa      	ldr	r2, [r7, #28]
 800e428:	440a      	add	r2, r1
 800e42a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e42e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e432:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800e434:	69fb      	ldr	r3, [r7, #28]
 800e436:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e43a:	691b      	ldr	r3, [r3, #16]
 800e43c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e440:	2b00      	cmp	r3, #0
 800e442:	d133      	bne.n	800e4ac <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800e444:	69bb      	ldr	r3, [r7, #24]
 800e446:	015a      	lsls	r2, r3, #5
 800e448:	69fb      	ldr	r3, [r7, #28]
 800e44a:	4413      	add	r3, r2
 800e44c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	69ba      	ldr	r2, [r7, #24]
 800e454:	0151      	lsls	r1, r2, #5
 800e456:	69fa      	ldr	r2, [r7, #28]
 800e458:	440a      	add	r2, r1
 800e45a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e45e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e462:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e464:	69bb      	ldr	r3, [r7, #24]
 800e466:	015a      	lsls	r2, r3, #5
 800e468:	69fb      	ldr	r3, [r7, #28]
 800e46a:	4413      	add	r3, r2
 800e46c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	69ba      	ldr	r2, [r7, #24]
 800e474:	0151      	lsls	r1, r2, #5
 800e476:	69fa      	ldr	r2, [r7, #28]
 800e478:	440a      	add	r2, r1
 800e47a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e47e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e482:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	3301      	adds	r3, #1
 800e488:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e490:	d81d      	bhi.n	800e4ce <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	015a      	lsls	r2, r3, #5
 800e496:	69fb      	ldr	r3, [r7, #28]
 800e498:	4413      	add	r3, r2
 800e49a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e4a4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e4a8:	d0ec      	beq.n	800e484 <USB_HC_Halt+0x1e6>
 800e4aa:	e011      	b.n	800e4d0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800e4ac:	69bb      	ldr	r3, [r7, #24]
 800e4ae:	015a      	lsls	r2, r3, #5
 800e4b0:	69fb      	ldr	r3, [r7, #28]
 800e4b2:	4413      	add	r3, r2
 800e4b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e4b8:	681b      	ldr	r3, [r3, #0]
 800e4ba:	69ba      	ldr	r2, [r7, #24]
 800e4bc:	0151      	lsls	r1, r2, #5
 800e4be:	69fa      	ldr	r2, [r7, #28]
 800e4c0:	440a      	add	r2, r1
 800e4c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e4c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e4ca:	6013      	str	r3, [r2, #0]
 800e4cc:	e000      	b.n	800e4d0 <USB_HC_Halt+0x232>
          break;
 800e4ce:	bf00      	nop
    }
  }

  return HAL_OK;
 800e4d0:	2300      	movs	r3, #0
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3724      	adds	r7, #36	@ 0x24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4dc:	4770      	bx	lr
	...

0800e4e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800e4e0:	b480      	push	{r7}
 800e4e2:	b087      	sub	sp, #28
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
 800e4e8:	460b      	mov	r3, r1
 800e4ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800e4f0:	78fb      	ldrb	r3, [r7, #3]
 800e4f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	04da      	lsls	r2, r3, #19
 800e4fc:	4b15      	ldr	r3, [pc, #84]	@ (800e554 <USB_DoPing+0x74>)
 800e4fe:	4013      	ands	r3, r2
 800e500:	693a      	ldr	r2, [r7, #16]
 800e502:	0151      	lsls	r1, r2, #5
 800e504:	697a      	ldr	r2, [r7, #20]
 800e506:	440a      	add	r2, r1
 800e508:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800e50c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e510:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	015a      	lsls	r2, r3, #5
 800e516:	697b      	ldr	r3, [r7, #20]
 800e518:	4413      	add	r3, r2
 800e51a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e51e:	681b      	ldr	r3, [r3, #0]
 800e520:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800e522:	68bb      	ldr	r3, [r7, #8]
 800e524:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800e528:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800e52a:	68bb      	ldr	r3, [r7, #8]
 800e52c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e530:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	015a      	lsls	r2, r3, #5
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	4413      	add	r3, r2
 800e53a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e53e:	461a      	mov	r2, r3
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800e544:	2300      	movs	r3, #0
}
 800e546:	4618      	mov	r0, r3
 800e548:	371c      	adds	r7, #28
 800e54a:	46bd      	mov	sp, r7
 800e54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e550:	4770      	bx	lr
 800e552:	bf00      	nop
 800e554:	1ff80000 	.word	0x1ff80000

0800e558 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b088      	sub	sp, #32
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800e560:	2300      	movs	r3, #0
 800e562:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800e568:	2300      	movs	r3, #0
 800e56a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f7fe ff8c 	bl	800d48a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e572:	2110      	movs	r1, #16
 800e574:	6878      	ldr	r0, [r7, #4]
 800e576:	f7fe ffe5 	bl	800d544 <USB_FlushTxFifo>
 800e57a:	4603      	mov	r3, r0
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d001      	beq.n	800e584 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800e580:	2301      	movs	r3, #1
 800e582:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e584:	6878      	ldr	r0, [r7, #4]
 800e586:	f7ff f80f 	bl	800d5a8 <USB_FlushRxFifo>
 800e58a:	4603      	mov	r3, r0
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d001      	beq.n	800e594 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800e590:	2301      	movs	r3, #1
 800e592:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800e594:	2300      	movs	r3, #0
 800e596:	61bb      	str	r3, [r7, #24]
 800e598:	e01f      	b.n	800e5da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800e59a:	69bb      	ldr	r3, [r7, #24]
 800e59c:	015a      	lsls	r2, r3, #5
 800e59e:	697b      	ldr	r3, [r7, #20]
 800e5a0:	4413      	add	r3, r2
 800e5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5a6:	681b      	ldr	r3, [r3, #0]
 800e5a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800e5b2:	693b      	ldr	r3, [r7, #16]
 800e5b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e5b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e5ba:	693b      	ldr	r3, [r7, #16]
 800e5bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e5c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e5c2:	69bb      	ldr	r3, [r7, #24]
 800e5c4:	015a      	lsls	r2, r3, #5
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	4413      	add	r3, r2
 800e5ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5ce:	461a      	mov	r2, r3
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	3301      	adds	r3, #1
 800e5d8:	61bb      	str	r3, [r7, #24]
 800e5da:	69bb      	ldr	r3, [r7, #24]
 800e5dc:	2b0f      	cmp	r3, #15
 800e5de:	d9dc      	bls.n	800e59a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	61bb      	str	r3, [r7, #24]
 800e5e4:	e034      	b.n	800e650 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800e5e6:	69bb      	ldr	r3, [r7, #24]
 800e5e8:	015a      	lsls	r2, r3, #5
 800e5ea:	697b      	ldr	r3, [r7, #20]
 800e5ec:	4413      	add	r3, r2
 800e5ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800e5fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800e604:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800e60c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800e60e:	69bb      	ldr	r3, [r7, #24]
 800e610:	015a      	lsls	r2, r3, #5
 800e612:	697b      	ldr	r3, [r7, #20]
 800e614:	4413      	add	r3, r2
 800e616:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e61a:	461a      	mov	r2, r3
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	3301      	adds	r3, #1
 800e624:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800e62c:	d80c      	bhi.n	800e648 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800e62e:	69bb      	ldr	r3, [r7, #24]
 800e630:	015a      	lsls	r2, r3, #5
 800e632:	697b      	ldr	r3, [r7, #20]
 800e634:	4413      	add	r3, r2
 800e636:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800e640:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800e644:	d0ec      	beq.n	800e620 <USB_StopHost+0xc8>
 800e646:	e000      	b.n	800e64a <USB_StopHost+0xf2>
        break;
 800e648:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800e64a:	69bb      	ldr	r3, [r7, #24]
 800e64c:	3301      	adds	r3, #1
 800e64e:	61bb      	str	r3, [r7, #24]
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	2b0f      	cmp	r3, #15
 800e654:	d9c7      	bls.n	800e5e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800e656:	697b      	ldr	r3, [r7, #20]
 800e658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e65c:	461a      	mov	r2, r3
 800e65e:	f04f 33ff 	mov.w	r3, #4294967295
 800e662:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f04f 32ff 	mov.w	r2, #4294967295
 800e66a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800e66c:	6878      	ldr	r0, [r7, #4]
 800e66e:	f7fe fefb 	bl	800d468 <USB_EnableGlobalInt>

  return ret;
 800e672:	7ffb      	ldrb	r3, [r7, #31]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3720      	adds	r7, #32
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}

0800e67c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800e67c:	b590      	push	{r4, r7, lr}
 800e67e:	b089      	sub	sp, #36	@ 0x24
 800e680:	af04      	add	r7, sp, #16
 800e682:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800e684:	2301      	movs	r3, #1
 800e686:	2202      	movs	r2, #2
 800e688:	2102      	movs	r1, #2
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fc85 	bl	800ef9a <USBH_FindInterface>
 800e690:	4603      	mov	r3, r0
 800e692:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e694:	7bfb      	ldrb	r3, [r7, #15]
 800e696:	2bff      	cmp	r3, #255	@ 0xff
 800e698:	d002      	beq.n	800e6a0 <USBH_CDC_InterfaceInit+0x24>
 800e69a:	7bfb      	ldrb	r3, [r7, #15]
 800e69c:	2b01      	cmp	r3, #1
 800e69e:	d901      	bls.n	800e6a4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e6a0:	2302      	movs	r3, #2
 800e6a2:	e13d      	b.n	800e920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800e6a4:	7bfb      	ldrb	r3, [r7, #15]
 800e6a6:	4619      	mov	r1, r3
 800e6a8:	6878      	ldr	r0, [r7, #4]
 800e6aa:	f000 fc5a 	bl	800ef62 <USBH_SelectInterface>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800e6b2:	7bbb      	ldrb	r3, [r7, #14]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d001      	beq.n	800e6bc <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800e6b8:	2302      	movs	r3, #2
 800e6ba:	e131      	b.n	800e920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800e6c2:	2050      	movs	r0, #80	@ 0x50
 800e6c4:	f002 fb64 	bl	8010d90 <malloc>
 800e6c8:	4603      	mov	r3, r0
 800e6ca:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e6d2:	69db      	ldr	r3, [r3, #28]
 800e6d4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	d101      	bne.n	800e6e0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800e6dc:	2302      	movs	r3, #2
 800e6de:	e11f      	b.n	800e920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800e6e0:	2250      	movs	r2, #80	@ 0x50
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	68b8      	ldr	r0, [r7, #8]
 800e6e6:	f002 fe33 	bl	8011350 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e6ea:	7bfb      	ldrb	r3, [r7, #15]
 800e6ec:	687a      	ldr	r2, [r7, #4]
 800e6ee:	211a      	movs	r1, #26
 800e6f0:	fb01 f303 	mul.w	r3, r1, r3
 800e6f4:	4413      	add	r3, r2
 800e6f6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e6fa:	781b      	ldrb	r3, [r3, #0]
 800e6fc:	b25b      	sxtb	r3, r3
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	da15      	bge.n	800e72e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e702:	7bfb      	ldrb	r3, [r7, #15]
 800e704:	687a      	ldr	r2, [r7, #4]
 800e706:	211a      	movs	r1, #26
 800e708:	fb01 f303 	mul.w	r3, r1, r3
 800e70c:	4413      	add	r3, r2
 800e70e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e712:	781a      	ldrb	r2, [r3, #0]
 800e714:	68bb      	ldr	r3, [r7, #8]
 800e716:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e718:	7bfb      	ldrb	r3, [r7, #15]
 800e71a:	687a      	ldr	r2, [r7, #4]
 800e71c:	211a      	movs	r1, #26
 800e71e:	fb01 f303 	mul.w	r3, r1, r3
 800e722:	4413      	add	r3, r2
 800e724:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e728:	881a      	ldrh	r2, [r3, #0]
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800e72e:	68bb      	ldr	r3, [r7, #8]
 800e730:	785b      	ldrb	r3, [r3, #1]
 800e732:	4619      	mov	r1, r3
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f001 ffbe 	bl	80106b6 <USBH_AllocPipe>
 800e73a:	4603      	mov	r3, r0
 800e73c:	461a      	mov	r2, r3
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	7819      	ldrb	r1, [r3, #0]
 800e746:	68bb      	ldr	r3, [r7, #8]
 800e748:	7858      	ldrb	r0, [r3, #1]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	8952      	ldrh	r2, [r2, #10]
 800e75a:	9202      	str	r2, [sp, #8]
 800e75c:	2203      	movs	r2, #3
 800e75e:	9201      	str	r2, [sp, #4]
 800e760:	9300      	str	r3, [sp, #0]
 800e762:	4623      	mov	r3, r4
 800e764:	4602      	mov	r2, r0
 800e766:	6878      	ldr	r0, [r7, #4]
 800e768:	f001 ff76 	bl	8010658 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800e76c:	68bb      	ldr	r3, [r7, #8]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2200      	movs	r2, #0
 800e772:	4619      	mov	r1, r3
 800e774:	6878      	ldr	r0, [r7, #4]
 800e776:	f002 fa85 	bl	8010c84 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800e77a:	2300      	movs	r3, #0
 800e77c:	2200      	movs	r2, #0
 800e77e:	210a      	movs	r1, #10
 800e780:	6878      	ldr	r0, [r7, #4]
 800e782:	f000 fc0a 	bl	800ef9a <USBH_FindInterface>
 800e786:	4603      	mov	r3, r0
 800e788:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800e78a:	7bfb      	ldrb	r3, [r7, #15]
 800e78c:	2bff      	cmp	r3, #255	@ 0xff
 800e78e:	d002      	beq.n	800e796 <USBH_CDC_InterfaceInit+0x11a>
 800e790:	7bfb      	ldrb	r3, [r7, #15]
 800e792:	2b01      	cmp	r3, #1
 800e794:	d901      	bls.n	800e79a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800e796:	2302      	movs	r3, #2
 800e798:	e0c2      	b.n	800e920 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800e79a:	7bfb      	ldrb	r3, [r7, #15]
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	211a      	movs	r1, #26
 800e7a0:	fb01 f303 	mul.w	r3, r1, r3
 800e7a4:	4413      	add	r3, r2
 800e7a6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7aa:	781b      	ldrb	r3, [r3, #0]
 800e7ac:	b25b      	sxtb	r3, r3
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	da16      	bge.n	800e7e0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7b2:	7bfb      	ldrb	r3, [r7, #15]
 800e7b4:	687a      	ldr	r2, [r7, #4]
 800e7b6:	211a      	movs	r1, #26
 800e7b8:	fb01 f303 	mul.w	r3, r1, r3
 800e7bc:	4413      	add	r3, r2
 800e7be:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7c2:	781a      	ldrb	r2, [r3, #0]
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e7c8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ca:	687a      	ldr	r2, [r7, #4]
 800e7cc:	211a      	movs	r1, #26
 800e7ce:	fb01 f303 	mul.w	r3, r1, r3
 800e7d2:	4413      	add	r3, r2
 800e7d4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e7d8:	881a      	ldrh	r2, [r3, #0]
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	835a      	strh	r2, [r3, #26]
 800e7de:	e015      	b.n	800e80c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800e7e0:	7bfb      	ldrb	r3, [r7, #15]
 800e7e2:	687a      	ldr	r2, [r7, #4]
 800e7e4:	211a      	movs	r1, #26
 800e7e6:	fb01 f303 	mul.w	r3, r1, r3
 800e7ea:	4413      	add	r3, r2
 800e7ec:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800e7f0:	781a      	ldrb	r2, [r3, #0]
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800e7f6:	7bfb      	ldrb	r3, [r7, #15]
 800e7f8:	687a      	ldr	r2, [r7, #4]
 800e7fa:	211a      	movs	r1, #26
 800e7fc:	fb01 f303 	mul.w	r3, r1, r3
 800e800:	4413      	add	r3, r2
 800e802:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800e806:	881a      	ldrh	r2, [r3, #0]
 800e808:	68bb      	ldr	r3, [r7, #8]
 800e80a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800e80c:	7bfb      	ldrb	r3, [r7, #15]
 800e80e:	687a      	ldr	r2, [r7, #4]
 800e810:	211a      	movs	r1, #26
 800e812:	fb01 f303 	mul.w	r3, r1, r3
 800e816:	4413      	add	r3, r2
 800e818:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e81c:	781b      	ldrb	r3, [r3, #0]
 800e81e:	b25b      	sxtb	r3, r3
 800e820:	2b00      	cmp	r3, #0
 800e822:	da16      	bge.n	800e852 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e824:	7bfb      	ldrb	r3, [r7, #15]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	211a      	movs	r1, #26
 800e82a:	fb01 f303 	mul.w	r3, r1, r3
 800e82e:	4413      	add	r3, r2
 800e830:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e834:	781a      	ldrb	r2, [r3, #0]
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e83a:	7bfb      	ldrb	r3, [r7, #15]
 800e83c:	687a      	ldr	r2, [r7, #4]
 800e83e:	211a      	movs	r1, #26
 800e840:	fb01 f303 	mul.w	r3, r1, r3
 800e844:	4413      	add	r3, r2
 800e846:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e84a:	881a      	ldrh	r2, [r3, #0]
 800e84c:	68bb      	ldr	r3, [r7, #8]
 800e84e:	835a      	strh	r2, [r3, #26]
 800e850:	e015      	b.n	800e87e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800e852:	7bfb      	ldrb	r3, [r7, #15]
 800e854:	687a      	ldr	r2, [r7, #4]
 800e856:	211a      	movs	r1, #26
 800e858:	fb01 f303 	mul.w	r3, r1, r3
 800e85c:	4413      	add	r3, r2
 800e85e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800e862:	781a      	ldrb	r2, [r3, #0]
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800e868:	7bfb      	ldrb	r3, [r7, #15]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	211a      	movs	r1, #26
 800e86e:	fb01 f303 	mul.w	r3, r1, r3
 800e872:	4413      	add	r3, r2
 800e874:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800e878:	881a      	ldrh	r2, [r3, #0]
 800e87a:	68bb      	ldr	r3, [r7, #8]
 800e87c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800e87e:	68bb      	ldr	r3, [r7, #8]
 800e880:	7b9b      	ldrb	r3, [r3, #14]
 800e882:	4619      	mov	r1, r3
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f001 ff16 	bl	80106b6 <USBH_AllocPipe>
 800e88a:	4603      	mov	r3, r0
 800e88c:	461a      	mov	r2, r3
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	7bdb      	ldrb	r3, [r3, #15]
 800e896:	4619      	mov	r1, r3
 800e898:	6878      	ldr	r0, [r7, #4]
 800e89a:	f001 ff0c 	bl	80106b6 <USBH_AllocPipe>
 800e89e:	4603      	mov	r3, r0
 800e8a0:	461a      	mov	r2, r3
 800e8a2:	68bb      	ldr	r3, [r7, #8]
 800e8a4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	7b59      	ldrb	r1, [r3, #13]
 800e8aa:	68bb      	ldr	r3, [r7, #8]
 800e8ac:	7b98      	ldrb	r0, [r3, #14]
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e8ba:	68ba      	ldr	r2, [r7, #8]
 800e8bc:	8b12      	ldrh	r2, [r2, #24]
 800e8be:	9202      	str	r2, [sp, #8]
 800e8c0:	2202      	movs	r2, #2
 800e8c2:	9201      	str	r2, [sp, #4]
 800e8c4:	9300      	str	r3, [sp, #0]
 800e8c6:	4623      	mov	r3, r4
 800e8c8:	4602      	mov	r2, r0
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f001 fec4 	bl	8010658 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800e8d0:	68bb      	ldr	r3, [r7, #8]
 800e8d2:	7b19      	ldrb	r1, [r3, #12]
 800e8d4:	68bb      	ldr	r3, [r7, #8]
 800e8d6:	7bd8      	ldrb	r0, [r3, #15]
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e8e4:	68ba      	ldr	r2, [r7, #8]
 800e8e6:	8b52      	ldrh	r2, [r2, #26]
 800e8e8:	9202      	str	r2, [sp, #8]
 800e8ea:	2202      	movs	r2, #2
 800e8ec:	9201      	str	r2, [sp, #4]
 800e8ee:	9300      	str	r3, [sp, #0]
 800e8f0:	4623      	mov	r3, r4
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	6878      	ldr	r0, [r7, #4]
 800e8f6:	f001 feaf 	bl	8010658 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800e8fa:	68bb      	ldr	r3, [r7, #8]
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	7b5b      	ldrb	r3, [r3, #13]
 800e906:	2200      	movs	r2, #0
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f002 f9ba 	bl	8010c84 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800e910:	68bb      	ldr	r3, [r7, #8]
 800e912:	7b1b      	ldrb	r3, [r3, #12]
 800e914:	2200      	movs	r2, #0
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f002 f9b3 	bl	8010c84 <USBH_LL_SetToggle>

  return USBH_OK;
 800e91e:	2300      	movs	r3, #0
}
 800e920:	4618      	mov	r0, r3
 800e922:	3714      	adds	r7, #20
 800e924:	46bd      	mov	sp, r7
 800e926:	bd90      	pop	{r4, r7, pc}

0800e928 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b084      	sub	sp, #16
 800e92c:	af00      	add	r7, sp, #0
 800e92e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e936:	69db      	ldr	r3, [r3, #28]
 800e938:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d00e      	beq.n	800e960 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	781b      	ldrb	r3, [r3, #0]
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f001 fea4 	bl	8010696 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	4619      	mov	r1, r3
 800e954:	6878      	ldr	r0, [r7, #4]
 800e956:	f001 fecf 	bl	80106f8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	2200      	movs	r2, #0
 800e95e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	7b1b      	ldrb	r3, [r3, #12]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00e      	beq.n	800e986 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800e968:	68fb      	ldr	r3, [r7, #12]
 800e96a:	7b1b      	ldrb	r3, [r3, #12]
 800e96c:	4619      	mov	r1, r3
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f001 fe91 	bl	8010696 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	7b1b      	ldrb	r3, [r3, #12]
 800e978:	4619      	mov	r1, r3
 800e97a:	6878      	ldr	r0, [r7, #4]
 800e97c:	f001 febc 	bl	80106f8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	2200      	movs	r2, #0
 800e984:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	7b5b      	ldrb	r3, [r3, #13]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d00e      	beq.n	800e9ac <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	7b5b      	ldrb	r3, [r3, #13]
 800e992:	4619      	mov	r1, r3
 800e994:	6878      	ldr	r0, [r7, #4]
 800e996:	f001 fe7e 	bl	8010696 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	7b5b      	ldrb	r3, [r3, #13]
 800e99e:	4619      	mov	r1, r3
 800e9a0:	6878      	ldr	r0, [r7, #4]
 800e9a2:	f001 fea9 	bl	80106f8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9b2:	69db      	ldr	r3, [r3, #28]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d00b      	beq.n	800e9d0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9be:	69db      	ldr	r3, [r3, #28]
 800e9c0:	4618      	mov	r0, r3
 800e9c2:	f002 f9ed 	bl	8010da0 <free>
    phost->pActiveClass->pData = 0U;
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800e9d0:	2300      	movs	r3, #0
}
 800e9d2:	4618      	mov	r0, r3
 800e9d4:	3710      	adds	r7, #16
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800e9da:	b580      	push	{r7, lr}
 800e9dc:	b084      	sub	sp, #16
 800e9de:	af00      	add	r7, sp, #0
 800e9e0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800e9e8:	69db      	ldr	r3, [r3, #28]
 800e9ea:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800e9ec:	68fb      	ldr	r3, [r7, #12]
 800e9ee:	3340      	adds	r3, #64	@ 0x40
 800e9f0:	4619      	mov	r1, r3
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f000 f8b1 	bl	800eb5a <GetLineCoding>
 800e9f8:	4603      	mov	r3, r0
 800e9fa:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800e9fc:	7afb      	ldrb	r3, [r7, #11]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d105      	bne.n	800ea0e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ea08:	2102      	movs	r1, #2
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ea0e:	7afb      	ldrb	r3, [r7, #11]
}
 800ea10:	4618      	mov	r0, r3
 800ea12:	3710      	adds	r7, #16
 800ea14:	46bd      	mov	sp, r7
 800ea16:	bd80      	pop	{r7, pc}

0800ea18 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ea18:	b580      	push	{r7, lr}
 800ea1a:	b084      	sub	sp, #16
 800ea1c:	af00      	add	r7, sp, #0
 800ea1e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ea20:	2301      	movs	r3, #1
 800ea22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ea2e:	69db      	ldr	r3, [r3, #28]
 800ea30:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ea32:	68bb      	ldr	r3, [r7, #8]
 800ea34:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ea38:	2b04      	cmp	r3, #4
 800ea3a:	d877      	bhi.n	800eb2c <USBH_CDC_Process+0x114>
 800ea3c:	a201      	add	r2, pc, #4	@ (adr r2, 800ea44 <USBH_CDC_Process+0x2c>)
 800ea3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea42:	bf00      	nop
 800ea44:	0800ea59 	.word	0x0800ea59
 800ea48:	0800ea5f 	.word	0x0800ea5f
 800ea4c:	0800ea8f 	.word	0x0800ea8f
 800ea50:	0800eb03 	.word	0x0800eb03
 800ea54:	0800eb11 	.word	0x0800eb11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ea58:	2300      	movs	r3, #0
 800ea5a:	73fb      	strb	r3, [r7, #15]
      break;
 800ea5c:	e06d      	b.n	800eb3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ea5e:	68bb      	ldr	r3, [r7, #8]
 800ea60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ea62:	4619      	mov	r1, r3
 800ea64:	6878      	ldr	r0, [r7, #4]
 800ea66:	f000 f897 	bl	800eb98 <SetLineCoding>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea6e:	7bbb      	ldrb	r3, [r7, #14]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d104      	bne.n	800ea7e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800ea74:	68bb      	ldr	r3, [r7, #8]
 800ea76:	2202      	movs	r2, #2
 800ea78:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ea7c:	e058      	b.n	800eb30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800ea7e:	7bbb      	ldrb	r3, [r7, #14]
 800ea80:	2b01      	cmp	r3, #1
 800ea82:	d055      	beq.n	800eb30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ea84:	68bb      	ldr	r3, [r7, #8]
 800ea86:	2204      	movs	r2, #4
 800ea88:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ea8c:	e050      	b.n	800eb30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800ea8e:	68bb      	ldr	r3, [r7, #8]
 800ea90:	3340      	adds	r3, #64	@ 0x40
 800ea92:	4619      	mov	r1, r3
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	f000 f860 	bl	800eb5a <GetLineCoding>
 800ea9a:	4603      	mov	r3, r0
 800ea9c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ea9e:	7bbb      	ldrb	r3, [r7, #14]
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d126      	bne.n	800eaf2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800eaa4:	68bb      	ldr	r3, [r7, #8]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eab6:	791b      	ldrb	r3, [r3, #4]
 800eab8:	429a      	cmp	r2, r3
 800eaba:	d13b      	bne.n	800eb34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800eabc:	68bb      	ldr	r3, [r7, #8]
 800eabe:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800eac2:	68bb      	ldr	r3, [r7, #8]
 800eac4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eac6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eac8:	429a      	cmp	r2, r3
 800eaca:	d133      	bne.n	800eb34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ead6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ead8:	429a      	cmp	r2, r3
 800eada:	d12b      	bne.n	800eb34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800eae0:	68bb      	ldr	r3, [r7, #8]
 800eae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800eae4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d124      	bne.n	800eb34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 f958 	bl	800eda0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800eaf0:	e020      	b.n	800eb34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800eaf2:	7bbb      	ldrb	r3, [r7, #14]
 800eaf4:	2b01      	cmp	r3, #1
 800eaf6:	d01d      	beq.n	800eb34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800eaf8:	68bb      	ldr	r3, [r7, #8]
 800eafa:	2204      	movs	r2, #4
 800eafc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800eb00:	e018      	b.n	800eb34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800eb02:	6878      	ldr	r0, [r7, #4]
 800eb04:	f000 f867 	bl	800ebd6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800eb08:	6878      	ldr	r0, [r7, #4]
 800eb0a:	f000 f8da 	bl	800ecc2 <CDC_ProcessReception>
      break;
 800eb0e:	e014      	b.n	800eb3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800eb10:	2100      	movs	r1, #0
 800eb12:	6878      	ldr	r0, [r7, #4]
 800eb14:	f001 f81a 	bl	800fb4c <USBH_ClrFeature>
 800eb18:	4603      	mov	r3, r0
 800eb1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800eb1c:	7bbb      	ldrb	r3, [r7, #14]
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d10a      	bne.n	800eb38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	2200      	movs	r2, #0
 800eb26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800eb2a:	e005      	b.n	800eb38 <USBH_CDC_Process+0x120>

    default:
      break;
 800eb2c:	bf00      	nop
 800eb2e:	e004      	b.n	800eb3a <USBH_CDC_Process+0x122>
      break;
 800eb30:	bf00      	nop
 800eb32:	e002      	b.n	800eb3a <USBH_CDC_Process+0x122>
      break;
 800eb34:	bf00      	nop
 800eb36:	e000      	b.n	800eb3a <USBH_CDC_Process+0x122>
      break;
 800eb38:	bf00      	nop

  }

  return status;
 800eb3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb3c:	4618      	mov	r0, r3
 800eb3e:	3710      	adds	r7, #16
 800eb40:	46bd      	mov	sp, r7
 800eb42:	bd80      	pop	{r7, pc}

0800eb44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800eb44:	b480      	push	{r7}
 800eb46:	b083      	sub	sp, #12
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800eb4c:	2300      	movs	r3, #0
}
 800eb4e:	4618      	mov	r0, r3
 800eb50:	370c      	adds	r7, #12
 800eb52:	46bd      	mov	sp, r7
 800eb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb58:	4770      	bx	lr

0800eb5a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b082      	sub	sp, #8
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	6078      	str	r0, [r7, #4]
 800eb62:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	22a1      	movs	r2, #161	@ 0xa1
 800eb68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	2221      	movs	r2, #33	@ 0x21
 800eb6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	2207      	movs	r2, #7
 800eb80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	2207      	movs	r2, #7
 800eb86:	4619      	mov	r1, r3
 800eb88:	6878      	ldr	r0, [r7, #4]
 800eb8a:	f001 fb14 	bl	80101b6 <USBH_CtlReq>
 800eb8e:	4603      	mov	r3, r0
}
 800eb90:	4618      	mov	r0, r3
 800eb92:	3708      	adds	r7, #8
 800eb94:	46bd      	mov	sp, r7
 800eb96:	bd80      	pop	{r7, pc}

0800eb98 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b082      	sub	sp, #8
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	2221      	movs	r2, #33	@ 0x21
 800eba6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2220      	movs	r2, #32
 800ebac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	2207      	movs	r2, #7
 800ebbe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800ebc0:	683b      	ldr	r3, [r7, #0]
 800ebc2:	2207      	movs	r2, #7
 800ebc4:	4619      	mov	r1, r3
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f001 faf5 	bl	80101b6 <USBH_CtlReq>
 800ebcc:	4603      	mov	r3, r0
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3708      	adds	r7, #8
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}

0800ebd6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ebd6:	b580      	push	{r7, lr}
 800ebd8:	b086      	sub	sp, #24
 800ebda:	af02      	add	r7, sp, #8
 800ebdc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ebe4:	69db      	ldr	r3, [r3, #28]
 800ebe6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ebe8:	2300      	movs	r3, #0
 800ebea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ebf2:	2b01      	cmp	r3, #1
 800ebf4:	d002      	beq.n	800ebfc <CDC_ProcessTransmission+0x26>
 800ebf6:	2b02      	cmp	r3, #2
 800ebf8:	d023      	beq.n	800ec42 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ebfa:	e05e      	b.n	800ecba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec00:	68fa      	ldr	r2, [r7, #12]
 800ec02:	8b12      	ldrh	r2, [r2, #24]
 800ec04:	4293      	cmp	r3, r2
 800ec06:	d90b      	bls.n	800ec20 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	69d9      	ldr	r1, [r3, #28]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	8b1a      	ldrh	r2, [r3, #24]
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	7b5b      	ldrb	r3, [r3, #13]
 800ec14:	2001      	movs	r0, #1
 800ec16:	9000      	str	r0, [sp, #0]
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f001 fcda 	bl	80105d2 <USBH_BulkSendData>
 800ec1e:	e00b      	b.n	800ec38 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ec24:	68fb      	ldr	r3, [r7, #12]
 800ec26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ec28:	b29a      	uxth	r2, r3
 800ec2a:	68fb      	ldr	r3, [r7, #12]
 800ec2c:	7b5b      	ldrb	r3, [r3, #13]
 800ec2e:	2001      	movs	r0, #1
 800ec30:	9000      	str	r0, [sp, #0]
 800ec32:	6878      	ldr	r0, [r7, #4]
 800ec34:	f001 fccd 	bl	80105d2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2202      	movs	r2, #2
 800ec3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ec40:	e03b      	b.n	800ecba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	7b5b      	ldrb	r3, [r3, #13]
 800ec46:	4619      	mov	r1, r3
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 fff1 	bl	8010c30 <USBH_LL_GetURBState>
 800ec4e:	4603      	mov	r3, r0
 800ec50:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ec52:	7afb      	ldrb	r3, [r7, #11]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d128      	bne.n	800ecaa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec5c:	68fa      	ldr	r2, [r7, #12]
 800ec5e:	8b12      	ldrh	r2, [r2, #24]
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d90e      	bls.n	800ec82 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec68:	68fa      	ldr	r2, [r7, #12]
 800ec6a:	8b12      	ldrh	r2, [r2, #24]
 800ec6c:	1a9a      	subs	r2, r3, r2
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	69db      	ldr	r3, [r3, #28]
 800ec76:	68fa      	ldr	r2, [r7, #12]
 800ec78:	8b12      	ldrh	r2, [r2, #24]
 800ec7a:	441a      	add	r2, r3
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	61da      	str	r2, [r3, #28]
 800ec80:	e002      	b.n	800ec88 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800ec82:	68fb      	ldr	r3, [r7, #12]
 800ec84:	2200      	movs	r2, #0
 800ec86:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d004      	beq.n	800ec9a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ec90:	68fb      	ldr	r3, [r7, #12]
 800ec92:	2201      	movs	r2, #1
 800ec94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ec98:	e00e      	b.n	800ecb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	2200      	movs	r2, #0
 800ec9e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 f868 	bl	800ed78 <USBH_CDC_TransmitCallback>
      break;
 800eca8:	e006      	b.n	800ecb8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800ecaa:	7afb      	ldrb	r3, [r7, #11]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d103      	bne.n	800ecb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ecb0:	68fb      	ldr	r3, [r7, #12]
 800ecb2:	2201      	movs	r2, #1
 800ecb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ecb8:	bf00      	nop
  }
}
 800ecba:	bf00      	nop
 800ecbc:	3710      	adds	r7, #16
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	bd80      	pop	{r7, pc}

0800ecc2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ecc2:	b580      	push	{r7, lr}
 800ecc4:	b086      	sub	sp, #24
 800ecc6:	af00      	add	r7, sp, #0
 800ecc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ecd0:	69db      	ldr	r3, [r3, #28]
 800ecd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800ecd8:	697b      	ldr	r3, [r7, #20]
 800ecda:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800ecde:	2b03      	cmp	r3, #3
 800ece0:	d002      	beq.n	800ece8 <CDC_ProcessReception+0x26>
 800ece2:	2b04      	cmp	r3, #4
 800ece4:	d00e      	beq.n	800ed04 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800ece6:	e043      	b.n	800ed70 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	6a19      	ldr	r1, [r3, #32]
 800ecec:	697b      	ldr	r3, [r7, #20]
 800ecee:	8b5a      	ldrh	r2, [r3, #26]
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	7b1b      	ldrb	r3, [r3, #12]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f001 fc91 	bl	801061c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ecfa:	697b      	ldr	r3, [r7, #20]
 800ecfc:	2204      	movs	r2, #4
 800ecfe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ed02:	e035      	b.n	800ed70 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ed04:	697b      	ldr	r3, [r7, #20]
 800ed06:	7b1b      	ldrb	r3, [r3, #12]
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6878      	ldr	r0, [r7, #4]
 800ed0c:	f001 ff90 	bl	8010c30 <USBH_LL_GetURBState>
 800ed10:	4603      	mov	r3, r0
 800ed12:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800ed14:	7cfb      	ldrb	r3, [r7, #19]
 800ed16:	2b01      	cmp	r3, #1
 800ed18:	d129      	bne.n	800ed6e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ed1a:	697b      	ldr	r3, [r7, #20]
 800ed1c:	7b1b      	ldrb	r3, [r3, #12]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f001 fef3 	bl	8010b0c <USBH_LL_GetLastXferSize>
 800ed26:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800ed28:	697b      	ldr	r3, [r7, #20]
 800ed2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed2c:	68fa      	ldr	r2, [r7, #12]
 800ed2e:	429a      	cmp	r2, r3
 800ed30:	d016      	beq.n	800ed60 <CDC_ProcessReception+0x9e>
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	8b5b      	ldrh	r3, [r3, #26]
 800ed36:	461a      	mov	r2, r3
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	4293      	cmp	r3, r2
 800ed3c:	d110      	bne.n	800ed60 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	1ad2      	subs	r2, r2, r3
 800ed46:	697b      	ldr	r3, [r7, #20]
 800ed48:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800ed4a:	697b      	ldr	r3, [r7, #20]
 800ed4c:	6a1a      	ldr	r2, [r3, #32]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	441a      	add	r2, r3
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	2203      	movs	r2, #3
 800ed5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800ed5e:	e006      	b.n	800ed6e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	2200      	movs	r2, #0
 800ed64:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800ed68:	6878      	ldr	r0, [r7, #4]
 800ed6a:	f000 f80f 	bl	800ed8c <USBH_CDC_ReceiveCallback>
      break;
 800ed6e:	bf00      	nop
  }
}
 800ed70:	bf00      	nop
 800ed72:	3718      	adds	r7, #24
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}

0800ed78 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b083      	sub	sp, #12
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ed80:	bf00      	nop
 800ed82:	370c      	adds	r7, #12
 800ed84:	46bd      	mov	sp, r7
 800ed86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed8a:	4770      	bx	lr

0800ed8c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800ed8c:	b480      	push	{r7}
 800ed8e:	b083      	sub	sp, #12
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800ed94:	bf00      	nop
 800ed96:	370c      	adds	r7, #12
 800ed98:	46bd      	mov	sp, r7
 800ed9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed9e:	4770      	bx	lr

0800eda0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b083      	sub	sp, #12
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800eda8:	bf00      	nop
 800edaa:	370c      	adds	r7, #12
 800edac:	46bd      	mov	sp, r7
 800edae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edb2:	4770      	bx	lr

0800edb4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800edb4:	b580      	push	{r7, lr}
 800edb6:	b084      	sub	sp, #16
 800edb8:	af00      	add	r7, sp, #0
 800edba:	60f8      	str	r0, [r7, #12]
 800edbc:	60b9      	str	r1, [r7, #8]
 800edbe:	4613      	mov	r3, r2
 800edc0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800edc2:	68fb      	ldr	r3, [r7, #12]
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d101      	bne.n	800edcc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800edc8:	2302      	movs	r3, #2
 800edca:	e029      	b.n	800ee20 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	79fa      	ldrb	r2, [r7, #7]
 800edd0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	2200      	movs	r2, #0
 800edd8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800eddc:	68fb      	ldr	r3, [r7, #12]
 800edde:	2200      	movs	r2, #0
 800ede0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800ede4:	68f8      	ldr	r0, [r7, #12]
 800ede6:	f000 f81f 	bl	800ee28 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	2200      	movs	r2, #0
 800edee:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800edf2:	68fb      	ldr	r3, [r7, #12]
 800edf4:	2200      	movs	r2, #0
 800edf6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2200      	movs	r2, #0
 800edfe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	2200      	movs	r2, #0
 800ee06:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d003      	beq.n	800ee18 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800ee10:	68fb      	ldr	r3, [r7, #12]
 800ee12:	68ba      	ldr	r2, [r7, #8]
 800ee14:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800ee18:	68f8      	ldr	r0, [r7, #12]
 800ee1a:	f001 fdc3 	bl	80109a4 <USBH_LL_Init>

  return USBH_OK;
 800ee1e:	2300      	movs	r3, #0
}
 800ee20:	4618      	mov	r0, r3
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800ee30:	2300      	movs	r3, #0
 800ee32:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ee34:	2300      	movs	r3, #0
 800ee36:	60fb      	str	r3, [r7, #12]
 800ee38:	e009      	b.n	800ee4e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800ee3a:	687a      	ldr	r2, [r7, #4]
 800ee3c:	68fb      	ldr	r3, [r7, #12]
 800ee3e:	33e0      	adds	r3, #224	@ 0xe0
 800ee40:	009b      	lsls	r3, r3, #2
 800ee42:	4413      	add	r3, r2
 800ee44:	2200      	movs	r2, #0
 800ee46:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	3301      	adds	r3, #1
 800ee4c:	60fb      	str	r3, [r7, #12]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	2b0f      	cmp	r3, #15
 800ee52:	d9f2      	bls.n	800ee3a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ee54:	2300      	movs	r3, #0
 800ee56:	60fb      	str	r3, [r7, #12]
 800ee58:	e009      	b.n	800ee6e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	4413      	add	r3, r2
 800ee60:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800ee64:	2200      	movs	r2, #0
 800ee66:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	3301      	adds	r3, #1
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee74:	d3f1      	bcc.n	800ee5a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	2200      	movs	r2, #0
 800ee7a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	2201      	movs	r2, #1
 800ee86:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	2240      	movs	r2, #64	@ 0x40
 800ee9a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	2200      	movs	r2, #0
 800eea0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	2200      	movs	r2, #0
 800eea6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	2201      	movs	r2, #1
 800eeae:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2200      	movs	r2, #0
 800eebe:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	331c      	adds	r3, #28
 800eec6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800eeca:	2100      	movs	r1, #0
 800eecc:	4618      	mov	r0, r3
 800eece:	f002 fa3f 	bl	8011350 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800eed8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eedc:	2100      	movs	r1, #0
 800eede:	4618      	mov	r0, r3
 800eee0:	f002 fa36 	bl	8011350 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800eeea:	2212      	movs	r2, #18
 800eeec:	2100      	movs	r1, #0
 800eeee:	4618      	mov	r0, r3
 800eef0:	f002 fa2e 	bl	8011350 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800eefa:	223e      	movs	r2, #62	@ 0x3e
 800eefc:	2100      	movs	r1, #0
 800eefe:	4618      	mov	r0, r3
 800ef00:	f002 fa26 	bl	8011350 <memset>

  return USBH_OK;
 800ef04:	2300      	movs	r3, #0
}
 800ef06:	4618      	mov	r0, r3
 800ef08:	3710      	adds	r7, #16
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	bd80      	pop	{r7, pc}

0800ef0e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800ef0e:	b480      	push	{r7}
 800ef10:	b085      	sub	sp, #20
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800ef18:	2300      	movs	r3, #0
 800ef1a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800ef1c:	683b      	ldr	r3, [r7, #0]
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d016      	beq.n	800ef50 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d10e      	bne.n	800ef4a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800ef32:	1c59      	adds	r1, r3, #1
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800ef3a:	687a      	ldr	r2, [r7, #4]
 800ef3c:	33de      	adds	r3, #222	@ 0xde
 800ef3e:	6839      	ldr	r1, [r7, #0]
 800ef40:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800ef44:	2300      	movs	r3, #0
 800ef46:	73fb      	strb	r3, [r7, #15]
 800ef48:	e004      	b.n	800ef54 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ef4a:	2302      	movs	r3, #2
 800ef4c:	73fb      	strb	r3, [r7, #15]
 800ef4e:	e001      	b.n	800ef54 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ef50:	2302      	movs	r3, #2
 800ef52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ef54:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef56:	4618      	mov	r0, r3
 800ef58:	3714      	adds	r7, #20
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ef62:	b480      	push	{r7}
 800ef64:	b085      	sub	sp, #20
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800ef6e:	2300      	movs	r3, #0
 800ef70:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800ef78:	78fa      	ldrb	r2, [r7, #3]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d204      	bcs.n	800ef88 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	78fa      	ldrb	r2, [r7, #3]
 800ef82:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800ef86:	e001      	b.n	800ef8c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ef88:	2302      	movs	r3, #2
 800ef8a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ef8c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef8e:	4618      	mov	r0, r3
 800ef90:	3714      	adds	r7, #20
 800ef92:	46bd      	mov	sp, r7
 800ef94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef98:	4770      	bx	lr

0800ef9a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ef9a:	b480      	push	{r7}
 800ef9c:	b087      	sub	sp, #28
 800ef9e:	af00      	add	r7, sp, #0
 800efa0:	6078      	str	r0, [r7, #4]
 800efa2:	4608      	mov	r0, r1
 800efa4:	4611      	mov	r1, r2
 800efa6:	461a      	mov	r2, r3
 800efa8:	4603      	mov	r3, r0
 800efaa:	70fb      	strb	r3, [r7, #3]
 800efac:	460b      	mov	r3, r1
 800efae:	70bb      	strb	r3, [r7, #2]
 800efb0:	4613      	mov	r3, r2
 800efb2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800efb4:	2300      	movs	r3, #0
 800efb6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800efb8:	2300      	movs	r3, #0
 800efba:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800efc2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800efc4:	e025      	b.n	800f012 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800efc6:	7dfb      	ldrb	r3, [r7, #23]
 800efc8:	221a      	movs	r2, #26
 800efca:	fb02 f303 	mul.w	r3, r2, r3
 800efce:	3308      	adds	r3, #8
 800efd0:	68fa      	ldr	r2, [r7, #12]
 800efd2:	4413      	add	r3, r2
 800efd4:	3302      	adds	r3, #2
 800efd6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	795b      	ldrb	r3, [r3, #5]
 800efdc:	78fa      	ldrb	r2, [r7, #3]
 800efde:	429a      	cmp	r2, r3
 800efe0:	d002      	beq.n	800efe8 <USBH_FindInterface+0x4e>
 800efe2:	78fb      	ldrb	r3, [r7, #3]
 800efe4:	2bff      	cmp	r3, #255	@ 0xff
 800efe6:	d111      	bne.n	800f00c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800efe8:	693b      	ldr	r3, [r7, #16]
 800efea:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800efec:	78ba      	ldrb	r2, [r7, #2]
 800efee:	429a      	cmp	r2, r3
 800eff0:	d002      	beq.n	800eff8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800eff2:	78bb      	ldrb	r3, [r7, #2]
 800eff4:	2bff      	cmp	r3, #255	@ 0xff
 800eff6:	d109      	bne.n	800f00c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800eff8:	693b      	ldr	r3, [r7, #16]
 800effa:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800effc:	787a      	ldrb	r2, [r7, #1]
 800effe:	429a      	cmp	r2, r3
 800f000:	d002      	beq.n	800f008 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f002:	787b      	ldrb	r3, [r7, #1]
 800f004:	2bff      	cmp	r3, #255	@ 0xff
 800f006:	d101      	bne.n	800f00c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f008:	7dfb      	ldrb	r3, [r7, #23]
 800f00a:	e006      	b.n	800f01a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f00c:	7dfb      	ldrb	r3, [r7, #23]
 800f00e:	3301      	adds	r3, #1
 800f010:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f012:	7dfb      	ldrb	r3, [r7, #23]
 800f014:	2b01      	cmp	r3, #1
 800f016:	d9d6      	bls.n	800efc6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f018:	23ff      	movs	r3, #255	@ 0xff
}
 800f01a:	4618      	mov	r0, r3
 800f01c:	371c      	adds	r7, #28
 800f01e:	46bd      	mov	sp, r7
 800f020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f024:	4770      	bx	lr

0800f026 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f026:	b580      	push	{r7, lr}
 800f028:	b082      	sub	sp, #8
 800f02a:	af00      	add	r7, sp, #0
 800f02c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f001 fcf4 	bl	8010a1c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f034:	2101      	movs	r1, #1
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f001 fe0d 	bl	8010c56 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f03c:	2300      	movs	r3, #0
}
 800f03e:	4618      	mov	r0, r3
 800f040:	3708      	adds	r7, #8
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
	...

0800f048 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f048:	b580      	push	{r7, lr}
 800f04a:	b088      	sub	sp, #32
 800f04c:	af04      	add	r7, sp, #16
 800f04e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f050:	2302      	movs	r3, #2
 800f052:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f054:	2300      	movs	r3, #0
 800f056:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800f05e:	b2db      	uxtb	r3, r3
 800f060:	2b01      	cmp	r3, #1
 800f062:	d102      	bne.n	800f06a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	2203      	movs	r2, #3
 800f068:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	781b      	ldrb	r3, [r3, #0]
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	2b0b      	cmp	r3, #11
 800f072:	f200 81bb 	bhi.w	800f3ec <USBH_Process+0x3a4>
 800f076:	a201      	add	r2, pc, #4	@ (adr r2, 800f07c <USBH_Process+0x34>)
 800f078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f07c:	0800f0ad 	.word	0x0800f0ad
 800f080:	0800f0df 	.word	0x0800f0df
 800f084:	0800f147 	.word	0x0800f147
 800f088:	0800f387 	.word	0x0800f387
 800f08c:	0800f3ed 	.word	0x0800f3ed
 800f090:	0800f1e7 	.word	0x0800f1e7
 800f094:	0800f32d 	.word	0x0800f32d
 800f098:	0800f21d 	.word	0x0800f21d
 800f09c:	0800f23d 	.word	0x0800f23d
 800f0a0:	0800f25b 	.word	0x0800f25b
 800f0a4:	0800f29f 	.word	0x0800f29f
 800f0a8:	0800f36f 	.word	0x0800f36f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	2b00      	cmp	r3, #0
 800f0b6:	f000 819b 	beq.w	800f3f0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f0c0:	20c8      	movs	r0, #200	@ 0xc8
 800f0c2:	f001 fe12 	bl	8010cea <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f001 fd05 	bl	8010ad6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	2200      	movs	r2, #0
 800f0d0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f0dc:	e188      	b.n	800f3f0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800f0e4:	2b01      	cmp	r3, #1
 800f0e6:	d107      	bne.n	800f0f8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	2200      	movs	r2, #0
 800f0ec:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	2202      	movs	r2, #2
 800f0f4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f0f6:	e18a      	b.n	800f40e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f0fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800f102:	d914      	bls.n	800f12e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f10a:	3301      	adds	r3, #1
 800f10c:	b2da      	uxtb	r2, r3
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800f11a:	2b03      	cmp	r3, #3
 800f11c:	d903      	bls.n	800f126 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	220d      	movs	r2, #13
 800f122:	701a      	strb	r2, [r3, #0]
      break;
 800f124:	e173      	b.n	800f40e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	2200      	movs	r2, #0
 800f12a:	701a      	strb	r2, [r3, #0]
      break;
 800f12c:	e16f      	b.n	800f40e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800f134:	f103 020a 	add.w	r2, r3, #10
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800f13e:	200a      	movs	r0, #10
 800f140:	f001 fdd3 	bl	8010cea <USBH_Delay>
      break;
 800f144:	e163      	b.n	800f40e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d005      	beq.n	800f15c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f156:	2104      	movs	r1, #4
 800f158:	6878      	ldr	r0, [r7, #4]
 800f15a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f15c:	2064      	movs	r0, #100	@ 0x64
 800f15e:	f001 fdc4 	bl	8010cea <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f001 fc90 	bl	8010a88 <USBH_LL_GetSpeed>
 800f168:	4603      	mov	r3, r0
 800f16a:	461a      	mov	r2, r3
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	2205      	movs	r2, #5
 800f176:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f178:	2100      	movs	r1, #0
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f001 fa9b 	bl	80106b6 <USBH_AllocPipe>
 800f180:	4603      	mov	r3, r0
 800f182:	461a      	mov	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f188:	2180      	movs	r1, #128	@ 0x80
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 fa93 	bl	80106b6 <USBH_AllocPipe>
 800f190:	4603      	mov	r3, r0
 800f192:	461a      	mov	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	7919      	ldrb	r1, [r3, #4]
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f1a8:	687a      	ldr	r2, [r7, #4]
 800f1aa:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f1ac:	9202      	str	r2, [sp, #8]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	9201      	str	r2, [sp, #4]
 800f1b2:	9300      	str	r3, [sp, #0]
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	2280      	movs	r2, #128	@ 0x80
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f001 fa4d 	bl	8010658 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	7959      	ldrb	r1, [r3, #5]
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f1d2:	9202      	str	r2, [sp, #8]
 800f1d4:	2200      	movs	r2, #0
 800f1d6:	9201      	str	r2, [sp, #4]
 800f1d8:	9300      	str	r3, [sp, #0]
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2200      	movs	r2, #0
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f001 fa3a 	bl	8010658 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f1e4:	e113      	b.n	800f40e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f1e6:	6878      	ldr	r0, [r7, #4]
 800f1e8:	f000 f916 	bl	800f418 <USBH_HandleEnum>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f1f0:	7bbb      	ldrb	r3, [r7, #14]
 800f1f2:	b2db      	uxtb	r3, r3
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	f040 80fd 	bne.w	800f3f4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	2200      	movs	r2, #0
 800f1fe:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800f208:	2b01      	cmp	r3, #1
 800f20a:	d103      	bne.n	800f214 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	2208      	movs	r2, #8
 800f210:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f212:	e0ef      	b.n	800f3f4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	2207      	movs	r2, #7
 800f218:	701a      	strb	r2, [r3, #0]
      break;
 800f21a:	e0eb      	b.n	800f3f4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f222:	2b00      	cmp	r3, #0
 800f224:	f000 80e8 	beq.w	800f3f8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f22e:	2101      	movs	r1, #1
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2208      	movs	r2, #8
 800f238:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f23a:	e0dd      	b.n	800f3f8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800f242:	4619      	mov	r1, r3
 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f000 fc3a 	bl	800fabe <USBH_SetCfg>
 800f24a:	4603      	mov	r3, r0
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	f040 80d5 	bne.w	800f3fc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2209      	movs	r2, #9
 800f256:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f258:	e0d0      	b.n	800f3fc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800f260:	f003 0320 	and.w	r3, r3, #32
 800f264:	2b00      	cmp	r3, #0
 800f266:	d016      	beq.n	800f296 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f268:	2101      	movs	r1, #1
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 fc4a 	bl	800fb04 <USBH_SetFeature>
 800f270:	4603      	mov	r3, r0
 800f272:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f274:	7bbb      	ldrb	r3, [r7, #14]
 800f276:	b2db      	uxtb	r3, r3
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d103      	bne.n	800f284 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	220a      	movs	r2, #10
 800f280:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f282:	e0bd      	b.n	800f400 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800f284:	7bbb      	ldrb	r3, [r7, #14]
 800f286:	b2db      	uxtb	r3, r3
 800f288:	2b03      	cmp	r3, #3
 800f28a:	f040 80b9 	bne.w	800f400 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	220a      	movs	r2, #10
 800f292:	701a      	strb	r2, [r3, #0]
      break;
 800f294:	e0b4      	b.n	800f400 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	220a      	movs	r2, #10
 800f29a:	701a      	strb	r2, [r3, #0]
      break;
 800f29c:	e0b0      	b.n	800f400 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800f2a4:	2b00      	cmp	r3, #0
 800f2a6:	f000 80ad 	beq.w	800f404 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	2200      	movs	r2, #0
 800f2ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	73fb      	strb	r3, [r7, #15]
 800f2b6:	e016      	b.n	800f2e6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f2b8:	7bfa      	ldrb	r2, [r7, #15]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	32de      	adds	r2, #222	@ 0xde
 800f2be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2c2:	791a      	ldrb	r2, [r3, #4]
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d108      	bne.n	800f2e0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f2ce:	7bfa      	ldrb	r2, [r7, #15]
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	32de      	adds	r2, #222	@ 0xde
 800f2d4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800f2de:	e005      	b.n	800f2ec <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f2e0:	7bfb      	ldrb	r3, [r7, #15]
 800f2e2:	3301      	adds	r3, #1
 800f2e4:	73fb      	strb	r3, [r7, #15]
 800f2e6:	7bfb      	ldrb	r3, [r7, #15]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d0e5      	beq.n	800f2b8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d016      	beq.n	800f324 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f2fc:	689b      	ldr	r3, [r3, #8]
 800f2fe:	6878      	ldr	r0, [r7, #4]
 800f300:	4798      	blx	r3
 800f302:	4603      	mov	r3, r0
 800f304:	2b00      	cmp	r3, #0
 800f306:	d109      	bne.n	800f31c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	2206      	movs	r2, #6
 800f30c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f314:	2103      	movs	r1, #3
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f31a:	e073      	b.n	800f404 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	220d      	movs	r2, #13
 800f320:	701a      	strb	r2, [r3, #0]
      break;
 800f322:	e06f      	b.n	800f404 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	220d      	movs	r2, #13
 800f328:	701a      	strb	r2, [r3, #0]
      break;
 800f32a:	e06b      	b.n	800f404 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f332:	2b00      	cmp	r3, #0
 800f334:	d017      	beq.n	800f366 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f33c:	691b      	ldr	r3, [r3, #16]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	4798      	blx	r3
 800f342:	4603      	mov	r3, r0
 800f344:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f346:	7bbb      	ldrb	r3, [r7, #14]
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d103      	bne.n	800f356 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	220b      	movs	r2, #11
 800f352:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f354:	e058      	b.n	800f408 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800f356:	7bbb      	ldrb	r3, [r7, #14]
 800f358:	b2db      	uxtb	r3, r3
 800f35a:	2b02      	cmp	r3, #2
 800f35c:	d154      	bne.n	800f408 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	220d      	movs	r2, #13
 800f362:	701a      	strb	r2, [r3, #0]
      break;
 800f364:	e050      	b.n	800f408 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	220d      	movs	r2, #13
 800f36a:	701a      	strb	r2, [r3, #0]
      break;
 800f36c:	e04c      	b.n	800f408 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f374:	2b00      	cmp	r3, #0
 800f376:	d049      	beq.n	800f40c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f37e:	695b      	ldr	r3, [r3, #20]
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	4798      	blx	r3
      }
      break;
 800f384:	e042      	b.n	800f40c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800f38e:	6878      	ldr	r0, [r7, #4]
 800f390:	f7ff fd4a 	bl	800ee28 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d009      	beq.n	800f3b2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	6878      	ldr	r0, [r7, #4]
 800f3a8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2200      	movs	r2, #0
 800f3ae:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d005      	beq.n	800f3c8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800f3c2:	2105      	movs	r1, #5
 800f3c4:	6878      	ldr	r0, [r7, #4]
 800f3c6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800f3ce:	b2db      	uxtb	r3, r3
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d107      	bne.n	800f3e4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff fe22 	bl	800f026 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f3e2:	e014      	b.n	800f40e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f001 fb19 	bl	8010a1c <USBH_LL_Start>
      break;
 800f3ea:	e010      	b.n	800f40e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800f3ec:	bf00      	nop
 800f3ee:	e00e      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f3f0:	bf00      	nop
 800f3f2:	e00c      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f3f4:	bf00      	nop
 800f3f6:	e00a      	b.n	800f40e <USBH_Process+0x3c6>
    break;
 800f3f8:	bf00      	nop
 800f3fa:	e008      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f3fc:	bf00      	nop
 800f3fe:	e006      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f400:	bf00      	nop
 800f402:	e004      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f404:	bf00      	nop
 800f406:	e002      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f408:	bf00      	nop
 800f40a:	e000      	b.n	800f40e <USBH_Process+0x3c6>
      break;
 800f40c:	bf00      	nop
  }
  return USBH_OK;
 800f40e:	2300      	movs	r3, #0
}
 800f410:	4618      	mov	r0, r3
 800f412:	3710      	adds	r7, #16
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}

0800f418 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b088      	sub	sp, #32
 800f41c:	af04      	add	r7, sp, #16
 800f41e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f420:	2301      	movs	r3, #1
 800f422:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f424:	2301      	movs	r3, #1
 800f426:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	785b      	ldrb	r3, [r3, #1]
 800f42c:	2b07      	cmp	r3, #7
 800f42e:	f200 81bd 	bhi.w	800f7ac <USBH_HandleEnum+0x394>
 800f432:	a201      	add	r2, pc, #4	@ (adr r2, 800f438 <USBH_HandleEnum+0x20>)
 800f434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f438:	0800f459 	.word	0x0800f459
 800f43c:	0800f513 	.word	0x0800f513
 800f440:	0800f57d 	.word	0x0800f57d
 800f444:	0800f607 	.word	0x0800f607
 800f448:	0800f671 	.word	0x0800f671
 800f44c:	0800f6e1 	.word	0x0800f6e1
 800f450:	0800f727 	.word	0x0800f727
 800f454:	0800f76d 	.word	0x0800f76d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f458:	2108      	movs	r1, #8
 800f45a:	6878      	ldr	r0, [r7, #4]
 800f45c:	f000 fa4c 	bl	800f8f8 <USBH_Get_DevDesc>
 800f460:	4603      	mov	r3, r0
 800f462:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f464:	7bbb      	ldrb	r3, [r7, #14]
 800f466:	2b00      	cmp	r3, #0
 800f468:	d12e      	bne.n	800f4c8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	2201      	movs	r2, #1
 800f478:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	7919      	ldrb	r1, [r3, #4]
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f48a:	687a      	ldr	r2, [r7, #4]
 800f48c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f48e:	9202      	str	r2, [sp, #8]
 800f490:	2200      	movs	r2, #0
 800f492:	9201      	str	r2, [sp, #4]
 800f494:	9300      	str	r3, [sp, #0]
 800f496:	4603      	mov	r3, r0
 800f498:	2280      	movs	r2, #128	@ 0x80
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	f001 f8dc 	bl	8010658 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	7959      	ldrb	r1, [r3, #5]
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f4b4:	9202      	str	r2, [sp, #8]
 800f4b6:	2200      	movs	r2, #0
 800f4b8:	9201      	str	r2, [sp, #4]
 800f4ba:	9300      	str	r3, [sp, #0]
 800f4bc:	4603      	mov	r3, r0
 800f4be:	2200      	movs	r2, #0
 800f4c0:	6878      	ldr	r0, [r7, #4]
 800f4c2:	f001 f8c9 	bl	8010658 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f4c6:	e173      	b.n	800f7b0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f4c8:	7bbb      	ldrb	r3, [r7, #14]
 800f4ca:	2b03      	cmp	r3, #3
 800f4cc:	f040 8170 	bne.w	800f7b0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800f4d0:	687b      	ldr	r3, [r7, #4]
 800f4d2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f4d6:	3301      	adds	r3, #1
 800f4d8:	b2da      	uxtb	r2, r3
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f4e6:	2b03      	cmp	r3, #3
 800f4e8:	d903      	bls.n	800f4f2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	220d      	movs	r2, #13
 800f4ee:	701a      	strb	r2, [r3, #0]
      break;
 800f4f0:	e15e      	b.n	800f7b0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	795b      	ldrb	r3, [r3, #5]
 800f4f6:	4619      	mov	r1, r3
 800f4f8:	6878      	ldr	r0, [r7, #4]
 800f4fa:	f001 f8fd 	bl	80106f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	791b      	ldrb	r3, [r3, #4]
 800f502:	4619      	mov	r1, r3
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f001 f8f7 	bl	80106f8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	701a      	strb	r2, [r3, #0]
      break;
 800f510:	e14e      	b.n	800f7b0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800f512:	2112      	movs	r1, #18
 800f514:	6878      	ldr	r0, [r7, #4]
 800f516:	f000 f9ef 	bl	800f8f8 <USBH_Get_DevDesc>
 800f51a:	4603      	mov	r3, r0
 800f51c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d103      	bne.n	800f52c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2202      	movs	r2, #2
 800f528:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f52a:	e143      	b.n	800f7b4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f52c:	7bbb      	ldrb	r3, [r7, #14]
 800f52e:	2b03      	cmp	r3, #3
 800f530:	f040 8140 	bne.w	800f7b4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f53a:	3301      	adds	r3, #1
 800f53c:	b2da      	uxtb	r2, r3
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f54a:	2b03      	cmp	r3, #3
 800f54c:	d903      	bls.n	800f556 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	220d      	movs	r2, #13
 800f552:	701a      	strb	r2, [r3, #0]
      break;
 800f554:	e12e      	b.n	800f7b4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	795b      	ldrb	r3, [r3, #5]
 800f55a:	4619      	mov	r1, r3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f001 f8cb 	bl	80106f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	791b      	ldrb	r3, [r3, #4]
 800f566:	4619      	mov	r1, r3
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f001 f8c5 	bl	80106f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	2200      	movs	r2, #0
 800f572:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	701a      	strb	r2, [r3, #0]
      break;
 800f57a:	e11b      	b.n	800f7b4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800f57c:	2101      	movs	r1, #1
 800f57e:	6878      	ldr	r0, [r7, #4]
 800f580:	f000 fa79 	bl	800fa76 <USBH_SetAddress>
 800f584:	4603      	mov	r3, r0
 800f586:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f588:	7bbb      	ldrb	r3, [r7, #14]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d130      	bne.n	800f5f0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800f58e:	2002      	movs	r0, #2
 800f590:	f001 fbab 	bl	8010cea <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	2201      	movs	r2, #1
 800f598:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	2203      	movs	r2, #3
 800f5a0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	7919      	ldrb	r1, [r3, #4]
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800f5b6:	9202      	str	r2, [sp, #8]
 800f5b8:	2200      	movs	r2, #0
 800f5ba:	9201      	str	r2, [sp, #4]
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	4603      	mov	r3, r0
 800f5c0:	2280      	movs	r2, #128	@ 0x80
 800f5c2:	6878      	ldr	r0, [r7, #4]
 800f5c4:	f001 f848 	bl	8010658 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	7959      	ldrb	r1, [r3, #5]
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f5d8:	687a      	ldr	r2, [r7, #4]
 800f5da:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f5dc:	9202      	str	r2, [sp, #8]
 800f5de:	2200      	movs	r2, #0
 800f5e0:	9201      	str	r2, [sp, #4]
 800f5e2:	9300      	str	r3, [sp, #0]
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f001 f835 	bl	8010658 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800f5ee:	e0e3      	b.n	800f7b8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f5f0:	7bbb      	ldrb	r3, [r7, #14]
 800f5f2:	2b03      	cmp	r3, #3
 800f5f4:	f040 80e0 	bne.w	800f7b8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	220d      	movs	r2, #13
 800f5fc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	2200      	movs	r2, #0
 800f602:	705a      	strb	r2, [r3, #1]
      break;
 800f604:	e0d8      	b.n	800f7b8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800f606:	2109      	movs	r1, #9
 800f608:	6878      	ldr	r0, [r7, #4]
 800f60a:	f000 f9a1 	bl	800f950 <USBH_Get_CfgDesc>
 800f60e:	4603      	mov	r3, r0
 800f610:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f612:	7bbb      	ldrb	r3, [r7, #14]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d103      	bne.n	800f620 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2204      	movs	r2, #4
 800f61c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f61e:	e0cd      	b.n	800f7bc <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f620:	7bbb      	ldrb	r3, [r7, #14]
 800f622:	2b03      	cmp	r3, #3
 800f624:	f040 80ca 	bne.w	800f7bc <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f62e:	3301      	adds	r3, #1
 800f630:	b2da      	uxtb	r2, r3
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f63e:	2b03      	cmp	r3, #3
 800f640:	d903      	bls.n	800f64a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	220d      	movs	r2, #13
 800f646:	701a      	strb	r2, [r3, #0]
      break;
 800f648:	e0b8      	b.n	800f7bc <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	795b      	ldrb	r3, [r3, #5]
 800f64e:	4619      	mov	r1, r3
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f001 f851 	bl	80106f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	791b      	ldrb	r3, [r3, #4]
 800f65a:	4619      	mov	r1, r3
 800f65c:	6878      	ldr	r0, [r7, #4]
 800f65e:	f001 f84b 	bl	80106f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	2200      	movs	r2, #0
 800f666:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	2200      	movs	r2, #0
 800f66c:	701a      	strb	r2, [r3, #0]
      break;
 800f66e:	e0a5      	b.n	800f7bc <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800f676:	4619      	mov	r1, r3
 800f678:	6878      	ldr	r0, [r7, #4]
 800f67a:	f000 f969 	bl	800f950 <USBH_Get_CfgDesc>
 800f67e:	4603      	mov	r3, r0
 800f680:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f682:	7bbb      	ldrb	r3, [r7, #14]
 800f684:	2b00      	cmp	r3, #0
 800f686:	d103      	bne.n	800f690 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	2205      	movs	r2, #5
 800f68c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800f68e:	e097      	b.n	800f7c0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f690:	7bbb      	ldrb	r3, [r7, #14]
 800f692:	2b03      	cmp	r3, #3
 800f694:	f040 8094 	bne.w	800f7c0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f69e:	3301      	adds	r3, #1
 800f6a0:	b2da      	uxtb	r2, r3
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800f6ae:	2b03      	cmp	r3, #3
 800f6b0:	d903      	bls.n	800f6ba <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	220d      	movs	r2, #13
 800f6b6:	701a      	strb	r2, [r3, #0]
      break;
 800f6b8:	e082      	b.n	800f7c0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	795b      	ldrb	r3, [r3, #5]
 800f6be:	4619      	mov	r1, r3
 800f6c0:	6878      	ldr	r0, [r7, #4]
 800f6c2:	f001 f819 	bl	80106f8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	791b      	ldrb	r3, [r3, #4]
 800f6ca:	4619      	mov	r1, r3
 800f6cc:	6878      	ldr	r0, [r7, #4]
 800f6ce:	f001 f813 	bl	80106f8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800f6d2:	687b      	ldr	r3, [r7, #4]
 800f6d4:	2200      	movs	r2, #0
 800f6d6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	2200      	movs	r2, #0
 800f6dc:	701a      	strb	r2, [r3, #0]
      break;
 800f6de:	e06f      	b.n	800f7c0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d019      	beq.n	800f71e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800f6f6:	23ff      	movs	r3, #255	@ 0xff
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f000 f953 	bl	800f9a4 <USBH_Get_StringDesc>
 800f6fe:	4603      	mov	r3, r0
 800f700:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f702:	7bbb      	ldrb	r3, [r7, #14]
 800f704:	2b00      	cmp	r3, #0
 800f706:	d103      	bne.n	800f710 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	2206      	movs	r2, #6
 800f70c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f70e:	e059      	b.n	800f7c4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f710:	7bbb      	ldrb	r3, [r7, #14]
 800f712:	2b03      	cmp	r3, #3
 800f714:	d156      	bne.n	800f7c4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	2206      	movs	r2, #6
 800f71a:	705a      	strb	r2, [r3, #1]
      break;
 800f71c:	e052      	b.n	800f7c4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2206      	movs	r2, #6
 800f722:	705a      	strb	r2, [r3, #1]
      break;
 800f724:	e04e      	b.n	800f7c4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d019      	beq.n	800f764 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800f73c:	23ff      	movs	r3, #255	@ 0xff
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f000 f930 	bl	800f9a4 <USBH_Get_StringDesc>
 800f744:	4603      	mov	r3, r0
 800f746:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f748:	7bbb      	ldrb	r3, [r7, #14]
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d103      	bne.n	800f756 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	2207      	movs	r2, #7
 800f752:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f754:	e038      	b.n	800f7c8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f756:	7bbb      	ldrb	r3, [r7, #14]
 800f758:	2b03      	cmp	r3, #3
 800f75a:	d135      	bne.n	800f7c8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2207      	movs	r2, #7
 800f760:	705a      	strb	r2, [r3, #1]
      break;
 800f762:	e031      	b.n	800f7c8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2207      	movs	r2, #7
 800f768:	705a      	strb	r2, [r3, #1]
      break;
 800f76a:	e02d      	b.n	800f7c8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800f772:	2b00      	cmp	r3, #0
 800f774:	d017      	beq.n	800f7a6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800f782:	23ff      	movs	r3, #255	@ 0xff
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f000 f90d 	bl	800f9a4 <USBH_Get_StringDesc>
 800f78a:	4603      	mov	r3, r0
 800f78c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800f78e:	7bbb      	ldrb	r3, [r7, #14]
 800f790:	2b00      	cmp	r3, #0
 800f792:	d102      	bne.n	800f79a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800f798:	e018      	b.n	800f7cc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800f79a:	7bbb      	ldrb	r3, [r7, #14]
 800f79c:	2b03      	cmp	r3, #3
 800f79e:	d115      	bne.n	800f7cc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	73fb      	strb	r3, [r7, #15]
      break;
 800f7a4:	e012      	b.n	800f7cc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800f7a6:	2300      	movs	r3, #0
 800f7a8:	73fb      	strb	r3, [r7, #15]
      break;
 800f7aa:	e00f      	b.n	800f7cc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800f7ac:	bf00      	nop
 800f7ae:	e00e      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7b0:	bf00      	nop
 800f7b2:	e00c      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7b4:	bf00      	nop
 800f7b6:	e00a      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7b8:	bf00      	nop
 800f7ba:	e008      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7bc:	bf00      	nop
 800f7be:	e006      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7c0:	bf00      	nop
 800f7c2:	e004      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7c4:	bf00      	nop
 800f7c6:	e002      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7c8:	bf00      	nop
 800f7ca:	e000      	b.n	800f7ce <USBH_HandleEnum+0x3b6>
      break;
 800f7cc:	bf00      	nop
  }
  return Status;
 800f7ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800f7d8:	b480      	push	{r7}
 800f7da:	b083      	sub	sp, #12
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
 800f7e0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	683a      	ldr	r2, [r7, #0]
 800f7e6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800f7ea:	bf00      	nop
 800f7ec:	370c      	adds	r7, #12
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f4:	4770      	bx	lr

0800f7f6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800f7f6:	b580      	push	{r7, lr}
 800f7f8:	b082      	sub	sp, #8
 800f7fa:	af00      	add	r7, sp, #0
 800f7fc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800f804:	1c5a      	adds	r2, r3, #1
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800f80c:	6878      	ldr	r0, [r7, #4]
 800f80e:	f000 f804 	bl	800f81a <USBH_HandleSof>
}
 800f812:	bf00      	nop
 800f814:	3708      	adds	r7, #8
 800f816:	46bd      	mov	sp, r7
 800f818:	bd80      	pop	{r7, pc}

0800f81a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800f81a:	b580      	push	{r7, lr}
 800f81c:	b082      	sub	sp, #8
 800f81e:	af00      	add	r7, sp, #0
 800f820:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	b2db      	uxtb	r3, r3
 800f828:	2b0b      	cmp	r3, #11
 800f82a:	d10a      	bne.n	800f842 <USBH_HandleSof+0x28>
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f832:	2b00      	cmp	r3, #0
 800f834:	d005      	beq.n	800f842 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800f83c:	699b      	ldr	r3, [r3, #24]
 800f83e:	6878      	ldr	r0, [r7, #4]
 800f840:	4798      	blx	r3
  }
}
 800f842:	bf00      	nop
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}

0800f84a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800f84a:	b480      	push	{r7}
 800f84c:	b083      	sub	sp, #12
 800f84e:	af00      	add	r7, sp, #0
 800f850:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2201      	movs	r2, #1
 800f856:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800f85a:	bf00      	nop
}
 800f85c:	370c      	adds	r7, #12
 800f85e:	46bd      	mov	sp, r7
 800f860:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f864:	4770      	bx	lr

0800f866 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800f866:	b480      	push	{r7}
 800f868:	b083      	sub	sp, #12
 800f86a:	af00      	add	r7, sp, #0
 800f86c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	2200      	movs	r2, #0
 800f872:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800f876:	bf00      	nop
}
 800f878:	370c      	adds	r7, #12
 800f87a:	46bd      	mov	sp, r7
 800f87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f880:	4770      	bx	lr

0800f882 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800f882:	b480      	push	{r7}
 800f884:	b083      	sub	sp, #12
 800f886:	af00      	add	r7, sp, #0
 800f888:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	2201      	movs	r2, #1
 800f88e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	2200      	movs	r2, #0
 800f89e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f8a2:	2300      	movs	r3, #0
}
 800f8a4:	4618      	mov	r0, r3
 800f8a6:	370c      	adds	r7, #12
 800f8a8:	46bd      	mov	sp, r7
 800f8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ae:	4770      	bx	lr

0800f8b0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b082      	sub	sp, #8
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	2200      	movs	r2, #0
 800f8cc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800f8d0:	6878      	ldr	r0, [r7, #4]
 800f8d2:	f001 f8be 	bl	8010a52 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	791b      	ldrb	r3, [r3, #4]
 800f8da:	4619      	mov	r1, r3
 800f8dc:	6878      	ldr	r0, [r7, #4]
 800f8de:	f000 ff0b 	bl	80106f8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	795b      	ldrb	r3, [r3, #5]
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 ff05 	bl	80106f8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800f8ee:	2300      	movs	r3, #0
}
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	3708      	adds	r7, #8
 800f8f4:	46bd      	mov	sp, r7
 800f8f6:	bd80      	pop	{r7, pc}

0800f8f8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b086      	sub	sp, #24
 800f8fc:	af02      	add	r7, sp, #8
 800f8fe:	6078      	str	r0, [r7, #4]
 800f900:	460b      	mov	r3, r1
 800f902:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800f904:	887b      	ldrh	r3, [r7, #2]
 800f906:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f90a:	d901      	bls.n	800f910 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800f90c:	2303      	movs	r3, #3
 800f90e:	e01b      	b.n	800f948 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800f916:	887b      	ldrh	r3, [r7, #2]
 800f918:	9300      	str	r3, [sp, #0]
 800f91a:	4613      	mov	r3, r2
 800f91c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800f920:	2100      	movs	r1, #0
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 f872 	bl	800fa0c <USBH_GetDescriptor>
 800f928:	4603      	mov	r3, r0
 800f92a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800f92c:	7bfb      	ldrb	r3, [r7, #15]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d109      	bne.n	800f946 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f938:	887a      	ldrh	r2, [r7, #2]
 800f93a:	4619      	mov	r1, r3
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f000 f929 	bl	800fb94 <USBH_ParseDevDesc>
 800f942:	4603      	mov	r3, r0
 800f944:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f946:	7bfb      	ldrb	r3, [r7, #15]
}
 800f948:	4618      	mov	r0, r3
 800f94a:	3710      	adds	r7, #16
 800f94c:	46bd      	mov	sp, r7
 800f94e:	bd80      	pop	{r7, pc}

0800f950 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800f950:	b580      	push	{r7, lr}
 800f952:	b086      	sub	sp, #24
 800f954:	af02      	add	r7, sp, #8
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	460b      	mov	r3, r1
 800f95a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	331c      	adds	r3, #28
 800f960:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800f962:	887b      	ldrh	r3, [r7, #2]
 800f964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800f968:	d901      	bls.n	800f96e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800f96a:	2303      	movs	r3, #3
 800f96c:	e016      	b.n	800f99c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800f96e:	887b      	ldrh	r3, [r7, #2]
 800f970:	9300      	str	r3, [sp, #0]
 800f972:	68bb      	ldr	r3, [r7, #8]
 800f974:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800f978:	2100      	movs	r1, #0
 800f97a:	6878      	ldr	r0, [r7, #4]
 800f97c:	f000 f846 	bl	800fa0c <USBH_GetDescriptor>
 800f980:	4603      	mov	r3, r0
 800f982:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800f984:	7bfb      	ldrb	r3, [r7, #15]
 800f986:	2b00      	cmp	r3, #0
 800f988:	d107      	bne.n	800f99a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800f98a:	887b      	ldrh	r3, [r7, #2]
 800f98c:	461a      	mov	r2, r3
 800f98e:	68b9      	ldr	r1, [r7, #8]
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f000 f9af 	bl	800fcf4 <USBH_ParseCfgDesc>
 800f996:	4603      	mov	r3, r0
 800f998:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f99a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f99c:	4618      	mov	r0, r3
 800f99e:	3710      	adds	r7, #16
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	bd80      	pop	{r7, pc}

0800f9a4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800f9a4:	b580      	push	{r7, lr}
 800f9a6:	b088      	sub	sp, #32
 800f9a8:	af02      	add	r7, sp, #8
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	607a      	str	r2, [r7, #4]
 800f9ae:	461a      	mov	r2, r3
 800f9b0:	460b      	mov	r3, r1
 800f9b2:	72fb      	strb	r3, [r7, #11]
 800f9b4:	4613      	mov	r3, r2
 800f9b6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800f9b8:	893b      	ldrh	r3, [r7, #8]
 800f9ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f9be:	d802      	bhi.n	800f9c6 <USBH_Get_StringDesc+0x22>
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d101      	bne.n	800f9ca <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800f9c6:	2303      	movs	r3, #3
 800f9c8:	e01c      	b.n	800fa04 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800f9ca:	7afb      	ldrb	r3, [r7, #11]
 800f9cc:	b29b      	uxth	r3, r3
 800f9ce:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800f9d2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800f9da:	893b      	ldrh	r3, [r7, #8]
 800f9dc:	9300      	str	r3, [sp, #0]
 800f9de:	460b      	mov	r3, r1
 800f9e0:	2100      	movs	r1, #0
 800f9e2:	68f8      	ldr	r0, [r7, #12]
 800f9e4:	f000 f812 	bl	800fa0c <USBH_GetDescriptor>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800f9ec:	7dfb      	ldrb	r3, [r7, #23]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d107      	bne.n	800fa02 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800f9f2:	68fb      	ldr	r3, [r7, #12]
 800f9f4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800f9f8:	893a      	ldrh	r2, [r7, #8]
 800f9fa:	6879      	ldr	r1, [r7, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f000 fb8d 	bl	801011c <USBH_ParseStringDesc>
  }

  return status;
 800fa02:	7dfb      	ldrb	r3, [r7, #23]
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3718      	adds	r7, #24
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}

0800fa0c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800fa0c:	b580      	push	{r7, lr}
 800fa0e:	b084      	sub	sp, #16
 800fa10:	af00      	add	r7, sp, #0
 800fa12:	60f8      	str	r0, [r7, #12]
 800fa14:	607b      	str	r3, [r7, #4]
 800fa16:	460b      	mov	r3, r1
 800fa18:	72fb      	strb	r3, [r7, #11]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	789b      	ldrb	r3, [r3, #2]
 800fa22:	2b01      	cmp	r3, #1
 800fa24:	d11c      	bne.n	800fa60 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800fa26:	7afb      	ldrb	r3, [r7, #11]
 800fa28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800fa2c:	b2da      	uxtb	r2, r3
 800fa2e:	68fb      	ldr	r3, [r7, #12]
 800fa30:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	2206      	movs	r2, #6
 800fa36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	893a      	ldrh	r2, [r7, #8]
 800fa3c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800fa3e:	893b      	ldrh	r3, [r7, #8]
 800fa40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800fa44:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800fa48:	d104      	bne.n	800fa54 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	f240 4209 	movw	r2, #1033	@ 0x409
 800fa50:	829a      	strh	r2, [r3, #20]
 800fa52:	e002      	b.n	800fa5a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	2200      	movs	r2, #0
 800fa58:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800fa5a:	68fb      	ldr	r3, [r7, #12]
 800fa5c:	8b3a      	ldrh	r2, [r7, #24]
 800fa5e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800fa60:	8b3b      	ldrh	r3, [r7, #24]
 800fa62:	461a      	mov	r2, r3
 800fa64:	6879      	ldr	r1, [r7, #4]
 800fa66:	68f8      	ldr	r0, [r7, #12]
 800fa68:	f000 fba5 	bl	80101b6 <USBH_CtlReq>
 800fa6c:	4603      	mov	r3, r0
}
 800fa6e:	4618      	mov	r0, r3
 800fa70:	3710      	adds	r7, #16
 800fa72:	46bd      	mov	sp, r7
 800fa74:	bd80      	pop	{r7, pc}

0800fa76 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800fa76:	b580      	push	{r7, lr}
 800fa78:	b082      	sub	sp, #8
 800fa7a:	af00      	add	r7, sp, #0
 800fa7c:	6078      	str	r0, [r7, #4]
 800fa7e:	460b      	mov	r3, r1
 800fa80:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	789b      	ldrb	r3, [r3, #2]
 800fa86:	2b01      	cmp	r3, #1
 800fa88:	d10f      	bne.n	800faaa <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2200      	movs	r2, #0
 800fa8e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2205      	movs	r2, #5
 800fa94:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800fa96:	78fb      	ldrb	r3, [r7, #3]
 800fa98:	b29a      	uxth	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	2200      	movs	r2, #0
 800faa2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800faaa:	2200      	movs	r2, #0
 800faac:	2100      	movs	r1, #0
 800faae:	6878      	ldr	r0, [r7, #4]
 800fab0:	f000 fb81 	bl	80101b6 <USBH_CtlReq>
 800fab4:	4603      	mov	r3, r0
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b082      	sub	sp, #8
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
 800fac6:	460b      	mov	r3, r1
 800fac8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	789b      	ldrb	r3, [r3, #2]
 800face:	2b01      	cmp	r3, #1
 800fad0:	d10e      	bne.n	800faf0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	2200      	movs	r2, #0
 800fad6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	2209      	movs	r2, #9
 800fadc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	887a      	ldrh	r2, [r7, #2]
 800fae2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	2200      	movs	r2, #0
 800faee:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800faf0:	2200      	movs	r2, #0
 800faf2:	2100      	movs	r1, #0
 800faf4:	6878      	ldr	r0, [r7, #4]
 800faf6:	f000 fb5e 	bl	80101b6 <USBH_CtlReq>
 800fafa:	4603      	mov	r3, r0
}
 800fafc:	4618      	mov	r0, r3
 800fafe:	3708      	adds	r7, #8
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd80      	pop	{r7, pc}

0800fb04 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800fb04:	b580      	push	{r7, lr}
 800fb06:	b082      	sub	sp, #8
 800fb08:	af00      	add	r7, sp, #0
 800fb0a:	6078      	str	r0, [r7, #4]
 800fb0c:	460b      	mov	r3, r1
 800fb0e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	789b      	ldrb	r3, [r3, #2]
 800fb14:	2b01      	cmp	r3, #1
 800fb16:	d10f      	bne.n	800fb38 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	2200      	movs	r2, #0
 800fb1c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	2203      	movs	r2, #3
 800fb22:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800fb24:	78fb      	ldrb	r3, [r7, #3]
 800fb26:	b29a      	uxth	r2, r3
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2200      	movs	r2, #0
 800fb30:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2200      	movs	r2, #0
 800fb36:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fb38:	2200      	movs	r2, #0
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	6878      	ldr	r0, [r7, #4]
 800fb3e:	f000 fb3a 	bl	80101b6 <USBH_CtlReq>
 800fb42:	4603      	mov	r3, r0
}
 800fb44:	4618      	mov	r0, r3
 800fb46:	3708      	adds	r7, #8
 800fb48:	46bd      	mov	sp, r7
 800fb4a:	bd80      	pop	{r7, pc}

0800fb4c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b082      	sub	sp, #8
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
 800fb54:	460b      	mov	r3, r1
 800fb56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	789b      	ldrb	r3, [r3, #2]
 800fb5c:	2b01      	cmp	r3, #1
 800fb5e:	d10f      	bne.n	800fb80 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2202      	movs	r2, #2
 800fb64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	2200      	movs	r2, #0
 800fb70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800fb72:	78fb      	ldrb	r3, [r7, #3]
 800fb74:	b29a      	uxth	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	2200      	movs	r2, #0
 800fb7e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800fb80:	2200      	movs	r2, #0
 800fb82:	2100      	movs	r1, #0
 800fb84:	6878      	ldr	r0, [r7, #4]
 800fb86:	f000 fb16 	bl	80101b6 <USBH_CtlReq>
 800fb8a:	4603      	mov	r3, r0
}
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	3708      	adds	r7, #8
 800fb90:	46bd      	mov	sp, r7
 800fb92:	bd80      	pop	{r7, pc}

0800fb94 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fb94:	b480      	push	{r7}
 800fb96:	b087      	sub	sp, #28
 800fb98:	af00      	add	r7, sp, #0
 800fb9a:	60f8      	str	r0, [r7, #12]
 800fb9c:	60b9      	str	r1, [r7, #8]
 800fb9e:	4613      	mov	r3, r2
 800fba0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800fba8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800fbaa:	2300      	movs	r3, #0
 800fbac:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800fbae:	68bb      	ldr	r3, [r7, #8]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d101      	bne.n	800fbb8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800fbb4:	2302      	movs	r3, #2
 800fbb6:	e094      	b.n	800fce2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800fbb8:	68bb      	ldr	r3, [r7, #8]
 800fbba:	781a      	ldrb	r2, [r3, #0]
 800fbbc:	693b      	ldr	r3, [r7, #16]
 800fbbe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800fbc0:	68bb      	ldr	r3, [r7, #8]
 800fbc2:	785a      	ldrb	r2, [r3, #1]
 800fbc4:	693b      	ldr	r3, [r7, #16]
 800fbc6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800fbc8:	68bb      	ldr	r3, [r7, #8]
 800fbca:	3302      	adds	r3, #2
 800fbcc:	781b      	ldrb	r3, [r3, #0]
 800fbce:	461a      	mov	r2, r3
 800fbd0:	68bb      	ldr	r3, [r7, #8]
 800fbd2:	3303      	adds	r3, #3
 800fbd4:	781b      	ldrb	r3, [r3, #0]
 800fbd6:	021b      	lsls	r3, r3, #8
 800fbd8:	b29b      	uxth	r3, r3
 800fbda:	4313      	orrs	r3, r2
 800fbdc:	b29a      	uxth	r2, r3
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800fbe2:	68bb      	ldr	r3, [r7, #8]
 800fbe4:	791a      	ldrb	r2, [r3, #4]
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	795a      	ldrb	r2, [r3, #5]
 800fbee:	693b      	ldr	r3, [r7, #16]
 800fbf0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	799a      	ldrb	r2, [r3, #6]
 800fbf6:	693b      	ldr	r3, [r7, #16]
 800fbf8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	79da      	ldrb	r2, [r3, #7]
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d004      	beq.n	800fc16 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800fc0c:	68fb      	ldr	r3, [r7, #12]
 800fc0e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800fc12:	2b01      	cmp	r3, #1
 800fc14:	d11b      	bne.n	800fc4e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	79db      	ldrb	r3, [r3, #7]
 800fc1a:	2b20      	cmp	r3, #32
 800fc1c:	dc0f      	bgt.n	800fc3e <USBH_ParseDevDesc+0xaa>
 800fc1e:	2b08      	cmp	r3, #8
 800fc20:	db0f      	blt.n	800fc42 <USBH_ParseDevDesc+0xae>
 800fc22:	3b08      	subs	r3, #8
 800fc24:	4a32      	ldr	r2, [pc, #200]	@ (800fcf0 <USBH_ParseDevDesc+0x15c>)
 800fc26:	fa22 f303 	lsr.w	r3, r2, r3
 800fc2a:	f003 0301 	and.w	r3, r3, #1
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	bf14      	ite	ne
 800fc32:	2301      	movne	r3, #1
 800fc34:	2300      	moveq	r3, #0
 800fc36:	b2db      	uxtb	r3, r3
 800fc38:	2b00      	cmp	r3, #0
 800fc3a:	d106      	bne.n	800fc4a <USBH_ParseDevDesc+0xb6>
 800fc3c:	e001      	b.n	800fc42 <USBH_ParseDevDesc+0xae>
 800fc3e:	2b40      	cmp	r3, #64	@ 0x40
 800fc40:	d003      	beq.n	800fc4a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	2208      	movs	r2, #8
 800fc46:	71da      	strb	r2, [r3, #7]
        break;
 800fc48:	e000      	b.n	800fc4c <USBH_ParseDevDesc+0xb8>
        break;
 800fc4a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800fc4c:	e00e      	b.n	800fc6c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800fc4e:	68fb      	ldr	r3, [r7, #12]
 800fc50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800fc54:	2b02      	cmp	r3, #2
 800fc56:	d107      	bne.n	800fc68 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800fc58:	693b      	ldr	r3, [r7, #16]
 800fc5a:	79db      	ldrb	r3, [r3, #7]
 800fc5c:	2b08      	cmp	r3, #8
 800fc5e:	d005      	beq.n	800fc6c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800fc60:	693b      	ldr	r3, [r7, #16]
 800fc62:	2208      	movs	r2, #8
 800fc64:	71da      	strb	r2, [r3, #7]
 800fc66:	e001      	b.n	800fc6c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800fc68:	2303      	movs	r3, #3
 800fc6a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800fc6c:	88fb      	ldrh	r3, [r7, #6]
 800fc6e:	2b08      	cmp	r3, #8
 800fc70:	d936      	bls.n	800fce0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	3308      	adds	r3, #8
 800fc76:	781b      	ldrb	r3, [r3, #0]
 800fc78:	461a      	mov	r2, r3
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	3309      	adds	r3, #9
 800fc7e:	781b      	ldrb	r3, [r3, #0]
 800fc80:	021b      	lsls	r3, r3, #8
 800fc82:	b29b      	uxth	r3, r3
 800fc84:	4313      	orrs	r3, r2
 800fc86:	b29a      	uxth	r2, r3
 800fc88:	693b      	ldr	r3, [r7, #16]
 800fc8a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	330a      	adds	r3, #10
 800fc90:	781b      	ldrb	r3, [r3, #0]
 800fc92:	461a      	mov	r2, r3
 800fc94:	68bb      	ldr	r3, [r7, #8]
 800fc96:	330b      	adds	r3, #11
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	021b      	lsls	r3, r3, #8
 800fc9c:	b29b      	uxth	r3, r3
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	330c      	adds	r3, #12
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	461a      	mov	r2, r3
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	330d      	adds	r3, #13
 800fcb2:	781b      	ldrb	r3, [r3, #0]
 800fcb4:	021b      	lsls	r3, r3, #8
 800fcb6:	b29b      	uxth	r3, r3
 800fcb8:	4313      	orrs	r3, r2
 800fcba:	b29a      	uxth	r2, r3
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800fcc0:	68bb      	ldr	r3, [r7, #8]
 800fcc2:	7b9a      	ldrb	r2, [r3, #14]
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800fcc8:	68bb      	ldr	r3, [r7, #8]
 800fcca:	7bda      	ldrb	r2, [r3, #15]
 800fccc:	693b      	ldr	r3, [r7, #16]
 800fcce:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800fcd0:	68bb      	ldr	r3, [r7, #8]
 800fcd2:	7c1a      	ldrb	r2, [r3, #16]
 800fcd4:	693b      	ldr	r3, [r7, #16]
 800fcd6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800fcd8:	68bb      	ldr	r3, [r7, #8]
 800fcda:	7c5a      	ldrb	r2, [r3, #17]
 800fcdc:	693b      	ldr	r3, [r7, #16]
 800fcde:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800fce0:	7dfb      	ldrb	r3, [r7, #23]
}
 800fce2:	4618      	mov	r0, r3
 800fce4:	371c      	adds	r7, #28
 800fce6:	46bd      	mov	sp, r7
 800fce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcec:	4770      	bx	lr
 800fcee:	bf00      	nop
 800fcf0:	01000101 	.word	0x01000101

0800fcf4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b08c      	sub	sp, #48	@ 0x30
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	60f8      	str	r0, [r7, #12]
 800fcfc:	60b9      	str	r1, [r7, #8]
 800fcfe:	4613      	mov	r3, r2
 800fd00:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800fd08:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800fd10:	2300      	movs	r3, #0
 800fd12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800fd16:	2300      	movs	r3, #0
 800fd18:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800fd1c:	68bb      	ldr	r3, [r7, #8]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d101      	bne.n	800fd26 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800fd22:	2302      	movs	r3, #2
 800fd24:	e0da      	b.n	800fedc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800fd26:	68bb      	ldr	r3, [r7, #8]
 800fd28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800fd2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd2c:	781b      	ldrb	r3, [r3, #0]
 800fd2e:	2b09      	cmp	r3, #9
 800fd30:	d002      	beq.n	800fd38 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800fd32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd34:	2209      	movs	r2, #9
 800fd36:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800fd38:	68bb      	ldr	r3, [r7, #8]
 800fd3a:	781a      	ldrb	r2, [r3, #0]
 800fd3c:	6a3b      	ldr	r3, [r7, #32]
 800fd3e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800fd40:	68bb      	ldr	r3, [r7, #8]
 800fd42:	785a      	ldrb	r2, [r3, #1]
 800fd44:	6a3b      	ldr	r3, [r7, #32]
 800fd46:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	3302      	adds	r3, #2
 800fd4c:	781b      	ldrb	r3, [r3, #0]
 800fd4e:	461a      	mov	r2, r3
 800fd50:	68bb      	ldr	r3, [r7, #8]
 800fd52:	3303      	adds	r3, #3
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	021b      	lsls	r3, r3, #8
 800fd58:	b29b      	uxth	r3, r3
 800fd5a:	4313      	orrs	r3, r2
 800fd5c:	b29b      	uxth	r3, r3
 800fd5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fd62:	bf28      	it	cs
 800fd64:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800fd68:	b29a      	uxth	r2, r3
 800fd6a:	6a3b      	ldr	r3, [r7, #32]
 800fd6c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800fd6e:	68bb      	ldr	r3, [r7, #8]
 800fd70:	791a      	ldrb	r2, [r3, #4]
 800fd72:	6a3b      	ldr	r3, [r7, #32]
 800fd74:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800fd76:	68bb      	ldr	r3, [r7, #8]
 800fd78:	795a      	ldrb	r2, [r3, #5]
 800fd7a:	6a3b      	ldr	r3, [r7, #32]
 800fd7c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	799a      	ldrb	r2, [r3, #6]
 800fd82:	6a3b      	ldr	r3, [r7, #32]
 800fd84:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800fd86:	68bb      	ldr	r3, [r7, #8]
 800fd88:	79da      	ldrb	r2, [r3, #7]
 800fd8a:	6a3b      	ldr	r3, [r7, #32]
 800fd8c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800fd8e:	68bb      	ldr	r3, [r7, #8]
 800fd90:	7a1a      	ldrb	r2, [r3, #8]
 800fd92:	6a3b      	ldr	r3, [r7, #32]
 800fd94:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800fd96:	88fb      	ldrh	r3, [r7, #6]
 800fd98:	2b09      	cmp	r3, #9
 800fd9a:	f240 809d 	bls.w	800fed8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800fd9e:	2309      	movs	r3, #9
 800fda0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fda2:	2300      	movs	r3, #0
 800fda4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800fda6:	e081      	b.n	800feac <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fda8:	f107 0316 	add.w	r3, r7, #22
 800fdac:	4619      	mov	r1, r3
 800fdae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdb0:	f000 f9e7 	bl	8010182 <USBH_GetNextDesc>
 800fdb4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800fdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdb8:	785b      	ldrb	r3, [r3, #1]
 800fdba:	2b04      	cmp	r3, #4
 800fdbc:	d176      	bne.n	800feac <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800fdbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	2b09      	cmp	r3, #9
 800fdc4:	d002      	beq.n	800fdcc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800fdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fdc8:	2209      	movs	r2, #9
 800fdca:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800fdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fdd0:	221a      	movs	r2, #26
 800fdd2:	fb02 f303 	mul.w	r3, r2, r3
 800fdd6:	3308      	adds	r3, #8
 800fdd8:	6a3a      	ldr	r2, [r7, #32]
 800fdda:	4413      	add	r3, r2
 800fddc:	3302      	adds	r3, #2
 800fdde:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800fde0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800fde2:	69f8      	ldr	r0, [r7, #28]
 800fde4:	f000 f87e 	bl	800fee4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800fde8:	2300      	movs	r3, #0
 800fdea:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800fdee:	2300      	movs	r3, #0
 800fdf0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fdf2:	e043      	b.n	800fe7c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800fdf4:	f107 0316 	add.w	r3, r7, #22
 800fdf8:	4619      	mov	r1, r3
 800fdfa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800fdfc:	f000 f9c1 	bl	8010182 <USBH_GetNextDesc>
 800fe00:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800fe02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe04:	785b      	ldrb	r3, [r3, #1]
 800fe06:	2b05      	cmp	r3, #5
 800fe08:	d138      	bne.n	800fe7c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800fe0a:	69fb      	ldr	r3, [r7, #28]
 800fe0c:	795b      	ldrb	r3, [r3, #5]
 800fe0e:	2b01      	cmp	r3, #1
 800fe10:	d113      	bne.n	800fe3a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800fe12:	69fb      	ldr	r3, [r7, #28]
 800fe14:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800fe16:	2b02      	cmp	r3, #2
 800fe18:	d003      	beq.n	800fe22 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800fe1a:	69fb      	ldr	r3, [r7, #28]
 800fe1c:	799b      	ldrb	r3, [r3, #6]
 800fe1e:	2b03      	cmp	r3, #3
 800fe20:	d10b      	bne.n	800fe3a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800fe22:	69fb      	ldr	r3, [r7, #28]
 800fe24:	79db      	ldrb	r3, [r3, #7]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d10b      	bne.n	800fe42 <USBH_ParseCfgDesc+0x14e>
 800fe2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe2c:	781b      	ldrb	r3, [r3, #0]
 800fe2e:	2b09      	cmp	r3, #9
 800fe30:	d007      	beq.n	800fe42 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800fe32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe34:	2209      	movs	r2, #9
 800fe36:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800fe38:	e003      	b.n	800fe42 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800fe3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fe3c:	2207      	movs	r2, #7
 800fe3e:	701a      	strb	r2, [r3, #0]
 800fe40:	e000      	b.n	800fe44 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800fe42:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800fe44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fe48:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fe4c:	3201      	adds	r2, #1
 800fe4e:	00d2      	lsls	r2, r2, #3
 800fe50:	211a      	movs	r1, #26
 800fe52:	fb01 f303 	mul.w	r3, r1, r3
 800fe56:	4413      	add	r3, r2
 800fe58:	3308      	adds	r3, #8
 800fe5a:	6a3a      	ldr	r2, [r7, #32]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	3304      	adds	r3, #4
 800fe60:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800fe62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800fe64:	69b9      	ldr	r1, [r7, #24]
 800fe66:	68f8      	ldr	r0, [r7, #12]
 800fe68:	f000 f870 	bl	800ff4c <USBH_ParseEPDesc>
 800fe6c:	4603      	mov	r3, r0
 800fe6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800fe72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800fe76:	3301      	adds	r3, #1
 800fe78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	791b      	ldrb	r3, [r3, #4]
 800fe80:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fe84:	429a      	cmp	r2, r3
 800fe86:	d204      	bcs.n	800fe92 <USBH_ParseCfgDesc+0x19e>
 800fe88:	6a3b      	ldr	r3, [r7, #32]
 800fe8a:	885a      	ldrh	r2, [r3, #2]
 800fe8c:	8afb      	ldrh	r3, [r7, #22]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d8b0      	bhi.n	800fdf4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800fe92:	69fb      	ldr	r3, [r7, #28]
 800fe94:	791b      	ldrb	r3, [r3, #4]
 800fe96:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800fe9a:	429a      	cmp	r2, r3
 800fe9c:	d201      	bcs.n	800fea2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800fe9e:	2303      	movs	r3, #3
 800fea0:	e01c      	b.n	800fedc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800fea2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800fea6:	3301      	adds	r3, #1
 800fea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800feac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800feb0:	2b01      	cmp	r3, #1
 800feb2:	d805      	bhi.n	800fec0 <USBH_ParseCfgDesc+0x1cc>
 800feb4:	6a3b      	ldr	r3, [r7, #32]
 800feb6:	885a      	ldrh	r2, [r3, #2]
 800feb8:	8afb      	ldrh	r3, [r7, #22]
 800feba:	429a      	cmp	r2, r3
 800febc:	f63f af74 	bhi.w	800fda8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800fec0:	6a3b      	ldr	r3, [r7, #32]
 800fec2:	791b      	ldrb	r3, [r3, #4]
 800fec4:	2b02      	cmp	r3, #2
 800fec6:	bf28      	it	cs
 800fec8:	2302      	movcs	r3, #2
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800fed0:	429a      	cmp	r2, r3
 800fed2:	d201      	bcs.n	800fed8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800fed4:	2303      	movs	r3, #3
 800fed6:	e001      	b.n	800fedc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800fed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fedc:	4618      	mov	r0, r3
 800fede:	3730      	adds	r7, #48	@ 0x30
 800fee0:	46bd      	mov	sp, r7
 800fee2:	bd80      	pop	{r7, pc}

0800fee4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800fee4:	b480      	push	{r7}
 800fee6:	b083      	sub	sp, #12
 800fee8:	af00      	add	r7, sp, #0
 800feea:	6078      	str	r0, [r7, #4]
 800feec:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800feee:	683b      	ldr	r3, [r7, #0]
 800fef0:	781a      	ldrb	r2, [r3, #0]
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	785a      	ldrb	r2, [r3, #1]
 800fefa:	687b      	ldr	r3, [r7, #4]
 800fefc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800fefe:	683b      	ldr	r3, [r7, #0]
 800ff00:	789a      	ldrb	r2, [r3, #2]
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ff06:	683b      	ldr	r3, [r7, #0]
 800ff08:	78da      	ldrb	r2, [r3, #3]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	3304      	adds	r3, #4
 800ff12:	781b      	ldrb	r3, [r3, #0]
 800ff14:	2b02      	cmp	r3, #2
 800ff16:	bf28      	it	cs
 800ff18:	2302      	movcs	r3, #2
 800ff1a:	b2da      	uxtb	r2, r3
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ff20:	683b      	ldr	r3, [r7, #0]
 800ff22:	795a      	ldrb	r2, [r3, #5]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ff28:	683b      	ldr	r3, [r7, #0]
 800ff2a:	799a      	ldrb	r2, [r3, #6]
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ff30:	683b      	ldr	r3, [r7, #0]
 800ff32:	79da      	ldrb	r2, [r3, #7]
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ff38:	683b      	ldr	r3, [r7, #0]
 800ff3a:	7a1a      	ldrb	r2, [r3, #8]
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	721a      	strb	r2, [r3, #8]
}
 800ff40:	bf00      	nop
 800ff42:	370c      	adds	r7, #12
 800ff44:	46bd      	mov	sp, r7
 800ff46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff4a:	4770      	bx	lr

0800ff4c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b087      	sub	sp, #28
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	60f8      	str	r0, [r7, #12]
 800ff54:	60b9      	str	r1, [r7, #8]
 800ff56:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	781a      	ldrb	r2, [r3, #0]
 800ff60:	68bb      	ldr	r3, [r7, #8]
 800ff62:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	785a      	ldrb	r2, [r3, #1]
 800ff68:	68bb      	ldr	r3, [r7, #8]
 800ff6a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	789a      	ldrb	r2, [r3, #2]
 800ff70:	68bb      	ldr	r3, [r7, #8]
 800ff72:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	78da      	ldrb	r2, [r3, #3]
 800ff78:	68bb      	ldr	r3, [r7, #8]
 800ff7a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	3304      	adds	r3, #4
 800ff80:	781b      	ldrb	r3, [r3, #0]
 800ff82:	461a      	mov	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	3305      	adds	r3, #5
 800ff88:	781b      	ldrb	r3, [r3, #0]
 800ff8a:	021b      	lsls	r3, r3, #8
 800ff8c:	b29b      	uxth	r3, r3
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	68bb      	ldr	r3, [r7, #8]
 800ff94:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	799a      	ldrb	r2, [r3, #6]
 800ff9a:	68bb      	ldr	r3, [r7, #8]
 800ff9c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ff9e:	68bb      	ldr	r3, [r7, #8]
 800ffa0:	889b      	ldrh	r3, [r3, #4]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d009      	beq.n	800ffba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ffa6:	68bb      	ldr	r3, [r7, #8]
 800ffa8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ffaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ffae:	d804      	bhi.n	800ffba <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ffb0:	68bb      	ldr	r3, [r7, #8]
 800ffb2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ffb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffb8:	d901      	bls.n	800ffbe <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ffba:	2303      	movs	r3, #3
 800ffbc:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d136      	bne.n	8010036 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ffc8:	68bb      	ldr	r3, [r7, #8]
 800ffca:	78db      	ldrb	r3, [r3, #3]
 800ffcc:	f003 0303 	and.w	r3, r3, #3
 800ffd0:	2b02      	cmp	r3, #2
 800ffd2:	d108      	bne.n	800ffe6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ffd4:	68bb      	ldr	r3, [r7, #8]
 800ffd6:	889b      	ldrh	r3, [r3, #4]
 800ffd8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ffdc:	f240 8097 	bls.w	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ffe0:	2303      	movs	r3, #3
 800ffe2:	75fb      	strb	r3, [r7, #23]
 800ffe4:	e093      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	78db      	ldrb	r3, [r3, #3]
 800ffea:	f003 0303 	and.w	r3, r3, #3
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d107      	bne.n	8010002 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	889b      	ldrh	r3, [r3, #4]
 800fff6:	2b40      	cmp	r3, #64	@ 0x40
 800fff8:	f240 8089 	bls.w	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800fffc:	2303      	movs	r3, #3
 800fffe:	75fb      	strb	r3, [r7, #23]
 8010000:	e085      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010002:	68bb      	ldr	r3, [r7, #8]
 8010004:	78db      	ldrb	r3, [r3, #3]
 8010006:	f003 0303 	and.w	r3, r3, #3
 801000a:	2b01      	cmp	r3, #1
 801000c:	d005      	beq.n	801001a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	78db      	ldrb	r3, [r3, #3]
 8010012:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010016:	2b03      	cmp	r3, #3
 8010018:	d10a      	bne.n	8010030 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801001a:	68bb      	ldr	r3, [r7, #8]
 801001c:	799b      	ldrb	r3, [r3, #6]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d003      	beq.n	801002a <USBH_ParseEPDesc+0xde>
 8010022:	68bb      	ldr	r3, [r7, #8]
 8010024:	799b      	ldrb	r3, [r3, #6]
 8010026:	2b10      	cmp	r3, #16
 8010028:	d970      	bls.n	801010c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 801002a:	2303      	movs	r3, #3
 801002c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801002e:	e06d      	b.n	801010c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010030:	2303      	movs	r3, #3
 8010032:	75fb      	strb	r3, [r7, #23]
 8010034:	e06b      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 801003c:	2b01      	cmp	r3, #1
 801003e:	d13c      	bne.n	80100ba <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010040:	68bb      	ldr	r3, [r7, #8]
 8010042:	78db      	ldrb	r3, [r3, #3]
 8010044:	f003 0303 	and.w	r3, r3, #3
 8010048:	2b02      	cmp	r3, #2
 801004a:	d005      	beq.n	8010058 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 801004c:	68bb      	ldr	r3, [r7, #8]
 801004e:	78db      	ldrb	r3, [r3, #3]
 8010050:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8010054:	2b00      	cmp	r3, #0
 8010056:	d106      	bne.n	8010066 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	889b      	ldrh	r3, [r3, #4]
 801005c:	2b40      	cmp	r3, #64	@ 0x40
 801005e:	d956      	bls.n	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8010060:	2303      	movs	r3, #3
 8010062:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8010064:	e053      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010066:	68bb      	ldr	r3, [r7, #8]
 8010068:	78db      	ldrb	r3, [r3, #3]
 801006a:	f003 0303 	and.w	r3, r3, #3
 801006e:	2b01      	cmp	r3, #1
 8010070:	d10e      	bne.n	8010090 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8010072:	68bb      	ldr	r3, [r7, #8]
 8010074:	799b      	ldrb	r3, [r3, #6]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d007      	beq.n	801008a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 801007a:	68bb      	ldr	r3, [r7, #8]
 801007c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 801007e:	2b10      	cmp	r3, #16
 8010080:	d803      	bhi.n	801008a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8010082:	68bb      	ldr	r3, [r7, #8]
 8010084:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8010086:	2b40      	cmp	r3, #64	@ 0x40
 8010088:	d941      	bls.n	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 801008a:	2303      	movs	r3, #3
 801008c:	75fb      	strb	r3, [r7, #23]
 801008e:	e03e      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	78db      	ldrb	r3, [r3, #3]
 8010094:	f003 0303 	and.w	r3, r3, #3
 8010098:	2b03      	cmp	r3, #3
 801009a:	d10b      	bne.n	80100b4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 801009c:	68bb      	ldr	r3, [r7, #8]
 801009e:	799b      	ldrb	r3, [r3, #6]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d004      	beq.n	80100ae <USBH_ParseEPDesc+0x162>
 80100a4:	68bb      	ldr	r3, [r7, #8]
 80100a6:	889b      	ldrh	r3, [r3, #4]
 80100a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80100ac:	d32f      	bcc.n	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80100ae:	2303      	movs	r3, #3
 80100b0:	75fb      	strb	r3, [r7, #23]
 80100b2:	e02c      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80100b4:	2303      	movs	r3, #3
 80100b6:	75fb      	strb	r3, [r7, #23]
 80100b8:	e029      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80100ba:	68fb      	ldr	r3, [r7, #12]
 80100bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80100c0:	2b02      	cmp	r3, #2
 80100c2:	d120      	bne.n	8010106 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80100c4:	68bb      	ldr	r3, [r7, #8]
 80100c6:	78db      	ldrb	r3, [r3, #3]
 80100c8:	f003 0303 	and.w	r3, r3, #3
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d106      	bne.n	80100de <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80100d0:	68bb      	ldr	r3, [r7, #8]
 80100d2:	889b      	ldrh	r3, [r3, #4]
 80100d4:	2b08      	cmp	r3, #8
 80100d6:	d01a      	beq.n	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80100d8:	2303      	movs	r3, #3
 80100da:	75fb      	strb	r3, [r7, #23]
 80100dc:	e017      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	78db      	ldrb	r3, [r3, #3]
 80100e2:	f003 0303 	and.w	r3, r3, #3
 80100e6:	2b03      	cmp	r3, #3
 80100e8:	d10a      	bne.n	8010100 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	799b      	ldrb	r3, [r3, #6]
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d003      	beq.n	80100fa <USBH_ParseEPDesc+0x1ae>
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	889b      	ldrh	r3, [r3, #4]
 80100f6:	2b08      	cmp	r3, #8
 80100f8:	d909      	bls.n	801010e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80100fa:	2303      	movs	r3, #3
 80100fc:	75fb      	strb	r3, [r7, #23]
 80100fe:	e006      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8010100:	2303      	movs	r3, #3
 8010102:	75fb      	strb	r3, [r7, #23]
 8010104:	e003      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8010106:	2303      	movs	r3, #3
 8010108:	75fb      	strb	r3, [r7, #23]
 801010a:	e000      	b.n	801010e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801010c:	bf00      	nop
  }

  return status;
 801010e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010110:	4618      	mov	r0, r3
 8010112:	371c      	adds	r7, #28
 8010114:	46bd      	mov	sp, r7
 8010116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011a:	4770      	bx	lr

0801011c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 801011c:	b480      	push	{r7}
 801011e:	b087      	sub	sp, #28
 8010120:	af00      	add	r7, sp, #0
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	4613      	mov	r3, r2
 8010128:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	3301      	adds	r3, #1
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2b03      	cmp	r3, #3
 8010132:	d120      	bne.n	8010176 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	781b      	ldrb	r3, [r3, #0]
 8010138:	1e9a      	subs	r2, r3, #2
 801013a:	88fb      	ldrh	r3, [r7, #6]
 801013c:	4293      	cmp	r3, r2
 801013e:	bf28      	it	cs
 8010140:	4613      	movcs	r3, r2
 8010142:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	3302      	adds	r3, #2
 8010148:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801014a:	2300      	movs	r3, #0
 801014c:	82fb      	strh	r3, [r7, #22]
 801014e:	e00b      	b.n	8010168 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010150:	8afb      	ldrh	r3, [r7, #22]
 8010152:	68fa      	ldr	r2, [r7, #12]
 8010154:	4413      	add	r3, r2
 8010156:	781a      	ldrb	r2, [r3, #0]
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	701a      	strb	r2, [r3, #0]
      pdest++;
 801015c:	68bb      	ldr	r3, [r7, #8]
 801015e:	3301      	adds	r3, #1
 8010160:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010162:	8afb      	ldrh	r3, [r7, #22]
 8010164:	3302      	adds	r3, #2
 8010166:	82fb      	strh	r3, [r7, #22]
 8010168:	8afa      	ldrh	r2, [r7, #22]
 801016a:	8abb      	ldrh	r3, [r7, #20]
 801016c:	429a      	cmp	r2, r3
 801016e:	d3ef      	bcc.n	8010150 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2200      	movs	r2, #0
 8010174:	701a      	strb	r2, [r3, #0]
  }
}
 8010176:	bf00      	nop
 8010178:	371c      	adds	r7, #28
 801017a:	46bd      	mov	sp, r7
 801017c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010180:	4770      	bx	lr

08010182 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010182:	b480      	push	{r7}
 8010184:	b085      	sub	sp, #20
 8010186:	af00      	add	r7, sp, #0
 8010188:	6078      	str	r0, [r7, #4]
 801018a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 801018c:	683b      	ldr	r3, [r7, #0]
 801018e:	881b      	ldrh	r3, [r3, #0]
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	7812      	ldrb	r2, [r2, #0]
 8010194:	4413      	add	r3, r2
 8010196:	b29a      	uxth	r2, r3
 8010198:	683b      	ldr	r3, [r7, #0]
 801019a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	781b      	ldrb	r3, [r3, #0]
 80101a0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	4413      	add	r3, r2
 80101a6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80101a8:	68fb      	ldr	r3, [r7, #12]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3714      	adds	r7, #20
 80101ae:	46bd      	mov	sp, r7
 80101b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b4:	4770      	bx	lr

080101b6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b086      	sub	sp, #24
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	60b9      	str	r1, [r7, #8]
 80101c0:	4613      	mov	r3, r2
 80101c2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80101c4:	2301      	movs	r3, #1
 80101c6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	789b      	ldrb	r3, [r3, #2]
 80101cc:	2b01      	cmp	r3, #1
 80101ce:	d002      	beq.n	80101d6 <USBH_CtlReq+0x20>
 80101d0:	2b02      	cmp	r3, #2
 80101d2:	d00f      	beq.n	80101f4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80101d4:	e027      	b.n	8010226 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80101d6:	68fb      	ldr	r3, [r7, #12]
 80101d8:	68ba      	ldr	r2, [r7, #8]
 80101da:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80101dc:	68fb      	ldr	r3, [r7, #12]
 80101de:	88fa      	ldrh	r2, [r7, #6]
 80101e0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80101e2:	68fb      	ldr	r3, [r7, #12]
 80101e4:	2201      	movs	r2, #1
 80101e6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	2202      	movs	r2, #2
 80101ec:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80101ee:	2301      	movs	r3, #1
 80101f0:	75fb      	strb	r3, [r7, #23]
      break;
 80101f2:	e018      	b.n	8010226 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80101f4:	68f8      	ldr	r0, [r7, #12]
 80101f6:	f000 f81b 	bl	8010230 <USBH_HandleControl>
 80101fa:	4603      	mov	r3, r0
 80101fc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80101fe:	7dfb      	ldrb	r3, [r7, #23]
 8010200:	2b00      	cmp	r3, #0
 8010202:	d002      	beq.n	801020a <USBH_CtlReq+0x54>
 8010204:	7dfb      	ldrb	r3, [r7, #23]
 8010206:	2b03      	cmp	r3, #3
 8010208:	d106      	bne.n	8010218 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2200      	movs	r2, #0
 8010214:	761a      	strb	r2, [r3, #24]
      break;
 8010216:	e005      	b.n	8010224 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010218:	7dfb      	ldrb	r3, [r7, #23]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d102      	bne.n	8010224 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	2201      	movs	r2, #1
 8010222:	709a      	strb	r2, [r3, #2]
      break;
 8010224:	bf00      	nop
  }
  return status;
 8010226:	7dfb      	ldrb	r3, [r7, #23]
}
 8010228:	4618      	mov	r0, r3
 801022a:	3718      	adds	r7, #24
 801022c:	46bd      	mov	sp, r7
 801022e:	bd80      	pop	{r7, pc}

08010230 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010230:	b580      	push	{r7, lr}
 8010232:	b086      	sub	sp, #24
 8010234:	af02      	add	r7, sp, #8
 8010236:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010238:	2301      	movs	r3, #1
 801023a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 801023c:	2300      	movs	r3, #0
 801023e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	7e1b      	ldrb	r3, [r3, #24]
 8010244:	3b01      	subs	r3, #1
 8010246:	2b0a      	cmp	r3, #10
 8010248:	f200 8156 	bhi.w	80104f8 <USBH_HandleControl+0x2c8>
 801024c:	a201      	add	r2, pc, #4	@ (adr r2, 8010254 <USBH_HandleControl+0x24>)
 801024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010252:	bf00      	nop
 8010254:	08010281 	.word	0x08010281
 8010258:	0801029b 	.word	0x0801029b
 801025c:	08010305 	.word	0x08010305
 8010260:	0801032b 	.word	0x0801032b
 8010264:	08010363 	.word	0x08010363
 8010268:	0801038d 	.word	0x0801038d
 801026c:	080103df 	.word	0x080103df
 8010270:	08010401 	.word	0x08010401
 8010274:	0801043d 	.word	0x0801043d
 8010278:	08010463 	.word	0x08010463
 801027c:	080104a1 	.word	0x080104a1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	f103 0110 	add.w	r1, r3, #16
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	795b      	ldrb	r3, [r3, #5]
 801028a:	461a      	mov	r2, r3
 801028c:	6878      	ldr	r0, [r7, #4]
 801028e:	f000 f943 	bl	8010518 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	2202      	movs	r2, #2
 8010296:	761a      	strb	r2, [r3, #24]
      break;
 8010298:	e139      	b.n	801050e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	795b      	ldrb	r3, [r3, #5]
 801029e:	4619      	mov	r1, r3
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f000 fcc5 	bl	8010c30 <USBH_LL_GetURBState>
 80102a6:	4603      	mov	r3, r0
 80102a8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80102aa:	7bbb      	ldrb	r3, [r7, #14]
 80102ac:	2b01      	cmp	r3, #1
 80102ae:	d11e      	bne.n	80102ee <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	7c1b      	ldrb	r3, [r3, #16]
 80102b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80102b8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	8adb      	ldrh	r3, [r3, #22]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00a      	beq.n	80102d8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80102c2:	7b7b      	ldrb	r3, [r7, #13]
 80102c4:	2b80      	cmp	r3, #128	@ 0x80
 80102c6:	d103      	bne.n	80102d0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	2203      	movs	r2, #3
 80102cc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80102ce:	e115      	b.n	80104fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	2205      	movs	r2, #5
 80102d4:	761a      	strb	r2, [r3, #24]
      break;
 80102d6:	e111      	b.n	80104fc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80102d8:	7b7b      	ldrb	r3, [r7, #13]
 80102da:	2b80      	cmp	r3, #128	@ 0x80
 80102dc:	d103      	bne.n	80102e6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	2209      	movs	r2, #9
 80102e2:	761a      	strb	r2, [r3, #24]
      break;
 80102e4:	e10a      	b.n	80104fc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	2207      	movs	r2, #7
 80102ea:	761a      	strb	r2, [r3, #24]
      break;
 80102ec:	e106      	b.n	80104fc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80102ee:	7bbb      	ldrb	r3, [r7, #14]
 80102f0:	2b04      	cmp	r3, #4
 80102f2:	d003      	beq.n	80102fc <USBH_HandleControl+0xcc>
 80102f4:	7bbb      	ldrb	r3, [r7, #14]
 80102f6:	2b02      	cmp	r3, #2
 80102f8:	f040 8100 	bne.w	80104fc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	220b      	movs	r2, #11
 8010300:	761a      	strb	r2, [r3, #24]
      break;
 8010302:	e0fb      	b.n	80104fc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801030a:	b29a      	uxth	r2, r3
 801030c:	687b      	ldr	r3, [r7, #4]
 801030e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	6899      	ldr	r1, [r3, #8]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	899a      	ldrh	r2, [r3, #12]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	791b      	ldrb	r3, [r3, #4]
 801031c:	6878      	ldr	r0, [r7, #4]
 801031e:	f000 f93a 	bl	8010596 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	2204      	movs	r2, #4
 8010326:	761a      	strb	r2, [r3, #24]
      break;
 8010328:	e0f1      	b.n	801050e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	791b      	ldrb	r3, [r3, #4]
 801032e:	4619      	mov	r1, r3
 8010330:	6878      	ldr	r0, [r7, #4]
 8010332:	f000 fc7d 	bl	8010c30 <USBH_LL_GetURBState>
 8010336:	4603      	mov	r3, r0
 8010338:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 801033a:	7bbb      	ldrb	r3, [r7, #14]
 801033c:	2b01      	cmp	r3, #1
 801033e:	d102      	bne.n	8010346 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	2209      	movs	r2, #9
 8010344:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010346:	7bbb      	ldrb	r3, [r7, #14]
 8010348:	2b05      	cmp	r3, #5
 801034a:	d102      	bne.n	8010352 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 801034c:	2303      	movs	r3, #3
 801034e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010350:	e0d6      	b.n	8010500 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8010352:	7bbb      	ldrb	r3, [r7, #14]
 8010354:	2b04      	cmp	r3, #4
 8010356:	f040 80d3 	bne.w	8010500 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	220b      	movs	r2, #11
 801035e:	761a      	strb	r2, [r3, #24]
      break;
 8010360:	e0ce      	b.n	8010500 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6899      	ldr	r1, [r3, #8]
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	899a      	ldrh	r2, [r3, #12]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	795b      	ldrb	r3, [r3, #5]
 801036e:	2001      	movs	r0, #1
 8010370:	9000      	str	r0, [sp, #0]
 8010372:	6878      	ldr	r0, [r7, #4]
 8010374:	f000 f8ea 	bl	801054c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 801037e:	b29a      	uxth	r2, r3
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2206      	movs	r2, #6
 8010388:	761a      	strb	r2, [r3, #24]
      break;
 801038a:	e0c0      	b.n	801050e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	795b      	ldrb	r3, [r3, #5]
 8010390:	4619      	mov	r1, r3
 8010392:	6878      	ldr	r0, [r7, #4]
 8010394:	f000 fc4c 	bl	8010c30 <USBH_LL_GetURBState>
 8010398:	4603      	mov	r3, r0
 801039a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801039c:	7bbb      	ldrb	r3, [r7, #14]
 801039e:	2b01      	cmp	r3, #1
 80103a0:	d103      	bne.n	80103aa <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	2207      	movs	r2, #7
 80103a6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80103a8:	e0ac      	b.n	8010504 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80103aa:	7bbb      	ldrb	r3, [r7, #14]
 80103ac:	2b05      	cmp	r3, #5
 80103ae:	d105      	bne.n	80103bc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80103b0:	687b      	ldr	r3, [r7, #4]
 80103b2:	220c      	movs	r2, #12
 80103b4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80103b6:	2303      	movs	r3, #3
 80103b8:	73fb      	strb	r3, [r7, #15]
      break;
 80103ba:	e0a3      	b.n	8010504 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80103bc:	7bbb      	ldrb	r3, [r7, #14]
 80103be:	2b02      	cmp	r3, #2
 80103c0:	d103      	bne.n	80103ca <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	2205      	movs	r2, #5
 80103c6:	761a      	strb	r2, [r3, #24]
      break;
 80103c8:	e09c      	b.n	8010504 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80103ca:	7bbb      	ldrb	r3, [r7, #14]
 80103cc:	2b04      	cmp	r3, #4
 80103ce:	f040 8099 	bne.w	8010504 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	220b      	movs	r2, #11
 80103d6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80103d8:	2302      	movs	r3, #2
 80103da:	73fb      	strb	r3, [r7, #15]
      break;
 80103dc:	e092      	b.n	8010504 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	791b      	ldrb	r3, [r3, #4]
 80103e2:	2200      	movs	r2, #0
 80103e4:	2100      	movs	r1, #0
 80103e6:	6878      	ldr	r0, [r7, #4]
 80103e8:	f000 f8d5 	bl	8010596 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 80103f2:	b29a      	uxth	r2, r3
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	2208      	movs	r2, #8
 80103fc:	761a      	strb	r2, [r3, #24]

      break;
 80103fe:	e086      	b.n	801050e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	791b      	ldrb	r3, [r3, #4]
 8010404:	4619      	mov	r1, r3
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 fc12 	bl	8010c30 <USBH_LL_GetURBState>
 801040c:	4603      	mov	r3, r0
 801040e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010410:	7bbb      	ldrb	r3, [r7, #14]
 8010412:	2b01      	cmp	r3, #1
 8010414:	d105      	bne.n	8010422 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	220d      	movs	r2, #13
 801041a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 801041c:	2300      	movs	r3, #0
 801041e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010420:	e072      	b.n	8010508 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8010422:	7bbb      	ldrb	r3, [r7, #14]
 8010424:	2b04      	cmp	r3, #4
 8010426:	d103      	bne.n	8010430 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	220b      	movs	r2, #11
 801042c:	761a      	strb	r2, [r3, #24]
      break;
 801042e:	e06b      	b.n	8010508 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010430:	7bbb      	ldrb	r3, [r7, #14]
 8010432:	2b05      	cmp	r3, #5
 8010434:	d168      	bne.n	8010508 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010436:	2303      	movs	r3, #3
 8010438:	73fb      	strb	r3, [r7, #15]
      break;
 801043a:	e065      	b.n	8010508 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	795b      	ldrb	r3, [r3, #5]
 8010440:	2201      	movs	r2, #1
 8010442:	9200      	str	r2, [sp, #0]
 8010444:	2200      	movs	r2, #0
 8010446:	2100      	movs	r1, #0
 8010448:	6878      	ldr	r0, [r7, #4]
 801044a:	f000 f87f 	bl	801054c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8010454:	b29a      	uxth	r2, r3
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	220a      	movs	r2, #10
 801045e:	761a      	strb	r2, [r3, #24]
      break;
 8010460:	e055      	b.n	801050e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	795b      	ldrb	r3, [r3, #5]
 8010466:	4619      	mov	r1, r3
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f000 fbe1 	bl	8010c30 <USBH_LL_GetURBState>
 801046e:	4603      	mov	r3, r0
 8010470:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010472:	7bbb      	ldrb	r3, [r7, #14]
 8010474:	2b01      	cmp	r3, #1
 8010476:	d105      	bne.n	8010484 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010478:	2300      	movs	r3, #0
 801047a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	220d      	movs	r2, #13
 8010480:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010482:	e043      	b.n	801050c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010484:	7bbb      	ldrb	r3, [r7, #14]
 8010486:	2b02      	cmp	r3, #2
 8010488:	d103      	bne.n	8010492 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	2209      	movs	r2, #9
 801048e:	761a      	strb	r2, [r3, #24]
      break;
 8010490:	e03c      	b.n	801050c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8010492:	7bbb      	ldrb	r3, [r7, #14]
 8010494:	2b04      	cmp	r3, #4
 8010496:	d139      	bne.n	801050c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	220b      	movs	r2, #11
 801049c:	761a      	strb	r2, [r3, #24]
      break;
 801049e:	e035      	b.n	801050c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	7e5b      	ldrb	r3, [r3, #25]
 80104a4:	3301      	adds	r3, #1
 80104a6:	b2da      	uxtb	r2, r3
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	765a      	strb	r2, [r3, #25]
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	7e5b      	ldrb	r3, [r3, #25]
 80104b0:	2b02      	cmp	r3, #2
 80104b2:	d806      	bhi.n	80104c2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	2201      	movs	r2, #1
 80104b8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	2201      	movs	r2, #1
 80104be:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80104c0:	e025      	b.n	801050e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80104c8:	2106      	movs	r1, #6
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80104ce:	687b      	ldr	r3, [r7, #4]
 80104d0:	2200      	movs	r2, #0
 80104d2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	795b      	ldrb	r3, [r3, #5]
 80104d8:	4619      	mov	r1, r3
 80104da:	6878      	ldr	r0, [r7, #4]
 80104dc:	f000 f90c 	bl	80106f8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	791b      	ldrb	r3, [r3, #4]
 80104e4:	4619      	mov	r1, r3
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f000 f906 	bl	80106f8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	2200      	movs	r2, #0
 80104f0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80104f2:	2302      	movs	r3, #2
 80104f4:	73fb      	strb	r3, [r7, #15]
      break;
 80104f6:	e00a      	b.n	801050e <USBH_HandleControl+0x2de>

    default:
      break;
 80104f8:	bf00      	nop
 80104fa:	e008      	b.n	801050e <USBH_HandleControl+0x2de>
      break;
 80104fc:	bf00      	nop
 80104fe:	e006      	b.n	801050e <USBH_HandleControl+0x2de>
      break;
 8010500:	bf00      	nop
 8010502:	e004      	b.n	801050e <USBH_HandleControl+0x2de>
      break;
 8010504:	bf00      	nop
 8010506:	e002      	b.n	801050e <USBH_HandleControl+0x2de>
      break;
 8010508:	bf00      	nop
 801050a:	e000      	b.n	801050e <USBH_HandleControl+0x2de>
      break;
 801050c:	bf00      	nop
  }

  return status;
 801050e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010510:	4618      	mov	r0, r3
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b088      	sub	sp, #32
 801051c:	af04      	add	r7, sp, #16
 801051e:	60f8      	str	r0, [r7, #12]
 8010520:	60b9      	str	r1, [r7, #8]
 8010522:	4613      	mov	r3, r2
 8010524:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010526:	79f9      	ldrb	r1, [r7, #7]
 8010528:	2300      	movs	r3, #0
 801052a:	9303      	str	r3, [sp, #12]
 801052c:	2308      	movs	r3, #8
 801052e:	9302      	str	r3, [sp, #8]
 8010530:	68bb      	ldr	r3, [r7, #8]
 8010532:	9301      	str	r3, [sp, #4]
 8010534:	2300      	movs	r3, #0
 8010536:	9300      	str	r3, [sp, #0]
 8010538:	2300      	movs	r3, #0
 801053a:	2200      	movs	r2, #0
 801053c:	68f8      	ldr	r0, [r7, #12]
 801053e:	f000 fb46 	bl	8010bce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010542:	2300      	movs	r3, #0
}
 8010544:	4618      	mov	r0, r3
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}

0801054c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 801054c:	b580      	push	{r7, lr}
 801054e:	b088      	sub	sp, #32
 8010550:	af04      	add	r7, sp, #16
 8010552:	60f8      	str	r0, [r7, #12]
 8010554:	60b9      	str	r1, [r7, #8]
 8010556:	4611      	mov	r1, r2
 8010558:	461a      	mov	r2, r3
 801055a:	460b      	mov	r3, r1
 801055c:	80fb      	strh	r3, [r7, #6]
 801055e:	4613      	mov	r3, r2
 8010560:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8010568:	2b00      	cmp	r3, #0
 801056a:	d001      	beq.n	8010570 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 801056c:	2300      	movs	r3, #0
 801056e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010570:	7979      	ldrb	r1, [r7, #5]
 8010572:	7e3b      	ldrb	r3, [r7, #24]
 8010574:	9303      	str	r3, [sp, #12]
 8010576:	88fb      	ldrh	r3, [r7, #6]
 8010578:	9302      	str	r3, [sp, #8]
 801057a:	68bb      	ldr	r3, [r7, #8]
 801057c:	9301      	str	r3, [sp, #4]
 801057e:	2301      	movs	r3, #1
 8010580:	9300      	str	r3, [sp, #0]
 8010582:	2300      	movs	r3, #0
 8010584:	2200      	movs	r2, #0
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f000 fb21 	bl	8010bce <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 801058c:	2300      	movs	r3, #0
}
 801058e:	4618      	mov	r0, r3
 8010590:	3710      	adds	r7, #16
 8010592:	46bd      	mov	sp, r7
 8010594:	bd80      	pop	{r7, pc}

08010596 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010596:	b580      	push	{r7, lr}
 8010598:	b088      	sub	sp, #32
 801059a:	af04      	add	r7, sp, #16
 801059c:	60f8      	str	r0, [r7, #12]
 801059e:	60b9      	str	r1, [r7, #8]
 80105a0:	4611      	mov	r1, r2
 80105a2:	461a      	mov	r2, r3
 80105a4:	460b      	mov	r3, r1
 80105a6:	80fb      	strh	r3, [r7, #6]
 80105a8:	4613      	mov	r3, r2
 80105aa:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80105ac:	7979      	ldrb	r1, [r7, #5]
 80105ae:	2300      	movs	r3, #0
 80105b0:	9303      	str	r3, [sp, #12]
 80105b2:	88fb      	ldrh	r3, [r7, #6]
 80105b4:	9302      	str	r3, [sp, #8]
 80105b6:	68bb      	ldr	r3, [r7, #8]
 80105b8:	9301      	str	r3, [sp, #4]
 80105ba:	2301      	movs	r3, #1
 80105bc:	9300      	str	r3, [sp, #0]
 80105be:	2300      	movs	r3, #0
 80105c0:	2201      	movs	r2, #1
 80105c2:	68f8      	ldr	r0, [r7, #12]
 80105c4:	f000 fb03 	bl	8010bce <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80105c8:	2300      	movs	r3, #0

}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}

080105d2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80105d2:	b580      	push	{r7, lr}
 80105d4:	b088      	sub	sp, #32
 80105d6:	af04      	add	r7, sp, #16
 80105d8:	60f8      	str	r0, [r7, #12]
 80105da:	60b9      	str	r1, [r7, #8]
 80105dc:	4611      	mov	r1, r2
 80105de:	461a      	mov	r2, r3
 80105e0:	460b      	mov	r3, r1
 80105e2:	80fb      	strh	r3, [r7, #6]
 80105e4:	4613      	mov	r3, r2
 80105e6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	d001      	beq.n	80105f6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80105f2:	2300      	movs	r3, #0
 80105f4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80105f6:	7979      	ldrb	r1, [r7, #5]
 80105f8:	7e3b      	ldrb	r3, [r7, #24]
 80105fa:	9303      	str	r3, [sp, #12]
 80105fc:	88fb      	ldrh	r3, [r7, #6]
 80105fe:	9302      	str	r3, [sp, #8]
 8010600:	68bb      	ldr	r3, [r7, #8]
 8010602:	9301      	str	r3, [sp, #4]
 8010604:	2301      	movs	r3, #1
 8010606:	9300      	str	r3, [sp, #0]
 8010608:	2302      	movs	r3, #2
 801060a:	2200      	movs	r2, #0
 801060c:	68f8      	ldr	r0, [r7, #12]
 801060e:	f000 fade 	bl	8010bce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010612:	2300      	movs	r3, #0
}
 8010614:	4618      	mov	r0, r3
 8010616:	3710      	adds	r7, #16
 8010618:	46bd      	mov	sp, r7
 801061a:	bd80      	pop	{r7, pc}

0801061c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	b088      	sub	sp, #32
 8010620:	af04      	add	r7, sp, #16
 8010622:	60f8      	str	r0, [r7, #12]
 8010624:	60b9      	str	r1, [r7, #8]
 8010626:	4611      	mov	r1, r2
 8010628:	461a      	mov	r2, r3
 801062a:	460b      	mov	r3, r1
 801062c:	80fb      	strh	r3, [r7, #6]
 801062e:	4613      	mov	r3, r2
 8010630:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010632:	7979      	ldrb	r1, [r7, #5]
 8010634:	2300      	movs	r3, #0
 8010636:	9303      	str	r3, [sp, #12]
 8010638:	88fb      	ldrh	r3, [r7, #6]
 801063a:	9302      	str	r3, [sp, #8]
 801063c:	68bb      	ldr	r3, [r7, #8]
 801063e:	9301      	str	r3, [sp, #4]
 8010640:	2301      	movs	r3, #1
 8010642:	9300      	str	r3, [sp, #0]
 8010644:	2302      	movs	r3, #2
 8010646:	2201      	movs	r2, #1
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f000 fac0 	bl	8010bce <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b086      	sub	sp, #24
 801065c:	af04      	add	r7, sp, #16
 801065e:	6078      	str	r0, [r7, #4]
 8010660:	4608      	mov	r0, r1
 8010662:	4611      	mov	r1, r2
 8010664:	461a      	mov	r2, r3
 8010666:	4603      	mov	r3, r0
 8010668:	70fb      	strb	r3, [r7, #3]
 801066a:	460b      	mov	r3, r1
 801066c:	70bb      	strb	r3, [r7, #2]
 801066e:	4613      	mov	r3, r2
 8010670:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010672:	7878      	ldrb	r0, [r7, #1]
 8010674:	78ba      	ldrb	r2, [r7, #2]
 8010676:	78f9      	ldrb	r1, [r7, #3]
 8010678:	8b3b      	ldrh	r3, [r7, #24]
 801067a:	9302      	str	r3, [sp, #8]
 801067c:	7d3b      	ldrb	r3, [r7, #20]
 801067e:	9301      	str	r3, [sp, #4]
 8010680:	7c3b      	ldrb	r3, [r7, #16]
 8010682:	9300      	str	r3, [sp, #0]
 8010684:	4603      	mov	r3, r0
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f000 fa53 	bl	8010b32 <USBH_LL_OpenPipe>

  return USBH_OK;
 801068c:	2300      	movs	r3, #0
}
 801068e:	4618      	mov	r0, r3
 8010690:	3708      	adds	r7, #8
 8010692:	46bd      	mov	sp, r7
 8010694:	bd80      	pop	{r7, pc}

08010696 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010696:	b580      	push	{r7, lr}
 8010698:	b082      	sub	sp, #8
 801069a:	af00      	add	r7, sp, #0
 801069c:	6078      	str	r0, [r7, #4]
 801069e:	460b      	mov	r3, r1
 80106a0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80106a2:	78fb      	ldrb	r3, [r7, #3]
 80106a4:	4619      	mov	r1, r3
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	f000 fa72 	bl	8010b90 <USBH_LL_ClosePipe>

  return USBH_OK;
 80106ac:	2300      	movs	r3, #0
}
 80106ae:	4618      	mov	r0, r3
 80106b0:	3708      	adds	r7, #8
 80106b2:	46bd      	mov	sp, r7
 80106b4:	bd80      	pop	{r7, pc}

080106b6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80106b6:	b580      	push	{r7, lr}
 80106b8:	b084      	sub	sp, #16
 80106ba:	af00      	add	r7, sp, #0
 80106bc:	6078      	str	r0, [r7, #4]
 80106be:	460b      	mov	r3, r1
 80106c0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80106c2:	6878      	ldr	r0, [r7, #4]
 80106c4:	f000 f836 	bl	8010734 <USBH_GetFreePipe>
 80106c8:	4603      	mov	r3, r0
 80106ca:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80106cc:	89fb      	ldrh	r3, [r7, #14]
 80106ce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80106d2:	4293      	cmp	r3, r2
 80106d4:	d00a      	beq.n	80106ec <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80106d6:	78fa      	ldrb	r2, [r7, #3]
 80106d8:	89fb      	ldrh	r3, [r7, #14]
 80106da:	f003 030f 	and.w	r3, r3, #15
 80106de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80106e2:	6879      	ldr	r1, [r7, #4]
 80106e4:	33e0      	adds	r3, #224	@ 0xe0
 80106e6:	009b      	lsls	r3, r3, #2
 80106e8:	440b      	add	r3, r1
 80106ea:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80106ec:	89fb      	ldrh	r3, [r7, #14]
 80106ee:	b2db      	uxtb	r3, r3
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80106f8:	b480      	push	{r7}
 80106fa:	b083      	sub	sp, #12
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
 8010700:	460b      	mov	r3, r1
 8010702:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010704:	78fb      	ldrb	r3, [r7, #3]
 8010706:	2b0f      	cmp	r3, #15
 8010708:	d80d      	bhi.n	8010726 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801070a:	78fb      	ldrb	r3, [r7, #3]
 801070c:	687a      	ldr	r2, [r7, #4]
 801070e:	33e0      	adds	r3, #224	@ 0xe0
 8010710:	009b      	lsls	r3, r3, #2
 8010712:	4413      	add	r3, r2
 8010714:	685a      	ldr	r2, [r3, #4]
 8010716:	78fb      	ldrb	r3, [r7, #3]
 8010718:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801071c:	6879      	ldr	r1, [r7, #4]
 801071e:	33e0      	adds	r3, #224	@ 0xe0
 8010720:	009b      	lsls	r3, r3, #2
 8010722:	440b      	add	r3, r1
 8010724:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010726:	2300      	movs	r3, #0
}
 8010728:	4618      	mov	r0, r3
 801072a:	370c      	adds	r7, #12
 801072c:	46bd      	mov	sp, r7
 801072e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010732:	4770      	bx	lr

08010734 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010734:	b480      	push	{r7}
 8010736:	b085      	sub	sp, #20
 8010738:	af00      	add	r7, sp, #0
 801073a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801073c:	2300      	movs	r3, #0
 801073e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010740:	2300      	movs	r3, #0
 8010742:	73fb      	strb	r3, [r7, #15]
 8010744:	e00f      	b.n	8010766 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010746:	7bfb      	ldrb	r3, [r7, #15]
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	33e0      	adds	r3, #224	@ 0xe0
 801074c:	009b      	lsls	r3, r3, #2
 801074e:	4413      	add	r3, r2
 8010750:	685b      	ldr	r3, [r3, #4]
 8010752:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8010756:	2b00      	cmp	r3, #0
 8010758:	d102      	bne.n	8010760 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 801075a:	7bfb      	ldrb	r3, [r7, #15]
 801075c:	b29b      	uxth	r3, r3
 801075e:	e007      	b.n	8010770 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010760:	7bfb      	ldrb	r3, [r7, #15]
 8010762:	3301      	adds	r3, #1
 8010764:	73fb      	strb	r3, [r7, #15]
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	2b0f      	cmp	r3, #15
 801076a:	d9ec      	bls.n	8010746 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 801076c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8010770:	4618      	mov	r0, r3
 8010772:	3714      	adds	r7, #20
 8010774:	46bd      	mov	sp, r7
 8010776:	f85d 7b04 	ldr.w	r7, [sp], #4
 801077a:	4770      	bx	lr

0801077c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8010780:	2201      	movs	r2, #1
 8010782:	490e      	ldr	r1, [pc, #56]	@ (80107bc <MX_USB_HOST_Init+0x40>)
 8010784:	480e      	ldr	r0, [pc, #56]	@ (80107c0 <MX_USB_HOST_Init+0x44>)
 8010786:	f7fe fb15 	bl	800edb4 <USBH_Init>
 801078a:	4603      	mov	r3, r0
 801078c:	2b00      	cmp	r3, #0
 801078e:	d001      	beq.n	8010794 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8010790:	f7f3 fb5a 	bl	8003e48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8010794:	490b      	ldr	r1, [pc, #44]	@ (80107c4 <MX_USB_HOST_Init+0x48>)
 8010796:	480a      	ldr	r0, [pc, #40]	@ (80107c0 <MX_USB_HOST_Init+0x44>)
 8010798:	f7fe fbb9 	bl	800ef0e <USBH_RegisterClass>
 801079c:	4603      	mov	r3, r0
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d001      	beq.n	80107a6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80107a2:	f7f3 fb51 	bl	8003e48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80107a6:	4806      	ldr	r0, [pc, #24]	@ (80107c0 <MX_USB_HOST_Init+0x44>)
 80107a8:	f7fe fc3d 	bl	800f026 <USBH_Start>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d001      	beq.n	80107b6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80107b2:	f7f3 fb49 	bl	8003e48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80107b6:	bf00      	nop
 80107b8:	bd80      	pop	{r7, pc}
 80107ba:	bf00      	nop
 80107bc:	080107dd 	.word	0x080107dd
 80107c0:	200001f8 	.word	0x200001f8
 80107c4:	2000000c 	.word	0x2000000c

080107c8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80107c8:	b580      	push	{r7, lr}
 80107ca:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80107cc:	4802      	ldr	r0, [pc, #8]	@ (80107d8 <MX_USB_HOST_Process+0x10>)
 80107ce:	f7fe fc3b 	bl	800f048 <USBH_Process>
}
 80107d2:	bf00      	nop
 80107d4:	bd80      	pop	{r7, pc}
 80107d6:	bf00      	nop
 80107d8:	200001f8 	.word	0x200001f8

080107dc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80107dc:	b480      	push	{r7}
 80107de:	b083      	sub	sp, #12
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	6078      	str	r0, [r7, #4]
 80107e4:	460b      	mov	r3, r1
 80107e6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80107e8:	78fb      	ldrb	r3, [r7, #3]
 80107ea:	3b01      	subs	r3, #1
 80107ec:	2b04      	cmp	r3, #4
 80107ee:	d819      	bhi.n	8010824 <USBH_UserProcess+0x48>
 80107f0:	a201      	add	r2, pc, #4	@ (adr r2, 80107f8 <USBH_UserProcess+0x1c>)
 80107f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107f6:	bf00      	nop
 80107f8:	08010825 	.word	0x08010825
 80107fc:	08010815 	.word	0x08010815
 8010800:	08010825 	.word	0x08010825
 8010804:	0801081d 	.word	0x0801081d
 8010808:	0801080d 	.word	0x0801080d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 801080c:	4b09      	ldr	r3, [pc, #36]	@ (8010834 <USBH_UserProcess+0x58>)
 801080e:	2203      	movs	r2, #3
 8010810:	701a      	strb	r2, [r3, #0]
  break;
 8010812:	e008      	b.n	8010826 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8010814:	4b07      	ldr	r3, [pc, #28]	@ (8010834 <USBH_UserProcess+0x58>)
 8010816:	2202      	movs	r2, #2
 8010818:	701a      	strb	r2, [r3, #0]
  break;
 801081a:	e004      	b.n	8010826 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 801081c:	4b05      	ldr	r3, [pc, #20]	@ (8010834 <USBH_UserProcess+0x58>)
 801081e:	2201      	movs	r2, #1
 8010820:	701a      	strb	r2, [r3, #0]
  break;
 8010822:	e000      	b.n	8010826 <USBH_UserProcess+0x4a>

  default:
  break;
 8010824:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8010826:	bf00      	nop
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr
 8010832:	bf00      	nop
 8010834:	200005d0 	.word	0x200005d0

08010838 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8010838:	b580      	push	{r7, lr}
 801083a:	b08a      	sub	sp, #40	@ 0x28
 801083c:	af00      	add	r7, sp, #0
 801083e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010840:	f107 0314 	add.w	r3, r7, #20
 8010844:	2200      	movs	r2, #0
 8010846:	601a      	str	r2, [r3, #0]
 8010848:	605a      	str	r2, [r3, #4]
 801084a:	609a      	str	r2, [r3, #8]
 801084c:	60da      	str	r2, [r3, #12]
 801084e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010858:	d147      	bne.n	80108ea <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801085a:	2300      	movs	r3, #0
 801085c:	613b      	str	r3, [r7, #16]
 801085e:	4b25      	ldr	r3, [pc, #148]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 8010860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010862:	4a24      	ldr	r2, [pc, #144]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 8010864:	f043 0301 	orr.w	r3, r3, #1
 8010868:	6313      	str	r3, [r2, #48]	@ 0x30
 801086a:	4b22      	ldr	r3, [pc, #136]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 801086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801086e:	f003 0301 	and.w	r3, r3, #1
 8010872:	613b      	str	r3, [r7, #16]
 8010874:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8010876:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801087a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801087c:	2300      	movs	r3, #0
 801087e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010880:	2300      	movs	r3, #0
 8010882:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8010884:	f107 0314 	add.w	r3, r7, #20
 8010888:	4619      	mov	r1, r3
 801088a:	481b      	ldr	r0, [pc, #108]	@ (80108f8 <HAL_HCD_MspInit+0xc0>)
 801088c:	f7f8 f9cc 	bl	8008c28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8010890:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8010894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010896:	2302      	movs	r3, #2
 8010898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801089a:	2300      	movs	r3, #0
 801089c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801089e:	2300      	movs	r3, #0
 80108a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80108a2:	230a      	movs	r3, #10
 80108a4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80108a6:	f107 0314 	add.w	r3, r7, #20
 80108aa:	4619      	mov	r1, r3
 80108ac:	4812      	ldr	r0, [pc, #72]	@ (80108f8 <HAL_HCD_MspInit+0xc0>)
 80108ae:	f7f8 f9bb 	bl	8008c28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80108b2:	4b10      	ldr	r3, [pc, #64]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 80108b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80108b6:	4a0f      	ldr	r2, [pc, #60]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 80108b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80108bc:	6353      	str	r3, [r2, #52]	@ 0x34
 80108be:	2300      	movs	r3, #0
 80108c0:	60fb      	str	r3, [r7, #12]
 80108c2:	4b0c      	ldr	r3, [pc, #48]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 80108c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108c6:	4a0b      	ldr	r2, [pc, #44]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 80108c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80108cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80108ce:	4b09      	ldr	r3, [pc, #36]	@ (80108f4 <HAL_HCD_MspInit+0xbc>)
 80108d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80108d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80108d6:	60fb      	str	r3, [r7, #12]
 80108d8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80108da:	2200      	movs	r2, #0
 80108dc:	2100      	movs	r1, #0
 80108de:	2043      	movs	r0, #67	@ 0x43
 80108e0:	f7f8 f96b 	bl	8008bba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80108e4:	2043      	movs	r0, #67	@ 0x43
 80108e6:	f7f8 f984 	bl	8008bf2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80108ea:	bf00      	nop
 80108ec:	3728      	adds	r7, #40	@ 0x28
 80108ee:	46bd      	mov	sp, r7
 80108f0:	bd80      	pop	{r7, pc}
 80108f2:	bf00      	nop
 80108f4:	40023800 	.word	0x40023800
 80108f8:	40020000 	.word	0x40020000

080108fc <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80108fc:	b580      	push	{r7, lr}
 80108fe:	b082      	sub	sp, #8
 8010900:	af00      	add	r7, sp, #0
 8010902:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801090a:	4618      	mov	r0, r3
 801090c:	f7fe ff73 	bl	800f7f6 <USBH_LL_IncTimer>
}
 8010910:	bf00      	nop
 8010912:	3708      	adds	r7, #8
 8010914:	46bd      	mov	sp, r7
 8010916:	bd80      	pop	{r7, pc}

08010918 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010918:	b580      	push	{r7, lr}
 801091a:	b082      	sub	sp, #8
 801091c:	af00      	add	r7, sp, #0
 801091e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8010920:	687b      	ldr	r3, [r7, #4]
 8010922:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010926:	4618      	mov	r0, r3
 8010928:	f7fe ffab 	bl	800f882 <USBH_LL_Connect>
}
 801092c:	bf00      	nop
 801092e:	3708      	adds	r7, #8
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b082      	sub	sp, #8
 8010938:	af00      	add	r7, sp, #0
 801093a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010942:	4618      	mov	r0, r3
 8010944:	f7fe ffb4 	bl	800f8b0 <USBH_LL_Disconnect>
}
 8010948:	bf00      	nop
 801094a:	3708      	adds	r7, #8
 801094c:	46bd      	mov	sp, r7
 801094e:	bd80      	pop	{r7, pc}

08010950 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8010950:	b480      	push	{r7}
 8010952:	b083      	sub	sp, #12
 8010954:	af00      	add	r7, sp, #0
 8010956:	6078      	str	r0, [r7, #4]
 8010958:	460b      	mov	r3, r1
 801095a:	70fb      	strb	r3, [r7, #3]
 801095c:	4613      	mov	r3, r2
 801095e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8010960:	bf00      	nop
 8010962:	370c      	adds	r7, #12
 8010964:	46bd      	mov	sp, r7
 8010966:	f85d 7b04 	ldr.w	r7, [sp], #4
 801096a:	4770      	bx	lr

0801096c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801096c:	b580      	push	{r7, lr}
 801096e:	b082      	sub	sp, #8
 8010970:	af00      	add	r7, sp, #0
 8010972:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 801097a:	4618      	mov	r0, r3
 801097c:	f7fe ff65 	bl	800f84a <USBH_LL_PortEnabled>
}
 8010980:	bf00      	nop
 8010982:	3708      	adds	r7, #8
 8010984:	46bd      	mov	sp, r7
 8010986:	bd80      	pop	{r7, pc}

08010988 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8010996:	4618      	mov	r0, r3
 8010998:	f7fe ff65 	bl	800f866 <USBH_LL_PortDisabled>
}
 801099c:	bf00      	nop
 801099e:	3708      	adds	r7, #8
 80109a0:	46bd      	mov	sp, r7
 80109a2:	bd80      	pop	{r7, pc}

080109a4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80109a4:	b580      	push	{r7, lr}
 80109a6:	b082      	sub	sp, #8
 80109a8:	af00      	add	r7, sp, #0
 80109aa:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80109b2:	2b01      	cmp	r3, #1
 80109b4:	d12a      	bne.n	8010a0c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80109b6:	4a18      	ldr	r2, [pc, #96]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	4a15      	ldr	r2, [pc, #84]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109c2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80109c6:	4b14      	ldr	r3, [pc, #80]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109c8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80109cc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80109ce:	4b12      	ldr	r3, [pc, #72]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109d0:	2208      	movs	r2, #8
 80109d2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80109d4:	4b10      	ldr	r3, [pc, #64]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109d6:	2201      	movs	r2, #1
 80109d8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80109da:	4b0f      	ldr	r3, [pc, #60]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109dc:	2200      	movs	r2, #0
 80109de:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80109e0:	4b0d      	ldr	r3, [pc, #52]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109e2:	2202      	movs	r2, #2
 80109e4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80109e6:	4b0c      	ldr	r3, [pc, #48]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109e8:	2200      	movs	r2, #0
 80109ea:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80109ec:	480a      	ldr	r0, [pc, #40]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109ee:	f7f8 fad0 	bl	8008f92 <HAL_HCD_Init>
 80109f2:	4603      	mov	r3, r0
 80109f4:	2b00      	cmp	r3, #0
 80109f6:	d001      	beq.n	80109fc <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80109f8:	f7f3 fa26 	bl	8003e48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80109fc:	4806      	ldr	r0, [pc, #24]	@ (8010a18 <USBH_LL_Init+0x74>)
 80109fe:	f7f8 ff31 	bl	8009864 <HAL_HCD_GetCurrentFrame>
 8010a02:	4603      	mov	r3, r0
 8010a04:	4619      	mov	r1, r3
 8010a06:	6878      	ldr	r0, [r7, #4]
 8010a08:	f7fe fee6 	bl	800f7d8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8010a0c:	2300      	movs	r3, #0
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	3708      	adds	r7, #8
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	200005d4 	.word	0x200005d4

08010a1c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b084      	sub	sp, #16
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a24:	2300      	movs	r3, #0
 8010a26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a28:	2300      	movs	r3, #0
 8010a2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a32:	4618      	mov	r0, r3
 8010a34:	f7f8 fe9e 	bl	8009774 <HAL_HCD_Start>
 8010a38:	4603      	mov	r3, r0
 8010a3a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a3c:	7bfb      	ldrb	r3, [r7, #15]
 8010a3e:	4618      	mov	r0, r3
 8010a40:	f000 f95e 	bl	8010d00 <USBH_Get_USB_Status>
 8010a44:	4603      	mov	r3, r0
 8010a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a4a:	4618      	mov	r0, r3
 8010a4c:	3710      	adds	r7, #16
 8010a4e:	46bd      	mov	sp, r7
 8010a50:	bd80      	pop	{r7, pc}

08010a52 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8010a52:	b580      	push	{r7, lr}
 8010a54:	b084      	sub	sp, #16
 8010a56:	af00      	add	r7, sp, #0
 8010a58:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010a5e:	2300      	movs	r3, #0
 8010a60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a68:	4618      	mov	r0, r3
 8010a6a:	f7f8 fea6 	bl	80097ba <HAL_HCD_Stop>
 8010a6e:	4603      	mov	r3, r0
 8010a70:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010a72:	7bfb      	ldrb	r3, [r7, #15]
 8010a74:	4618      	mov	r0, r3
 8010a76:	f000 f943 	bl	8010d00 <USBH_Get_USB_Status>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010a80:	4618      	mov	r0, r3
 8010a82:	3710      	adds	r7, #16
 8010a84:	46bd      	mov	sp, r7
 8010a86:	bd80      	pop	{r7, pc}

08010a88 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b084      	sub	sp, #16
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8010a90:	2301      	movs	r3, #1
 8010a92:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7f8 fef0 	bl	8009880 <HAL_HCD_GetCurrentSpeed>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b02      	cmp	r3, #2
 8010aa4:	d00c      	beq.n	8010ac0 <USBH_LL_GetSpeed+0x38>
 8010aa6:	2b02      	cmp	r3, #2
 8010aa8:	d80d      	bhi.n	8010ac6 <USBH_LL_GetSpeed+0x3e>
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d002      	beq.n	8010ab4 <USBH_LL_GetSpeed+0x2c>
 8010aae:	2b01      	cmp	r3, #1
 8010ab0:	d003      	beq.n	8010aba <USBH_LL_GetSpeed+0x32>
 8010ab2:	e008      	b.n	8010ac6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8010ab8:	e008      	b.n	8010acc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8010aba:	2301      	movs	r3, #1
 8010abc:	73fb      	strb	r3, [r7, #15]
    break;
 8010abe:	e005      	b.n	8010acc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8010ac0:	2302      	movs	r3, #2
 8010ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8010ac4:	e002      	b.n	8010acc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	73fb      	strb	r3, [r7, #15]
    break;
 8010aca:	bf00      	nop
  }
  return  speed;
 8010acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ace:	4618      	mov	r0, r3
 8010ad0:	3710      	adds	r7, #16
 8010ad2:	46bd      	mov	sp, r7
 8010ad4:	bd80      	pop	{r7, pc}

08010ad6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8010ad6:	b580      	push	{r7, lr}
 8010ad8:	b084      	sub	sp, #16
 8010ada:	af00      	add	r7, sp, #0
 8010adc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010ade:	2300      	movs	r3, #0
 8010ae0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7f8 fe81 	bl	80097f4 <HAL_HCD_ResetPort>
 8010af2:	4603      	mov	r3, r0
 8010af4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010af6:	7bfb      	ldrb	r3, [r7, #15]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f000 f901 	bl	8010d00 <USBH_Get_USB_Status>
 8010afe:	4603      	mov	r3, r0
 8010b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b04:	4618      	mov	r0, r3
 8010b06:	3710      	adds	r7, #16
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd80      	pop	{r7, pc}

08010b0c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b0c:	b580      	push	{r7, lr}
 8010b0e:	b082      	sub	sp, #8
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
 8010b14:	460b      	mov	r3, r1
 8010b16:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010b1e:	78fa      	ldrb	r2, [r7, #3]
 8010b20:	4611      	mov	r1, r2
 8010b22:	4618      	mov	r0, r3
 8010b24:	f7f8 fe89 	bl	800983a <HAL_HCD_HC_GetXferCount>
 8010b28:	4603      	mov	r3, r0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3708      	adds	r7, #8
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}

08010b32 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010b32:	b590      	push	{r4, r7, lr}
 8010b34:	b089      	sub	sp, #36	@ 0x24
 8010b36:	af04      	add	r7, sp, #16
 8010b38:	6078      	str	r0, [r7, #4]
 8010b3a:	4608      	mov	r0, r1
 8010b3c:	4611      	mov	r1, r2
 8010b3e:	461a      	mov	r2, r3
 8010b40:	4603      	mov	r3, r0
 8010b42:	70fb      	strb	r3, [r7, #3]
 8010b44:	460b      	mov	r3, r1
 8010b46:	70bb      	strb	r3, [r7, #2]
 8010b48:	4613      	mov	r3, r2
 8010b4a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b4c:	2300      	movs	r3, #0
 8010b4e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010b50:	2300      	movs	r3, #0
 8010b52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010b5a:	787c      	ldrb	r4, [r7, #1]
 8010b5c:	78ba      	ldrb	r2, [r7, #2]
 8010b5e:	78f9      	ldrb	r1, [r7, #3]
 8010b60:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010b62:	9302      	str	r3, [sp, #8]
 8010b64:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8010b68:	9301      	str	r3, [sp, #4]
 8010b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010b6e:	9300      	str	r3, [sp, #0]
 8010b70:	4623      	mov	r3, r4
 8010b72:	f7f8 fa75 	bl	8009060 <HAL_HCD_HC_Init>
 8010b76:	4603      	mov	r3, r0
 8010b78:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8010b7a:	7bfb      	ldrb	r3, [r7, #15]
 8010b7c:	4618      	mov	r0, r3
 8010b7e:	f000 f8bf 	bl	8010d00 <USBH_Get_USB_Status>
 8010b82:	4603      	mov	r3, r0
 8010b84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010b86:	7bbb      	ldrb	r3, [r7, #14]
}
 8010b88:	4618      	mov	r0, r3
 8010b8a:	3714      	adds	r7, #20
 8010b8c:	46bd      	mov	sp, r7
 8010b8e:	bd90      	pop	{r4, r7, pc}

08010b90 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b084      	sub	sp, #16
 8010b94:	af00      	add	r7, sp, #0
 8010b96:	6078      	str	r0, [r7, #4]
 8010b98:	460b      	mov	r3, r1
 8010b9a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010ba0:	2300      	movs	r3, #0
 8010ba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010baa:	78fa      	ldrb	r2, [r7, #3]
 8010bac:	4611      	mov	r1, r2
 8010bae:	4618      	mov	r0, r3
 8010bb0:	f7f8 fb0e 	bl	80091d0 <HAL_HCD_HC_Halt>
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8010bb8:	7bfb      	ldrb	r3, [r7, #15]
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f000 f8a0 	bl	8010d00 <USBH_Get_USB_Status>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010bc4:	7bbb      	ldrb	r3, [r7, #14]
}
 8010bc6:	4618      	mov	r0, r3
 8010bc8:	3710      	adds	r7, #16
 8010bca:	46bd      	mov	sp, r7
 8010bcc:	bd80      	pop	{r7, pc}

08010bce <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8010bce:	b590      	push	{r4, r7, lr}
 8010bd0:	b089      	sub	sp, #36	@ 0x24
 8010bd2:	af04      	add	r7, sp, #16
 8010bd4:	6078      	str	r0, [r7, #4]
 8010bd6:	4608      	mov	r0, r1
 8010bd8:	4611      	mov	r1, r2
 8010bda:	461a      	mov	r2, r3
 8010bdc:	4603      	mov	r3, r0
 8010bde:	70fb      	strb	r3, [r7, #3]
 8010be0:	460b      	mov	r3, r1
 8010be2:	70bb      	strb	r3, [r7, #2]
 8010be4:	4613      	mov	r3, r2
 8010be6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010be8:	2300      	movs	r3, #0
 8010bea:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010bec:	2300      	movs	r3, #0
 8010bee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8010bf6:	787c      	ldrb	r4, [r7, #1]
 8010bf8:	78ba      	ldrb	r2, [r7, #2]
 8010bfa:	78f9      	ldrb	r1, [r7, #3]
 8010bfc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8010c00:	9303      	str	r3, [sp, #12]
 8010c02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8010c04:	9302      	str	r3, [sp, #8]
 8010c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c08:	9301      	str	r3, [sp, #4]
 8010c0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c0e:	9300      	str	r3, [sp, #0]
 8010c10:	4623      	mov	r3, r4
 8010c12:	f7f8 fb01 	bl	8009218 <HAL_HCD_HC_SubmitRequest>
 8010c16:	4603      	mov	r3, r0
 8010c18:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8010c1a:	7bfb      	ldrb	r3, [r7, #15]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f000 f86f 	bl	8010d00 <USBH_Get_USB_Status>
 8010c22:	4603      	mov	r3, r0
 8010c24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010c26:	7bbb      	ldrb	r3, [r7, #14]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd90      	pop	{r4, r7, pc}

08010c30 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	460b      	mov	r3, r1
 8010c3a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c42:	78fa      	ldrb	r2, [r7, #3]
 8010c44:	4611      	mov	r1, r2
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7f8 fde2 	bl	8009810 <HAL_HCD_HC_GetURBState>
 8010c4c:	4603      	mov	r3, r0
}
 8010c4e:	4618      	mov	r0, r3
 8010c50:	3708      	adds	r7, #8
 8010c52:	46bd      	mov	sp, r7
 8010c54:	bd80      	pop	{r7, pc}

08010c56 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8010c56:	b580      	push	{r7, lr}
 8010c58:	b082      	sub	sp, #8
 8010c5a:	af00      	add	r7, sp, #0
 8010c5c:	6078      	str	r0, [r7, #4]
 8010c5e:	460b      	mov	r3, r1
 8010c60:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8010c68:	2b01      	cmp	r3, #1
 8010c6a:	d103      	bne.n	8010c74 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8010c6c:	78fb      	ldrb	r3, [r7, #3]
 8010c6e:	4618      	mov	r0, r3
 8010c70:	f000 f872 	bl	8010d58 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8010c74:	20c8      	movs	r0, #200	@ 0xc8
 8010c76:	f7f7 fea1 	bl	80089bc <HAL_Delay>
  return USBH_OK;
 8010c7a:	2300      	movs	r3, #0
}
 8010c7c:	4618      	mov	r0, r3
 8010c7e:	3708      	adds	r7, #8
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bd80      	pop	{r7, pc}

08010c84 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8010c84:	b480      	push	{r7}
 8010c86:	b085      	sub	sp, #20
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	460b      	mov	r3, r1
 8010c8e:	70fb      	strb	r3, [r7, #3]
 8010c90:	4613      	mov	r3, r2
 8010c92:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8010c9a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8010c9c:	78fa      	ldrb	r2, [r7, #3]
 8010c9e:	68f9      	ldr	r1, [r7, #12]
 8010ca0:	4613      	mov	r3, r2
 8010ca2:	011b      	lsls	r3, r3, #4
 8010ca4:	1a9b      	subs	r3, r3, r2
 8010ca6:	009b      	lsls	r3, r3, #2
 8010ca8:	440b      	add	r3, r1
 8010caa:	3317      	adds	r3, #23
 8010cac:	781b      	ldrb	r3, [r3, #0]
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	d00a      	beq.n	8010cc8 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8010cb2:	78fa      	ldrb	r2, [r7, #3]
 8010cb4:	68f9      	ldr	r1, [r7, #12]
 8010cb6:	4613      	mov	r3, r2
 8010cb8:	011b      	lsls	r3, r3, #4
 8010cba:	1a9b      	subs	r3, r3, r2
 8010cbc:	009b      	lsls	r3, r3, #2
 8010cbe:	440b      	add	r3, r1
 8010cc0:	333c      	adds	r3, #60	@ 0x3c
 8010cc2:	78ba      	ldrb	r2, [r7, #2]
 8010cc4:	701a      	strb	r2, [r3, #0]
 8010cc6:	e009      	b.n	8010cdc <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8010cc8:	78fa      	ldrb	r2, [r7, #3]
 8010cca:	68f9      	ldr	r1, [r7, #12]
 8010ccc:	4613      	mov	r3, r2
 8010cce:	011b      	lsls	r3, r3, #4
 8010cd0:	1a9b      	subs	r3, r3, r2
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	440b      	add	r3, r1
 8010cd6:	333d      	adds	r3, #61	@ 0x3d
 8010cd8:	78ba      	ldrb	r2, [r7, #2]
 8010cda:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8010cdc:	2300      	movs	r3, #0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	3714      	adds	r7, #20
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce8:	4770      	bx	lr

08010cea <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8010cea:	b580      	push	{r7, lr}
 8010cec:	b082      	sub	sp, #8
 8010cee:	af00      	add	r7, sp, #0
 8010cf0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f7f7 fe62 	bl	80089bc <HAL_Delay>
}
 8010cf8:	bf00      	nop
 8010cfa:	3708      	adds	r7, #8
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}

08010d00 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010d00:	b480      	push	{r7}
 8010d02:	b085      	sub	sp, #20
 8010d04:	af00      	add	r7, sp, #0
 8010d06:	4603      	mov	r3, r0
 8010d08:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8010d0a:	2300      	movs	r3, #0
 8010d0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010d0e:	79fb      	ldrb	r3, [r7, #7]
 8010d10:	2b03      	cmp	r3, #3
 8010d12:	d817      	bhi.n	8010d44 <USBH_Get_USB_Status+0x44>
 8010d14:	a201      	add	r2, pc, #4	@ (adr r2, 8010d1c <USBH_Get_USB_Status+0x1c>)
 8010d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d1a:	bf00      	nop
 8010d1c:	08010d2d 	.word	0x08010d2d
 8010d20:	08010d33 	.word	0x08010d33
 8010d24:	08010d39 	.word	0x08010d39
 8010d28:	08010d3f 	.word	0x08010d3f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8010d2c:	2300      	movs	r3, #0
 8010d2e:	73fb      	strb	r3, [r7, #15]
    break;
 8010d30:	e00b      	b.n	8010d4a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8010d32:	2302      	movs	r3, #2
 8010d34:	73fb      	strb	r3, [r7, #15]
    break;
 8010d36:	e008      	b.n	8010d4a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8010d38:	2301      	movs	r3, #1
 8010d3a:	73fb      	strb	r3, [r7, #15]
    break;
 8010d3c:	e005      	b.n	8010d4a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8010d3e:	2302      	movs	r3, #2
 8010d40:	73fb      	strb	r3, [r7, #15]
    break;
 8010d42:	e002      	b.n	8010d4a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8010d44:	2302      	movs	r3, #2
 8010d46:	73fb      	strb	r3, [r7, #15]
    break;
 8010d48:	bf00      	nop
  }
  return usb_status;
 8010d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d4c:	4618      	mov	r0, r3
 8010d4e:	3714      	adds	r7, #20
 8010d50:	46bd      	mov	sp, r7
 8010d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d56:	4770      	bx	lr

08010d58 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8010d58:	b580      	push	{r7, lr}
 8010d5a:	b084      	sub	sp, #16
 8010d5c:	af00      	add	r7, sp, #0
 8010d5e:	4603      	mov	r3, r0
 8010d60:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8010d62:	79fb      	ldrb	r3, [r7, #7]
 8010d64:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8010d66:	79fb      	ldrb	r3, [r7, #7]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d102      	bne.n	8010d72 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8010d6c:	2300      	movs	r3, #0
 8010d6e:	73fb      	strb	r3, [r7, #15]
 8010d70:	e001      	b.n	8010d76 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8010d72:	2301      	movs	r3, #1
 8010d74:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8010d76:	7bfb      	ldrb	r3, [r7, #15]
 8010d78:	461a      	mov	r2, r3
 8010d7a:	2101      	movs	r1, #1
 8010d7c:	4803      	ldr	r0, [pc, #12]	@ (8010d8c <MX_DriverVbusFS+0x34>)
 8010d7e:	f7f8 f8ef 	bl	8008f60 <HAL_GPIO_WritePin>
}
 8010d82:	bf00      	nop
 8010d84:	3710      	adds	r7, #16
 8010d86:	46bd      	mov	sp, r7
 8010d88:	bd80      	pop	{r7, pc}
 8010d8a:	bf00      	nop
 8010d8c:	40020800 	.word	0x40020800

08010d90 <malloc>:
 8010d90:	4b02      	ldr	r3, [pc, #8]	@ (8010d9c <malloc+0xc>)
 8010d92:	4601      	mov	r1, r0
 8010d94:	6818      	ldr	r0, [r3, #0]
 8010d96:	f000 b82d 	b.w	8010df4 <_malloc_r>
 8010d9a:	bf00      	nop
 8010d9c:	20000038 	.word	0x20000038

08010da0 <free>:
 8010da0:	4b02      	ldr	r3, [pc, #8]	@ (8010dac <free+0xc>)
 8010da2:	4601      	mov	r1, r0
 8010da4:	6818      	ldr	r0, [r3, #0]
 8010da6:	f000 bb5f 	b.w	8011468 <_free_r>
 8010daa:	bf00      	nop
 8010dac:	20000038 	.word	0x20000038

08010db0 <sbrk_aligned>:
 8010db0:	b570      	push	{r4, r5, r6, lr}
 8010db2:	4e0f      	ldr	r6, [pc, #60]	@ (8010df0 <sbrk_aligned+0x40>)
 8010db4:	460c      	mov	r4, r1
 8010db6:	6831      	ldr	r1, [r6, #0]
 8010db8:	4605      	mov	r5, r0
 8010dba:	b911      	cbnz	r1, 8010dc2 <sbrk_aligned+0x12>
 8010dbc:	f000 fb04 	bl	80113c8 <_sbrk_r>
 8010dc0:	6030      	str	r0, [r6, #0]
 8010dc2:	4621      	mov	r1, r4
 8010dc4:	4628      	mov	r0, r5
 8010dc6:	f000 faff 	bl	80113c8 <_sbrk_r>
 8010dca:	1c43      	adds	r3, r0, #1
 8010dcc:	d103      	bne.n	8010dd6 <sbrk_aligned+0x26>
 8010dce:	f04f 34ff 	mov.w	r4, #4294967295
 8010dd2:	4620      	mov	r0, r4
 8010dd4:	bd70      	pop	{r4, r5, r6, pc}
 8010dd6:	1cc4      	adds	r4, r0, #3
 8010dd8:	f024 0403 	bic.w	r4, r4, #3
 8010ddc:	42a0      	cmp	r0, r4
 8010dde:	d0f8      	beq.n	8010dd2 <sbrk_aligned+0x22>
 8010de0:	1a21      	subs	r1, r4, r0
 8010de2:	4628      	mov	r0, r5
 8010de4:	f000 faf0 	bl	80113c8 <_sbrk_r>
 8010de8:	3001      	adds	r0, #1
 8010dea:	d1f2      	bne.n	8010dd2 <sbrk_aligned+0x22>
 8010dec:	e7ef      	b.n	8010dce <sbrk_aligned+0x1e>
 8010dee:	bf00      	nop
 8010df0:	200009b4 	.word	0x200009b4

08010df4 <_malloc_r>:
 8010df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010df8:	1ccd      	adds	r5, r1, #3
 8010dfa:	f025 0503 	bic.w	r5, r5, #3
 8010dfe:	3508      	adds	r5, #8
 8010e00:	2d0c      	cmp	r5, #12
 8010e02:	bf38      	it	cc
 8010e04:	250c      	movcc	r5, #12
 8010e06:	2d00      	cmp	r5, #0
 8010e08:	4606      	mov	r6, r0
 8010e0a:	db01      	blt.n	8010e10 <_malloc_r+0x1c>
 8010e0c:	42a9      	cmp	r1, r5
 8010e0e:	d904      	bls.n	8010e1a <_malloc_r+0x26>
 8010e10:	230c      	movs	r3, #12
 8010e12:	6033      	str	r3, [r6, #0]
 8010e14:	2000      	movs	r0, #0
 8010e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8010ef0 <_malloc_r+0xfc>
 8010e1e:	f000 f869 	bl	8010ef4 <__malloc_lock>
 8010e22:	f8d8 3000 	ldr.w	r3, [r8]
 8010e26:	461c      	mov	r4, r3
 8010e28:	bb44      	cbnz	r4, 8010e7c <_malloc_r+0x88>
 8010e2a:	4629      	mov	r1, r5
 8010e2c:	4630      	mov	r0, r6
 8010e2e:	f7ff ffbf 	bl	8010db0 <sbrk_aligned>
 8010e32:	1c43      	adds	r3, r0, #1
 8010e34:	4604      	mov	r4, r0
 8010e36:	d158      	bne.n	8010eea <_malloc_r+0xf6>
 8010e38:	f8d8 4000 	ldr.w	r4, [r8]
 8010e3c:	4627      	mov	r7, r4
 8010e3e:	2f00      	cmp	r7, #0
 8010e40:	d143      	bne.n	8010eca <_malloc_r+0xd6>
 8010e42:	2c00      	cmp	r4, #0
 8010e44:	d04b      	beq.n	8010ede <_malloc_r+0xea>
 8010e46:	6823      	ldr	r3, [r4, #0]
 8010e48:	4639      	mov	r1, r7
 8010e4a:	4630      	mov	r0, r6
 8010e4c:	eb04 0903 	add.w	r9, r4, r3
 8010e50:	f000 faba 	bl	80113c8 <_sbrk_r>
 8010e54:	4581      	cmp	r9, r0
 8010e56:	d142      	bne.n	8010ede <_malloc_r+0xea>
 8010e58:	6821      	ldr	r1, [r4, #0]
 8010e5a:	1a6d      	subs	r5, r5, r1
 8010e5c:	4629      	mov	r1, r5
 8010e5e:	4630      	mov	r0, r6
 8010e60:	f7ff ffa6 	bl	8010db0 <sbrk_aligned>
 8010e64:	3001      	adds	r0, #1
 8010e66:	d03a      	beq.n	8010ede <_malloc_r+0xea>
 8010e68:	6823      	ldr	r3, [r4, #0]
 8010e6a:	442b      	add	r3, r5
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	f8d8 3000 	ldr.w	r3, [r8]
 8010e72:	685a      	ldr	r2, [r3, #4]
 8010e74:	bb62      	cbnz	r2, 8010ed0 <_malloc_r+0xdc>
 8010e76:	f8c8 7000 	str.w	r7, [r8]
 8010e7a:	e00f      	b.n	8010e9c <_malloc_r+0xa8>
 8010e7c:	6822      	ldr	r2, [r4, #0]
 8010e7e:	1b52      	subs	r2, r2, r5
 8010e80:	d420      	bmi.n	8010ec4 <_malloc_r+0xd0>
 8010e82:	2a0b      	cmp	r2, #11
 8010e84:	d917      	bls.n	8010eb6 <_malloc_r+0xc2>
 8010e86:	1961      	adds	r1, r4, r5
 8010e88:	42a3      	cmp	r3, r4
 8010e8a:	6025      	str	r5, [r4, #0]
 8010e8c:	bf18      	it	ne
 8010e8e:	6059      	strne	r1, [r3, #4]
 8010e90:	6863      	ldr	r3, [r4, #4]
 8010e92:	bf08      	it	eq
 8010e94:	f8c8 1000 	streq.w	r1, [r8]
 8010e98:	5162      	str	r2, [r4, r5]
 8010e9a:	604b      	str	r3, [r1, #4]
 8010e9c:	4630      	mov	r0, r6
 8010e9e:	f000 f82f 	bl	8010f00 <__malloc_unlock>
 8010ea2:	f104 000b 	add.w	r0, r4, #11
 8010ea6:	1d23      	adds	r3, r4, #4
 8010ea8:	f020 0007 	bic.w	r0, r0, #7
 8010eac:	1ac2      	subs	r2, r0, r3
 8010eae:	bf1c      	itt	ne
 8010eb0:	1a1b      	subne	r3, r3, r0
 8010eb2:	50a3      	strne	r3, [r4, r2]
 8010eb4:	e7af      	b.n	8010e16 <_malloc_r+0x22>
 8010eb6:	6862      	ldr	r2, [r4, #4]
 8010eb8:	42a3      	cmp	r3, r4
 8010eba:	bf0c      	ite	eq
 8010ebc:	f8c8 2000 	streq.w	r2, [r8]
 8010ec0:	605a      	strne	r2, [r3, #4]
 8010ec2:	e7eb      	b.n	8010e9c <_malloc_r+0xa8>
 8010ec4:	4623      	mov	r3, r4
 8010ec6:	6864      	ldr	r4, [r4, #4]
 8010ec8:	e7ae      	b.n	8010e28 <_malloc_r+0x34>
 8010eca:	463c      	mov	r4, r7
 8010ecc:	687f      	ldr	r7, [r7, #4]
 8010ece:	e7b6      	b.n	8010e3e <_malloc_r+0x4a>
 8010ed0:	461a      	mov	r2, r3
 8010ed2:	685b      	ldr	r3, [r3, #4]
 8010ed4:	42a3      	cmp	r3, r4
 8010ed6:	d1fb      	bne.n	8010ed0 <_malloc_r+0xdc>
 8010ed8:	2300      	movs	r3, #0
 8010eda:	6053      	str	r3, [r2, #4]
 8010edc:	e7de      	b.n	8010e9c <_malloc_r+0xa8>
 8010ede:	230c      	movs	r3, #12
 8010ee0:	6033      	str	r3, [r6, #0]
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f000 f80c 	bl	8010f00 <__malloc_unlock>
 8010ee8:	e794      	b.n	8010e14 <_malloc_r+0x20>
 8010eea:	6005      	str	r5, [r0, #0]
 8010eec:	e7d6      	b.n	8010e9c <_malloc_r+0xa8>
 8010eee:	bf00      	nop
 8010ef0:	200009b8 	.word	0x200009b8

08010ef4 <__malloc_lock>:
 8010ef4:	4801      	ldr	r0, [pc, #4]	@ (8010efc <__malloc_lock+0x8>)
 8010ef6:	f000 bab4 	b.w	8011462 <__retarget_lock_acquire_recursive>
 8010efa:	bf00      	nop
 8010efc:	20000afc 	.word	0x20000afc

08010f00 <__malloc_unlock>:
 8010f00:	4801      	ldr	r0, [pc, #4]	@ (8010f08 <__malloc_unlock+0x8>)
 8010f02:	f000 baaf 	b.w	8011464 <__retarget_lock_release_recursive>
 8010f06:	bf00      	nop
 8010f08:	20000afc 	.word	0x20000afc

08010f0c <std>:
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	b510      	push	{r4, lr}
 8010f10:	4604      	mov	r4, r0
 8010f12:	e9c0 3300 	strd	r3, r3, [r0]
 8010f16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010f1a:	6083      	str	r3, [r0, #8]
 8010f1c:	8181      	strh	r1, [r0, #12]
 8010f1e:	6643      	str	r3, [r0, #100]	@ 0x64
 8010f20:	81c2      	strh	r2, [r0, #14]
 8010f22:	6183      	str	r3, [r0, #24]
 8010f24:	4619      	mov	r1, r3
 8010f26:	2208      	movs	r2, #8
 8010f28:	305c      	adds	r0, #92	@ 0x5c
 8010f2a:	f000 fa11 	bl	8011350 <memset>
 8010f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f64 <std+0x58>)
 8010f30:	6263      	str	r3, [r4, #36]	@ 0x24
 8010f32:	4b0d      	ldr	r3, [pc, #52]	@ (8010f68 <std+0x5c>)
 8010f34:	62a3      	str	r3, [r4, #40]	@ 0x28
 8010f36:	4b0d      	ldr	r3, [pc, #52]	@ (8010f6c <std+0x60>)
 8010f38:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8010f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8010f70 <std+0x64>)
 8010f3c:	6323      	str	r3, [r4, #48]	@ 0x30
 8010f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8010f74 <std+0x68>)
 8010f40:	6224      	str	r4, [r4, #32]
 8010f42:	429c      	cmp	r4, r3
 8010f44:	d006      	beq.n	8010f54 <std+0x48>
 8010f46:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8010f4a:	4294      	cmp	r4, r2
 8010f4c:	d002      	beq.n	8010f54 <std+0x48>
 8010f4e:	33d0      	adds	r3, #208	@ 0xd0
 8010f50:	429c      	cmp	r4, r3
 8010f52:	d105      	bne.n	8010f60 <std+0x54>
 8010f54:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8010f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f5c:	f000 ba80 	b.w	8011460 <__retarget_lock_init_recursive>
 8010f60:	bd10      	pop	{r4, pc}
 8010f62:	bf00      	nop
 8010f64:	08011181 	.word	0x08011181
 8010f68:	080111a3 	.word	0x080111a3
 8010f6c:	080111db 	.word	0x080111db
 8010f70:	080111ff 	.word	0x080111ff
 8010f74:	200009bc 	.word	0x200009bc

08010f78 <stdio_exit_handler>:
 8010f78:	4a02      	ldr	r2, [pc, #8]	@ (8010f84 <stdio_exit_handler+0xc>)
 8010f7a:	4903      	ldr	r1, [pc, #12]	@ (8010f88 <stdio_exit_handler+0x10>)
 8010f7c:	4803      	ldr	r0, [pc, #12]	@ (8010f8c <stdio_exit_handler+0x14>)
 8010f7e:	f000 b869 	b.w	8011054 <_fwalk_sglue>
 8010f82:	bf00      	nop
 8010f84:	2000002c 	.word	0x2000002c
 8010f88:	08011ba1 	.word	0x08011ba1
 8010f8c:	2000003c 	.word	0x2000003c

08010f90 <cleanup_stdio>:
 8010f90:	6841      	ldr	r1, [r0, #4]
 8010f92:	4b0c      	ldr	r3, [pc, #48]	@ (8010fc4 <cleanup_stdio+0x34>)
 8010f94:	4299      	cmp	r1, r3
 8010f96:	b510      	push	{r4, lr}
 8010f98:	4604      	mov	r4, r0
 8010f9a:	d001      	beq.n	8010fa0 <cleanup_stdio+0x10>
 8010f9c:	f000 fe00 	bl	8011ba0 <_fflush_r>
 8010fa0:	68a1      	ldr	r1, [r4, #8]
 8010fa2:	4b09      	ldr	r3, [pc, #36]	@ (8010fc8 <cleanup_stdio+0x38>)
 8010fa4:	4299      	cmp	r1, r3
 8010fa6:	d002      	beq.n	8010fae <cleanup_stdio+0x1e>
 8010fa8:	4620      	mov	r0, r4
 8010faa:	f000 fdf9 	bl	8011ba0 <_fflush_r>
 8010fae:	68e1      	ldr	r1, [r4, #12]
 8010fb0:	4b06      	ldr	r3, [pc, #24]	@ (8010fcc <cleanup_stdio+0x3c>)
 8010fb2:	4299      	cmp	r1, r3
 8010fb4:	d004      	beq.n	8010fc0 <cleanup_stdio+0x30>
 8010fb6:	4620      	mov	r0, r4
 8010fb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010fbc:	f000 bdf0 	b.w	8011ba0 <_fflush_r>
 8010fc0:	bd10      	pop	{r4, pc}
 8010fc2:	bf00      	nop
 8010fc4:	200009bc 	.word	0x200009bc
 8010fc8:	20000a24 	.word	0x20000a24
 8010fcc:	20000a8c 	.word	0x20000a8c

08010fd0 <global_stdio_init.part.0>:
 8010fd0:	b510      	push	{r4, lr}
 8010fd2:	4b0b      	ldr	r3, [pc, #44]	@ (8011000 <global_stdio_init.part.0+0x30>)
 8010fd4:	4c0b      	ldr	r4, [pc, #44]	@ (8011004 <global_stdio_init.part.0+0x34>)
 8010fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8011008 <global_stdio_init.part.0+0x38>)
 8010fd8:	601a      	str	r2, [r3, #0]
 8010fda:	4620      	mov	r0, r4
 8010fdc:	2200      	movs	r2, #0
 8010fde:	2104      	movs	r1, #4
 8010fe0:	f7ff ff94 	bl	8010f0c <std>
 8010fe4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8010fe8:	2201      	movs	r2, #1
 8010fea:	2109      	movs	r1, #9
 8010fec:	f7ff ff8e 	bl	8010f0c <std>
 8010ff0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8010ff4:	2202      	movs	r2, #2
 8010ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010ffa:	2112      	movs	r1, #18
 8010ffc:	f7ff bf86 	b.w	8010f0c <std>
 8011000:	20000af4 	.word	0x20000af4
 8011004:	200009bc 	.word	0x200009bc
 8011008:	08010f79 	.word	0x08010f79

0801100c <__sfp_lock_acquire>:
 801100c:	4801      	ldr	r0, [pc, #4]	@ (8011014 <__sfp_lock_acquire+0x8>)
 801100e:	f000 ba28 	b.w	8011462 <__retarget_lock_acquire_recursive>
 8011012:	bf00      	nop
 8011014:	20000afd 	.word	0x20000afd

08011018 <__sfp_lock_release>:
 8011018:	4801      	ldr	r0, [pc, #4]	@ (8011020 <__sfp_lock_release+0x8>)
 801101a:	f000 ba23 	b.w	8011464 <__retarget_lock_release_recursive>
 801101e:	bf00      	nop
 8011020:	20000afd 	.word	0x20000afd

08011024 <__sinit>:
 8011024:	b510      	push	{r4, lr}
 8011026:	4604      	mov	r4, r0
 8011028:	f7ff fff0 	bl	801100c <__sfp_lock_acquire>
 801102c:	6a23      	ldr	r3, [r4, #32]
 801102e:	b11b      	cbz	r3, 8011038 <__sinit+0x14>
 8011030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011034:	f7ff bff0 	b.w	8011018 <__sfp_lock_release>
 8011038:	4b04      	ldr	r3, [pc, #16]	@ (801104c <__sinit+0x28>)
 801103a:	6223      	str	r3, [r4, #32]
 801103c:	4b04      	ldr	r3, [pc, #16]	@ (8011050 <__sinit+0x2c>)
 801103e:	681b      	ldr	r3, [r3, #0]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1f5      	bne.n	8011030 <__sinit+0xc>
 8011044:	f7ff ffc4 	bl	8010fd0 <global_stdio_init.part.0>
 8011048:	e7f2      	b.n	8011030 <__sinit+0xc>
 801104a:	bf00      	nop
 801104c:	08010f91 	.word	0x08010f91
 8011050:	20000af4 	.word	0x20000af4

08011054 <_fwalk_sglue>:
 8011054:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011058:	4607      	mov	r7, r0
 801105a:	4688      	mov	r8, r1
 801105c:	4614      	mov	r4, r2
 801105e:	2600      	movs	r6, #0
 8011060:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011064:	f1b9 0901 	subs.w	r9, r9, #1
 8011068:	d505      	bpl.n	8011076 <_fwalk_sglue+0x22>
 801106a:	6824      	ldr	r4, [r4, #0]
 801106c:	2c00      	cmp	r4, #0
 801106e:	d1f7      	bne.n	8011060 <_fwalk_sglue+0xc>
 8011070:	4630      	mov	r0, r6
 8011072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011076:	89ab      	ldrh	r3, [r5, #12]
 8011078:	2b01      	cmp	r3, #1
 801107a:	d907      	bls.n	801108c <_fwalk_sglue+0x38>
 801107c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011080:	3301      	adds	r3, #1
 8011082:	d003      	beq.n	801108c <_fwalk_sglue+0x38>
 8011084:	4629      	mov	r1, r5
 8011086:	4638      	mov	r0, r7
 8011088:	47c0      	blx	r8
 801108a:	4306      	orrs	r6, r0
 801108c:	3568      	adds	r5, #104	@ 0x68
 801108e:	e7e9      	b.n	8011064 <_fwalk_sglue+0x10>

08011090 <iprintf>:
 8011090:	b40f      	push	{r0, r1, r2, r3}
 8011092:	b507      	push	{r0, r1, r2, lr}
 8011094:	4906      	ldr	r1, [pc, #24]	@ (80110b0 <iprintf+0x20>)
 8011096:	ab04      	add	r3, sp, #16
 8011098:	6808      	ldr	r0, [r1, #0]
 801109a:	f853 2b04 	ldr.w	r2, [r3], #4
 801109e:	6881      	ldr	r1, [r0, #8]
 80110a0:	9301      	str	r3, [sp, #4]
 80110a2:	f000 fa55 	bl	8011550 <_vfiprintf_r>
 80110a6:	b003      	add	sp, #12
 80110a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80110ac:	b004      	add	sp, #16
 80110ae:	4770      	bx	lr
 80110b0:	20000038 	.word	0x20000038

080110b4 <putchar>:
 80110b4:	4b02      	ldr	r3, [pc, #8]	@ (80110c0 <putchar+0xc>)
 80110b6:	4601      	mov	r1, r0
 80110b8:	6818      	ldr	r0, [r3, #0]
 80110ba:	6882      	ldr	r2, [r0, #8]
 80110bc:	f000 bdfa 	b.w	8011cb4 <_putc_r>
 80110c0:	20000038 	.word	0x20000038

080110c4 <_puts_r>:
 80110c4:	6a03      	ldr	r3, [r0, #32]
 80110c6:	b570      	push	{r4, r5, r6, lr}
 80110c8:	6884      	ldr	r4, [r0, #8]
 80110ca:	4605      	mov	r5, r0
 80110cc:	460e      	mov	r6, r1
 80110ce:	b90b      	cbnz	r3, 80110d4 <_puts_r+0x10>
 80110d0:	f7ff ffa8 	bl	8011024 <__sinit>
 80110d4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80110d6:	07db      	lsls	r3, r3, #31
 80110d8:	d405      	bmi.n	80110e6 <_puts_r+0x22>
 80110da:	89a3      	ldrh	r3, [r4, #12]
 80110dc:	0598      	lsls	r0, r3, #22
 80110de:	d402      	bmi.n	80110e6 <_puts_r+0x22>
 80110e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80110e2:	f000 f9be 	bl	8011462 <__retarget_lock_acquire_recursive>
 80110e6:	89a3      	ldrh	r3, [r4, #12]
 80110e8:	0719      	lsls	r1, r3, #28
 80110ea:	d502      	bpl.n	80110f2 <_puts_r+0x2e>
 80110ec:	6923      	ldr	r3, [r4, #16]
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d135      	bne.n	801115e <_puts_r+0x9a>
 80110f2:	4621      	mov	r1, r4
 80110f4:	4628      	mov	r0, r5
 80110f6:	f000 f8c5 	bl	8011284 <__swsetup_r>
 80110fa:	b380      	cbz	r0, 801115e <_puts_r+0x9a>
 80110fc:	f04f 35ff 	mov.w	r5, #4294967295
 8011100:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011102:	07da      	lsls	r2, r3, #31
 8011104:	d405      	bmi.n	8011112 <_puts_r+0x4e>
 8011106:	89a3      	ldrh	r3, [r4, #12]
 8011108:	059b      	lsls	r3, r3, #22
 801110a:	d402      	bmi.n	8011112 <_puts_r+0x4e>
 801110c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801110e:	f000 f9a9 	bl	8011464 <__retarget_lock_release_recursive>
 8011112:	4628      	mov	r0, r5
 8011114:	bd70      	pop	{r4, r5, r6, pc}
 8011116:	2b00      	cmp	r3, #0
 8011118:	da04      	bge.n	8011124 <_puts_r+0x60>
 801111a:	69a2      	ldr	r2, [r4, #24]
 801111c:	429a      	cmp	r2, r3
 801111e:	dc17      	bgt.n	8011150 <_puts_r+0x8c>
 8011120:	290a      	cmp	r1, #10
 8011122:	d015      	beq.n	8011150 <_puts_r+0x8c>
 8011124:	6823      	ldr	r3, [r4, #0]
 8011126:	1c5a      	adds	r2, r3, #1
 8011128:	6022      	str	r2, [r4, #0]
 801112a:	7019      	strb	r1, [r3, #0]
 801112c:	68a3      	ldr	r3, [r4, #8]
 801112e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011132:	3b01      	subs	r3, #1
 8011134:	60a3      	str	r3, [r4, #8]
 8011136:	2900      	cmp	r1, #0
 8011138:	d1ed      	bne.n	8011116 <_puts_r+0x52>
 801113a:	2b00      	cmp	r3, #0
 801113c:	da11      	bge.n	8011162 <_puts_r+0x9e>
 801113e:	4622      	mov	r2, r4
 8011140:	210a      	movs	r1, #10
 8011142:	4628      	mov	r0, r5
 8011144:	f000 f85f 	bl	8011206 <__swbuf_r>
 8011148:	3001      	adds	r0, #1
 801114a:	d0d7      	beq.n	80110fc <_puts_r+0x38>
 801114c:	250a      	movs	r5, #10
 801114e:	e7d7      	b.n	8011100 <_puts_r+0x3c>
 8011150:	4622      	mov	r2, r4
 8011152:	4628      	mov	r0, r5
 8011154:	f000 f857 	bl	8011206 <__swbuf_r>
 8011158:	3001      	adds	r0, #1
 801115a:	d1e7      	bne.n	801112c <_puts_r+0x68>
 801115c:	e7ce      	b.n	80110fc <_puts_r+0x38>
 801115e:	3e01      	subs	r6, #1
 8011160:	e7e4      	b.n	801112c <_puts_r+0x68>
 8011162:	6823      	ldr	r3, [r4, #0]
 8011164:	1c5a      	adds	r2, r3, #1
 8011166:	6022      	str	r2, [r4, #0]
 8011168:	220a      	movs	r2, #10
 801116a:	701a      	strb	r2, [r3, #0]
 801116c:	e7ee      	b.n	801114c <_puts_r+0x88>
	...

08011170 <puts>:
 8011170:	4b02      	ldr	r3, [pc, #8]	@ (801117c <puts+0xc>)
 8011172:	4601      	mov	r1, r0
 8011174:	6818      	ldr	r0, [r3, #0]
 8011176:	f7ff bfa5 	b.w	80110c4 <_puts_r>
 801117a:	bf00      	nop
 801117c:	20000038 	.word	0x20000038

08011180 <__sread>:
 8011180:	b510      	push	{r4, lr}
 8011182:	460c      	mov	r4, r1
 8011184:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011188:	f000 f90c 	bl	80113a4 <_read_r>
 801118c:	2800      	cmp	r0, #0
 801118e:	bfab      	itete	ge
 8011190:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8011192:	89a3      	ldrhlt	r3, [r4, #12]
 8011194:	181b      	addge	r3, r3, r0
 8011196:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801119a:	bfac      	ite	ge
 801119c:	6563      	strge	r3, [r4, #84]	@ 0x54
 801119e:	81a3      	strhlt	r3, [r4, #12]
 80111a0:	bd10      	pop	{r4, pc}

080111a2 <__swrite>:
 80111a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111a6:	461f      	mov	r7, r3
 80111a8:	898b      	ldrh	r3, [r1, #12]
 80111aa:	05db      	lsls	r3, r3, #23
 80111ac:	4605      	mov	r5, r0
 80111ae:	460c      	mov	r4, r1
 80111b0:	4616      	mov	r6, r2
 80111b2:	d505      	bpl.n	80111c0 <__swrite+0x1e>
 80111b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111b8:	2302      	movs	r3, #2
 80111ba:	2200      	movs	r2, #0
 80111bc:	f000 f8e0 	bl	8011380 <_lseek_r>
 80111c0:	89a3      	ldrh	r3, [r4, #12]
 80111c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80111ca:	81a3      	strh	r3, [r4, #12]
 80111cc:	4632      	mov	r2, r6
 80111ce:	463b      	mov	r3, r7
 80111d0:	4628      	mov	r0, r5
 80111d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111d6:	f000 b907 	b.w	80113e8 <_write_r>

080111da <__sseek>:
 80111da:	b510      	push	{r4, lr}
 80111dc:	460c      	mov	r4, r1
 80111de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111e2:	f000 f8cd 	bl	8011380 <_lseek_r>
 80111e6:	1c43      	adds	r3, r0, #1
 80111e8:	89a3      	ldrh	r3, [r4, #12]
 80111ea:	bf15      	itete	ne
 80111ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80111ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80111f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80111f6:	81a3      	strheq	r3, [r4, #12]
 80111f8:	bf18      	it	ne
 80111fa:	81a3      	strhne	r3, [r4, #12]
 80111fc:	bd10      	pop	{r4, pc}

080111fe <__sclose>:
 80111fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011202:	f000 b8ad 	b.w	8011360 <_close_r>

08011206 <__swbuf_r>:
 8011206:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011208:	460e      	mov	r6, r1
 801120a:	4614      	mov	r4, r2
 801120c:	4605      	mov	r5, r0
 801120e:	b118      	cbz	r0, 8011218 <__swbuf_r+0x12>
 8011210:	6a03      	ldr	r3, [r0, #32]
 8011212:	b90b      	cbnz	r3, 8011218 <__swbuf_r+0x12>
 8011214:	f7ff ff06 	bl	8011024 <__sinit>
 8011218:	69a3      	ldr	r3, [r4, #24]
 801121a:	60a3      	str	r3, [r4, #8]
 801121c:	89a3      	ldrh	r3, [r4, #12]
 801121e:	071a      	lsls	r2, r3, #28
 8011220:	d501      	bpl.n	8011226 <__swbuf_r+0x20>
 8011222:	6923      	ldr	r3, [r4, #16]
 8011224:	b943      	cbnz	r3, 8011238 <__swbuf_r+0x32>
 8011226:	4621      	mov	r1, r4
 8011228:	4628      	mov	r0, r5
 801122a:	f000 f82b 	bl	8011284 <__swsetup_r>
 801122e:	b118      	cbz	r0, 8011238 <__swbuf_r+0x32>
 8011230:	f04f 37ff 	mov.w	r7, #4294967295
 8011234:	4638      	mov	r0, r7
 8011236:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011238:	6823      	ldr	r3, [r4, #0]
 801123a:	6922      	ldr	r2, [r4, #16]
 801123c:	1a98      	subs	r0, r3, r2
 801123e:	6963      	ldr	r3, [r4, #20]
 8011240:	b2f6      	uxtb	r6, r6
 8011242:	4283      	cmp	r3, r0
 8011244:	4637      	mov	r7, r6
 8011246:	dc05      	bgt.n	8011254 <__swbuf_r+0x4e>
 8011248:	4621      	mov	r1, r4
 801124a:	4628      	mov	r0, r5
 801124c:	f000 fca8 	bl	8011ba0 <_fflush_r>
 8011250:	2800      	cmp	r0, #0
 8011252:	d1ed      	bne.n	8011230 <__swbuf_r+0x2a>
 8011254:	68a3      	ldr	r3, [r4, #8]
 8011256:	3b01      	subs	r3, #1
 8011258:	60a3      	str	r3, [r4, #8]
 801125a:	6823      	ldr	r3, [r4, #0]
 801125c:	1c5a      	adds	r2, r3, #1
 801125e:	6022      	str	r2, [r4, #0]
 8011260:	701e      	strb	r6, [r3, #0]
 8011262:	6962      	ldr	r2, [r4, #20]
 8011264:	1c43      	adds	r3, r0, #1
 8011266:	429a      	cmp	r2, r3
 8011268:	d004      	beq.n	8011274 <__swbuf_r+0x6e>
 801126a:	89a3      	ldrh	r3, [r4, #12]
 801126c:	07db      	lsls	r3, r3, #31
 801126e:	d5e1      	bpl.n	8011234 <__swbuf_r+0x2e>
 8011270:	2e0a      	cmp	r6, #10
 8011272:	d1df      	bne.n	8011234 <__swbuf_r+0x2e>
 8011274:	4621      	mov	r1, r4
 8011276:	4628      	mov	r0, r5
 8011278:	f000 fc92 	bl	8011ba0 <_fflush_r>
 801127c:	2800      	cmp	r0, #0
 801127e:	d0d9      	beq.n	8011234 <__swbuf_r+0x2e>
 8011280:	e7d6      	b.n	8011230 <__swbuf_r+0x2a>
	...

08011284 <__swsetup_r>:
 8011284:	b538      	push	{r3, r4, r5, lr}
 8011286:	4b29      	ldr	r3, [pc, #164]	@ (801132c <__swsetup_r+0xa8>)
 8011288:	4605      	mov	r5, r0
 801128a:	6818      	ldr	r0, [r3, #0]
 801128c:	460c      	mov	r4, r1
 801128e:	b118      	cbz	r0, 8011298 <__swsetup_r+0x14>
 8011290:	6a03      	ldr	r3, [r0, #32]
 8011292:	b90b      	cbnz	r3, 8011298 <__swsetup_r+0x14>
 8011294:	f7ff fec6 	bl	8011024 <__sinit>
 8011298:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801129c:	0719      	lsls	r1, r3, #28
 801129e:	d422      	bmi.n	80112e6 <__swsetup_r+0x62>
 80112a0:	06da      	lsls	r2, r3, #27
 80112a2:	d407      	bmi.n	80112b4 <__swsetup_r+0x30>
 80112a4:	2209      	movs	r2, #9
 80112a6:	602a      	str	r2, [r5, #0]
 80112a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80112ac:	81a3      	strh	r3, [r4, #12]
 80112ae:	f04f 30ff 	mov.w	r0, #4294967295
 80112b2:	e033      	b.n	801131c <__swsetup_r+0x98>
 80112b4:	0758      	lsls	r0, r3, #29
 80112b6:	d512      	bpl.n	80112de <__swsetup_r+0x5a>
 80112b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80112ba:	b141      	cbz	r1, 80112ce <__swsetup_r+0x4a>
 80112bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80112c0:	4299      	cmp	r1, r3
 80112c2:	d002      	beq.n	80112ca <__swsetup_r+0x46>
 80112c4:	4628      	mov	r0, r5
 80112c6:	f000 f8cf 	bl	8011468 <_free_r>
 80112ca:	2300      	movs	r3, #0
 80112cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80112ce:	89a3      	ldrh	r3, [r4, #12]
 80112d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80112d4:	81a3      	strh	r3, [r4, #12]
 80112d6:	2300      	movs	r3, #0
 80112d8:	6063      	str	r3, [r4, #4]
 80112da:	6923      	ldr	r3, [r4, #16]
 80112dc:	6023      	str	r3, [r4, #0]
 80112de:	89a3      	ldrh	r3, [r4, #12]
 80112e0:	f043 0308 	orr.w	r3, r3, #8
 80112e4:	81a3      	strh	r3, [r4, #12]
 80112e6:	6923      	ldr	r3, [r4, #16]
 80112e8:	b94b      	cbnz	r3, 80112fe <__swsetup_r+0x7a>
 80112ea:	89a3      	ldrh	r3, [r4, #12]
 80112ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80112f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80112f4:	d003      	beq.n	80112fe <__swsetup_r+0x7a>
 80112f6:	4621      	mov	r1, r4
 80112f8:	4628      	mov	r0, r5
 80112fa:	f000 fc9f 	bl	8011c3c <__smakebuf_r>
 80112fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011302:	f013 0201 	ands.w	r2, r3, #1
 8011306:	d00a      	beq.n	801131e <__swsetup_r+0x9a>
 8011308:	2200      	movs	r2, #0
 801130a:	60a2      	str	r2, [r4, #8]
 801130c:	6962      	ldr	r2, [r4, #20]
 801130e:	4252      	negs	r2, r2
 8011310:	61a2      	str	r2, [r4, #24]
 8011312:	6922      	ldr	r2, [r4, #16]
 8011314:	b942      	cbnz	r2, 8011328 <__swsetup_r+0xa4>
 8011316:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801131a:	d1c5      	bne.n	80112a8 <__swsetup_r+0x24>
 801131c:	bd38      	pop	{r3, r4, r5, pc}
 801131e:	0799      	lsls	r1, r3, #30
 8011320:	bf58      	it	pl
 8011322:	6962      	ldrpl	r2, [r4, #20]
 8011324:	60a2      	str	r2, [r4, #8]
 8011326:	e7f4      	b.n	8011312 <__swsetup_r+0x8e>
 8011328:	2000      	movs	r0, #0
 801132a:	e7f7      	b.n	801131c <__swsetup_r+0x98>
 801132c:	20000038 	.word	0x20000038

08011330 <memcmp>:
 8011330:	b510      	push	{r4, lr}
 8011332:	3901      	subs	r1, #1
 8011334:	4402      	add	r2, r0
 8011336:	4290      	cmp	r0, r2
 8011338:	d101      	bne.n	801133e <memcmp+0xe>
 801133a:	2000      	movs	r0, #0
 801133c:	e005      	b.n	801134a <memcmp+0x1a>
 801133e:	7803      	ldrb	r3, [r0, #0]
 8011340:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011344:	42a3      	cmp	r3, r4
 8011346:	d001      	beq.n	801134c <memcmp+0x1c>
 8011348:	1b18      	subs	r0, r3, r4
 801134a:	bd10      	pop	{r4, pc}
 801134c:	3001      	adds	r0, #1
 801134e:	e7f2      	b.n	8011336 <memcmp+0x6>

08011350 <memset>:
 8011350:	4402      	add	r2, r0
 8011352:	4603      	mov	r3, r0
 8011354:	4293      	cmp	r3, r2
 8011356:	d100      	bne.n	801135a <memset+0xa>
 8011358:	4770      	bx	lr
 801135a:	f803 1b01 	strb.w	r1, [r3], #1
 801135e:	e7f9      	b.n	8011354 <memset+0x4>

08011360 <_close_r>:
 8011360:	b538      	push	{r3, r4, r5, lr}
 8011362:	4d06      	ldr	r5, [pc, #24]	@ (801137c <_close_r+0x1c>)
 8011364:	2300      	movs	r3, #0
 8011366:	4604      	mov	r4, r0
 8011368:	4608      	mov	r0, r1
 801136a:	602b      	str	r3, [r5, #0]
 801136c:	f7f7 f8ed 	bl	800854a <_close>
 8011370:	1c43      	adds	r3, r0, #1
 8011372:	d102      	bne.n	801137a <_close_r+0x1a>
 8011374:	682b      	ldr	r3, [r5, #0]
 8011376:	b103      	cbz	r3, 801137a <_close_r+0x1a>
 8011378:	6023      	str	r3, [r4, #0]
 801137a:	bd38      	pop	{r3, r4, r5, pc}
 801137c:	20000af8 	.word	0x20000af8

08011380 <_lseek_r>:
 8011380:	b538      	push	{r3, r4, r5, lr}
 8011382:	4d07      	ldr	r5, [pc, #28]	@ (80113a0 <_lseek_r+0x20>)
 8011384:	4604      	mov	r4, r0
 8011386:	4608      	mov	r0, r1
 8011388:	4611      	mov	r1, r2
 801138a:	2200      	movs	r2, #0
 801138c:	602a      	str	r2, [r5, #0]
 801138e:	461a      	mov	r2, r3
 8011390:	f7f7 f902 	bl	8008598 <_lseek>
 8011394:	1c43      	adds	r3, r0, #1
 8011396:	d102      	bne.n	801139e <_lseek_r+0x1e>
 8011398:	682b      	ldr	r3, [r5, #0]
 801139a:	b103      	cbz	r3, 801139e <_lseek_r+0x1e>
 801139c:	6023      	str	r3, [r4, #0]
 801139e:	bd38      	pop	{r3, r4, r5, pc}
 80113a0:	20000af8 	.word	0x20000af8

080113a4 <_read_r>:
 80113a4:	b538      	push	{r3, r4, r5, lr}
 80113a6:	4d07      	ldr	r5, [pc, #28]	@ (80113c4 <_read_r+0x20>)
 80113a8:	4604      	mov	r4, r0
 80113aa:	4608      	mov	r0, r1
 80113ac:	4611      	mov	r1, r2
 80113ae:	2200      	movs	r2, #0
 80113b0:	602a      	str	r2, [r5, #0]
 80113b2:	461a      	mov	r2, r3
 80113b4:	f7f7 f8ac 	bl	8008510 <_read>
 80113b8:	1c43      	adds	r3, r0, #1
 80113ba:	d102      	bne.n	80113c2 <_read_r+0x1e>
 80113bc:	682b      	ldr	r3, [r5, #0]
 80113be:	b103      	cbz	r3, 80113c2 <_read_r+0x1e>
 80113c0:	6023      	str	r3, [r4, #0]
 80113c2:	bd38      	pop	{r3, r4, r5, pc}
 80113c4:	20000af8 	.word	0x20000af8

080113c8 <_sbrk_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	4d06      	ldr	r5, [pc, #24]	@ (80113e4 <_sbrk_r+0x1c>)
 80113cc:	2300      	movs	r3, #0
 80113ce:	4604      	mov	r4, r0
 80113d0:	4608      	mov	r0, r1
 80113d2:	602b      	str	r3, [r5, #0]
 80113d4:	f7f7 f8ee 	bl	80085b4 <_sbrk>
 80113d8:	1c43      	adds	r3, r0, #1
 80113da:	d102      	bne.n	80113e2 <_sbrk_r+0x1a>
 80113dc:	682b      	ldr	r3, [r5, #0]
 80113de:	b103      	cbz	r3, 80113e2 <_sbrk_r+0x1a>
 80113e0:	6023      	str	r3, [r4, #0]
 80113e2:	bd38      	pop	{r3, r4, r5, pc}
 80113e4:	20000af8 	.word	0x20000af8

080113e8 <_write_r>:
 80113e8:	b538      	push	{r3, r4, r5, lr}
 80113ea:	4d07      	ldr	r5, [pc, #28]	@ (8011408 <_write_r+0x20>)
 80113ec:	4604      	mov	r4, r0
 80113ee:	4608      	mov	r0, r1
 80113f0:	4611      	mov	r1, r2
 80113f2:	2200      	movs	r2, #0
 80113f4:	602a      	str	r2, [r5, #0]
 80113f6:	461a      	mov	r2, r3
 80113f8:	f7f2 fabc 	bl	8003974 <_write>
 80113fc:	1c43      	adds	r3, r0, #1
 80113fe:	d102      	bne.n	8011406 <_write_r+0x1e>
 8011400:	682b      	ldr	r3, [r5, #0]
 8011402:	b103      	cbz	r3, 8011406 <_write_r+0x1e>
 8011404:	6023      	str	r3, [r4, #0]
 8011406:	bd38      	pop	{r3, r4, r5, pc}
 8011408:	20000af8 	.word	0x20000af8

0801140c <__errno>:
 801140c:	4b01      	ldr	r3, [pc, #4]	@ (8011414 <__errno+0x8>)
 801140e:	6818      	ldr	r0, [r3, #0]
 8011410:	4770      	bx	lr
 8011412:	bf00      	nop
 8011414:	20000038 	.word	0x20000038

08011418 <__libc_init_array>:
 8011418:	b570      	push	{r4, r5, r6, lr}
 801141a:	4d0d      	ldr	r5, [pc, #52]	@ (8011450 <__libc_init_array+0x38>)
 801141c:	4c0d      	ldr	r4, [pc, #52]	@ (8011454 <__libc_init_array+0x3c>)
 801141e:	1b64      	subs	r4, r4, r5
 8011420:	10a4      	asrs	r4, r4, #2
 8011422:	2600      	movs	r6, #0
 8011424:	42a6      	cmp	r6, r4
 8011426:	d109      	bne.n	801143c <__libc_init_array+0x24>
 8011428:	4d0b      	ldr	r5, [pc, #44]	@ (8011458 <__libc_init_array+0x40>)
 801142a:	4c0c      	ldr	r4, [pc, #48]	@ (801145c <__libc_init_array+0x44>)
 801142c:	f000 fc98 	bl	8011d60 <_init>
 8011430:	1b64      	subs	r4, r4, r5
 8011432:	10a4      	asrs	r4, r4, #2
 8011434:	2600      	movs	r6, #0
 8011436:	42a6      	cmp	r6, r4
 8011438:	d105      	bne.n	8011446 <__libc_init_array+0x2e>
 801143a:	bd70      	pop	{r4, r5, r6, pc}
 801143c:	f855 3b04 	ldr.w	r3, [r5], #4
 8011440:	4798      	blx	r3
 8011442:	3601      	adds	r6, #1
 8011444:	e7ee      	b.n	8011424 <__libc_init_array+0xc>
 8011446:	f855 3b04 	ldr.w	r3, [r5], #4
 801144a:	4798      	blx	r3
 801144c:	3601      	adds	r6, #1
 801144e:	e7f2      	b.n	8011436 <__libc_init_array+0x1e>
 8011450:	0801214c 	.word	0x0801214c
 8011454:	0801214c 	.word	0x0801214c
 8011458:	0801214c 	.word	0x0801214c
 801145c:	08012150 	.word	0x08012150

08011460 <__retarget_lock_init_recursive>:
 8011460:	4770      	bx	lr

08011462 <__retarget_lock_acquire_recursive>:
 8011462:	4770      	bx	lr

08011464 <__retarget_lock_release_recursive>:
 8011464:	4770      	bx	lr
	...

08011468 <_free_r>:
 8011468:	b538      	push	{r3, r4, r5, lr}
 801146a:	4605      	mov	r5, r0
 801146c:	2900      	cmp	r1, #0
 801146e:	d041      	beq.n	80114f4 <_free_r+0x8c>
 8011470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011474:	1f0c      	subs	r4, r1, #4
 8011476:	2b00      	cmp	r3, #0
 8011478:	bfb8      	it	lt
 801147a:	18e4      	addlt	r4, r4, r3
 801147c:	f7ff fd3a 	bl	8010ef4 <__malloc_lock>
 8011480:	4a1d      	ldr	r2, [pc, #116]	@ (80114f8 <_free_r+0x90>)
 8011482:	6813      	ldr	r3, [r2, #0]
 8011484:	b933      	cbnz	r3, 8011494 <_free_r+0x2c>
 8011486:	6063      	str	r3, [r4, #4]
 8011488:	6014      	str	r4, [r2, #0]
 801148a:	4628      	mov	r0, r5
 801148c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011490:	f7ff bd36 	b.w	8010f00 <__malloc_unlock>
 8011494:	42a3      	cmp	r3, r4
 8011496:	d908      	bls.n	80114aa <_free_r+0x42>
 8011498:	6820      	ldr	r0, [r4, #0]
 801149a:	1821      	adds	r1, r4, r0
 801149c:	428b      	cmp	r3, r1
 801149e:	bf01      	itttt	eq
 80114a0:	6819      	ldreq	r1, [r3, #0]
 80114a2:	685b      	ldreq	r3, [r3, #4]
 80114a4:	1809      	addeq	r1, r1, r0
 80114a6:	6021      	streq	r1, [r4, #0]
 80114a8:	e7ed      	b.n	8011486 <_free_r+0x1e>
 80114aa:	461a      	mov	r2, r3
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	b10b      	cbz	r3, 80114b4 <_free_r+0x4c>
 80114b0:	42a3      	cmp	r3, r4
 80114b2:	d9fa      	bls.n	80114aa <_free_r+0x42>
 80114b4:	6811      	ldr	r1, [r2, #0]
 80114b6:	1850      	adds	r0, r2, r1
 80114b8:	42a0      	cmp	r0, r4
 80114ba:	d10b      	bne.n	80114d4 <_free_r+0x6c>
 80114bc:	6820      	ldr	r0, [r4, #0]
 80114be:	4401      	add	r1, r0
 80114c0:	1850      	adds	r0, r2, r1
 80114c2:	4283      	cmp	r3, r0
 80114c4:	6011      	str	r1, [r2, #0]
 80114c6:	d1e0      	bne.n	801148a <_free_r+0x22>
 80114c8:	6818      	ldr	r0, [r3, #0]
 80114ca:	685b      	ldr	r3, [r3, #4]
 80114cc:	6053      	str	r3, [r2, #4]
 80114ce:	4408      	add	r0, r1
 80114d0:	6010      	str	r0, [r2, #0]
 80114d2:	e7da      	b.n	801148a <_free_r+0x22>
 80114d4:	d902      	bls.n	80114dc <_free_r+0x74>
 80114d6:	230c      	movs	r3, #12
 80114d8:	602b      	str	r3, [r5, #0]
 80114da:	e7d6      	b.n	801148a <_free_r+0x22>
 80114dc:	6820      	ldr	r0, [r4, #0]
 80114de:	1821      	adds	r1, r4, r0
 80114e0:	428b      	cmp	r3, r1
 80114e2:	bf04      	itt	eq
 80114e4:	6819      	ldreq	r1, [r3, #0]
 80114e6:	685b      	ldreq	r3, [r3, #4]
 80114e8:	6063      	str	r3, [r4, #4]
 80114ea:	bf04      	itt	eq
 80114ec:	1809      	addeq	r1, r1, r0
 80114ee:	6021      	streq	r1, [r4, #0]
 80114f0:	6054      	str	r4, [r2, #4]
 80114f2:	e7ca      	b.n	801148a <_free_r+0x22>
 80114f4:	bd38      	pop	{r3, r4, r5, pc}
 80114f6:	bf00      	nop
 80114f8:	200009b8 	.word	0x200009b8

080114fc <__sfputc_r>:
 80114fc:	6893      	ldr	r3, [r2, #8]
 80114fe:	3b01      	subs	r3, #1
 8011500:	2b00      	cmp	r3, #0
 8011502:	b410      	push	{r4}
 8011504:	6093      	str	r3, [r2, #8]
 8011506:	da08      	bge.n	801151a <__sfputc_r+0x1e>
 8011508:	6994      	ldr	r4, [r2, #24]
 801150a:	42a3      	cmp	r3, r4
 801150c:	db01      	blt.n	8011512 <__sfputc_r+0x16>
 801150e:	290a      	cmp	r1, #10
 8011510:	d103      	bne.n	801151a <__sfputc_r+0x1e>
 8011512:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011516:	f7ff be76 	b.w	8011206 <__swbuf_r>
 801151a:	6813      	ldr	r3, [r2, #0]
 801151c:	1c58      	adds	r0, r3, #1
 801151e:	6010      	str	r0, [r2, #0]
 8011520:	7019      	strb	r1, [r3, #0]
 8011522:	4608      	mov	r0, r1
 8011524:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011528:	4770      	bx	lr

0801152a <__sfputs_r>:
 801152a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152c:	4606      	mov	r6, r0
 801152e:	460f      	mov	r7, r1
 8011530:	4614      	mov	r4, r2
 8011532:	18d5      	adds	r5, r2, r3
 8011534:	42ac      	cmp	r4, r5
 8011536:	d101      	bne.n	801153c <__sfputs_r+0x12>
 8011538:	2000      	movs	r0, #0
 801153a:	e007      	b.n	801154c <__sfputs_r+0x22>
 801153c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011540:	463a      	mov	r2, r7
 8011542:	4630      	mov	r0, r6
 8011544:	f7ff ffda 	bl	80114fc <__sfputc_r>
 8011548:	1c43      	adds	r3, r0, #1
 801154a:	d1f3      	bne.n	8011534 <__sfputs_r+0xa>
 801154c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08011550 <_vfiprintf_r>:
 8011550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011554:	460d      	mov	r5, r1
 8011556:	b09d      	sub	sp, #116	@ 0x74
 8011558:	4614      	mov	r4, r2
 801155a:	4698      	mov	r8, r3
 801155c:	4606      	mov	r6, r0
 801155e:	b118      	cbz	r0, 8011568 <_vfiprintf_r+0x18>
 8011560:	6a03      	ldr	r3, [r0, #32]
 8011562:	b90b      	cbnz	r3, 8011568 <_vfiprintf_r+0x18>
 8011564:	f7ff fd5e 	bl	8011024 <__sinit>
 8011568:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801156a:	07d9      	lsls	r1, r3, #31
 801156c:	d405      	bmi.n	801157a <_vfiprintf_r+0x2a>
 801156e:	89ab      	ldrh	r3, [r5, #12]
 8011570:	059a      	lsls	r2, r3, #22
 8011572:	d402      	bmi.n	801157a <_vfiprintf_r+0x2a>
 8011574:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8011576:	f7ff ff74 	bl	8011462 <__retarget_lock_acquire_recursive>
 801157a:	89ab      	ldrh	r3, [r5, #12]
 801157c:	071b      	lsls	r3, r3, #28
 801157e:	d501      	bpl.n	8011584 <_vfiprintf_r+0x34>
 8011580:	692b      	ldr	r3, [r5, #16]
 8011582:	b99b      	cbnz	r3, 80115ac <_vfiprintf_r+0x5c>
 8011584:	4629      	mov	r1, r5
 8011586:	4630      	mov	r0, r6
 8011588:	f7ff fe7c 	bl	8011284 <__swsetup_r>
 801158c:	b170      	cbz	r0, 80115ac <_vfiprintf_r+0x5c>
 801158e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8011590:	07dc      	lsls	r4, r3, #31
 8011592:	d504      	bpl.n	801159e <_vfiprintf_r+0x4e>
 8011594:	f04f 30ff 	mov.w	r0, #4294967295
 8011598:	b01d      	add	sp, #116	@ 0x74
 801159a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801159e:	89ab      	ldrh	r3, [r5, #12]
 80115a0:	0598      	lsls	r0, r3, #22
 80115a2:	d4f7      	bmi.n	8011594 <_vfiprintf_r+0x44>
 80115a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80115a6:	f7ff ff5d 	bl	8011464 <__retarget_lock_release_recursive>
 80115aa:	e7f3      	b.n	8011594 <_vfiprintf_r+0x44>
 80115ac:	2300      	movs	r3, #0
 80115ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80115b0:	2320      	movs	r3, #32
 80115b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80115b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80115ba:	2330      	movs	r3, #48	@ 0x30
 80115bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801176c <_vfiprintf_r+0x21c>
 80115c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80115c4:	f04f 0901 	mov.w	r9, #1
 80115c8:	4623      	mov	r3, r4
 80115ca:	469a      	mov	sl, r3
 80115cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80115d0:	b10a      	cbz	r2, 80115d6 <_vfiprintf_r+0x86>
 80115d2:	2a25      	cmp	r2, #37	@ 0x25
 80115d4:	d1f9      	bne.n	80115ca <_vfiprintf_r+0x7a>
 80115d6:	ebba 0b04 	subs.w	fp, sl, r4
 80115da:	d00b      	beq.n	80115f4 <_vfiprintf_r+0xa4>
 80115dc:	465b      	mov	r3, fp
 80115de:	4622      	mov	r2, r4
 80115e0:	4629      	mov	r1, r5
 80115e2:	4630      	mov	r0, r6
 80115e4:	f7ff ffa1 	bl	801152a <__sfputs_r>
 80115e8:	3001      	adds	r0, #1
 80115ea:	f000 80a7 	beq.w	801173c <_vfiprintf_r+0x1ec>
 80115ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80115f0:	445a      	add	r2, fp
 80115f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80115f4:	f89a 3000 	ldrb.w	r3, [sl]
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	f000 809f 	beq.w	801173c <_vfiprintf_r+0x1ec>
 80115fe:	2300      	movs	r3, #0
 8011600:	f04f 32ff 	mov.w	r2, #4294967295
 8011604:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011608:	f10a 0a01 	add.w	sl, sl, #1
 801160c:	9304      	str	r3, [sp, #16]
 801160e:	9307      	str	r3, [sp, #28]
 8011610:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8011614:	931a      	str	r3, [sp, #104]	@ 0x68
 8011616:	4654      	mov	r4, sl
 8011618:	2205      	movs	r2, #5
 801161a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801161e:	4853      	ldr	r0, [pc, #332]	@ (801176c <_vfiprintf_r+0x21c>)
 8011620:	f7ee fdd6 	bl	80001d0 <memchr>
 8011624:	9a04      	ldr	r2, [sp, #16]
 8011626:	b9d8      	cbnz	r0, 8011660 <_vfiprintf_r+0x110>
 8011628:	06d1      	lsls	r1, r2, #27
 801162a:	bf44      	itt	mi
 801162c:	2320      	movmi	r3, #32
 801162e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8011632:	0713      	lsls	r3, r2, #28
 8011634:	bf44      	itt	mi
 8011636:	232b      	movmi	r3, #43	@ 0x2b
 8011638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801163c:	f89a 3000 	ldrb.w	r3, [sl]
 8011640:	2b2a      	cmp	r3, #42	@ 0x2a
 8011642:	d015      	beq.n	8011670 <_vfiprintf_r+0x120>
 8011644:	9a07      	ldr	r2, [sp, #28]
 8011646:	4654      	mov	r4, sl
 8011648:	2000      	movs	r0, #0
 801164a:	f04f 0c0a 	mov.w	ip, #10
 801164e:	4621      	mov	r1, r4
 8011650:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011654:	3b30      	subs	r3, #48	@ 0x30
 8011656:	2b09      	cmp	r3, #9
 8011658:	d94b      	bls.n	80116f2 <_vfiprintf_r+0x1a2>
 801165a:	b1b0      	cbz	r0, 801168a <_vfiprintf_r+0x13a>
 801165c:	9207      	str	r2, [sp, #28]
 801165e:	e014      	b.n	801168a <_vfiprintf_r+0x13a>
 8011660:	eba0 0308 	sub.w	r3, r0, r8
 8011664:	fa09 f303 	lsl.w	r3, r9, r3
 8011668:	4313      	orrs	r3, r2
 801166a:	9304      	str	r3, [sp, #16]
 801166c:	46a2      	mov	sl, r4
 801166e:	e7d2      	b.n	8011616 <_vfiprintf_r+0xc6>
 8011670:	9b03      	ldr	r3, [sp, #12]
 8011672:	1d19      	adds	r1, r3, #4
 8011674:	681b      	ldr	r3, [r3, #0]
 8011676:	9103      	str	r1, [sp, #12]
 8011678:	2b00      	cmp	r3, #0
 801167a:	bfbb      	ittet	lt
 801167c:	425b      	neglt	r3, r3
 801167e:	f042 0202 	orrlt.w	r2, r2, #2
 8011682:	9307      	strge	r3, [sp, #28]
 8011684:	9307      	strlt	r3, [sp, #28]
 8011686:	bfb8      	it	lt
 8011688:	9204      	strlt	r2, [sp, #16]
 801168a:	7823      	ldrb	r3, [r4, #0]
 801168c:	2b2e      	cmp	r3, #46	@ 0x2e
 801168e:	d10a      	bne.n	80116a6 <_vfiprintf_r+0x156>
 8011690:	7863      	ldrb	r3, [r4, #1]
 8011692:	2b2a      	cmp	r3, #42	@ 0x2a
 8011694:	d132      	bne.n	80116fc <_vfiprintf_r+0x1ac>
 8011696:	9b03      	ldr	r3, [sp, #12]
 8011698:	1d1a      	adds	r2, r3, #4
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	9203      	str	r2, [sp, #12]
 801169e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80116a2:	3402      	adds	r4, #2
 80116a4:	9305      	str	r3, [sp, #20]
 80116a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801177c <_vfiprintf_r+0x22c>
 80116aa:	7821      	ldrb	r1, [r4, #0]
 80116ac:	2203      	movs	r2, #3
 80116ae:	4650      	mov	r0, sl
 80116b0:	f7ee fd8e 	bl	80001d0 <memchr>
 80116b4:	b138      	cbz	r0, 80116c6 <_vfiprintf_r+0x176>
 80116b6:	9b04      	ldr	r3, [sp, #16]
 80116b8:	eba0 000a 	sub.w	r0, r0, sl
 80116bc:	2240      	movs	r2, #64	@ 0x40
 80116be:	4082      	lsls	r2, r0
 80116c0:	4313      	orrs	r3, r2
 80116c2:	3401      	adds	r4, #1
 80116c4:	9304      	str	r3, [sp, #16]
 80116c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80116ca:	4829      	ldr	r0, [pc, #164]	@ (8011770 <_vfiprintf_r+0x220>)
 80116cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80116d0:	2206      	movs	r2, #6
 80116d2:	f7ee fd7d 	bl	80001d0 <memchr>
 80116d6:	2800      	cmp	r0, #0
 80116d8:	d03f      	beq.n	801175a <_vfiprintf_r+0x20a>
 80116da:	4b26      	ldr	r3, [pc, #152]	@ (8011774 <_vfiprintf_r+0x224>)
 80116dc:	bb1b      	cbnz	r3, 8011726 <_vfiprintf_r+0x1d6>
 80116de:	9b03      	ldr	r3, [sp, #12]
 80116e0:	3307      	adds	r3, #7
 80116e2:	f023 0307 	bic.w	r3, r3, #7
 80116e6:	3308      	adds	r3, #8
 80116e8:	9303      	str	r3, [sp, #12]
 80116ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80116ec:	443b      	add	r3, r7
 80116ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80116f0:	e76a      	b.n	80115c8 <_vfiprintf_r+0x78>
 80116f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80116f6:	460c      	mov	r4, r1
 80116f8:	2001      	movs	r0, #1
 80116fa:	e7a8      	b.n	801164e <_vfiprintf_r+0xfe>
 80116fc:	2300      	movs	r3, #0
 80116fe:	3401      	adds	r4, #1
 8011700:	9305      	str	r3, [sp, #20]
 8011702:	4619      	mov	r1, r3
 8011704:	f04f 0c0a 	mov.w	ip, #10
 8011708:	4620      	mov	r0, r4
 801170a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801170e:	3a30      	subs	r2, #48	@ 0x30
 8011710:	2a09      	cmp	r2, #9
 8011712:	d903      	bls.n	801171c <_vfiprintf_r+0x1cc>
 8011714:	2b00      	cmp	r3, #0
 8011716:	d0c6      	beq.n	80116a6 <_vfiprintf_r+0x156>
 8011718:	9105      	str	r1, [sp, #20]
 801171a:	e7c4      	b.n	80116a6 <_vfiprintf_r+0x156>
 801171c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011720:	4604      	mov	r4, r0
 8011722:	2301      	movs	r3, #1
 8011724:	e7f0      	b.n	8011708 <_vfiprintf_r+0x1b8>
 8011726:	ab03      	add	r3, sp, #12
 8011728:	9300      	str	r3, [sp, #0]
 801172a:	462a      	mov	r2, r5
 801172c:	4b12      	ldr	r3, [pc, #72]	@ (8011778 <_vfiprintf_r+0x228>)
 801172e:	a904      	add	r1, sp, #16
 8011730:	4630      	mov	r0, r6
 8011732:	f3af 8000 	nop.w
 8011736:	4607      	mov	r7, r0
 8011738:	1c78      	adds	r0, r7, #1
 801173a:	d1d6      	bne.n	80116ea <_vfiprintf_r+0x19a>
 801173c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801173e:	07d9      	lsls	r1, r3, #31
 8011740:	d405      	bmi.n	801174e <_vfiprintf_r+0x1fe>
 8011742:	89ab      	ldrh	r3, [r5, #12]
 8011744:	059a      	lsls	r2, r3, #22
 8011746:	d402      	bmi.n	801174e <_vfiprintf_r+0x1fe>
 8011748:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801174a:	f7ff fe8b 	bl	8011464 <__retarget_lock_release_recursive>
 801174e:	89ab      	ldrh	r3, [r5, #12]
 8011750:	065b      	lsls	r3, r3, #25
 8011752:	f53f af1f 	bmi.w	8011594 <_vfiprintf_r+0x44>
 8011756:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011758:	e71e      	b.n	8011598 <_vfiprintf_r+0x48>
 801175a:	ab03      	add	r3, sp, #12
 801175c:	9300      	str	r3, [sp, #0]
 801175e:	462a      	mov	r2, r5
 8011760:	4b05      	ldr	r3, [pc, #20]	@ (8011778 <_vfiprintf_r+0x228>)
 8011762:	a904      	add	r1, sp, #16
 8011764:	4630      	mov	r0, r6
 8011766:	f000 f879 	bl	801185c <_printf_i>
 801176a:	e7e4      	b.n	8011736 <_vfiprintf_r+0x1e6>
 801176c:	08012110 	.word	0x08012110
 8011770:	0801211a 	.word	0x0801211a
 8011774:	00000000 	.word	0x00000000
 8011778:	0801152b 	.word	0x0801152b
 801177c:	08012116 	.word	0x08012116

08011780 <_printf_common>:
 8011780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011784:	4616      	mov	r6, r2
 8011786:	4698      	mov	r8, r3
 8011788:	688a      	ldr	r2, [r1, #8]
 801178a:	690b      	ldr	r3, [r1, #16]
 801178c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8011790:	4293      	cmp	r3, r2
 8011792:	bfb8      	it	lt
 8011794:	4613      	movlt	r3, r2
 8011796:	6033      	str	r3, [r6, #0]
 8011798:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801179c:	4607      	mov	r7, r0
 801179e:	460c      	mov	r4, r1
 80117a0:	b10a      	cbz	r2, 80117a6 <_printf_common+0x26>
 80117a2:	3301      	adds	r3, #1
 80117a4:	6033      	str	r3, [r6, #0]
 80117a6:	6823      	ldr	r3, [r4, #0]
 80117a8:	0699      	lsls	r1, r3, #26
 80117aa:	bf42      	ittt	mi
 80117ac:	6833      	ldrmi	r3, [r6, #0]
 80117ae:	3302      	addmi	r3, #2
 80117b0:	6033      	strmi	r3, [r6, #0]
 80117b2:	6825      	ldr	r5, [r4, #0]
 80117b4:	f015 0506 	ands.w	r5, r5, #6
 80117b8:	d106      	bne.n	80117c8 <_printf_common+0x48>
 80117ba:	f104 0a19 	add.w	sl, r4, #25
 80117be:	68e3      	ldr	r3, [r4, #12]
 80117c0:	6832      	ldr	r2, [r6, #0]
 80117c2:	1a9b      	subs	r3, r3, r2
 80117c4:	42ab      	cmp	r3, r5
 80117c6:	dc26      	bgt.n	8011816 <_printf_common+0x96>
 80117c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80117cc:	6822      	ldr	r2, [r4, #0]
 80117ce:	3b00      	subs	r3, #0
 80117d0:	bf18      	it	ne
 80117d2:	2301      	movne	r3, #1
 80117d4:	0692      	lsls	r2, r2, #26
 80117d6:	d42b      	bmi.n	8011830 <_printf_common+0xb0>
 80117d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80117dc:	4641      	mov	r1, r8
 80117de:	4638      	mov	r0, r7
 80117e0:	47c8      	blx	r9
 80117e2:	3001      	adds	r0, #1
 80117e4:	d01e      	beq.n	8011824 <_printf_common+0xa4>
 80117e6:	6823      	ldr	r3, [r4, #0]
 80117e8:	6922      	ldr	r2, [r4, #16]
 80117ea:	f003 0306 	and.w	r3, r3, #6
 80117ee:	2b04      	cmp	r3, #4
 80117f0:	bf02      	ittt	eq
 80117f2:	68e5      	ldreq	r5, [r4, #12]
 80117f4:	6833      	ldreq	r3, [r6, #0]
 80117f6:	1aed      	subeq	r5, r5, r3
 80117f8:	68a3      	ldr	r3, [r4, #8]
 80117fa:	bf0c      	ite	eq
 80117fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011800:	2500      	movne	r5, #0
 8011802:	4293      	cmp	r3, r2
 8011804:	bfc4      	itt	gt
 8011806:	1a9b      	subgt	r3, r3, r2
 8011808:	18ed      	addgt	r5, r5, r3
 801180a:	2600      	movs	r6, #0
 801180c:	341a      	adds	r4, #26
 801180e:	42b5      	cmp	r5, r6
 8011810:	d11a      	bne.n	8011848 <_printf_common+0xc8>
 8011812:	2000      	movs	r0, #0
 8011814:	e008      	b.n	8011828 <_printf_common+0xa8>
 8011816:	2301      	movs	r3, #1
 8011818:	4652      	mov	r2, sl
 801181a:	4641      	mov	r1, r8
 801181c:	4638      	mov	r0, r7
 801181e:	47c8      	blx	r9
 8011820:	3001      	adds	r0, #1
 8011822:	d103      	bne.n	801182c <_printf_common+0xac>
 8011824:	f04f 30ff 	mov.w	r0, #4294967295
 8011828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801182c:	3501      	adds	r5, #1
 801182e:	e7c6      	b.n	80117be <_printf_common+0x3e>
 8011830:	18e1      	adds	r1, r4, r3
 8011832:	1c5a      	adds	r2, r3, #1
 8011834:	2030      	movs	r0, #48	@ 0x30
 8011836:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801183a:	4422      	add	r2, r4
 801183c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8011840:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8011844:	3302      	adds	r3, #2
 8011846:	e7c7      	b.n	80117d8 <_printf_common+0x58>
 8011848:	2301      	movs	r3, #1
 801184a:	4622      	mov	r2, r4
 801184c:	4641      	mov	r1, r8
 801184e:	4638      	mov	r0, r7
 8011850:	47c8      	blx	r9
 8011852:	3001      	adds	r0, #1
 8011854:	d0e6      	beq.n	8011824 <_printf_common+0xa4>
 8011856:	3601      	adds	r6, #1
 8011858:	e7d9      	b.n	801180e <_printf_common+0x8e>
	...

0801185c <_printf_i>:
 801185c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011860:	7e0f      	ldrb	r7, [r1, #24]
 8011862:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8011864:	2f78      	cmp	r7, #120	@ 0x78
 8011866:	4691      	mov	r9, r2
 8011868:	4680      	mov	r8, r0
 801186a:	460c      	mov	r4, r1
 801186c:	469a      	mov	sl, r3
 801186e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8011872:	d807      	bhi.n	8011884 <_printf_i+0x28>
 8011874:	2f62      	cmp	r7, #98	@ 0x62
 8011876:	d80a      	bhi.n	801188e <_printf_i+0x32>
 8011878:	2f00      	cmp	r7, #0
 801187a:	f000 80d1 	beq.w	8011a20 <_printf_i+0x1c4>
 801187e:	2f58      	cmp	r7, #88	@ 0x58
 8011880:	f000 80b8 	beq.w	80119f4 <_printf_i+0x198>
 8011884:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011888:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801188c:	e03a      	b.n	8011904 <_printf_i+0xa8>
 801188e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8011892:	2b15      	cmp	r3, #21
 8011894:	d8f6      	bhi.n	8011884 <_printf_i+0x28>
 8011896:	a101      	add	r1, pc, #4	@ (adr r1, 801189c <_printf_i+0x40>)
 8011898:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801189c:	080118f5 	.word	0x080118f5
 80118a0:	08011909 	.word	0x08011909
 80118a4:	08011885 	.word	0x08011885
 80118a8:	08011885 	.word	0x08011885
 80118ac:	08011885 	.word	0x08011885
 80118b0:	08011885 	.word	0x08011885
 80118b4:	08011909 	.word	0x08011909
 80118b8:	08011885 	.word	0x08011885
 80118bc:	08011885 	.word	0x08011885
 80118c0:	08011885 	.word	0x08011885
 80118c4:	08011885 	.word	0x08011885
 80118c8:	08011a07 	.word	0x08011a07
 80118cc:	08011933 	.word	0x08011933
 80118d0:	080119c1 	.word	0x080119c1
 80118d4:	08011885 	.word	0x08011885
 80118d8:	08011885 	.word	0x08011885
 80118dc:	08011a29 	.word	0x08011a29
 80118e0:	08011885 	.word	0x08011885
 80118e4:	08011933 	.word	0x08011933
 80118e8:	08011885 	.word	0x08011885
 80118ec:	08011885 	.word	0x08011885
 80118f0:	080119c9 	.word	0x080119c9
 80118f4:	6833      	ldr	r3, [r6, #0]
 80118f6:	1d1a      	adds	r2, r3, #4
 80118f8:	681b      	ldr	r3, [r3, #0]
 80118fa:	6032      	str	r2, [r6, #0]
 80118fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8011900:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8011904:	2301      	movs	r3, #1
 8011906:	e09c      	b.n	8011a42 <_printf_i+0x1e6>
 8011908:	6833      	ldr	r3, [r6, #0]
 801190a:	6820      	ldr	r0, [r4, #0]
 801190c:	1d19      	adds	r1, r3, #4
 801190e:	6031      	str	r1, [r6, #0]
 8011910:	0606      	lsls	r6, r0, #24
 8011912:	d501      	bpl.n	8011918 <_printf_i+0xbc>
 8011914:	681d      	ldr	r5, [r3, #0]
 8011916:	e003      	b.n	8011920 <_printf_i+0xc4>
 8011918:	0645      	lsls	r5, r0, #25
 801191a:	d5fb      	bpl.n	8011914 <_printf_i+0xb8>
 801191c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8011920:	2d00      	cmp	r5, #0
 8011922:	da03      	bge.n	801192c <_printf_i+0xd0>
 8011924:	232d      	movs	r3, #45	@ 0x2d
 8011926:	426d      	negs	r5, r5
 8011928:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801192c:	4858      	ldr	r0, [pc, #352]	@ (8011a90 <_printf_i+0x234>)
 801192e:	230a      	movs	r3, #10
 8011930:	e011      	b.n	8011956 <_printf_i+0xfa>
 8011932:	6821      	ldr	r1, [r4, #0]
 8011934:	6833      	ldr	r3, [r6, #0]
 8011936:	0608      	lsls	r0, r1, #24
 8011938:	f853 5b04 	ldr.w	r5, [r3], #4
 801193c:	d402      	bmi.n	8011944 <_printf_i+0xe8>
 801193e:	0649      	lsls	r1, r1, #25
 8011940:	bf48      	it	mi
 8011942:	b2ad      	uxthmi	r5, r5
 8011944:	2f6f      	cmp	r7, #111	@ 0x6f
 8011946:	4852      	ldr	r0, [pc, #328]	@ (8011a90 <_printf_i+0x234>)
 8011948:	6033      	str	r3, [r6, #0]
 801194a:	bf14      	ite	ne
 801194c:	230a      	movne	r3, #10
 801194e:	2308      	moveq	r3, #8
 8011950:	2100      	movs	r1, #0
 8011952:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8011956:	6866      	ldr	r6, [r4, #4]
 8011958:	60a6      	str	r6, [r4, #8]
 801195a:	2e00      	cmp	r6, #0
 801195c:	db05      	blt.n	801196a <_printf_i+0x10e>
 801195e:	6821      	ldr	r1, [r4, #0]
 8011960:	432e      	orrs	r6, r5
 8011962:	f021 0104 	bic.w	r1, r1, #4
 8011966:	6021      	str	r1, [r4, #0]
 8011968:	d04b      	beq.n	8011a02 <_printf_i+0x1a6>
 801196a:	4616      	mov	r6, r2
 801196c:	fbb5 f1f3 	udiv	r1, r5, r3
 8011970:	fb03 5711 	mls	r7, r3, r1, r5
 8011974:	5dc7      	ldrb	r7, [r0, r7]
 8011976:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801197a:	462f      	mov	r7, r5
 801197c:	42bb      	cmp	r3, r7
 801197e:	460d      	mov	r5, r1
 8011980:	d9f4      	bls.n	801196c <_printf_i+0x110>
 8011982:	2b08      	cmp	r3, #8
 8011984:	d10b      	bne.n	801199e <_printf_i+0x142>
 8011986:	6823      	ldr	r3, [r4, #0]
 8011988:	07df      	lsls	r7, r3, #31
 801198a:	d508      	bpl.n	801199e <_printf_i+0x142>
 801198c:	6923      	ldr	r3, [r4, #16]
 801198e:	6861      	ldr	r1, [r4, #4]
 8011990:	4299      	cmp	r1, r3
 8011992:	bfde      	ittt	le
 8011994:	2330      	movle	r3, #48	@ 0x30
 8011996:	f806 3c01 	strble.w	r3, [r6, #-1]
 801199a:	f106 36ff 	addle.w	r6, r6, #4294967295
 801199e:	1b92      	subs	r2, r2, r6
 80119a0:	6122      	str	r2, [r4, #16]
 80119a2:	f8cd a000 	str.w	sl, [sp]
 80119a6:	464b      	mov	r3, r9
 80119a8:	aa03      	add	r2, sp, #12
 80119aa:	4621      	mov	r1, r4
 80119ac:	4640      	mov	r0, r8
 80119ae:	f7ff fee7 	bl	8011780 <_printf_common>
 80119b2:	3001      	adds	r0, #1
 80119b4:	d14a      	bne.n	8011a4c <_printf_i+0x1f0>
 80119b6:	f04f 30ff 	mov.w	r0, #4294967295
 80119ba:	b004      	add	sp, #16
 80119bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119c0:	6823      	ldr	r3, [r4, #0]
 80119c2:	f043 0320 	orr.w	r3, r3, #32
 80119c6:	6023      	str	r3, [r4, #0]
 80119c8:	4832      	ldr	r0, [pc, #200]	@ (8011a94 <_printf_i+0x238>)
 80119ca:	2778      	movs	r7, #120	@ 0x78
 80119cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80119d0:	6823      	ldr	r3, [r4, #0]
 80119d2:	6831      	ldr	r1, [r6, #0]
 80119d4:	061f      	lsls	r7, r3, #24
 80119d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80119da:	d402      	bmi.n	80119e2 <_printf_i+0x186>
 80119dc:	065f      	lsls	r7, r3, #25
 80119de:	bf48      	it	mi
 80119e0:	b2ad      	uxthmi	r5, r5
 80119e2:	6031      	str	r1, [r6, #0]
 80119e4:	07d9      	lsls	r1, r3, #31
 80119e6:	bf44      	itt	mi
 80119e8:	f043 0320 	orrmi.w	r3, r3, #32
 80119ec:	6023      	strmi	r3, [r4, #0]
 80119ee:	b11d      	cbz	r5, 80119f8 <_printf_i+0x19c>
 80119f0:	2310      	movs	r3, #16
 80119f2:	e7ad      	b.n	8011950 <_printf_i+0xf4>
 80119f4:	4826      	ldr	r0, [pc, #152]	@ (8011a90 <_printf_i+0x234>)
 80119f6:	e7e9      	b.n	80119cc <_printf_i+0x170>
 80119f8:	6823      	ldr	r3, [r4, #0]
 80119fa:	f023 0320 	bic.w	r3, r3, #32
 80119fe:	6023      	str	r3, [r4, #0]
 8011a00:	e7f6      	b.n	80119f0 <_printf_i+0x194>
 8011a02:	4616      	mov	r6, r2
 8011a04:	e7bd      	b.n	8011982 <_printf_i+0x126>
 8011a06:	6833      	ldr	r3, [r6, #0]
 8011a08:	6825      	ldr	r5, [r4, #0]
 8011a0a:	6961      	ldr	r1, [r4, #20]
 8011a0c:	1d18      	adds	r0, r3, #4
 8011a0e:	6030      	str	r0, [r6, #0]
 8011a10:	062e      	lsls	r6, r5, #24
 8011a12:	681b      	ldr	r3, [r3, #0]
 8011a14:	d501      	bpl.n	8011a1a <_printf_i+0x1be>
 8011a16:	6019      	str	r1, [r3, #0]
 8011a18:	e002      	b.n	8011a20 <_printf_i+0x1c4>
 8011a1a:	0668      	lsls	r0, r5, #25
 8011a1c:	d5fb      	bpl.n	8011a16 <_printf_i+0x1ba>
 8011a1e:	8019      	strh	r1, [r3, #0]
 8011a20:	2300      	movs	r3, #0
 8011a22:	6123      	str	r3, [r4, #16]
 8011a24:	4616      	mov	r6, r2
 8011a26:	e7bc      	b.n	80119a2 <_printf_i+0x146>
 8011a28:	6833      	ldr	r3, [r6, #0]
 8011a2a:	1d1a      	adds	r2, r3, #4
 8011a2c:	6032      	str	r2, [r6, #0]
 8011a2e:	681e      	ldr	r6, [r3, #0]
 8011a30:	6862      	ldr	r2, [r4, #4]
 8011a32:	2100      	movs	r1, #0
 8011a34:	4630      	mov	r0, r6
 8011a36:	f7ee fbcb 	bl	80001d0 <memchr>
 8011a3a:	b108      	cbz	r0, 8011a40 <_printf_i+0x1e4>
 8011a3c:	1b80      	subs	r0, r0, r6
 8011a3e:	6060      	str	r0, [r4, #4]
 8011a40:	6863      	ldr	r3, [r4, #4]
 8011a42:	6123      	str	r3, [r4, #16]
 8011a44:	2300      	movs	r3, #0
 8011a46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8011a4a:	e7aa      	b.n	80119a2 <_printf_i+0x146>
 8011a4c:	6923      	ldr	r3, [r4, #16]
 8011a4e:	4632      	mov	r2, r6
 8011a50:	4649      	mov	r1, r9
 8011a52:	4640      	mov	r0, r8
 8011a54:	47d0      	blx	sl
 8011a56:	3001      	adds	r0, #1
 8011a58:	d0ad      	beq.n	80119b6 <_printf_i+0x15a>
 8011a5a:	6823      	ldr	r3, [r4, #0]
 8011a5c:	079b      	lsls	r3, r3, #30
 8011a5e:	d413      	bmi.n	8011a88 <_printf_i+0x22c>
 8011a60:	68e0      	ldr	r0, [r4, #12]
 8011a62:	9b03      	ldr	r3, [sp, #12]
 8011a64:	4298      	cmp	r0, r3
 8011a66:	bfb8      	it	lt
 8011a68:	4618      	movlt	r0, r3
 8011a6a:	e7a6      	b.n	80119ba <_printf_i+0x15e>
 8011a6c:	2301      	movs	r3, #1
 8011a6e:	4632      	mov	r2, r6
 8011a70:	4649      	mov	r1, r9
 8011a72:	4640      	mov	r0, r8
 8011a74:	47d0      	blx	sl
 8011a76:	3001      	adds	r0, #1
 8011a78:	d09d      	beq.n	80119b6 <_printf_i+0x15a>
 8011a7a:	3501      	adds	r5, #1
 8011a7c:	68e3      	ldr	r3, [r4, #12]
 8011a7e:	9903      	ldr	r1, [sp, #12]
 8011a80:	1a5b      	subs	r3, r3, r1
 8011a82:	42ab      	cmp	r3, r5
 8011a84:	dcf2      	bgt.n	8011a6c <_printf_i+0x210>
 8011a86:	e7eb      	b.n	8011a60 <_printf_i+0x204>
 8011a88:	2500      	movs	r5, #0
 8011a8a:	f104 0619 	add.w	r6, r4, #25
 8011a8e:	e7f5      	b.n	8011a7c <_printf_i+0x220>
 8011a90:	08012121 	.word	0x08012121
 8011a94:	08012132 	.word	0x08012132

08011a98 <__sflush_r>:
 8011a98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8011a9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011aa0:	0716      	lsls	r6, r2, #28
 8011aa2:	4605      	mov	r5, r0
 8011aa4:	460c      	mov	r4, r1
 8011aa6:	d454      	bmi.n	8011b52 <__sflush_r+0xba>
 8011aa8:	684b      	ldr	r3, [r1, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	dc02      	bgt.n	8011ab4 <__sflush_r+0x1c>
 8011aae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	dd48      	ble.n	8011b46 <__sflush_r+0xae>
 8011ab4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ab6:	2e00      	cmp	r6, #0
 8011ab8:	d045      	beq.n	8011b46 <__sflush_r+0xae>
 8011aba:	2300      	movs	r3, #0
 8011abc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8011ac0:	682f      	ldr	r7, [r5, #0]
 8011ac2:	6a21      	ldr	r1, [r4, #32]
 8011ac4:	602b      	str	r3, [r5, #0]
 8011ac6:	d030      	beq.n	8011b2a <__sflush_r+0x92>
 8011ac8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011aca:	89a3      	ldrh	r3, [r4, #12]
 8011acc:	0759      	lsls	r1, r3, #29
 8011ace:	d505      	bpl.n	8011adc <__sflush_r+0x44>
 8011ad0:	6863      	ldr	r3, [r4, #4]
 8011ad2:	1ad2      	subs	r2, r2, r3
 8011ad4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011ad6:	b10b      	cbz	r3, 8011adc <__sflush_r+0x44>
 8011ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011ada:	1ad2      	subs	r2, r2, r3
 8011adc:	2300      	movs	r3, #0
 8011ade:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011ae0:	6a21      	ldr	r1, [r4, #32]
 8011ae2:	4628      	mov	r0, r5
 8011ae4:	47b0      	blx	r6
 8011ae6:	1c43      	adds	r3, r0, #1
 8011ae8:	89a3      	ldrh	r3, [r4, #12]
 8011aea:	d106      	bne.n	8011afa <__sflush_r+0x62>
 8011aec:	6829      	ldr	r1, [r5, #0]
 8011aee:	291d      	cmp	r1, #29
 8011af0:	d82b      	bhi.n	8011b4a <__sflush_r+0xb2>
 8011af2:	4a2a      	ldr	r2, [pc, #168]	@ (8011b9c <__sflush_r+0x104>)
 8011af4:	40ca      	lsrs	r2, r1
 8011af6:	07d6      	lsls	r6, r2, #31
 8011af8:	d527      	bpl.n	8011b4a <__sflush_r+0xb2>
 8011afa:	2200      	movs	r2, #0
 8011afc:	6062      	str	r2, [r4, #4]
 8011afe:	04d9      	lsls	r1, r3, #19
 8011b00:	6922      	ldr	r2, [r4, #16]
 8011b02:	6022      	str	r2, [r4, #0]
 8011b04:	d504      	bpl.n	8011b10 <__sflush_r+0x78>
 8011b06:	1c42      	adds	r2, r0, #1
 8011b08:	d101      	bne.n	8011b0e <__sflush_r+0x76>
 8011b0a:	682b      	ldr	r3, [r5, #0]
 8011b0c:	b903      	cbnz	r3, 8011b10 <__sflush_r+0x78>
 8011b0e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011b10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011b12:	602f      	str	r7, [r5, #0]
 8011b14:	b1b9      	cbz	r1, 8011b46 <__sflush_r+0xae>
 8011b16:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011b1a:	4299      	cmp	r1, r3
 8011b1c:	d002      	beq.n	8011b24 <__sflush_r+0x8c>
 8011b1e:	4628      	mov	r0, r5
 8011b20:	f7ff fca2 	bl	8011468 <_free_r>
 8011b24:	2300      	movs	r3, #0
 8011b26:	6363      	str	r3, [r4, #52]	@ 0x34
 8011b28:	e00d      	b.n	8011b46 <__sflush_r+0xae>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	4628      	mov	r0, r5
 8011b2e:	47b0      	blx	r6
 8011b30:	4602      	mov	r2, r0
 8011b32:	1c50      	adds	r0, r2, #1
 8011b34:	d1c9      	bne.n	8011aca <__sflush_r+0x32>
 8011b36:	682b      	ldr	r3, [r5, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d0c6      	beq.n	8011aca <__sflush_r+0x32>
 8011b3c:	2b1d      	cmp	r3, #29
 8011b3e:	d001      	beq.n	8011b44 <__sflush_r+0xac>
 8011b40:	2b16      	cmp	r3, #22
 8011b42:	d11e      	bne.n	8011b82 <__sflush_r+0xea>
 8011b44:	602f      	str	r7, [r5, #0]
 8011b46:	2000      	movs	r0, #0
 8011b48:	e022      	b.n	8011b90 <__sflush_r+0xf8>
 8011b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b4e:	b21b      	sxth	r3, r3
 8011b50:	e01b      	b.n	8011b8a <__sflush_r+0xf2>
 8011b52:	690f      	ldr	r7, [r1, #16]
 8011b54:	2f00      	cmp	r7, #0
 8011b56:	d0f6      	beq.n	8011b46 <__sflush_r+0xae>
 8011b58:	0793      	lsls	r3, r2, #30
 8011b5a:	680e      	ldr	r6, [r1, #0]
 8011b5c:	bf08      	it	eq
 8011b5e:	694b      	ldreq	r3, [r1, #20]
 8011b60:	600f      	str	r7, [r1, #0]
 8011b62:	bf18      	it	ne
 8011b64:	2300      	movne	r3, #0
 8011b66:	eba6 0807 	sub.w	r8, r6, r7
 8011b6a:	608b      	str	r3, [r1, #8]
 8011b6c:	f1b8 0f00 	cmp.w	r8, #0
 8011b70:	dde9      	ble.n	8011b46 <__sflush_r+0xae>
 8011b72:	6a21      	ldr	r1, [r4, #32]
 8011b74:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011b76:	4643      	mov	r3, r8
 8011b78:	463a      	mov	r2, r7
 8011b7a:	4628      	mov	r0, r5
 8011b7c:	47b0      	blx	r6
 8011b7e:	2800      	cmp	r0, #0
 8011b80:	dc08      	bgt.n	8011b94 <__sflush_r+0xfc>
 8011b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011b8a:	81a3      	strh	r3, [r4, #12]
 8011b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8011b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011b94:	4407      	add	r7, r0
 8011b96:	eba8 0800 	sub.w	r8, r8, r0
 8011b9a:	e7e7      	b.n	8011b6c <__sflush_r+0xd4>
 8011b9c:	20400001 	.word	0x20400001

08011ba0 <_fflush_r>:
 8011ba0:	b538      	push	{r3, r4, r5, lr}
 8011ba2:	690b      	ldr	r3, [r1, #16]
 8011ba4:	4605      	mov	r5, r0
 8011ba6:	460c      	mov	r4, r1
 8011ba8:	b913      	cbnz	r3, 8011bb0 <_fflush_r+0x10>
 8011baa:	2500      	movs	r5, #0
 8011bac:	4628      	mov	r0, r5
 8011bae:	bd38      	pop	{r3, r4, r5, pc}
 8011bb0:	b118      	cbz	r0, 8011bba <_fflush_r+0x1a>
 8011bb2:	6a03      	ldr	r3, [r0, #32]
 8011bb4:	b90b      	cbnz	r3, 8011bba <_fflush_r+0x1a>
 8011bb6:	f7ff fa35 	bl	8011024 <__sinit>
 8011bba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d0f3      	beq.n	8011baa <_fflush_r+0xa>
 8011bc2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011bc4:	07d0      	lsls	r0, r2, #31
 8011bc6:	d404      	bmi.n	8011bd2 <_fflush_r+0x32>
 8011bc8:	0599      	lsls	r1, r3, #22
 8011bca:	d402      	bmi.n	8011bd2 <_fflush_r+0x32>
 8011bcc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bce:	f7ff fc48 	bl	8011462 <__retarget_lock_acquire_recursive>
 8011bd2:	4628      	mov	r0, r5
 8011bd4:	4621      	mov	r1, r4
 8011bd6:	f7ff ff5f 	bl	8011a98 <__sflush_r>
 8011bda:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011bdc:	07da      	lsls	r2, r3, #31
 8011bde:	4605      	mov	r5, r0
 8011be0:	d4e4      	bmi.n	8011bac <_fflush_r+0xc>
 8011be2:	89a3      	ldrh	r3, [r4, #12]
 8011be4:	059b      	lsls	r3, r3, #22
 8011be6:	d4e1      	bmi.n	8011bac <_fflush_r+0xc>
 8011be8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011bea:	f7ff fc3b 	bl	8011464 <__retarget_lock_release_recursive>
 8011bee:	e7dd      	b.n	8011bac <_fflush_r+0xc>

08011bf0 <__swhatbuf_r>:
 8011bf0:	b570      	push	{r4, r5, r6, lr}
 8011bf2:	460c      	mov	r4, r1
 8011bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011bf8:	2900      	cmp	r1, #0
 8011bfa:	b096      	sub	sp, #88	@ 0x58
 8011bfc:	4615      	mov	r5, r2
 8011bfe:	461e      	mov	r6, r3
 8011c00:	da0d      	bge.n	8011c1e <__swhatbuf_r+0x2e>
 8011c02:	89a3      	ldrh	r3, [r4, #12]
 8011c04:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011c08:	f04f 0100 	mov.w	r1, #0
 8011c0c:	bf14      	ite	ne
 8011c0e:	2340      	movne	r3, #64	@ 0x40
 8011c10:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8011c14:	2000      	movs	r0, #0
 8011c16:	6031      	str	r1, [r6, #0]
 8011c18:	602b      	str	r3, [r5, #0]
 8011c1a:	b016      	add	sp, #88	@ 0x58
 8011c1c:	bd70      	pop	{r4, r5, r6, pc}
 8011c1e:	466a      	mov	r2, sp
 8011c20:	f000 f87c 	bl	8011d1c <_fstat_r>
 8011c24:	2800      	cmp	r0, #0
 8011c26:	dbec      	blt.n	8011c02 <__swhatbuf_r+0x12>
 8011c28:	9901      	ldr	r1, [sp, #4]
 8011c2a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011c2e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8011c32:	4259      	negs	r1, r3
 8011c34:	4159      	adcs	r1, r3
 8011c36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011c3a:	e7eb      	b.n	8011c14 <__swhatbuf_r+0x24>

08011c3c <__smakebuf_r>:
 8011c3c:	898b      	ldrh	r3, [r1, #12]
 8011c3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c40:	079d      	lsls	r5, r3, #30
 8011c42:	4606      	mov	r6, r0
 8011c44:	460c      	mov	r4, r1
 8011c46:	d507      	bpl.n	8011c58 <__smakebuf_r+0x1c>
 8011c48:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011c4c:	6023      	str	r3, [r4, #0]
 8011c4e:	6123      	str	r3, [r4, #16]
 8011c50:	2301      	movs	r3, #1
 8011c52:	6163      	str	r3, [r4, #20]
 8011c54:	b003      	add	sp, #12
 8011c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011c58:	ab01      	add	r3, sp, #4
 8011c5a:	466a      	mov	r2, sp
 8011c5c:	f7ff ffc8 	bl	8011bf0 <__swhatbuf_r>
 8011c60:	9f00      	ldr	r7, [sp, #0]
 8011c62:	4605      	mov	r5, r0
 8011c64:	4639      	mov	r1, r7
 8011c66:	4630      	mov	r0, r6
 8011c68:	f7ff f8c4 	bl	8010df4 <_malloc_r>
 8011c6c:	b948      	cbnz	r0, 8011c82 <__smakebuf_r+0x46>
 8011c6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011c72:	059a      	lsls	r2, r3, #22
 8011c74:	d4ee      	bmi.n	8011c54 <__smakebuf_r+0x18>
 8011c76:	f023 0303 	bic.w	r3, r3, #3
 8011c7a:	f043 0302 	orr.w	r3, r3, #2
 8011c7e:	81a3      	strh	r3, [r4, #12]
 8011c80:	e7e2      	b.n	8011c48 <__smakebuf_r+0xc>
 8011c82:	89a3      	ldrh	r3, [r4, #12]
 8011c84:	6020      	str	r0, [r4, #0]
 8011c86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c8a:	81a3      	strh	r3, [r4, #12]
 8011c8c:	9b01      	ldr	r3, [sp, #4]
 8011c8e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8011c92:	b15b      	cbz	r3, 8011cac <__smakebuf_r+0x70>
 8011c94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011c98:	4630      	mov	r0, r6
 8011c9a:	f000 f851 	bl	8011d40 <_isatty_r>
 8011c9e:	b128      	cbz	r0, 8011cac <__smakebuf_r+0x70>
 8011ca0:	89a3      	ldrh	r3, [r4, #12]
 8011ca2:	f023 0303 	bic.w	r3, r3, #3
 8011ca6:	f043 0301 	orr.w	r3, r3, #1
 8011caa:	81a3      	strh	r3, [r4, #12]
 8011cac:	89a3      	ldrh	r3, [r4, #12]
 8011cae:	431d      	orrs	r5, r3
 8011cb0:	81a5      	strh	r5, [r4, #12]
 8011cb2:	e7cf      	b.n	8011c54 <__smakebuf_r+0x18>

08011cb4 <_putc_r>:
 8011cb4:	b570      	push	{r4, r5, r6, lr}
 8011cb6:	460d      	mov	r5, r1
 8011cb8:	4614      	mov	r4, r2
 8011cba:	4606      	mov	r6, r0
 8011cbc:	b118      	cbz	r0, 8011cc6 <_putc_r+0x12>
 8011cbe:	6a03      	ldr	r3, [r0, #32]
 8011cc0:	b90b      	cbnz	r3, 8011cc6 <_putc_r+0x12>
 8011cc2:	f7ff f9af 	bl	8011024 <__sinit>
 8011cc6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cc8:	07d8      	lsls	r0, r3, #31
 8011cca:	d405      	bmi.n	8011cd8 <_putc_r+0x24>
 8011ccc:	89a3      	ldrh	r3, [r4, #12]
 8011cce:	0599      	lsls	r1, r3, #22
 8011cd0:	d402      	bmi.n	8011cd8 <_putc_r+0x24>
 8011cd2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011cd4:	f7ff fbc5 	bl	8011462 <__retarget_lock_acquire_recursive>
 8011cd8:	68a3      	ldr	r3, [r4, #8]
 8011cda:	3b01      	subs	r3, #1
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	60a3      	str	r3, [r4, #8]
 8011ce0:	da05      	bge.n	8011cee <_putc_r+0x3a>
 8011ce2:	69a2      	ldr	r2, [r4, #24]
 8011ce4:	4293      	cmp	r3, r2
 8011ce6:	db12      	blt.n	8011d0e <_putc_r+0x5a>
 8011ce8:	b2eb      	uxtb	r3, r5
 8011cea:	2b0a      	cmp	r3, #10
 8011cec:	d00f      	beq.n	8011d0e <_putc_r+0x5a>
 8011cee:	6823      	ldr	r3, [r4, #0]
 8011cf0:	1c5a      	adds	r2, r3, #1
 8011cf2:	6022      	str	r2, [r4, #0]
 8011cf4:	701d      	strb	r5, [r3, #0]
 8011cf6:	b2ed      	uxtb	r5, r5
 8011cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011cfa:	07da      	lsls	r2, r3, #31
 8011cfc:	d405      	bmi.n	8011d0a <_putc_r+0x56>
 8011cfe:	89a3      	ldrh	r3, [r4, #12]
 8011d00:	059b      	lsls	r3, r3, #22
 8011d02:	d402      	bmi.n	8011d0a <_putc_r+0x56>
 8011d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011d06:	f7ff fbad 	bl	8011464 <__retarget_lock_release_recursive>
 8011d0a:	4628      	mov	r0, r5
 8011d0c:	bd70      	pop	{r4, r5, r6, pc}
 8011d0e:	4629      	mov	r1, r5
 8011d10:	4622      	mov	r2, r4
 8011d12:	4630      	mov	r0, r6
 8011d14:	f7ff fa77 	bl	8011206 <__swbuf_r>
 8011d18:	4605      	mov	r5, r0
 8011d1a:	e7ed      	b.n	8011cf8 <_putc_r+0x44>

08011d1c <_fstat_r>:
 8011d1c:	b538      	push	{r3, r4, r5, lr}
 8011d1e:	4d07      	ldr	r5, [pc, #28]	@ (8011d3c <_fstat_r+0x20>)
 8011d20:	2300      	movs	r3, #0
 8011d22:	4604      	mov	r4, r0
 8011d24:	4608      	mov	r0, r1
 8011d26:	4611      	mov	r1, r2
 8011d28:	602b      	str	r3, [r5, #0]
 8011d2a:	f7f6 fc1a 	bl	8008562 <_fstat>
 8011d2e:	1c43      	adds	r3, r0, #1
 8011d30:	d102      	bne.n	8011d38 <_fstat_r+0x1c>
 8011d32:	682b      	ldr	r3, [r5, #0]
 8011d34:	b103      	cbz	r3, 8011d38 <_fstat_r+0x1c>
 8011d36:	6023      	str	r3, [r4, #0]
 8011d38:	bd38      	pop	{r3, r4, r5, pc}
 8011d3a:	bf00      	nop
 8011d3c:	20000af8 	.word	0x20000af8

08011d40 <_isatty_r>:
 8011d40:	b538      	push	{r3, r4, r5, lr}
 8011d42:	4d06      	ldr	r5, [pc, #24]	@ (8011d5c <_isatty_r+0x1c>)
 8011d44:	2300      	movs	r3, #0
 8011d46:	4604      	mov	r4, r0
 8011d48:	4608      	mov	r0, r1
 8011d4a:	602b      	str	r3, [r5, #0]
 8011d4c:	f7f6 fc19 	bl	8008582 <_isatty>
 8011d50:	1c43      	adds	r3, r0, #1
 8011d52:	d102      	bne.n	8011d5a <_isatty_r+0x1a>
 8011d54:	682b      	ldr	r3, [r5, #0]
 8011d56:	b103      	cbz	r3, 8011d5a <_isatty_r+0x1a>
 8011d58:	6023      	str	r3, [r4, #0]
 8011d5a:	bd38      	pop	{r3, r4, r5, pc}
 8011d5c:	20000af8 	.word	0x20000af8

08011d60 <_init>:
 8011d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d62:	bf00      	nop
 8011d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d66:	bc08      	pop	{r3}
 8011d68:	469e      	mov	lr, r3
 8011d6a:	4770      	bx	lr

08011d6c <_fini>:
 8011d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d6e:	bf00      	nop
 8011d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d72:	bc08      	pop	{r3}
 8011d74:	469e      	mov	lr, r3
 8011d76:	4770      	bx	lr
