
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  0800aa50  0800aa50  0000ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab20  0800ab20  0000c088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800ab20  0800ab20  0000bb20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab28  0800ab28  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab28  0800ab28  0000bb28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ab2c  0800ab2c  0000bb2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800ab30  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000c088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000c088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 13 .debug_info   000199c5  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004145  00000000  00000000  00025a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  00029bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000101d  00000000  00000000  0002b0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005f93  00000000  00000000  0002c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cc7d  00000000  00000000  00032078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d0a04  00000000  00000000  0004ecf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f6f9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006000  00000000  00000000  0011f73c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012573c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aa38 	.word	0x0800aa38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800aa38 	.word	0x0800aa38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 800059c:	b580      	push	{r7, lr}
 800059e:	b084      	sub	sp, #16
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	b29a      	uxth	r2, r3
 80005ac:	f04f 33ff 	mov.w	r3, #4294967295
 80005b0:	68b9      	ldr	r1, [r7, #8]
 80005b2:	4804      	ldr	r0, [pc, #16]	@ (80005c4 <_write+0x28>)
 80005b4:	f005 f93d 	bl	8005832 <HAL_UART_Transmit>
    return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3710      	adds	r7, #16
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	200001a8 	.word	0x200001a8

080005c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005cc:	b0e3      	sub	sp, #396	@ 0x18c
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d0:	f000 ffdc 	bl	800158c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005d4:	f000 fa4c 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d8:	f000 fb86 	bl	8000ce8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80005dc:	f000 fab2 	bl	8000b44 <MX_I2C1_Init>
  MX_I2S3_Init();
 80005e0:	f000 fade 	bl	8000ba0 <MX_I2S3_Init>
  MX_SPI1_Init();
 80005e4:	f000 fb20 	bl	8000c28 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005e8:	f008 fecc 	bl	8009384 <MX_USB_HOST_Init>
  MX_RNG_Init();
 80005ec:	f000 fb08 	bl	8000c00 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80005f0:	f000 fb50 	bl	8000c94 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80005fa:	4bd5      	ldr	r3, [pc, #852]	@ (8000950 <main+0x388>)
 80005fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005fe:	4ad4      	ldr	r2, [pc, #848]	@ (8000950 <main+0x388>)
 8000600:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000604:	6353      	str	r3, [r2, #52]	@ 0x34
 8000606:	4bd2      	ldr	r3, [pc, #840]	@ (8000950 <main+0x388>)
 8000608:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800060a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800060e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8000612:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
  HAL_RNG_Init(&hrng);
 8000616:	48cf      	ldr	r0, [pc, #828]	@ (8000954 <main+0x38c>)
 8000618:	f005 f808 	bl	800562c <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 800061c:	4bce      	ldr	r3, [pc, #824]	@ (8000958 <main+0x390>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6898      	ldr	r0, [r3, #8]
 8000622:	2300      	movs	r3, #0
 8000624:	2202      	movs	r2, #2
 8000626:	2100      	movs	r1, #0
 8000628:	f009 fba6 	bl	8009d78 <setvbuf>
  while (1)
  {
	  masked_uint64_t a, b, out;

	     // Example unmasked values
	     uint64_t a_val = 0xAAAAAAAAAAAAAAAA;
 800062c:	f04f 32aa 	mov.w	r2, #2863311530	@ 0xaaaaaaaa
 8000630:	f04f 33aa 	mov.w	r3, #2863311530	@ 0xaaaaaaaa
 8000634:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
	     uint64_t b_val = 0xCCCCCCCCCCCCCCCC;
 8000638:	f04f 32cc 	mov.w	r2, #3435973836	@ 0xcccccccc
 800063c:	f04f 33cc 	mov.w	r3, #3435973836	@ 0xcccccccc
 8000640:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
	     uint64_t expected = a_val & b_val;  // Should be 0x8888888888888888
 8000644:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	@ 0x158
 8000648:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 800064c:	ea00 0602 	and.w	r6, r0, r2
 8000650:	60be      	str	r6, [r7, #8]
 8000652:	400b      	ands	r3, r1
 8000654:	60fb      	str	r3, [r7, #12]
 8000656:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800065a:	e9c7 2352 	strd	r2, r3, [r7, #328]	@ 0x148

	     // Initialize all shares to 0
	     for (int i = 0; i < MASKING_N; i++) {
 800065e:	2300      	movs	r3, #0
 8000660:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8000664:	e030      	b.n	80006c8 <main+0x100>
	         a.share[i] = 0;
 8000666:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800066a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800066e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	18d1      	adds	r1, r2, r3
 8000676:	f04f 0200 	mov.w	r2, #0
 800067a:	f04f 0300 	mov.w	r3, #0
 800067e:	e9c1 2300 	strd	r2, r3, [r1]
	         b.share[i] = 0;
 8000682:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000686:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800068a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	18d1      	adds	r1, r2, r3
 8000692:	f04f 0200 	mov.w	r2, #0
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	e9c1 2300 	strd	r2, r3, [r1]
	         out.share[i] = 0;
 800069e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80006a2:	00db      	lsls	r3, r3, #3
 80006a4:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80006a8:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80006ac:	4413      	add	r3, r2
 80006ae:	f1a3 01f8 	sub.w	r1, r3, #248	@ 0xf8
 80006b2:	f04f 0200 	mov.w	r2, #0
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	e9c1 2300 	strd	r2, r3, [r1]
	     for (int i = 0; i < MASKING_N; i++) {
 80006be:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80006c2:	3301      	adds	r3, #1
 80006c4:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80006c8:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80006cc:	2b03      	cmp	r3, #3
 80006ce:	ddca      	ble.n	8000666 <main+0x9e>
	     }

	     // Mask input a: First share gets the value XORed with all masks,
	     // other shares get the masks
	     a.share[0] = a_val;
 80006d0:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80006d4:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80006d8:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	@ 0x158
 80006dc:	e9c1 2300 	strd	r2, r3, [r1]
	     for (int i = 1; i < MASKING_N; i++) {
 80006e0:	2301      	movs	r3, #1
 80006e2:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80006e6:	e07a      	b.n	80007de <main+0x216>
	         // Generate a random mask for each share
	         uint64_t mask = 0x0101010101010101 * i;  // For testing; use TRNG in real impl
 80006e8:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80006ec:	17da      	asrs	r2, r3, #31
 80006ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80006f0:	647a      	str	r2, [r7, #68]	@ 0x44
 80006f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80006f6:	f04f 0000 	mov.w	r0, #0
 80006fa:	f04f 0100 	mov.w	r1, #0
 80006fe:	0219      	lsls	r1, r3, #8
 8000700:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000704:	0210      	lsls	r0, r2, #8
 8000706:	4602      	mov	r2, r0
 8000708:	460b      	mov	r3, r1
 800070a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800070c:	eb12 0801 	adds.w	r8, r2, r1
 8000710:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8000712:	eb43 0901 	adc.w	r9, r3, r1
 8000716:	f04f 0200 	mov.w	r2, #0
 800071a:	f04f 0300 	mov.w	r3, #0
 800071e:	ea4f 6309 	mov.w	r3, r9, lsl #24
 8000722:	ea43 2318 	orr.w	r3, r3, r8, lsr #8
 8000726:	ea4f 6208 	mov.w	r2, r8, lsl #24
 800072a:	4690      	mov	r8, r2
 800072c:	4699      	mov	r9, r3
 800072e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8000732:	4603      	mov	r3, r0
 8000734:	eb18 0a03 	adds.w	sl, r8, r3
 8000738:	460b      	mov	r3, r1
 800073a:	eb49 0b03 	adc.w	fp, r9, r3
 800073e:	f04f 0200 	mov.w	r2, #0
 8000742:	f04f 0300 	mov.w	r3, #0
 8000746:	ea4f 230b 	mov.w	r3, fp, lsl #8
 800074a:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 800074e:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8000752:	4692      	mov	sl, r2
 8000754:	469b      	mov	fp, r3
 8000756:	4603      	mov	r3, r0
 8000758:	eb1a 0303 	adds.w	r3, sl, r3
 800075c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800075e:	460b      	mov	r3, r1
 8000760:	eb4b 0303 	adc.w	r3, fp, r3
 8000764:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000766:	f04f 0200 	mov.w	r2, #0
 800076a:	f04f 0300 	mov.w	r3, #0
 800076e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000770:	040b      	lsls	r3, r1, #16
 8000772:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8000774:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 8000778:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800077a:	040a      	lsls	r2, r1, #16
 800077c:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800077e:	1889      	adds	r1, r1, r2
 8000780:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000782:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000784:	eb41 0303 	adc.w	r3, r1, r3
 8000788:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800078a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800078e:	e9c7 234e 	strd	r2, r3, [r7, #312]	@ 0x138
	         a.share[i] = mask;
 8000792:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000796:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800079a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800079e:	00db      	lsls	r3, r3, #3
 80007a0:	18d1      	adds	r1, r2, r3
 80007a2:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80007a6:	e9c1 2300 	strd	r2, r3, [r1]
	         a.share[0] ^= mask;  // XOR the mask into share 0
 80007aa:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80007ae:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80007b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80007b6:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	@ 0x138
 80007ba:	ea80 0602 	eor.w	r6, r0, r2
 80007be:	623e      	str	r6, [r7, #32]
 80007c0:	404b      	eors	r3, r1
 80007c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80007c4:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80007c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80007cc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80007d0:	e9c3 1200 	strd	r1, r2, [r3]
	     for (int i = 1; i < MASKING_N; i++) {
 80007d4:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80007d8:	3301      	adds	r3, #1
 80007da:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 80007de:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 80007e2:	2b03      	cmp	r3, #3
 80007e4:	dd80      	ble.n	80006e8 <main+0x120>
	     }

	     // Mask input b: Same approach
	     b.share[0] = b_val;
 80007e6:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80007ea:	f5a3 718c 	sub.w	r1, r3, #280	@ 0x118
 80007ee:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 80007f2:	e9c1 2300 	strd	r2, r3, [r1]
	     for (int i = 1; i < MASKING_N; i++) {
 80007f6:	2301      	movs	r3, #1
 80007f8:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80007fc:	e048      	b.n	8000890 <main+0x2c8>
	         // Generate a random mask for each share
	         uint64_t mask = 0x0303030303030303 * i;  // For testing; use TRNG in real impl
 80007fe:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000802:	17da      	asrs	r2, r3, #31
 8000804:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000806:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000808:	f04f 3303 	mov.w	r3, #50529027	@ 0x3030303
 800080c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000810:	460a      	mov	r2, r1
 8000812:	fb03 f202 	mul.w	r2, r3, r2
 8000816:	f04f 3303 	mov.w	r3, #50529027	@ 0x3030303
 800081a:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
 800081e:	4601      	mov	r1, r0
 8000820:	fb01 f303 	mul.w	r3, r1, r3
 8000824:	441a      	add	r2, r3
 8000826:	f04f 3303 	mov.w	r3, #50529027	@ 0x3030303
 800082a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800082c:	fba1 1303 	umull	r1, r3, r1, r3
 8000830:	637b      	str	r3, [r7, #52]	@ 0x34
 8000832:	460b      	mov	r3, r1
 8000834:	633b      	str	r3, [r7, #48]	@ 0x30
 8000836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000838:	18d3      	adds	r3, r2, r3
 800083a:	637b      	str	r3, [r7, #52]	@ 0x34
 800083c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000840:	e9c7 2350 	strd	r2, r3, [r7, #320]	@ 0x140
	         b.share[i] = mask;
 8000844:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000848:	f5a3 728c 	sub.w	r2, r3, #280	@ 0x118
 800084c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000850:	00db      	lsls	r3, r3, #3
 8000852:	18d1      	adds	r1, r2, r3
 8000854:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 8000858:	e9c1 2300 	strd	r2, r3, [r1]
	         b.share[0] ^= mask;  // XOR the mask into share 0
 800085c:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8000860:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8000864:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000868:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	@ 0x140
 800086c:	ea80 0602 	eor.w	r6, r0, r2
 8000870:	61be      	str	r6, [r7, #24]
 8000872:	404b      	eors	r3, r1
 8000874:	61fb      	str	r3, [r7, #28]
 8000876:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 800087a:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800087e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000882:	e9c3 1200 	strd	r1, r2, [r3]
	     for (int i = 1; i < MASKING_N; i++) {
 8000886:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800088a:	3301      	adds	r3, #1
 800088c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8000890:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8000894:	2b03      	cmp	r3, #3
 8000896:	ddb2      	ble.n	80007fe <main+0x236>
	     }

	     // Generate random values for AND masking
	     uint64_t r[MASKING_N][MASKING_N] = {0};
 8000898:	f107 00b0 	add.w	r0, r7, #176	@ 0xb0
 800089c:	2380      	movs	r3, #128	@ 0x80
 800089e:	461a      	mov	r2, r3
 80008a0:	2100      	movs	r1, #0
 80008a2:	f009 fbf5 	bl	800a090 <memset>
	     for (int i = 0; i < MASKING_N; i++) {
 80008a6:	2300      	movs	r3, #0
 80008a8:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 80008ac:	e037      	b.n	800091e <main+0x356>
	         for (int j = i + 1; j < MASKING_N; j++) {
 80008ae:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80008b2:	3301      	adds	r3, #1
 80008b4:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80008b8:	e028      	b.n	800090c <main+0x344>
	             // In a real implementation, these should come from a TRNG
	             r[i][j] = 0xDEADBEEF00000000 | ((i+1) * 0x100 + j);
 80008ba:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80008be:	3301      	adds	r3, #1
 80008c0:	021a      	lsls	r2, r3, #8
 80008c2:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80008c6:	4413      	add	r3, r2
 80008c8:	17da      	asrs	r2, r3, #31
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	617a      	str	r2, [r7, #20]
 80008ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80008d2:	4614      	mov	r4, r2
 80008d4:	f043 455e 	orr.w	r5, r3, #3724541952	@ 0xde000000
 80008d8:	f445 052d 	orr.w	r5, r5, #11337728	@ 0xad0000
 80008dc:	f445 453e 	orr.w	r5, r5, #48640	@ 0xbe00
 80008e0:	f045 05ef 	orr.w	r5, r5, #239	@ 0xef
 80008e4:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 80008e8:	009a      	lsls	r2, r3, #2
 80008ea:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80008ee:	4413      	add	r3, r2
 80008f0:	00db      	lsls	r3, r3, #3
 80008f2:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80008f6:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 80008fa:	4413      	add	r3, r2
 80008fc:	3bd8      	subs	r3, #216	@ 0xd8
 80008fe:	e9c3 4500 	strd	r4, r5, [r3]
	         for (int j = i + 1; j < MASKING_N; j++) {
 8000902:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000906:	3301      	adds	r3, #1
 8000908:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 800090c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8000910:	2b03      	cmp	r3, #3
 8000912:	ddd2      	ble.n	80008ba <main+0x2f2>
	     for (int i = 0; i < MASKING_N; i++) {
 8000914:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000918:	3301      	adds	r3, #1
 800091a:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800091e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8000922:	2b03      	cmp	r3, #3
 8000924:	ddc3      	ble.n	80008ae <main+0x2e6>
	         }
	     }

	     // Perform masked AND
	     masked_and(&out, &a, &b, r);
 8000926:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800092a:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800092e:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8000932:	f107 0090 	add.w	r0, r7, #144	@ 0x90
 8000936:	f000 fadb 	bl	8000ef0 <masked_and>

	     // Recombine and check
	     uint64_t result = 0;
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	f04f 0300 	mov.w	r3, #0
 8000942:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	     for (int i = 0; i < MASKING_N; i++) {
 8000946:	2300      	movs	r3, #0
 8000948:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800094c:	e021      	b.n	8000992 <main+0x3ca>
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800
 8000954:	20000140 	.word	0x20000140
 8000958:	20000038 	.word	0x20000038
	         result ^= out.share[i];
 800095c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8000966:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800096a:	4413      	add	r3, r2
 800096c:	3bf8      	subs	r3, #248	@ 0xf8
 800096e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000972:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 8000976:	ea82 0600 	eor.w	r6, r2, r0
 800097a:	603e      	str	r6, [r7, #0]
 800097c:	404b      	eors	r3, r1
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000984:	e9c7 235a 	strd	r2, r3, [r7, #360]	@ 0x168
	     for (int i = 0; i < MASKING_N; i++) {
 8000988:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800098c:	3301      	adds	r3, #1
 800098e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8000992:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8000996:	2b03      	cmp	r3, #3
 8000998:	dde0      	ble.n	800095c <main+0x394>
	     }

	     // For STM32 printf formatting issues
	     printf("Expected : %08lX%08lX\n", (uint32_t)(expected >> 32), (uint32_t)expected);
 800099a:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 0100 	mov.w	r1, #0
 80009a6:	0018      	movs	r0, r3
 80009a8:	2100      	movs	r1, #0
 80009aa:	4601      	mov	r1, r0
 80009ac:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 80009b0:	461a      	mov	r2, r3
 80009b2:	482a      	ldr	r0, [pc, #168]	@ (8000a5c <main+0x494>)
 80009b4:	f009 f970 	bl	8009c98 <iprintf>
	     printf("Recovered: %08lX%08lX\n", (uint32_t)(result >> 32), (uint32_t)result);
 80009b8:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	@ 0x168
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	f04f 0100 	mov.w	r1, #0
 80009c4:	0018      	movs	r0, r3
 80009c6:	2100      	movs	r1, #0
 80009c8:	4601      	mov	r1, r0
 80009ca:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80009ce:	461a      	mov	r2, r3
 80009d0:	4823      	ldr	r0, [pc, #140]	@ (8000a60 <main+0x498>)
 80009d2:	f009 f961 	bl	8009c98 <iprintf>

	     if (result == expected) {
 80009d6:	e9d7 015a 	ldrd	r0, r1, [r7, #360]	@ 0x168
 80009da:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80009de:	4299      	cmp	r1, r3
 80009e0:	bf08      	it	eq
 80009e2:	4290      	cmpeq	r0, r2
 80009e4:	d103      	bne.n	80009ee <main+0x426>
	         printf("masked_and: PASS\n");
 80009e6:	481f      	ldr	r0, [pc, #124]	@ (8000a64 <main+0x49c>)
 80009e8:	f009 f9be 	bl	8009d68 <puts>
 80009ec:	e033      	b.n	8000a56 <main+0x48e>
	     } else {
	         printf("masked_and: FAIL\n");
 80009ee:	481e      	ldr	r0, [pc, #120]	@ (8000a68 <main+0x4a0>)
 80009f0:	f009 f9ba 	bl	8009d68 <puts>

	         // For debugging, print individual shares
	         for (int i = 0; i < MASKING_N; i++) {
 80009f4:	2300      	movs	r3, #0
 80009f6:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 80009fa:	e028      	b.n	8000a4e <main+0x486>
	             printf("Share %d: %08lX%08lX\n", i,
	                    (uint32_t)(out.share[i] >> 32),
 80009fc:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000a00:	00db      	lsls	r3, r3, #3
 8000a02:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8000a06:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000a0a:	4413      	add	r3, r2
 8000a0c:	3bf8      	subs	r3, #248	@ 0xf8
 8000a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a12:	f04f 0000 	mov.w	r0, #0
 8000a16:	f04f 0100 	mov.w	r1, #0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2100      	movs	r1, #0
	             printf("Share %d: %08lX%08lX\n", i,
 8000a1e:	4601      	mov	r1, r0
	                    (uint32_t)out.share[i]);
 8000a20:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000a24:	00db      	lsls	r3, r3, #3
 8000a26:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8000a2a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8000a2e:	4413      	add	r3, r2
 8000a30:	3bf8      	subs	r3, #248	@ 0xf8
 8000a32:	e9d3 2300 	ldrd	r2, r3, [r3]
	             printf("Share %d: %08lX%08lX\n", i,
 8000a36:	4613      	mov	r3, r2
 8000a38:	460a      	mov	r2, r1
 8000a3a:	f8d7 1160 	ldr.w	r1, [r7, #352]	@ 0x160
 8000a3e:	480b      	ldr	r0, [pc, #44]	@ (8000a6c <main+0x4a4>)
 8000a40:	f009 f92a 	bl	8009c98 <iprintf>
	         for (int i = 0; i < MASKING_N; i++) {
 8000a44:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000a48:	3301      	adds	r3, #1
 8000a4a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8000a4e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	ddd2      	ble.n	80009fc <main+0x434>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a56:	f008 fcbb 	bl	80093d0 <MX_USB_HOST_Process>
  {
 8000a5a:	e5e7      	b.n	800062c <main+0x64>
 8000a5c:	0800aa60 	.word	0x0800aa60
 8000a60:	0800aa78 	.word	0x0800aa78
 8000a64:	0800aa90 	.word	0x0800aa90
 8000a68:	0800aaa4 	.word	0x0800aaa4
 8000a6c:	0800aab8 	.word	0x0800aab8

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b094      	sub	sp, #80	@ 0x50
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	f107 0320 	add.w	r3, r7, #32
 8000a7a:	2230      	movs	r2, #48	@ 0x30
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f009 fb06 	bl	800a090 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a84:	f107 030c 	add.w	r3, r7, #12
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
 8000a90:	60da      	str	r2, [r3, #12]
 8000a92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a94:	2300      	movs	r3, #0
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	4b28      	ldr	r3, [pc, #160]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9c:	4a27      	ldr	r2, [pc, #156]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000a9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aa4:	4b25      	ldr	r3, [pc, #148]	@ (8000b3c <SystemClock_Config+0xcc>)
 8000aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	60bb      	str	r3, [r7, #8]
 8000aae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	607b      	str	r3, [r7, #4]
 8000ab4:	4b22      	ldr	r3, [pc, #136]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a21      	ldr	r2, [pc, #132]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000aba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000abe:	6013      	str	r3, [r2, #0]
 8000ac0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b40 <SystemClock_Config+0xd0>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ac8:	607b      	str	r3, [r7, #4]
 8000aca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ad4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ada:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000ae0:	2308      	movs	r3, #8
 8000ae2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ae4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ae8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aea:	2302      	movs	r3, #2
 8000aec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000aee:	2307      	movs	r3, #7
 8000af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	4618      	mov	r0, r3
 8000af8:	f003 ffbe 	bl	8004a78 <HAL_RCC_OscConfig>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000b02:	f000 f9ef 	bl	8000ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b06:	230f      	movs	r3, #15
 8000b08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b12:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b1c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1e:	f107 030c 	add.w	r3, r7, #12
 8000b22:	2105      	movs	r1, #5
 8000b24:	4618      	mov	r0, r3
 8000b26:	f004 fa1f 	bl	8004f68 <HAL_RCC_ClockConfig>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b30:	f000 f9d8 	bl	8000ee4 <Error_Handler>
  }
}
 8000b34:	bf00      	nop
 8000b36:	3750      	adds	r7, #80	@ 0x50
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40007000 	.word	0x40007000

08000b44 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b48:	4b12      	ldr	r3, [pc, #72]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b4a:	4a13      	ldr	r2, [pc, #76]	@ (8000b98 <MX_I2C1_Init+0x54>)
 8000b4c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b4e:	4b11      	ldr	r3, [pc, #68]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b50:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <MX_I2C1_Init+0x58>)
 8000b52:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b54:	4b0f      	ldr	r3, [pc, #60]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b62:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b66:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b68:	4b0a      	ldr	r3, [pc, #40]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000b6e:	4b09      	ldr	r3, [pc, #36]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b74:	4b07      	ldr	r3, [pc, #28]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b7a:	4b06      	ldr	r3, [pc, #24]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_I2C1_Init+0x50>)
 8000b82:	f003 f995 	bl	8003eb0 <HAL_I2C_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000b8c:	f000 f9aa 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b90:	bf00      	nop
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	200000a4 	.word	0x200000a4
 8000b98:	40005400 	.word	0x40005400
 8000b9c:	000186a0 	.word	0x000186a0

08000ba0 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000ba6:	4a14      	ldr	r2, [pc, #80]	@ (8000bf8 <MX_I2S3_Init+0x58>)
 8000ba8:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000baa:	4b12      	ldr	r3, [pc, #72]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bb2:	4b10      	ldr	r3, [pc, #64]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000bb8:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bc4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <MX_I2S3_Init+0x5c>)
 8000bca:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000bcc:	4b09      	ldr	r3, [pc, #36]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000bd2:	4b08      	ldr	r3, [pc, #32]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	@ (8000bf4 <MX_I2S3_Init+0x54>)
 8000be0:	f003 faaa 	bl	8004138 <HAL_I2S_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000bea:	f000 f97b 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	200000f8 	.word	0x200000f8
 8000bf8:	40003c00 	.word	0x40003c00
 8000bfc:	00017700 	.word	0x00017700

08000c00 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_RNG_Init+0x20>)
 8000c06:	4a07      	ldr	r2, [pc, #28]	@ (8000c24 <MX_RNG_Init+0x24>)
 8000c08:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_RNG_Init+0x20>)
 8000c0c:	f004 fd0e 	bl	800562c <HAL_RNG_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8000c16:	f000 f965 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000140 	.word	0x20000140
 8000c24:	50060800 	.word	0x50060800

08000c28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c2e:	4a18      	ldr	r2, [pc, #96]	@ (8000c90 <MX_SPI1_Init+0x68>)
 8000c30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c32:	4b16      	ldr	r3, [pc, #88]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c3a:	4b14      	ldr	r3, [pc, #80]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c40:	4b12      	ldr	r3, [pc, #72]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c46:	4b11      	ldr	r3, [pc, #68]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c60:	4b0a      	ldr	r3, [pc, #40]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c66:	4b09      	ldr	r3, [pc, #36]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c72:	4b06      	ldr	r3, [pc, #24]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c74:	220a      	movs	r2, #10
 8000c76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c78:	4804      	ldr	r0, [pc, #16]	@ (8000c8c <MX_SPI1_Init+0x64>)
 8000c7a:	f004 fd01 	bl	8005680 <HAL_SPI_Init>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c84:	f000 f92e 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c88:	bf00      	nop
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000150 	.word	0x20000150
 8000c90:	40013000 	.word	0x40013000

08000c94 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c98:	4b11      	ldr	r3, [pc, #68]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ce4 <MX_USART2_UART_Init+0x50>)
 8000c9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ca4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cb8:	4b09      	ldr	r3, [pc, #36]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cba:	220c      	movs	r2, #12
 8000cbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cbe:	4b08      	ldr	r3, [pc, #32]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc4:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cca:	4805      	ldr	r0, [pc, #20]	@ (8000ce0 <MX_USART2_UART_Init+0x4c>)
 8000ccc:	f004 fd61 	bl	8005792 <HAL_UART_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cd6:	f000 f905 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200001a8 	.word	0x200001a8
 8000ce4:	40004400 	.word	0x40004400

08000ce8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08c      	sub	sp, #48	@ 0x30
 8000cec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
 8000d02:	4b72      	ldr	r3, [pc, #456]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a71      	ldr	r2, [pc, #452]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d08:	f043 0310 	orr.w	r3, r3, #16
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b6f      	ldr	r3, [pc, #444]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
 8000d1e:	4b6b      	ldr	r3, [pc, #428]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	4a6a      	ldr	r2, [pc, #424]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d24:	f043 0304 	orr.w	r3, r3, #4
 8000d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2a:	4b68      	ldr	r3, [pc, #416]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d2e:	f003 0304 	and.w	r3, r3, #4
 8000d32:	617b      	str	r3, [r7, #20]
 8000d34:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	613b      	str	r3, [r7, #16]
 8000d3a:	4b64      	ldr	r3, [pc, #400]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a63      	ldr	r2, [pc, #396]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b61      	ldr	r3, [pc, #388]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	4b5d      	ldr	r3, [pc, #372]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a5c      	ldr	r2, [pc, #368]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d5c:	f043 0301 	orr.w	r3, r3, #1
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b5a      	ldr	r3, [pc, #360]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0301 	and.w	r3, r3, #1
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	4b56      	ldr	r3, [pc, #344]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a55      	ldr	r2, [pc, #340]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d78:	f043 0302 	orr.w	r3, r3, #2
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b53      	ldr	r3, [pc, #332]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0302 	and.w	r3, r3, #2
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b4f      	ldr	r3, [pc, #316]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a4e      	ldr	r2, [pc, #312]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d94:	f043 0308 	orr.w	r3, r3, #8
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b4c      	ldr	r3, [pc, #304]	@ (8000ecc <MX_GPIO_Init+0x1e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0308 	and.w	r3, r3, #8
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2108      	movs	r1, #8
 8000daa:	4849      	ldr	r0, [pc, #292]	@ (8000ed0 <MX_GPIO_Init+0x1e8>)
 8000dac:	f000 ff32 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000db0:	2201      	movs	r2, #1
 8000db2:	2101      	movs	r1, #1
 8000db4:	4847      	ldr	r0, [pc, #284]	@ (8000ed4 <MX_GPIO_Init+0x1ec>)
 8000db6:	f000 ff2d 	bl	8001c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000dba:	2200      	movs	r2, #0
 8000dbc:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8000dc0:	4845      	ldr	r0, [pc, #276]	@ (8000ed8 <MX_GPIO_Init+0x1f0>)
 8000dc2:	f000 ff27 	bl	8001c14 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000dc6:	2308      	movs	r3, #8
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	483c      	ldr	r0, [pc, #240]	@ (8000ed0 <MX_GPIO_Init+0x1e8>)
 8000dde:	f000 fd7d 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000de2:	2301      	movs	r3, #1
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de6:	2301      	movs	r3, #1
 8000de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dea:	2300      	movs	r3, #0
 8000dec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dee:	2300      	movs	r3, #0
 8000df0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000df2:	f107 031c 	add.w	r3, r7, #28
 8000df6:	4619      	mov	r1, r3
 8000df8:	4836      	ldr	r0, [pc, #216]	@ (8000ed4 <MX_GPIO_Init+0x1ec>)
 8000dfa:	f000 fd6f 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000dfe:	2308      	movs	r3, #8
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e0e:	2305      	movs	r3, #5
 8000e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 031c 	add.w	r3, r7, #28
 8000e16:	4619      	mov	r1, r3
 8000e18:	482e      	ldr	r0, [pc, #184]	@ (8000ed4 <MX_GPIO_Init+0x1ec>)
 8000e1a:	f000 fd5f 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e22:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	482a      	ldr	r0, [pc, #168]	@ (8000edc <MX_GPIO_Init+0x1f4>)
 8000e34:	f000 fd52 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e38:	2304      	movs	r3, #4
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4825      	ldr	r0, [pc, #148]	@ (8000ee0 <MX_GPIO_Init+0x1f8>)
 8000e4c:	f000 fd46 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000e50:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e62:	2305      	movs	r3, #5
 8000e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000e66:	f107 031c 	add.w	r3, r7, #28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481c      	ldr	r0, [pc, #112]	@ (8000ee0 <MX_GPIO_Init+0x1f8>)
 8000e6e:	f000 fd35 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e72:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000e76:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4813      	ldr	r0, [pc, #76]	@ (8000ed8 <MX_GPIO_Init+0x1f0>)
 8000e8c:	f000 fd26 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000e90:	2320      	movs	r3, #32
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e94:	2300      	movs	r3, #0
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e9c:	f107 031c 	add.w	r3, r7, #28
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	@ (8000ed8 <MX_GPIO_Init+0x1f0>)
 8000ea4:	f000 fd1a 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eac:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000eb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4804      	ldr	r0, [pc, #16]	@ (8000ed0 <MX_GPIO_Init+0x1e8>)
 8000ebe:	f000 fd0d 	bl	80018dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ec2:	bf00      	nop
 8000ec4:	3730      	adds	r7, #48	@ 0x30
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40020800 	.word	0x40020800
 8000ed8:	40020c00 	.word	0x40020c00
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	40020400 	.word	0x40020400

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <Error_Handler+0x8>

08000ef0 <masked_and>:
}

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 8000ef0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ef4:	b092      	sub	sp, #72	@ 0x48
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8000efa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000efc:	627a      	str	r2, [r7, #36]	@ 0x24
 8000efe:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 8000f00:	2300      	movs	r3, #0
 8000f02:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f04:	e018      	b.n	8000f38 <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 8000f06:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f0a:	00db      	lsls	r3, r3, #3
 8000f0c:	4413      	add	r3, r2
 8000f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f16:	00db      	lsls	r3, r3, #3
 8000f18:	4413      	add	r3, r2
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	ea00 0402 	and.w	r4, r0, r2
 8000f22:	ea01 0503 	and.w	r5, r1, r3
 8000f26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f2a:	00db      	lsls	r3, r3, #3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8000f32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f34:	3301      	adds	r3, #1
 8000f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8000f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f3a:	2b03      	cmp	r3, #3
 8000f3c:	d9e3      	bls.n	8000f06 <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 8000f3e:	2300      	movs	r3, #0
 8000f40:	643b      	str	r3, [r7, #64]	@ 0x40
 8000f42:	e078      	b.n	8001036 <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8000f44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f46:	3301      	adds	r3, #1
 8000f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000f4a:	e06e      	b.n	800102a <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8000f4c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f50:	00db      	lsls	r3, r3, #3
 8000f52:	4413      	add	r3, r2
 8000f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	4413      	add	r3, r2
 8000f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f64:	ea00 0802 	and.w	r8, r0, r2
 8000f68:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8000f6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000f70:	00db      	lsls	r3, r3, #3
 8000f72:	4413      	add	r3, r2
 8000f74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f7a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f7c:	00db      	lsls	r3, r3, #3
 8000f7e:	4413      	add	r3, r2
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	ea00 0a02 	and.w	sl, r0, r2
 8000f88:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8000f8c:	ea88 030a 	eor.w	r3, r8, sl
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	ea89 030b 	eor.w	r3, r9, fp
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f9c:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8000fa0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa4:	00db      	lsls	r3, r3, #3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fae:	015a      	lsls	r2, r3, #5
 8000fb0:	6a3b      	ldr	r3, [r7, #32]
 8000fb2:	441a      	add	r2, r3
 8000fb4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fb6:	00db      	lsls	r3, r3, #3
 8000fb8:	4413      	add	r3, r2
 8000fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fbe:	ea80 0402 	eor.w	r4, r0, r2
 8000fc2:	61bc      	str	r4, [r7, #24]
 8000fc4:	404b      	eors	r3, r1
 8000fc6:	61fb      	str	r3, [r7, #28]
 8000fc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fcc:	00db      	lsls	r3, r3, #3
 8000fce:	4413      	add	r3, r2
 8000fd0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000fd4:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 8000fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fdc:	00db      	lsls	r3, r3, #3
 8000fde:	4413      	add	r3, r2
 8000fe0:	e9d3 4500 	ldrd	r4, r5, [r3]
 8000fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fe6:	015a      	lsls	r2, r3, #5
 8000fe8:	6a3b      	ldr	r3, [r7, #32]
 8000fea:	441a      	add	r2, r3
 8000fec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000fee:	00db      	lsls	r3, r3, #3
 8000ff0:	4413      	add	r3, r2
 8000ff2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8000ffa:	ea80 0602 	eor.w	r6, r0, r2
 8000ffe:	613e      	str	r6, [r7, #16]
 8001000:	404b      	eors	r3, r1
 8001002:	617b      	str	r3, [r7, #20]
 8001004:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001008:	460b      	mov	r3, r1
 800100a:	4063      	eors	r3, r4
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	4613      	mov	r3, r2
 8001010:	406b      	eors	r3, r5
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001020:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001024:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001026:	3301      	adds	r3, #1
 8001028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800102a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800102c:	2b03      	cmp	r3, #3
 800102e:	d98d      	bls.n	8000f4c <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 8001030:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001032:	3301      	adds	r3, #1
 8001034:	643b      	str	r3, [r7, #64]	@ 0x40
 8001036:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001038:	2b03      	cmp	r3, #3
 800103a:	d983      	bls.n	8000f44 <masked_and+0x54>
        }
    }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3748      	adds	r7, #72	@ 0x48
 8001042:	46bd      	mov	sp, r7
 8001044:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001048:	4770      	bx	lr
	...

0800104c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	607b      	str	r3, [r7, #4]
 8001056:	4b10      	ldr	r3, [pc, #64]	@ (8001098 <HAL_MspInit+0x4c>)
 8001058:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800105a:	4a0f      	ldr	r2, [pc, #60]	@ (8001098 <HAL_MspInit+0x4c>)
 800105c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001060:	6453      	str	r3, [r2, #68]	@ 0x44
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <HAL_MspInit+0x4c>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001066:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800106a:	607b      	str	r3, [r7, #4]
 800106c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_MspInit+0x4c>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001076:	4a08      	ldr	r2, [pc, #32]	@ (8001098 <HAL_MspInit+0x4c>)
 8001078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800107c:	6413      	str	r3, [r2, #64]	@ 0x40
 800107e:	4b06      	ldr	r3, [pc, #24]	@ (8001098 <HAL_MspInit+0x4c>)
 8001080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001086:	603b      	str	r3, [r7, #0]
 8001088:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800108a:	2007      	movs	r0, #7
 800108c:	f000 fbe4 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a19      	ldr	r2, [pc, #100]	@ (8001120 <HAL_I2C_MspInit+0x84>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d12c      	bne.n	8001118 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_I2C_MspInit+0x88>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <HAL_I2C_MspInit+0x88>)
 80010c8:	f043 0302 	orr.w	r3, r3, #2
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_I2C_MspInit+0x88>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0302 	and.w	r3, r3, #2
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80010da:	f44f 7310 	mov.w	r3, #576	@ 0x240
 80010de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010e0:	2312      	movs	r3, #18
 80010e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e4:	2301      	movs	r3, #1
 80010e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ec:	2304      	movs	r3, #4
 80010ee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	4619      	mov	r1, r3
 80010f6:	480c      	ldr	r0, [pc, #48]	@ (8001128 <HAL_I2C_MspInit+0x8c>)
 80010f8:	f000 fbf0 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	4b08      	ldr	r3, [pc, #32]	@ (8001124 <HAL_I2C_MspInit+0x88>)
 8001102:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001104:	4a07      	ldr	r2, [pc, #28]	@ (8001124 <HAL_I2C_MspInit+0x88>)
 8001106:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800110a:	6413      	str	r3, [r2, #64]	@ 0x40
 800110c:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_I2C_MspInit+0x88>)
 800110e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001110:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001118:	bf00      	nop
 800111a:	3728      	adds	r7, #40	@ 0x28
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}
 8001120:	40005400 	.word	0x40005400
 8001124:	40023800 	.word	0x40023800
 8001128:	40020400 	.word	0x40020400

0800112c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08e      	sub	sp, #56	@ 0x38
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001134:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a31      	ldr	r2, [pc, #196]	@ (800121c <HAL_I2S_MspInit+0xf0>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d15a      	bne.n	8001212 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800115c:	2301      	movs	r3, #1
 800115e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001160:	23c0      	movs	r3, #192	@ 0xc0
 8001162:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4618      	mov	r0, r3
 800116e:	f004 f91b 	bl	80053a8 <HAL_RCCEx_PeriphCLKConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001178:	f7ff feb4 	bl	8000ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	4b27      	ldr	r3, [pc, #156]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 8001182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001184:	4a26      	ldr	r2, [pc, #152]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 8001186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800118a:	6413      	str	r3, [r2, #64]	@ 0x40
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001190:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 800119e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80011a8:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 80011aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	2300      	movs	r3, #0
 80011b6:	60bb      	str	r3, [r7, #8]
 80011b8:	4b19      	ldr	r3, [pc, #100]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 80011ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011bc:	4a18      	ldr	r2, [pc, #96]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 80011be:	f043 0304 	orr.w	r3, r3, #4
 80011c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c4:	4b16      	ldr	r3, [pc, #88]	@ (8001220 <HAL_I2S_MspInit+0xf4>)
 80011c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c8:	f003 0304 	and.w	r3, r3, #4
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80011d0:	2310      	movs	r3, #16
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011dc:	2300      	movs	r3, #0
 80011de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80011e0:	2306      	movs	r3, #6
 80011e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011e8:	4619      	mov	r1, r3
 80011ea:	480e      	ldr	r0, [pc, #56]	@ (8001224 <HAL_I2S_MspInit+0xf8>)
 80011ec:	f000 fb76 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80011f0:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f6:	2302      	movs	r3, #2
 80011f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fe:	2300      	movs	r3, #0
 8001200:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001202:	2306      	movs	r3, #6
 8001204:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120a:	4619      	mov	r1, r3
 800120c:	4806      	ldr	r0, [pc, #24]	@ (8001228 <HAL_I2S_MspInit+0xfc>)
 800120e:	f000 fb65 	bl	80018dc <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8001212:	bf00      	nop
 8001214:	3738      	adds	r7, #56	@ 0x38
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40003c00 	.word	0x40003c00
 8001220:	40023800 	.word	0x40023800
 8001224:	40020000 	.word	0x40020000
 8001228:	40020800 	.word	0x40020800

0800122c <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a0b      	ldr	r2, [pc, #44]	@ (8001268 <HAL_RNG_MspInit+0x3c>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d10d      	bne.n	800125a <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_RNG_MspInit+0x40>)
 8001244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001246:	4a09      	ldr	r2, [pc, #36]	@ (800126c <HAL_RNG_MspInit+0x40>)
 8001248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800124c:	6353      	str	r3, [r2, #52]	@ 0x34
 800124e:	4b07      	ldr	r3, [pc, #28]	@ (800126c <HAL_RNG_MspInit+0x40>)
 8001250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001252:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 800125a:	bf00      	nop
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	50060800 	.word	0x50060800
 800126c:	40023800 	.word	0x40023800

08001270 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b08a      	sub	sp, #40	@ 0x28
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001278:	f107 0314 	add.w	r3, r7, #20
 800127c:	2200      	movs	r2, #0
 800127e:	601a      	str	r2, [r3, #0]
 8001280:	605a      	str	r2, [r3, #4]
 8001282:	609a      	str	r2, [r3, #8]
 8001284:	60da      	str	r2, [r3, #12]
 8001286:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a19      	ldr	r2, [pc, #100]	@ (80012f4 <HAL_SPI_MspInit+0x84>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d12b      	bne.n	80012ea <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
 8001296:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a17      	ldr	r2, [pc, #92]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 800129c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a10      	ldr	r2, [pc, #64]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 80012b8:	f043 0301 	orr.w	r3, r3, #1
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <HAL_SPI_MspInit+0x88>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	60fb      	str	r3, [r7, #12]
 80012c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80012ca:	23e0      	movs	r3, #224	@ 0xe0
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012da:	2305      	movs	r3, #5
 80012dc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4805      	ldr	r0, [pc, #20]	@ (80012fc <HAL_SPI_MspInit+0x8c>)
 80012e6:	f000 faf9 	bl	80018dc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	@ 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40013000 	.word	0x40013000
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020000 	.word	0x40020000

08001300 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	@ 0x28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a19      	ldr	r2, [pc, #100]	@ (8001384 <HAL_UART_MspInit+0x84>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d12b      	bne.n	800137a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	613b      	str	r3, [r7, #16]
 8001326:	4b18      	ldr	r3, [pc, #96]	@ (8001388 <HAL_UART_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132a:	4a17      	ldr	r2, [pc, #92]	@ (8001388 <HAL_UART_MspInit+0x88>)
 800132c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001330:	6413      	str	r3, [r2, #64]	@ 0x40
 8001332:	4b15      	ldr	r3, [pc, #84]	@ (8001388 <HAL_UART_MspInit+0x88>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800133e:	2300      	movs	r3, #0
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	4b11      	ldr	r3, [pc, #68]	@ (8001388 <HAL_UART_MspInit+0x88>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001346:	4a10      	ldr	r2, [pc, #64]	@ (8001388 <HAL_UART_MspInit+0x88>)
 8001348:	f043 0301 	orr.w	r3, r3, #1
 800134c:	6313      	str	r3, [r2, #48]	@ 0x30
 800134e:	4b0e      	ldr	r3, [pc, #56]	@ (8001388 <HAL_UART_MspInit+0x88>)
 8001350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	60fb      	str	r3, [r7, #12]
 8001358:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800135a:	230c      	movs	r3, #12
 800135c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800135e:	2302      	movs	r3, #2
 8001360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001362:	2300      	movs	r3, #0
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001366:	2303      	movs	r3, #3
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800136a:	2307      	movs	r3, #7
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800136e:	f107 0314 	add.w	r3, r7, #20
 8001372:	4619      	mov	r1, r3
 8001374:	4805      	ldr	r0, [pc, #20]	@ (800138c <HAL_UART_MspInit+0x8c>)
 8001376:	f000 fab1 	bl	80018dc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800137a:	bf00      	nop
 800137c:	3728      	adds	r7, #40	@ 0x28
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	40004400 	.word	0x40004400
 8001388:	40023800 	.word	0x40023800
 800138c:	40020000 	.word	0x40020000

08001390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001394:	bf00      	nop
 8001396:	e7fd      	b.n	8001394 <NMI_Handler+0x4>

08001398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139c:	bf00      	nop
 800139e:	e7fd      	b.n	800139c <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	bf00      	nop
 80013a6:	e7fd      	b.n	80013a4 <MemManage_Handler+0x4>

080013a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ac:	bf00      	nop
 80013ae:	e7fd      	b.n	80013ac <BusFault_Handler+0x4>

080013b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013b0:	b480      	push	{r7}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b4:	bf00      	nop
 80013b6:	e7fd      	b.n	80013b4 <UsageFault_Handler+0x4>

080013b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e6:	f000 f923 	bl	8001630 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ea:	bf00      	nop
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80013f4:	4802      	ldr	r0, [pc, #8]	@ (8001400 <OTG_FS_IRQHandler+0x10>)
 80013f6:	f000 ff07 	bl	8002208 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200005d4 	.word	0x200005d4

08001404 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b086      	sub	sp, #24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	e00a      	b.n	800142c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001416:	f3af 8000 	nop.w
 800141a:	4601      	mov	r1, r0
 800141c:	68bb      	ldr	r3, [r7, #8]
 800141e:	1c5a      	adds	r2, r3, #1
 8001420:	60ba      	str	r2, [r7, #8]
 8001422:	b2ca      	uxtb	r2, r1
 8001424:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	3301      	adds	r3, #1
 800142a:	617b      	str	r3, [r7, #20]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	429a      	cmp	r2, r3
 8001432:	dbf0      	blt.n	8001416 <_read+0x12>
  }

  return len;
 8001434:	687b      	ldr	r3, [r7, #4]
}
 8001436:	4618      	mov	r0, r3
 8001438:	3718      	adds	r7, #24
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_close>:
  }
  return len;
}

int _close(int file)
{
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001446:	f04f 33ff 	mov.w	r3, #4294967295
}
 800144a:	4618      	mov	r0, r3
 800144c:	370c      	adds	r7, #12
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001456:	b480      	push	{r7}
 8001458:	b083      	sub	sp, #12
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
 800145e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001466:	605a      	str	r2, [r3, #4]
  return 0;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr

08001476 <_isatty>:

int _isatty(int file)
{
 8001476:	b480      	push	{r7}
 8001478:	b083      	sub	sp, #12
 800147a:	af00      	add	r7, sp, #0
 800147c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
	...

080014a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014b0:	4a14      	ldr	r2, [pc, #80]	@ (8001504 <_sbrk+0x5c>)
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <_sbrk+0x60>)
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014bc:	4b13      	ldr	r3, [pc, #76]	@ (800150c <_sbrk+0x64>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d102      	bne.n	80014ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014c4:	4b11      	ldr	r3, [pc, #68]	@ (800150c <_sbrk+0x64>)
 80014c6:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <_sbrk+0x68>)
 80014c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <_sbrk+0x64>)
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4413      	add	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d207      	bcs.n	80014e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014d8:	f008 fe38 	bl	800a14c <__errno>
 80014dc:	4603      	mov	r3, r0
 80014de:	220c      	movs	r2, #12
 80014e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e009      	b.n	80014fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014e8:	4b08      	ldr	r3, [pc, #32]	@ (800150c <_sbrk+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ee:	4b07      	ldr	r3, [pc, #28]	@ (800150c <_sbrk+0x64>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	4a05      	ldr	r2, [pc, #20]	@ (800150c <_sbrk+0x64>)
 80014f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014fa:	68fb      	ldr	r3, [r7, #12]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20020000 	.word	0x20020000
 8001508:	00000400 	.word	0x00000400
 800150c:	200001f0 	.word	0x200001f0
 8001510:	20000b00 	.word	0x20000b00

08001514 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001518:	4b06      	ldr	r3, [pc, #24]	@ (8001534 <SystemInit+0x20>)
 800151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800151e:	4a05      	ldr	r2, [pc, #20]	@ (8001534 <SystemInit+0x20>)
 8001520:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001524:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	e000ed00 	.word	0xe000ed00

08001538 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001538:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001570 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800153c:	f7ff ffea 	bl	8001514 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001540:	480c      	ldr	r0, [pc, #48]	@ (8001574 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001542:	490d      	ldr	r1, [pc, #52]	@ (8001578 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001544:	4a0d      	ldr	r2, [pc, #52]	@ (800157c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001546:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001548:	e002      	b.n	8001550 <LoopCopyDataInit>

0800154a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800154a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800154c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800154e:	3304      	adds	r3, #4

08001550 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001550:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001552:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001554:	d3f9      	bcc.n	800154a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001556:	4a0a      	ldr	r2, [pc, #40]	@ (8001580 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001558:	4c0a      	ldr	r4, [pc, #40]	@ (8001584 <LoopFillZerobss+0x22>)
  movs r3, #0
 800155a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800155c:	e001      	b.n	8001562 <LoopFillZerobss>

0800155e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800155e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001560:	3204      	adds	r2, #4

08001562 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001562:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001564:	d3fb      	bcc.n	800155e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001566:	f008 fdf7 	bl	800a158 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800156a:	f7ff f82d 	bl	80005c8 <main>
  bx  lr    
 800156e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001570:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001574:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001578:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 800157c:	0800ab30 	.word	0x0800ab30
  ldr r2, =_sbss
 8001580:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001584:	20000b00 	.word	0x20000b00

08001588 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001588:	e7fe      	b.n	8001588 <ADC_IRQHandler>
	...

0800158c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001590:	4b0e      	ldr	r3, [pc, #56]	@ (80015cc <HAL_Init+0x40>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <HAL_Init+0x40>)
 8001596:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800159a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800159c:	4b0b      	ldr	r3, [pc, #44]	@ (80015cc <HAL_Init+0x40>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a0a      	ldr	r2, [pc, #40]	@ (80015cc <HAL_Init+0x40>)
 80015a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015a8:	4b08      	ldr	r3, [pc, #32]	@ (80015cc <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a07      	ldr	r2, [pc, #28]	@ (80015cc <HAL_Init+0x40>)
 80015ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015b4:	2003      	movs	r0, #3
 80015b6:	f000 f94f 	bl	8001858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015ba:	2000      	movs	r0, #0
 80015bc:	f000 f808 	bl	80015d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c0:	f7ff fd44 	bl	800104c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023c00 	.word	0x40023c00

080015d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015d8:	4b12      	ldr	r3, [pc, #72]	@ (8001624 <HAL_InitTick+0x54>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b12      	ldr	r3, [pc, #72]	@ (8001628 <HAL_InitTick+0x58>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f967 	bl	80018c2 <HAL_SYSTICK_Config>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00e      	b.n	800161c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b0f      	cmp	r3, #15
 8001602:	d80a      	bhi.n	800161a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001604:	2200      	movs	r2, #0
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f000 f92f 	bl	800186e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001610:	4a06      	ldr	r2, [pc, #24]	@ (800162c <HAL_InitTick+0x5c>)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001616:	2300      	movs	r3, #0
 8001618:	e000      	b.n	800161c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
}
 800161c:	4618      	mov	r0, r3
 800161e:	3708      	adds	r7, #8
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	20000008 	.word	0x20000008
 800162c:	20000004 	.word	0x20000004

08001630 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001634:	4b06      	ldr	r3, [pc, #24]	@ (8001650 <HAL_IncTick+0x20>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	461a      	mov	r2, r3
 800163a:	4b06      	ldr	r3, [pc, #24]	@ (8001654 <HAL_IncTick+0x24>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4413      	add	r3, r2
 8001640:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <HAL_IncTick+0x24>)
 8001642:	6013      	str	r3, [r2, #0]
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000008 	.word	0x20000008
 8001654:	200001f4 	.word	0x200001f4

08001658 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  return uwTick;
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <HAL_GetTick+0x14>)
 800165e:	681b      	ldr	r3, [r3, #0]
}
 8001660:	4618      	mov	r0, r3
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	200001f4 	.word	0x200001f4

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff ffee 	bl	8001658 <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffde 	bl	8001658 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000008 	.word	0x20000008

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	@ (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	@ (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	@ (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	@ 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001824:	d301      	bcc.n	800182a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001826:	2301      	movs	r3, #1
 8001828:	e00f      	b.n	800184a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800182a:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <SysTick_Config+0x40>)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001832:	210f      	movs	r1, #15
 8001834:	f04f 30ff 	mov.w	r0, #4294967295
 8001838:	f7ff ff8e 	bl	8001758 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800183c:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <SysTick_Config+0x40>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <SysTick_Config+0x40>)
 8001844:	2207      	movs	r2, #7
 8001846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	e000e010 	.word	0xe000e010

08001858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001860:	6878      	ldr	r0, [r7, #4]
 8001862:	f7ff ff29 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001866:	bf00      	nop
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800186e:	b580      	push	{r7, lr}
 8001870:	b086      	sub	sp, #24
 8001872:	af00      	add	r7, sp, #0
 8001874:	4603      	mov	r3, r0
 8001876:	60b9      	str	r1, [r7, #8]
 8001878:	607a      	str	r2, [r7, #4]
 800187a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001880:	f7ff ff3e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	68b9      	ldr	r1, [r7, #8]
 800188a:	6978      	ldr	r0, [r7, #20]
 800188c:	f7ff ff8e 	bl	80017ac <NVIC_EncodePriority>
 8001890:	4602      	mov	r2, r0
 8001892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001896:	4611      	mov	r1, r2
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff5d 	bl	8001758 <__NVIC_SetPriority>
}
 800189e:	bf00      	nop
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff ff31 	bl	800171c <__NVIC_EnableIRQ>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b082      	sub	sp, #8
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff ffa2 	bl	8001814 <SysTick_Config>
 80018d0:	4603      	mov	r3, r0
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3708      	adds	r7, #8
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
	...

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e16b      	b.n	8001bd0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 815a 	bne.w	8001bca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80b4 	beq.w	8001bca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b60      	ldr	r3, [pc, #384]	@ (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a6a:	4a5f      	ldr	r2, [pc, #380]	@ (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a72:	4b5d      	ldr	r3, [pc, #372]	@ (8001be8 <HAL_GPIO_Init+0x30c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a5b      	ldr	r2, [pc, #364]	@ (8001bec <HAL_GPIO_Init+0x310>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a52      	ldr	r2, [pc, #328]	@ (8001bf0 <HAL_GPIO_Init+0x314>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d02b      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a51      	ldr	r2, [pc, #324]	@ (8001bf4 <HAL_GPIO_Init+0x318>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d025      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a50      	ldr	r2, [pc, #320]	@ (8001bf8 <HAL_GPIO_Init+0x31c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01f      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4f      	ldr	r2, [pc, #316]	@ (8001bfc <HAL_GPIO_Init+0x320>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d019      	beq.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4e      	ldr	r2, [pc, #312]	@ (8001c00 <HAL_GPIO_Init+0x324>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d013      	beq.n	8001af2 <HAL_GPIO_Init+0x216>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a4d      	ldr	r2, [pc, #308]	@ (8001c04 <HAL_GPIO_Init+0x328>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d00d      	beq.n	8001aee <HAL_GPIO_Init+0x212>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a4c      	ldr	r2, [pc, #304]	@ (8001c08 <HAL_GPIO_Init+0x32c>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d007      	beq.n	8001aea <HAL_GPIO_Init+0x20e>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a4b      	ldr	r2, [pc, #300]	@ (8001c0c <HAL_GPIO_Init+0x330>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_GPIO_Init+0x20a>
 8001ae2:	2307      	movs	r3, #7
 8001ae4:	e00e      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001ae6:	2308      	movs	r3, #8
 8001ae8:	e00c      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aea:	2306      	movs	r3, #6
 8001aec:	e00a      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001aee:	2305      	movs	r3, #5
 8001af0:	e008      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af2:	2304      	movs	r3, #4
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001af6:	2303      	movs	r3, #3
 8001af8:	e004      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e002      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001afe:	2301      	movs	r3, #1
 8001b00:	e000      	b.n	8001b04 <HAL_GPIO_Init+0x228>
 8001b02:	2300      	movs	r3, #0
 8001b04:	69fa      	ldr	r2, [r7, #28]
 8001b06:	f002 0203 	and.w	r2, r2, #3
 8001b0a:	0092      	lsls	r2, r2, #2
 8001b0c:	4093      	lsls	r3, r2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4313      	orrs	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b14:	4935      	ldr	r1, [pc, #212]	@ (8001bec <HAL_GPIO_Init+0x310>)
 8001b16:	69fb      	ldr	r3, [r7, #28]
 8001b18:	089b      	lsrs	r3, r3, #2
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b22:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	43db      	mvns	r3, r3
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b46:	4a32      	ldr	r2, [pc, #200]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b4c:	4b30      	ldr	r3, [pc, #192]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b70:	4a27      	ldr	r2, [pc, #156]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b76:	4b26      	ldr	r3, [pc, #152]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	43db      	mvns	r3, r3
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	4013      	ands	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d003      	beq.n	8001b9a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ba0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	43db      	mvns	r3, r3
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	4013      	ands	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bc4:	4a12      	ldr	r2, [pc, #72]	@ (8001c10 <HAL_GPIO_Init+0x334>)
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3301      	adds	r3, #1
 8001bce:	61fb      	str	r3, [r7, #28]
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	2b0f      	cmp	r3, #15
 8001bd4:	f67f ae90 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bd8:	bf00      	nop
 8001bda:	bf00      	nop
 8001bdc:	3724      	adds	r7, #36	@ 0x24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40023800 	.word	0x40023800
 8001bec:	40013800 	.word	0x40013800
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	40020800 	.word	0x40020800
 8001bfc:	40020c00 	.word	0x40020c00
 8001c00:	40021000 	.word	0x40021000
 8001c04:	40021400 	.word	0x40021400
 8001c08:	40021800 	.word	0x40021800
 8001c0c:	40021c00 	.word	0x40021c00
 8001c10:	40013c00 	.word	0x40013c00

08001c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	807b      	strh	r3, [r7, #2]
 8001c20:	4613      	mov	r3, r2
 8001c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c24:	787b      	ldrb	r3, [r7, #1]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c2a:	887a      	ldrh	r2, [r7, #2]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c30:	e003      	b.n	8001c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c32:	887b      	ldrh	r3, [r7, #2]
 8001c34:	041a      	lsls	r2, r3, #16
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	619a      	str	r2, [r3, #24]
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af02      	add	r7, sp, #8
 8001c4c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e059      	b.n	8001d0c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f007 fbe4 	bl	8009440 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c86:	d102      	bne.n	8001c8e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f004 f9fd 	bl	8006092 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	7c1a      	ldrb	r2, [r3, #16]
 8001ca0:	f88d 2000 	strb.w	r2, [sp]
 8001ca4:	3304      	adds	r3, #4
 8001ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ca8:	f004 f97e 	bl	8005fa8 <USB_CoreInit>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d005      	beq.n	8001cbe <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2202      	movs	r2, #2
 8001cb6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e026      	b.n	8001d0c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f004 f9f5 	bl	80060b4 <USB_SetCurrentMode>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2202      	movs	r2, #2
 8001cd4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e017      	b.n	8001d0c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6818      	ldr	r0, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	7c1a      	ldrb	r2, [r3, #16]
 8001ce4:	f88d 2000 	strb.w	r2, [sp]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cec:	f004 fb98 	bl	8006420 <USB_HostInit>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e004      	b.n	8001d0c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	3710      	adds	r7, #16
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001d14:	b590      	push	{r4, r7, lr}
 8001d16:	b08b      	sub	sp, #44	@ 0x2c
 8001d18:	af04      	add	r7, sp, #16
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	4608      	mov	r0, r1
 8001d1e:	4611      	mov	r1, r2
 8001d20:	461a      	mov	r2, r3
 8001d22:	4603      	mov	r3, r0
 8001d24:	70fb      	strb	r3, [r7, #3]
 8001d26:	460b      	mov	r3, r1
 8001d28:	70bb      	strb	r3, [r7, #2]
 8001d2a:	4613      	mov	r3, r2
 8001d2c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001d2e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001d30:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_HCD_HC_Init+0x2c>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e09d      	b.n	8001e7c <HAL_HCD_HC_Init+0x168>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4613      	mov	r3, r2
 8001d4e:	011b      	lsls	r3, r3, #4
 8001d50:	1a9b      	subs	r3, r3, r2
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	3319      	adds	r3, #25
 8001d58:	2200      	movs	r2, #0
 8001d5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d5c:	78fa      	ldrb	r2, [r7, #3]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	011b      	lsls	r3, r3, #4
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	3314      	adds	r3, #20
 8001d6c:	787a      	ldrb	r2, [r7, #1]
 8001d6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	1a9b      	subs	r3, r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	3315      	adds	r3, #21
 8001d80:	78fa      	ldrb	r2, [r7, #3]
 8001d82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d84:	78fa      	ldrb	r2, [r7, #3]
 8001d86:	6879      	ldr	r1, [r7, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	011b      	lsls	r3, r3, #4
 8001d8c:	1a9b      	subs	r3, r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	3326      	adds	r3, #38	@ 0x26
 8001d94:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001d98:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d9a:	78fa      	ldrb	r2, [r7, #3]
 8001d9c:	78bb      	ldrb	r3, [r7, #2]
 8001d9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001da2:	b2d8      	uxtb	r0, r3
 8001da4:	6879      	ldr	r1, [r7, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	011b      	lsls	r3, r3, #4
 8001daa:	1a9b      	subs	r3, r3, r2
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	440b      	add	r3, r1
 8001db0:	3316      	adds	r3, #22
 8001db2:	4602      	mov	r2, r0
 8001db4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	4619      	mov	r1, r3
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 fbc8 	bl	8002550 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001dc0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	da0a      	bge.n	8001dde <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4613      	mov	r3, r2
 8001dce:	011b      	lsls	r3, r3, #4
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3317      	adds	r3, #23
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
 8001ddc:	e009      	b.n	8001df2 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001dde:	78fa      	ldrb	r2, [r7, #3]
 8001de0:	6879      	ldr	r1, [r7, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	011b      	lsls	r3, r3, #4
 8001de6:	1a9b      	subs	r3, r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	440b      	add	r3, r1
 8001dec:	3317      	adds	r3, #23
 8001dee:	2200      	movs	r2, #0
 8001df0:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f004 fc76 	bl	80066e8 <USB_GetHostSpeed>
 8001dfc:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001dfe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d10b      	bne.n	8001e1e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001e06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d107      	bne.n	8001e1e <HAL_HCD_HC_Init+0x10a>
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d104      	bne.n	8001e1e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2bbc      	cmp	r3, #188	@ 0xbc
 8001e18:	d901      	bls.n	8001e1e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001e1a:	23bc      	movs	r3, #188	@ 0xbc
 8001e1c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001e1e:	78fa      	ldrb	r2, [r7, #3]
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4613      	mov	r3, r2
 8001e24:	011b      	lsls	r3, r3, #4
 8001e26:	1a9b      	subs	r3, r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	440b      	add	r3, r1
 8001e2c:	3318      	adds	r3, #24
 8001e2e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001e32:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001e34:	78fa      	ldrb	r2, [r7, #3]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	b298      	uxth	r0, r3
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	011b      	lsls	r3, r3, #4
 8001e40:	1a9b      	subs	r3, r3, r2
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	440b      	add	r3, r1
 8001e46:	3328      	adds	r3, #40	@ 0x28
 8001e48:	4602      	mov	r2, r0
 8001e4a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6818      	ldr	r0, [r3, #0]
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	b29b      	uxth	r3, r3
 8001e54:	787c      	ldrb	r4, [r7, #1]
 8001e56:	78ba      	ldrb	r2, [r7, #2]
 8001e58:	78f9      	ldrb	r1, [r7, #3]
 8001e5a:	9302      	str	r3, [sp, #8]
 8001e5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001e60:	9301      	str	r3, [sp, #4]
 8001e62:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4623      	mov	r3, r4
 8001e6a:	f004 fc65 	bl	8006738 <USB_HC_Init>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2200      	movs	r2, #0
 8001e76:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001e7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	371c      	adds	r7, #28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd90      	pop	{r4, r7, pc}

08001e84 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d101      	bne.n	8001ea2 <HAL_HCD_HC_Halt+0x1e>
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	e00f      	b.n	8001ec2 <HAL_HCD_HC_Halt+0x3e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	78fa      	ldrb	r2, [r7, #3]
 8001eb0:	4611      	mov	r1, r2
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f004 fff7 	bl	8006ea6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	4608      	mov	r0, r1
 8001ed6:	4611      	mov	r1, r2
 8001ed8:	461a      	mov	r2, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	70fb      	strb	r3, [r7, #3]
 8001ede:	460b      	mov	r3, r1
 8001ee0:	70bb      	strb	r3, [r7, #2]
 8001ee2:	4613      	mov	r3, r2
 8001ee4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	6879      	ldr	r1, [r7, #4]
 8001eea:	4613      	mov	r3, r2
 8001eec:	011b      	lsls	r3, r3, #4
 8001eee:	1a9b      	subs	r3, r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3317      	adds	r3, #23
 8001ef6:	78ba      	ldrb	r2, [r7, #2]
 8001ef8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001efa:	78fa      	ldrb	r2, [r7, #3]
 8001efc:	6879      	ldr	r1, [r7, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	011b      	lsls	r3, r3, #4
 8001f02:	1a9b      	subs	r3, r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3326      	adds	r3, #38	@ 0x26
 8001f0a:	787a      	ldrb	r2, [r7, #1]
 8001f0c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001f0e:	7c3b      	ldrb	r3, [r7, #16]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d114      	bne.n	8001f3e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001f14:	78fa      	ldrb	r2, [r7, #3]
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	011b      	lsls	r3, r3, #4
 8001f1c:	1a9b      	subs	r3, r3, r2
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	440b      	add	r3, r1
 8001f22:	332a      	adds	r3, #42	@ 0x2a
 8001f24:	2203      	movs	r2, #3
 8001f26:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001f28:	78fa      	ldrb	r2, [r7, #3]
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	1a9b      	subs	r3, r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	3319      	adds	r3, #25
 8001f38:	7f3a      	ldrb	r2, [r7, #28]
 8001f3a:	701a      	strb	r2, [r3, #0]
 8001f3c:	e009      	b.n	8001f52 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f3e:	78fa      	ldrb	r2, [r7, #3]
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	011b      	lsls	r3, r3, #4
 8001f46:	1a9b      	subs	r3, r3, r2
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	440b      	add	r3, r1
 8001f4c:	332a      	adds	r3, #42	@ 0x2a
 8001f4e:	2202      	movs	r2, #2
 8001f50:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001f52:	787b      	ldrb	r3, [r7, #1]
 8001f54:	2b03      	cmp	r3, #3
 8001f56:	f200 8102 	bhi.w	800215e <HAL_HCD_HC_SubmitRequest+0x292>
 8001f5a:	a201      	add	r2, pc, #4	@ (adr r2, 8001f60 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001f5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f60:	08001f71 	.word	0x08001f71
 8001f64:	08002149 	.word	0x08002149
 8001f68:	08002035 	.word	0x08002035
 8001f6c:	080020bf 	.word	0x080020bf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001f70:	7c3b      	ldrb	r3, [r7, #16]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	f040 80f5 	bne.w	8002162 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001f78:	78bb      	ldrb	r3, [r7, #2]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d12d      	bne.n	8001fda <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001f7e:	8b3b      	ldrh	r3, [r7, #24]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d109      	bne.n	8001f98 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001f84:	78fa      	ldrb	r2, [r7, #3]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	011b      	lsls	r3, r3, #4
 8001f8c:	1a9b      	subs	r3, r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	333d      	adds	r3, #61	@ 0x3d
 8001f94:	2201      	movs	r2, #1
 8001f96:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f98:	78fa      	ldrb	r2, [r7, #3]
 8001f9a:	6879      	ldr	r1, [r7, #4]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	1a9b      	subs	r3, r3, r2
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	333d      	adds	r3, #61	@ 0x3d
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d10a      	bne.n	8001fc4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fae:	78fa      	ldrb	r2, [r7, #3]
 8001fb0:	6879      	ldr	r1, [r7, #4]
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	011b      	lsls	r3, r3, #4
 8001fb6:	1a9b      	subs	r3, r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	332a      	adds	r3, #42	@ 0x2a
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001fc2:	e0ce      	b.n	8002162 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fc4:	78fa      	ldrb	r2, [r7, #3]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	011b      	lsls	r3, r3, #4
 8001fcc:	1a9b      	subs	r3, r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	332a      	adds	r3, #42	@ 0x2a
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	701a      	strb	r2, [r3, #0]
      break;
 8001fd8:	e0c3      	b.n	8002162 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001fda:	78fa      	ldrb	r2, [r7, #3]
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	011b      	lsls	r3, r3, #4
 8001fe2:	1a9b      	subs	r3, r3, r2
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	440b      	add	r3, r1
 8001fe8:	331a      	adds	r3, #26
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	f040 80b8 	bne.w	8002162 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	333c      	adds	r3, #60	@ 0x3c
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	440b      	add	r3, r1
 8002016:	332a      	adds	r3, #42	@ 0x2a
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
      break;
 800201c:	e0a1      	b.n	8002162 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800201e:	78fa      	ldrb	r2, [r7, #3]
 8002020:	6879      	ldr	r1, [r7, #4]
 8002022:	4613      	mov	r3, r2
 8002024:	011b      	lsls	r3, r3, #4
 8002026:	1a9b      	subs	r3, r3, r2
 8002028:	009b      	lsls	r3, r3, #2
 800202a:	440b      	add	r3, r1
 800202c:	332a      	adds	r3, #42	@ 0x2a
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
      break;
 8002032:	e096      	b.n	8002162 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002034:	78bb      	ldrb	r3, [r7, #2]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d120      	bne.n	800207c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800203a:	78fa      	ldrb	r2, [r7, #3]
 800203c:	6879      	ldr	r1, [r7, #4]
 800203e:	4613      	mov	r3, r2
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	1a9b      	subs	r3, r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	333d      	adds	r3, #61	@ 0x3d
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10a      	bne.n	8002066 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002050:	78fa      	ldrb	r2, [r7, #3]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	1a9b      	subs	r3, r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	332a      	adds	r3, #42	@ 0x2a
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002064:	e07e      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002066:	78fa      	ldrb	r2, [r7, #3]
 8002068:	6879      	ldr	r1, [r7, #4]
 800206a:	4613      	mov	r3, r2
 800206c:	011b      	lsls	r3, r3, #4
 800206e:	1a9b      	subs	r3, r3, r2
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	440b      	add	r3, r1
 8002074:	332a      	adds	r3, #42	@ 0x2a
 8002076:	2202      	movs	r2, #2
 8002078:	701a      	strb	r2, [r3, #0]
      break;
 800207a:	e073      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800207c:	78fa      	ldrb	r2, [r7, #3]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	011b      	lsls	r3, r3, #4
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	333c      	adds	r3, #60	@ 0x3c
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10a      	bne.n	80020a8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002092:	78fa      	ldrb	r2, [r7, #3]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	011b      	lsls	r3, r3, #4
 800209a:	1a9b      	subs	r3, r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	332a      	adds	r3, #42	@ 0x2a
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
      break;
 80020a6:	e05d      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a8:	78fa      	ldrb	r2, [r7, #3]
 80020aa:	6879      	ldr	r1, [r7, #4]
 80020ac:	4613      	mov	r3, r2
 80020ae:	011b      	lsls	r3, r3, #4
 80020b0:	1a9b      	subs	r3, r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	332a      	adds	r3, #42	@ 0x2a
 80020b8:	2202      	movs	r2, #2
 80020ba:	701a      	strb	r2, [r3, #0]
      break;
 80020bc:	e052      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80020be:	78bb      	ldrb	r3, [r7, #2]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d120      	bne.n	8002106 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020c4:	78fa      	ldrb	r2, [r7, #3]
 80020c6:	6879      	ldr	r1, [r7, #4]
 80020c8:	4613      	mov	r3, r2
 80020ca:	011b      	lsls	r3, r3, #4
 80020cc:	1a9b      	subs	r3, r3, r2
 80020ce:	009b      	lsls	r3, r3, #2
 80020d0:	440b      	add	r3, r1
 80020d2:	333d      	adds	r3, #61	@ 0x3d
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10a      	bne.n	80020f0 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80020da:	78fa      	ldrb	r2, [r7, #3]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	011b      	lsls	r3, r3, #4
 80020e2:	1a9b      	subs	r3, r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	332a      	adds	r3, #42	@ 0x2a
 80020ea:	2200      	movs	r2, #0
 80020ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80020ee:	e039      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020f0:	78fa      	ldrb	r2, [r7, #3]
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	4613      	mov	r3, r2
 80020f6:	011b      	lsls	r3, r3, #4
 80020f8:	1a9b      	subs	r3, r3, r2
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	332a      	adds	r3, #42	@ 0x2a
 8002100:	2202      	movs	r2, #2
 8002102:	701a      	strb	r2, [r3, #0]
      break;
 8002104:	e02e      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002106:	78fa      	ldrb	r2, [r7, #3]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	011b      	lsls	r3, r3, #4
 800210e:	1a9b      	subs	r3, r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	333c      	adds	r3, #60	@ 0x3c
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d10a      	bne.n	8002132 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800211c:	78fa      	ldrb	r2, [r7, #3]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	011b      	lsls	r3, r3, #4
 8002124:	1a9b      	subs	r3, r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	332a      	adds	r3, #42	@ 0x2a
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
      break;
 8002130:	e018      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002132:	78fa      	ldrb	r2, [r7, #3]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	011b      	lsls	r3, r3, #4
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	332a      	adds	r3, #42	@ 0x2a
 8002142:	2202      	movs	r2, #2
 8002144:	701a      	strb	r2, [r3, #0]
      break;
 8002146:	e00d      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002148:	78fa      	ldrb	r2, [r7, #3]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	011b      	lsls	r3, r3, #4
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	332a      	adds	r3, #42	@ 0x2a
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
      break;
 800215c:	e002      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800215e:	bf00      	nop
 8002160:	e000      	b.n	8002164 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002162:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	332c      	adds	r3, #44	@ 0x2c
 8002174:	697a      	ldr	r2, [r7, #20]
 8002176:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	8b39      	ldrh	r1, [r7, #24]
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	4613      	mov	r3, r2
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	1a9b      	subs	r3, r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4403      	add	r3, r0
 8002188:	3334      	adds	r3, #52	@ 0x34
 800218a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800218c:	78fa      	ldrb	r2, [r7, #3]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	011b      	lsls	r3, r3, #4
 8002194:	1a9b      	subs	r3, r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	334c      	adds	r3, #76	@ 0x4c
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80021a0:	78fa      	ldrb	r2, [r7, #3]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	3338      	adds	r3, #56	@ 0x38
 80021b0:	2200      	movs	r2, #0
 80021b2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80021b4:	78fa      	ldrb	r2, [r7, #3]
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	4613      	mov	r3, r2
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	1a9b      	subs	r3, r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3315      	adds	r3, #21
 80021c4:	78fa      	ldrb	r2, [r7, #3]
 80021c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80021c8:	78fa      	ldrb	r2, [r7, #3]
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	4613      	mov	r3, r2
 80021ce:	011b      	lsls	r3, r3, #4
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	440b      	add	r3, r1
 80021d6:	334d      	adds	r3, #77	@ 0x4d
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
 80021e0:	78fa      	ldrb	r2, [r7, #3]
 80021e2:	4613      	mov	r3, r2
 80021e4:	011b      	lsls	r3, r3, #4
 80021e6:	1a9b      	subs	r3, r3, r2
 80021e8:	009b      	lsls	r3, r3, #2
 80021ea:	3310      	adds	r3, #16
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	4413      	add	r3, r2
 80021f0:	1d19      	adds	r1, r3, #4
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	799b      	ldrb	r3, [r3, #6]
 80021f6:	461a      	mov	r2, r3
 80021f8:	f004 fbca 	bl	8006990 <USB_HC_StartXfer>
 80021fc:	4603      	mov	r3, r0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop

08002208 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	f004 f8be 	bl	80063a0 <USB_GetMode>
 8002224:	4603      	mov	r3, r0
 8002226:	2b01      	cmp	r3, #1
 8002228:	f040 80fb 	bne.w	8002422 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4618      	mov	r0, r3
 8002232:	f004 f881 	bl	8006338 <USB_ReadInterrupts>
 8002236:	4603      	mov	r3, r0
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 80f1 	beq.w	8002420 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4618      	mov	r0, r3
 8002244:	f004 f878 	bl	8006338 <USB_ReadInterrupts>
 8002248:	4603      	mov	r3, r0
 800224a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002252:	d104      	bne.n	800225e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800225c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f004 f868 	bl	8006338 <USB_ReadInterrupts>
 8002268:	4603      	mov	r3, r0
 800226a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800226e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002272:	d104      	bne.n	800227e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800227c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	f004 f858 	bl	8006338 <USB_ReadInterrupts>
 8002288:	4603      	mov	r3, r0
 800228a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800228e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002292:	d104      	bne.n	800229e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800229c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f004 f848 	bl	8006338 <USB_ReadInterrupts>
 80022a8:	4603      	mov	r3, r0
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d103      	bne.n	80022ba <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2202      	movs	r2, #2
 80022b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4618      	mov	r0, r3
 80022c0:	f004 f83a 	bl	8006338 <USB_ReadInterrupts>
 80022c4:	4603      	mov	r3, r0
 80022c6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80022ca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022ce:	d120      	bne.n	8002312 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80022d8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d113      	bne.n	8002312 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80022ea:	2110      	movs	r1, #16
 80022ec:	6938      	ldr	r0, [r7, #16]
 80022ee:	f003 ff2d 	bl	800614c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80022f2:	6938      	ldr	r0, [r7, #16]
 80022f4:	f003 ff5c 	bl	80061b0 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7a5b      	ldrb	r3, [r3, #9]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d105      	bne.n	800230c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2101      	movs	r1, #1
 8002306:	4618      	mov	r0, r3
 8002308:	f004 f94e 	bl	80065a8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f007 f915 	bl	800953c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f004 f80e 	bl	8006338 <USB_ReadInterrupts>
 800231c:	4603      	mov	r3, r0
 800231e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002322:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002326:	d102      	bne.n	800232e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f001 fd4d 	bl	8003dc8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f004 f800 	bl	8006338 <USB_ReadInterrupts>
 8002338:	4603      	mov	r3, r0
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b08      	cmp	r3, #8
 8002340:	d106      	bne.n	8002350 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f007 f8de 	bl	8009504 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2208      	movs	r2, #8
 800234e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f003 ffef 	bl	8006338 <USB_ReadInterrupts>
 800235a:	4603      	mov	r3, r0
 800235c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002360:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002364:	d139      	bne.n	80023da <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f004 fd8a 	bl	8006e84 <USB_HC_ReadInterrupt>
 8002370:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002372:	2300      	movs	r3, #0
 8002374:	617b      	str	r3, [r7, #20]
 8002376:	e025      	b.n	80023c4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d018      	beq.n	80023be <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	015a      	lsls	r2, r3, #5
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4413      	add	r3, r2
 8002394:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800239e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023a2:	d106      	bne.n	80023b2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	4619      	mov	r1, r3
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 f905 	bl	80025ba <HCD_HC_IN_IRQHandler>
 80023b0:	e005      	b.n	80023be <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f000 ff67 	bl	800328c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	3301      	adds	r3, #1
 80023c2:	617b      	str	r3, [r7, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	795b      	ldrb	r3, [r3, #5]
 80023c8:	461a      	mov	r2, r3
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d3d3      	bcc.n	8002378 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80023d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f003 ffaa 	bl	8006338 <USB_ReadInterrupts>
 80023e4:	4603      	mov	r3, r0
 80023e6:	f003 0310 	and.w	r3, r3, #16
 80023ea:	2b10      	cmp	r3, #16
 80023ec:	d101      	bne.n	80023f2 <HAL_HCD_IRQHandler+0x1ea>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <HAL_HCD_IRQHandler+0x1ec>
 80023f2:	2300      	movs	r3, #0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d014      	beq.n	8002422 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f001 fbfe 	bl	8003c0a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699a      	ldr	r2, [r3, #24]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f042 0210 	orr.w	r2, r2, #16
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	e000      	b.n	8002422 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002420:	bf00      	nop
    }
  }
}
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_HCD_Start+0x16>
 800243a:	2302      	movs	r3, #2
 800243c:	e013      	b.n	8002466 <HAL_HCD_Start+0x3e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	2101      	movs	r1, #1
 800244c:	4618      	mov	r0, r3
 800244e:	f004 f912 	bl	8006676 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f003 fe0a 	bl	8006070 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800246e:	b580      	push	{r7, lr}
 8002470:	b082      	sub	sp, #8
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800247c:	2b01      	cmp	r3, #1
 800247e:	d101      	bne.n	8002484 <HAL_HCD_Stop+0x16>
 8002480:	2302      	movs	r3, #2
 8002482:	e00d      	b.n	80024a0 <HAL_HCD_Stop+0x32>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4618      	mov	r0, r3
 8002492:	f004 fe65 	bl	8007160 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2200      	movs	r2, #0
 800249a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800249e:	2300      	movs	r3, #0
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3708      	adds	r7, #8
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}

080024a8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f004 f8b4 	bl	8006622 <USB_ResetPort>
 80024ba:	4603      	mov	r3, r0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80024d0:	78fa      	ldrb	r2, [r7, #3]
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4613      	mov	r3, r2
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	1a9b      	subs	r3, r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	334c      	adds	r3, #76	@ 0x4c
 80024e0:	781b      	ldrb	r3, [r3, #0]
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
 80024f6:	460b      	mov	r3, r1
 80024f8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	3338      	adds	r3, #56	@ 0x38
 800250a:	681b      	ldr	r3, [r3, #0]
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f004 f8f6 	bl	8006716 <USB_GetCurrentFrame>
 800252a:	4603      	mov	r3, r0
}
 800252c:	4618      	mov	r0, r3
 800252e:	3708      	adds	r7, #8
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f004 f8d1 	bl	80066e8 <USB_GetHostSpeed>
 8002546:	4603      	mov	r3, r0
}
 8002548:	4618      	mov	r0, r3
 800254a:	3708      	adds	r7, #8
 800254c:	46bd      	mov	sp, r7
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 800255c:	78fa      	ldrb	r2, [r7, #3]
 800255e:	6879      	ldr	r1, [r7, #4]
 8002560:	4613      	mov	r3, r2
 8002562:	011b      	lsls	r3, r3, #4
 8002564:	1a9b      	subs	r3, r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	440b      	add	r3, r1
 800256a:	331a      	adds	r3, #26
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	6879      	ldr	r1, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	011b      	lsls	r3, r3, #4
 8002578:	1a9b      	subs	r3, r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	331b      	adds	r3, #27
 8002580:	2200      	movs	r2, #0
 8002582:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002584:	78fa      	ldrb	r2, [r7, #3]
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	011b      	lsls	r3, r3, #4
 800258c:	1a9b      	subs	r3, r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	440b      	add	r3, r1
 8002592:	3325      	adds	r3, #37	@ 0x25
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002598:	78fa      	ldrb	r2, [r7, #3]
 800259a:	6879      	ldr	r1, [r7, #4]
 800259c:	4613      	mov	r3, r2
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	1a9b      	subs	r3, r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	3324      	adds	r3, #36	@ 0x24
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr

080025ba <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b086      	sub	sp, #24
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	4611      	mov	r1, r2
 80025d8:	4618      	mov	r0, r3
 80025da:	f003 fec0 	bl	800635e <USB_ReadChInterrupts>
 80025de:	4603      	mov	r3, r0
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d11a      	bne.n	800261e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	015a      	lsls	r2, r3, #5
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4413      	add	r3, r2
 80025f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f4:	461a      	mov	r2, r3
 80025f6:	2304      	movs	r3, #4
 80025f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80025fa:	78fa      	ldrb	r2, [r7, #3]
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	011b      	lsls	r3, r3, #4
 8002602:	1a9b      	subs	r3, r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	334d      	adds	r3, #77	@ 0x4d
 800260a:	2207      	movs	r2, #7
 800260c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	78fa      	ldrb	r2, [r7, #3]
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fc45 	bl	8006ea6 <USB_HC_Halt>
 800261c:	e09e      	b.n	800275c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	4611      	mov	r1, r2
 8002626:	4618      	mov	r0, r3
 8002628:	f003 fe99 	bl	800635e <USB_ReadChInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002632:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002636:	d11b      	bne.n	8002670 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002638:	78fb      	ldrb	r3, [r7, #3]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002644:	461a      	mov	r2, r3
 8002646:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800264a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	334d      	adds	r3, #77	@ 0x4d
 800265c:	2208      	movs	r2, #8
 800265e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	78fa      	ldrb	r2, [r7, #3]
 8002666:	4611      	mov	r1, r2
 8002668:	4618      	mov	r0, r3
 800266a:	f004 fc1c 	bl	8006ea6 <USB_HC_Halt>
 800266e:	e075      	b.n	800275c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	78fa      	ldrb	r2, [r7, #3]
 8002676:	4611      	mov	r1, r2
 8002678:	4618      	mov	r0, r3
 800267a:	f003 fe70 	bl	800635e <USB_ReadChInterrupts>
 800267e:	4603      	mov	r3, r0
 8002680:	f003 0308 	and.w	r3, r3, #8
 8002684:	2b08      	cmp	r3, #8
 8002686:	d11a      	bne.n	80026be <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	015a      	lsls	r2, r3, #5
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	4413      	add	r3, r2
 8002690:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002694:	461a      	mov	r2, r3
 8002696:	2308      	movs	r3, #8
 8002698:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800269a:	78fa      	ldrb	r2, [r7, #3]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	011b      	lsls	r3, r3, #4
 80026a2:	1a9b      	subs	r3, r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	334d      	adds	r3, #77	@ 0x4d
 80026aa:	2206      	movs	r2, #6
 80026ac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 fbf5 	bl	8006ea6 <USB_HC_Halt>
 80026bc:	e04e      	b.n	800275c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	78fa      	ldrb	r2, [r7, #3]
 80026c4:	4611      	mov	r1, r2
 80026c6:	4618      	mov	r0, r3
 80026c8:	f003 fe49 	bl	800635e <USB_ReadChInterrupts>
 80026cc:	4603      	mov	r3, r0
 80026ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026d6:	d11b      	bne.n	8002710 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80026d8:	78fb      	ldrb	r3, [r7, #3]
 80026da:	015a      	lsls	r2, r3, #5
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	4413      	add	r3, r2
 80026e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026e4:	461a      	mov	r2, r3
 80026e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026ea:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	2209      	movs	r2, #9
 80026fe:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	78fa      	ldrb	r2, [r7, #3]
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f004 fbcc 	bl	8006ea6 <USB_HC_Halt>
 800270e:	e025      	b.n	800275c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	78fa      	ldrb	r2, [r7, #3]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f003 fe20 	bl	800635e <USB_ReadChInterrupts>
 800271e:	4603      	mov	r3, r0
 8002720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002724:	2b80      	cmp	r3, #128	@ 0x80
 8002726:	d119      	bne.n	800275c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002728:	78fb      	ldrb	r3, [r7, #3]
 800272a:	015a      	lsls	r2, r3, #5
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	4413      	add	r3, r2
 8002730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002734:	461a      	mov	r2, r3
 8002736:	2380      	movs	r3, #128	@ 0x80
 8002738:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800273a:	78fa      	ldrb	r2, [r7, #3]
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4613      	mov	r3, r2
 8002740:	011b      	lsls	r3, r3, #4
 8002742:	1a9b      	subs	r3, r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	334d      	adds	r3, #77	@ 0x4d
 800274a:	2207      	movs	r2, #7
 800274c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 fba5 	bl	8006ea6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f003 fdfa 	bl	800635e <USB_ReadChInterrupts>
 800276a:	4603      	mov	r3, r0
 800276c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002770:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002774:	d112      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	78fa      	ldrb	r2, [r7, #3]
 800277c:	4611      	mov	r1, r2
 800277e:	4618      	mov	r0, r3
 8002780:	f004 fb91 	bl	8006ea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002784:	78fb      	ldrb	r3, [r7, #3]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002790:	461a      	mov	r2, r3
 8002792:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002796:	6093      	str	r3, [r2, #8]
 8002798:	f000 bd75 	b.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fdda 	bl	800635e <USB_ReadChInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 8128 	bne.w	8002a06 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c2:	461a      	mov	r2, r3
 80027c4:	2320      	movs	r3, #32
 80027c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80027c8:	78fa      	ldrb	r2, [r7, #3]
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	4613      	mov	r3, r2
 80027ce:	011b      	lsls	r3, r3, #4
 80027d0:	1a9b      	subs	r3, r3, r2
 80027d2:	009b      	lsls	r3, r3, #2
 80027d4:	440b      	add	r3, r1
 80027d6:	331b      	adds	r3, #27
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d119      	bne.n	8002812 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	331b      	adds	r3, #27
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	0151      	lsls	r1, r2, #5
 8002804:	693a      	ldr	r2, [r7, #16]
 8002806:	440a      	add	r2, r1
 8002808:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800280c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002810:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	799b      	ldrb	r3, [r3, #6]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d01b      	beq.n	8002852 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	3330      	adds	r3, #48	@ 0x30
 800282a:	6819      	ldr	r1, [r3, #0]
 800282c:	78fb      	ldrb	r3, [r7, #3]
 800282e:	015a      	lsls	r2, r3, #5
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	4413      	add	r3, r2
 8002834:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	1ac9      	subs	r1, r1, r3
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	4613      	mov	r3, r2
 8002846:	011b      	lsls	r3, r3, #4
 8002848:	1a9b      	subs	r3, r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	4403      	add	r3, r0
 800284e:	3338      	adds	r3, #56	@ 0x38
 8002850:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002852:	78fa      	ldrb	r2, [r7, #3]
 8002854:	6879      	ldr	r1, [r7, #4]
 8002856:	4613      	mov	r3, r2
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	1a9b      	subs	r3, r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	334d      	adds	r3, #77	@ 0x4d
 8002862:	2201      	movs	r2, #1
 8002864:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002866:	78fa      	ldrb	r2, [r7, #3]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	011b      	lsls	r3, r3, #4
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	3344      	adds	r3, #68	@ 0x44
 8002876:	2200      	movs	r2, #0
 8002878:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800287a:	78fb      	ldrb	r3, [r7, #3]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002886:	461a      	mov	r2, r3
 8002888:	2301      	movs	r3, #1
 800288a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800288c:	78fa      	ldrb	r2, [r7, #3]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	011b      	lsls	r3, r3, #4
 8002894:	1a9b      	subs	r3, r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	3326      	adds	r3, #38	@ 0x26
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d00a      	beq.n	80028b8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80028a2:	78fa      	ldrb	r2, [r7, #3]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	011b      	lsls	r3, r3, #4
 80028aa:	1a9b      	subs	r3, r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	3326      	adds	r3, #38	@ 0x26
 80028b2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d110      	bne.n	80028da <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	4611      	mov	r1, r2
 80028c0:	4618      	mov	r0, r3
 80028c2:	f004 faf0 	bl	8006ea6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80028c6:	78fb      	ldrb	r3, [r7, #3]
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d2:	461a      	mov	r2, r3
 80028d4:	2310      	movs	r3, #16
 80028d6:	6093      	str	r3, [r2, #8]
 80028d8:	e03d      	b.n	8002956 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80028da:	78fa      	ldrb	r2, [r7, #3]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	1a9b      	subs	r3, r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3326      	adds	r3, #38	@ 0x26
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d00a      	beq.n	8002906 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	6879      	ldr	r1, [r7, #4]
 80028f4:	4613      	mov	r3, r2
 80028f6:	011b      	lsls	r3, r3, #4
 80028f8:	1a9b      	subs	r3, r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	3326      	adds	r3, #38	@ 0x26
 8002900:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002902:	2b01      	cmp	r3, #1
 8002904:	d127      	bne.n	8002956 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002906:	78fb      	ldrb	r3, [r7, #3]
 8002908:	015a      	lsls	r2, r3, #5
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4413      	add	r3, r2
 800290e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	78fa      	ldrb	r2, [r7, #3]
 8002916:	0151      	lsls	r1, r2, #5
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	440a      	add	r2, r1
 800291c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002920:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002924:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	334c      	adds	r3, #76	@ 0x4c
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800293a:	78fa      	ldrb	r2, [r7, #3]
 800293c:	6879      	ldr	r1, [r7, #4]
 800293e:	4613      	mov	r3, r2
 8002940:	011b      	lsls	r3, r3, #4
 8002942:	1a9b      	subs	r3, r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	440b      	add	r3, r1
 8002948:	334c      	adds	r3, #76	@ 0x4c
 800294a:	781a      	ldrb	r2, [r3, #0]
 800294c:	78fb      	ldrb	r3, [r7, #3]
 800294e:	4619      	mov	r1, r3
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f006 fe01 	bl	8009558 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	799b      	ldrb	r3, [r3, #6]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d13b      	bne.n	80029d6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 800295e:	78fa      	ldrb	r2, [r7, #3]
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4613      	mov	r3, r2
 8002964:	011b      	lsls	r3, r3, #4
 8002966:	1a9b      	subs	r3, r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	440b      	add	r3, r1
 800296c:	3338      	adds	r3, #56	@ 0x38
 800296e:	6819      	ldr	r1, [r3, #0]
 8002970:	78fa      	ldrb	r2, [r7, #3]
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4613      	mov	r3, r2
 8002976:	011b      	lsls	r3, r3, #4
 8002978:	1a9b      	subs	r3, r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4403      	add	r3, r0
 800297e:	3328      	adds	r3, #40	@ 0x28
 8002980:	881b      	ldrh	r3, [r3, #0]
 8002982:	440b      	add	r3, r1
 8002984:	1e59      	subs	r1, r3, #1
 8002986:	78fa      	ldrb	r2, [r7, #3]
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	011b      	lsls	r3, r3, #4
 800298e:	1a9b      	subs	r3, r3, r2
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4403      	add	r3, r0
 8002994:	3328      	adds	r3, #40	@ 0x28
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	fbb1 f3f3 	udiv	r3, r1, r3
 800299c:	f003 0301 	and.w	r3, r3, #1
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f000 8470 	beq.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	333c      	adds	r3, #60	@ 0x3c
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	f083 0301 	eor.w	r3, r3, #1
 80029be:	b2d8      	uxtb	r0, r3
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	333c      	adds	r3, #60	@ 0x3c
 80029ce:	4602      	mov	r2, r0
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	f000 bc58 	b.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	333c      	adds	r3, #60	@ 0x3c
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	f083 0301 	eor.w	r3, r3, #1
 80029ee:	b2d8      	uxtb	r0, r3
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	333c      	adds	r3, #60	@ 0x3c
 80029fe:	4602      	mov	r2, r0
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	f000 bc40 	b.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	4611      	mov	r1, r2
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f003 fca5 	bl	800635e <USB_ReadChInterrupts>
 8002a14:	4603      	mov	r3, r0
 8002a16:	f003 0320 	and.w	r3, r3, #32
 8002a1a:	2b20      	cmp	r3, #32
 8002a1c:	d131      	bne.n	8002a82 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	015a      	lsls	r2, r3, #5
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4413      	add	r3, r2
 8002a26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	6879      	ldr	r1, [r7, #4]
 8002a34:	4613      	mov	r3, r2
 8002a36:	011b      	lsls	r3, r3, #4
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	440b      	add	r3, r1
 8002a3e:	331a      	adds	r3, #26
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	f040 841f 	bne.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002a48:	78fa      	ldrb	r2, [r7, #3]
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	011b      	lsls	r3, r3, #4
 8002a50:	1a9b      	subs	r3, r3, r2
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	440b      	add	r3, r1
 8002a56:	331b      	adds	r3, #27
 8002a58:	2201      	movs	r2, #1
 8002a5a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002a5c:	78fa      	ldrb	r2, [r7, #3]
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	4613      	mov	r3, r2
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	1a9b      	subs	r3, r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	440b      	add	r3, r1
 8002a6a:	334d      	adds	r3, #77	@ 0x4d
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fa14 	bl	8006ea6 <USB_HC_Halt>
 8002a7e:	f000 bc02 	b.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	78fa      	ldrb	r2, [r7, #3]
 8002a88:	4611      	mov	r1, r2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fc67 	bl	800635e <USB_ReadChInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	f040 8305 	bne.w	80030a6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2302      	movs	r3, #2
 8002aac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	334d      	adds	r3, #77	@ 0x4d
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d114      	bne.n	8002aee <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	334d      	adds	r3, #77	@ 0x4d
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ad8:	78fa      	ldrb	r2, [r7, #3]
 8002ada:	6879      	ldr	r1, [r7, #4]
 8002adc:	4613      	mov	r3, r2
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	1a9b      	subs	r3, r3, r2
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	440b      	add	r3, r1
 8002ae6:	334c      	adds	r3, #76	@ 0x4c
 8002ae8:	2201      	movs	r2, #1
 8002aea:	701a      	strb	r2, [r3, #0]
 8002aec:	e2cc      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002aee:	78fa      	ldrb	r2, [r7, #3]
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	4613      	mov	r3, r2
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	1a9b      	subs	r3, r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	440b      	add	r3, r1
 8002afc:	334d      	adds	r3, #77	@ 0x4d
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	2b06      	cmp	r3, #6
 8002b02:	d114      	bne.n	8002b2e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b04:	78fa      	ldrb	r2, [r7, #3]
 8002b06:	6879      	ldr	r1, [r7, #4]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	1a9b      	subs	r3, r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	334d      	adds	r3, #77	@ 0x4d
 8002b14:	2202      	movs	r2, #2
 8002b16:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002b18:	78fa      	ldrb	r2, [r7, #3]
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	011b      	lsls	r3, r3, #4
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	440b      	add	r3, r1
 8002b26:	334c      	adds	r3, #76	@ 0x4c
 8002b28:	2205      	movs	r2, #5
 8002b2a:	701a      	strb	r2, [r3, #0]
 8002b2c:	e2ac      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	334d      	adds	r3, #77	@ 0x4d
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b07      	cmp	r3, #7
 8002b42:	d00b      	beq.n	8002b5c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6879      	ldr	r1, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	440b      	add	r3, r1
 8002b52:	334d      	adds	r3, #77	@ 0x4d
 8002b54:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002b56:	2b09      	cmp	r3, #9
 8002b58:	f040 80a6 	bne.w	8002ca8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b5c:	78fa      	ldrb	r2, [r7, #3]
 8002b5e:	6879      	ldr	r1, [r7, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	1a9b      	subs	r3, r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	440b      	add	r3, r1
 8002b6a:	334d      	adds	r3, #77	@ 0x4d
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002b70:	78fa      	ldrb	r2, [r7, #3]
 8002b72:	6879      	ldr	r1, [r7, #4]
 8002b74:	4613      	mov	r3, r2
 8002b76:	011b      	lsls	r3, r3, #4
 8002b78:	1a9b      	subs	r3, r3, r2
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	440b      	add	r3, r1
 8002b7e:	3344      	adds	r3, #68	@ 0x44
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	1c59      	adds	r1, r3, #1
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	4403      	add	r3, r0
 8002b90:	3344      	adds	r3, #68	@ 0x44
 8002b92:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	011b      	lsls	r3, r3, #4
 8002b9c:	1a9b      	subs	r3, r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	3344      	adds	r3, #68	@ 0x44
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d943      	bls.n	8002c32 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	3344      	adds	r3, #68	@ 0x44
 8002bba:	2200      	movs	r2, #0
 8002bbc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	331a      	adds	r3, #26
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d123      	bne.n	8002c1c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	331b      	adds	r3, #27
 8002be4:	2200      	movs	r2, #0
 8002be6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	011b      	lsls	r3, r3, #4
 8002bf0:	1a9b      	subs	r3, r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	331c      	adds	r3, #28
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002bfc:	78fb      	ldrb	r3, [r7, #3]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	78fa      	ldrb	r2, [r7, #3]
 8002c0c:	0151      	lsls	r1, r2, #5
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	440a      	add	r2, r1
 8002c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c1a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	334c      	adds	r3, #76	@ 0x4c
 8002c2c:	2204      	movs	r2, #4
 8002c2e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c30:	e229      	b.n	8003086 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	4613      	mov	r3, r2
 8002c38:	011b      	lsls	r3, r3, #4
 8002c3a:	1a9b      	subs	r3, r3, r2
 8002c3c:	009b      	lsls	r3, r3, #2
 8002c3e:	440b      	add	r3, r1
 8002c40:	334c      	adds	r3, #76	@ 0x4c
 8002c42:	2202      	movs	r2, #2
 8002c44:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	3326      	adds	r3, #38	@ 0x26
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d00b      	beq.n	8002c74 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c5c:	78fa      	ldrb	r2, [r7, #3]
 8002c5e:	6879      	ldr	r1, [r7, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	1a9b      	subs	r3, r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	3326      	adds	r3, #38	@ 0x26
 8002c6c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	f040 8209 	bne.w	8003086 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002c8a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002c92:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002c94:	78fb      	ldrb	r3, [r7, #3]
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ca6:	e1ee      	b.n	8003086 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	6879      	ldr	r1, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	440b      	add	r3, r1
 8002cb6:	334d      	adds	r3, #77	@ 0x4d
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	2b05      	cmp	r3, #5
 8002cbc:	f040 80c8 	bne.w	8002e50 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cc0:	78fa      	ldrb	r2, [r7, #3]
 8002cc2:	6879      	ldr	r1, [r7, #4]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	011b      	lsls	r3, r3, #4
 8002cc8:	1a9b      	subs	r3, r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	334d      	adds	r3, #77	@ 0x4d
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002cd4:	78fa      	ldrb	r2, [r7, #3]
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	331b      	adds	r3, #27
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	f040 81ce 	bne.w	8003088 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3326      	adds	r3, #38	@ 0x26
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d16b      	bne.n	8002dda <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	3348      	adds	r3, #72	@ 0x48
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	1c59      	adds	r1, r3, #1
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	4403      	add	r3, r0
 8002d22:	3348      	adds	r3, #72	@ 0x48
 8002d24:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002d26:	78fa      	ldrb	r2, [r7, #3]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3348      	adds	r3, #72	@ 0x48
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d943      	bls.n	8002dc4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002d3c:	78fa      	ldrb	r2, [r7, #3]
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4613      	mov	r3, r2
 8002d42:	011b      	lsls	r3, r3, #4
 8002d44:	1a9b      	subs	r3, r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	440b      	add	r3, r1
 8002d4a:	3348      	adds	r3, #72	@ 0x48
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002d50:	78fa      	ldrb	r2, [r7, #3]
 8002d52:	6879      	ldr	r1, [r7, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	011b      	lsls	r3, r3, #4
 8002d58:	1a9b      	subs	r3, r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	440b      	add	r3, r1
 8002d5e:	331b      	adds	r3, #27
 8002d60:	2200      	movs	r2, #0
 8002d62:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	440b      	add	r3, r1
 8002d72:	3344      	adds	r3, #68	@ 0x44
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d809      	bhi.n	8002d8e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6879      	ldr	r1, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	331c      	adds	r3, #28
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d8e:	78fb      	ldrb	r3, [r7, #3]
 8002d90:	015a      	lsls	r2, r3, #5
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	4413      	add	r3, r2
 8002d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	78fa      	ldrb	r2, [r7, #3]
 8002d9e:	0151      	lsls	r1, r2, #5
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	440a      	add	r2, r1
 8002da4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dac:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002dae:	78fa      	ldrb	r2, [r7, #3]
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	011b      	lsls	r3, r3, #4
 8002db6:	1a9b      	subs	r3, r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	334c      	adds	r3, #76	@ 0x4c
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	701a      	strb	r2, [r3, #0]
 8002dc2:	e014      	b.n	8002dee <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dc4:	78fa      	ldrb	r2, [r7, #3]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	1a9b      	subs	r3, r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	440b      	add	r3, r1
 8002dd2:	334c      	adds	r3, #76	@ 0x4c
 8002dd4:	2202      	movs	r2, #2
 8002dd6:	701a      	strb	r2, [r3, #0]
 8002dd8:	e009      	b.n	8002dee <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	334c      	adds	r3, #76	@ 0x4c
 8002dea:	2202      	movs	r2, #2
 8002dec:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	3326      	adds	r3, #38	@ 0x26
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00b      	beq.n	8002e1c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3326      	adds	r3, #38	@ 0x26
 8002e14:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	f040 8136 	bne.w	8003088 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e1c:	78fb      	ldrb	r3, [r7, #3]
 8002e1e:	015a      	lsls	r2, r3, #5
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	4413      	add	r3, r2
 8002e24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e32:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e3a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e3c:	78fb      	ldrb	r3, [r7, #3]
 8002e3e:	015a      	lsls	r2, r3, #5
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	4413      	add	r3, r2
 8002e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e11b      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334d      	adds	r3, #77	@ 0x4d
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b03      	cmp	r3, #3
 8002e64:	f040 8081 	bne.w	8002f6a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	011b      	lsls	r3, r3, #4
 8002e70:	1a9b      	subs	r3, r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	440b      	add	r3, r1
 8002e76:	334d      	adds	r3, #77	@ 0x4d
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	331b      	adds	r3, #27
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	f040 80fa 	bne.w	8003088 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334c      	adds	r3, #76	@ 0x4c
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002ea8:	78fb      	ldrb	r3, [r7, #3]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	78fa      	ldrb	r2, [r7, #3]
 8002eb8:	0151      	lsls	r1, r2, #5
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	440a      	add	r2, r1
 8002ebe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002ec8:	78fb      	ldrb	r3, [r7, #3]
 8002eca:	015a      	lsls	r2, r3, #5
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4413      	add	r3, r2
 8002ed0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ed4:	68db      	ldr	r3, [r3, #12]
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	0151      	lsls	r1, r2, #5
 8002eda:	693a      	ldr	r2, [r7, #16]
 8002edc:	440a      	add	r2, r1
 8002ede:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ee2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ee6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ee8:	78fb      	ldrb	r3, [r7, #3]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	78fa      	ldrb	r2, [r7, #3]
 8002ef8:	0151      	lsls	r1, r2, #5
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	440a      	add	r2, r1
 8002efe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f02:	f023 0320 	bic.w	r3, r3, #32
 8002f06:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	3326      	adds	r3, #38	@ 0x26
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00b      	beq.n	8002f36 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	3326      	adds	r3, #38	@ 0x26
 8002f2e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	f040 80a9 	bne.w	8003088 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f36:	78fb      	ldrb	r3, [r7, #3]
 8002f38:	015a      	lsls	r2, r3, #5
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4413      	add	r3, r2
 8002f3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f4c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f54:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f56:	78fb      	ldrb	r3, [r7, #3]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f62:	461a      	mov	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	e08e      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	1a9b      	subs	r3, r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	334d      	adds	r3, #77	@ 0x4d
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d143      	bne.n	8003008 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f80:	78fa      	ldrb	r2, [r7, #3]
 8002f82:	6879      	ldr	r1, [r7, #4]
 8002f84:	4613      	mov	r3, r2
 8002f86:	011b      	lsls	r3, r3, #4
 8002f88:	1a9b      	subs	r3, r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	440b      	add	r3, r1
 8002f8e:	334d      	adds	r3, #77	@ 0x4d
 8002f90:	2202      	movs	r2, #2
 8002f92:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	6879      	ldr	r1, [r7, #4]
 8002f98:	4613      	mov	r3, r2
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	1a9b      	subs	r3, r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	440b      	add	r3, r1
 8002fa2:	334c      	adds	r3, #76	@ 0x4c
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	3326      	adds	r3, #38	@ 0x26
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00a      	beq.n	8002fd4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3326      	adds	r3, #38	@ 0x26
 8002fce:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d159      	bne.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fd4:	78fb      	ldrb	r3, [r7, #3]
 8002fd6:	015a      	lsls	r2, r3, #5
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	4413      	add	r3, r2
 8002fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fea:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002ff2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	015a      	lsls	r2, r3, #5
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	6013      	str	r3, [r2, #0]
 8003006:	e03f      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003008:	78fa      	ldrb	r2, [r7, #3]
 800300a:	6879      	ldr	r1, [r7, #4]
 800300c:	4613      	mov	r3, r2
 800300e:	011b      	lsls	r3, r3, #4
 8003010:	1a9b      	subs	r3, r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	440b      	add	r3, r1
 8003016:	334d      	adds	r3, #77	@ 0x4d
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d126      	bne.n	800306c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334d      	adds	r3, #77	@ 0x4d
 800302e:	2202      	movs	r2, #2
 8003030:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003032:	78fa      	ldrb	r2, [r7, #3]
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	440b      	add	r3, r1
 8003040:	3344      	adds	r3, #68	@ 0x44
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	1c59      	adds	r1, r3, #1
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4403      	add	r3, r0
 8003052:	3344      	adds	r3, #68	@ 0x44
 8003054:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003056:	78fa      	ldrb	r2, [r7, #3]
 8003058:	6879      	ldr	r1, [r7, #4]
 800305a:	4613      	mov	r3, r2
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	1a9b      	subs	r3, r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	440b      	add	r3, r1
 8003064:	334c      	adds	r3, #76	@ 0x4c
 8003066:	2204      	movs	r2, #4
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e00d      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	334d      	adds	r3, #77	@ 0x4d
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	2b02      	cmp	r3, #2
 8003080:	f000 8100 	beq.w	8003284 <HCD_HC_IN_IRQHandler+0xcca>
 8003084:	e000      	b.n	8003088 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003086:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003088:	78fa      	ldrb	r2, [r7, #3]
 800308a:	6879      	ldr	r1, [r7, #4]
 800308c:	4613      	mov	r3, r2
 800308e:	011b      	lsls	r3, r3, #4
 8003090:	1a9b      	subs	r3, r3, r2
 8003092:	009b      	lsls	r3, r3, #2
 8003094:	440b      	add	r3, r1
 8003096:	334c      	adds	r3, #76	@ 0x4c
 8003098:	781a      	ldrb	r2, [r3, #0]
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	4619      	mov	r1, r3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f006 fa5a 	bl	8009558 <HAL_HCD_HC_NotifyURBChange_Callback>
 80030a4:	e0ef      	b.n	8003286 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	4611      	mov	r1, r2
 80030ae:	4618      	mov	r0, r3
 80030b0:	f003 f955 	bl	800635e <USB_ReadChInterrupts>
 80030b4:	4603      	mov	r3, r0
 80030b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030ba:	2b40      	cmp	r3, #64	@ 0x40
 80030bc:	d12f      	bne.n	800311e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80030be:	78fb      	ldrb	r3, [r7, #3]
 80030c0:	015a      	lsls	r2, r3, #5
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030ca:	461a      	mov	r2, r3
 80030cc:	2340      	movs	r3, #64	@ 0x40
 80030ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80030d0:	78fa      	ldrb	r2, [r7, #3]
 80030d2:	6879      	ldr	r1, [r7, #4]
 80030d4:	4613      	mov	r3, r2
 80030d6:	011b      	lsls	r3, r3, #4
 80030d8:	1a9b      	subs	r3, r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	334d      	adds	r3, #77	@ 0x4d
 80030e0:	2205      	movs	r2, #5
 80030e2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	331a      	adds	r3, #26
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d109      	bne.n	800310e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80030fa:	78fa      	ldrb	r2, [r7, #3]
 80030fc:	6879      	ldr	r1, [r7, #4]
 80030fe:	4613      	mov	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	1a9b      	subs	r3, r3, r2
 8003104:	009b      	lsls	r3, r3, #2
 8003106:	440b      	add	r3, r1
 8003108:	3344      	adds	r3, #68	@ 0x44
 800310a:	2200      	movs	r2, #0
 800310c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	78fa      	ldrb	r2, [r7, #3]
 8003114:	4611      	mov	r1, r2
 8003116:	4618      	mov	r0, r3
 8003118:	f003 fec5 	bl	8006ea6 <USB_HC_Halt>
 800311c:	e0b3      	b.n	8003286 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	78fa      	ldrb	r2, [r7, #3]
 8003124:	4611      	mov	r1, r2
 8003126:	4618      	mov	r0, r3
 8003128:	f003 f919 	bl	800635e <USB_ReadChInterrupts>
 800312c:	4603      	mov	r3, r0
 800312e:	f003 0310 	and.w	r3, r3, #16
 8003132:	2b10      	cmp	r3, #16
 8003134:	f040 80a7 	bne.w	8003286 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3326      	adds	r3, #38	@ 0x26
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b03      	cmp	r3, #3
 800314c:	d11b      	bne.n	8003186 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	@ 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	334d      	adds	r3, #77	@ 0x4d
 8003172:	2204      	movs	r2, #4
 8003174:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	78fa      	ldrb	r2, [r7, #3]
 800317c:	4611      	mov	r1, r2
 800317e:	4618      	mov	r0, r3
 8003180:	f003 fe91 	bl	8006ea6 <USB_HC_Halt>
 8003184:	e03f      	b.n	8003206 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003186:	78fa      	ldrb	r2, [r7, #3]
 8003188:	6879      	ldr	r1, [r7, #4]
 800318a:	4613      	mov	r3, r2
 800318c:	011b      	lsls	r3, r3, #4
 800318e:	1a9b      	subs	r3, r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	440b      	add	r3, r1
 8003194:	3326      	adds	r3, #38	@ 0x26
 8003196:	781b      	ldrb	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00a      	beq.n	80031b2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800319c:	78fa      	ldrb	r2, [r7, #3]
 800319e:	6879      	ldr	r1, [r7, #4]
 80031a0:	4613      	mov	r3, r2
 80031a2:	011b      	lsls	r3, r3, #4
 80031a4:	1a9b      	subs	r3, r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3326      	adds	r3, #38	@ 0x26
 80031ac:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d129      	bne.n	8003206 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80031b2:	78fa      	ldrb	r2, [r7, #3]
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	4613      	mov	r3, r2
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	1a9b      	subs	r3, r3, r2
 80031bc:	009b      	lsls	r3, r3, #2
 80031be:	440b      	add	r3, r1
 80031c0:	3344      	adds	r3, #68	@ 0x44
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	799b      	ldrb	r3, [r3, #6]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00a      	beq.n	80031e4 <HCD_HC_IN_IRQHandler+0xc2a>
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	331b      	adds	r3, #27
 80031de:	781b      	ldrb	r3, [r3, #0]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d110      	bne.n	8003206 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	011b      	lsls	r3, r3, #4
 80031ec:	1a9b      	subs	r3, r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	334d      	adds	r3, #77	@ 0x4d
 80031f4:	2204      	movs	r2, #4
 80031f6:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	4611      	mov	r1, r2
 8003200:	4618      	mov	r0, r3
 8003202:	f003 fe50 	bl	8006ea6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	331b      	adds	r3, #27
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b01      	cmp	r3, #1
 800321a:	d129      	bne.n	8003270 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800321c:	78fa      	ldrb	r2, [r7, #3]
 800321e:	6879      	ldr	r1, [r7, #4]
 8003220:	4613      	mov	r3, r2
 8003222:	011b      	lsls	r3, r3, #4
 8003224:	1a9b      	subs	r3, r3, r2
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	331b      	adds	r3, #27
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	0151      	lsls	r1, r2, #5
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	440a      	add	r2, r1
 8003246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800324a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800324e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	015a      	lsls	r2, r3, #5
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	4413      	add	r3, r2
 8003258:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	0151      	lsls	r1, r2, #5
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	440a      	add	r2, r1
 8003266:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800326a:	f043 0320 	orr.w	r3, r3, #32
 800326e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	4413      	add	r3, r2
 8003278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800327c:	461a      	mov	r2, r3
 800327e:	2310      	movs	r3, #16
 8003280:	6093      	str	r3, [r2, #8]
 8003282:	e000      	b.n	8003286 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003284:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	4611      	mov	r1, r2
 80032aa:	4618      	mov	r0, r3
 80032ac:	f003 f857 	bl	800635e <USB_ReadChInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f003 0304 	and.w	r3, r3, #4
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d11b      	bne.n	80032f2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	015a      	lsls	r2, r3, #5
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c6:	461a      	mov	r2, r3
 80032c8:	2304      	movs	r3, #4
 80032ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	334d      	adds	r3, #77	@ 0x4d
 80032dc:	2207      	movs	r2, #7
 80032de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	4611      	mov	r1, r2
 80032e8:	4618      	mov	r0, r3
 80032ea:	f003 fddc 	bl	8006ea6 <USB_HC_Halt>
 80032ee:	f000 bc89 	b.w	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f003 f82f 	bl	800635e <USB_ReadChInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 0320 	and.w	r3, r3, #32
 8003306:	2b20      	cmp	r3, #32
 8003308:	f040 8082 	bne.w	8003410 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800330c:	78fb      	ldrb	r3, [r7, #3]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	4413      	add	r3, r2
 8003314:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003318:	461a      	mov	r2, r3
 800331a:	2320      	movs	r3, #32
 800331c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3319      	adds	r3, #25
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d124      	bne.n	800337e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3319      	adds	r3, #25
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	6879      	ldr	r1, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	011b      	lsls	r3, r3, #4
 8003350:	1a9b      	subs	r3, r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	334c      	adds	r3, #76	@ 0x4c
 8003358:	2202      	movs	r2, #2
 800335a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800335c:	78fa      	ldrb	r2, [r7, #3]
 800335e:	6879      	ldr	r1, [r7, #4]
 8003360:	4613      	mov	r3, r2
 8003362:	011b      	lsls	r3, r3, #4
 8003364:	1a9b      	subs	r3, r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	440b      	add	r3, r1
 800336a:	334d      	adds	r3, #77	@ 0x4d
 800336c:	2203      	movs	r2, #3
 800336e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	4611      	mov	r1, r2
 8003378:	4618      	mov	r0, r3
 800337a:	f003 fd94 	bl	8006ea6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	331a      	adds	r3, #26
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	2b01      	cmp	r3, #1
 8003392:	f040 8437 	bne.w	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
 8003396:	78fa      	ldrb	r2, [r7, #3]
 8003398:	6879      	ldr	r1, [r7, #4]
 800339a:	4613      	mov	r3, r2
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	1a9b      	subs	r3, r3, r2
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	331b      	adds	r3, #27
 80033a6:	781b      	ldrb	r3, [r3, #0]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	f040 842b 	bne.w	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80033ae:	78fa      	ldrb	r2, [r7, #3]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	011b      	lsls	r3, r3, #4
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3326      	adds	r3, #38	@ 0x26
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d009      	beq.n	80033d8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80033c4:	78fa      	ldrb	r2, [r7, #3]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	011b      	lsls	r3, r3, #4
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	331b      	adds	r3, #27
 80033d4:	2201      	movs	r2, #1
 80033d6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80033d8:	78fa      	ldrb	r2, [r7, #3]
 80033da:	6879      	ldr	r1, [r7, #4]
 80033dc:	4613      	mov	r3, r2
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	1a9b      	subs	r3, r3, r2
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	440b      	add	r3, r1
 80033e6:	334d      	adds	r3, #77	@ 0x4d
 80033e8:	2203      	movs	r2, #3
 80033ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	4611      	mov	r1, r2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fd56 	bl	8006ea6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	6879      	ldr	r1, [r7, #4]
 80033fe:	4613      	mov	r3, r2
 8003400:	011b      	lsls	r3, r3, #4
 8003402:	1a9b      	subs	r3, r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	440b      	add	r3, r1
 8003408:	3344      	adds	r3, #68	@ 0x44
 800340a:	2200      	movs	r2, #0
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e3f9      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f002 ffa0 	bl	800635e <USB_ReadChInterrupts>
 800341e:	4603      	mov	r3, r0
 8003420:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003424:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003428:	d111      	bne.n	800344e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800342a:	78fb      	ldrb	r3, [r7, #3]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4413      	add	r3, r2
 8003432:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003436:	461a      	mov	r2, r3
 8003438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800343c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f003 fd2d 	bl	8006ea6 <USB_HC_Halt>
 800344c:	e3da      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f002 ff81 	bl	800635e <USB_ReadChInterrupts>
 800345c:	4603      	mov	r3, r0
 800345e:	f003 0301 	and.w	r3, r3, #1
 8003462:	2b01      	cmp	r3, #1
 8003464:	d168      	bne.n	8003538 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	3344      	adds	r3, #68	@ 0x44
 8003476:	2200      	movs	r2, #0
 8003478:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	78fa      	ldrb	r2, [r7, #3]
 8003480:	4611      	mov	r1, r2
 8003482:	4618      	mov	r0, r3
 8003484:	f002 ff6b 	bl	800635e <USB_ReadChInterrupts>
 8003488:	4603      	mov	r3, r0
 800348a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800348e:	2b40      	cmp	r3, #64	@ 0x40
 8003490:	d112      	bne.n	80034b8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	3319      	adds	r3, #25
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034a6:	78fb      	ldrb	r3, [r7, #3]
 80034a8:	015a      	lsls	r2, r3, #5
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	4413      	add	r3, r2
 80034ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034b2:	461a      	mov	r2, r3
 80034b4:	2340      	movs	r3, #64	@ 0x40
 80034b6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	6879      	ldr	r1, [r7, #4]
 80034bc:	4613      	mov	r3, r2
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	1a9b      	subs	r3, r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	440b      	add	r3, r1
 80034c6:	331b      	adds	r3, #27
 80034c8:	781b      	ldrb	r3, [r3, #0]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d019      	beq.n	8003502 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	6879      	ldr	r1, [r7, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	1a9b      	subs	r3, r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	440b      	add	r3, r1
 80034dc:	331b      	adds	r3, #27
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80034e2:	78fb      	ldrb	r3, [r7, #3]
 80034e4:	015a      	lsls	r2, r3, #5
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	4413      	add	r3, r2
 80034ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	78fa      	ldrb	r2, [r7, #3]
 80034f2:	0151      	lsls	r1, r2, #5
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	440a      	add	r2, r1
 80034f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003500:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003502:	78fb      	ldrb	r3, [r7, #3]
 8003504:	015a      	lsls	r2, r3, #5
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	4413      	add	r3, r2
 800350a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350e:	461a      	mov	r2, r3
 8003510:	2301      	movs	r3, #1
 8003512:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	334d      	adds	r3, #77	@ 0x4d
 8003524:	2201      	movs	r2, #1
 8003526:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fcb8 	bl	8006ea6 <USB_HC_Halt>
 8003536:	e365      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f002 ff0c 	bl	800635e <USB_ReadChInterrupts>
 8003546:	4603      	mov	r3, r0
 8003548:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800354c:	2b40      	cmp	r3, #64	@ 0x40
 800354e:	d139      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003550:	78fa      	ldrb	r2, [r7, #3]
 8003552:	6879      	ldr	r1, [r7, #4]
 8003554:	4613      	mov	r3, r2
 8003556:	011b      	lsls	r3, r3, #4
 8003558:	1a9b      	subs	r3, r3, r2
 800355a:	009b      	lsls	r3, r3, #2
 800355c:	440b      	add	r3, r1
 800355e:	334d      	adds	r3, #77	@ 0x4d
 8003560:	2205      	movs	r2, #5
 8003562:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003564:	78fa      	ldrb	r2, [r7, #3]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	011b      	lsls	r3, r3, #4
 800356c:	1a9b      	subs	r3, r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	331a      	adds	r3, #26
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d109      	bne.n	800358e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3319      	adds	r3, #25
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	3344      	adds	r3, #68	@ 0x44
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	4611      	mov	r1, r2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f003 fc7b 	bl	8006ea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035b0:	78fb      	ldrb	r3, [r7, #3]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035bc:	461a      	mov	r2, r3
 80035be:	2340      	movs	r3, #64	@ 0x40
 80035c0:	6093      	str	r3, [r2, #8]
 80035c2:	e31f      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f002 fec6 	bl	800635e <USB_ReadChInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0308 	and.w	r3, r3, #8
 80035d8:	2b08      	cmp	r3, #8
 80035da:	d11a      	bne.n	8003612 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	2308      	movs	r3, #8
 80035ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80035ee:	78fa      	ldrb	r2, [r7, #3]
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	4613      	mov	r3, r2
 80035f4:	011b      	lsls	r3, r3, #4
 80035f6:	1a9b      	subs	r3, r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	440b      	add	r3, r1
 80035fc:	334d      	adds	r3, #77	@ 0x4d
 80035fe:	2206      	movs	r2, #6
 8003600:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	78fa      	ldrb	r2, [r7, #3]
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fc4b 	bl	8006ea6 <USB_HC_Halt>
 8003610:	e2f8      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f002 fe9f 	bl	800635e <USB_ReadChInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f003 0310 	and.w	r3, r3, #16
 8003626:	2b10      	cmp	r3, #16
 8003628:	d144      	bne.n	80036b4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800362a:	78fa      	ldrb	r2, [r7, #3]
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	4613      	mov	r3, r2
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	1a9b      	subs	r3, r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	440b      	add	r3, r1
 8003638:	3344      	adds	r3, #68	@ 0x44
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334d      	adds	r3, #77	@ 0x4d
 800364e:	2204      	movs	r2, #4
 8003650:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	6879      	ldr	r1, [r7, #4]
 8003656:	4613      	mov	r3, r2
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	1a9b      	subs	r3, r3, r2
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	440b      	add	r3, r1
 8003660:	3319      	adds	r3, #25
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d114      	bne.n	8003692 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003668:	78fa      	ldrb	r2, [r7, #3]
 800366a:	6879      	ldr	r1, [r7, #4]
 800366c:	4613      	mov	r3, r2
 800366e:	011b      	lsls	r3, r3, #4
 8003670:	1a9b      	subs	r3, r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3318      	adds	r3, #24
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800367e:	78fa      	ldrb	r2, [r7, #3]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	4613      	mov	r3, r2
 8003684:	011b      	lsls	r3, r3, #4
 8003686:	1a9b      	subs	r3, r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	440b      	add	r3, r1
 800368c:	3319      	adds	r3, #25
 800368e:	2201      	movs	r2, #1
 8003690:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	4611      	mov	r1, r2
 800369a:	4618      	mov	r0, r3
 800369c:	f003 fc03 	bl	8006ea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	015a      	lsls	r2, r3, #5
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4413      	add	r3, r2
 80036a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ac:	461a      	mov	r2, r3
 80036ae:	2310      	movs	r3, #16
 80036b0:	6093      	str	r3, [r2, #8]
 80036b2:	e2a7      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f002 fe4e 	bl	800635e <USB_ReadChInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b80      	cmp	r3, #128	@ 0x80
 80036ca:	f040 8083 	bne.w	80037d4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	799b      	ldrb	r3, [r3, #6]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d111      	bne.n	80036fa <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80036d6:	78fa      	ldrb	r2, [r7, #3]
 80036d8:	6879      	ldr	r1, [r7, #4]
 80036da:	4613      	mov	r3, r2
 80036dc:	011b      	lsls	r3, r3, #4
 80036de:	1a9b      	subs	r3, r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	334d      	adds	r3, #77	@ 0x4d
 80036e6:	2207      	movs	r2, #7
 80036e8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 fbd7 	bl	8006ea6 <USB_HC_Halt>
 80036f8:	e062      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	6879      	ldr	r1, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	011b      	lsls	r3, r3, #4
 8003702:	1a9b      	subs	r3, r3, r2
 8003704:	009b      	lsls	r3, r3, #2
 8003706:	440b      	add	r3, r1
 8003708:	3344      	adds	r3, #68	@ 0x44
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	1c59      	adds	r1, r3, #1
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	011b      	lsls	r3, r3, #4
 8003714:	1a9b      	subs	r3, r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4403      	add	r3, r0
 800371a:	3344      	adds	r3, #68	@ 0x44
 800371c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3344      	adds	r3, #68	@ 0x44
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d922      	bls.n	800377a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003734:	78fa      	ldrb	r2, [r7, #3]
 8003736:	6879      	ldr	r1, [r7, #4]
 8003738:	4613      	mov	r3, r2
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	1a9b      	subs	r3, r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	3344      	adds	r3, #68	@ 0x44
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003748:	78fa      	ldrb	r2, [r7, #3]
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	011b      	lsls	r3, r3, #4
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	334c      	adds	r3, #76	@ 0x4c
 8003758:	2204      	movs	r2, #4
 800375a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	334c      	adds	r3, #76	@ 0x4c
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	4619      	mov	r1, r3
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f005 fef0 	bl	8009558 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003778:	e022      	b.n	80037c0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	6879      	ldr	r1, [r7, #4]
 800377e:	4613      	mov	r3, r2
 8003780:	011b      	lsls	r3, r3, #4
 8003782:	1a9b      	subs	r3, r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	334c      	adds	r3, #76	@ 0x4c
 800378a:	2202      	movs	r2, #2
 800378c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800378e:	78fb      	ldrb	r3, [r7, #3]
 8003790:	015a      	lsls	r2, r3, #5
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4413      	add	r3, r2
 8003796:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037a4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037ac:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037ae:	78fb      	ldrb	r3, [r7, #3]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80037c0:	78fb      	ldrb	r3, [r7, #3]
 80037c2:	015a      	lsls	r2, r3, #5
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	4413      	add	r3, r2
 80037c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037cc:	461a      	mov	r2, r3
 80037ce:	2380      	movs	r3, #128	@ 0x80
 80037d0:	6093      	str	r3, [r2, #8]
 80037d2:	e217      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	4611      	mov	r1, r2
 80037dc:	4618      	mov	r0, r3
 80037de:	f002 fdbe 	bl	800635e <USB_ReadChInterrupts>
 80037e2:	4603      	mov	r3, r0
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ec:	d11b      	bne.n	8003826 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	334d      	adds	r3, #77	@ 0x4d
 80037fe:	2209      	movs	r2, #9
 8003800:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f003 fb4b 	bl	8006ea6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003810:	78fb      	ldrb	r3, [r7, #3]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	4413      	add	r3, r2
 8003818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800381c:	461a      	mov	r2, r3
 800381e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003822:	6093      	str	r3, [r2, #8]
 8003824:	e1ee      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	78fa      	ldrb	r2, [r7, #3]
 800382c:	4611      	mov	r1, r2
 800382e:	4618      	mov	r0, r3
 8003830:	f002 fd95 	bl	800635e <USB_ReadChInterrupts>
 8003834:	4603      	mov	r3, r0
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b02      	cmp	r3, #2
 800383c:	f040 81df 	bne.w	8003bfe <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003840:	78fb      	ldrb	r3, [r7, #3]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800384c:	461a      	mov	r2, r3
 800384e:	2302      	movs	r3, #2
 8003850:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	334d      	adds	r3, #77	@ 0x4d
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	2b01      	cmp	r3, #1
 8003866:	f040 8093 	bne.w	8003990 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	334d      	adds	r3, #77	@ 0x4d
 800387a:	2202      	movs	r2, #2
 800387c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	334c      	adds	r3, #76	@ 0x4c
 800388e:	2201      	movs	r2, #1
 8003890:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003892:	78fa      	ldrb	r2, [r7, #3]
 8003894:	6879      	ldr	r1, [r7, #4]
 8003896:	4613      	mov	r3, r2
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	440b      	add	r3, r1
 80038a0:	3326      	adds	r3, #38	@ 0x26
 80038a2:	781b      	ldrb	r3, [r3, #0]
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d00b      	beq.n	80038c0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3326      	adds	r3, #38	@ 0x26
 80038b8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	f040 8190 	bne.w	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	799b      	ldrb	r3, [r3, #6]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d115      	bne.n	80038f4 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	333d      	adds	r3, #61	@ 0x3d
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	78fa      	ldrb	r2, [r7, #3]
 80038dc:	f083 0301 	eor.w	r3, r3, #1
 80038e0:	b2d8      	uxtb	r0, r3
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	4613      	mov	r3, r2
 80038e6:	011b      	lsls	r3, r3, #4
 80038e8:	1a9b      	subs	r3, r3, r2
 80038ea:	009b      	lsls	r3, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	333d      	adds	r3, #61	@ 0x3d
 80038f0:	4602      	mov	r2, r0
 80038f2:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	799b      	ldrb	r3, [r3, #6]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	f040 8171 	bne.w	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	4613      	mov	r3, r2
 8003904:	011b      	lsls	r3, r3, #4
 8003906:	1a9b      	subs	r3, r3, r2
 8003908:	009b      	lsls	r3, r3, #2
 800390a:	440b      	add	r3, r1
 800390c:	3334      	adds	r3, #52	@ 0x34
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f000 8165 	beq.w	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003916:	78fa      	ldrb	r2, [r7, #3]
 8003918:	6879      	ldr	r1, [r7, #4]
 800391a:	4613      	mov	r3, r2
 800391c:	011b      	lsls	r3, r3, #4
 800391e:	1a9b      	subs	r3, r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	3334      	adds	r3, #52	@ 0x34
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	78fa      	ldrb	r2, [r7, #3]
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	4613      	mov	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	1a9b      	subs	r3, r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4403      	add	r3, r0
 8003936:	3328      	adds	r3, #40	@ 0x28
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	440b      	add	r3, r1
 800393c:	1e59      	subs	r1, r3, #1
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	4613      	mov	r3, r2
 8003944:	011b      	lsls	r3, r3, #4
 8003946:	1a9b      	subs	r3, r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4403      	add	r3, r0
 800394c:	3328      	adds	r3, #40	@ 0x28
 800394e:	881b      	ldrh	r3, [r3, #0]
 8003950:	fbb1 f3f3 	udiv	r3, r1, r3
 8003954:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f003 0301 	and.w	r3, r3, #1
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 813f 	beq.w	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003962:	78fa      	ldrb	r2, [r7, #3]
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	333d      	adds	r3, #61	@ 0x3d
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	78fa      	ldrb	r2, [r7, #3]
 8003976:	f083 0301 	eor.w	r3, r3, #1
 800397a:	b2d8      	uxtb	r0, r3
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	333d      	adds	r3, #61	@ 0x3d
 800398a:	4602      	mov	r2, r0
 800398c:	701a      	strb	r2, [r3, #0]
 800398e:	e127      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334d      	adds	r3, #77	@ 0x4d
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	2b03      	cmp	r3, #3
 80039a4:	d120      	bne.n	80039e8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	334d      	adds	r3, #77	@ 0x4d
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80039ba:	78fa      	ldrb	r2, [r7, #3]
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	4613      	mov	r3, r2
 80039c0:	011b      	lsls	r3, r3, #4
 80039c2:	1a9b      	subs	r3, r3, r2
 80039c4:	009b      	lsls	r3, r3, #2
 80039c6:	440b      	add	r3, r1
 80039c8:	331b      	adds	r3, #27
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	f040 8107 	bne.w	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80039d2:	78fa      	ldrb	r2, [r7, #3]
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	011b      	lsls	r3, r3, #4
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	440b      	add	r3, r1
 80039e0:	334c      	adds	r3, #76	@ 0x4c
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e0fb      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80039e8:	78fa      	ldrb	r2, [r7, #3]
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	4613      	mov	r3, r2
 80039ee:	011b      	lsls	r3, r3, #4
 80039f0:	1a9b      	subs	r3, r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	440b      	add	r3, r1
 80039f6:	334d      	adds	r3, #77	@ 0x4d
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d13a      	bne.n	8003a74 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039fe:	78fa      	ldrb	r2, [r7, #3]
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	4613      	mov	r3, r2
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	1a9b      	subs	r3, r3, r2
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	334d      	adds	r3, #77	@ 0x4d
 8003a0e:	2202      	movs	r2, #2
 8003a10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003a12:	78fa      	ldrb	r2, [r7, #3]
 8003a14:	6879      	ldr	r1, [r7, #4]
 8003a16:	4613      	mov	r3, r2
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	1a9b      	subs	r3, r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	440b      	add	r3, r1
 8003a20:	334c      	adds	r3, #76	@ 0x4c
 8003a22:	2202      	movs	r2, #2
 8003a24:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	331b      	adds	r3, #27
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	f040 80d1 	bne.w	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	331b      	adds	r3, #27
 8003a4e:	2200      	movs	r2, #0
 8003a50:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003a52:	78fb      	ldrb	r3, [r7, #3]
 8003a54:	015a      	lsls	r2, r3, #5
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	4413      	add	r3, r2
 8003a5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	0151      	lsls	r1, r2, #5
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	440a      	add	r2, r1
 8003a68:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003a6c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a70:	6053      	str	r3, [r2, #4]
 8003a72:	e0b5      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	334d      	adds	r3, #77	@ 0x4d
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	2b05      	cmp	r3, #5
 8003a88:	d114      	bne.n	8003ab4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	011b      	lsls	r3, r3, #4
 8003a92:	1a9b      	subs	r3, r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	334d      	adds	r3, #77	@ 0x4d
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	334c      	adds	r3, #76	@ 0x4c
 8003aae:	2202      	movs	r2, #2
 8003ab0:	701a      	strb	r2, [r3, #0]
 8003ab2:	e095      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6879      	ldr	r1, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	440b      	add	r3, r1
 8003ac2:	334d      	adds	r3, #77	@ 0x4d
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d114      	bne.n	8003af4 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334d      	adds	r3, #77	@ 0x4d
 8003ada:	2202      	movs	r2, #2
 8003adc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	334c      	adds	r3, #76	@ 0x4c
 8003aee:	2205      	movs	r2, #5
 8003af0:	701a      	strb	r2, [r3, #0]
 8003af2:	e075      	b.n	8003be0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	781b      	ldrb	r3, [r3, #0]
 8003b06:	2b07      	cmp	r3, #7
 8003b08:	d00a      	beq.n	8003b20 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003b0a:	78fa      	ldrb	r2, [r7, #3]
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	011b      	lsls	r3, r3, #4
 8003b12:	1a9b      	subs	r3, r3, r2
 8003b14:	009b      	lsls	r3, r3, #2
 8003b16:	440b      	add	r3, r1
 8003b18:	334d      	adds	r3, #77	@ 0x4d
 8003b1a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003b1c:	2b09      	cmp	r3, #9
 8003b1e:	d170      	bne.n	8003c02 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b20:	78fa      	ldrb	r2, [r7, #3]
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	4613      	mov	r3, r2
 8003b26:	011b      	lsls	r3, r3, #4
 8003b28:	1a9b      	subs	r3, r3, r2
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	440b      	add	r3, r1
 8003b2e:	334d      	adds	r3, #77	@ 0x4d
 8003b30:	2202      	movs	r2, #2
 8003b32:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b34:	78fa      	ldrb	r2, [r7, #3]
 8003b36:	6879      	ldr	r1, [r7, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	1a9b      	subs	r3, r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	440b      	add	r3, r1
 8003b42:	3344      	adds	r3, #68	@ 0x44
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	1c59      	adds	r1, r3, #1
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	4403      	add	r3, r0
 8003b54:	3344      	adds	r3, #68	@ 0x44
 8003b56:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b58:	78fa      	ldrb	r2, [r7, #3]
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	4613      	mov	r3, r2
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	1a9b      	subs	r3, r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	440b      	add	r3, r1
 8003b66:	3344      	adds	r3, #68	@ 0x44
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d914      	bls.n	8003b98 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	3344      	adds	r3, #68	@ 0x44
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b82:	78fa      	ldrb	r2, [r7, #3]
 8003b84:	6879      	ldr	r1, [r7, #4]
 8003b86:	4613      	mov	r3, r2
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	1a9b      	subs	r3, r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	440b      	add	r3, r1
 8003b90:	334c      	adds	r3, #76	@ 0x4c
 8003b92:	2204      	movs	r2, #4
 8003b94:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b96:	e022      	b.n	8003bde <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b98:	78fa      	ldrb	r2, [r7, #3]
 8003b9a:	6879      	ldr	r1, [r7, #4]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	1a9b      	subs	r3, r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	334c      	adds	r3, #76	@ 0x4c
 8003ba8:	2202      	movs	r2, #2
 8003baa:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003bac:	78fb      	ldrb	r3, [r7, #3]
 8003bae:	015a      	lsls	r2, r3, #5
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003bc2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003bca:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003bcc:	78fb      	ldrb	r3, [r7, #3]
 8003bce:	015a      	lsls	r2, r3, #5
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd8:	461a      	mov	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bde:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003be0:	78fa      	ldrb	r2, [r7, #3]
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	4613      	mov	r3, r2
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	1a9b      	subs	r3, r3, r2
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	440b      	add	r3, r1
 8003bee:	334c      	adds	r3, #76	@ 0x4c
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f005 fcae 	bl	8009558 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003bfc:	e002      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003bfe:	bf00      	nop
 8003c00:	e000      	b.n	8003c04 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003c02:	bf00      	nop
  }
}
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b08a      	sub	sp, #40	@ 0x28
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c1a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6a1b      	ldr	r3, [r3, #32]
 8003c22:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	0c5b      	lsrs	r3, r3, #17
 8003c30:	f003 030f 	and.w	r3, r3, #15
 8003c34:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c3e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d004      	beq.n	8003c50 <HCD_RXQLVL_IRQHandler+0x46>
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	2b05      	cmp	r3, #5
 8003c4a:	f000 80b6 	beq.w	8003dba <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003c4e:	e0b7      	b.n	8003dc0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	f000 80b3 	beq.w	8003dbe <HCD_RXQLVL_IRQHandler+0x1b4>
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	011b      	lsls	r3, r3, #4
 8003c60:	1a9b      	subs	r3, r3, r2
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	440b      	add	r3, r1
 8003c66:	332c      	adds	r3, #44	@ 0x2c
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80a7 	beq.w	8003dbe <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003c70:	6879      	ldr	r1, [r7, #4]
 8003c72:	69ba      	ldr	r2, [r7, #24]
 8003c74:	4613      	mov	r3, r2
 8003c76:	011b      	lsls	r3, r3, #4
 8003c78:	1a9b      	subs	r3, r3, r2
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	440b      	add	r3, r1
 8003c7e:	3338      	adds	r3, #56	@ 0x38
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	18d1      	adds	r1, r2, r3
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	69ba      	ldr	r2, [r7, #24]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	4403      	add	r3, r0
 8003c94:	3334      	adds	r3, #52	@ 0x34
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4299      	cmp	r1, r3
 8003c9a:	f200 8083 	bhi.w	8003da4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6818      	ldr	r0, [r3, #0]
 8003ca2:	6879      	ldr	r1, [r7, #4]
 8003ca4:	69ba      	ldr	r2, [r7, #24]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	011b      	lsls	r3, r3, #4
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	440b      	add	r3, r1
 8003cb0:	332c      	adds	r3, #44	@ 0x2c
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	b292      	uxth	r2, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f002 fae5 	bl	8006288 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	69ba      	ldr	r2, [r7, #24]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	332c      	adds	r3, #44	@ 0x2c
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	18d1      	adds	r1, r2, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	4403      	add	r3, r0
 8003ce2:	332c      	adds	r3, #44	@ 0x2c
 8003ce4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3338      	adds	r3, #56	@ 0x38
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	18d1      	adds	r1, r2, r3
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4613      	mov	r3, r2
 8003d02:	011b      	lsls	r3, r3, #4
 8003d04:	1a9b      	subs	r3, r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4403      	add	r3, r0
 8003d0a:	3338      	adds	r3, #56	@ 0x38
 8003d0c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	0cdb      	lsrs	r3, r3, #19
 8003d1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003d22:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4613      	mov	r3, r2
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	440b      	add	r3, r1
 8003d32:	3328      	adds	r3, #40	@ 0x28
 8003d34:	881b      	ldrh	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d13f      	bne.n	8003dbe <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d03c      	beq.n	8003dbe <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	015a      	lsls	r2, r3, #5
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	4413      	add	r3, r2
 8003d4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d5a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d62:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003d76:	6879      	ldr	r1, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4613      	mov	r3, r2
 8003d7c:	011b      	lsls	r3, r3, #4
 8003d7e:	1a9b      	subs	r3, r3, r2
 8003d80:	009b      	lsls	r3, r3, #2
 8003d82:	440b      	add	r3, r1
 8003d84:	333c      	adds	r3, #60	@ 0x3c
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	f083 0301 	eor.w	r3, r3, #1
 8003d8c:	b2d8      	uxtb	r0, r3
 8003d8e:	6879      	ldr	r1, [r7, #4]
 8003d90:	69ba      	ldr	r2, [r7, #24]
 8003d92:	4613      	mov	r3, r2
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	1a9b      	subs	r3, r3, r2
 8003d98:	009b      	lsls	r3, r3, #2
 8003d9a:	440b      	add	r3, r1
 8003d9c:	333c      	adds	r3, #60	@ 0x3c
 8003d9e:	4602      	mov	r2, r0
 8003da0:	701a      	strb	r2, [r3, #0]
      break;
 8003da2:	e00c      	b.n	8003dbe <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003da4:	6879      	ldr	r1, [r7, #4]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4613      	mov	r3, r2
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	1a9b      	subs	r3, r3, r2
 8003dae:	009b      	lsls	r3, r3, #2
 8003db0:	440b      	add	r3, r1
 8003db2:	334c      	adds	r3, #76	@ 0x4c
 8003db4:	2204      	movs	r2, #4
 8003db6:	701a      	strb	r2, [r3, #0]
      break;
 8003db8:	e001      	b.n	8003dbe <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003dbe:	bf00      	nop
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3728      	adds	r7, #40	@ 0x28
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003df4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b02      	cmp	r3, #2
 8003dfe:	d10b      	bne.n	8003e18 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d102      	bne.n	8003e10 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f005 fb88 	bl	8009520 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	f043 0302 	orr.w	r3, r3, #2
 8003e16:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f003 0308 	and.w	r3, r3, #8
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d132      	bne.n	8003e88 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	f043 0308 	orr.w	r3, r3, #8
 8003e28:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d126      	bne.n	8003e82 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	7a5b      	ldrb	r3, [r3, #9]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d113      	bne.n	8003e64 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003e42:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003e46:	d106      	bne.n	8003e56 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2102      	movs	r1, #2
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f002 fbaa 	bl	80065a8 <USB_InitFSLSPClkSel>
 8003e54:	e011      	b.n	8003e7a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f002 fba3 	bl	80065a8 <USB_InitFSLSPClkSel>
 8003e62:	e00a      	b.n	8003e7a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	79db      	ldrb	r3, [r3, #7]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003e6c:	693b      	ldr	r3, [r7, #16]
 8003e6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003e72:	461a      	mov	r2, r3
 8003e74:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003e78:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f005 fb7a 	bl	8009574 <HAL_HCD_PortEnabled_Callback>
 8003e80:	e002      	b.n	8003e88 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e82:	6878      	ldr	r0, [r7, #4]
 8003e84:	f005 fb84 	bl	8009590 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	f003 0320 	and.w	r3, r3, #32
 8003e8e:	2b20      	cmp	r3, #32
 8003e90:	d103      	bne.n	8003e9a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	f043 0320 	orr.w	r3, r3, #32
 8003e98:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	6013      	str	r3, [r2, #0]
}
 8003ea6:	bf00      	nop
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
	...

08003eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e12b      	b.n	800411a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ec8:	b2db      	uxtb	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd f8e0 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	@ 0x24
 8003ee0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f022 0201 	bic.w	r2, r2, #1
 8003ef2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f12:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f14:	f001 fa20 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 8003f18:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	4a81      	ldr	r2, [pc, #516]	@ (8004124 <HAL_I2C_Init+0x274>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d807      	bhi.n	8003f34 <HAL_I2C_Init+0x84>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a80      	ldr	r2, [pc, #512]	@ (8004128 <HAL_I2C_Init+0x278>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	bf94      	ite	ls
 8003f2c:	2301      	movls	r3, #1
 8003f2e:	2300      	movhi	r3, #0
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	e006      	b.n	8003f42 <HAL_I2C_Init+0x92>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	4a7d      	ldr	r2, [pc, #500]	@ (800412c <HAL_I2C_Init+0x27c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	bf94      	ite	ls
 8003f3c:	2301      	movls	r3, #1
 8003f3e:	2300      	movhi	r3, #0
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0e7      	b.n	800411a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	4a78      	ldr	r2, [pc, #480]	@ (8004130 <HAL_I2C_Init+0x280>)
 8003f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f52:	0c9b      	lsrs	r3, r3, #18
 8003f54:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	68ba      	ldr	r2, [r7, #8]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	6a1b      	ldr	r3, [r3, #32]
 8003f70:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	4a6a      	ldr	r2, [pc, #424]	@ (8004124 <HAL_I2C_Init+0x274>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d802      	bhi.n	8003f84 <HAL_I2C_Init+0xd4>
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	3301      	adds	r3, #1
 8003f82:	e009      	b.n	8003f98 <HAL_I2C_Init+0xe8>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f8a:	fb02 f303 	mul.w	r3, r2, r3
 8003f8e:	4a69      	ldr	r2, [pc, #420]	@ (8004134 <HAL_I2C_Init+0x284>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	099b      	lsrs	r3, r3, #6
 8003f96:	3301      	adds	r3, #1
 8003f98:	687a      	ldr	r2, [r7, #4]
 8003f9a:	6812      	ldr	r2, [r2, #0]
 8003f9c:	430b      	orrs	r3, r1
 8003f9e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003faa:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	495c      	ldr	r1, [pc, #368]	@ (8004124 <HAL_I2C_Init+0x274>)
 8003fb4:	428b      	cmp	r3, r1
 8003fb6:	d819      	bhi.n	8003fec <HAL_I2C_Init+0x13c>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	1e59      	subs	r1, r3, #1
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc6:	1c59      	adds	r1, r3, #1
 8003fc8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fcc:	400b      	ands	r3, r1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_I2C_Init+0x138>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	1e59      	subs	r1, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	005b      	lsls	r3, r3, #1
 8003fdc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	e051      	b.n	800408c <HAL_I2C_Init+0x1dc>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	e04f      	b.n	800408c <HAL_I2C_Init+0x1dc>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d111      	bne.n	8004018 <HAL_I2C_Init+0x168>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1e58      	subs	r0, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6859      	ldr	r1, [r3, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	005b      	lsls	r3, r3, #1
 8004000:	440b      	add	r3, r1
 8004002:	fbb0 f3f3 	udiv	r3, r0, r3
 8004006:	3301      	adds	r3, #1
 8004008:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e012      	b.n	800403e <HAL_I2C_Init+0x18e>
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1e58      	subs	r0, r3, #1
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	460b      	mov	r3, r1
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	0099      	lsls	r1, r3, #2
 8004028:	440b      	add	r3, r1
 800402a:	fbb0 f3f3 	udiv	r3, r0, r3
 800402e:	3301      	adds	r3, #1
 8004030:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d001      	beq.n	8004046 <HAL_I2C_Init+0x196>
 8004042:	2301      	movs	r3, #1
 8004044:	e022      	b.n	800408c <HAL_I2C_Init+0x1dc>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10e      	bne.n	800406c <HAL_I2C_Init+0x1bc>
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1e58      	subs	r0, r3, #1
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	460b      	mov	r3, r1
 8004058:	005b      	lsls	r3, r3, #1
 800405a:	440b      	add	r3, r1
 800405c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004060:	3301      	adds	r3, #1
 8004062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004066:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800406a:	e00f      	b.n	800408c <HAL_I2C_Init+0x1dc>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1e58      	subs	r0, r3, #1
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6859      	ldr	r1, [r3, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	0099      	lsls	r1, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004082:	3301      	adds	r3, #1
 8004084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004088:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	6809      	ldr	r1, [r1, #0]
 8004090:	4313      	orrs	r3, r2
 8004092:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	69da      	ldr	r2, [r3, #28]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	431a      	orrs	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	430a      	orrs	r2, r1
 80040ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80040ba:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	6911      	ldr	r1, [r2, #16]
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	68d2      	ldr	r2, [r2, #12]
 80040c6:	4311      	orrs	r1, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6812      	ldr	r2, [r2, #0]
 80040cc:	430b      	orrs	r3, r1
 80040ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	695a      	ldr	r2, [r3, #20]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	431a      	orrs	r2, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	430a      	orrs	r2, r1
 80040ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f042 0201 	orr.w	r2, r2, #1
 80040fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2220      	movs	r2, #32
 8004106:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}
 8004122:	bf00      	nop
 8004124:	000186a0 	.word	0x000186a0
 8004128:	001e847f 	.word	0x001e847f
 800412c:	003d08ff 	.word	0x003d08ff
 8004130:	431bde83 	.word	0x431bde83
 8004134:	10624dd3 	.word	0x10624dd3

08004138 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b088      	sub	sp, #32
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e128      	b.n	800439c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d109      	bne.n	800416a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a90      	ldr	r2, [pc, #576]	@ (80043a4 <HAL_I2S_Init+0x26c>)
 8004162:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f7fc ffe1 	bl	800112c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2202      	movs	r2, #2
 800416e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	6812      	ldr	r2, [r2, #0]
 800417c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004180:	f023 030f 	bic.w	r3, r3, #15
 8004184:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2202      	movs	r2, #2
 800418c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	2b02      	cmp	r3, #2
 8004194:	d060      	beq.n	8004258 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d102      	bne.n	80041a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800419e:	2310      	movs	r3, #16
 80041a0:	617b      	str	r3, [r7, #20]
 80041a2:	e001      	b.n	80041a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80041a4:	2320      	movs	r3, #32
 80041a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	689b      	ldr	r3, [r3, #8]
 80041ac:	2b20      	cmp	r3, #32
 80041ae:	d802      	bhi.n	80041b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	005b      	lsls	r3, r3, #1
 80041b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80041b6:	2001      	movs	r0, #1
 80041b8:	f001 f9d8 	bl	800556c <HAL_RCCEx_GetPeriphCLKFreq>
 80041bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041c6:	d125      	bne.n	8004214 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d010      	beq.n	80041f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	68fa      	ldr	r2, [r7, #12]
 80041d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80041da:	4613      	mov	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4413      	add	r3, r2
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	461a      	mov	r2, r3
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	695b      	ldr	r3, [r3, #20]
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	3305      	adds	r3, #5
 80041ee:	613b      	str	r3, [r7, #16]
 80041f0:	e01f      	b.n	8004232 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	00db      	lsls	r3, r3, #3
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041fc:	4613      	mov	r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	4413      	add	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	461a      	mov	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	3305      	adds	r3, #5
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e00e      	b.n	8004232 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004214:	68fa      	ldr	r2, [r7, #12]
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	fbb2 f2f3 	udiv	r2, r2, r3
 800421c:	4613      	mov	r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	4413      	add	r3, r2
 8004222:	005b      	lsls	r3, r3, #1
 8004224:	461a      	mov	r2, r3
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	fbb2 f3f3 	udiv	r3, r2, r3
 800422e:	3305      	adds	r3, #5
 8004230:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	4a5c      	ldr	r2, [pc, #368]	@ (80043a8 <HAL_I2S_Init+0x270>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	08db      	lsrs	r3, r3, #3
 800423c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	69bb      	ldr	r3, [r7, #24]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	021b      	lsls	r3, r3, #8
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e003      	b.n	8004260 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004258:	2302      	movs	r3, #2
 800425a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800425c:	2300      	movs	r3, #0
 800425e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b01      	cmp	r3, #1
 8004264:	d902      	bls.n	800426c <HAL_I2S_Init+0x134>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	2bff      	cmp	r3, #255	@ 0xff
 800426a:	d907      	bls.n	800427c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004270:	f043 0210 	orr.w	r2, r3, #16
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e08f      	b.n	800439c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691a      	ldr	r2, [r3, #16]
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	ea42 0103 	orr.w	r1, r2, r3
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	430a      	orrs	r2, r1
 800428e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800429a:	f023 030f 	bic.w	r3, r3, #15
 800429e:	687a      	ldr	r2, [r7, #4]
 80042a0:	6851      	ldr	r1, [r2, #4]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6892      	ldr	r2, [r2, #8]
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68d2      	ldr	r2, [r2, #12]
 80042ac:	4311      	orrs	r1, r2
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	6992      	ldr	r2, [r2, #24]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80042be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a1b      	ldr	r3, [r3, #32]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d161      	bne.n	800438c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a38      	ldr	r2, [pc, #224]	@ (80043ac <HAL_I2S_Init+0x274>)
 80042cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a37      	ldr	r2, [pc, #220]	@ (80043b0 <HAL_I2S_Init+0x278>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <HAL_I2S_Init+0x1a4>
 80042d8:	4b36      	ldr	r3, [pc, #216]	@ (80043b4 <HAL_I2S_Init+0x27c>)
 80042da:	e001      	b.n	80042e0 <HAL_I2S_Init+0x1a8>
 80042dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6812      	ldr	r2, [r2, #0]
 80042e6:	4932      	ldr	r1, [pc, #200]	@ (80043b0 <HAL_I2S_Init+0x278>)
 80042e8:	428a      	cmp	r2, r1
 80042ea:	d101      	bne.n	80042f0 <HAL_I2S_Init+0x1b8>
 80042ec:	4a31      	ldr	r2, [pc, #196]	@ (80043b4 <HAL_I2S_Init+0x27c>)
 80042ee:	e001      	b.n	80042f4 <HAL_I2S_Init+0x1bc>
 80042f0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80042f4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80042f8:	f023 030f 	bic.w	r3, r3, #15
 80042fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a2b      	ldr	r2, [pc, #172]	@ (80043b0 <HAL_I2S_Init+0x278>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d101      	bne.n	800430c <HAL_I2S_Init+0x1d4>
 8004308:	4b2a      	ldr	r3, [pc, #168]	@ (80043b4 <HAL_I2S_Init+0x27c>)
 800430a:	e001      	b.n	8004310 <HAL_I2S_Init+0x1d8>
 800430c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004310:	2202      	movs	r2, #2
 8004312:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a25      	ldr	r2, [pc, #148]	@ (80043b0 <HAL_I2S_Init+0x278>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_I2S_Init+0x1ea>
 800431e:	4b25      	ldr	r3, [pc, #148]	@ (80043b4 <HAL_I2S_Init+0x27c>)
 8004320:	e001      	b.n	8004326 <HAL_I2S_Init+0x1ee>
 8004322:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004326:	69db      	ldr	r3, [r3, #28]
 8004328:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004332:	d003      	beq.n	800433c <HAL_I2S_Init+0x204>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d103      	bne.n	8004344 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800433c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004340:	613b      	str	r3, [r7, #16]
 8004342:	e001      	b.n	8004348 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004344:	2300      	movs	r3, #0
 8004346:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004352:	4313      	orrs	r3, r2
 8004354:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
 800435a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800435c:	4313      	orrs	r3, r2
 800435e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004366:	4313      	orrs	r3, r2
 8004368:	b29a      	uxth	r2, r3
 800436a:	897b      	ldrh	r3, [r7, #10]
 800436c:	4313      	orrs	r3, r2
 800436e:	b29b      	uxth	r3, r3
 8004370:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004374:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a0d      	ldr	r2, [pc, #52]	@ (80043b0 <HAL_I2S_Init+0x278>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d101      	bne.n	8004384 <HAL_I2S_Init+0x24c>
 8004380:	4b0c      	ldr	r3, [pc, #48]	@ (80043b4 <HAL_I2S_Init+0x27c>)
 8004382:	e001      	b.n	8004388 <HAL_I2S_Init+0x250>
 8004384:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004388:	897a      	ldrh	r2, [r7, #10]
 800438a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3720      	adds	r7, #32
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}
 80043a4:	080044af 	.word	0x080044af
 80043a8:	cccccccd 	.word	0xcccccccd
 80043ac:	080045c5 	.word	0x080045c5
 80043b0:	40003800 	.word	0x40003800
 80043b4:	40003400 	.word	0x40003400

080043b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80043c0:	bf00      	nop
 80043c2:	370c      	adds	r7, #12
 80043c4:	46bd      	mov	sp, r7
 80043c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ca:	4770      	bx	lr

080043cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80043d4:	bf00      	nop
 80043d6:	370c      	adds	r7, #12
 80043d8:	46bd      	mov	sp, r7
 80043da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043de:	4770      	bx	lr

080043e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b083      	sub	sp, #12
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80043e8:	bf00      	nop
 80043ea:	370c      	adds	r7, #12
 80043ec:	46bd      	mov	sp, r7
 80043ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f2:	4770      	bx	lr

080043f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	881a      	ldrh	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800440c:	1c9a      	adds	r2, r3, #2
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004416:	b29b      	uxth	r3, r3
 8004418:	3b01      	subs	r3, #1
 800441a:	b29a      	uxth	r2, r3
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10e      	bne.n	8004448 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685a      	ldr	r2, [r3, #4]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004438:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff ffb8 	bl	80043b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004448:	bf00      	nop
 800444a:	3708      	adds	r7, #8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68da      	ldr	r2, [r3, #12]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004462:	b292      	uxth	r2, r2
 8004464:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446a:	1c9a      	adds	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004474:	b29b      	uxth	r3, r3
 8004476:	3b01      	subs	r3, #1
 8004478:	b29a      	uxth	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d10e      	bne.n	80044a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004496:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff93 	bl	80043cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b04      	cmp	r3, #4
 80044c8:	d13a      	bne.n	8004540 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	f003 0301 	and.w	r3, r3, #1
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d109      	bne.n	80044e8 <I2S_IRQHandler+0x3a>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044de:	2b40      	cmp	r3, #64	@ 0x40
 80044e0:	d102      	bne.n	80044e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f7ff ffb4 	bl	8004450 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ee:	2b40      	cmp	r3, #64	@ 0x40
 80044f0:	d126      	bne.n	8004540 <I2S_IRQHandler+0x92>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f003 0320 	and.w	r3, r3, #32
 80044fc:	2b20      	cmp	r3, #32
 80044fe:	d11f      	bne.n	8004540 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800450e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004510:	2300      	movs	r3, #0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004532:	f043 0202 	orr.w	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff ff50 	bl	80043e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004546:	b2db      	uxtb	r3, r3
 8004548:	2b03      	cmp	r3, #3
 800454a:	d136      	bne.n	80045ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b02      	cmp	r3, #2
 8004554:	d109      	bne.n	800456a <I2S_IRQHandler+0xbc>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004560:	2b80      	cmp	r3, #128	@ 0x80
 8004562:	d102      	bne.n	800456a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f7ff ff45 	bl	80043f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f003 0308 	and.w	r3, r3, #8
 8004570:	2b08      	cmp	r3, #8
 8004572:	d122      	bne.n	80045ba <I2S_IRQHandler+0x10c>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f003 0320 	and.w	r3, r3, #32
 800457e:	2b20      	cmp	r3, #32
 8004580:	d11b      	bne.n	80045ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685a      	ldr	r2, [r3, #4]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004590:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	60fb      	str	r3, [r7, #12]
 800459e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045ac:	f043 0204 	orr.w	r2, r3, #4
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f7ff ff13 	bl	80043e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045ba:	bf00      	nop
 80045bc:	3718      	adds	r7, #24
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
	...

080045c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a92      	ldr	r2, [pc, #584]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d101      	bne.n	80045e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80045de:	4b92      	ldr	r3, [pc, #584]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045e0:	e001      	b.n	80045e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80045e2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a8b      	ldr	r2, [pc, #556]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d101      	bne.n	8004600 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80045fc:	4b8a      	ldr	r3, [pc, #552]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80045fe:	e001      	b.n	8004604 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004600:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004610:	d004      	beq.n	800461c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 8099 	bne.w	800474e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b02      	cmp	r3, #2
 8004624:	d107      	bne.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800462c:	2b00      	cmp	r3, #0
 800462e:	d002      	beq.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f925 	bl	8004880 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9c8 	bl	80049e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004656:	2b40      	cmp	r3, #64	@ 0x40
 8004658:	d13a      	bne.n	80046d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	f003 0320 	and.w	r3, r3, #32
 8004660:	2b00      	cmp	r3, #0
 8004662:	d035      	beq.n	80046d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a6e      	ldr	r2, [pc, #440]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d101      	bne.n	8004672 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800466e:	4b6e      	ldr	r3, [pc, #440]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004670:	e001      	b.n	8004676 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004672:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4969      	ldr	r1, [pc, #420]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800467e:	428b      	cmp	r3, r1
 8004680:	d101      	bne.n	8004686 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004682:	4b69      	ldr	r3, [pc, #420]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004684:	e001      	b.n	800468a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004686:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800468a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800468e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800469e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68db      	ldr	r3, [r3, #12]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046c2:	f043 0202 	orr.w	r2, r3, #2
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7ff fe88 	bl	80043e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	f040 80c3 	bne.w	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f003 0320 	and.w	r3, r3, #32
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80bd 	beq.w	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a49      	ldr	r2, [pc, #292]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d101      	bne.n	8004706 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004702:	4b49      	ldr	r3, [pc, #292]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004704:	e001      	b.n	800470a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004706:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4944      	ldr	r1, [pc, #272]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004712:	428b      	cmp	r3, r1
 8004714:	d101      	bne.n	800471a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004716:	4b44      	ldr	r3, [pc, #272]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004718:	e001      	b.n	800471e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800471a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800471e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004722:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004724:	2300      	movs	r3, #0
 8004726:	60bb      	str	r3, [r7, #8]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800473e:	f043 0204 	orr.w	r2, r3, #4
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f7ff fe4a 	bl	80043e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800474c:	e089      	b.n	8004862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d107      	bne.n	8004768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800475e:	2b00      	cmp	r3, #0
 8004760:	d002      	beq.n	8004768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f8be 	bl	80048e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b01      	cmp	r3, #1
 8004770:	d107      	bne.n	8004782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004778:	2b00      	cmp	r3, #0
 800477a:	d002      	beq.n	8004782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f8fd 	bl	800497c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004788:	2b40      	cmp	r3, #64	@ 0x40
 800478a:	d12f      	bne.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d02a      	beq.n	80047ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1e      	ldr	r2, [pc, #120]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d101      	bne.n	80047b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80047b0:	4b1d      	ldr	r3, [pc, #116]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047b2:	e001      	b.n	80047b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80047b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4919      	ldr	r1, [pc, #100]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80047c0:	428b      	cmp	r3, r1
 80047c2:	d101      	bne.n	80047c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80047c4:	4b18      	ldr	r3, [pc, #96]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80047c6:	e001      	b.n	80047cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80047c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80047cc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2201      	movs	r2, #1
 80047d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047de:	f043 0202 	orr.w	r2, r3, #2
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fdfa 	bl	80043e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80047ec:	69bb      	ldr	r3, [r7, #24]
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d136      	bne.n	8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d031      	beq.n	8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a07      	ldr	r2, [pc, #28]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800480a:	4b07      	ldr	r3, [pc, #28]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800480c:	e001      	b.n	8004812 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800480e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004812:	685a      	ldr	r2, [r3, #4]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	4902      	ldr	r1, [pc, #8]	@ (8004824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800481a:	428b      	cmp	r3, r1
 800481c:	d106      	bne.n	800482c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800481e:	4b02      	ldr	r3, [pc, #8]	@ (8004828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004820:	e006      	b.n	8004830 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004822:	bf00      	nop
 8004824:	40003800 	.word	0x40003800
 8004828:	40003400 	.word	0x40003400
 800482c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004830:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004834:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004844:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004852:	f043 0204 	orr.w	r2, r3, #4
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7ff fdc0 	bl	80043e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004860:	e000      	b.n	8004864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004862:	bf00      	nop
}
 8004864:	bf00      	nop
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004874:	bf00      	nop
 8004876:	370c      	adds	r7, #12
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	1c99      	adds	r1, r3, #2
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6251      	str	r1, [r2, #36]	@ 0x24
 8004892:	881a      	ldrh	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d113      	bne.n	80048da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685a      	ldr	r2, [r3, #4]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ffc9 	bl	800486c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048da:	bf00      	nop
 80048dc:	3708      	adds	r7, #8
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b082      	sub	sp, #8
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	1c99      	adds	r1, r3, #2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6251      	str	r1, [r2, #36]	@ 0x24
 80048f6:	8819      	ldrh	r1, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004974 <I2SEx_TxISR_I2SExt+0x90>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d101      	bne.n	8004906 <I2SEx_TxISR_I2SExt+0x22>
 8004902:	4b1d      	ldr	r3, [pc, #116]	@ (8004978 <I2SEx_TxISR_I2SExt+0x94>)
 8004904:	e001      	b.n	800490a <I2SEx_TxISR_I2SExt+0x26>
 8004906:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800490a:	460a      	mov	r2, r1
 800490c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004920:	b29b      	uxth	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d121      	bne.n	800496a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a12      	ldr	r2, [pc, #72]	@ (8004974 <I2SEx_TxISR_I2SExt+0x90>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d101      	bne.n	8004934 <I2SEx_TxISR_I2SExt+0x50>
 8004930:	4b11      	ldr	r3, [pc, #68]	@ (8004978 <I2SEx_TxISR_I2SExt+0x94>)
 8004932:	e001      	b.n	8004938 <I2SEx_TxISR_I2SExt+0x54>
 8004934:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004938:	685a      	ldr	r2, [r3, #4]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	490d      	ldr	r1, [pc, #52]	@ (8004974 <I2SEx_TxISR_I2SExt+0x90>)
 8004940:	428b      	cmp	r3, r1
 8004942:	d101      	bne.n	8004948 <I2SEx_TxISR_I2SExt+0x64>
 8004944:	4b0c      	ldr	r3, [pc, #48]	@ (8004978 <I2SEx_TxISR_I2SExt+0x94>)
 8004946:	e001      	b.n	800494c <I2SEx_TxISR_I2SExt+0x68>
 8004948:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004950:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004956:	b29b      	uxth	r3, r3
 8004958:	2b00      	cmp	r3, #0
 800495a:	d106      	bne.n	800496a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f7ff ff81 	bl	800486c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800496a:	bf00      	nop
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	40003800 	.word	0x40003800
 8004978:	40003400 	.word	0x40003400

0800497c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	68d8      	ldr	r0, [r3, #12]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498e:	1c99      	adds	r1, r3, #2
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004994:	b282      	uxth	r2, r0
 8004996:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d113      	bne.n	80049d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685a      	ldr	r2, [r3, #4]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d106      	bne.n	80049d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f7ff ff4a 	bl	800486c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80049d8:	bf00      	nop
 80049da:	3708      	adds	r7, #8
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a20      	ldr	r2, [pc, #128]	@ (8004a70 <I2SEx_RxISR_I2SExt+0x90>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d101      	bne.n	80049f6 <I2SEx_RxISR_I2SExt+0x16>
 80049f2:	4b20      	ldr	r3, [pc, #128]	@ (8004a74 <I2SEx_RxISR_I2SExt+0x94>)
 80049f4:	e001      	b.n	80049fa <I2SEx_RxISR_I2SExt+0x1a>
 80049f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049fa:	68d8      	ldr	r0, [r3, #12]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a00:	1c99      	adds	r1, r3, #2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004a06:	b282      	uxth	r2, r0
 8004a08:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d121      	bne.n	8004a66 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a12      	ldr	r2, [pc, #72]	@ (8004a70 <I2SEx_RxISR_I2SExt+0x90>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d101      	bne.n	8004a30 <I2SEx_RxISR_I2SExt+0x50>
 8004a2c:	4b11      	ldr	r3, [pc, #68]	@ (8004a74 <I2SEx_RxISR_I2SExt+0x94>)
 8004a2e:	e001      	b.n	8004a34 <I2SEx_RxISR_I2SExt+0x54>
 8004a30:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a34:	685a      	ldr	r2, [r3, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	490d      	ldr	r1, [pc, #52]	@ (8004a70 <I2SEx_RxISR_I2SExt+0x90>)
 8004a3c:	428b      	cmp	r3, r1
 8004a3e:	d101      	bne.n	8004a44 <I2SEx_RxISR_I2SExt+0x64>
 8004a40:	4b0c      	ldr	r3, [pc, #48]	@ (8004a74 <I2SEx_RxISR_I2SExt+0x94>)
 8004a42:	e001      	b.n	8004a48 <I2SEx_RxISR_I2SExt+0x68>
 8004a44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a4c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f7ff ff03 	bl	800486c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	40003800 	.word	0x40003800
 8004a74:	40003400 	.word	0x40003400

08004a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e267      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d075      	beq.n	8004b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a96:	4b88      	ldr	r3, [pc, #544]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 030c 	and.w	r3, r3, #12
 8004a9e:	2b04      	cmp	r3, #4
 8004aa0:	d00c      	beq.n	8004abc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aa2:	4b85      	ldr	r3, [pc, #532]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d112      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aae:	4b82      	ldr	r3, [pc, #520]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004aba:	d10b      	bne.n	8004ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004abc:	4b7e      	ldr	r3, [pc, #504]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d05b      	beq.n	8004b80 <HAL_RCC_OscConfig+0x108>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d157      	bne.n	8004b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e242      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004adc:	d106      	bne.n	8004aec <HAL_RCC_OscConfig+0x74>
 8004ade:	4b76      	ldr	r3, [pc, #472]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a75      	ldr	r2, [pc, #468]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e01d      	b.n	8004b28 <HAL_RCC_OscConfig+0xb0>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x98>
 8004af6:	4b70      	ldr	r3, [pc, #448]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a6f      	ldr	r2, [pc, #444]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004b00:	6013      	str	r3, [r2, #0]
 8004b02:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a6c      	ldr	r2, [pc, #432]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e00b      	b.n	8004b28 <HAL_RCC_OscConfig+0xb0>
 8004b10:	4b69      	ldr	r3, [pc, #420]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a68      	ldr	r2, [pc, #416]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b1a:	6013      	str	r3, [r2, #0]
 8004b1c:	4b66      	ldr	r3, [pc, #408]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a65      	ldr	r2, [pc, #404]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d013      	beq.n	8004b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b30:	f7fc fd92 	bl	8001658 <HAL_GetTick>
 8004b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b36:	e008      	b.n	8004b4a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b38:	f7fc fd8e 	bl	8001658 <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	2b64      	cmp	r3, #100	@ 0x64
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e207      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b4a:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d0f0      	beq.n	8004b38 <HAL_RCC_OscConfig+0xc0>
 8004b56:	e014      	b.n	8004b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b58:	f7fc fd7e 	bl	8001658 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5e:	e008      	b.n	8004b72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b60:	f7fc fd7a 	bl	8001658 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b64      	cmp	r3, #100	@ 0x64
 8004b6c:	d901      	bls.n	8004b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e1f3      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b72:	4b51      	ldr	r3, [pc, #324]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d1f0      	bne.n	8004b60 <HAL_RCC_OscConfig+0xe8>
 8004b7e:	e000      	b.n	8004b82 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d063      	beq.n	8004c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b8e:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 030c 	and.w	r3, r3, #12
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00b      	beq.n	8004bb2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b9a:	4b47      	ldr	r3, [pc, #284]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ba2:	2b08      	cmp	r3, #8
 8004ba4:	d11c      	bne.n	8004be0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba6:	4b44      	ldr	r3, [pc, #272]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d116      	bne.n	8004be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bb2:	4b41      	ldr	r3, [pc, #260]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d005      	beq.n	8004bca <HAL_RCC_OscConfig+0x152>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d001      	beq.n	8004bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e1c7      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bca:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	4937      	ldr	r1, [pc, #220]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bde:	e03a      	b.n	8004c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	68db      	ldr	r3, [r3, #12]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be8:	4b34      	ldr	r3, [pc, #208]	@ (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004bea:	2201      	movs	r2, #1
 8004bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fc fd33 	bl	8001658 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf4:	e008      	b.n	8004c08 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf6:	f7fc fd2f 	bl	8001658 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d901      	bls.n	8004c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e1a8      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c08:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f003 0302 	and.w	r3, r3, #2
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d0f0      	beq.n	8004bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c14:	4b28      	ldr	r3, [pc, #160]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	00db      	lsls	r3, r3, #3
 8004c22:	4925      	ldr	r1, [pc, #148]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	600b      	str	r3, [r1, #0]
 8004c28:	e015      	b.n	8004c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c2a:	4b24      	ldr	r3, [pc, #144]	@ (8004cbc <HAL_RCC_OscConfig+0x244>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c30:	f7fc fd12 	bl	8001658 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c38:	f7fc fd0e 	bl	8001658 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b02      	cmp	r3, #2
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e187      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c4a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d036      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	695b      	ldr	r3, [r3, #20]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d016      	beq.n	8004c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c6a:	4b15      	ldr	r3, [pc, #84]	@ (8004cc0 <HAL_RCC_OscConfig+0x248>)
 8004c6c:	2201      	movs	r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c70:	f7fc fcf2 	bl	8001658 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c78:	f7fc fcee 	bl	8001658 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e167      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb8 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0f0      	beq.n	8004c78 <HAL_RCC_OscConfig+0x200>
 8004c96:	e01b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c98:	4b09      	ldr	r3, [pc, #36]	@ (8004cc0 <HAL_RCC_OscConfig+0x248>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9e:	f7fc fcdb 	bl	8001658 <HAL_GetTick>
 8004ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca4:	e00e      	b.n	8004cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca6:	f7fc fcd7 	bl	8001658 <HAL_GetTick>
 8004caa:	4602      	mov	r2, r0
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	1ad3      	subs	r3, r2, r3
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d907      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e150      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
 8004cb8:	40023800 	.word	0x40023800
 8004cbc:	42470000 	.word	0x42470000
 8004cc0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc4:	4b88      	ldr	r3, [pc, #544]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1ea      	bne.n	8004ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 8097 	beq.w	8004e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce2:	4b81      	ldr	r3, [pc, #516]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	4b7d      	ldr	r3, [pc, #500]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf6:	4a7c      	ldr	r2, [pc, #496]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cfe:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b77      	ldr	r3, [pc, #476]	@ (8004eec <HAL_RCC_OscConfig+0x474>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d118      	bne.n	8004d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1a:	4b74      	ldr	r3, [pc, #464]	@ (8004eec <HAL_RCC_OscConfig+0x474>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a73      	ldr	r2, [pc, #460]	@ (8004eec <HAL_RCC_OscConfig+0x474>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d26:	f7fc fc97 	bl	8001658 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	e008      	b.n	8004d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2e:	f7fc fc93 	bl	8001658 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	2b02      	cmp	r3, #2
 8004d3a:	d901      	bls.n	8004d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e10c      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d40:	4b6a      	ldr	r3, [pc, #424]	@ (8004eec <HAL_RCC_OscConfig+0x474>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d0f0      	beq.n	8004d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d106      	bne.n	8004d62 <HAL_RCC_OscConfig+0x2ea>
 8004d54:	4b64      	ldr	r3, [pc, #400]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	4a63      	ldr	r2, [pc, #396]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d60:	e01c      	b.n	8004d9c <HAL_RCC_OscConfig+0x324>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	2b05      	cmp	r3, #5
 8004d68:	d10c      	bne.n	8004d84 <HAL_RCC_OscConfig+0x30c>
 8004d6a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d70:	f043 0304 	orr.w	r3, r3, #4
 8004d74:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d76:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d7a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d7c:	f043 0301 	orr.w	r3, r3, #1
 8004d80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d82:	e00b      	b.n	8004d9c <HAL_RCC_OscConfig+0x324>
 8004d84:	4b58      	ldr	r3, [pc, #352]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d88:	4a57      	ldr	r2, [pc, #348]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d90:	4b55      	ldr	r3, [pc, #340]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d94:	4a54      	ldr	r2, [pc, #336]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004d96:	f023 0304 	bic.w	r3, r3, #4
 8004d9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d015      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da4:	f7fc fc58 	bl	8001658 <HAL_GetTick>
 8004da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004daa:	e00a      	b.n	8004dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dac:	f7fc fc54 	bl	8001658 <HAL_GetTick>
 8004db0:	4602      	mov	r2, r0
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	1ad3      	subs	r3, r2, r3
 8004db6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0cb      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dc2:	4b49      	ldr	r3, [pc, #292]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d0ee      	beq.n	8004dac <HAL_RCC_OscConfig+0x334>
 8004dce:	e014      	b.n	8004dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dd0:	f7fc fc42 	bl	8001658 <HAL_GetTick>
 8004dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd6:	e00a      	b.n	8004dee <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd8:	f7fc fc3e 	bl	8001658 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e0b5      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dee:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004df0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004df2:	f003 0302 	and.w	r3, r3, #2
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1ee      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004dfa:	7dfb      	ldrb	r3, [r7, #23]
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d105      	bne.n	8004e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e00:	4b39      	ldr	r3, [pc, #228]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e04:	4a38      	ldr	r2, [pc, #224]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004e06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e0a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80a1 	beq.w	8004f58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e16:	4b34      	ldr	r3, [pc, #208]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d05c      	beq.n	8004edc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	2b02      	cmp	r3, #2
 8004e28:	d141      	bne.n	8004eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e2a:	4b31      	ldr	r3, [pc, #196]	@ (8004ef0 <HAL_RCC_OscConfig+0x478>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e30:	f7fc fc12 	bl	8001658 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e36:	e008      	b.n	8004e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e38:	f7fc fc0e 	bl	8001658 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d901      	bls.n	8004e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e46:	2303      	movs	r3, #3
 8004e48:	e087      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e4a:	4b27      	ldr	r3, [pc, #156]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f0      	bne.n	8004e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	69da      	ldr	r2, [r3, #28]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	019b      	lsls	r3, r3, #6
 8004e66:	431a      	orrs	r2, r3
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	085b      	lsrs	r3, r3, #1
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	041b      	lsls	r3, r3, #16
 8004e72:	431a      	orrs	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	061b      	lsls	r3, r3, #24
 8004e7a:	491b      	ldr	r1, [pc, #108]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e80:	4b1b      	ldr	r3, [pc, #108]	@ (8004ef0 <HAL_RCC_OscConfig+0x478>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e86:	f7fc fbe7 	bl	8001658 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8e:	f7fc fbe3 	bl	8001658 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e05c      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ea0:	4b11      	ldr	r3, [pc, #68]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x416>
 8004eac:	e054      	b.n	8004f58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eae:	4b10      	ldr	r3, [pc, #64]	@ (8004ef0 <HAL_RCC_OscConfig+0x478>)
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb4:	f7fc fbd0 	bl	8001658 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eba:	e008      	b.n	8004ece <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebc:	f7fc fbcc 	bl	8001658 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d901      	bls.n	8004ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e045      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ece:	4b06      	ldr	r3, [pc, #24]	@ (8004ee8 <HAL_RCC_OscConfig+0x470>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f0      	bne.n	8004ebc <HAL_RCC_OscConfig+0x444>
 8004eda:	e03d      	b.n	8004f58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d107      	bne.n	8004ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e038      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
 8004ee8:	40023800 	.word	0x40023800
 8004eec:	40007000 	.word	0x40007000
 8004ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ef4:	4b1b      	ldr	r3, [pc, #108]	@ (8004f64 <HAL_RCC_OscConfig+0x4ec>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	d028      	beq.n	8004f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d121      	bne.n	8004f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	d11a      	bne.n	8004f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d111      	bne.n	8004f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f3a:	085b      	lsrs	r3, r3, #1
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d107      	bne.n	8004f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d001      	beq.n	8004f58 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f58:	2300      	movs	r3, #0
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	3718      	adds	r7, #24
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	40023800 	.word	0x40023800

08004f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e0cc      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f7c:	4b68      	ldr	r3, [pc, #416]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	683a      	ldr	r2, [r7, #0]
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d90c      	bls.n	8004fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f8a:	4b65      	ldr	r3, [pc, #404]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8004f8c:	683a      	ldr	r2, [r7, #0]
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f92:	4b63      	ldr	r3, [pc, #396]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	683a      	ldr	r2, [r7, #0]
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d001      	beq.n	8004fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	e0b8      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d020      	beq.n	8004ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d005      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fbc:	4b59      	ldr	r3, [pc, #356]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	4a58      	ldr	r2, [pc, #352]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fc6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0308 	and.w	r3, r3, #8
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d005      	beq.n	8004fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd4:	4b53      	ldr	r3, [pc, #332]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	4a52      	ldr	r2, [pc, #328]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fda:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fe0:	4b50      	ldr	r3, [pc, #320]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	494d      	ldr	r1, [pc, #308]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d044      	beq.n	8005088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d107      	bne.n	8005016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005006:	4b47      	ldr	r3, [pc, #284]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d119      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	e07f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	2b02      	cmp	r3, #2
 800501c:	d003      	beq.n	8005026 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005022:	2b03      	cmp	r3, #3
 8005024:	d107      	bne.n	8005036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005026:	4b3f      	ldr	r3, [pc, #252]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e06f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005036:	4b3b      	ldr	r3, [pc, #236]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0302 	and.w	r3, r3, #2
 800503e:	2b00      	cmp	r3, #0
 8005040:	d101      	bne.n	8005046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e067      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005046:	4b37      	ldr	r3, [pc, #220]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	f023 0203 	bic.w	r2, r3, #3
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4934      	ldr	r1, [pc, #208]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	4313      	orrs	r3, r2
 8005056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005058:	f7fc fafe 	bl	8001658 <HAL_GetTick>
 800505c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505e:	e00a      	b.n	8005076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005060:	f7fc fafa 	bl	8001658 <HAL_GetTick>
 8005064:	4602      	mov	r2, r0
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506e:	4293      	cmp	r3, r2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e04f      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005076:	4b2b      	ldr	r3, [pc, #172]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f003 020c 	and.w	r2, r3, #12
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	429a      	cmp	r2, r3
 8005086:	d1eb      	bne.n	8005060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005088:	4b25      	ldr	r3, [pc, #148]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0307 	and.w	r3, r3, #7
 8005090:	683a      	ldr	r2, [r7, #0]
 8005092:	429a      	cmp	r2, r3
 8005094:	d20c      	bcs.n	80050b0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005096:	4b22      	ldr	r3, [pc, #136]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 8005098:	683a      	ldr	r2, [r7, #0]
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509e:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <HAL_RCC_ClockConfig+0x1b8>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	683a      	ldr	r2, [r7, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d001      	beq.n	80050b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050ac:	2301      	movs	r3, #1
 80050ae:	e032      	b.n	8005116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d008      	beq.n	80050ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050bc:	4b19      	ldr	r3, [pc, #100]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050be:	689b      	ldr	r3, [r3, #8]
 80050c0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	4916      	ldr	r1, [pc, #88]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	4313      	orrs	r3, r2
 80050cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d009      	beq.n	80050ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050da:	4b12      	ldr	r3, [pc, #72]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	00db      	lsls	r3, r3, #3
 80050e8:	490e      	ldr	r1, [pc, #56]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	4313      	orrs	r3, r2
 80050ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ee:	f000 f821 	bl	8005134 <HAL_RCC_GetSysClockFreq>
 80050f2:	4602      	mov	r2, r0
 80050f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005124 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	091b      	lsrs	r3, r3, #4
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	490a      	ldr	r1, [pc, #40]	@ (8005128 <HAL_RCC_ClockConfig+0x1c0>)
 8005100:	5ccb      	ldrb	r3, [r1, r3]
 8005102:	fa22 f303 	lsr.w	r3, r2, r3
 8005106:	4a09      	ldr	r2, [pc, #36]	@ (800512c <HAL_RCC_ClockConfig+0x1c4>)
 8005108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800510a:	4b09      	ldr	r3, [pc, #36]	@ (8005130 <HAL_RCC_ClockConfig+0x1c8>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4618      	mov	r0, r3
 8005110:	f7fc fa5e 	bl	80015d0 <HAL_InitTick>

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	40023c00 	.word	0x40023c00
 8005124:	40023800 	.word	0x40023800
 8005128:	0800aad4 	.word	0x0800aad4
 800512c:	20000000 	.word	0x20000000
 8005130:	20000004 	.word	0x20000004

08005134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005138:	b094      	sub	sp, #80	@ 0x50
 800513a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800514c:	4b79      	ldr	r3, [pc, #484]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x200>)
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b08      	cmp	r3, #8
 8005156:	d00d      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x40>
 8005158:	2b08      	cmp	r3, #8
 800515a:	f200 80e1 	bhi.w	8005320 <HAL_RCC_GetSysClockFreq+0x1ec>
 800515e:	2b00      	cmp	r3, #0
 8005160:	d002      	beq.n	8005168 <HAL_RCC_GetSysClockFreq+0x34>
 8005162:	2b04      	cmp	r3, #4
 8005164:	d003      	beq.n	800516e <HAL_RCC_GetSysClockFreq+0x3a>
 8005166:	e0db      	b.n	8005320 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b73      	ldr	r3, [pc, #460]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x204>)
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800516c:	e0db      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800516e:	4b73      	ldr	r3, [pc, #460]	@ (800533c <HAL_RCC_GetSysClockFreq+0x208>)
 8005170:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005172:	e0d8      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005174:	4b6f      	ldr	r3, [pc, #444]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x200>)
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800517c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800517e:	4b6d      	ldr	r3, [pc, #436]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x200>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d063      	beq.n	8005252 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800518a:	4b6a      	ldr	r3, [pc, #424]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x200>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	099b      	lsrs	r3, r3, #6
 8005190:	2200      	movs	r2, #0
 8005192:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005194:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005196:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005198:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800519c:	633b      	str	r3, [r7, #48]	@ 0x30
 800519e:	2300      	movs	r3, #0
 80051a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051a2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051a6:	4622      	mov	r2, r4
 80051a8:	462b      	mov	r3, r5
 80051aa:	f04f 0000 	mov.w	r0, #0
 80051ae:	f04f 0100 	mov.w	r1, #0
 80051b2:	0159      	lsls	r1, r3, #5
 80051b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b8:	0150      	lsls	r0, r2, #5
 80051ba:	4602      	mov	r2, r0
 80051bc:	460b      	mov	r3, r1
 80051be:	4621      	mov	r1, r4
 80051c0:	1a51      	subs	r1, r2, r1
 80051c2:	6139      	str	r1, [r7, #16]
 80051c4:	4629      	mov	r1, r5
 80051c6:	eb63 0301 	sbc.w	r3, r3, r1
 80051ca:	617b      	str	r3, [r7, #20]
 80051cc:	f04f 0200 	mov.w	r2, #0
 80051d0:	f04f 0300 	mov.w	r3, #0
 80051d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d8:	4659      	mov	r1, fp
 80051da:	018b      	lsls	r3, r1, #6
 80051dc:	4651      	mov	r1, sl
 80051de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051e2:	4651      	mov	r1, sl
 80051e4:	018a      	lsls	r2, r1, #6
 80051e6:	4651      	mov	r1, sl
 80051e8:	ebb2 0801 	subs.w	r8, r2, r1
 80051ec:	4659      	mov	r1, fp
 80051ee:	eb63 0901 	sbc.w	r9, r3, r1
 80051f2:	f04f 0200 	mov.w	r2, #0
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005202:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005206:	4690      	mov	r8, r2
 8005208:	4699      	mov	r9, r3
 800520a:	4623      	mov	r3, r4
 800520c:	eb18 0303 	adds.w	r3, r8, r3
 8005210:	60bb      	str	r3, [r7, #8]
 8005212:	462b      	mov	r3, r5
 8005214:	eb49 0303 	adc.w	r3, r9, r3
 8005218:	60fb      	str	r3, [r7, #12]
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005226:	4629      	mov	r1, r5
 8005228:	024b      	lsls	r3, r1, #9
 800522a:	4621      	mov	r1, r4
 800522c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005230:	4621      	mov	r1, r4
 8005232:	024a      	lsls	r2, r1, #9
 8005234:	4610      	mov	r0, r2
 8005236:	4619      	mov	r1, r3
 8005238:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800523a:	2200      	movs	r2, #0
 800523c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800523e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005240:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005244:	f7fb f814 	bl	8000270 <__aeabi_uldivmod>
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4613      	mov	r3, r2
 800524e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005250:	e058      	b.n	8005304 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005252:	4b38      	ldr	r3, [pc, #224]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x200>)
 8005254:	685b      	ldr	r3, [r3, #4]
 8005256:	099b      	lsrs	r3, r3, #6
 8005258:	2200      	movs	r2, #0
 800525a:	4618      	mov	r0, r3
 800525c:	4611      	mov	r1, r2
 800525e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005262:	623b      	str	r3, [r7, #32]
 8005264:	2300      	movs	r3, #0
 8005266:	627b      	str	r3, [r7, #36]	@ 0x24
 8005268:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800526c:	4642      	mov	r2, r8
 800526e:	464b      	mov	r3, r9
 8005270:	f04f 0000 	mov.w	r0, #0
 8005274:	f04f 0100 	mov.w	r1, #0
 8005278:	0159      	lsls	r1, r3, #5
 800527a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800527e:	0150      	lsls	r0, r2, #5
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4641      	mov	r1, r8
 8005286:	ebb2 0a01 	subs.w	sl, r2, r1
 800528a:	4649      	mov	r1, r9
 800528c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800529c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80052a0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052a4:	ebb2 040a 	subs.w	r4, r2, sl
 80052a8:	eb63 050b 	sbc.w	r5, r3, fp
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	f04f 0300 	mov.w	r3, #0
 80052b4:	00eb      	lsls	r3, r5, #3
 80052b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052ba:	00e2      	lsls	r2, r4, #3
 80052bc:	4614      	mov	r4, r2
 80052be:	461d      	mov	r5, r3
 80052c0:	4643      	mov	r3, r8
 80052c2:	18e3      	adds	r3, r4, r3
 80052c4:	603b      	str	r3, [r7, #0]
 80052c6:	464b      	mov	r3, r9
 80052c8:	eb45 0303 	adc.w	r3, r5, r3
 80052cc:	607b      	str	r3, [r7, #4]
 80052ce:	f04f 0200 	mov.w	r2, #0
 80052d2:	f04f 0300 	mov.w	r3, #0
 80052d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052da:	4629      	mov	r1, r5
 80052dc:	028b      	lsls	r3, r1, #10
 80052de:	4621      	mov	r1, r4
 80052e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052e4:	4621      	mov	r1, r4
 80052e6:	028a      	lsls	r2, r1, #10
 80052e8:	4610      	mov	r0, r2
 80052ea:	4619      	mov	r1, r3
 80052ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ee:	2200      	movs	r2, #0
 80052f0:	61bb      	str	r3, [r7, #24]
 80052f2:	61fa      	str	r2, [r7, #28]
 80052f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f8:	f7fa ffba 	bl	8000270 <__aeabi_uldivmod>
 80052fc:	4602      	mov	r2, r0
 80052fe:	460b      	mov	r3, r1
 8005300:	4613      	mov	r3, r2
 8005302:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005304:	4b0b      	ldr	r3, [pc, #44]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x200>)
 8005306:	685b      	ldr	r3, [r3, #4]
 8005308:	0c1b      	lsrs	r3, r3, #16
 800530a:	f003 0303 	and.w	r3, r3, #3
 800530e:	3301      	adds	r3, #1
 8005310:	005b      	lsls	r3, r3, #1
 8005312:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005314:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005316:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005318:	fbb2 f3f3 	udiv	r3, r2, r3
 800531c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800531e:	e002      	b.n	8005326 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005320:	4b05      	ldr	r3, [pc, #20]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x204>)
 8005322:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005324:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005326:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005328:	4618      	mov	r0, r3
 800532a:	3750      	adds	r7, #80	@ 0x50
 800532c:	46bd      	mov	sp, r7
 800532e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800
 8005338:	00f42400 	.word	0x00f42400
 800533c:	007a1200 	.word	0x007a1200

08005340 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005340:	b480      	push	{r7}
 8005342:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005344:	4b03      	ldr	r3, [pc, #12]	@ (8005354 <HAL_RCC_GetHCLKFreq+0x14>)
 8005346:	681b      	ldr	r3, [r3, #0]
}
 8005348:	4618      	mov	r0, r3
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	20000000 	.word	0x20000000

08005358 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800535c:	f7ff fff0 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8005360:	4602      	mov	r2, r0
 8005362:	4b05      	ldr	r3, [pc, #20]	@ (8005378 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	0a9b      	lsrs	r3, r3, #10
 8005368:	f003 0307 	and.w	r3, r3, #7
 800536c:	4903      	ldr	r1, [pc, #12]	@ (800537c <HAL_RCC_GetPCLK1Freq+0x24>)
 800536e:	5ccb      	ldrb	r3, [r1, r3]
 8005370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005374:	4618      	mov	r0, r3
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40023800 	.word	0x40023800
 800537c:	0800aae4 	.word	0x0800aae4

08005380 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005384:	f7ff ffdc 	bl	8005340 <HAL_RCC_GetHCLKFreq>
 8005388:	4602      	mov	r2, r0
 800538a:	4b05      	ldr	r3, [pc, #20]	@ (80053a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800538c:	689b      	ldr	r3, [r3, #8]
 800538e:	0b5b      	lsrs	r3, r3, #13
 8005390:	f003 0307 	and.w	r3, r3, #7
 8005394:	4903      	ldr	r1, [pc, #12]	@ (80053a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005396:	5ccb      	ldrb	r3, [r1, r3]
 8005398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800539c:	4618      	mov	r0, r3
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	40023800 	.word	0x40023800
 80053a4:	0800aae4 	.word	0x0800aae4

080053a8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053b0:	2300      	movs	r3, #0
 80053b2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053b4:	2300      	movs	r3, #0
 80053b6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0301 	and.w	r3, r3, #1
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d105      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d035      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053d0:	4b62      	ldr	r3, [pc, #392]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053d6:	f7fc f93f 	bl	8001658 <HAL_GetTick>
 80053da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053dc:	e008      	b.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053de:	f7fc f93b 	bl	8001658 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d901      	bls.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053ec:	2303      	movs	r3, #3
 80053ee:	e0b0      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f0:	4b5b      	ldr	r3, [pc, #364]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f0      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	019a      	lsls	r2, r3, #6
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	071b      	lsls	r3, r3, #28
 8005408:	4955      	ldr	r1, [pc, #340]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800540a:	4313      	orrs	r3, r2
 800540c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005410:	4b52      	ldr	r3, [pc, #328]	@ (800555c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005412:	2201      	movs	r2, #1
 8005414:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005416:	f7fc f91f 	bl	8001658 <HAL_GetTick>
 800541a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800541c:	e008      	b.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800541e:	f7fc f91b 	bl	8001658 <HAL_GetTick>
 8005422:	4602      	mov	r2, r0
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	1ad3      	subs	r3, r2, r3
 8005428:	2b02      	cmp	r3, #2
 800542a:	d901      	bls.n	8005430 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e090      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005430:	4b4b      	ldr	r3, [pc, #300]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005438:	2b00      	cmp	r3, #0
 800543a:	d0f0      	beq.n	800541e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0302 	and.w	r3, r3, #2
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8083 	beq.w	8005550 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	4b44      	ldr	r3, [pc, #272]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005452:	4a43      	ldr	r2, [pc, #268]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005458:	6413      	str	r3, [r2, #64]	@ 0x40
 800545a:	4b41      	ldr	r3, [pc, #260]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800545c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800545e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005466:	4b3f      	ldr	r3, [pc, #252]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a3e      	ldr	r2, [pc, #248]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800546c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005470:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005472:	f7fc f8f1 	bl	8001658 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005478:	e008      	b.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800547a:	f7fc f8ed 	bl	8001658 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e062      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800548c:	4b35      	ldr	r3, [pc, #212]	@ (8005564 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005494:	2b00      	cmp	r3, #0
 8005496:	d0f0      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005498:	4b31      	ldr	r3, [pc, #196]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800549a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800549c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054a0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80054a2:	693b      	ldr	r3, [r7, #16]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d02f      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d028      	beq.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80054b6:	4b2a      	ldr	r3, [pc, #168]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80054be:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80054c0:	4b29      	ldr	r3, [pc, #164]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054c2:	2201      	movs	r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80054c6:	4b28      	ldr	r3, [pc, #160]	@ (8005568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80054c8:	2200      	movs	r2, #0
 80054ca:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80054cc:	4a24      	ldr	r2, [pc, #144]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054ce:	693b      	ldr	r3, [r7, #16]
 80054d0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80054d2:	4b23      	ldr	r3, [pc, #140]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d6:	f003 0301 	and.w	r3, r3, #1
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d114      	bne.n	8005508 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80054de:	f7fc f8bb 	bl	8001658 <HAL_GetTick>
 80054e2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054e4:	e00a      	b.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054e6:	f7fc f8b7 	bl	8001658 <HAL_GetTick>
 80054ea:	4602      	mov	r2, r0
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	1ad3      	subs	r3, r2, r3
 80054f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d901      	bls.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e02a      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80054fc:	4b18      	ldr	r3, [pc, #96]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80054fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d0ee      	beq.n	80054e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005510:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005514:	d10d      	bne.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005516:	4b12      	ldr	r3, [pc, #72]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005526:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800552a:	490d      	ldr	r1, [pc, #52]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800552c:	4313      	orrs	r3, r2
 800552e:	608b      	str	r3, [r1, #8]
 8005530:	e005      	b.n	800553e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005532:	4b0b      	ldr	r3, [pc, #44]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	4a0a      	ldr	r2, [pc, #40]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005538:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800553c:	6093      	str	r3, [r2, #8]
 800553e:	4b08      	ldr	r3, [pc, #32]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005540:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800554a:	4905      	ldr	r1, [pc, #20]	@ (8005560 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800554c:	4313      	orrs	r3, r2
 800554e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	42470068 	.word	0x42470068
 8005560:	40023800 	.word	0x40023800
 8005564:	40007000 	.word	0x40007000
 8005568:	42470e40 	.word	0x42470e40

0800556c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005580:	2300      	movs	r3, #0
 8005582:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2b01      	cmp	r3, #1
 8005588:	d13f      	bne.n	800560a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800558a:	4b24      	ldr	r3, [pc, #144]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005592:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055a0:	d12f      	bne.n	8005602 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80055a2:	4b1f      	ldr	r3, [pc, #124]	@ (8005620 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80055a4:	617b      	str	r3, [r7, #20]
          break;
 80055a6:	e02f      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80055a8:	4b1c      	ldr	r3, [pc, #112]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055aa:	685b      	ldr	r3, [r3, #4]
 80055ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055b4:	d108      	bne.n	80055c8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055b6:	4b19      	ldr	r3, [pc, #100]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055be:	4a19      	ldr	r2, [pc, #100]	@ (8005624 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80055c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	e007      	b.n	80055d8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80055c8:	4b14      	ldr	r3, [pc, #80]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055d0:	4a15      	ldr	r2, [pc, #84]	@ (8005628 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80055d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055d6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80055d8:	4b10      	ldr	r3, [pc, #64]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055de:	099b      	lsrs	r3, r3, #6
 80055e0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	fb02 f303 	mul.w	r3, r2, r3
 80055ea:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80055ec:	4b0b      	ldr	r3, [pc, #44]	@ (800561c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80055ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80055f2:	0f1b      	lsrs	r3, r3, #28
 80055f4:	f003 0307 	and.w	r3, r3, #7
 80055f8:	68ba      	ldr	r2, [r7, #8]
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	617b      	str	r3, [r7, #20]
          break;
 8005600:	e002      	b.n	8005608 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	617b      	str	r3, [r7, #20]
          break;
 8005606:	bf00      	nop
        }
      }
      break;
 8005608:	e000      	b.n	800560c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800560a:	bf00      	nop
    }
  }
  return frequency;
 800560c:	697b      	ldr	r3, [r7, #20]
}
 800560e:	4618      	mov	r0, r3
 8005610:	371c      	adds	r7, #28
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr
 800561a:	bf00      	nop
 800561c:	40023800 	.word	0x40023800
 8005620:	00bb8000 	.word	0x00bb8000
 8005624:	007a1200 	.word	0x007a1200
 8005628:	00f42400 	.word	0x00f42400

0800562c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b082      	sub	sp, #8
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e01c      	b.n	8005678 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	795b      	ldrb	r3, [r3, #5]
 8005642:	b2db      	uxtb	r3, r3
 8005644:	2b00      	cmp	r3, #0
 8005646:	d105      	bne.n	8005654 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f7fb fdec 	bl	800122c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2202      	movs	r2, #2
 8005658:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f042 0204 	orr.w	r2, r2, #4
 8005668:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2201      	movs	r2, #1
 800566e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005676:	2300      	movs	r3, #0
}
 8005678:	4618      	mov	r0, r3
 800567a:	3708      	adds	r7, #8
 800567c:	46bd      	mov	sp, r7
 800567e:	bd80      	pop	{r7, pc}

08005680 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b082      	sub	sp, #8
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d101      	bne.n	8005692 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e07b      	b.n	800578a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80056a2:	d009      	beq.n	80056b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	61da      	str	r2, [r3, #28]
 80056aa:	e005      	b.n	80056b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2200      	movs	r2, #0
 80056b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fdcc 	bl	8001270 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2202      	movs	r2, #2
 80056dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80056ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005700:	431a      	orrs	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	68db      	ldr	r3, [r3, #12]
 8005706:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	695b      	ldr	r3, [r3, #20]
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	431a      	orrs	r2, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005728:	431a      	orrs	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	69db      	ldr	r3, [r3, #28]
 800572e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005732:	431a      	orrs	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800573c:	ea42 0103 	orr.w	r1, r2, r3
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005744:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	430a      	orrs	r2, r1
 800574e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	0c1b      	lsrs	r3, r3, #16
 8005756:	f003 0104 	and.w	r1, r3, #4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800575e:	f003 0210 	and.w	r2, r3, #16
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	69da      	ldr	r2, [r3, #28]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005778:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005788:	2300      	movs	r3, #0
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}

08005792 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005792:	b580      	push	{r7, lr}
 8005794:	b082      	sub	sp, #8
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d101      	bne.n	80057a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	e042      	b.n	800582a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f7fb fda1 	bl	8001300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2224      	movs	r2, #36	@ 0x24
 80057c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	68da      	ldr	r2, [r3, #12]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80057d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f972 	bl	8005ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80057ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80057fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	68da      	ldr	r2, [r3, #12]
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800580a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2220      	movs	r2, #32
 8005816:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2220      	movs	r2, #32
 800581e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3708      	adds	r7, #8
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08a      	sub	sp, #40	@ 0x28
 8005836:	af02      	add	r7, sp, #8
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005842:	2300      	movs	r3, #0
 8005844:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800584c:	b2db      	uxtb	r3, r3
 800584e:	2b20      	cmp	r3, #32
 8005850:	d175      	bne.n	800593e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d002      	beq.n	800585e <HAL_UART_Transmit+0x2c>
 8005858:	88fb      	ldrh	r3, [r7, #6]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e06e      	b.n	8005940 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2200      	movs	r2, #0
 8005866:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2221      	movs	r2, #33	@ 0x21
 800586c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005870:	f7fb fef2 	bl	8001658 <HAL_GetTick>
 8005874:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	88fa      	ldrh	r2, [r7, #6]
 800587a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	88fa      	ldrh	r2, [r7, #6]
 8005880:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800588a:	d108      	bne.n	800589e <HAL_UART_Transmit+0x6c>
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d104      	bne.n	800589e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005894:	2300      	movs	r3, #0
 8005896:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	61bb      	str	r3, [r7, #24]
 800589c:	e003      	b.n	80058a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058a2:	2300      	movs	r3, #0
 80058a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058a6:	e02e      	b.n	8005906 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	2200      	movs	r2, #0
 80058b0:	2180      	movs	r1, #128	@ 0x80
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f848 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d005      	beq.n	80058ca <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2220      	movs	r2, #32
 80058c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80058c6:	2303      	movs	r3, #3
 80058c8:	e03a      	b.n	8005940 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10b      	bne.n	80058e8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058de:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	3302      	adds	r3, #2
 80058e4:	61bb      	str	r3, [r7, #24]
 80058e6:	e007      	b.n	80058f8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	781a      	ldrb	r2, [r3, #0]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80058f2:	69fb      	ldr	r3, [r7, #28]
 80058f4:	3301      	adds	r3, #1
 80058f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	3b01      	subs	r3, #1
 8005900:	b29a      	uxth	r2, r3
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d1cb      	bne.n	80058a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	9300      	str	r3, [sp, #0]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	2200      	movs	r2, #0
 8005918:	2140      	movs	r1, #64	@ 0x40
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	f000 f814 	bl	8005948 <UART_WaitOnFlagUntilTimeout>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d005      	beq.n	8005932 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2220      	movs	r2, #32
 800592a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e006      	b.n	8005940 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	e000      	b.n	8005940 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800593e:	2302      	movs	r3, #2
  }
}
 8005940:	4618      	mov	r0, r3
 8005942:	3720      	adds	r7, #32
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}

08005948 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	60f8      	str	r0, [r7, #12]
 8005950:	60b9      	str	r1, [r7, #8]
 8005952:	603b      	str	r3, [r7, #0]
 8005954:	4613      	mov	r3, r2
 8005956:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005958:	e03b      	b.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800595a:	6a3b      	ldr	r3, [r7, #32]
 800595c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005960:	d037      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005962:	f7fb fe79 	bl	8001658 <HAL_GetTick>
 8005966:	4602      	mov	r2, r0
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	1ad3      	subs	r3, r2, r3
 800596c:	6a3a      	ldr	r2, [r7, #32]
 800596e:	429a      	cmp	r2, r3
 8005970:	d302      	bcc.n	8005978 <UART_WaitOnFlagUntilTimeout+0x30>
 8005972:	6a3b      	ldr	r3, [r7, #32]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d101      	bne.n	800597c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005978:	2303      	movs	r3, #3
 800597a:	e03a      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	68db      	ldr	r3, [r3, #12]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b00      	cmp	r3, #0
 8005988:	d023      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b80      	cmp	r3, #128	@ 0x80
 800598e:	d020      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b40      	cmp	r3, #64	@ 0x40
 8005994:	d01d      	beq.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f003 0308 	and.w	r3, r3, #8
 80059a0:	2b08      	cmp	r3, #8
 80059a2:	d116      	bne.n	80059d2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80059a4:	2300      	movs	r3, #0
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	617b      	str	r3, [r7, #20]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f000 f81d 	bl	80059fa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2208      	movs	r2, #8
 80059c4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	e00f      	b.n	80059f2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4013      	ands	r3, r2
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	429a      	cmp	r2, r3
 80059e0:	bf0c      	ite	eq
 80059e2:	2301      	moveq	r3, #1
 80059e4:	2300      	movne	r3, #0
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	79fb      	ldrb	r3, [r7, #7]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d0b4      	beq.n	800595a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3718      	adds	r7, #24
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059fa:	b480      	push	{r7}
 80059fc:	b095      	sub	sp, #84	@ 0x54
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a0c:	e853 3f00 	ldrex	r3, [r3]
 8005a10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	330c      	adds	r3, #12
 8005a20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a22:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e5      	bne.n	8005a02 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6a3b      	ldr	r3, [r7, #32]
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	f023 0301 	bic.w	r3, r3, #1
 8005a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	3314      	adds	r3, #20
 8005a54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a56:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a58:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a5e:	e841 2300 	strex	r3, r2, [r1]
 8005a62:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d1e5      	bne.n	8005a36 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d119      	bne.n	8005aa6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	330c      	adds	r3, #12
 8005a78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	e853 3f00 	ldrex	r3, [r3]
 8005a80:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	f023 0310 	bic.w	r3, r3, #16
 8005a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a92:	61ba      	str	r2, [r7, #24]
 8005a94:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a96:	6979      	ldr	r1, [r7, #20]
 8005a98:	69ba      	ldr	r2, [r7, #24]
 8005a9a:	e841 2300 	strex	r3, r2, [r1]
 8005a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d1e5      	bne.n	8005a72 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2220      	movs	r2, #32
 8005aaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005ab4:	bf00      	nop
 8005ab6:	3754      	adds	r7, #84	@ 0x54
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ac4:	b0c0      	sub	sp, #256	@ 0x100
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	691b      	ldr	r3, [r3, #16]
 8005ad4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ad8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005adc:	68d9      	ldr	r1, [r3, #12]
 8005ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	ea40 0301 	orr.w	r3, r0, r1
 8005ae8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005aee:	689a      	ldr	r2, [r3, #8]
 8005af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005af4:	691b      	ldr	r3, [r3, #16]
 8005af6:	431a      	orrs	r2, r3
 8005af8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005afc:	695b      	ldr	r3, [r3, #20]
 8005afe:	431a      	orrs	r2, r3
 8005b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b18:	f021 010c 	bic.w	r1, r1, #12
 8005b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b26:	430b      	orrs	r3, r1
 8005b28:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b3a:	6999      	ldr	r1, [r3, #24]
 8005b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	ea40 0301 	orr.w	r3, r0, r1
 8005b46:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b8f      	ldr	r3, [pc, #572]	@ (8005d8c <UART_SetConfig+0x2cc>)
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d005      	beq.n	8005b60 <UART_SetConfig+0xa0>
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	4b8d      	ldr	r3, [pc, #564]	@ (8005d90 <UART_SetConfig+0x2d0>)
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d104      	bne.n	8005b6a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005b60:	f7ff fc0e 	bl	8005380 <HAL_RCC_GetPCLK2Freq>
 8005b64:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005b68:	e003      	b.n	8005b72 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005b6a:	f7ff fbf5 	bl	8005358 <HAL_RCC_GetPCLK1Freq>
 8005b6e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b76:	69db      	ldr	r3, [r3, #28]
 8005b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005b7c:	f040 810c 	bne.w	8005d98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005b80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b84:	2200      	movs	r2, #0
 8005b86:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005b8a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005b8e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005b92:	4622      	mov	r2, r4
 8005b94:	462b      	mov	r3, r5
 8005b96:	1891      	adds	r1, r2, r2
 8005b98:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005b9a:	415b      	adcs	r3, r3
 8005b9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005b9e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	eb12 0801 	adds.w	r8, r2, r1
 8005ba8:	4629      	mov	r1, r5
 8005baa:	eb43 0901 	adc.w	r9, r3, r1
 8005bae:	f04f 0200 	mov.w	r2, #0
 8005bb2:	f04f 0300 	mov.w	r3, #0
 8005bb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005bba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005bbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005bc2:	4690      	mov	r8, r2
 8005bc4:	4699      	mov	r9, r3
 8005bc6:	4623      	mov	r3, r4
 8005bc8:	eb18 0303 	adds.w	r3, r8, r3
 8005bcc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	eb49 0303 	adc.w	r3, r9, r3
 8005bd6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bde:	685b      	ldr	r3, [r3, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005be6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005bea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005bee:	460b      	mov	r3, r1
 8005bf0:	18db      	adds	r3, r3, r3
 8005bf2:	653b      	str	r3, [r7, #80]	@ 0x50
 8005bf4:	4613      	mov	r3, r2
 8005bf6:	eb42 0303 	adc.w	r3, r2, r3
 8005bfa:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bfc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c04:	f7fa fb34 	bl	8000270 <__aeabi_uldivmod>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4b61      	ldr	r3, [pc, #388]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005c0e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c12:	095b      	lsrs	r3, r3, #5
 8005c14:	011c      	lsls	r4, r3, #4
 8005c16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c20:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005c28:	4642      	mov	r2, r8
 8005c2a:	464b      	mov	r3, r9
 8005c2c:	1891      	adds	r1, r2, r2
 8005c2e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005c30:	415b      	adcs	r3, r3
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005c38:	4641      	mov	r1, r8
 8005c3a:	eb12 0a01 	adds.w	sl, r2, r1
 8005c3e:	4649      	mov	r1, r9
 8005c40:	eb43 0b01 	adc.w	fp, r3, r1
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	f04f 0300 	mov.w	r3, #0
 8005c4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005c50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005c54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c58:	4692      	mov	sl, r2
 8005c5a:	469b      	mov	fp, r3
 8005c5c:	4643      	mov	r3, r8
 8005c5e:	eb1a 0303 	adds.w	r3, sl, r3
 8005c62:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c66:	464b      	mov	r3, r9
 8005c68:	eb4b 0303 	adc.w	r3, fp, r3
 8005c6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005c7c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005c80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005c84:	460b      	mov	r3, r1
 8005c86:	18db      	adds	r3, r3, r3
 8005c88:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005c96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005c9a:	f7fa fae9 	bl	8000270 <__aeabi_uldivmod>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	460b      	mov	r3, r1
 8005ca2:	4611      	mov	r1, r2
 8005ca4:	4b3b      	ldr	r3, [pc, #236]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005ca6:	fba3 2301 	umull	r2, r3, r3, r1
 8005caa:	095b      	lsrs	r3, r3, #5
 8005cac:	2264      	movs	r2, #100	@ 0x64
 8005cae:	fb02 f303 	mul.w	r3, r2, r3
 8005cb2:	1acb      	subs	r3, r1, r3
 8005cb4:	00db      	lsls	r3, r3, #3
 8005cb6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005cba:	4b36      	ldr	r3, [pc, #216]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005cbc:	fba3 2302 	umull	r2, r3, r3, r2
 8005cc0:	095b      	lsrs	r3, r3, #5
 8005cc2:	005b      	lsls	r3, r3, #1
 8005cc4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005cc8:	441c      	add	r4, r3
 8005cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005cd4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005cd8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	1891      	adds	r1, r2, r2
 8005ce2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ce4:	415b      	adcs	r3, r3
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ce8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005cec:	4641      	mov	r1, r8
 8005cee:	1851      	adds	r1, r2, r1
 8005cf0:	6339      	str	r1, [r7, #48]	@ 0x30
 8005cf2:	4649      	mov	r1, r9
 8005cf4:	414b      	adcs	r3, r1
 8005cf6:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cf8:	f04f 0200 	mov.w	r2, #0
 8005cfc:	f04f 0300 	mov.w	r3, #0
 8005d00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d04:	4659      	mov	r1, fp
 8005d06:	00cb      	lsls	r3, r1, #3
 8005d08:	4651      	mov	r1, sl
 8005d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d0e:	4651      	mov	r1, sl
 8005d10:	00ca      	lsls	r2, r1, #3
 8005d12:	4610      	mov	r0, r2
 8005d14:	4619      	mov	r1, r3
 8005d16:	4603      	mov	r3, r0
 8005d18:	4642      	mov	r2, r8
 8005d1a:	189b      	adds	r3, r3, r2
 8005d1c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d20:	464b      	mov	r3, r9
 8005d22:	460a      	mov	r2, r1
 8005d24:	eb42 0303 	adc.w	r3, r2, r3
 8005d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	2200      	movs	r2, #0
 8005d34:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005d38:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005d3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005d40:	460b      	mov	r3, r1
 8005d42:	18db      	adds	r3, r3, r3
 8005d44:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005d46:	4613      	mov	r3, r2
 8005d48:	eb42 0303 	adc.w	r3, r2, r3
 8005d4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005d52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005d56:	f7fa fa8b 	bl	8000270 <__aeabi_uldivmod>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	460b      	mov	r3, r1
 8005d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005d60:	fba3 1302 	umull	r1, r3, r3, r2
 8005d64:	095b      	lsrs	r3, r3, #5
 8005d66:	2164      	movs	r1, #100	@ 0x64
 8005d68:	fb01 f303 	mul.w	r3, r1, r3
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	00db      	lsls	r3, r3, #3
 8005d70:	3332      	adds	r3, #50	@ 0x32
 8005d72:	4a08      	ldr	r2, [pc, #32]	@ (8005d94 <UART_SetConfig+0x2d4>)
 8005d74:	fba2 2303 	umull	r2, r3, r2, r3
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	f003 0207 	and.w	r2, r3, #7
 8005d7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4422      	add	r2, r4
 8005d86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005d88:	e106      	b.n	8005f98 <UART_SetConfig+0x4d8>
 8005d8a:	bf00      	nop
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005d98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005da2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005da6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005daa:	4642      	mov	r2, r8
 8005dac:	464b      	mov	r3, r9
 8005dae:	1891      	adds	r1, r2, r2
 8005db0:	6239      	str	r1, [r7, #32]
 8005db2:	415b      	adcs	r3, r3
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005dba:	4641      	mov	r1, r8
 8005dbc:	1854      	adds	r4, r2, r1
 8005dbe:	4649      	mov	r1, r9
 8005dc0:	eb43 0501 	adc.w	r5, r3, r1
 8005dc4:	f04f 0200 	mov.w	r2, #0
 8005dc8:	f04f 0300 	mov.w	r3, #0
 8005dcc:	00eb      	lsls	r3, r5, #3
 8005dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005dd2:	00e2      	lsls	r2, r4, #3
 8005dd4:	4614      	mov	r4, r2
 8005dd6:	461d      	mov	r5, r3
 8005dd8:	4643      	mov	r3, r8
 8005dda:	18e3      	adds	r3, r4, r3
 8005ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005de0:	464b      	mov	r3, r9
 8005de2:	eb45 0303 	adc.w	r3, r5, r3
 8005de6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005df6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005dfa:	f04f 0200 	mov.w	r2, #0
 8005dfe:	f04f 0300 	mov.w	r3, #0
 8005e02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e06:	4629      	mov	r1, r5
 8005e08:	008b      	lsls	r3, r1, #2
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e10:	4621      	mov	r1, r4
 8005e12:	008a      	lsls	r2, r1, #2
 8005e14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e18:	f7fa fa2a 	bl	8000270 <__aeabi_uldivmod>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	460b      	mov	r3, r1
 8005e20:	4b60      	ldr	r3, [pc, #384]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005e22:	fba3 2302 	umull	r2, r3, r3, r2
 8005e26:	095b      	lsrs	r3, r3, #5
 8005e28:	011c      	lsls	r4, r3, #4
 8005e2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e2e:	2200      	movs	r2, #0
 8005e30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005e34:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005e38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005e3c:	4642      	mov	r2, r8
 8005e3e:	464b      	mov	r3, r9
 8005e40:	1891      	adds	r1, r2, r2
 8005e42:	61b9      	str	r1, [r7, #24]
 8005e44:	415b      	adcs	r3, r3
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	1851      	adds	r1, r2, r1
 8005e50:	6139      	str	r1, [r7, #16]
 8005e52:	4649      	mov	r1, r9
 8005e54:	414b      	adcs	r3, r1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	f04f 0200 	mov.w	r2, #0
 8005e5c:	f04f 0300 	mov.w	r3, #0
 8005e60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005e64:	4659      	mov	r1, fp
 8005e66:	00cb      	lsls	r3, r1, #3
 8005e68:	4651      	mov	r1, sl
 8005e6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e6e:	4651      	mov	r1, sl
 8005e70:	00ca      	lsls	r2, r1, #3
 8005e72:	4610      	mov	r0, r2
 8005e74:	4619      	mov	r1, r3
 8005e76:	4603      	mov	r3, r0
 8005e78:	4642      	mov	r2, r8
 8005e7a:	189b      	adds	r3, r3, r2
 8005e7c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005e80:	464b      	mov	r3, r9
 8005e82:	460a      	mov	r2, r1
 8005e84:	eb42 0303 	adc.w	r3, r2, r3
 8005e88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	2200      	movs	r2, #0
 8005e94:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005e96:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005e98:	f04f 0200 	mov.w	r2, #0
 8005e9c:	f04f 0300 	mov.w	r3, #0
 8005ea0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	008b      	lsls	r3, r1, #2
 8005ea8:	4641      	mov	r1, r8
 8005eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eae:	4641      	mov	r1, r8
 8005eb0:	008a      	lsls	r2, r1, #2
 8005eb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005eb6:	f7fa f9db 	bl	8000270 <__aeabi_uldivmod>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	460b      	mov	r3, r1
 8005ebe:	4611      	mov	r1, r2
 8005ec0:	4b38      	ldr	r3, [pc, #224]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005ec2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2264      	movs	r2, #100	@ 0x64
 8005eca:	fb02 f303 	mul.w	r3, r2, r3
 8005ece:	1acb      	subs	r3, r1, r3
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	3332      	adds	r3, #50	@ 0x32
 8005ed4:	4a33      	ldr	r2, [pc, #204]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005ee0:	441c      	add	r4, r3
 8005ee2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	673b      	str	r3, [r7, #112]	@ 0x70
 8005eea:	677a      	str	r2, [r7, #116]	@ 0x74
 8005eec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	60fb      	str	r3, [r7, #12]
 8005efc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f00:	4641      	mov	r1, r8
 8005f02:	1851      	adds	r1, r2, r1
 8005f04:	6039      	str	r1, [r7, #0]
 8005f06:	4649      	mov	r1, r9
 8005f08:	414b      	adcs	r3, r1
 8005f0a:	607b      	str	r3, [r7, #4]
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f18:	4659      	mov	r1, fp
 8005f1a:	00cb      	lsls	r3, r1, #3
 8005f1c:	4651      	mov	r1, sl
 8005f1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f22:	4651      	mov	r1, sl
 8005f24:	00ca      	lsls	r2, r1, #3
 8005f26:	4610      	mov	r0, r2
 8005f28:	4619      	mov	r1, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	4642      	mov	r2, r8
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f32:	464b      	mov	r3, r9
 8005f34:	460a      	mov	r2, r1
 8005f36:	eb42 0303 	adc.w	r3, r2, r3
 8005f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f46:	667a      	str	r2, [r7, #100]	@ 0x64
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	f04f 0300 	mov.w	r3, #0
 8005f50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005f54:	4649      	mov	r1, r9
 8005f56:	008b      	lsls	r3, r1, #2
 8005f58:	4641      	mov	r1, r8
 8005f5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f5e:	4641      	mov	r1, r8
 8005f60:	008a      	lsls	r2, r1, #2
 8005f62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005f66:	f7fa f983 	bl	8000270 <__aeabi_uldivmod>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005f70:	fba3 1302 	umull	r1, r3, r3, r2
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	2164      	movs	r1, #100	@ 0x64
 8005f78:	fb01 f303 	mul.w	r3, r1, r3
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	3332      	adds	r3, #50	@ 0x32
 8005f82:	4a08      	ldr	r2, [pc, #32]	@ (8005fa4 <UART_SetConfig+0x4e4>)
 8005f84:	fba2 2303 	umull	r2, r3, r2, r3
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4422      	add	r2, r4
 8005f96:	609a      	str	r2, [r3, #8]
}
 8005f98:	bf00      	nop
 8005f9a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005fa4:	51eb851f 	.word	0x51eb851f

08005fa8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fa8:	b084      	sub	sp, #16
 8005faa:	b580      	push	{r7, lr}
 8005fac:	b084      	sub	sp, #16
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	f107 001c 	add.w	r0, r7, #28
 8005fb6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fba:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d123      	bne.n	800600a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	68db      	ldr	r3, [r3, #12]
 8005fd2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005fd6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005fea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	d105      	bne.n	8005ffe <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	68db      	ldr	r3, [r3, #12]
 8005ff6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f9dc 	bl	80063bc <USB_CoreReset>
 8006004:	4603      	mov	r3, r0
 8006006:	73fb      	strb	r3, [r7, #15]
 8006008:	e01b      	b.n	8006042 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 f9d0 	bl	80063bc <USB_CoreReset>
 800601c:	4603      	mov	r3, r0
 800601e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006020:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006024:	2b00      	cmp	r3, #0
 8006026:	d106      	bne.n	8006036 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800602c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	639a      	str	r2, [r3, #56]	@ 0x38
 8006034:	e005      	b.n	8006042 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800603a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006042:	7fbb      	ldrb	r3, [r7, #30]
 8006044:	2b01      	cmp	r3, #1
 8006046:	d10b      	bne.n	8006060 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f043 0206 	orr.w	r2, r3, #6
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f043 0220 	orr.w	r2, r3, #32
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006060:	7bfb      	ldrb	r3, [r7, #15]
}
 8006062:	4618      	mov	r0, r3
 8006064:	3710      	adds	r7, #16
 8006066:	46bd      	mov	sp, r7
 8006068:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800606c:	b004      	add	sp, #16
 800606e:	4770      	bx	lr

08006070 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	689b      	ldr	r3, [r3, #8]
 800607c:	f043 0201 	orr.w	r2, r3, #1
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f023 0201 	bic.w	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	370c      	adds	r7, #12
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr

080060b4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	460b      	mov	r3, r1
 80060be:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060c0:	2300      	movs	r3, #0
 80060c2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80060d0:	78fb      	ldrb	r3, [r7, #3]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d115      	bne.n	8006102 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	68db      	ldr	r3, [r3, #12]
 80060da:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80060e2:	200a      	movs	r0, #10
 80060e4:	f7fb fac4 	bl	8001670 <HAL_Delay>
      ms += 10U;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	330a      	adds	r3, #10
 80060ec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f956 	bl	80063a0 <USB_GetMode>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d01e      	beq.n	8006138 <USB_SetCurrentMode+0x84>
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2bc7      	cmp	r3, #199	@ 0xc7
 80060fe:	d9f0      	bls.n	80060e2 <USB_SetCurrentMode+0x2e>
 8006100:	e01a      	b.n	8006138 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006102:	78fb      	ldrb	r3, [r7, #3]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d115      	bne.n	8006134 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	68db      	ldr	r3, [r3, #12]
 800610c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006114:	200a      	movs	r0, #10
 8006116:	f7fb faab 	bl	8001670 <HAL_Delay>
      ms += 10U;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	330a      	adds	r3, #10
 800611e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f93d 	bl	80063a0 <USB_GetMode>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d005      	beq.n	8006138 <USB_SetCurrentMode+0x84>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2bc7      	cmp	r3, #199	@ 0xc7
 8006130:	d9f0      	bls.n	8006114 <USB_SetCurrentMode+0x60>
 8006132:	e001      	b.n	8006138 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e005      	b.n	8006144 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	2bc8      	cmp	r3, #200	@ 0xc8
 800613c:	d101      	bne.n	8006142 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e000      	b.n	8006144 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006142:	2300      	movs	r3, #0
}
 8006144:	4618      	mov	r0, r3
 8006146:	3710      	adds	r7, #16
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800614c:	b480      	push	{r7}
 800614e:	b085      	sub	sp, #20
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3301      	adds	r3, #1
 800615e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006166:	d901      	bls.n	800616c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006168:	2303      	movs	r3, #3
 800616a:	e01b      	b.n	80061a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	691b      	ldr	r3, [r3, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	daf2      	bge.n	800615a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006174:	2300      	movs	r3, #0
 8006176:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	019b      	lsls	r3, r3, #6
 800617c:	f043 0220 	orr.w	r2, r3, #32
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	3301      	adds	r3, #1
 8006188:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006190:	d901      	bls.n	8006196 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e006      	b.n	80061a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 0320 	and.w	r3, r3, #32
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d0f0      	beq.n	8006184 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3714      	adds	r7, #20
 80061a8:	46bd      	mov	sp, r7
 80061aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ae:	4770      	bx	lr

080061b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b085      	sub	sp, #20
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061b8:	2300      	movs	r3, #0
 80061ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061c8:	d901      	bls.n	80061ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80061ca:	2303      	movs	r3, #3
 80061cc:	e018      	b.n	8006200 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	691b      	ldr	r3, [r3, #16]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	daf2      	bge.n	80061bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2210      	movs	r2, #16
 80061de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	3301      	adds	r3, #1
 80061e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80061ec:	d901      	bls.n	80061f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	e006      	b.n	8006200 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	f003 0310 	and.w	r3, r3, #16
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d0f0      	beq.n	80061e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800620c:	b480      	push	{r7}
 800620e:	b089      	sub	sp, #36	@ 0x24
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4611      	mov	r1, r2
 8006218:	461a      	mov	r2, r3
 800621a:	460b      	mov	r3, r1
 800621c:	71fb      	strb	r3, [r7, #7]
 800621e:	4613      	mov	r3, r2
 8006220:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800622a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800622e:	2b00      	cmp	r3, #0
 8006230:	d123      	bne.n	800627a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006232:	88bb      	ldrh	r3, [r7, #4]
 8006234:	3303      	adds	r3, #3
 8006236:	089b      	lsrs	r3, r3, #2
 8006238:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800623a:	2300      	movs	r3, #0
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	e018      	b.n	8006272 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006240:	79fb      	ldrb	r3, [r7, #7]
 8006242:	031a      	lsls	r2, r3, #12
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	4413      	add	r3, r2
 8006248:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800624c:	461a      	mov	r2, r3
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	3301      	adds	r3, #1
 8006258:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800625a:	69fb      	ldr	r3, [r7, #28]
 800625c:	3301      	adds	r3, #1
 800625e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006260:	69fb      	ldr	r3, [r7, #28]
 8006262:	3301      	adds	r3, #1
 8006264:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3301      	adds	r3, #1
 800626a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	3301      	adds	r3, #1
 8006270:	61bb      	str	r3, [r7, #24]
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	693b      	ldr	r3, [r7, #16]
 8006276:	429a      	cmp	r2, r3
 8006278:	d3e2      	bcc.n	8006240 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800627a:	2300      	movs	r3, #0
}
 800627c:	4618      	mov	r0, r3
 800627e:	3724      	adds	r7, #36	@ 0x24
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006288:	b480      	push	{r7}
 800628a:	b08b      	sub	sp, #44	@ 0x2c
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	4613      	mov	r3, r2
 8006294:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800629e:	88fb      	ldrh	r3, [r7, #6]
 80062a0:	089b      	lsrs	r3, r3, #2
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80062a6:	88fb      	ldrh	r3, [r7, #6]
 80062a8:	f003 0303 	and.w	r3, r3, #3
 80062ac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80062ae:	2300      	movs	r3, #0
 80062b0:	623b      	str	r3, [r7, #32]
 80062b2:	e014      	b.n	80062de <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062be:	601a      	str	r2, [r3, #0]
    pDest++;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	3301      	adds	r3, #1
 80062c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c8:	3301      	adds	r3, #1
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062ce:	3301      	adds	r3, #1
 80062d0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80062d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d4:	3301      	adds	r3, #1
 80062d6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80062d8:	6a3b      	ldr	r3, [r7, #32]
 80062da:	3301      	adds	r3, #1
 80062dc:	623b      	str	r3, [r7, #32]
 80062de:	6a3a      	ldr	r2, [r7, #32]
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d3e6      	bcc.n	80062b4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80062e6:	8bfb      	ldrh	r3, [r7, #30]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d01e      	beq.n	800632a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80062ec:	2300      	movs	r3, #0
 80062ee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80062f6:	461a      	mov	r2, r3
 80062f8:	f107 0310 	add.w	r3, r7, #16
 80062fc:	6812      	ldr	r2, [r2, #0]
 80062fe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006300:	693a      	ldr	r2, [r7, #16]
 8006302:	6a3b      	ldr	r3, [r7, #32]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	fa22 f303 	lsr.w	r3, r2, r3
 800630c:	b2da      	uxtb	r2, r3
 800630e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006310:	701a      	strb	r2, [r3, #0]
      i++;
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	3301      	adds	r3, #1
 8006316:	623b      	str	r3, [r7, #32]
      pDest++;
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	3301      	adds	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800631e:	8bfb      	ldrh	r3, [r7, #30]
 8006320:	3b01      	subs	r3, #1
 8006322:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006324:	8bfb      	ldrh	r3, [r7, #30]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ea      	bne.n	8006300 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800632c:	4618      	mov	r0, r3
 800632e:	372c      	adds	r7, #44	@ 0x2c
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006338:	b480      	push	{r7}
 800633a:	b085      	sub	sp, #20
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	695b      	ldr	r3, [r3, #20]
 8006344:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	4013      	ands	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006350:	68fb      	ldr	r3, [r7, #12]
}
 8006352:	4618      	mov	r0, r3
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	460b      	mov	r3, r1
 8006368:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800636e:	78fb      	ldrb	r3, [r7, #3]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	4413      	add	r3, r2
 8006376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006392:	68bb      	ldr	r3, [r7, #8]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3714      	adds	r7, #20
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	f003 0301 	and.w	r3, r3, #1
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr

080063bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80063c4:	2300      	movs	r3, #0
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	3301      	adds	r3, #1
 80063cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063d4:	d901      	bls.n	80063da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e01b      	b.n	8006412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	daf2      	bge.n	80063c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80063e2:	2300      	movs	r3, #0
 80063e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	691b      	ldr	r3, [r3, #16]
 80063ea:	f043 0201 	orr.w	r2, r3, #1
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	3301      	adds	r3, #1
 80063f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80063fe:	d901      	bls.n	8006404 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e006      	b.n	8006412 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b01      	cmp	r3, #1
 800640e:	d0f0      	beq.n	80063f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3714      	adds	r7, #20
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006420:	b084      	sub	sp, #16
 8006422:	b580      	push	{r7, lr}
 8006424:	b086      	sub	sp, #24
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
 800642a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800642e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006440:	461a      	mov	r2, r3
 8006442:	2300      	movs	r3, #0
 8006444:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800644a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006456:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006462:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006472:	2b00      	cmp	r3, #0
 8006474:	d119      	bne.n	80064aa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006476:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800647a:	2b01      	cmp	r3, #1
 800647c:	d10a      	bne.n	8006494 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	68fa      	ldr	r2, [r7, #12]
 8006488:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800648c:	f043 0304 	orr.w	r3, r3, #4
 8006490:	6013      	str	r3, [r2, #0]
 8006492:	e014      	b.n	80064be <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064a2:	f023 0304 	bic.w	r3, r3, #4
 80064a6:	6013      	str	r3, [r2, #0]
 80064a8:	e009      	b.n	80064be <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	68fa      	ldr	r2, [r7, #12]
 80064b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80064b8:	f023 0304 	bic.w	r3, r3, #4
 80064bc:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80064be:	2110      	movs	r1, #16
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff fe43 	bl	800614c <USB_FlushTxFifo>
 80064c6:	4603      	mov	r3, r0
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d001      	beq.n	80064d0 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f7ff fe6d 	bl	80061b0 <USB_FlushRxFifo>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d001      	beq.n	80064e0 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80064e0:	2300      	movs	r3, #0
 80064e2:	613b      	str	r3, [r7, #16]
 80064e4:	e015      	b.n	8006512 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064f2:	461a      	mov	r2, r3
 80064f4:	f04f 33ff 	mov.w	r3, #4294967295
 80064f8:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	015a      	lsls	r2, r3, #5
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	4413      	add	r3, r2
 8006502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006506:	461a      	mov	r2, r3
 8006508:	2300      	movs	r3, #0
 800650a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3301      	adds	r3, #1
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006516:	461a      	mov	r2, r3
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	4293      	cmp	r3, r2
 800651c:	d3e3      	bcc.n	80064e6 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2200      	movs	r2, #0
 8006522:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f04f 32ff 	mov.w	r2, #4294967295
 800652a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	4a18      	ldr	r2, [pc, #96]	@ (8006590 <USB_HostInit+0x170>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10b      	bne.n	800654c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800653a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a15      	ldr	r2, [pc, #84]	@ (8006594 <USB_HostInit+0x174>)
 8006540:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a14      	ldr	r2, [pc, #80]	@ (8006598 <USB_HostInit+0x178>)
 8006546:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800654a:	e009      	b.n	8006560 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2280      	movs	r2, #128	@ 0x80
 8006550:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a11      	ldr	r2, [pc, #68]	@ (800659c <USB_HostInit+0x17c>)
 8006556:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a11      	ldr	r2, [pc, #68]	@ (80065a0 <USB_HostInit+0x180>)
 800655c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006560:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006564:	2b00      	cmp	r3, #0
 8006566:	d105      	bne.n	8006574 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	f043 0210 	orr.w	r2, r3, #16
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	699a      	ldr	r2, [r3, #24]
 8006578:	4b0a      	ldr	r3, [pc, #40]	@ (80065a4 <USB_HostInit+0x184>)
 800657a:	4313      	orrs	r3, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006580:	7dfb      	ldrb	r3, [r7, #23]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3718      	adds	r7, #24
 8006586:	46bd      	mov	sp, r7
 8006588:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800658c:	b004      	add	sp, #16
 800658e:	4770      	bx	lr
 8006590:	40040000 	.word	0x40040000
 8006594:	01000200 	.word	0x01000200
 8006598:	00e00300 	.word	0x00e00300
 800659c:	00600080 	.word	0x00600080
 80065a0:	004000e0 	.word	0x004000e0
 80065a4:	a3200008 	.word	0xa3200008

080065a8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80065a8:	b480      	push	{r7}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68fa      	ldr	r2, [r7, #12]
 80065c2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80065c6:	f023 0303 	bic.w	r3, r3, #3
 80065ca:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065d2:	681a      	ldr	r2, [r3, #0]
 80065d4:	78fb      	ldrb	r3, [r7, #3]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	68f9      	ldr	r1, [r7, #12]
 80065dc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80065e0:	4313      	orrs	r3, r2
 80065e2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80065e4:	78fb      	ldrb	r3, [r7, #3]
 80065e6:	2b01      	cmp	r3, #1
 80065e8:	d107      	bne.n	80065fa <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f0:	461a      	mov	r2, r3
 80065f2:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80065f6:	6053      	str	r3, [r2, #4]
 80065f8:	e00c      	b.n	8006614 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80065fa:	78fb      	ldrb	r3, [r7, #3]
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d107      	bne.n	8006610 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006606:	461a      	mov	r2, r3
 8006608:	f241 7370 	movw	r3, #6000	@ 0x1770
 800660c:	6053      	str	r3, [r2, #4]
 800660e:	e001      	b.n	8006614 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8006610:	2301      	movs	r3, #1
 8006612:	e000      	b.n	8006616 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3714      	adds	r7, #20
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b084      	sub	sp, #16
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8006642:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800664c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006650:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8006652:	2064      	movs	r0, #100	@ 0x64
 8006654:	f7fb f80c 	bl	8001670 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8006658:	68bb      	ldr	r3, [r7, #8]
 800665a:	68fa      	ldr	r2, [r7, #12]
 800665c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8006660:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006664:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8006666:	200a      	movs	r0, #10
 8006668:	f7fb f802 	bl	8001670 <HAL_Delay>

  return HAL_OK;
 800666c:	2300      	movs	r3, #0
}
 800666e:	4618      	mov	r0, r3
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006676:	b480      	push	{r7}
 8006678:	b085      	sub	sp, #20
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
 800667e:	460b      	mov	r3, r1
 8006680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006686:	2300      	movs	r3, #0
 8006688:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800669a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d109      	bne.n	80066ba <USB_DriveVbus+0x44>
 80066a6:	78fb      	ldrb	r3, [r7, #3]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d106      	bne.n	80066ba <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80066b8:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80066c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c4:	d109      	bne.n	80066da <USB_DriveVbus+0x64>
 80066c6:	78fb      	ldrb	r3, [r7, #3]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d106      	bne.n	80066da <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80066d4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066d8:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80066f4:	2300      	movs	r3, #0
 80066f6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006702:	68bb      	ldr	r3, [r7, #8]
 8006704:	0c5b      	lsrs	r3, r3, #17
 8006706:	f003 0303 	and.w	r3, r3, #3
}
 800670a:	4618      	mov	r0, r3
 800670c:	3714      	adds	r7, #20
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8006716:	b480      	push	{r7}
 8006718:	b085      	sub	sp, #20
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	b29b      	uxth	r3, r3
}
 800672c:	4618      	mov	r0, r3
 800672e:	3714      	adds	r7, #20
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006738:	b580      	push	{r7, lr}
 800673a:	b088      	sub	sp, #32
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	4608      	mov	r0, r1
 8006742:	4611      	mov	r1, r2
 8006744:	461a      	mov	r2, r3
 8006746:	4603      	mov	r3, r0
 8006748:	70fb      	strb	r3, [r7, #3]
 800674a:	460b      	mov	r3, r1
 800674c:	70bb      	strb	r3, [r7, #2]
 800674e:	4613      	mov	r3, r2
 8006750:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	015a      	lsls	r2, r3, #5
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	4413      	add	r3, r2
 8006762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006766:	461a      	mov	r2, r3
 8006768:	f04f 33ff 	mov.w	r3, #4294967295
 800676c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800676e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006772:	2b03      	cmp	r3, #3
 8006774:	d87c      	bhi.n	8006870 <USB_HC_Init+0x138>
 8006776:	a201      	add	r2, pc, #4	@ (adr r2, 800677c <USB_HC_Init+0x44>)
 8006778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800677c:	0800678d 	.word	0x0800678d
 8006780:	08006833 	.word	0x08006833
 8006784:	0800678d 	.word	0x0800678d
 8006788:	080067f5 	.word	0x080067f5
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800678c:	78fb      	ldrb	r3, [r7, #3]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	4413      	add	r3, r2
 8006794:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006798:	461a      	mov	r2, r3
 800679a:	f240 439d 	movw	r3, #1181	@ 0x49d
 800679e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80067a0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	da10      	bge.n	80067ca <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80067a8:	78fb      	ldrb	r3, [r7, #3]
 80067aa:	015a      	lsls	r2, r3, #5
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	4413      	add	r3, r2
 80067b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	78fa      	ldrb	r2, [r7, #3]
 80067b8:	0151      	lsls	r1, r2, #5
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	440a      	add	r2, r1
 80067be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067c6:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80067c8:	e055      	b.n	8006876 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a6f      	ldr	r2, [pc, #444]	@ (800698c <USB_HC_Init+0x254>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d151      	bne.n	8006876 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80067d2:	78fb      	ldrb	r3, [r7, #3]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	78fa      	ldrb	r2, [r7, #3]
 80067e2:	0151      	lsls	r1, r2, #5
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	440a      	add	r2, r1
 80067e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80067ec:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80067f0:	60d3      	str	r3, [r2, #12]
      break;
 80067f2:	e040      	b.n	8006876 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80067f4:	78fb      	ldrb	r3, [r7, #3]
 80067f6:	015a      	lsls	r2, r3, #5
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	4413      	add	r3, r2
 80067fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006800:	461a      	mov	r2, r3
 8006802:	f240 639d 	movw	r3, #1693	@ 0x69d
 8006806:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006808:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800680c:	2b00      	cmp	r3, #0
 800680e:	da34      	bge.n	800687a <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006810:	78fb      	ldrb	r3, [r7, #3]
 8006812:	015a      	lsls	r2, r3, #5
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	4413      	add	r3, r2
 8006818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	78fa      	ldrb	r2, [r7, #3]
 8006820:	0151      	lsls	r1, r2, #5
 8006822:	693a      	ldr	r2, [r7, #16]
 8006824:	440a      	add	r2, r1
 8006826:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800682a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800682e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006830:	e023      	b.n	800687a <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006832:	78fb      	ldrb	r3, [r7, #3]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	4413      	add	r3, r2
 800683a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800683e:	461a      	mov	r2, r3
 8006840:	f240 2325 	movw	r3, #549	@ 0x225
 8006844:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006846:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800684a:	2b00      	cmp	r3, #0
 800684c:	da17      	bge.n	800687e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	015a      	lsls	r2, r3, #5
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	4413      	add	r3, r2
 8006856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	78fa      	ldrb	r2, [r7, #3]
 800685e:	0151      	lsls	r1, r2, #5
 8006860:	693a      	ldr	r2, [r7, #16]
 8006862:	440a      	add	r2, r1
 8006864:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006868:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800686c:	60d3      	str	r3, [r2, #12]
      }
      break;
 800686e:	e006      	b.n	800687e <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	77fb      	strb	r3, [r7, #31]
      break;
 8006874:	e004      	b.n	8006880 <USB_HC_Init+0x148>
      break;
 8006876:	bf00      	nop
 8006878:	e002      	b.n	8006880 <USB_HC_Init+0x148>
      break;
 800687a:	bf00      	nop
 800687c:	e000      	b.n	8006880 <USB_HC_Init+0x148>
      break;
 800687e:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	015a      	lsls	r2, r3, #5
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	4413      	add	r3, r2
 8006888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800688c:	461a      	mov	r2, r3
 800688e:	2300      	movs	r3, #0
 8006890:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006892:	78fb      	ldrb	r3, [r7, #3]
 8006894:	015a      	lsls	r2, r3, #5
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	4413      	add	r3, r2
 800689a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	78fa      	ldrb	r2, [r7, #3]
 80068a2:	0151      	lsls	r1, r2, #5
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	440a      	add	r2, r1
 80068a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80068ac:	f043 0302 	orr.w	r3, r3, #2
 80068b0:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80068b8:	699a      	ldr	r2, [r3, #24]
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	f003 030f 	and.w	r3, r3, #15
 80068c0:	2101      	movs	r1, #1
 80068c2:	fa01 f303 	lsl.w	r3, r1, r3
 80068c6:	6939      	ldr	r1, [r7, #16]
 80068c8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80068cc:	4313      	orrs	r3, r2
 80068ce:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	699b      	ldr	r3, [r3, #24]
 80068d4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80068dc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	da03      	bge.n	80068ec <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80068e4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e001      	b.n	80068f0 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80068ec:	2300      	movs	r3, #0
 80068ee:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f7ff fef9 	bl	80066e8 <USB_GetHostSpeed>
 80068f6:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80068f8:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80068fc:	2b02      	cmp	r3, #2
 80068fe:	d106      	bne.n	800690e <USB_HC_Init+0x1d6>
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2b02      	cmp	r3, #2
 8006904:	d003      	beq.n	800690e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006906:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	e001      	b.n	8006912 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800690e:	2300      	movs	r3, #0
 8006910:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006912:	787b      	ldrb	r3, [r7, #1]
 8006914:	059b      	lsls	r3, r3, #22
 8006916:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800691a:	78bb      	ldrb	r3, [r7, #2]
 800691c:	02db      	lsls	r3, r3, #11
 800691e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006922:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006924:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006928:	049b      	lsls	r3, r3, #18
 800692a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800692e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8006930:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006932:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006936:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	431a      	orrs	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006940:	78fa      	ldrb	r2, [r7, #3]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	440a      	add	r2, r1
 8006948:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800694c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006950:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006952:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8006956:	2b03      	cmp	r3, #3
 8006958:	d003      	beq.n	8006962 <USB_HC_Init+0x22a>
 800695a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10f      	bne.n	8006982 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006962:	78fb      	ldrb	r3, [r7, #3]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	4413      	add	r3, r2
 800696a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	78fa      	ldrb	r2, [r7, #3]
 8006972:	0151      	lsls	r1, r2, #5
 8006974:	693a      	ldr	r2, [r7, #16]
 8006976:	440a      	add	r2, r1
 8006978:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800697c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006980:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006982:	7ffb      	ldrb	r3, [r7, #31]
}
 8006984:	4618      	mov	r0, r3
 8006986:	3720      	adds	r7, #32
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	40040000 	.word	0x40040000

08006990 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b08c      	sub	sp, #48	@ 0x30
 8006994:	af02      	add	r7, sp, #8
 8006996:	60f8      	str	r0, [r7, #12]
 8006998:	60b9      	str	r1, [r7, #8]
 800699a:	4613      	mov	r3, r2
 800699c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	785b      	ldrb	r3, [r3, #1]
 80069a6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80069a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80069ac:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	4a5d      	ldr	r2, [pc, #372]	@ (8006b28 <USB_HC_StartXfer+0x198>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d12f      	bne.n	8006a16 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d11c      	bne.n	80069f6 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	7c9b      	ldrb	r3, [r3, #18]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d003      	beq.n	80069cc <USB_HC_StartXfer+0x3c>
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	7c9b      	ldrb	r3, [r3, #18]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d124      	bne.n	8006a16 <USB_HC_StartXfer+0x86>
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	799b      	ldrb	r3, [r3, #6]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d120      	bne.n	8006a16 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	015a      	lsls	r2, r3, #5
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	4413      	add	r3, r2
 80069dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	69fa      	ldr	r2, [r7, #28]
 80069e4:	0151      	lsls	r1, r2, #5
 80069e6:	6a3a      	ldr	r2, [r7, #32]
 80069e8:	440a      	add	r2, r1
 80069ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80069ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069f2:	60d3      	str	r3, [r2, #12]
 80069f4:	e00f      	b.n	8006a16 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d10b      	bne.n	8006a16 <USB_HC_StartXfer+0x86>
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	795b      	ldrb	r3, [r3, #5]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d107      	bne.n	8006a16 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	785b      	ldrb	r3, [r3, #1]
 8006a0a:	4619      	mov	r1, r3
 8006a0c:	68f8      	ldr	r0, [r7, #12]
 8006a0e:	f000 fb6b 	bl	80070e8 <USB_DoPing>
        return HAL_OK;
 8006a12:	2300      	movs	r3, #0
 8006a14:	e232      	b.n	8006e7c <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	799b      	ldrb	r3, [r3, #6]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d158      	bne.n	8006ad0 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	78db      	ldrb	r3, [r3, #3]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d007      	beq.n	8006a3a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006a2a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	8a92      	ldrh	r2, [r2, #20]
 8006a30:	fb03 f202 	mul.w	r2, r3, r2
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	61da      	str	r2, [r3, #28]
 8006a38:	e07c      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	7c9b      	ldrb	r3, [r3, #18]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d130      	bne.n	8006aa4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8006a42:	68bb      	ldr	r3, [r7, #8]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	2bbc      	cmp	r3, #188	@ 0xbc
 8006a48:	d918      	bls.n	8006a7c <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	8a9b      	ldrh	r3, [r3, #20]
 8006a4e:	461a      	mov	r2, r3
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	69da      	ldr	r2, [r3, #28]
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d003      	beq.n	8006a6c <USB_HC_StartXfer+0xdc>
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d103      	bne.n	8006a74 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2202      	movs	r2, #2
 8006a70:	60da      	str	r2, [r3, #12]
 8006a72:	e05f      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	2201      	movs	r2, #1
 8006a78:	60da      	str	r2, [r3, #12]
 8006a7a:	e05b      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	6a1a      	ldr	r2, [r3, #32]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8006a84:	68bb      	ldr	r3, [r7, #8]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d007      	beq.n	8006a9c <USB_HC_StartXfer+0x10c>
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	68db      	ldr	r3, [r3, #12]
 8006a90:	2b02      	cmp	r3, #2
 8006a92:	d003      	beq.n	8006a9c <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2204      	movs	r2, #4
 8006a98:	60da      	str	r2, [r3, #12]
 8006a9a:	e04b      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2203      	movs	r2, #3
 8006aa0:	60da      	str	r2, [r3, #12]
 8006aa2:	e047      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8006aa4:	79fb      	ldrb	r3, [r7, #7]
 8006aa6:	2b01      	cmp	r3, #1
 8006aa8:	d10d      	bne.n	8006ac6 <USB_HC_StartXfer+0x136>
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	6a1b      	ldr	r3, [r3, #32]
 8006aae:	68ba      	ldr	r2, [r7, #8]
 8006ab0:	8a92      	ldrh	r2, [r2, #20]
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d907      	bls.n	8006ac6 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ab6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ab8:	68ba      	ldr	r2, [r7, #8]
 8006aba:	8a92      	ldrh	r2, [r2, #20]
 8006abc:	fb03 f202 	mul.w	r2, r3, r2
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	61da      	str	r2, [r3, #28]
 8006ac4:	e036      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a1a      	ldr	r2, [r3, #32]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	61da      	str	r2, [r3, #28]
 8006ace:	e031      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6a1b      	ldr	r3, [r3, #32]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d018      	beq.n	8006b0a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6a1b      	ldr	r3, [r3, #32]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	8a92      	ldrh	r2, [r2, #20]
 8006ae0:	4413      	add	r3, r2
 8006ae2:	3b01      	subs	r3, #1
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	8a92      	ldrh	r2, [r2, #20]
 8006ae8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006aec:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8006aee:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006af0:	8b7b      	ldrh	r3, [r7, #26]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d90b      	bls.n	8006b0e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8006af6:	8b7b      	ldrh	r3, [r7, #26]
 8006af8:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006afa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	8a92      	ldrh	r2, [r2, #20]
 8006b00:	fb03 f202 	mul.w	r2, r3, r2
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	61da      	str	r2, [r3, #28]
 8006b08:	e001      	b.n	8006b0e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	78db      	ldrb	r3, [r3, #3]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006b16:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	8a92      	ldrh	r2, [r2, #20]
 8006b1c:	fb03 f202 	mul.w	r2, r3, r2
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	61da      	str	r2, [r3, #28]
 8006b24:	e006      	b.n	8006b34 <USB_HC_StartXfer+0x1a4>
 8006b26:	bf00      	nop
 8006b28:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	6a1a      	ldr	r2, [r3, #32]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	69db      	ldr	r3, [r3, #28]
 8006b38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b3c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b3e:	04d9      	lsls	r1, r3, #19
 8006b40:	4ba3      	ldr	r3, [pc, #652]	@ (8006dd0 <USB_HC_StartXfer+0x440>)
 8006b42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	7d9b      	ldrb	r3, [r3, #22]
 8006b4a:	075b      	lsls	r3, r3, #29
 8006b4c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b50:	69f9      	ldr	r1, [r7, #28]
 8006b52:	0148      	lsls	r0, r1, #5
 8006b54:	6a39      	ldr	r1, [r7, #32]
 8006b56:	4401      	add	r1, r0
 8006b58:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006b5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006b5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006b60:	79fb      	ldrb	r3, [r7, #7]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d009      	beq.n	8006b7a <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	6999      	ldr	r1, [r3, #24]
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	015a      	lsls	r2, r3, #5
 8006b6e:	6a3b      	ldr	r3, [r7, #32]
 8006b70:	4413      	add	r3, r2
 8006b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b76:	460a      	mov	r2, r1
 8006b78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	bf0c      	ite	eq
 8006b8a:	2301      	moveq	r3, #1
 8006b8c:	2300      	movne	r3, #0
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006b92:	69fb      	ldr	r3, [r7, #28]
 8006b94:	015a      	lsls	r2, r3, #5
 8006b96:	6a3b      	ldr	r3, [r7, #32]
 8006b98:	4413      	add	r3, r2
 8006b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	69fa      	ldr	r2, [r7, #28]
 8006ba2:	0151      	lsls	r1, r2, #5
 8006ba4:	6a3a      	ldr	r2, [r7, #32]
 8006ba6:	440a      	add	r2, r1
 8006ba8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006bac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006bb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	015a      	lsls	r2, r3, #5
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	4413      	add	r3, r2
 8006bba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	7e7b      	ldrb	r3, [r7, #25]
 8006bc2:	075b      	lsls	r3, r3, #29
 8006bc4:	69f9      	ldr	r1, [r7, #28]
 8006bc6:	0148      	lsls	r0, r1, #5
 8006bc8:	6a39      	ldr	r1, [r7, #32]
 8006bca:	4401      	add	r1, r0
 8006bcc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	799b      	ldrb	r3, [r3, #6]
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	f040 80c3 	bne.w	8006d64 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	7c5b      	ldrb	r3, [r3, #17]
 8006be2:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006be4:	68ba      	ldr	r2, [r7, #8]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006be8:	4313      	orrs	r3, r2
 8006bea:	69fa      	ldr	r2, [r7, #28]
 8006bec:	0151      	lsls	r1, r2, #5
 8006bee:	6a3a      	ldr	r2, [r7, #32]
 8006bf0:	440a      	add	r2, r1
 8006bf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8006bf6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006bfa:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c08:	68db      	ldr	r3, [r3, #12]
 8006c0a:	69fa      	ldr	r2, [r7, #28]
 8006c0c:	0151      	lsls	r1, r2, #5
 8006c0e:	6a3a      	ldr	r2, [r7, #32]
 8006c10:	440a      	add	r2, r1
 8006c12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c16:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006c1a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	79db      	ldrb	r3, [r3, #7]
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d123      	bne.n	8006c6c <USB_HC_StartXfer+0x2dc>
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	78db      	ldrb	r3, [r3, #3]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d11f      	bne.n	8006c6c <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c2c:	69fb      	ldr	r3, [r7, #28]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	6a3b      	ldr	r3, [r7, #32]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	6a3a      	ldr	r2, [r7, #32]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c4a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	015a      	lsls	r2, r3, #5
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	4413      	add	r3, r2
 8006c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c58:	68db      	ldr	r3, [r3, #12]
 8006c5a:	69fa      	ldr	r2, [r7, #28]
 8006c5c:	0151      	lsls	r1, r2, #5
 8006c5e:	6a3a      	ldr	r2, [r7, #32]
 8006c60:	440a      	add	r2, r1
 8006c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006c66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c6a:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	7c9b      	ldrb	r3, [r3, #18]
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d003      	beq.n	8006c7c <USB_HC_StartXfer+0x2ec>
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	7c9b      	ldrb	r3, [r3, #18]
 8006c78:	2b03      	cmp	r3, #3
 8006c7a:	d117      	bne.n	8006cac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d113      	bne.n	8006cac <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	78db      	ldrb	r3, [r3, #3]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d10f      	bne.n	8006cac <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	015a      	lsls	r2, r3, #5
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	4413      	add	r3, r2
 8006c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	0151      	lsls	r1, r2, #5
 8006c9e:	6a3a      	ldr	r2, [r7, #32]
 8006ca0:	440a      	add	r2, r1
 8006ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ca6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006caa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	7c9b      	ldrb	r3, [r3, #18]
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d162      	bne.n	8006d7a <USB_HC_StartXfer+0x3ea>
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	78db      	ldrb	r3, [r3, #3]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d15e      	bne.n	8006d7a <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	3b01      	subs	r3, #1
 8006cc2:	2b03      	cmp	r3, #3
 8006cc4:	d858      	bhi.n	8006d78 <USB_HC_StartXfer+0x3e8>
 8006cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8006ccc <USB_HC_StartXfer+0x33c>)
 8006cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ccc:	08006cdd 	.word	0x08006cdd
 8006cd0:	08006cff 	.word	0x08006cff
 8006cd4:	08006d21 	.word	0x08006d21
 8006cd8:	08006d43 	.word	0x08006d43
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8006cdc:	69fb      	ldr	r3, [r7, #28]
 8006cde:	015a      	lsls	r2, r3, #5
 8006ce0:	6a3b      	ldr	r3, [r7, #32]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	69fa      	ldr	r2, [r7, #28]
 8006cec:	0151      	lsls	r1, r2, #5
 8006cee:	6a3a      	ldr	r2, [r7, #32]
 8006cf0:	440a      	add	r2, r1
 8006cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006cfa:	6053      	str	r3, [r2, #4]
          break;
 8006cfc:	e03d      	b.n	8006d7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	015a      	lsls	r2, r3, #5
 8006d02:	6a3b      	ldr	r3, [r7, #32]
 8006d04:	4413      	add	r3, r2
 8006d06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	69fa      	ldr	r2, [r7, #28]
 8006d0e:	0151      	lsls	r1, r2, #5
 8006d10:	6a3a      	ldr	r2, [r7, #32]
 8006d12:	440a      	add	r2, r1
 8006d14:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d18:	f043 030e 	orr.w	r3, r3, #14
 8006d1c:	6053      	str	r3, [r2, #4]
          break;
 8006d1e:	e02c      	b.n	8006d7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	015a      	lsls	r2, r3, #5
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	4413      	add	r3, r2
 8006d28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	69fa      	ldr	r2, [r7, #28]
 8006d30:	0151      	lsls	r1, r2, #5
 8006d32:	6a3a      	ldr	r2, [r7, #32]
 8006d34:	440a      	add	r2, r1
 8006d36:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006d3e:	6053      	str	r3, [r2, #4]
          break;
 8006d40:	e01b      	b.n	8006d7a <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	015a      	lsls	r2, r3, #5
 8006d46:	6a3b      	ldr	r3, [r7, #32]
 8006d48:	4413      	add	r3, r2
 8006d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	69fa      	ldr	r2, [r7, #28]
 8006d52:	0151      	lsls	r1, r2, #5
 8006d54:	6a3a      	ldr	r2, [r7, #32]
 8006d56:	440a      	add	r2, r1
 8006d58:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006d5c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006d60:	6053      	str	r3, [r2, #4]
          break;
 8006d62:	e00a      	b.n	8006d7a <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	6a3b      	ldr	r3, [r7, #32]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d70:	461a      	mov	r2, r3
 8006d72:	2300      	movs	r3, #0
 8006d74:	6053      	str	r3, [r2, #4]
 8006d76:	e000      	b.n	8006d7a <USB_HC_StartXfer+0x3ea>
          break;
 8006d78:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	6a3b      	ldr	r3, [r7, #32]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006d90:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006d92:	68bb      	ldr	r3, [r7, #8]
 8006d94:	78db      	ldrb	r3, [r3, #3]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d004      	beq.n	8006da4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006d9a:	693b      	ldr	r3, [r7, #16]
 8006d9c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006da0:	613b      	str	r3, [r7, #16]
 8006da2:	e003      	b.n	8006dac <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006daa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006db2:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	6a3b      	ldr	r3, [r7, #32]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006dc6:	79fb      	ldrb	r3, [r7, #7]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d003      	beq.n	8006dd4 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	e055      	b.n	8006e7c <USB_HC_StartXfer+0x4ec>
 8006dd0:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8006dd4:	68bb      	ldr	r3, [r7, #8]
 8006dd6:	78db      	ldrb	r3, [r3, #3]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d14e      	bne.n	8006e7a <USB_HC_StartXfer+0x4ea>
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	6a1b      	ldr	r3, [r3, #32]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d04a      	beq.n	8006e7a <USB_HC_StartXfer+0x4ea>
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	79db      	ldrb	r3, [r3, #7]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d146      	bne.n	8006e7a <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	7c9b      	ldrb	r3, [r3, #18]
 8006df0:	2b03      	cmp	r3, #3
 8006df2:	d831      	bhi.n	8006e58 <USB_HC_StartXfer+0x4c8>
 8006df4:	a201      	add	r2, pc, #4	@ (adr r2, 8006dfc <USB_HC_StartXfer+0x46c>)
 8006df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dfa:	bf00      	nop
 8006dfc:	08006e0d 	.word	0x08006e0d
 8006e00:	08006e31 	.word	0x08006e31
 8006e04:	08006e0d 	.word	0x08006e0d
 8006e08:	08006e31 	.word	0x08006e31
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	6a1b      	ldr	r3, [r3, #32]
 8006e10:	3303      	adds	r3, #3
 8006e12:	089b      	lsrs	r3, r3, #2
 8006e14:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e16:	8afa      	ldrh	r2, [r7, #22]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e1c:	b29b      	uxth	r3, r3
 8006e1e:	429a      	cmp	r2, r3
 8006e20:	d91c      	bls.n	8006e5c <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	699b      	ldr	r3, [r3, #24]
 8006e26:	f043 0220 	orr.w	r2, r3, #32
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e2e:	e015      	b.n	8006e5c <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	6a1b      	ldr	r3, [r3, #32]
 8006e34:	3303      	adds	r3, #3
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e3a:	8afa      	ldrh	r2, [r7, #22]
 8006e3c:	6a3b      	ldr	r3, [r7, #32]
 8006e3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d90a      	bls.n	8006e60 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	699b      	ldr	r3, [r3, #24]
 8006e4e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e56:	e003      	b.n	8006e60 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8006e58:	bf00      	nop
 8006e5a:	e002      	b.n	8006e62 <USB_HC_StartXfer+0x4d2>
        break;
 8006e5c:	bf00      	nop
 8006e5e:	e000      	b.n	8006e62 <USB_HC_StartXfer+0x4d2>
        break;
 8006e60:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	6999      	ldr	r1, [r3, #24]
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	785a      	ldrb	r2, [r3, #1]
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	6a1b      	ldr	r3, [r3, #32]
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	2000      	movs	r0, #0
 8006e72:	9000      	str	r0, [sp, #0]
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	f7ff f9c9 	bl	800620c <USB_WritePacket>
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3728      	adds	r7, #40	@ 0x28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	b29b      	uxth	r3, r3
}
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	3714      	adds	r7, #20
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b089      	sub	sp, #36	@ 0x24
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	460b      	mov	r3, r1
 8006eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006eb6:	78fb      	ldrb	r3, [r7, #3]
 8006eb8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006ebe:	69bb      	ldr	r3, [r7, #24]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	69fb      	ldr	r3, [r7, #28]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	0c9b      	lsrs	r3, r3, #18
 8006ece:	f003 0303 	and.w	r3, r3, #3
 8006ed2:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	015a      	lsls	r2, r3, #5
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	4413      	add	r3, r2
 8006edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	0fdb      	lsrs	r3, r3, #31
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	0fdb      	lsrs	r3, r3, #31
 8006efa:	f003 0301 	and.w	r3, r3, #1
 8006efe:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	689b      	ldr	r3, [r3, #8]
 8006f04:	f003 0320 	and.w	r3, r3, #32
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d10d      	bne.n	8006f28 <USB_HC_Halt+0x82>
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <USB_HC_Halt+0x82>
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d005      	beq.n	8006f24 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d002      	beq.n	8006f24 <USB_HC_Halt+0x7e>
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	2b03      	cmp	r3, #3
 8006f22:	d101      	bne.n	8006f28 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8006f24:	2300      	movs	r3, #0
 8006f26:	e0d8      	b.n	80070da <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d002      	beq.n	8006f34 <USB_HC_Halt+0x8e>
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d173      	bne.n	800701c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	015a      	lsls	r2, r3, #5
 8006f38:	69fb      	ldr	r3, [r7, #28]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	0151      	lsls	r1, r2, #5
 8006f46:	69fa      	ldr	r2, [r7, #28]
 8006f48:	440a      	add	r2, r1
 8006f4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006f52:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	689b      	ldr	r3, [r3, #8]
 8006f58:	f003 0320 	and.w	r3, r3, #32
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d14a      	bne.n	8006ff6 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f64:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d133      	bne.n	8006fd4 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006f6c:	69bb      	ldr	r3, [r7, #24]
 8006f6e:	015a      	lsls	r2, r3, #5
 8006f70:	69fb      	ldr	r3, [r7, #28]
 8006f72:	4413      	add	r3, r2
 8006f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	69ba      	ldr	r2, [r7, #24]
 8006f7c:	0151      	lsls	r1, r2, #5
 8006f7e:	69fa      	ldr	r2, [r7, #28]
 8006f80:	440a      	add	r2, r1
 8006f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f86:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f8a:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006f8c:	69bb      	ldr	r3, [r7, #24]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	69fb      	ldr	r3, [r7, #28]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69ba      	ldr	r2, [r7, #24]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	69fa      	ldr	r2, [r7, #28]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fa6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006faa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	3301      	adds	r3, #1
 8006fb0:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006fb8:	d82e      	bhi.n	8007018 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006fba:	69bb      	ldr	r3, [r7, #24]
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006fd0:	d0ec      	beq.n	8006fac <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006fd2:	e081      	b.n	80070d8 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fd4:	69bb      	ldr	r3, [r7, #24]
 8006fd6:	015a      	lsls	r2, r3, #5
 8006fd8:	69fb      	ldr	r3, [r7, #28]
 8006fda:	4413      	add	r3, r2
 8006fdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	69ba      	ldr	r2, [r7, #24]
 8006fe4:	0151      	lsls	r1, r2, #5
 8006fe6:	69fa      	ldr	r2, [r7, #28]
 8006fe8:	440a      	add	r2, r1
 8006fea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006fee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006ff2:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006ff4:	e070      	b.n	80070d8 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006ff6:	69bb      	ldr	r3, [r7, #24]
 8006ff8:	015a      	lsls	r2, r3, #5
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	4413      	add	r3, r2
 8006ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	69ba      	ldr	r2, [r7, #24]
 8007006:	0151      	lsls	r1, r2, #5
 8007008:	69fa      	ldr	r2, [r7, #28]
 800700a:	440a      	add	r2, r1
 800700c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007010:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007014:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007016:	e05f      	b.n	80070d8 <USB_HC_Halt+0x232>
            break;
 8007018:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800701a:	e05d      	b.n	80070d8 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007036:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800703a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007042:	691b      	ldr	r3, [r3, #16]
 8007044:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007048:	2b00      	cmp	r3, #0
 800704a:	d133      	bne.n	80070b4 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800704c:	69bb      	ldr	r3, [r7, #24]
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	69ba      	ldr	r2, [r7, #24]
 800705c:	0151      	lsls	r1, r2, #5
 800705e:	69fa      	ldr	r2, [r7, #28]
 8007060:	440a      	add	r2, r1
 8007062:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007066:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800706a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800706c:	69bb      	ldr	r3, [r7, #24]
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	69ba      	ldr	r2, [r7, #24]
 800707c:	0151      	lsls	r1, r2, #5
 800707e:	69fa      	ldr	r2, [r7, #28]
 8007080:	440a      	add	r2, r1
 8007082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007086:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800708a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	3301      	adds	r3, #1
 8007090:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007098:	d81d      	bhi.n	80070d6 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800709a:	69bb      	ldr	r3, [r7, #24]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	69fb      	ldr	r3, [r7, #28]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80070ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80070b0:	d0ec      	beq.n	800708c <USB_HC_Halt+0x1e6>
 80070b2:	e011      	b.n	80070d8 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	0151      	lsls	r1, r2, #5
 80070c6:	69fa      	ldr	r2, [r7, #28]
 80070c8:	440a      	add	r2, r1
 80070ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80070ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070d2:	6013      	str	r3, [r2, #0]
 80070d4:	e000      	b.n	80070d8 <USB_HC_Halt+0x232>
          break;
 80070d6:	bf00      	nop
    }
  }

  return HAL_OK;
 80070d8:	2300      	movs	r3, #0
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3724      	adds	r7, #36	@ 0x24
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
	...

080070e8 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80070e8:	b480      	push	{r7}
 80070ea:	b087      	sub	sp, #28
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80070fc:	2301      	movs	r3, #1
 80070fe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	04da      	lsls	r2, r3, #19
 8007104:	4b15      	ldr	r3, [pc, #84]	@ (800715c <USB_DoPing+0x74>)
 8007106:	4013      	ands	r3, r2
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	440a      	add	r2, r1
 8007110:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007118:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	4413      	add	r3, r2
 8007122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007130:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007138:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800713a:	693b      	ldr	r3, [r7, #16]
 800713c:	015a      	lsls	r2, r3, #5
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	4413      	add	r3, r2
 8007142:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007146:	461a      	mov	r2, r3
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800714c:	2300      	movs	r3, #0
}
 800714e:	4618      	mov	r0, r3
 8007150:	371c      	adds	r7, #28
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
 800715a:	bf00      	nop
 800715c:	1ff80000 	.word	0x1ff80000

08007160 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007168:	2300      	movs	r3, #0
 800716a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007170:	2300      	movs	r3, #0
 8007172:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f7fe ff8c 	bl	8006092 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800717a:	2110      	movs	r1, #16
 800717c:	6878      	ldr	r0, [r7, #4]
 800717e:	f7fe ffe5 	bl	800614c <USB_FlushTxFifo>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d001      	beq.n	800718c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f7ff f80f 	bl	80061b0 <USB_FlushRxFifo>
 8007192:	4603      	mov	r3, r0
 8007194:	2b00      	cmp	r3, #0
 8007196:	d001      	beq.n	800719c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007198:	2301      	movs	r3, #1
 800719a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800719c:	2300      	movs	r3, #0
 800719e:	61bb      	str	r3, [r7, #24]
 80071a0:	e01f      	b.n	80071e2 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80071a2:	69bb      	ldr	r3, [r7, #24]
 80071a4:	015a      	lsls	r2, r3, #5
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	4413      	add	r3, r2
 80071aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80071b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80071ba:	693b      	ldr	r3, [r7, #16]
 80071bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80071c0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80071c8:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071ca:	69bb      	ldr	r3, [r7, #24]
 80071cc:	015a      	lsls	r2, r3, #5
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4413      	add	r3, r2
 80071d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071d6:	461a      	mov	r2, r3
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071dc:	69bb      	ldr	r3, [r7, #24]
 80071de:	3301      	adds	r3, #1
 80071e0:	61bb      	str	r3, [r7, #24]
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d9dc      	bls.n	80071a2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80071e8:	2300      	movs	r3, #0
 80071ea:	61bb      	str	r3, [r7, #24]
 80071ec:	e034      	b.n	8007258 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007204:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800720c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007214:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	015a      	lsls	r2, r3, #5
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	4413      	add	r3, r2
 800721e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007222:	461a      	mov	r2, r3
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	3301      	adds	r3, #1
 800722c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007234:	d80c      	bhi.n	8007250 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	015a      	lsls	r2, r3, #5
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	4413      	add	r3, r2
 800723e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007248:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800724c:	d0ec      	beq.n	8007228 <USB_StopHost+0xc8>
 800724e:	e000      	b.n	8007252 <USB_StopHost+0xf2>
        break;
 8007250:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	3301      	adds	r3, #1
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	2b0f      	cmp	r3, #15
 800725c:	d9c7      	bls.n	80071ee <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007264:	461a      	mov	r2, r3
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f04f 32ff 	mov.w	r2, #4294967295
 8007272:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f7fe fefb 	bl	8006070 <USB_EnableGlobalInt>

  return ret;
 800727a:	7ffb      	ldrb	r3, [r7, #31]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3720      	adds	r7, #32
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007284:	b590      	push	{r4, r7, lr}
 8007286:	b089      	sub	sp, #36	@ 0x24
 8007288:	af04      	add	r7, sp, #16
 800728a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800728c:	2301      	movs	r3, #1
 800728e:	2202      	movs	r2, #2
 8007290:	2102      	movs	r1, #2
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 fc85 	bl	8007ba2 <USBH_FindInterface>
 8007298:	4603      	mov	r3, r0
 800729a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800729c:	7bfb      	ldrb	r3, [r7, #15]
 800729e:	2bff      	cmp	r3, #255	@ 0xff
 80072a0:	d002      	beq.n	80072a8 <USBH_CDC_InterfaceInit+0x24>
 80072a2:	7bfb      	ldrb	r3, [r7, #15]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d901      	bls.n	80072ac <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072a8:	2302      	movs	r3, #2
 80072aa:	e13d      	b.n	8007528 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80072ac:	7bfb      	ldrb	r3, [r7, #15]
 80072ae:	4619      	mov	r1, r3
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 fc5a 	bl	8007b6a <USBH_SelectInterface>
 80072b6:	4603      	mov	r3, r0
 80072b8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80072ba:	7bbb      	ldrb	r3, [r7, #14]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d001      	beq.n	80072c4 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80072c0:	2302      	movs	r3, #2
 80072c2:	e131      	b.n	8007528 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80072ca:	2050      	movs	r0, #80	@ 0x50
 80072cc:	f002 fb64 	bl	8009998 <malloc>
 80072d0:	4603      	mov	r3, r0
 80072d2:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80072e4:	2302      	movs	r3, #2
 80072e6:	e11f      	b.n	8007528 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80072e8:	2250      	movs	r2, #80	@ 0x50
 80072ea:	2100      	movs	r1, #0
 80072ec:	68b8      	ldr	r0, [r7, #8]
 80072ee:	f002 fecf 	bl	800a090 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80072f2:	7bfb      	ldrb	r3, [r7, #15]
 80072f4:	687a      	ldr	r2, [r7, #4]
 80072f6:	211a      	movs	r1, #26
 80072f8:	fb01 f303 	mul.w	r3, r1, r3
 80072fc:	4413      	add	r3, r2
 80072fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	b25b      	sxtb	r3, r3
 8007306:	2b00      	cmp	r3, #0
 8007308:	da15      	bge.n	8007336 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	211a      	movs	r1, #26
 8007310:	fb01 f303 	mul.w	r3, r1, r3
 8007314:	4413      	add	r3, r2
 8007316:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800731a:	781a      	ldrb	r2, [r3, #0]
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007320:	7bfb      	ldrb	r3, [r7, #15]
 8007322:	687a      	ldr	r2, [r7, #4]
 8007324:	211a      	movs	r1, #26
 8007326:	fb01 f303 	mul.w	r3, r1, r3
 800732a:	4413      	add	r3, r2
 800732c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007330:	881a      	ldrh	r2, [r3, #0]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	785b      	ldrb	r3, [r3, #1]
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f001 ffbe 	bl	80092be <USBH_AllocPipe>
 8007342:	4603      	mov	r3, r0
 8007344:	461a      	mov	r2, r3
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	7819      	ldrb	r1, [r3, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	7858      	ldrb	r0, [r3, #1]
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	8952      	ldrh	r2, [r2, #10]
 8007362:	9202      	str	r2, [sp, #8]
 8007364:	2203      	movs	r2, #3
 8007366:	9201      	str	r2, [sp, #4]
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	4623      	mov	r3, r4
 800736c:	4602      	mov	r2, r0
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f001 ff76 	bl	8009260 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007374:	68bb      	ldr	r3, [r7, #8]
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2200      	movs	r2, #0
 800737a:	4619      	mov	r1, r3
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f002 fa85 	bl	800988c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007382:	2300      	movs	r3, #0
 8007384:	2200      	movs	r2, #0
 8007386:	210a      	movs	r1, #10
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fc0a 	bl	8007ba2 <USBH_FindInterface>
 800738e:	4603      	mov	r3, r0
 8007390:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007392:	7bfb      	ldrb	r3, [r7, #15]
 8007394:	2bff      	cmp	r3, #255	@ 0xff
 8007396:	d002      	beq.n	800739e <USBH_CDC_InterfaceInit+0x11a>
 8007398:	7bfb      	ldrb	r3, [r7, #15]
 800739a:	2b01      	cmp	r3, #1
 800739c:	d901      	bls.n	80073a2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800739e:	2302      	movs	r3, #2
 80073a0:	e0c2      	b.n	8007528 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	211a      	movs	r1, #26
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	4413      	add	r3, r2
 80073ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	b25b      	sxtb	r3, r3
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	da16      	bge.n	80073e8 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073ba:	7bfb      	ldrb	r3, [r7, #15]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	211a      	movs	r1, #26
 80073c0:	fb01 f303 	mul.w	r3, r1, r3
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073ca:	781a      	ldrb	r2, [r3, #0]
 80073cc:	68bb      	ldr	r3, [r7, #8]
 80073ce:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073d0:	7bfb      	ldrb	r3, [r7, #15]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	211a      	movs	r1, #26
 80073d6:	fb01 f303 	mul.w	r3, r1, r3
 80073da:	4413      	add	r3, r2
 80073dc:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80073e0:	881a      	ldrh	r2, [r3, #0]
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	835a      	strh	r2, [r3, #26]
 80073e6:	e015      	b.n	8007414 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073e8:	7bfb      	ldrb	r3, [r7, #15]
 80073ea:	687a      	ldr	r2, [r7, #4]
 80073ec:	211a      	movs	r1, #26
 80073ee:	fb01 f303 	mul.w	r3, r1, r3
 80073f2:	4413      	add	r3, r2
 80073f4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80073f8:	781a      	ldrb	r2, [r3, #0]
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	211a      	movs	r1, #26
 8007404:	fb01 f303 	mul.w	r3, r1, r3
 8007408:	4413      	add	r3, r2
 800740a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800740e:	881a      	ldrh	r2, [r3, #0]
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007414:	7bfb      	ldrb	r3, [r7, #15]
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	211a      	movs	r1, #26
 800741a:	fb01 f303 	mul.w	r3, r1, r3
 800741e:	4413      	add	r3, r2
 8007420:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	b25b      	sxtb	r3, r3
 8007428:	2b00      	cmp	r3, #0
 800742a:	da16      	bge.n	800745a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800742c:	7bfb      	ldrb	r3, [r7, #15]
 800742e:	687a      	ldr	r2, [r7, #4]
 8007430:	211a      	movs	r1, #26
 8007432:	fb01 f303 	mul.w	r3, r1, r3
 8007436:	4413      	add	r3, r2
 8007438:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800743c:	781a      	ldrb	r2, [r3, #0]
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	687a      	ldr	r2, [r7, #4]
 8007446:	211a      	movs	r1, #26
 8007448:	fb01 f303 	mul.w	r3, r1, r3
 800744c:	4413      	add	r3, r2
 800744e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007452:	881a      	ldrh	r2, [r3, #0]
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	835a      	strh	r2, [r3, #26]
 8007458:	e015      	b.n	8007486 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800745a:	7bfb      	ldrb	r3, [r7, #15]
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	211a      	movs	r1, #26
 8007460:	fb01 f303 	mul.w	r3, r1, r3
 8007464:	4413      	add	r3, r2
 8007466:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800746a:	781a      	ldrb	r2, [r3, #0]
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007470:	7bfb      	ldrb	r3, [r7, #15]
 8007472:	687a      	ldr	r2, [r7, #4]
 8007474:	211a      	movs	r1, #26
 8007476:	fb01 f303 	mul.w	r3, r1, r3
 800747a:	4413      	add	r3, r2
 800747c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007480:	881a      	ldrh	r2, [r3, #0]
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	7b9b      	ldrb	r3, [r3, #14]
 800748a:	4619      	mov	r1, r3
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f001 ff16 	bl	80092be <USBH_AllocPipe>
 8007492:	4603      	mov	r3, r0
 8007494:	461a      	mov	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	7bdb      	ldrb	r3, [r3, #15]
 800749e:	4619      	mov	r1, r3
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f001 ff0c 	bl	80092be <USBH_AllocPipe>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	7b59      	ldrb	r1, [r3, #13]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	7b98      	ldrb	r0, [r3, #14]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074c2:	68ba      	ldr	r2, [r7, #8]
 80074c4:	8b12      	ldrh	r2, [r2, #24]
 80074c6:	9202      	str	r2, [sp, #8]
 80074c8:	2202      	movs	r2, #2
 80074ca:	9201      	str	r2, [sp, #4]
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	4623      	mov	r3, r4
 80074d0:	4602      	mov	r2, r0
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f001 fec4 	bl	8009260 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	7b19      	ldrb	r1, [r3, #12]
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	7bd8      	ldrb	r0, [r3, #15]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80074ec:	68ba      	ldr	r2, [r7, #8]
 80074ee:	8b52      	ldrh	r2, [r2, #26]
 80074f0:	9202      	str	r2, [sp, #8]
 80074f2:	2202      	movs	r2, #2
 80074f4:	9201      	str	r2, [sp, #4]
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	4623      	mov	r3, r4
 80074fa:	4602      	mov	r2, r0
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 feaf 	bl	8009260 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	7b5b      	ldrb	r3, [r3, #13]
 800750e:	2200      	movs	r2, #0
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f002 f9ba 	bl	800988c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	7b1b      	ldrb	r3, [r3, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	4619      	mov	r1, r3
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f002 f9b3 	bl	800988c <USBH_LL_SetToggle>

  return USBH_OK;
 8007526:	2300      	movs	r3, #0
}
 8007528:	4618      	mov	r0, r3
 800752a:	3714      	adds	r7, #20
 800752c:	46bd      	mov	sp, r7
 800752e:	bd90      	pop	{r4, r7, pc}

08007530 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b084      	sub	sp, #16
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800753e:	69db      	ldr	r3, [r3, #28]
 8007540:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	781b      	ldrb	r3, [r3, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00e      	beq.n	8007568 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	4619      	mov	r1, r3
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f001 fea4 	bl	800929e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	4619      	mov	r1, r3
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f001 fecf 	bl	8009300 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2200      	movs	r2, #0
 8007566:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	7b1b      	ldrb	r3, [r3, #12]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00e      	beq.n	800758e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	7b1b      	ldrb	r3, [r3, #12]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f001 fe91 	bl	800929e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	7b1b      	ldrb	r3, [r3, #12]
 8007580:	4619      	mov	r1, r3
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f001 febc 	bl	8009300 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	7b5b      	ldrb	r3, [r3, #13]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00e      	beq.n	80075b4 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	7b5b      	ldrb	r3, [r3, #13]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f001 fe7e 	bl	800929e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	7b5b      	ldrb	r3, [r3, #13]
 80075a6:	4619      	mov	r1, r3
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f001 fea9 	bl	8009300 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	2200      	movs	r2, #0
 80075b2:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075ba:	69db      	ldr	r3, [r3, #28]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f002 f9ed 	bl	80099a8 <free>
    phost->pActiveClass->pData = 0U;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075d4:	2200      	movs	r2, #0
 80075d6:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3710      	adds	r7, #16
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80075f0:	69db      	ldr	r3, [r3, #28]
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	3340      	adds	r3, #64	@ 0x40
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f8b1 	bl	8007762 <GetLineCoding>
 8007600:	4603      	mov	r3, r0
 8007602:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007604:	7afb      	ldrb	r3, [r7, #11]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007610:	2102      	movs	r1, #2
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007616:	7afb      	ldrb	r3, [r7, #11]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}

08007620 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b084      	sub	sp, #16
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007628:	2301      	movs	r3, #1
 800762a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800762c:	2300      	movs	r3, #0
 800762e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800763a:	68bb      	ldr	r3, [r7, #8]
 800763c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007640:	2b04      	cmp	r3, #4
 8007642:	d877      	bhi.n	8007734 <USBH_CDC_Process+0x114>
 8007644:	a201      	add	r2, pc, #4	@ (adr r2, 800764c <USBH_CDC_Process+0x2c>)
 8007646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800764a:	bf00      	nop
 800764c:	08007661 	.word	0x08007661
 8007650:	08007667 	.word	0x08007667
 8007654:	08007697 	.word	0x08007697
 8007658:	0800770b 	.word	0x0800770b
 800765c:	08007719 	.word	0x08007719
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007660:	2300      	movs	r3, #0
 8007662:	73fb      	strb	r3, [r7, #15]
      break;
 8007664:	e06d      	b.n	8007742 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766a:	4619      	mov	r1, r3
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 f897 	bl	80077a0 <SetLineCoding>
 8007672:	4603      	mov	r3, r0
 8007674:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007676:	7bbb      	ldrb	r3, [r7, #14]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d104      	bne.n	8007686 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	2202      	movs	r2, #2
 8007680:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007684:	e058      	b.n	8007738 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8007686:	7bbb      	ldrb	r3, [r7, #14]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d055      	beq.n	8007738 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	2204      	movs	r2, #4
 8007690:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007694:	e050      	b.n	8007738 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	3340      	adds	r3, #64	@ 0x40
 800769a:	4619      	mov	r1, r3
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 f860 	bl	8007762 <GetLineCoding>
 80076a2:	4603      	mov	r3, r0
 80076a4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076a6:	7bbb      	ldrb	r3, [r7, #14]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d126      	bne.n	80076fa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076be:	791b      	ldrb	r3, [r3, #4]
 80076c0:	429a      	cmp	r2, r3
 80076c2:	d13b      	bne.n	800773c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ce:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d133      	bne.n	800773c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076de:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076e0:	429a      	cmp	r2, r3
 80076e2:	d12b      	bne.n	800773c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80076ec:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076ee:	429a      	cmp	r2, r3
 80076f0:	d124      	bne.n	800773c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f958 	bl	80079a8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076f8:	e020      	b.n	800773c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d01d      	beq.n	800773c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	2204      	movs	r2, #4
 8007704:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007708:	e018      	b.n	800773c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f867 	bl	80077de <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f000 f8da 	bl	80078ca <CDC_ProcessReception>
      break;
 8007716:	e014      	b.n	8007742 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007718:	2100      	movs	r1, #0
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f001 f81a 	bl	8008754 <USBH_ClrFeature>
 8007720:	4603      	mov	r3, r0
 8007722:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007724:	7bbb      	ldrb	r3, [r7, #14]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d10a      	bne.n	8007740 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007732:	e005      	b.n	8007740 <USBH_CDC_Process+0x120>

    default:
      break;
 8007734:	bf00      	nop
 8007736:	e004      	b.n	8007742 <USBH_CDC_Process+0x122>
      break;
 8007738:	bf00      	nop
 800773a:	e002      	b.n	8007742 <USBH_CDC_Process+0x122>
      break;
 800773c:	bf00      	nop
 800773e:	e000      	b.n	8007742 <USBH_CDC_Process+0x122>
      break;
 8007740:	bf00      	nop

  }

  return status;
 8007742:	7bfb      	ldrb	r3, [r7, #15]
}
 8007744:	4618      	mov	r0, r3
 8007746:	3710      	adds	r7, #16
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}

0800774c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007754:	2300      	movs	r3, #0
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr

08007762 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b082      	sub	sp, #8
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
 800776a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	22a1      	movs	r2, #161	@ 0xa1
 8007770:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2221      	movs	r2, #33	@ 0x21
 8007776:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2207      	movs	r2, #7
 8007788:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2207      	movs	r2, #7
 800778e:	4619      	mov	r1, r3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f001 fb14 	bl	8008dbe <USBH_CtlReq>
 8007796:	4603      	mov	r3, r0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3708      	adds	r7, #8
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b082      	sub	sp, #8
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2221      	movs	r2, #33	@ 0x21
 80077ae:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2220      	movs	r2, #32
 80077b4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2207      	movs	r2, #7
 80077c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	2207      	movs	r2, #7
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f001 faf5 	bl	8008dbe <USBH_CtlReq>
 80077d4:	4603      	mov	r3, r0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3708      	adds	r7, #8
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af02      	add	r7, sp, #8
 80077e4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80077f0:	2300      	movs	r3, #0
 80077f2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d002      	beq.n	8007804 <CDC_ProcessTransmission+0x26>
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d023      	beq.n	800784a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007802:	e05e      	b.n	80078c2 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007808:	68fa      	ldr	r2, [r7, #12]
 800780a:	8b12      	ldrh	r2, [r2, #24]
 800780c:	4293      	cmp	r3, r2
 800780e:	d90b      	bls.n	8007828 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	69d9      	ldr	r1, [r3, #28]
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	8b1a      	ldrh	r2, [r3, #24]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	7b5b      	ldrb	r3, [r3, #13]
 800781c:	2001      	movs	r0, #1
 800781e:	9000      	str	r0, [sp, #0]
 8007820:	6878      	ldr	r0, [r7, #4]
 8007822:	f001 fcda 	bl	80091da <USBH_BulkSendData>
 8007826:	e00b      	b.n	8007840 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007830:	b29a      	uxth	r2, r3
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	7b5b      	ldrb	r3, [r3, #13]
 8007836:	2001      	movs	r0, #1
 8007838:	9000      	str	r0, [sp, #0]
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f001 fccd 	bl	80091da <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2202      	movs	r2, #2
 8007844:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007848:	e03b      	b.n	80078c2 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	7b5b      	ldrb	r3, [r3, #13]
 800784e:	4619      	mov	r1, r3
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f001 fff1 	bl	8009838 <USBH_LL_GetURBState>
 8007856:	4603      	mov	r3, r0
 8007858:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800785a:	7afb      	ldrb	r3, [r7, #11]
 800785c:	2b01      	cmp	r3, #1
 800785e:	d128      	bne.n	80078b2 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	68fa      	ldr	r2, [r7, #12]
 8007866:	8b12      	ldrh	r2, [r2, #24]
 8007868:	4293      	cmp	r3, r2
 800786a:	d90e      	bls.n	800788a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	8b12      	ldrh	r2, [r2, #24]
 8007874:	1a9a      	subs	r2, r3, r2
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	8b12      	ldrh	r2, [r2, #24]
 8007882:	441a      	add	r2, r3
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	61da      	str	r2, [r3, #28]
 8007888:	e002      	b.n	8007890 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2200      	movs	r2, #0
 800788e:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007894:	2b00      	cmp	r3, #0
 8007896:	d004      	beq.n	80078a2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2201      	movs	r2, #1
 800789c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078a0:	e00e      	b.n	80078c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	2200      	movs	r2, #0
 80078a6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f000 f868 	bl	8007980 <USBH_CDC_TransmitCallback>
      break;
 80078b0:	e006      	b.n	80078c0 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80078b2:	7afb      	ldrb	r3, [r7, #11]
 80078b4:	2b02      	cmp	r3, #2
 80078b6:	d103      	bne.n	80078c0 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2201      	movs	r2, #1
 80078bc:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80078c0:	bf00      	nop
  }
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}

080078ca <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078ca:	b580      	push	{r7, lr}
 80078cc:	b086      	sub	sp, #24
 80078ce:	af00      	add	r7, sp, #0
 80078d0:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078dc:	2300      	movs	r3, #0
 80078de:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80078e6:	2b03      	cmp	r3, #3
 80078e8:	d002      	beq.n	80078f0 <CDC_ProcessReception+0x26>
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	d00e      	beq.n	800790c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80078ee:	e043      	b.n	8007978 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	6a19      	ldr	r1, [r3, #32]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	8b5a      	ldrh	r2, [r3, #26]
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	7b1b      	ldrb	r3, [r3, #12]
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f001 fc91 	bl	8009224 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2204      	movs	r2, #4
 8007906:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800790a:	e035      	b.n	8007978 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	7b1b      	ldrb	r3, [r3, #12]
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f001 ff90 	bl	8009838 <USBH_LL_GetURBState>
 8007918:	4603      	mov	r3, r0
 800791a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800791c:	7cfb      	ldrb	r3, [r7, #19]
 800791e:	2b01      	cmp	r3, #1
 8007920:	d129      	bne.n	8007976 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	7b1b      	ldrb	r3, [r3, #12]
 8007926:	4619      	mov	r1, r3
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f001 fef3 	bl	8009714 <USBH_LL_GetLastXferSize>
 800792e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007934:	68fa      	ldr	r2, [r7, #12]
 8007936:	429a      	cmp	r2, r3
 8007938:	d016      	beq.n	8007968 <CDC_ProcessReception+0x9e>
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	8b5b      	ldrh	r3, [r3, #26]
 800793e:	461a      	mov	r2, r3
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	4293      	cmp	r3, r2
 8007944:	d110      	bne.n	8007968 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	1ad2      	subs	r2, r2, r3
 800794e:	697b      	ldr	r3, [r7, #20]
 8007950:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	6a1a      	ldr	r2, [r3, #32]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	441a      	add	r2, r3
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800795e:	697b      	ldr	r3, [r7, #20]
 8007960:	2203      	movs	r2, #3
 8007962:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007966:	e006      	b.n	8007976 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f80f 	bl	8007994 <USBH_CDC_ReceiveCallback>
      break;
 8007976:	bf00      	nop
  }
}
 8007978:	bf00      	nop
 800797a:	3718      	adds	r7, #24
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b083      	sub	sp, #12
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079b0:	bf00      	nop
 80079b2:	370c      	adds	r7, #12
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d101      	bne.n	80079d4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079d0:	2302      	movs	r3, #2
 80079d2:	e029      	b.n	8007a28 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	79fa      	ldrb	r2, [r7, #7]
 80079d8:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 f81f 	bl	8007a30 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2200      	movs	r2, #0
 80079f6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	2200      	movs	r2, #0
 80079fe:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d003      	beq.n	8007a20 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	68ba      	ldr	r2, [r7, #8]
 8007a1c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f001 fdc3 	bl	80095ac <USBH_LL_Init>

  return USBH_OK;
 8007a26:	2300      	movs	r3, #0
}
 8007a28:	4618      	mov	r0, r3
 8007a2a:	3710      	adds	r7, #16
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	60fb      	str	r3, [r7, #12]
 8007a40:	e009      	b.n	8007a56 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	33e0      	adds	r3, #224	@ 0xe0
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	3301      	adds	r3, #1
 8007a54:	60fb      	str	r3, [r7, #12]
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2b0f      	cmp	r3, #15
 8007a5a:	d9f2      	bls.n	8007a42 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]
 8007a60:	e009      	b.n	8007a76 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	4413      	add	r3, r2
 8007a68:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	3301      	adds	r3, #1
 8007a74:	60fb      	str	r3, [r7, #12]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a7c:	d3f1      	bcc.n	8007a62 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2200      	movs	r2, #0
 8007a82:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2200      	movs	r2, #0
 8007a88:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2201      	movs	r2, #1
 8007a8e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2200      	movs	r2, #0
 8007a94:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2240      	movs	r2, #64	@ 0x40
 8007aa2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	331c      	adds	r3, #28
 8007ace:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ad2:	2100      	movs	r1, #0
 8007ad4:	4618      	mov	r0, r3
 8007ad6:	f002 fadb 	bl	800a090 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8007ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007ae4:	2100      	movs	r1, #0
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f002 fad2 	bl	800a090 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8007af2:	2212      	movs	r2, #18
 8007af4:	2100      	movs	r1, #0
 8007af6:	4618      	mov	r0, r3
 8007af8:	f002 faca 	bl	800a090 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007b02:	223e      	movs	r2, #62	@ 0x3e
 8007b04:	2100      	movs	r1, #0
 8007b06:	4618      	mov	r0, r3
 8007b08:	f002 fac2 	bl	800a090 <memset>

  return USBH_OK;
 8007b0c:	2300      	movs	r3, #0
}
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}

08007b16 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007b16:	b480      	push	{r7}
 8007b18:	b085      	sub	sp, #20
 8007b1a:	af00      	add	r7, sp, #0
 8007b1c:	6078      	str	r0, [r7, #4]
 8007b1e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007b20:	2300      	movs	r3, #0
 8007b22:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d016      	beq.n	8007b58 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10e      	bne.n	8007b52 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007b3a:	1c59      	adds	r1, r3, #1
 8007b3c:	687a      	ldr	r2, [r7, #4]
 8007b3e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	33de      	adds	r3, #222	@ 0xde
 8007b46:	6839      	ldr	r1, [r7, #0]
 8007b48:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	73fb      	strb	r3, [r7, #15]
 8007b50:	e004      	b.n	8007b5c <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b52:	2302      	movs	r3, #2
 8007b54:	73fb      	strb	r3, [r7, #15]
 8007b56:	e001      	b.n	8007b5c <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b58:	2302      	movs	r3, #2
 8007b5a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3714      	adds	r7, #20
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr

08007b6a <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b085      	sub	sp, #20
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	460b      	mov	r3, r1
 8007b74:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b76:	2300      	movs	r3, #0
 8007b78:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8007b80:	78fa      	ldrb	r2, [r7, #3]
 8007b82:	429a      	cmp	r2, r3
 8007b84:	d204      	bcs.n	8007b90 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	78fa      	ldrb	r2, [r7, #3]
 8007b8a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8007b8e:	e001      	b.n	8007b94 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b90:	2302      	movs	r3, #2
 8007b92:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3714      	adds	r7, #20
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	b087      	sub	sp, #28
 8007ba6:	af00      	add	r7, sp, #0
 8007ba8:	6078      	str	r0, [r7, #4]
 8007baa:	4608      	mov	r0, r1
 8007bac:	4611      	mov	r1, r2
 8007bae:	461a      	mov	r2, r3
 8007bb0:	4603      	mov	r3, r0
 8007bb2:	70fb      	strb	r3, [r7, #3]
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	70bb      	strb	r3, [r7, #2]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8007bca:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bcc:	e025      	b.n	8007c1a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007bce:	7dfb      	ldrb	r3, [r7, #23]
 8007bd0:	221a      	movs	r2, #26
 8007bd2:	fb02 f303 	mul.w	r3, r2, r3
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	68fa      	ldr	r2, [r7, #12]
 8007bda:	4413      	add	r3, r2
 8007bdc:	3302      	adds	r3, #2
 8007bde:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007be0:	693b      	ldr	r3, [r7, #16]
 8007be2:	795b      	ldrb	r3, [r3, #5]
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d002      	beq.n	8007bf0 <USBH_FindInterface+0x4e>
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	2bff      	cmp	r3, #255	@ 0xff
 8007bee:	d111      	bne.n	8007c14 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bf4:	78ba      	ldrb	r2, [r7, #2]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d002      	beq.n	8007c00 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bfa:	78bb      	ldrb	r3, [r7, #2]
 8007bfc:	2bff      	cmp	r3, #255	@ 0xff
 8007bfe:	d109      	bne.n	8007c14 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c00:	693b      	ldr	r3, [r7, #16]
 8007c02:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007c04:	787a      	ldrb	r2, [r7, #1]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d002      	beq.n	8007c10 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007c0a:	787b      	ldrb	r3, [r7, #1]
 8007c0c:	2bff      	cmp	r3, #255	@ 0xff
 8007c0e:	d101      	bne.n	8007c14 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
 8007c12:	e006      	b.n	8007c22 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
 8007c16:	3301      	adds	r3, #1
 8007c18:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007c1a:	7dfb      	ldrb	r3, [r7, #23]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d9d6      	bls.n	8007bce <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007c20:	23ff      	movs	r3, #255	@ 0xff
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	371c      	adds	r7, #28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2c:	4770      	bx	lr

08007c2e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b082      	sub	sp, #8
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fcf4 	bl	8009624 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 fe0d 	bl	800985e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
	...

08007c50 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af04      	add	r7, sp, #16
 8007c56:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8007c58:	2302      	movs	r3, #2
 8007c5a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8007c5c:	2300      	movs	r3, #0
 8007c5e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	2b01      	cmp	r3, #1
 8007c6a:	d102      	bne.n	8007c72 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2203      	movs	r2, #3
 8007c70:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	781b      	ldrb	r3, [r3, #0]
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	2b0b      	cmp	r3, #11
 8007c7a:	f200 81bb 	bhi.w	8007ff4 <USBH_Process+0x3a4>
 8007c7e:	a201      	add	r2, pc, #4	@ (adr r2, 8007c84 <USBH_Process+0x34>)
 8007c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c84:	08007cb5 	.word	0x08007cb5
 8007c88:	08007ce7 	.word	0x08007ce7
 8007c8c:	08007d4f 	.word	0x08007d4f
 8007c90:	08007f8f 	.word	0x08007f8f
 8007c94:	08007ff5 	.word	0x08007ff5
 8007c98:	08007def 	.word	0x08007def
 8007c9c:	08007f35 	.word	0x08007f35
 8007ca0:	08007e25 	.word	0x08007e25
 8007ca4:	08007e45 	.word	0x08007e45
 8007ca8:	08007e63 	.word	0x08007e63
 8007cac:	08007ea7 	.word	0x08007ea7
 8007cb0:	08007f77 	.word	0x08007f77
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8007cba:	b2db      	uxtb	r3, r3
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 819b 	beq.w	8007ff8 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2201      	movs	r2, #1
 8007cc6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007cc8:	20c8      	movs	r0, #200	@ 0xc8
 8007cca:	f001 fe12 	bl	80098f2 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f001 fd05 	bl	80096de <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007ce4:	e188      	b.n	8007ff8 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d107      	bne.n	8007d00 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007cfe:	e18a      	b.n	8008016 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d0a:	d914      	bls.n	8007d36 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d12:	3301      	adds	r3, #1
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8007d22:	2b03      	cmp	r3, #3
 8007d24:	d903      	bls.n	8007d2e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	220d      	movs	r2, #13
 8007d2a:	701a      	strb	r2, [r3, #0]
      break;
 8007d2c:	e173      	b.n	8008016 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	701a      	strb	r2, [r3, #0]
      break;
 8007d34:	e16f      	b.n	8008016 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8007d3c:	f103 020a 	add.w	r2, r3, #10
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8007d46:	200a      	movs	r0, #10
 8007d48:	f001 fdd3 	bl	80098f2 <USBH_Delay>
      break;
 8007d4c:	e163      	b.n	8008016 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d005      	beq.n	8007d64 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007d5e:	2104      	movs	r1, #4
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8007d64:	2064      	movs	r0, #100	@ 0x64
 8007d66:	f001 fdc4 	bl	80098f2 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f001 fc90 	bl	8009690 <USBH_LL_GetSpeed>
 8007d70:	4603      	mov	r3, r0
 8007d72:	461a      	mov	r2, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2205      	movs	r2, #5
 8007d7e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8007d80:	2100      	movs	r1, #0
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 fa9b 	bl	80092be <USBH_AllocPipe>
 8007d88:	4603      	mov	r3, r0
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8007d90:	2180      	movs	r1, #128	@ 0x80
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fa93 	bl	80092be <USBH_AllocPipe>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	7919      	ldrb	r1, [r3, #4]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007db4:	9202      	str	r2, [sp, #8]
 8007db6:	2200      	movs	r2, #0
 8007db8:	9201      	str	r2, [sp, #4]
 8007dba:	9300      	str	r3, [sp, #0]
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2280      	movs	r2, #128	@ 0x80
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f001 fa4d 	bl	8009260 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	7959      	ldrb	r1, [r3, #5]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007dda:	9202      	str	r2, [sp, #8]
 8007ddc:	2200      	movs	r2, #0
 8007dde:	9201      	str	r2, [sp, #4]
 8007de0:	9300      	str	r3, [sp, #0]
 8007de2:	4603      	mov	r3, r0
 8007de4:	2200      	movs	r2, #0
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f001 fa3a 	bl	8009260 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007dec:	e113      	b.n	8008016 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f916 	bl	8008020 <USBH_HandleEnum>
 8007df4:	4603      	mov	r3, r0
 8007df6:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007df8:	7bbb      	ldrb	r3, [r7, #14]
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f040 80fd 	bne.w	8007ffc <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d103      	bne.n	8007e1c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2208      	movs	r2, #8
 8007e18:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007e1a:	e0ef      	b.n	8007ffc <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2207      	movs	r2, #7
 8007e20:	701a      	strb	r2, [r3, #0]
      break;
 8007e22:	e0eb      	b.n	8007ffc <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80e8 	beq.w	8008000 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007e36:	2101      	movs	r1, #1
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2208      	movs	r2, #8
 8007e40:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8007e42:	e0dd      	b.n	8008000 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc3a 	bl	80086c6 <USBH_SetCfg>
 8007e52:	4603      	mov	r3, r0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f040 80d5 	bne.w	8008004 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	2209      	movs	r2, #9
 8007e5e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e60:	e0d0      	b.n	8008004 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d016      	beq.n	8007e9e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8007e70:	2101      	movs	r1, #1
 8007e72:	6878      	ldr	r0, [r7, #4]
 8007e74:	f000 fc4a 	bl	800870c <USBH_SetFeature>
 8007e78:	4603      	mov	r3, r0
 8007e7a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007e7c:	7bbb      	ldrb	r3, [r7, #14]
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d103      	bne.n	8007e8c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	220a      	movs	r2, #10
 8007e88:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007e8a:	e0bd      	b.n	8008008 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8007e8c:	7bbb      	ldrb	r3, [r7, #14]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	f040 80b9 	bne.w	8008008 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	220a      	movs	r2, #10
 8007e9a:	701a      	strb	r2, [r3, #0]
      break;
 8007e9c:	e0b4      	b.n	8008008 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	701a      	strb	r2, [r3, #0]
      break;
 8007ea4:	e0b0      	b.n	8008008 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	f000 80ad 	beq.w	800800c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007eba:	2300      	movs	r3, #0
 8007ebc:	73fb      	strb	r3, [r7, #15]
 8007ebe:	e016      	b.n	8007eee <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8007ec0:	7bfa      	ldrb	r2, [r7, #15]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32de      	adds	r2, #222	@ 0xde
 8007ec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007eca:	791a      	ldrb	r2, [r3, #4]
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8007ed2:	429a      	cmp	r2, r3
 8007ed4:	d108      	bne.n	8007ee8 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007ed6:	7bfa      	ldrb	r2, [r7, #15]
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32de      	adds	r2, #222	@ 0xde
 8007edc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8007ee6:	e005      	b.n	8007ef4 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007ee8:	7bfb      	ldrb	r3, [r7, #15]
 8007eea:	3301      	adds	r3, #1
 8007eec:	73fb      	strb	r3, [r7, #15]
 8007eee:	7bfb      	ldrb	r3, [r7, #15]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0e5      	beq.n	8007ec0 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d016      	beq.n	8007f2c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	4798      	blx	r3
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2206      	movs	r2, #6
 8007f14:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007f1c:	2103      	movs	r1, #3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f22:	e073      	b.n	800800c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	220d      	movs	r2, #13
 8007f28:	701a      	strb	r2, [r3, #0]
      break;
 8007f2a:	e06f      	b.n	800800c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	220d      	movs	r2, #13
 8007f30:	701a      	strb	r2, [r3, #0]
      break;
 8007f32:	e06b      	b.n	800800c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d017      	beq.n	8007f6e <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	4798      	blx	r3
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8007f4e:	7bbb      	ldrb	r3, [r7, #14]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d103      	bne.n	8007f5e <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	220b      	movs	r2, #11
 8007f5a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007f5c:	e058      	b.n	8008010 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8007f5e:	7bbb      	ldrb	r3, [r7, #14]
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d154      	bne.n	8008010 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	220d      	movs	r2, #13
 8007f6a:	701a      	strb	r2, [r3, #0]
      break;
 8007f6c:	e050      	b.n	8008010 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	220d      	movs	r2, #13
 8007f72:	701a      	strb	r2, [r3, #0]
      break;
 8007f74:	e04c      	b.n	8008010 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d049      	beq.n	8008014 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007f86:	695b      	ldr	r3, [r3, #20]
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	4798      	blx	r3
      }
      break;
 8007f8c:	e042      	b.n	8008014 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7ff fd4a 	bl	8007a30 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d009      	beq.n	8007fba <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007fac:	68db      	ldr	r3, [r3, #12]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d005      	beq.n	8007fd0 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8007fca:	2105      	movs	r1, #5
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d107      	bne.n	8007fec <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fe22 	bl	8007c2e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007fea:	e014      	b.n	8008016 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8007fec:	6878      	ldr	r0, [r7, #4]
 8007fee:	f001 fb19 	bl	8009624 <USBH_LL_Start>
      break;
 8007ff2:	e010      	b.n	8008016 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007ff4:	bf00      	nop
 8007ff6:	e00e      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 8007ff8:	bf00      	nop
 8007ffa:	e00c      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 8007ffc:	bf00      	nop
 8007ffe:	e00a      	b.n	8008016 <USBH_Process+0x3c6>
    break;
 8008000:	bf00      	nop
 8008002:	e008      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 8008004:	bf00      	nop
 8008006:	e006      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 8008008:	bf00      	nop
 800800a:	e004      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 800800c:	bf00      	nop
 800800e:	e002      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 8008010:	bf00      	nop
 8008012:	e000      	b.n	8008016 <USBH_Process+0x3c6>
      break;
 8008014:	bf00      	nop
  }
  return USBH_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b088      	sub	sp, #32
 8008024:	af04      	add	r7, sp, #16
 8008026:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008028:	2301      	movs	r3, #1
 800802a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800802c:	2301      	movs	r3, #1
 800802e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	785b      	ldrb	r3, [r3, #1]
 8008034:	2b07      	cmp	r3, #7
 8008036:	f200 81bd 	bhi.w	80083b4 <USBH_HandleEnum+0x394>
 800803a:	a201      	add	r2, pc, #4	@ (adr r2, 8008040 <USBH_HandleEnum+0x20>)
 800803c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008040:	08008061 	.word	0x08008061
 8008044:	0800811b 	.word	0x0800811b
 8008048:	08008185 	.word	0x08008185
 800804c:	0800820f 	.word	0x0800820f
 8008050:	08008279 	.word	0x08008279
 8008054:	080082e9 	.word	0x080082e9
 8008058:	0800832f 	.word	0x0800832f
 800805c:	08008375 	.word	0x08008375
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008060:	2108      	movs	r1, #8
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f000 fa4c 	bl	8008500 <USBH_Get_DevDesc>
 8008068:	4603      	mov	r3, r0
 800806a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800806c:	7bbb      	ldrb	r3, [r7, #14]
 800806e:	2b00      	cmp	r3, #0
 8008070:	d12e      	bne.n	80080d0 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	7919      	ldrb	r1, [r3, #4]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008092:	687a      	ldr	r2, [r7, #4]
 8008094:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008096:	9202      	str	r2, [sp, #8]
 8008098:	2200      	movs	r2, #0
 800809a:	9201      	str	r2, [sp, #4]
 800809c:	9300      	str	r3, [sp, #0]
 800809e:	4603      	mov	r3, r0
 80080a0:	2280      	movs	r2, #128	@ 0x80
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f001 f8dc 	bl	8009260 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	7959      	ldrb	r1, [r3, #5]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80080b8:	687a      	ldr	r2, [r7, #4]
 80080ba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80080bc:	9202      	str	r2, [sp, #8]
 80080be:	2200      	movs	r2, #0
 80080c0:	9201      	str	r2, [sp, #4]
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	4603      	mov	r3, r0
 80080c6:	2200      	movs	r2, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 f8c9 	bl	8009260 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80080ce:	e173      	b.n	80083b8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80080d0:	7bbb      	ldrb	r3, [r7, #14]
 80080d2:	2b03      	cmp	r3, #3
 80080d4:	f040 8170 	bne.w	80083b8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080de:	3301      	adds	r3, #1
 80080e0:	b2da      	uxtb	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80080ee:	2b03      	cmp	r3, #3
 80080f0:	d903      	bls.n	80080fa <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	220d      	movs	r2, #13
 80080f6:	701a      	strb	r2, [r3, #0]
      break;
 80080f8:	e15e      	b.n	80083b8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	795b      	ldrb	r3, [r3, #5]
 80080fe:	4619      	mov	r1, r3
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f001 f8fd 	bl	8009300 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	791b      	ldrb	r3, [r3, #4]
 800810a:	4619      	mov	r1, r3
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f001 f8f7 	bl	8009300 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	701a      	strb	r2, [r3, #0]
      break;
 8008118:	e14e      	b.n	80083b8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800811a:	2112      	movs	r1, #18
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f000 f9ef 	bl	8008500 <USBH_Get_DevDesc>
 8008122:	4603      	mov	r3, r0
 8008124:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008126:	7bbb      	ldrb	r3, [r7, #14]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d103      	bne.n	8008134 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	2202      	movs	r2, #2
 8008130:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008132:	e143      	b.n	80083bc <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008134:	7bbb      	ldrb	r3, [r7, #14]
 8008136:	2b03      	cmp	r3, #3
 8008138:	f040 8140 	bne.w	80083bc <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008142:	3301      	adds	r3, #1
 8008144:	b2da      	uxtb	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008152:	2b03      	cmp	r3, #3
 8008154:	d903      	bls.n	800815e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	220d      	movs	r2, #13
 800815a:	701a      	strb	r2, [r3, #0]
      break;
 800815c:	e12e      	b.n	80083bc <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	795b      	ldrb	r3, [r3, #5]
 8008162:	4619      	mov	r1, r3
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f001 f8cb 	bl	8009300 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	791b      	ldrb	r3, [r3, #4]
 800816e:	4619      	mov	r1, r3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f001 f8c5 	bl	8009300 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2200      	movs	r2, #0
 8008180:	701a      	strb	r2, [r3, #0]
      break;
 8008182:	e11b      	b.n	80083bc <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008184:	2101      	movs	r1, #1
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 fa79 	bl	800867e <USBH_SetAddress>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008190:	7bbb      	ldrb	r3, [r7, #14]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d130      	bne.n	80081f8 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008196:	2002      	movs	r0, #2
 8008198:	f001 fbab 	bl	80098f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2201      	movs	r2, #1
 80081a0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2203      	movs	r2, #3
 80081a8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	7919      	ldrb	r1, [r3, #4]
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80081be:	9202      	str	r2, [sp, #8]
 80081c0:	2200      	movs	r2, #0
 80081c2:	9201      	str	r2, [sp, #4]
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	4603      	mov	r3, r0
 80081c8:	2280      	movs	r2, #128	@ 0x80
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f001 f848 	bl	8009260 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	7959      	ldrb	r1, [r3, #5]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80081e0:	687a      	ldr	r2, [r7, #4]
 80081e2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80081e4:	9202      	str	r2, [sp, #8]
 80081e6:	2200      	movs	r2, #0
 80081e8:	9201      	str	r2, [sp, #4]
 80081ea:	9300      	str	r3, [sp, #0]
 80081ec:	4603      	mov	r3, r0
 80081ee:	2200      	movs	r2, #0
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f001 f835 	bl	8009260 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80081f6:	e0e3      	b.n	80083c0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80081f8:	7bbb      	ldrb	r3, [r7, #14]
 80081fa:	2b03      	cmp	r3, #3
 80081fc:	f040 80e0 	bne.w	80083c0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	220d      	movs	r2, #13
 8008204:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	705a      	strb	r2, [r3, #1]
      break;
 800820c:	e0d8      	b.n	80083c0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800820e:	2109      	movs	r1, #9
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f000 f9a1 	bl	8008558 <USBH_Get_CfgDesc>
 8008216:	4603      	mov	r3, r0
 8008218:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800821a:	7bbb      	ldrb	r3, [r7, #14]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d103      	bne.n	8008228 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2204      	movs	r2, #4
 8008224:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008226:	e0cd      	b.n	80083c4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008228:	7bbb      	ldrb	r3, [r7, #14]
 800822a:	2b03      	cmp	r3, #3
 800822c:	f040 80ca 	bne.w	80083c4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008236:	3301      	adds	r3, #1
 8008238:	b2da      	uxtb	r2, r3
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008246:	2b03      	cmp	r3, #3
 8008248:	d903      	bls.n	8008252 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	220d      	movs	r2, #13
 800824e:	701a      	strb	r2, [r3, #0]
      break;
 8008250:	e0b8      	b.n	80083c4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	795b      	ldrb	r3, [r3, #5]
 8008256:	4619      	mov	r1, r3
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f001 f851 	bl	8009300 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	791b      	ldrb	r3, [r3, #4]
 8008262:	4619      	mov	r1, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 f84b 	bl	8009300 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
      break;
 8008276:	e0a5      	b.n	80083c4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f000 f969 	bl	8008558 <USBH_Get_CfgDesc>
 8008286:	4603      	mov	r3, r0
 8008288:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800828a:	7bbb      	ldrb	r3, [r7, #14]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d103      	bne.n	8008298 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2205      	movs	r2, #5
 8008294:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008296:	e097      	b.n	80083c8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008298:	7bbb      	ldrb	r3, [r7, #14]
 800829a:	2b03      	cmp	r3, #3
 800829c:	f040 8094 	bne.w	80083c8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082a6:	3301      	adds	r3, #1
 80082a8:	b2da      	uxtb	r2, r3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80082b6:	2b03      	cmp	r3, #3
 80082b8:	d903      	bls.n	80082c2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	220d      	movs	r2, #13
 80082be:	701a      	strb	r2, [r3, #0]
      break;
 80082c0:	e082      	b.n	80083c8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	795b      	ldrb	r3, [r3, #5]
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 f819 	bl	8009300 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	791b      	ldrb	r3, [r3, #4]
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 f813 	bl	8009300 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2200      	movs	r2, #0
 80082de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2200      	movs	r2, #0
 80082e4:	701a      	strb	r2, [r3, #0]
      break;
 80082e6:	e06f      	b.n	80083c8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d019      	beq.n	8008326 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 80082fe:	23ff      	movs	r3, #255	@ 0xff
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 f953 	bl	80085ac <USBH_Get_StringDesc>
 8008306:	4603      	mov	r3, r0
 8008308:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d103      	bne.n	8008318 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2206      	movs	r2, #6
 8008314:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008316:	e059      	b.n	80083cc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008318:	7bbb      	ldrb	r3, [r7, #14]
 800831a:	2b03      	cmp	r3, #3
 800831c:	d156      	bne.n	80083cc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2206      	movs	r2, #6
 8008322:	705a      	strb	r2, [r3, #1]
      break;
 8008324:	e052      	b.n	80083cc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2206      	movs	r2, #6
 800832a:	705a      	strb	r2, [r3, #1]
      break;
 800832c:	e04e      	b.n	80083cc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008334:	2b00      	cmp	r3, #0
 8008336:	d019      	beq.n	800836c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008344:	23ff      	movs	r3, #255	@ 0xff
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 f930 	bl	80085ac <USBH_Get_StringDesc>
 800834c:	4603      	mov	r3, r0
 800834e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008350:	7bbb      	ldrb	r3, [r7, #14]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d103      	bne.n	800835e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2207      	movs	r2, #7
 800835a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800835c:	e038      	b.n	80083d0 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800835e:	7bbb      	ldrb	r3, [r7, #14]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d135      	bne.n	80083d0 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2207      	movs	r2, #7
 8008368:	705a      	strb	r2, [r3, #1]
      break;
 800836a:	e031      	b.n	80083d0 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2207      	movs	r2, #7
 8008370:	705a      	strb	r2, [r3, #1]
      break;
 8008372:	e02d      	b.n	80083d0 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800837a:	2b00      	cmp	r3, #0
 800837c:	d017      	beq.n	80083ae <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800838a:	23ff      	movs	r3, #255	@ 0xff
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f90d 	bl	80085ac <USBH_Get_StringDesc>
 8008392:	4603      	mov	r3, r0
 8008394:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008396:	7bbb      	ldrb	r3, [r7, #14]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800839c:	2300      	movs	r3, #0
 800839e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80083a0:	e018      	b.n	80083d4 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80083a2:	7bbb      	ldrb	r3, [r7, #14]
 80083a4:	2b03      	cmp	r3, #3
 80083a6:	d115      	bne.n	80083d4 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80083a8:	2300      	movs	r3, #0
 80083aa:	73fb      	strb	r3, [r7, #15]
      break;
 80083ac:	e012      	b.n	80083d4 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	73fb      	strb	r3, [r7, #15]
      break;
 80083b2:	e00f      	b.n	80083d4 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80083b4:	bf00      	nop
 80083b6:	e00e      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083b8:	bf00      	nop
 80083ba:	e00c      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083bc:	bf00      	nop
 80083be:	e00a      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083c0:	bf00      	nop
 80083c2:	e008      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083c4:	bf00      	nop
 80083c6:	e006      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083c8:	bf00      	nop
 80083ca:	e004      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083cc:	bf00      	nop
 80083ce:	e002      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083d0:	bf00      	nop
 80083d2:	e000      	b.n	80083d6 <USBH_HandleEnum+0x3b6>
      break;
 80083d4:	bf00      	nop
  }
  return Status;
 80083d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80083d8:	4618      	mov	r0, r3
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	683a      	ldr	r2, [r7, #0]
 80083ee:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr

080083fe <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800840c:	1c5a      	adds	r2, r3, #1
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008414:	6878      	ldr	r0, [r7, #4]
 8008416:	f000 f804 	bl	8008422 <USBH_HandleSof>
}
 800841a:	bf00      	nop
 800841c:	3708      	adds	r7, #8
 800841e:	46bd      	mov	sp, r7
 8008420:	bd80      	pop	{r7, pc}

08008422 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008422:	b580      	push	{r7, lr}
 8008424:	b082      	sub	sp, #8
 8008426:	af00      	add	r7, sp, #0
 8008428:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	781b      	ldrb	r3, [r3, #0]
 800842e:	b2db      	uxtb	r3, r3
 8008430:	2b0b      	cmp	r3, #11
 8008432:	d10a      	bne.n	800844a <USBH_HandleSof+0x28>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800843a:	2b00      	cmp	r3, #0
 800843c:	d005      	beq.n	800844a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	4798      	blx	r3
  }
}
 800844a:	bf00      	nop
 800844c:	3708      	adds	r7, #8
 800844e:	46bd      	mov	sp, r7
 8008450:	bd80      	pop	{r7, pc}

08008452 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008452:	b480      	push	{r7}
 8008454:	b083      	sub	sp, #12
 8008456:	af00      	add	r7, sp, #0
 8008458:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2201      	movs	r2, #1
 800845e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008462:	bf00      	nop
}
 8008464:	370c      	adds	r7, #12
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr

0800846e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800846e:	b480      	push	{r7}
 8008470:	b083      	sub	sp, #12
 8008472:	af00      	add	r7, sp, #0
 8008474:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800847e:	bf00      	nop
}
 8008480:	370c      	adds	r7, #12
 8008482:	46bd      	mov	sp, r7
 8008484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008488:	4770      	bx	lr

0800848a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800848a:	b480      	push	{r7}
 800848c:	b083      	sub	sp, #12
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2201      	movs	r2, #1
 80084c4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	2200      	movs	r2, #0
 80084cc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2200      	movs	r2, #0
 80084d4:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f001 f8be 	bl	800965a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	791b      	ldrb	r3, [r3, #4]
 80084e2:	4619      	mov	r1, r3
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f000 ff0b 	bl	8009300 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	795b      	ldrb	r3, [r3, #5]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f000 ff05 	bl	8009300 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af02      	add	r7, sp, #8
 8008506:	6078      	str	r0, [r7, #4]
 8008508:	460b      	mov	r3, r1
 800850a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800850c:	887b      	ldrh	r3, [r7, #2]
 800850e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008512:	d901      	bls.n	8008518 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008514:	2303      	movs	r3, #3
 8008516:	e01b      	b.n	8008550 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800851e:	887b      	ldrh	r3, [r7, #2]
 8008520:	9300      	str	r3, [sp, #0]
 8008522:	4613      	mov	r3, r2
 8008524:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008528:	2100      	movs	r1, #0
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f872 	bl	8008614 <USBH_GetDescriptor>
 8008530:	4603      	mov	r3, r0
 8008532:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008540:	887a      	ldrh	r2, [r7, #2]
 8008542:	4619      	mov	r1, r3
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 f929 	bl	800879c <USBH_ParseDevDesc>
 800854a:	4603      	mov	r3, r0
 800854c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800854e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3710      	adds	r7, #16
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af02      	add	r7, sp, #8
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	460b      	mov	r3, r1
 8008562:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	331c      	adds	r3, #28
 8008568:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800856a:	887b      	ldrh	r3, [r7, #2]
 800856c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008570:	d901      	bls.n	8008576 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8008572:	2303      	movs	r3, #3
 8008574:	e016      	b.n	80085a4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8008576:	887b      	ldrh	r3, [r7, #2]
 8008578:	9300      	str	r3, [sp, #0]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008580:	2100      	movs	r1, #0
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f000 f846 	bl	8008614 <USBH_GetDescriptor>
 8008588:	4603      	mov	r3, r0
 800858a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d107      	bne.n	80085a2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8008592:	887b      	ldrh	r3, [r7, #2]
 8008594:	461a      	mov	r2, r3
 8008596:	68b9      	ldr	r1, [r7, #8]
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 f9af 	bl	80088fc <USBH_ParseCfgDesc>
 800859e:	4603      	mov	r3, r0
 80085a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80085a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80085a4:	4618      	mov	r0, r3
 80085a6:	3710      	adds	r7, #16
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}

080085ac <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b088      	sub	sp, #32
 80085b0:	af02      	add	r7, sp, #8
 80085b2:	60f8      	str	r0, [r7, #12]
 80085b4:	607a      	str	r2, [r7, #4]
 80085b6:	461a      	mov	r2, r3
 80085b8:	460b      	mov	r3, r1
 80085ba:	72fb      	strb	r3, [r7, #11]
 80085bc:	4613      	mov	r3, r2
 80085be:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80085c0:	893b      	ldrh	r3, [r7, #8]
 80085c2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80085c6:	d802      	bhi.n	80085ce <USBH_Get_StringDesc+0x22>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80085ce:	2303      	movs	r3, #3
 80085d0:	e01c      	b.n	800860c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80085d2:	7afb      	ldrb	r3, [r7, #11]
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80085da:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80085e2:	893b      	ldrh	r3, [r7, #8]
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	460b      	mov	r3, r1
 80085e8:	2100      	movs	r1, #0
 80085ea:	68f8      	ldr	r0, [r7, #12]
 80085ec:	f000 f812 	bl	8008614 <USBH_GetDescriptor>
 80085f0:	4603      	mov	r3, r0
 80085f2:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80085f4:	7dfb      	ldrb	r3, [r7, #23]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d107      	bne.n	800860a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008600:	893a      	ldrh	r2, [r7, #8]
 8008602:	6879      	ldr	r1, [r7, #4]
 8008604:	4618      	mov	r0, r3
 8008606:	f000 fb8d 	bl	8008d24 <USBH_ParseStringDesc>
  }

  return status;
 800860a:	7dfb      	ldrb	r3, [r7, #23]
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}

08008614 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b084      	sub	sp, #16
 8008618:	af00      	add	r7, sp, #0
 800861a:	60f8      	str	r0, [r7, #12]
 800861c:	607b      	str	r3, [r7, #4]
 800861e:	460b      	mov	r3, r1
 8008620:	72fb      	strb	r3, [r7, #11]
 8008622:	4613      	mov	r3, r2
 8008624:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	789b      	ldrb	r3, [r3, #2]
 800862a:	2b01      	cmp	r3, #1
 800862c:	d11c      	bne.n	8008668 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800862e:	7afb      	ldrb	r3, [r7, #11]
 8008630:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008634:	b2da      	uxtb	r2, r3
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2206      	movs	r2, #6
 800863e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	893a      	ldrh	r2, [r7, #8]
 8008644:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8008646:	893b      	ldrh	r3, [r7, #8]
 8008648:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800864c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008650:	d104      	bne.n	800865c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	f240 4209 	movw	r2, #1033	@ 0x409
 8008658:	829a      	strh	r2, [r3, #20]
 800865a:	e002      	b.n	8008662 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2200      	movs	r2, #0
 8008660:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	8b3a      	ldrh	r2, [r7, #24]
 8008666:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8008668:	8b3b      	ldrh	r3, [r7, #24]
 800866a:	461a      	mov	r2, r3
 800866c:	6879      	ldr	r1, [r7, #4]
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 fba5 	bl	8008dbe <USBH_CtlReq>
 8008674:	4603      	mov	r3, r0
}
 8008676:	4618      	mov	r0, r3
 8008678:	3710      	adds	r7, #16
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}

0800867e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800867e:	b580      	push	{r7, lr}
 8008680:	b082      	sub	sp, #8
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
 8008686:	460b      	mov	r3, r1
 8008688:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	789b      	ldrb	r3, [r3, #2]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d10f      	bne.n	80086b2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2205      	movs	r2, #5
 800869c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800869e:	78fb      	ldrb	r3, [r7, #3]
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086b2:	2200      	movs	r2, #0
 80086b4:	2100      	movs	r1, #0
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 fb81 	bl	8008dbe <USBH_CtlReq>
 80086bc:	4603      	mov	r3, r0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3708      	adds	r7, #8
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}

080086c6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	460b      	mov	r3, r1
 80086d0:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	789b      	ldrb	r3, [r3, #2]
 80086d6:	2b01      	cmp	r3, #1
 80086d8:	d10e      	bne.n	80086f8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2209      	movs	r2, #9
 80086e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	887a      	ldrh	r2, [r7, #2]
 80086ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2200      	movs	r2, #0
 80086f0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2200      	movs	r2, #0
 80086f6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80086f8:	2200      	movs	r2, #0
 80086fa:	2100      	movs	r1, #0
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 fb5e 	bl	8008dbe <USBH_CtlReq>
 8008702:	4603      	mov	r3, r0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3708      	adds	r7, #8
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
 8008714:	460b      	mov	r3, r1
 8008716:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	789b      	ldrb	r3, [r3, #2]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d10f      	bne.n	8008740 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2203      	movs	r2, #3
 800872a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800872c:	78fb      	ldrb	r3, [r7, #3]
 800872e:	b29a      	uxth	r2, r3
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008740:	2200      	movs	r2, #0
 8008742:	2100      	movs	r1, #0
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f000 fb3a 	bl	8008dbe <USBH_CtlReq>
 800874a:	4603      	mov	r3, r0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b082      	sub	sp, #8
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
 800875c:	460b      	mov	r3, r1
 800875e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	789b      	ldrb	r3, [r3, #2]
 8008764:	2b01      	cmp	r3, #1
 8008766:	d10f      	bne.n	8008788 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2202      	movs	r2, #2
 800876c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800877a:	78fb      	ldrb	r3, [r7, #3]
 800877c:	b29a      	uxth	r2, r3
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8008788:	2200      	movs	r2, #0
 800878a:	2100      	movs	r1, #0
 800878c:	6878      	ldr	r0, [r7, #4]
 800878e:	f000 fb16 	bl	8008dbe <USBH_CtlReq>
 8008792:	4603      	mov	r3, r0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800879c:	b480      	push	{r7}
 800879e:	b087      	sub	sp, #28
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	60b9      	str	r1, [r7, #8]
 80087a6:	4613      	mov	r3, r2
 80087a8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80087b0:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80087bc:	2302      	movs	r3, #2
 80087be:	e094      	b.n	80088ea <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	781a      	ldrb	r2, [r3, #0]
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	785a      	ldrb	r2, [r3, #1]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	3302      	adds	r3, #2
 80087d4:	781b      	ldrb	r3, [r3, #0]
 80087d6:	461a      	mov	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	3303      	adds	r3, #3
 80087dc:	781b      	ldrb	r3, [r3, #0]
 80087de:	021b      	lsls	r3, r3, #8
 80087e0:	b29b      	uxth	r3, r3
 80087e2:	4313      	orrs	r3, r2
 80087e4:	b29a      	uxth	r2, r3
 80087e6:	693b      	ldr	r3, [r7, #16]
 80087e8:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	791a      	ldrb	r2, [r3, #4]
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80087f2:	68bb      	ldr	r3, [r7, #8]
 80087f4:	795a      	ldrb	r2, [r3, #5]
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	799a      	ldrb	r2, [r3, #6]
 80087fe:	693b      	ldr	r3, [r7, #16]
 8008800:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	79da      	ldrb	r2, [r3, #7]
 8008806:	693b      	ldr	r3, [r7, #16]
 8008808:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008810:	2b00      	cmp	r3, #0
 8008812:	d004      	beq.n	800881e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800881a:	2b01      	cmp	r3, #1
 800881c:	d11b      	bne.n	8008856 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800881e:	693b      	ldr	r3, [r7, #16]
 8008820:	79db      	ldrb	r3, [r3, #7]
 8008822:	2b20      	cmp	r3, #32
 8008824:	dc0f      	bgt.n	8008846 <USBH_ParseDevDesc+0xaa>
 8008826:	2b08      	cmp	r3, #8
 8008828:	db0f      	blt.n	800884a <USBH_ParseDevDesc+0xae>
 800882a:	3b08      	subs	r3, #8
 800882c:	4a32      	ldr	r2, [pc, #200]	@ (80088f8 <USBH_ParseDevDesc+0x15c>)
 800882e:	fa22 f303 	lsr.w	r3, r2, r3
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	2b00      	cmp	r3, #0
 8008838:	bf14      	ite	ne
 800883a:	2301      	movne	r3, #1
 800883c:	2300      	moveq	r3, #0
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d106      	bne.n	8008852 <USBH_ParseDevDesc+0xb6>
 8008844:	e001      	b.n	800884a <USBH_ParseDevDesc+0xae>
 8008846:	2b40      	cmp	r3, #64	@ 0x40
 8008848:	d003      	beq.n	8008852 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	2208      	movs	r2, #8
 800884e:	71da      	strb	r2, [r3, #7]
        break;
 8008850:	e000      	b.n	8008854 <USBH_ParseDevDesc+0xb8>
        break;
 8008852:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8008854:	e00e      	b.n	8008874 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800885c:	2b02      	cmp	r3, #2
 800885e:	d107      	bne.n	8008870 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8008860:	693b      	ldr	r3, [r7, #16]
 8008862:	79db      	ldrb	r3, [r3, #7]
 8008864:	2b08      	cmp	r3, #8
 8008866:	d005      	beq.n	8008874 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2208      	movs	r2, #8
 800886c:	71da      	strb	r2, [r3, #7]
 800886e:	e001      	b.n	8008874 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008870:	2303      	movs	r3, #3
 8008872:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8008874:	88fb      	ldrh	r3, [r7, #6]
 8008876:	2b08      	cmp	r3, #8
 8008878:	d936      	bls.n	80088e8 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	3308      	adds	r3, #8
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	461a      	mov	r2, r3
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	3309      	adds	r3, #9
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	021b      	lsls	r3, r3, #8
 800888a:	b29b      	uxth	r3, r3
 800888c:	4313      	orrs	r3, r2
 800888e:	b29a      	uxth	r2, r3
 8008890:	693b      	ldr	r3, [r7, #16]
 8008892:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	330a      	adds	r3, #10
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	461a      	mov	r2, r3
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	330b      	adds	r3, #11
 80088a0:	781b      	ldrb	r3, [r3, #0]
 80088a2:	021b      	lsls	r3, r3, #8
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	4313      	orrs	r3, r2
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	330c      	adds	r3, #12
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	461a      	mov	r2, r3
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	330d      	adds	r3, #13
 80088ba:	781b      	ldrb	r3, [r3, #0]
 80088bc:	021b      	lsls	r3, r3, #8
 80088be:	b29b      	uxth	r3, r3
 80088c0:	4313      	orrs	r3, r2
 80088c2:	b29a      	uxth	r2, r3
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	7b9a      	ldrb	r2, [r3, #14]
 80088cc:	693b      	ldr	r3, [r7, #16]
 80088ce:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	7bda      	ldrb	r2, [r3, #15]
 80088d4:	693b      	ldr	r3, [r7, #16]
 80088d6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	7c1a      	ldrb	r2, [r3, #16]
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	7c5a      	ldrb	r2, [r3, #17]
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80088ea:	4618      	mov	r0, r3
 80088ec:	371c      	adds	r7, #28
 80088ee:	46bd      	mov	sp, r7
 80088f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f4:	4770      	bx	lr
 80088f6:	bf00      	nop
 80088f8:	01000101 	.word	0x01000101

080088fc <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	b08c      	sub	sp, #48	@ 0x30
 8008900:	af00      	add	r7, sp, #0
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	60b9      	str	r1, [r7, #8]
 8008906:	4613      	mov	r3, r2
 8008908:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008910:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8008912:	2300      	movs	r3, #0
 8008914:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800891e:	2300      	movs	r3, #0
 8008920:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d101      	bne.n	800892e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800892a:	2302      	movs	r3, #2
 800892c:	e0da      	b.n	8008ae4 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8008932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008934:	781b      	ldrb	r3, [r3, #0]
 8008936:	2b09      	cmp	r3, #9
 8008938:	d002      	beq.n	8008940 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800893a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800893c:	2209      	movs	r2, #9
 800893e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	781a      	ldrb	r2, [r3, #0]
 8008944:	6a3b      	ldr	r3, [r7, #32]
 8008946:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	785a      	ldrb	r2, [r3, #1]
 800894c:	6a3b      	ldr	r3, [r7, #32]
 800894e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	3302      	adds	r3, #2
 8008954:	781b      	ldrb	r3, [r3, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	3303      	adds	r3, #3
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	021b      	lsls	r3, r3, #8
 8008960:	b29b      	uxth	r3, r3
 8008962:	4313      	orrs	r3, r2
 8008964:	b29b      	uxth	r3, r3
 8008966:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800896a:	bf28      	it	cs
 800896c:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8008970:	b29a      	uxth	r2, r3
 8008972:	6a3b      	ldr	r3, [r7, #32]
 8008974:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	791a      	ldrb	r2, [r3, #4]
 800897a:	6a3b      	ldr	r3, [r7, #32]
 800897c:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	795a      	ldrb	r2, [r3, #5]
 8008982:	6a3b      	ldr	r3, [r7, #32]
 8008984:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	799a      	ldrb	r2, [r3, #6]
 800898a:	6a3b      	ldr	r3, [r7, #32]
 800898c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	79da      	ldrb	r2, [r3, #7]
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	7a1a      	ldrb	r2, [r3, #8]
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800899e:	88fb      	ldrh	r3, [r7, #6]
 80089a0:	2b09      	cmp	r3, #9
 80089a2:	f240 809d 	bls.w	8008ae0 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80089a6:	2309      	movs	r3, #9
 80089a8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80089ae:	e081      	b.n	8008ab4 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089b0:	f107 0316 	add.w	r3, r7, #22
 80089b4:	4619      	mov	r1, r3
 80089b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b8:	f000 f9e7 	bl	8008d8a <USBH_GetNextDesc>
 80089bc:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80089be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c0:	785b      	ldrb	r3, [r3, #1]
 80089c2:	2b04      	cmp	r3, #4
 80089c4:	d176      	bne.n	8008ab4 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80089c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c8:	781b      	ldrb	r3, [r3, #0]
 80089ca:	2b09      	cmp	r3, #9
 80089cc:	d002      	beq.n	80089d4 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80089ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089d0:	2209      	movs	r2, #9
 80089d2:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80089d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089d8:	221a      	movs	r2, #26
 80089da:	fb02 f303 	mul.w	r3, r2, r3
 80089de:	3308      	adds	r3, #8
 80089e0:	6a3a      	ldr	r2, [r7, #32]
 80089e2:	4413      	add	r3, r2
 80089e4:	3302      	adds	r3, #2
 80089e6:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80089e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089ea:	69f8      	ldr	r0, [r7, #28]
 80089ec:	f000 f87e 	bl	8008aec <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80089f6:	2300      	movs	r3, #0
 80089f8:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80089fa:	e043      	b.n	8008a84 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80089fc:	f107 0316 	add.w	r3, r7, #22
 8008a00:	4619      	mov	r1, r3
 8008a02:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008a04:	f000 f9c1 	bl	8008d8a <USBH_GetNextDesc>
 8008a08:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a0c:	785b      	ldrb	r3, [r3, #1]
 8008a0e:	2b05      	cmp	r3, #5
 8008a10:	d138      	bne.n	8008a84 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a12:	69fb      	ldr	r3, [r7, #28]
 8008a14:	795b      	ldrb	r3, [r3, #5]
 8008a16:	2b01      	cmp	r3, #1
 8008a18:	d113      	bne.n	8008a42 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	d003      	beq.n	8008a2a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	799b      	ldrb	r3, [r3, #6]
 8008a26:	2b03      	cmp	r3, #3
 8008a28:	d10b      	bne.n	8008a42 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	79db      	ldrb	r3, [r3, #7]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d10b      	bne.n	8008a4a <USBH_ParseCfgDesc+0x14e>
 8008a32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	2b09      	cmp	r3, #9
 8008a38:	d007      	beq.n	8008a4a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8008a3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a3c:	2209      	movs	r2, #9
 8008a3e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a40:	e003      	b.n	8008a4a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8008a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a44:	2207      	movs	r2, #7
 8008a46:	701a      	strb	r2, [r3, #0]
 8008a48:	e000      	b.n	8008a4c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8008a4a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8008a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008a50:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a54:	3201      	adds	r2, #1
 8008a56:	00d2      	lsls	r2, r2, #3
 8008a58:	211a      	movs	r1, #26
 8008a5a:	fb01 f303 	mul.w	r3, r1, r3
 8008a5e:	4413      	add	r3, r2
 8008a60:	3308      	adds	r3, #8
 8008a62:	6a3a      	ldr	r2, [r7, #32]
 8008a64:	4413      	add	r3, r2
 8008a66:	3304      	adds	r3, #4
 8008a68:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8008a6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008a6c:	69b9      	ldr	r1, [r7, #24]
 8008a6e:	68f8      	ldr	r0, [r7, #12]
 8008a70:	f000 f870 	bl	8008b54 <USBH_ParseEPDesc>
 8008a74:	4603      	mov	r3, r0
 8008a76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8008a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008a7e:	3301      	adds	r3, #1
 8008a80:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	791b      	ldrb	r3, [r3, #4]
 8008a88:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008a8c:	429a      	cmp	r2, r3
 8008a8e:	d204      	bcs.n	8008a9a <USBH_ParseCfgDesc+0x19e>
 8008a90:	6a3b      	ldr	r3, [r7, #32]
 8008a92:	885a      	ldrh	r2, [r3, #2]
 8008a94:	8afb      	ldrh	r3, [r7, #22]
 8008a96:	429a      	cmp	r2, r3
 8008a98:	d8b0      	bhi.n	80089fc <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8008a9a:	69fb      	ldr	r3, [r7, #28]
 8008a9c:	791b      	ldrb	r3, [r3, #4]
 8008a9e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d201      	bcs.n	8008aaa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8008aa6:	2303      	movs	r3, #3
 8008aa8:	e01c      	b.n	8008ae4 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8008aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008aae:	3301      	adds	r3, #1
 8008ab0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8008ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008ab8:	2b01      	cmp	r3, #1
 8008aba:	d805      	bhi.n	8008ac8 <USBH_ParseCfgDesc+0x1cc>
 8008abc:	6a3b      	ldr	r3, [r7, #32]
 8008abe:	885a      	ldrh	r2, [r3, #2]
 8008ac0:	8afb      	ldrh	r3, [r7, #22]
 8008ac2:	429a      	cmp	r2, r3
 8008ac4:	f63f af74 	bhi.w	80089b0 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8008ac8:	6a3b      	ldr	r3, [r7, #32]
 8008aca:	791b      	ldrb	r3, [r3, #4]
 8008acc:	2b02      	cmp	r3, #2
 8008ace:	bf28      	it	cs
 8008ad0:	2302      	movcs	r3, #2
 8008ad2:	b2db      	uxtb	r3, r3
 8008ad4:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d201      	bcs.n	8008ae0 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8008adc:	2303      	movs	r3, #3
 8008ade:	e001      	b.n	8008ae4 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8008ae0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008ae4:	4618      	mov	r0, r3
 8008ae6:	3730      	adds	r7, #48	@ 0x30
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	bd80      	pop	{r7, pc}

08008aec <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	785a      	ldrb	r2, [r3, #1]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	789a      	ldrb	r2, [r3, #2]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	78da      	ldrb	r2, [r3, #3]
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	3304      	adds	r3, #4
 8008b1a:	781b      	ldrb	r3, [r3, #0]
 8008b1c:	2b02      	cmp	r3, #2
 8008b1e:	bf28      	it	cs
 8008b20:	2302      	movcs	r3, #2
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	795a      	ldrb	r2, [r3, #5]
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8008b30:	683b      	ldr	r3, [r7, #0]
 8008b32:	799a      	ldrb	r2, [r3, #6]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	79da      	ldrb	r2, [r3, #7]
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	7a1a      	ldrb	r2, [r3, #8]
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	721a      	strb	r2, [r3, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8008b54:	b480      	push	{r7}
 8008b56:	b087      	sub	sp, #28
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	60f8      	str	r0, [r7, #12]
 8008b5c:	60b9      	str	r1, [r7, #8]
 8008b5e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	781a      	ldrb	r2, [r3, #0]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	785a      	ldrb	r2, [r3, #1]
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	789a      	ldrb	r2, [r3, #2]
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	78da      	ldrb	r2, [r3, #3]
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3304      	adds	r3, #4
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	3305      	adds	r3, #5
 8008b90:	781b      	ldrb	r3, [r3, #0]
 8008b92:	021b      	lsls	r3, r3, #8
 8008b94:	b29b      	uxth	r3, r3
 8008b96:	4313      	orrs	r3, r2
 8008b98:	b29a      	uxth	r2, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	799a      	ldrb	r2, [r3, #6]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	889b      	ldrh	r3, [r3, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d009      	beq.n	8008bc2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8008bb2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008bb6:	d804      	bhi.n	8008bc2 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8008bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008bc0:	d901      	bls.n	8008bc6 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8008bc2:	2303      	movs	r3, #3
 8008bc4:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d136      	bne.n	8008c3e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	78db      	ldrb	r3, [r3, #3]
 8008bd4:	f003 0303 	and.w	r3, r3, #3
 8008bd8:	2b02      	cmp	r3, #2
 8008bda:	d108      	bne.n	8008bee <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	889b      	ldrh	r3, [r3, #4]
 8008be0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008be4:	f240 8097 	bls.w	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008be8:	2303      	movs	r3, #3
 8008bea:	75fb      	strb	r3, [r7, #23]
 8008bec:	e093      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	78db      	ldrb	r3, [r3, #3]
 8008bf2:	f003 0303 	and.w	r3, r3, #3
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d107      	bne.n	8008c0a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	889b      	ldrh	r3, [r3, #4]
 8008bfe:	2b40      	cmp	r3, #64	@ 0x40
 8008c00:	f240 8089 	bls.w	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c04:	2303      	movs	r3, #3
 8008c06:	75fb      	strb	r3, [r7, #23]
 8008c08:	e085      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	78db      	ldrb	r3, [r3, #3]
 8008c0e:	f003 0303 	and.w	r3, r3, #3
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d005      	beq.n	8008c22 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	78db      	ldrb	r3, [r3, #3]
 8008c1a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d10a      	bne.n	8008c38 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	799b      	ldrb	r3, [r3, #6]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <USBH_ParseEPDesc+0xde>
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	799b      	ldrb	r3, [r3, #6]
 8008c2e:	2b10      	cmp	r3, #16
 8008c30:	d970      	bls.n	8008d14 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8008c32:	2303      	movs	r3, #3
 8008c34:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008c36:	e06d      	b.n	8008d14 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	75fb      	strb	r3, [r7, #23]
 8008c3c:	e06b      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008c44:	2b01      	cmp	r3, #1
 8008c46:	d13c      	bne.n	8008cc2 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	78db      	ldrb	r3, [r3, #3]
 8008c4c:	f003 0303 	and.w	r3, r3, #3
 8008c50:	2b02      	cmp	r3, #2
 8008c52:	d005      	beq.n	8008c60 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	78db      	ldrb	r3, [r3, #3]
 8008c58:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d106      	bne.n	8008c6e <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	889b      	ldrh	r3, [r3, #4]
 8008c64:	2b40      	cmp	r3, #64	@ 0x40
 8008c66:	d956      	bls.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c68:	2303      	movs	r3, #3
 8008c6a:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8008c6c:	e053      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	78db      	ldrb	r3, [r3, #3]
 8008c72:	f003 0303 	and.w	r3, r3, #3
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d10e      	bne.n	8008c98 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8008c7a:	68bb      	ldr	r3, [r7, #8]
 8008c7c:	799b      	ldrb	r3, [r3, #6]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d007      	beq.n	8008c92 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8008c86:	2b10      	cmp	r3, #16
 8008c88:	d803      	bhi.n	8008c92 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8008c8e:	2b40      	cmp	r3, #64	@ 0x40
 8008c90:	d941      	bls.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008c92:	2303      	movs	r3, #3
 8008c94:	75fb      	strb	r3, [r7, #23]
 8008c96:	e03e      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008c98:	68bb      	ldr	r3, [r7, #8]
 8008c9a:	78db      	ldrb	r3, [r3, #3]
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	2b03      	cmp	r3, #3
 8008ca2:	d10b      	bne.n	8008cbc <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	799b      	ldrb	r3, [r3, #6]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d004      	beq.n	8008cb6 <USBH_ParseEPDesc+0x162>
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	889b      	ldrh	r3, [r3, #4]
 8008cb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008cb4:	d32f      	bcc.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	75fb      	strb	r3, [r7, #23]
 8008cba:	e02c      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	75fb      	strb	r3, [r7, #23]
 8008cc0:	e029      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008cc8:	2b02      	cmp	r3, #2
 8008cca:	d120      	bne.n	8008d0e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	78db      	ldrb	r3, [r3, #3]
 8008cd0:	f003 0303 	and.w	r3, r3, #3
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d106      	bne.n	8008ce6 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	889b      	ldrh	r3, [r3, #4]
 8008cdc:	2b08      	cmp	r3, #8
 8008cde:	d01a      	beq.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008ce0:	2303      	movs	r3, #3
 8008ce2:	75fb      	strb	r3, [r7, #23]
 8008ce4:	e017      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d10a      	bne.n	8008d08 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	799b      	ldrb	r3, [r3, #6]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d003      	beq.n	8008d02 <USBH_ParseEPDesc+0x1ae>
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	889b      	ldrh	r3, [r3, #4]
 8008cfe:	2b08      	cmp	r3, #8
 8008d00:	d909      	bls.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8008d02:	2303      	movs	r3, #3
 8008d04:	75fb      	strb	r3, [r7, #23]
 8008d06:	e006      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8008d08:	2303      	movs	r3, #3
 8008d0a:	75fb      	strb	r3, [r7, #23]
 8008d0c:	e003      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8008d0e:	2303      	movs	r3, #3
 8008d10:	75fb      	strb	r3, [r7, #23]
 8008d12:	e000      	b.n	8008d16 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8008d14:	bf00      	nop
  }

  return status;
 8008d16:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	371c      	adds	r7, #28
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d22:	4770      	bx	lr

08008d24 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b087      	sub	sp, #28
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	60f8      	str	r0, [r7, #12]
 8008d2c:	60b9      	str	r1, [r7, #8]
 8008d2e:	4613      	mov	r3, r2
 8008d30:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	3301      	adds	r3, #1
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	2b03      	cmp	r3, #3
 8008d3a:	d120      	bne.n	8008d7e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	781b      	ldrb	r3, [r3, #0]
 8008d40:	1e9a      	subs	r2, r3, #2
 8008d42:	88fb      	ldrh	r3, [r7, #6]
 8008d44:	4293      	cmp	r3, r2
 8008d46:	bf28      	it	cs
 8008d48:	4613      	movcs	r3, r2
 8008d4a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3302      	adds	r3, #2
 8008d50:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8008d52:	2300      	movs	r3, #0
 8008d54:	82fb      	strh	r3, [r7, #22]
 8008d56:	e00b      	b.n	8008d70 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8008d58:	8afb      	ldrh	r3, [r7, #22]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	781a      	ldrb	r2, [r3, #0]
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	3301      	adds	r3, #1
 8008d68:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8008d6a:	8afb      	ldrh	r3, [r7, #22]
 8008d6c:	3302      	adds	r3, #2
 8008d6e:	82fb      	strh	r3, [r7, #22]
 8008d70:	8afa      	ldrh	r2, [r7, #22]
 8008d72:	8abb      	ldrh	r3, [r7, #20]
 8008d74:	429a      	cmp	r2, r3
 8008d76:	d3ef      	bcc.n	8008d58 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	701a      	strb	r2, [r3, #0]
  }
}
 8008d7e:	bf00      	nop
 8008d80:	371c      	adds	r7, #28
 8008d82:	46bd      	mov	sp, r7
 8008d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d88:	4770      	bx	lr

08008d8a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8008d8a:	b480      	push	{r7}
 8008d8c:	b085      	sub	sp, #20
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	881b      	ldrh	r3, [r3, #0]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	7812      	ldrb	r2, [r2, #0]
 8008d9c:	4413      	add	r3, r2
 8008d9e:	b29a      	uxth	r2, r3
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	781b      	ldrb	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4413      	add	r3, r2
 8008dae:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008db0:	68fb      	ldr	r3, [r7, #12]
}
 8008db2:	4618      	mov	r0, r3
 8008db4:	3714      	adds	r7, #20
 8008db6:	46bd      	mov	sp, r7
 8008db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dbc:	4770      	bx	lr

08008dbe <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b086      	sub	sp, #24
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	4613      	mov	r3, r2
 8008dca:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	789b      	ldrb	r3, [r3, #2]
 8008dd4:	2b01      	cmp	r3, #1
 8008dd6:	d002      	beq.n	8008dde <USBH_CtlReq+0x20>
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d00f      	beq.n	8008dfc <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008ddc:	e027      	b.n	8008e2e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	68ba      	ldr	r2, [r7, #8]
 8008de2:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	88fa      	ldrh	r2, [r7, #6]
 8008de8:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	2201      	movs	r2, #1
 8008dee:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	2202      	movs	r2, #2
 8008df4:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008df6:	2301      	movs	r3, #1
 8008df8:	75fb      	strb	r3, [r7, #23]
      break;
 8008dfa:	e018      	b.n	8008e2e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8008dfc:	68f8      	ldr	r0, [r7, #12]
 8008dfe:	f000 f81b 	bl	8008e38 <USBH_HandleControl>
 8008e02:	4603      	mov	r3, r0
 8008e04:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <USBH_CtlReq+0x54>
 8008e0c:	7dfb      	ldrb	r3, [r7, #23]
 8008e0e:	2b03      	cmp	r3, #3
 8008e10:	d106      	bne.n	8008e20 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2201      	movs	r2, #1
 8008e16:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	761a      	strb	r2, [r3, #24]
      break;
 8008e1e:	e005      	b.n	8008e2c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8008e20:	7dfb      	ldrb	r3, [r7, #23]
 8008e22:	2b02      	cmp	r3, #2
 8008e24:	d102      	bne.n	8008e2c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	709a      	strb	r2, [r3, #2]
      break;
 8008e2c:	bf00      	nop
  }
  return status;
 8008e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e30:	4618      	mov	r0, r3
 8008e32:	3718      	adds	r7, #24
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008e40:	2301      	movs	r3, #1
 8008e42:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008e44:	2300      	movs	r3, #0
 8008e46:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	7e1b      	ldrb	r3, [r3, #24]
 8008e4c:	3b01      	subs	r3, #1
 8008e4e:	2b0a      	cmp	r3, #10
 8008e50:	f200 8156 	bhi.w	8009100 <USBH_HandleControl+0x2c8>
 8008e54:	a201      	add	r2, pc, #4	@ (adr r2, 8008e5c <USBH_HandleControl+0x24>)
 8008e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e5a:	bf00      	nop
 8008e5c:	08008e89 	.word	0x08008e89
 8008e60:	08008ea3 	.word	0x08008ea3
 8008e64:	08008f0d 	.word	0x08008f0d
 8008e68:	08008f33 	.word	0x08008f33
 8008e6c:	08008f6b 	.word	0x08008f6b
 8008e70:	08008f95 	.word	0x08008f95
 8008e74:	08008fe7 	.word	0x08008fe7
 8008e78:	08009009 	.word	0x08009009
 8008e7c:	08009045 	.word	0x08009045
 8008e80:	0800906b 	.word	0x0800906b
 8008e84:	080090a9 	.word	0x080090a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f103 0110 	add.w	r1, r3, #16
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	795b      	ldrb	r3, [r3, #5]
 8008e92:	461a      	mov	r2, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f943 	bl	8009120 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2202      	movs	r2, #2
 8008e9e:	761a      	strb	r2, [r3, #24]
      break;
 8008ea0:	e139      	b.n	8009116 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	795b      	ldrb	r3, [r3, #5]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	f000 fcc5 	bl	8009838 <USBH_LL_GetURBState>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	2b01      	cmp	r3, #1
 8008eb6:	d11e      	bne.n	8008ef6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	7c1b      	ldrb	r3, [r3, #16]
 8008ebc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008ec0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	8adb      	ldrh	r3, [r3, #22]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d00a      	beq.n	8008ee0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8008eca:	7b7b      	ldrb	r3, [r7, #13]
 8008ecc:	2b80      	cmp	r3, #128	@ 0x80
 8008ece:	d103      	bne.n	8008ed8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2203      	movs	r2, #3
 8008ed4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ed6:	e115      	b.n	8009104 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2205      	movs	r2, #5
 8008edc:	761a      	strb	r2, [r3, #24]
      break;
 8008ede:	e111      	b.n	8009104 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008ee0:	7b7b      	ldrb	r3, [r7, #13]
 8008ee2:	2b80      	cmp	r3, #128	@ 0x80
 8008ee4:	d103      	bne.n	8008eee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2209      	movs	r2, #9
 8008eea:	761a      	strb	r2, [r3, #24]
      break;
 8008eec:	e10a      	b.n	8009104 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2207      	movs	r2, #7
 8008ef2:	761a      	strb	r2, [r3, #24]
      break;
 8008ef4:	e106      	b.n	8009104 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008ef6:	7bbb      	ldrb	r3, [r7, #14]
 8008ef8:	2b04      	cmp	r3, #4
 8008efa:	d003      	beq.n	8008f04 <USBH_HandleControl+0xcc>
 8008efc:	7bbb      	ldrb	r3, [r7, #14]
 8008efe:	2b02      	cmp	r3, #2
 8008f00:	f040 8100 	bne.w	8009104 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	220b      	movs	r2, #11
 8008f08:	761a      	strb	r2, [r3, #24]
      break;
 8008f0a:	e0fb      	b.n	8009104 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f12:	b29a      	uxth	r2, r3
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6899      	ldr	r1, [r3, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	899a      	ldrh	r2, [r3, #12]
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	791b      	ldrb	r3, [r3, #4]
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f000 f93a 	bl	800919e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2204      	movs	r2, #4
 8008f2e:	761a      	strb	r2, [r3, #24]
      break;
 8008f30:	e0f1      	b.n	8009116 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	791b      	ldrb	r3, [r3, #4]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fc7d 	bl	8009838 <USBH_LL_GetURBState>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008f42:	7bbb      	ldrb	r3, [r7, #14]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d102      	bne.n	8008f4e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2209      	movs	r2, #9
 8008f4c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8008f4e:	7bbb      	ldrb	r3, [r7, #14]
 8008f50:	2b05      	cmp	r3, #5
 8008f52:	d102      	bne.n	8008f5a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008f54:	2303      	movs	r3, #3
 8008f56:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008f58:	e0d6      	b.n	8009108 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8008f5a:	7bbb      	ldrb	r3, [r7, #14]
 8008f5c:	2b04      	cmp	r3, #4
 8008f5e:	f040 80d3 	bne.w	8009108 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	220b      	movs	r2, #11
 8008f66:	761a      	strb	r2, [r3, #24]
      break;
 8008f68:	e0ce      	b.n	8009108 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6899      	ldr	r1, [r3, #8]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	899a      	ldrh	r2, [r3, #12]
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	795b      	ldrb	r3, [r3, #5]
 8008f76:	2001      	movs	r0, #1
 8008f78:	9000      	str	r0, [sp, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 f8ea 	bl	8009154 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008f86:	b29a      	uxth	r2, r3
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2206      	movs	r2, #6
 8008f90:	761a      	strb	r2, [r3, #24]
      break;
 8008f92:	e0c0      	b.n	8009116 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	795b      	ldrb	r3, [r3, #5]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 fc4c 	bl	8009838 <USBH_LL_GetURBState>
 8008fa0:	4603      	mov	r3, r0
 8008fa2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008fa4:	7bbb      	ldrb	r3, [r7, #14]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	d103      	bne.n	8008fb2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2207      	movs	r2, #7
 8008fae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008fb0:	e0ac      	b.n	800910c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8008fb2:	7bbb      	ldrb	r3, [r7, #14]
 8008fb4:	2b05      	cmp	r3, #5
 8008fb6:	d105      	bne.n	8008fc4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	220c      	movs	r2, #12
 8008fbc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc2:	e0a3      	b.n	800910c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008fc4:	7bbb      	ldrb	r3, [r7, #14]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d103      	bne.n	8008fd2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2205      	movs	r2, #5
 8008fce:	761a      	strb	r2, [r3, #24]
      break;
 8008fd0:	e09c      	b.n	800910c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8008fd2:	7bbb      	ldrb	r3, [r7, #14]
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	f040 8099 	bne.w	800910c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	220b      	movs	r2, #11
 8008fde:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe4:	e092      	b.n	800910c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	791b      	ldrb	r3, [r3, #4]
 8008fea:	2200      	movs	r2, #0
 8008fec:	2100      	movs	r1, #0
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f000 f8d5 	bl	800919e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008ffa:	b29a      	uxth	r2, r3
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2208      	movs	r2, #8
 8009004:	761a      	strb	r2, [r3, #24]

      break;
 8009006:	e086      	b.n	8009116 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	791b      	ldrb	r3, [r3, #4]
 800900c:	4619      	mov	r1, r3
 800900e:	6878      	ldr	r0, [r7, #4]
 8009010:	f000 fc12 	bl	8009838 <USBH_LL_GetURBState>
 8009014:	4603      	mov	r3, r0
 8009016:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009018:	7bbb      	ldrb	r3, [r7, #14]
 800901a:	2b01      	cmp	r3, #1
 800901c:	d105      	bne.n	800902a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	220d      	movs	r2, #13
 8009022:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009024:	2300      	movs	r3, #0
 8009026:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009028:	e072      	b.n	8009110 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800902a:	7bbb      	ldrb	r3, [r7, #14]
 800902c:	2b04      	cmp	r3, #4
 800902e:	d103      	bne.n	8009038 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	220b      	movs	r2, #11
 8009034:	761a      	strb	r2, [r3, #24]
      break;
 8009036:	e06b      	b.n	8009110 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009038:	7bbb      	ldrb	r3, [r7, #14]
 800903a:	2b05      	cmp	r3, #5
 800903c:	d168      	bne.n	8009110 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800903e:	2303      	movs	r3, #3
 8009040:	73fb      	strb	r3, [r7, #15]
      break;
 8009042:	e065      	b.n	8009110 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	795b      	ldrb	r3, [r3, #5]
 8009048:	2201      	movs	r2, #1
 800904a:	9200      	str	r2, [sp, #0]
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f000 f87f 	bl	8009154 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800905c:	b29a      	uxth	r2, r3
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	220a      	movs	r2, #10
 8009066:	761a      	strb	r2, [r3, #24]
      break;
 8009068:	e055      	b.n	8009116 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	795b      	ldrb	r3, [r3, #5]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fbe1 	bl	8009838 <USBH_LL_GetURBState>
 8009076:	4603      	mov	r3, r0
 8009078:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800907a:	7bbb      	ldrb	r3, [r7, #14]
 800907c:	2b01      	cmp	r3, #1
 800907e:	d105      	bne.n	800908c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	220d      	movs	r2, #13
 8009088:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800908a:	e043      	b.n	8009114 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800908c:	7bbb      	ldrb	r3, [r7, #14]
 800908e:	2b02      	cmp	r3, #2
 8009090:	d103      	bne.n	800909a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2209      	movs	r2, #9
 8009096:	761a      	strb	r2, [r3, #24]
      break;
 8009098:	e03c      	b.n	8009114 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800909a:	7bbb      	ldrb	r3, [r7, #14]
 800909c:	2b04      	cmp	r3, #4
 800909e:	d139      	bne.n	8009114 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	220b      	movs	r2, #11
 80090a4:	761a      	strb	r2, [r3, #24]
      break;
 80090a6:	e035      	b.n	8009114 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	7e5b      	ldrb	r3, [r3, #25]
 80090ac:	3301      	adds	r3, #1
 80090ae:	b2da      	uxtb	r2, r3
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	765a      	strb	r2, [r3, #25]
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	7e5b      	ldrb	r3, [r3, #25]
 80090b8:	2b02      	cmp	r3, #2
 80090ba:	d806      	bhi.n	80090ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2201      	movs	r2, #1
 80090c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80090c8:	e025      	b.n	8009116 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090d0:	2106      	movs	r1, #6
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	795b      	ldrb	r3, [r3, #5]
 80090e0:	4619      	mov	r1, r3
 80090e2:	6878      	ldr	r0, [r7, #4]
 80090e4:	f000 f90c 	bl	8009300 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	791b      	ldrb	r3, [r3, #4]
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f906 	bl	8009300 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80090fa:	2302      	movs	r3, #2
 80090fc:	73fb      	strb	r3, [r7, #15]
      break;
 80090fe:	e00a      	b.n	8009116 <USBH_HandleControl+0x2de>

    default:
      break;
 8009100:	bf00      	nop
 8009102:	e008      	b.n	8009116 <USBH_HandleControl+0x2de>
      break;
 8009104:	bf00      	nop
 8009106:	e006      	b.n	8009116 <USBH_HandleControl+0x2de>
      break;
 8009108:	bf00      	nop
 800910a:	e004      	b.n	8009116 <USBH_HandleControl+0x2de>
      break;
 800910c:	bf00      	nop
 800910e:	e002      	b.n	8009116 <USBH_HandleControl+0x2de>
      break;
 8009110:	bf00      	nop
 8009112:	e000      	b.n	8009116 <USBH_HandleControl+0x2de>
      break;
 8009114:	bf00      	nop
  }

  return status;
 8009116:	7bfb      	ldrb	r3, [r7, #15]
}
 8009118:	4618      	mov	r0, r3
 800911a:	3710      	adds	r7, #16
 800911c:	46bd      	mov	sp, r7
 800911e:	bd80      	pop	{r7, pc}

08009120 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b088      	sub	sp, #32
 8009124:	af04      	add	r7, sp, #16
 8009126:	60f8      	str	r0, [r7, #12]
 8009128:	60b9      	str	r1, [r7, #8]
 800912a:	4613      	mov	r3, r2
 800912c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800912e:	79f9      	ldrb	r1, [r7, #7]
 8009130:	2300      	movs	r3, #0
 8009132:	9303      	str	r3, [sp, #12]
 8009134:	2308      	movs	r3, #8
 8009136:	9302      	str	r3, [sp, #8]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	9301      	str	r3, [sp, #4]
 800913c:	2300      	movs	r3, #0
 800913e:	9300      	str	r3, [sp, #0]
 8009140:	2300      	movs	r3, #0
 8009142:	2200      	movs	r2, #0
 8009144:	68f8      	ldr	r0, [r7, #12]
 8009146:	f000 fb46 	bl	80097d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800914a:	2300      	movs	r3, #0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3710      	adds	r7, #16
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b088      	sub	sp, #32
 8009158:	af04      	add	r7, sp, #16
 800915a:	60f8      	str	r0, [r7, #12]
 800915c:	60b9      	str	r1, [r7, #8]
 800915e:	4611      	mov	r1, r2
 8009160:	461a      	mov	r2, r3
 8009162:	460b      	mov	r3, r1
 8009164:	80fb      	strh	r3, [r7, #6]
 8009166:	4613      	mov	r3, r2
 8009168:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009174:	2300      	movs	r3, #0
 8009176:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009178:	7979      	ldrb	r1, [r7, #5]
 800917a:	7e3b      	ldrb	r3, [r7, #24]
 800917c:	9303      	str	r3, [sp, #12]
 800917e:	88fb      	ldrh	r3, [r7, #6]
 8009180:	9302      	str	r3, [sp, #8]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	9301      	str	r3, [sp, #4]
 8009186:	2301      	movs	r3, #1
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	2300      	movs	r3, #0
 800918c:	2200      	movs	r2, #0
 800918e:	68f8      	ldr	r0, [r7, #12]
 8009190:	f000 fb21 	bl	80097d6 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3710      	adds	r7, #16
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800919e:	b580      	push	{r7, lr}
 80091a0:	b088      	sub	sp, #32
 80091a2:	af04      	add	r7, sp, #16
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	4611      	mov	r1, r2
 80091aa:	461a      	mov	r2, r3
 80091ac:	460b      	mov	r3, r1
 80091ae:	80fb      	strh	r3, [r7, #6]
 80091b0:	4613      	mov	r3, r2
 80091b2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091b4:	7979      	ldrb	r1, [r7, #5]
 80091b6:	2300      	movs	r3, #0
 80091b8:	9303      	str	r3, [sp, #12]
 80091ba:	88fb      	ldrh	r3, [r7, #6]
 80091bc:	9302      	str	r3, [sp, #8]
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	9301      	str	r3, [sp, #4]
 80091c2:	2301      	movs	r3, #1
 80091c4:	9300      	str	r3, [sp, #0]
 80091c6:	2300      	movs	r3, #0
 80091c8:	2201      	movs	r2, #1
 80091ca:	68f8      	ldr	r0, [r7, #12]
 80091cc:	f000 fb03 	bl	80097d6 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80091d0:	2300      	movs	r3, #0

}
 80091d2:	4618      	mov	r0, r3
 80091d4:	3710      	adds	r7, #16
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b088      	sub	sp, #32
 80091de:	af04      	add	r7, sp, #16
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	4611      	mov	r1, r2
 80091e6:	461a      	mov	r2, r3
 80091e8:	460b      	mov	r3, r1
 80091ea:	80fb      	strh	r3, [r7, #6]
 80091ec:	4613      	mov	r3, r2
 80091ee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d001      	beq.n	80091fe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80091fe:	7979      	ldrb	r1, [r7, #5]
 8009200:	7e3b      	ldrb	r3, [r7, #24]
 8009202:	9303      	str	r3, [sp, #12]
 8009204:	88fb      	ldrh	r3, [r7, #6]
 8009206:	9302      	str	r3, [sp, #8]
 8009208:	68bb      	ldr	r3, [r7, #8]
 800920a:	9301      	str	r3, [sp, #4]
 800920c:	2301      	movs	r3, #1
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	2302      	movs	r3, #2
 8009212:	2200      	movs	r2, #0
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fade 	bl	80097d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800921a:	2300      	movs	r3, #0
}
 800921c:	4618      	mov	r0, r3
 800921e:	3710      	adds	r7, #16
 8009220:	46bd      	mov	sp, r7
 8009222:	bd80      	pop	{r7, pc}

08009224 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009224:	b580      	push	{r7, lr}
 8009226:	b088      	sub	sp, #32
 8009228:	af04      	add	r7, sp, #16
 800922a:	60f8      	str	r0, [r7, #12]
 800922c:	60b9      	str	r1, [r7, #8]
 800922e:	4611      	mov	r1, r2
 8009230:	461a      	mov	r2, r3
 8009232:	460b      	mov	r3, r1
 8009234:	80fb      	strh	r3, [r7, #6]
 8009236:	4613      	mov	r3, r2
 8009238:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800923a:	7979      	ldrb	r1, [r7, #5]
 800923c:	2300      	movs	r3, #0
 800923e:	9303      	str	r3, [sp, #12]
 8009240:	88fb      	ldrh	r3, [r7, #6]
 8009242:	9302      	str	r3, [sp, #8]
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	9301      	str	r3, [sp, #4]
 8009248:	2301      	movs	r3, #1
 800924a:	9300      	str	r3, [sp, #0]
 800924c:	2302      	movs	r3, #2
 800924e:	2201      	movs	r2, #1
 8009250:	68f8      	ldr	r0, [r7, #12]
 8009252:	f000 fac0 	bl	80097d6 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3710      	adds	r7, #16
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}

08009260 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af04      	add	r7, sp, #16
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	4608      	mov	r0, r1
 800926a:	4611      	mov	r1, r2
 800926c:	461a      	mov	r2, r3
 800926e:	4603      	mov	r3, r0
 8009270:	70fb      	strb	r3, [r7, #3]
 8009272:	460b      	mov	r3, r1
 8009274:	70bb      	strb	r3, [r7, #2]
 8009276:	4613      	mov	r3, r2
 8009278:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800927a:	7878      	ldrb	r0, [r7, #1]
 800927c:	78ba      	ldrb	r2, [r7, #2]
 800927e:	78f9      	ldrb	r1, [r7, #3]
 8009280:	8b3b      	ldrh	r3, [r7, #24]
 8009282:	9302      	str	r3, [sp, #8]
 8009284:	7d3b      	ldrb	r3, [r7, #20]
 8009286:	9301      	str	r3, [sp, #4]
 8009288:	7c3b      	ldrb	r3, [r7, #16]
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	4603      	mov	r3, r0
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fa53 	bl	800973a <USBH_LL_OpenPipe>

  return USBH_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80092aa:	78fb      	ldrb	r3, [r7, #3]
 80092ac:	4619      	mov	r1, r3
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f000 fa72 	bl	8009798 <USBH_LL_ClosePipe>

  return USBH_OK;
 80092b4:	2300      	movs	r3, #0
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3708      	adds	r7, #8
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80092be:	b580      	push	{r7, lr}
 80092c0:	b084      	sub	sp, #16
 80092c2:	af00      	add	r7, sp, #0
 80092c4:	6078      	str	r0, [r7, #4]
 80092c6:	460b      	mov	r3, r1
 80092c8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 f836 	bl	800933c <USBH_GetFreePipe>
 80092d0:	4603      	mov	r3, r0
 80092d2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80092d4:	89fb      	ldrh	r3, [r7, #14]
 80092d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80092da:	4293      	cmp	r3, r2
 80092dc:	d00a      	beq.n	80092f4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80092de:	78fa      	ldrb	r2, [r7, #3]
 80092e0:	89fb      	ldrh	r3, [r7, #14]
 80092e2:	f003 030f 	and.w	r3, r3, #15
 80092e6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80092ea:	6879      	ldr	r1, [r7, #4]
 80092ec:	33e0      	adds	r3, #224	@ 0xe0
 80092ee:	009b      	lsls	r3, r3, #2
 80092f0:	440b      	add	r3, r1
 80092f2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80092f4:	89fb      	ldrh	r3, [r7, #14]
 80092f6:	b2db      	uxtb	r3, r3
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3710      	adds	r7, #16
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}

08009300 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009300:	b480      	push	{r7}
 8009302:	b083      	sub	sp, #12
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
 8009308:	460b      	mov	r3, r1
 800930a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800930c:	78fb      	ldrb	r3, [r7, #3]
 800930e:	2b0f      	cmp	r3, #15
 8009310:	d80d      	bhi.n	800932e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009312:	78fb      	ldrb	r3, [r7, #3]
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	33e0      	adds	r3, #224	@ 0xe0
 8009318:	009b      	lsls	r3, r3, #2
 800931a:	4413      	add	r3, r2
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	78fb      	ldrb	r3, [r7, #3]
 8009320:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009324:	6879      	ldr	r1, [r7, #4]
 8009326:	33e0      	adds	r3, #224	@ 0xe0
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800932e:	2300      	movs	r3, #0
}
 8009330:	4618      	mov	r0, r3
 8009332:	370c      	adds	r7, #12
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800933c:	b480      	push	{r7}
 800933e:	b085      	sub	sp, #20
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009348:	2300      	movs	r3, #0
 800934a:	73fb      	strb	r3, [r7, #15]
 800934c:	e00f      	b.n	800936e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	687a      	ldr	r2, [r7, #4]
 8009352:	33e0      	adds	r3, #224	@ 0xe0
 8009354:	009b      	lsls	r3, r3, #2
 8009356:	4413      	add	r3, r2
 8009358:	685b      	ldr	r3, [r3, #4]
 800935a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800935e:	2b00      	cmp	r3, #0
 8009360:	d102      	bne.n	8009368 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009362:	7bfb      	ldrb	r3, [r7, #15]
 8009364:	b29b      	uxth	r3, r3
 8009366:	e007      	b.n	8009378 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009368:	7bfb      	ldrb	r3, [r7, #15]
 800936a:	3301      	adds	r3, #1
 800936c:	73fb      	strb	r3, [r7, #15]
 800936e:	7bfb      	ldrb	r3, [r7, #15]
 8009370:	2b0f      	cmp	r3, #15
 8009372:	d9ec      	bls.n	800934e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009374:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009378:	4618      	mov	r0, r3
 800937a:	3714      	adds	r7, #20
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009388:	2201      	movs	r2, #1
 800938a:	490e      	ldr	r1, [pc, #56]	@ (80093c4 <MX_USB_HOST_Init+0x40>)
 800938c:	480e      	ldr	r0, [pc, #56]	@ (80093c8 <MX_USB_HOST_Init+0x44>)
 800938e:	f7fe fb15 	bl	80079bc <USBH_Init>
 8009392:	4603      	mov	r3, r0
 8009394:	2b00      	cmp	r3, #0
 8009396:	d001      	beq.n	800939c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009398:	f7f7 fda4 	bl	8000ee4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800939c:	490b      	ldr	r1, [pc, #44]	@ (80093cc <MX_USB_HOST_Init+0x48>)
 800939e:	480a      	ldr	r0, [pc, #40]	@ (80093c8 <MX_USB_HOST_Init+0x44>)
 80093a0:	f7fe fbb9 	bl	8007b16 <USBH_RegisterClass>
 80093a4:	4603      	mov	r3, r0
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80093aa:	f7f7 fd9b 	bl	8000ee4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80093ae:	4806      	ldr	r0, [pc, #24]	@ (80093c8 <MX_USB_HOST_Init+0x44>)
 80093b0:	f7fe fc3d 	bl	8007c2e <USBH_Start>
 80093b4:	4603      	mov	r3, r0
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d001      	beq.n	80093be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80093ba:	f7f7 fd93 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80093be:	bf00      	nop
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	080093e5 	.word	0x080093e5
 80093c8:	200001f8 	.word	0x200001f8
 80093cc:	2000000c 	.word	0x2000000c

080093d0 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 80093d4:	4802      	ldr	r0, [pc, #8]	@ (80093e0 <MX_USB_HOST_Process+0x10>)
 80093d6:	f7fe fc3b 	bl	8007c50 <USBH_Process>
}
 80093da:	bf00      	nop
 80093dc:	bd80      	pop	{r7, pc}
 80093de:	bf00      	nop
 80093e0:	200001f8 	.word	0x200001f8

080093e4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80093e4:	b480      	push	{r7}
 80093e6:	b083      	sub	sp, #12
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	460b      	mov	r3, r1
 80093ee:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	3b01      	subs	r3, #1
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	d819      	bhi.n	800942c <USBH_UserProcess+0x48>
 80093f8:	a201      	add	r2, pc, #4	@ (adr r2, 8009400 <USBH_UserProcess+0x1c>)
 80093fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093fe:	bf00      	nop
 8009400:	0800942d 	.word	0x0800942d
 8009404:	0800941d 	.word	0x0800941d
 8009408:	0800942d 	.word	0x0800942d
 800940c:	08009425 	.word	0x08009425
 8009410:	08009415 	.word	0x08009415
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009414:	4b09      	ldr	r3, [pc, #36]	@ (800943c <USBH_UserProcess+0x58>)
 8009416:	2203      	movs	r2, #3
 8009418:	701a      	strb	r2, [r3, #0]
  break;
 800941a:	e008      	b.n	800942e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800941c:	4b07      	ldr	r3, [pc, #28]	@ (800943c <USBH_UserProcess+0x58>)
 800941e:	2202      	movs	r2, #2
 8009420:	701a      	strb	r2, [r3, #0]
  break;
 8009422:	e004      	b.n	800942e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009424:	4b05      	ldr	r3, [pc, #20]	@ (800943c <USBH_UserProcess+0x58>)
 8009426:	2201      	movs	r2, #1
 8009428:	701a      	strb	r2, [r3, #0]
  break;
 800942a:	e000      	b.n	800942e <USBH_UserProcess+0x4a>

  default:
  break;
 800942c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800942e:	bf00      	nop
 8009430:	370c      	adds	r7, #12
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	200005d0 	.word	0x200005d0

08009440 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b08a      	sub	sp, #40	@ 0x28
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009448:	f107 0314 	add.w	r3, r7, #20
 800944c:	2200      	movs	r2, #0
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	605a      	str	r2, [r3, #4]
 8009452:	609a      	str	r2, [r3, #8]
 8009454:	60da      	str	r2, [r3, #12]
 8009456:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009460:	d147      	bne.n	80094f2 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009462:	2300      	movs	r3, #0
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	4b25      	ldr	r3, [pc, #148]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 8009468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800946a:	4a24      	ldr	r2, [pc, #144]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 800946c:	f043 0301 	orr.w	r3, r3, #1
 8009470:	6313      	str	r3, [r2, #48]	@ 0x30
 8009472:	4b22      	ldr	r3, [pc, #136]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 8009474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009476:	f003 0301 	and.w	r3, r3, #1
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800947e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009484:	2300      	movs	r3, #0
 8009486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009488:	2300      	movs	r3, #0
 800948a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800948c:	f107 0314 	add.w	r3, r7, #20
 8009490:	4619      	mov	r1, r3
 8009492:	481b      	ldr	r0, [pc, #108]	@ (8009500 <HAL_HCD_MspInit+0xc0>)
 8009494:	f7f8 fa22 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009498:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800949c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800949e:	2302      	movs	r3, #2
 80094a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094a2:	2300      	movs	r3, #0
 80094a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80094a6:	2300      	movs	r3, #0
 80094a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80094aa:	230a      	movs	r3, #10
 80094ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80094ae:	f107 0314 	add.w	r3, r7, #20
 80094b2:	4619      	mov	r1, r3
 80094b4:	4812      	ldr	r0, [pc, #72]	@ (8009500 <HAL_HCD_MspInit+0xc0>)
 80094b6:	f7f8 fa11 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094ba:	4b10      	ldr	r3, [pc, #64]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 80094bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80094be:	4a0f      	ldr	r2, [pc, #60]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 80094c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80094c4:	6353      	str	r3, [r2, #52]	@ 0x34
 80094c6:	2300      	movs	r3, #0
 80094c8:	60fb      	str	r3, [r7, #12]
 80094ca:	4b0c      	ldr	r3, [pc, #48]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 80094cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094ce:	4a0b      	ldr	r2, [pc, #44]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 80094d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80094d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80094d6:	4b09      	ldr	r3, [pc, #36]	@ (80094fc <HAL_HCD_MspInit+0xbc>)
 80094d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80094da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80094de:	60fb      	str	r3, [r7, #12]
 80094e0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094e2:	2200      	movs	r2, #0
 80094e4:	2100      	movs	r1, #0
 80094e6:	2043      	movs	r0, #67	@ 0x43
 80094e8:	f7f8 f9c1 	bl	800186e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094ec:	2043      	movs	r0, #67	@ 0x43
 80094ee:	f7f8 f9da 	bl	80018a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094f2:	bf00      	nop
 80094f4:	3728      	adds	r7, #40	@ 0x28
 80094f6:	46bd      	mov	sp, r7
 80094f8:	bd80      	pop	{r7, pc}
 80094fa:	bf00      	nop
 80094fc:	40023800 	.word	0x40023800
 8009500:	40020000 	.word	0x40020000

08009504 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe ff73 	bl	80083fe <USBH_LL_IncTimer>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800952e:	4618      	mov	r0, r3
 8009530:	f7fe ffab 	bl	800848a <USBH_LL_Connect>
}
 8009534:	bf00      	nop
 8009536:	3708      	adds	r7, #8
 8009538:	46bd      	mov	sp, r7
 800953a:	bd80      	pop	{r7, pc}

0800953c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b082      	sub	sp, #8
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800954a:	4618      	mov	r0, r3
 800954c:	f7fe ffb4 	bl	80084b8 <USBH_LL_Disconnect>
}
 8009550:	bf00      	nop
 8009552:	3708      	adds	r7, #8
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	460b      	mov	r3, r1
 8009562:	70fb      	strb	r3, [r7, #3]
 8009564:	4613      	mov	r3, r2
 8009566:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009574:	b580      	push	{r7, lr}
 8009576:	b082      	sub	sp, #8
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 8009582:	4618      	mov	r0, r3
 8009584:	f7fe ff65 	bl	8008452 <USBH_LL_PortEnabled>
}
 8009588:	bf00      	nop
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b082      	sub	sp, #8
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800959e:	4618      	mov	r0, r3
 80095a0:	f7fe ff65 	bl	800846e <USBH_LL_PortDisabled>
}
 80095a4:	bf00      	nop
 80095a6:	3708      	adds	r7, #8
 80095a8:	46bd      	mov	sp, r7
 80095aa:	bd80      	pop	{r7, pc}

080095ac <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b082      	sub	sp, #8
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 80095ba:	2b01      	cmp	r3, #1
 80095bc:	d12a      	bne.n	8009614 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80095be:	4a18      	ldr	r2, [pc, #96]	@ (8009620 <USBH_LL_Init+0x74>)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a15      	ldr	r2, [pc, #84]	@ (8009620 <USBH_LL_Init+0x74>)
 80095ca:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80095ce:	4b14      	ldr	r3, [pc, #80]	@ (8009620 <USBH_LL_Init+0x74>)
 80095d0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80095d4:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80095d6:	4b12      	ldr	r3, [pc, #72]	@ (8009620 <USBH_LL_Init+0x74>)
 80095d8:	2208      	movs	r2, #8
 80095da:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80095dc:	4b10      	ldr	r3, [pc, #64]	@ (8009620 <USBH_LL_Init+0x74>)
 80095de:	2201      	movs	r2, #1
 80095e0:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80095e2:	4b0f      	ldr	r3, [pc, #60]	@ (8009620 <USBH_LL_Init+0x74>)
 80095e4:	2200      	movs	r2, #0
 80095e6:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80095e8:	4b0d      	ldr	r3, [pc, #52]	@ (8009620 <USBH_LL_Init+0x74>)
 80095ea:	2202      	movs	r2, #2
 80095ec:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80095ee:	4b0c      	ldr	r3, [pc, #48]	@ (8009620 <USBH_LL_Init+0x74>)
 80095f0:	2200      	movs	r2, #0
 80095f2:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80095f4:	480a      	ldr	r0, [pc, #40]	@ (8009620 <USBH_LL_Init+0x74>)
 80095f6:	f7f8 fb26 	bl	8001c46 <HAL_HCD_Init>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d001      	beq.n	8009604 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8009600:	f7f7 fc70 	bl	8000ee4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8009604:	4806      	ldr	r0, [pc, #24]	@ (8009620 <USBH_LL_Init+0x74>)
 8009606:	f7f8 ff87 	bl	8002518 <HAL_HCD_GetCurrentFrame>
 800960a:	4603      	mov	r3, r0
 800960c:	4619      	mov	r1, r3
 800960e:	6878      	ldr	r0, [r7, #4]
 8009610:	f7fe fee6 	bl	80083e0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3708      	adds	r7, #8
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}
 800961e:	bf00      	nop
 8009620:	200005d4 	.word	0x200005d4

08009624 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009630:	2300      	movs	r3, #0
 8009632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800963a:	4618      	mov	r0, r3
 800963c:	f7f8 fef4 	bl	8002428 <HAL_HCD_Start>
 8009640:	4603      	mov	r3, r0
 8009642:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8009644:	7bfb      	ldrb	r3, [r7, #15]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 f95e 	bl	8009908 <USBH_Get_USB_Status>
 800964c:	4603      	mov	r3, r0
 800964e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009650:	7bbb      	ldrb	r3, [r7, #14]
}
 8009652:	4618      	mov	r0, r3
 8009654:	3710      	adds	r7, #16
 8009656:	46bd      	mov	sp, r7
 8009658:	bd80      	pop	{r7, pc}

0800965a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b084      	sub	sp, #16
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009662:	2300      	movs	r3, #0
 8009664:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009666:	2300      	movs	r3, #0
 8009668:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009670:	4618      	mov	r0, r3
 8009672:	f7f8 fefc 	bl	800246e <HAL_HCD_Stop>
 8009676:	4603      	mov	r3, r0
 8009678:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800967a:	7bfb      	ldrb	r3, [r7, #15]
 800967c:	4618      	mov	r0, r3
 800967e:	f000 f943 	bl	8009908 <USBH_Get_USB_Status>
 8009682:	4603      	mov	r3, r0
 8009684:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009686:	7bbb      	ldrb	r3, [r7, #14]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3710      	adds	r7, #16
 800968c:	46bd      	mov	sp, r7
 800968e:	bd80      	pop	{r7, pc}

08009690 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b084      	sub	sp, #16
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8009698:	2301      	movs	r3, #1
 800969a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7f8 ff46 	bl	8002534 <HAL_HCD_GetCurrentSpeed>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	d00c      	beq.n	80096c8 <USBH_LL_GetSpeed+0x38>
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d80d      	bhi.n	80096ce <USBH_LL_GetSpeed+0x3e>
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <USBH_LL_GetSpeed+0x2c>
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d003      	beq.n	80096c2 <USBH_LL_GetSpeed+0x32>
 80096ba:	e008      	b.n	80096ce <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 80096bc:	2300      	movs	r3, #0
 80096be:	73fb      	strb	r3, [r7, #15]
    break;
 80096c0:	e008      	b.n	80096d4 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 80096c2:	2301      	movs	r3, #1
 80096c4:	73fb      	strb	r3, [r7, #15]
    break;
 80096c6:	e005      	b.n	80096d4 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 80096c8:	2302      	movs	r3, #2
 80096ca:	73fb      	strb	r3, [r7, #15]
    break;
 80096cc:	e002      	b.n	80096d4 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 80096ce:	2301      	movs	r3, #1
 80096d0:	73fb      	strb	r3, [r7, #15]
    break;
 80096d2:	bf00      	nop
  }
  return  speed;
 80096d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80096de:	b580      	push	{r7, lr}
 80096e0:	b084      	sub	sp, #16
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80096ea:	2300      	movs	r3, #0
 80096ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80096f4:	4618      	mov	r0, r3
 80096f6:	f7f8 fed7 	bl	80024a8 <HAL_HCD_ResetPort>
 80096fa:	4603      	mov	r3, r0
 80096fc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80096fe:	7bfb      	ldrb	r3, [r7, #15]
 8009700:	4618      	mov	r0, r3
 8009702:	f000 f901 	bl	8009908 <USBH_Get_USB_Status>
 8009706:	4603      	mov	r3, r0
 8009708:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800970a:	7bbb      	ldrb	r3, [r7, #14]
}
 800970c:	4618      	mov	r0, r3
 800970e:	3710      	adds	r7, #16
 8009710:	46bd      	mov	sp, r7
 8009712:	bd80      	pop	{r7, pc}

08009714 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009714:	b580      	push	{r7, lr}
 8009716:	b082      	sub	sp, #8
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	460b      	mov	r3, r1
 800971e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 8009726:	78fa      	ldrb	r2, [r7, #3]
 8009728:	4611      	mov	r1, r2
 800972a:	4618      	mov	r0, r3
 800972c:	f7f8 fedf 	bl	80024ee <HAL_HCD_HC_GetXferCount>
 8009730:	4603      	mov	r3, r0
}
 8009732:	4618      	mov	r0, r3
 8009734:	3708      	adds	r7, #8
 8009736:	46bd      	mov	sp, r7
 8009738:	bd80      	pop	{r7, pc}

0800973a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800973a:	b590      	push	{r4, r7, lr}
 800973c:	b089      	sub	sp, #36	@ 0x24
 800973e:	af04      	add	r7, sp, #16
 8009740:	6078      	str	r0, [r7, #4]
 8009742:	4608      	mov	r0, r1
 8009744:	4611      	mov	r1, r2
 8009746:	461a      	mov	r2, r3
 8009748:	4603      	mov	r3, r0
 800974a:	70fb      	strb	r3, [r7, #3]
 800974c:	460b      	mov	r3, r1
 800974e:	70bb      	strb	r3, [r7, #2]
 8009750:	4613      	mov	r3, r2
 8009752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8009762:	787c      	ldrb	r4, [r7, #1]
 8009764:	78ba      	ldrb	r2, [r7, #2]
 8009766:	78f9      	ldrb	r1, [r7, #3]
 8009768:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800976a:	9302      	str	r3, [sp, #8]
 800976c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009770:	9301      	str	r3, [sp, #4]
 8009772:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	4623      	mov	r3, r4
 800977a:	f7f8 facb 	bl	8001d14 <HAL_HCD_HC_Init>
 800977e:	4603      	mov	r3, r0
 8009780:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8009782:	7bfb      	ldrb	r3, [r7, #15]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f8bf 	bl	8009908 <USBH_Get_USB_Status>
 800978a:	4603      	mov	r3, r0
 800978c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800978e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009790:	4618      	mov	r0, r3
 8009792:	3714      	adds	r7, #20
 8009794:	46bd      	mov	sp, r7
 8009796:	bd90      	pop	{r4, r7, pc}

08009798 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009798:	b580      	push	{r7, lr}
 800979a:	b084      	sub	sp, #16
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	460b      	mov	r3, r1
 80097a2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097a4:	2300      	movs	r3, #0
 80097a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097a8:	2300      	movs	r3, #0
 80097aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80097b2:	78fa      	ldrb	r2, [r7, #3]
 80097b4:	4611      	mov	r1, r2
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7f8 fb64 	bl	8001e84 <HAL_HCD_HC_Halt>
 80097bc:	4603      	mov	r3, r0
 80097be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f000 f8a0 	bl	8009908 <USBH_Get_USB_Status>
 80097c8:	4603      	mov	r3, r0
 80097ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ce:	4618      	mov	r0, r3
 80097d0:	3710      	adds	r7, #16
 80097d2:	46bd      	mov	sp, r7
 80097d4:	bd80      	pop	{r7, pc}

080097d6 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80097d6:	b590      	push	{r4, r7, lr}
 80097d8:	b089      	sub	sp, #36	@ 0x24
 80097da:	af04      	add	r7, sp, #16
 80097dc:	6078      	str	r0, [r7, #4]
 80097de:	4608      	mov	r0, r1
 80097e0:	4611      	mov	r1, r2
 80097e2:	461a      	mov	r2, r3
 80097e4:	4603      	mov	r3, r0
 80097e6:	70fb      	strb	r3, [r7, #3]
 80097e8:	460b      	mov	r3, r1
 80097ea:	70bb      	strb	r3, [r7, #2]
 80097ec:	4613      	mov	r3, r2
 80097ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097f0:	2300      	movs	r3, #0
 80097f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80097f4:	2300      	movs	r3, #0
 80097f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 80097fe:	787c      	ldrb	r4, [r7, #1]
 8009800:	78ba      	ldrb	r2, [r7, #2]
 8009802:	78f9      	ldrb	r1, [r7, #3]
 8009804:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009808:	9303      	str	r3, [sp, #12]
 800980a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800980c:	9302      	str	r3, [sp, #8]
 800980e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009810:	9301      	str	r3, [sp, #4]
 8009812:	f897 3020 	ldrb.w	r3, [r7, #32]
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	4623      	mov	r3, r4
 800981a:	f7f8 fb57 	bl	8001ecc <HAL_HCD_HC_SubmitRequest>
 800981e:	4603      	mov	r3, r0
 8009820:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	4618      	mov	r0, r3
 8009826:	f000 f86f 	bl	8009908 <USBH_Get_USB_Status>
 800982a:	4603      	mov	r3, r0
 800982c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800982e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009830:	4618      	mov	r0, r3
 8009832:	3714      	adds	r7, #20
 8009834:	46bd      	mov	sp, r7
 8009836:	bd90      	pop	{r4, r7, pc}

08009838 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b082      	sub	sp, #8
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
 8009840:	460b      	mov	r3, r1
 8009842:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7f8 fe38 	bl	80024c4 <HAL_HCD_HC_GetURBState>
 8009854:	4603      	mov	r3, r0
}
 8009856:	4618      	mov	r0, r3
 8009858:	3708      	adds	r7, #8
 800985a:	46bd      	mov	sp, r7
 800985c:	bd80      	pop	{r7, pc}

0800985e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800985e:	b580      	push	{r7, lr}
 8009860:	b082      	sub	sp, #8
 8009862:	af00      	add	r7, sp, #0
 8009864:	6078      	str	r0, [r7, #4]
 8009866:	460b      	mov	r3, r1
 8009868:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 8009870:	2b01      	cmp	r3, #1
 8009872:	d103      	bne.n	800987c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8009874:	78fb      	ldrb	r3, [r7, #3]
 8009876:	4618      	mov	r0, r3
 8009878:	f000 f872 	bl	8009960 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800987c:	20c8      	movs	r0, #200	@ 0xc8
 800987e:	f7f7 fef7 	bl	8001670 <HAL_Delay>
  return USBH_OK;
 8009882:	2300      	movs	r3, #0
}
 8009884:	4618      	mov	r0, r3
 8009886:	3708      	adds	r7, #8
 8009888:	46bd      	mov	sp, r7
 800988a:	bd80      	pop	{r7, pc}

0800988c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800988c:	b480      	push	{r7}
 800988e:	b085      	sub	sp, #20
 8009890:	af00      	add	r7, sp, #0
 8009892:	6078      	str	r0, [r7, #4]
 8009894:	460b      	mov	r3, r1
 8009896:	70fb      	strb	r3, [r7, #3]
 8009898:	4613      	mov	r3, r2
 800989a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80098a2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80098a4:	78fa      	ldrb	r2, [r7, #3]
 80098a6:	68f9      	ldr	r1, [r7, #12]
 80098a8:	4613      	mov	r3, r2
 80098aa:	011b      	lsls	r3, r3, #4
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	009b      	lsls	r3, r3, #2
 80098b0:	440b      	add	r3, r1
 80098b2:	3317      	adds	r3, #23
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00a      	beq.n	80098d0 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80098ba:	78fa      	ldrb	r2, [r7, #3]
 80098bc:	68f9      	ldr	r1, [r7, #12]
 80098be:	4613      	mov	r3, r2
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	1a9b      	subs	r3, r3, r2
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	440b      	add	r3, r1
 80098c8:	333c      	adds	r3, #60	@ 0x3c
 80098ca:	78ba      	ldrb	r2, [r7, #2]
 80098cc:	701a      	strb	r2, [r3, #0]
 80098ce:	e009      	b.n	80098e4 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80098d0:	78fa      	ldrb	r2, [r7, #3]
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	4613      	mov	r3, r2
 80098d6:	011b      	lsls	r3, r3, #4
 80098d8:	1a9b      	subs	r3, r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	333d      	adds	r3, #61	@ 0x3d
 80098e0:	78ba      	ldrb	r2, [r7, #2]
 80098e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80098e4:	2300      	movs	r3, #0
}
 80098e6:	4618      	mov	r0, r3
 80098e8:	3714      	adds	r7, #20
 80098ea:	46bd      	mov	sp, r7
 80098ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f0:	4770      	bx	lr

080098f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80098f2:	b580      	push	{r7, lr}
 80098f4:	b082      	sub	sp, #8
 80098f6:	af00      	add	r7, sp, #0
 80098f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f7f7 feb8 	bl	8001670 <HAL_Delay>
}
 8009900:	bf00      	nop
 8009902:	3708      	adds	r7, #8
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009908:	b480      	push	{r7}
 800990a:	b085      	sub	sp, #20
 800990c:	af00      	add	r7, sp, #0
 800990e:	4603      	mov	r3, r0
 8009910:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8009912:	2300      	movs	r3, #0
 8009914:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009916:	79fb      	ldrb	r3, [r7, #7]
 8009918:	2b03      	cmp	r3, #3
 800991a:	d817      	bhi.n	800994c <USBH_Get_USB_Status+0x44>
 800991c:	a201      	add	r2, pc, #4	@ (adr r2, 8009924 <USBH_Get_USB_Status+0x1c>)
 800991e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009922:	bf00      	nop
 8009924:	08009935 	.word	0x08009935
 8009928:	0800993b 	.word	0x0800993b
 800992c:	08009941 	.word	0x08009941
 8009930:	08009947 	.word	0x08009947
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8009934:	2300      	movs	r3, #0
 8009936:	73fb      	strb	r3, [r7, #15]
    break;
 8009938:	e00b      	b.n	8009952 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800993a:	2302      	movs	r3, #2
 800993c:	73fb      	strb	r3, [r7, #15]
    break;
 800993e:	e008      	b.n	8009952 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8009940:	2301      	movs	r3, #1
 8009942:	73fb      	strb	r3, [r7, #15]
    break;
 8009944:	e005      	b.n	8009952 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8009946:	2302      	movs	r3, #2
 8009948:	73fb      	strb	r3, [r7, #15]
    break;
 800994a:	e002      	b.n	8009952 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800994c:	2302      	movs	r3, #2
 800994e:	73fb      	strb	r3, [r7, #15]
    break;
 8009950:	bf00      	nop
  }
  return usb_status;
 8009952:	7bfb      	ldrb	r3, [r7, #15]
}
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800995e:	4770      	bx	lr

08009960 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	b084      	sub	sp, #16
 8009964:	af00      	add	r7, sp, #0
 8009966:	4603      	mov	r3, r0
 8009968:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800996e:	79fb      	ldrb	r3, [r7, #7]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d102      	bne.n	800997a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
 8009978:	e001      	b.n	800997e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800997a:	2301      	movs	r3, #1
 800997c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800997e:	7bfb      	ldrb	r3, [r7, #15]
 8009980:	461a      	mov	r2, r3
 8009982:	2101      	movs	r1, #1
 8009984:	4803      	ldr	r0, [pc, #12]	@ (8009994 <MX_DriverVbusFS+0x34>)
 8009986:	f7f8 f945 	bl	8001c14 <HAL_GPIO_WritePin>
}
 800998a:	bf00      	nop
 800998c:	3710      	adds	r7, #16
 800998e:	46bd      	mov	sp, r7
 8009990:	bd80      	pop	{r7, pc}
 8009992:	bf00      	nop
 8009994:	40020800 	.word	0x40020800

08009998 <malloc>:
 8009998:	4b02      	ldr	r3, [pc, #8]	@ (80099a4 <malloc+0xc>)
 800999a:	4601      	mov	r1, r0
 800999c:	6818      	ldr	r0, [r3, #0]
 800999e:	f000 b82d 	b.w	80099fc <_malloc_r>
 80099a2:	bf00      	nop
 80099a4:	20000038 	.word	0x20000038

080099a8 <free>:
 80099a8:	4b02      	ldr	r3, [pc, #8]	@ (80099b4 <free+0xc>)
 80099aa:	4601      	mov	r1, r0
 80099ac:	6818      	ldr	r0, [r3, #0]
 80099ae:	f000 bbfb 	b.w	800a1a8 <_free_r>
 80099b2:	bf00      	nop
 80099b4:	20000038 	.word	0x20000038

080099b8 <sbrk_aligned>:
 80099b8:	b570      	push	{r4, r5, r6, lr}
 80099ba:	4e0f      	ldr	r6, [pc, #60]	@ (80099f8 <sbrk_aligned+0x40>)
 80099bc:	460c      	mov	r4, r1
 80099be:	6831      	ldr	r1, [r6, #0]
 80099c0:	4605      	mov	r5, r0
 80099c2:	b911      	cbnz	r1, 80099ca <sbrk_aligned+0x12>
 80099c4:	f000 fba0 	bl	800a108 <_sbrk_r>
 80099c8:	6030      	str	r0, [r6, #0]
 80099ca:	4621      	mov	r1, r4
 80099cc:	4628      	mov	r0, r5
 80099ce:	f000 fb9b 	bl	800a108 <_sbrk_r>
 80099d2:	1c43      	adds	r3, r0, #1
 80099d4:	d103      	bne.n	80099de <sbrk_aligned+0x26>
 80099d6:	f04f 34ff 	mov.w	r4, #4294967295
 80099da:	4620      	mov	r0, r4
 80099dc:	bd70      	pop	{r4, r5, r6, pc}
 80099de:	1cc4      	adds	r4, r0, #3
 80099e0:	f024 0403 	bic.w	r4, r4, #3
 80099e4:	42a0      	cmp	r0, r4
 80099e6:	d0f8      	beq.n	80099da <sbrk_aligned+0x22>
 80099e8:	1a21      	subs	r1, r4, r0
 80099ea:	4628      	mov	r0, r5
 80099ec:	f000 fb8c 	bl	800a108 <_sbrk_r>
 80099f0:	3001      	adds	r0, #1
 80099f2:	d1f2      	bne.n	80099da <sbrk_aligned+0x22>
 80099f4:	e7ef      	b.n	80099d6 <sbrk_aligned+0x1e>
 80099f6:	bf00      	nop
 80099f8:	200009b4 	.word	0x200009b4

080099fc <_malloc_r>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	1ccd      	adds	r5, r1, #3
 8009a02:	f025 0503 	bic.w	r5, r5, #3
 8009a06:	3508      	adds	r5, #8
 8009a08:	2d0c      	cmp	r5, #12
 8009a0a:	bf38      	it	cc
 8009a0c:	250c      	movcc	r5, #12
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	4606      	mov	r6, r0
 8009a12:	db01      	blt.n	8009a18 <_malloc_r+0x1c>
 8009a14:	42a9      	cmp	r1, r5
 8009a16:	d904      	bls.n	8009a22 <_malloc_r+0x26>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	6033      	str	r3, [r6, #0]
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a22:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009af8 <_malloc_r+0xfc>
 8009a26:	f000 f869 	bl	8009afc <__malloc_lock>
 8009a2a:	f8d8 3000 	ldr.w	r3, [r8]
 8009a2e:	461c      	mov	r4, r3
 8009a30:	bb44      	cbnz	r4, 8009a84 <_malloc_r+0x88>
 8009a32:	4629      	mov	r1, r5
 8009a34:	4630      	mov	r0, r6
 8009a36:	f7ff ffbf 	bl	80099b8 <sbrk_aligned>
 8009a3a:	1c43      	adds	r3, r0, #1
 8009a3c:	4604      	mov	r4, r0
 8009a3e:	d158      	bne.n	8009af2 <_malloc_r+0xf6>
 8009a40:	f8d8 4000 	ldr.w	r4, [r8]
 8009a44:	4627      	mov	r7, r4
 8009a46:	2f00      	cmp	r7, #0
 8009a48:	d143      	bne.n	8009ad2 <_malloc_r+0xd6>
 8009a4a:	2c00      	cmp	r4, #0
 8009a4c:	d04b      	beq.n	8009ae6 <_malloc_r+0xea>
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	4639      	mov	r1, r7
 8009a52:	4630      	mov	r0, r6
 8009a54:	eb04 0903 	add.w	r9, r4, r3
 8009a58:	f000 fb56 	bl	800a108 <_sbrk_r>
 8009a5c:	4581      	cmp	r9, r0
 8009a5e:	d142      	bne.n	8009ae6 <_malloc_r+0xea>
 8009a60:	6821      	ldr	r1, [r4, #0]
 8009a62:	1a6d      	subs	r5, r5, r1
 8009a64:	4629      	mov	r1, r5
 8009a66:	4630      	mov	r0, r6
 8009a68:	f7ff ffa6 	bl	80099b8 <sbrk_aligned>
 8009a6c:	3001      	adds	r0, #1
 8009a6e:	d03a      	beq.n	8009ae6 <_malloc_r+0xea>
 8009a70:	6823      	ldr	r3, [r4, #0]
 8009a72:	442b      	add	r3, r5
 8009a74:	6023      	str	r3, [r4, #0]
 8009a76:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7a:	685a      	ldr	r2, [r3, #4]
 8009a7c:	bb62      	cbnz	r2, 8009ad8 <_malloc_r+0xdc>
 8009a7e:	f8c8 7000 	str.w	r7, [r8]
 8009a82:	e00f      	b.n	8009aa4 <_malloc_r+0xa8>
 8009a84:	6822      	ldr	r2, [r4, #0]
 8009a86:	1b52      	subs	r2, r2, r5
 8009a88:	d420      	bmi.n	8009acc <_malloc_r+0xd0>
 8009a8a:	2a0b      	cmp	r2, #11
 8009a8c:	d917      	bls.n	8009abe <_malloc_r+0xc2>
 8009a8e:	1961      	adds	r1, r4, r5
 8009a90:	42a3      	cmp	r3, r4
 8009a92:	6025      	str	r5, [r4, #0]
 8009a94:	bf18      	it	ne
 8009a96:	6059      	strne	r1, [r3, #4]
 8009a98:	6863      	ldr	r3, [r4, #4]
 8009a9a:	bf08      	it	eq
 8009a9c:	f8c8 1000 	streq.w	r1, [r8]
 8009aa0:	5162      	str	r2, [r4, r5]
 8009aa2:	604b      	str	r3, [r1, #4]
 8009aa4:	4630      	mov	r0, r6
 8009aa6:	f000 f82f 	bl	8009b08 <__malloc_unlock>
 8009aaa:	f104 000b 	add.w	r0, r4, #11
 8009aae:	1d23      	adds	r3, r4, #4
 8009ab0:	f020 0007 	bic.w	r0, r0, #7
 8009ab4:	1ac2      	subs	r2, r0, r3
 8009ab6:	bf1c      	itt	ne
 8009ab8:	1a1b      	subne	r3, r3, r0
 8009aba:	50a3      	strne	r3, [r4, r2]
 8009abc:	e7af      	b.n	8009a1e <_malloc_r+0x22>
 8009abe:	6862      	ldr	r2, [r4, #4]
 8009ac0:	42a3      	cmp	r3, r4
 8009ac2:	bf0c      	ite	eq
 8009ac4:	f8c8 2000 	streq.w	r2, [r8]
 8009ac8:	605a      	strne	r2, [r3, #4]
 8009aca:	e7eb      	b.n	8009aa4 <_malloc_r+0xa8>
 8009acc:	4623      	mov	r3, r4
 8009ace:	6864      	ldr	r4, [r4, #4]
 8009ad0:	e7ae      	b.n	8009a30 <_malloc_r+0x34>
 8009ad2:	463c      	mov	r4, r7
 8009ad4:	687f      	ldr	r7, [r7, #4]
 8009ad6:	e7b6      	b.n	8009a46 <_malloc_r+0x4a>
 8009ad8:	461a      	mov	r2, r3
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	42a3      	cmp	r3, r4
 8009ade:	d1fb      	bne.n	8009ad8 <_malloc_r+0xdc>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	6053      	str	r3, [r2, #4]
 8009ae4:	e7de      	b.n	8009aa4 <_malloc_r+0xa8>
 8009ae6:	230c      	movs	r3, #12
 8009ae8:	6033      	str	r3, [r6, #0]
 8009aea:	4630      	mov	r0, r6
 8009aec:	f000 f80c 	bl	8009b08 <__malloc_unlock>
 8009af0:	e794      	b.n	8009a1c <_malloc_r+0x20>
 8009af2:	6005      	str	r5, [r0, #0]
 8009af4:	e7d6      	b.n	8009aa4 <_malloc_r+0xa8>
 8009af6:	bf00      	nop
 8009af8:	200009b8 	.word	0x200009b8

08009afc <__malloc_lock>:
 8009afc:	4801      	ldr	r0, [pc, #4]	@ (8009b04 <__malloc_lock+0x8>)
 8009afe:	f000 bb50 	b.w	800a1a2 <__retarget_lock_acquire_recursive>
 8009b02:	bf00      	nop
 8009b04:	20000afc 	.word	0x20000afc

08009b08 <__malloc_unlock>:
 8009b08:	4801      	ldr	r0, [pc, #4]	@ (8009b10 <__malloc_unlock+0x8>)
 8009b0a:	f000 bb4b 	b.w	800a1a4 <__retarget_lock_release_recursive>
 8009b0e:	bf00      	nop
 8009b10:	20000afc 	.word	0x20000afc

08009b14 <std>:
 8009b14:	2300      	movs	r3, #0
 8009b16:	b510      	push	{r4, lr}
 8009b18:	4604      	mov	r4, r0
 8009b1a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b22:	6083      	str	r3, [r0, #8]
 8009b24:	8181      	strh	r1, [r0, #12]
 8009b26:	6643      	str	r3, [r0, #100]	@ 0x64
 8009b28:	81c2      	strh	r2, [r0, #14]
 8009b2a:	6183      	str	r3, [r0, #24]
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	2208      	movs	r2, #8
 8009b30:	305c      	adds	r0, #92	@ 0x5c
 8009b32:	f000 faad 	bl	800a090 <memset>
 8009b36:	4b0d      	ldr	r3, [pc, #52]	@ (8009b6c <std+0x58>)
 8009b38:	6263      	str	r3, [r4, #36]	@ 0x24
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8009b70 <std+0x5c>)
 8009b3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8009b74 <std+0x60>)
 8009b40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009b42:	4b0d      	ldr	r3, [pc, #52]	@ (8009b78 <std+0x64>)
 8009b44:	6323      	str	r3, [r4, #48]	@ 0x30
 8009b46:	4b0d      	ldr	r3, [pc, #52]	@ (8009b7c <std+0x68>)
 8009b48:	6224      	str	r4, [r4, #32]
 8009b4a:	429c      	cmp	r4, r3
 8009b4c:	d006      	beq.n	8009b5c <std+0x48>
 8009b4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009b52:	4294      	cmp	r4, r2
 8009b54:	d002      	beq.n	8009b5c <std+0x48>
 8009b56:	33d0      	adds	r3, #208	@ 0xd0
 8009b58:	429c      	cmp	r4, r3
 8009b5a:	d105      	bne.n	8009b68 <std+0x54>
 8009b5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b64:	f000 bb1c 	b.w	800a1a0 <__retarget_lock_init_recursive>
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	08009ee1 	.word	0x08009ee1
 8009b70:	08009f03 	.word	0x08009f03
 8009b74:	08009f3b 	.word	0x08009f3b
 8009b78:	08009f5f 	.word	0x08009f5f
 8009b7c:	200009bc 	.word	0x200009bc

08009b80 <stdio_exit_handler>:
 8009b80:	4a02      	ldr	r2, [pc, #8]	@ (8009b8c <stdio_exit_handler+0xc>)
 8009b82:	4903      	ldr	r1, [pc, #12]	@ (8009b90 <stdio_exit_handler+0x10>)
 8009b84:	4803      	ldr	r0, [pc, #12]	@ (8009b94 <stdio_exit_handler+0x14>)
 8009b86:	f000 b869 	b.w	8009c5c <_fwalk_sglue>
 8009b8a:	bf00      	nop
 8009b8c:	2000002c 	.word	0x2000002c
 8009b90:	0800a8e1 	.word	0x0800a8e1
 8009b94:	2000003c 	.word	0x2000003c

08009b98 <cleanup_stdio>:
 8009b98:	6841      	ldr	r1, [r0, #4]
 8009b9a:	4b0c      	ldr	r3, [pc, #48]	@ (8009bcc <cleanup_stdio+0x34>)
 8009b9c:	4299      	cmp	r1, r3
 8009b9e:	b510      	push	{r4, lr}
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	d001      	beq.n	8009ba8 <cleanup_stdio+0x10>
 8009ba4:	f000 fe9c 	bl	800a8e0 <_fflush_r>
 8009ba8:	68a1      	ldr	r1, [r4, #8]
 8009baa:	4b09      	ldr	r3, [pc, #36]	@ (8009bd0 <cleanup_stdio+0x38>)
 8009bac:	4299      	cmp	r1, r3
 8009bae:	d002      	beq.n	8009bb6 <cleanup_stdio+0x1e>
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	f000 fe95 	bl	800a8e0 <_fflush_r>
 8009bb6:	68e1      	ldr	r1, [r4, #12]
 8009bb8:	4b06      	ldr	r3, [pc, #24]	@ (8009bd4 <cleanup_stdio+0x3c>)
 8009bba:	4299      	cmp	r1, r3
 8009bbc:	d004      	beq.n	8009bc8 <cleanup_stdio+0x30>
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bc4:	f000 be8c 	b.w	800a8e0 <_fflush_r>
 8009bc8:	bd10      	pop	{r4, pc}
 8009bca:	bf00      	nop
 8009bcc:	200009bc 	.word	0x200009bc
 8009bd0:	20000a24 	.word	0x20000a24
 8009bd4:	20000a8c 	.word	0x20000a8c

08009bd8 <global_stdio_init.part.0>:
 8009bd8:	b510      	push	{r4, lr}
 8009bda:	4b0b      	ldr	r3, [pc, #44]	@ (8009c08 <global_stdio_init.part.0+0x30>)
 8009bdc:	4c0b      	ldr	r4, [pc, #44]	@ (8009c0c <global_stdio_init.part.0+0x34>)
 8009bde:	4a0c      	ldr	r2, [pc, #48]	@ (8009c10 <global_stdio_init.part.0+0x38>)
 8009be0:	601a      	str	r2, [r3, #0]
 8009be2:	4620      	mov	r0, r4
 8009be4:	2200      	movs	r2, #0
 8009be6:	2104      	movs	r1, #4
 8009be8:	f7ff ff94 	bl	8009b14 <std>
 8009bec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	2109      	movs	r1, #9
 8009bf4:	f7ff ff8e 	bl	8009b14 <std>
 8009bf8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009bfc:	2202      	movs	r2, #2
 8009bfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c02:	2112      	movs	r1, #18
 8009c04:	f7ff bf86 	b.w	8009b14 <std>
 8009c08:	20000af4 	.word	0x20000af4
 8009c0c:	200009bc 	.word	0x200009bc
 8009c10:	08009b81 	.word	0x08009b81

08009c14 <__sfp_lock_acquire>:
 8009c14:	4801      	ldr	r0, [pc, #4]	@ (8009c1c <__sfp_lock_acquire+0x8>)
 8009c16:	f000 bac4 	b.w	800a1a2 <__retarget_lock_acquire_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20000afd 	.word	0x20000afd

08009c20 <__sfp_lock_release>:
 8009c20:	4801      	ldr	r0, [pc, #4]	@ (8009c28 <__sfp_lock_release+0x8>)
 8009c22:	f000 babf 	b.w	800a1a4 <__retarget_lock_release_recursive>
 8009c26:	bf00      	nop
 8009c28:	20000afd 	.word	0x20000afd

08009c2c <__sinit>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	4604      	mov	r4, r0
 8009c30:	f7ff fff0 	bl	8009c14 <__sfp_lock_acquire>
 8009c34:	6a23      	ldr	r3, [r4, #32]
 8009c36:	b11b      	cbz	r3, 8009c40 <__sinit+0x14>
 8009c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c3c:	f7ff bff0 	b.w	8009c20 <__sfp_lock_release>
 8009c40:	4b04      	ldr	r3, [pc, #16]	@ (8009c54 <__sinit+0x28>)
 8009c42:	6223      	str	r3, [r4, #32]
 8009c44:	4b04      	ldr	r3, [pc, #16]	@ (8009c58 <__sinit+0x2c>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d1f5      	bne.n	8009c38 <__sinit+0xc>
 8009c4c:	f7ff ffc4 	bl	8009bd8 <global_stdio_init.part.0>
 8009c50:	e7f2      	b.n	8009c38 <__sinit+0xc>
 8009c52:	bf00      	nop
 8009c54:	08009b99 	.word	0x08009b99
 8009c58:	20000af4 	.word	0x20000af4

08009c5c <_fwalk_sglue>:
 8009c5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c60:	4607      	mov	r7, r0
 8009c62:	4688      	mov	r8, r1
 8009c64:	4614      	mov	r4, r2
 8009c66:	2600      	movs	r6, #0
 8009c68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009c70:	d505      	bpl.n	8009c7e <_fwalk_sglue+0x22>
 8009c72:	6824      	ldr	r4, [r4, #0]
 8009c74:	2c00      	cmp	r4, #0
 8009c76:	d1f7      	bne.n	8009c68 <_fwalk_sglue+0xc>
 8009c78:	4630      	mov	r0, r6
 8009c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c7e:	89ab      	ldrh	r3, [r5, #12]
 8009c80:	2b01      	cmp	r3, #1
 8009c82:	d907      	bls.n	8009c94 <_fwalk_sglue+0x38>
 8009c84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c88:	3301      	adds	r3, #1
 8009c8a:	d003      	beq.n	8009c94 <_fwalk_sglue+0x38>
 8009c8c:	4629      	mov	r1, r5
 8009c8e:	4638      	mov	r0, r7
 8009c90:	47c0      	blx	r8
 8009c92:	4306      	orrs	r6, r0
 8009c94:	3568      	adds	r5, #104	@ 0x68
 8009c96:	e7e9      	b.n	8009c6c <_fwalk_sglue+0x10>

08009c98 <iprintf>:
 8009c98:	b40f      	push	{r0, r1, r2, r3}
 8009c9a:	b507      	push	{r0, r1, r2, lr}
 8009c9c:	4906      	ldr	r1, [pc, #24]	@ (8009cb8 <iprintf+0x20>)
 8009c9e:	ab04      	add	r3, sp, #16
 8009ca0:	6808      	ldr	r0, [r1, #0]
 8009ca2:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca6:	6881      	ldr	r1, [r0, #8]
 8009ca8:	9301      	str	r3, [sp, #4]
 8009caa:	f000 faf1 	bl	800a290 <_vfiprintf_r>
 8009cae:	b003      	add	sp, #12
 8009cb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cb4:	b004      	add	sp, #16
 8009cb6:	4770      	bx	lr
 8009cb8:	20000038 	.word	0x20000038

08009cbc <_puts_r>:
 8009cbc:	6a03      	ldr	r3, [r0, #32]
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	6884      	ldr	r4, [r0, #8]
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	460e      	mov	r6, r1
 8009cc6:	b90b      	cbnz	r3, 8009ccc <_puts_r+0x10>
 8009cc8:	f7ff ffb0 	bl	8009c2c <__sinit>
 8009ccc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cce:	07db      	lsls	r3, r3, #31
 8009cd0:	d405      	bmi.n	8009cde <_puts_r+0x22>
 8009cd2:	89a3      	ldrh	r3, [r4, #12]
 8009cd4:	0598      	lsls	r0, r3, #22
 8009cd6:	d402      	bmi.n	8009cde <_puts_r+0x22>
 8009cd8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cda:	f000 fa62 	bl	800a1a2 <__retarget_lock_acquire_recursive>
 8009cde:	89a3      	ldrh	r3, [r4, #12]
 8009ce0:	0719      	lsls	r1, r3, #28
 8009ce2:	d502      	bpl.n	8009cea <_puts_r+0x2e>
 8009ce4:	6923      	ldr	r3, [r4, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d135      	bne.n	8009d56 <_puts_r+0x9a>
 8009cea:	4621      	mov	r1, r4
 8009cec:	4628      	mov	r0, r5
 8009cee:	f000 f979 	bl	8009fe4 <__swsetup_r>
 8009cf2:	b380      	cbz	r0, 8009d56 <_puts_r+0x9a>
 8009cf4:	f04f 35ff 	mov.w	r5, #4294967295
 8009cf8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cfa:	07da      	lsls	r2, r3, #31
 8009cfc:	d405      	bmi.n	8009d0a <_puts_r+0x4e>
 8009cfe:	89a3      	ldrh	r3, [r4, #12]
 8009d00:	059b      	lsls	r3, r3, #22
 8009d02:	d402      	bmi.n	8009d0a <_puts_r+0x4e>
 8009d04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009d06:	f000 fa4d 	bl	800a1a4 <__retarget_lock_release_recursive>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	bd70      	pop	{r4, r5, r6, pc}
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	da04      	bge.n	8009d1c <_puts_r+0x60>
 8009d12:	69a2      	ldr	r2, [r4, #24]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	dc17      	bgt.n	8009d48 <_puts_r+0x8c>
 8009d18:	290a      	cmp	r1, #10
 8009d1a:	d015      	beq.n	8009d48 <_puts_r+0x8c>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	1c5a      	adds	r2, r3, #1
 8009d20:	6022      	str	r2, [r4, #0]
 8009d22:	7019      	strb	r1, [r3, #0]
 8009d24:	68a3      	ldr	r3, [r4, #8]
 8009d26:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009d2a:	3b01      	subs	r3, #1
 8009d2c:	60a3      	str	r3, [r4, #8]
 8009d2e:	2900      	cmp	r1, #0
 8009d30:	d1ed      	bne.n	8009d0e <_puts_r+0x52>
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	da11      	bge.n	8009d5a <_puts_r+0x9e>
 8009d36:	4622      	mov	r2, r4
 8009d38:	210a      	movs	r1, #10
 8009d3a:	4628      	mov	r0, r5
 8009d3c:	f000 f913 	bl	8009f66 <__swbuf_r>
 8009d40:	3001      	adds	r0, #1
 8009d42:	d0d7      	beq.n	8009cf4 <_puts_r+0x38>
 8009d44:	250a      	movs	r5, #10
 8009d46:	e7d7      	b.n	8009cf8 <_puts_r+0x3c>
 8009d48:	4622      	mov	r2, r4
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	f000 f90b 	bl	8009f66 <__swbuf_r>
 8009d50:	3001      	adds	r0, #1
 8009d52:	d1e7      	bne.n	8009d24 <_puts_r+0x68>
 8009d54:	e7ce      	b.n	8009cf4 <_puts_r+0x38>
 8009d56:	3e01      	subs	r6, #1
 8009d58:	e7e4      	b.n	8009d24 <_puts_r+0x68>
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	1c5a      	adds	r2, r3, #1
 8009d5e:	6022      	str	r2, [r4, #0]
 8009d60:	220a      	movs	r2, #10
 8009d62:	701a      	strb	r2, [r3, #0]
 8009d64:	e7ee      	b.n	8009d44 <_puts_r+0x88>
	...

08009d68 <puts>:
 8009d68:	4b02      	ldr	r3, [pc, #8]	@ (8009d74 <puts+0xc>)
 8009d6a:	4601      	mov	r1, r0
 8009d6c:	6818      	ldr	r0, [r3, #0]
 8009d6e:	f7ff bfa5 	b.w	8009cbc <_puts_r>
 8009d72:	bf00      	nop
 8009d74:	20000038 	.word	0x20000038

08009d78 <setvbuf>:
 8009d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009d7c:	461d      	mov	r5, r3
 8009d7e:	4b57      	ldr	r3, [pc, #348]	@ (8009edc <setvbuf+0x164>)
 8009d80:	681f      	ldr	r7, [r3, #0]
 8009d82:	4604      	mov	r4, r0
 8009d84:	460e      	mov	r6, r1
 8009d86:	4690      	mov	r8, r2
 8009d88:	b127      	cbz	r7, 8009d94 <setvbuf+0x1c>
 8009d8a:	6a3b      	ldr	r3, [r7, #32]
 8009d8c:	b913      	cbnz	r3, 8009d94 <setvbuf+0x1c>
 8009d8e:	4638      	mov	r0, r7
 8009d90:	f7ff ff4c 	bl	8009c2c <__sinit>
 8009d94:	f1b8 0f02 	cmp.w	r8, #2
 8009d98:	d006      	beq.n	8009da8 <setvbuf+0x30>
 8009d9a:	f1b8 0f01 	cmp.w	r8, #1
 8009d9e:	f200 809a 	bhi.w	8009ed6 <setvbuf+0x15e>
 8009da2:	2d00      	cmp	r5, #0
 8009da4:	f2c0 8097 	blt.w	8009ed6 <setvbuf+0x15e>
 8009da8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009daa:	07d9      	lsls	r1, r3, #31
 8009dac:	d405      	bmi.n	8009dba <setvbuf+0x42>
 8009dae:	89a3      	ldrh	r3, [r4, #12]
 8009db0:	059a      	lsls	r2, r3, #22
 8009db2:	d402      	bmi.n	8009dba <setvbuf+0x42>
 8009db4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009db6:	f000 f9f4 	bl	800a1a2 <__retarget_lock_acquire_recursive>
 8009dba:	4621      	mov	r1, r4
 8009dbc:	4638      	mov	r0, r7
 8009dbe:	f000 fd8f 	bl	800a8e0 <_fflush_r>
 8009dc2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009dc4:	b141      	cbz	r1, 8009dd8 <setvbuf+0x60>
 8009dc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009dca:	4299      	cmp	r1, r3
 8009dcc:	d002      	beq.n	8009dd4 <setvbuf+0x5c>
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f000 f9ea 	bl	800a1a8 <_free_r>
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8009dd8:	2300      	movs	r3, #0
 8009dda:	61a3      	str	r3, [r4, #24]
 8009ddc:	6063      	str	r3, [r4, #4]
 8009dde:	89a3      	ldrh	r3, [r4, #12]
 8009de0:	061b      	lsls	r3, r3, #24
 8009de2:	d503      	bpl.n	8009dec <setvbuf+0x74>
 8009de4:	6921      	ldr	r1, [r4, #16]
 8009de6:	4638      	mov	r0, r7
 8009de8:	f000 f9de 	bl	800a1a8 <_free_r>
 8009dec:	89a3      	ldrh	r3, [r4, #12]
 8009dee:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 8009df2:	f023 0303 	bic.w	r3, r3, #3
 8009df6:	f1b8 0f02 	cmp.w	r8, #2
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	d061      	beq.n	8009ec2 <setvbuf+0x14a>
 8009dfe:	ab01      	add	r3, sp, #4
 8009e00:	466a      	mov	r2, sp
 8009e02:	4621      	mov	r1, r4
 8009e04:	4638      	mov	r0, r7
 8009e06:	f000 fd93 	bl	800a930 <__swhatbuf_r>
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	4318      	orrs	r0, r3
 8009e0e:	81a0      	strh	r0, [r4, #12]
 8009e10:	bb2d      	cbnz	r5, 8009e5e <setvbuf+0xe6>
 8009e12:	9d00      	ldr	r5, [sp, #0]
 8009e14:	4628      	mov	r0, r5
 8009e16:	f7ff fdbf 	bl	8009998 <malloc>
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	2800      	cmp	r0, #0
 8009e1e:	d152      	bne.n	8009ec6 <setvbuf+0x14e>
 8009e20:	f8dd 9000 	ldr.w	r9, [sp]
 8009e24:	45a9      	cmp	r9, r5
 8009e26:	d140      	bne.n	8009eaa <setvbuf+0x132>
 8009e28:	f04f 35ff 	mov.w	r5, #4294967295
 8009e2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e30:	f043 0202 	orr.w	r2, r3, #2
 8009e34:	81a2      	strh	r2, [r4, #12]
 8009e36:	2200      	movs	r2, #0
 8009e38:	60a2      	str	r2, [r4, #8]
 8009e3a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8009e3e:	6022      	str	r2, [r4, #0]
 8009e40:	6122      	str	r2, [r4, #16]
 8009e42:	2201      	movs	r2, #1
 8009e44:	6162      	str	r2, [r4, #20]
 8009e46:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e48:	07d6      	lsls	r6, r2, #31
 8009e4a:	d404      	bmi.n	8009e56 <setvbuf+0xde>
 8009e4c:	0598      	lsls	r0, r3, #22
 8009e4e:	d402      	bmi.n	8009e56 <setvbuf+0xde>
 8009e50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009e52:	f000 f9a7 	bl	800a1a4 <__retarget_lock_release_recursive>
 8009e56:	4628      	mov	r0, r5
 8009e58:	b003      	add	sp, #12
 8009e5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e5e:	2e00      	cmp	r6, #0
 8009e60:	d0d8      	beq.n	8009e14 <setvbuf+0x9c>
 8009e62:	6a3b      	ldr	r3, [r7, #32]
 8009e64:	b913      	cbnz	r3, 8009e6c <setvbuf+0xf4>
 8009e66:	4638      	mov	r0, r7
 8009e68:	f7ff fee0 	bl	8009c2c <__sinit>
 8009e6c:	f1b8 0f01 	cmp.w	r8, #1
 8009e70:	bf08      	it	eq
 8009e72:	89a3      	ldrheq	r3, [r4, #12]
 8009e74:	6026      	str	r6, [r4, #0]
 8009e76:	bf04      	itt	eq
 8009e78:	f043 0301 	orreq.w	r3, r3, #1
 8009e7c:	81a3      	strheq	r3, [r4, #12]
 8009e7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009e82:	f013 0208 	ands.w	r2, r3, #8
 8009e86:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009e8a:	d01e      	beq.n	8009eca <setvbuf+0x152>
 8009e8c:	07d9      	lsls	r1, r3, #31
 8009e8e:	bf41      	itttt	mi
 8009e90:	2200      	movmi	r2, #0
 8009e92:	426d      	negmi	r5, r5
 8009e94:	60a2      	strmi	r2, [r4, #8]
 8009e96:	61a5      	strmi	r5, [r4, #24]
 8009e98:	bf58      	it	pl
 8009e9a:	60a5      	strpl	r5, [r4, #8]
 8009e9c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009e9e:	07d2      	lsls	r2, r2, #31
 8009ea0:	d401      	bmi.n	8009ea6 <setvbuf+0x12e>
 8009ea2:	059b      	lsls	r3, r3, #22
 8009ea4:	d513      	bpl.n	8009ece <setvbuf+0x156>
 8009ea6:	2500      	movs	r5, #0
 8009ea8:	e7d5      	b.n	8009e56 <setvbuf+0xde>
 8009eaa:	4648      	mov	r0, r9
 8009eac:	f7ff fd74 	bl	8009998 <malloc>
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	2800      	cmp	r0, #0
 8009eb4:	d0b8      	beq.n	8009e28 <setvbuf+0xb0>
 8009eb6:	89a3      	ldrh	r3, [r4, #12]
 8009eb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009ebc:	81a3      	strh	r3, [r4, #12]
 8009ebe:	464d      	mov	r5, r9
 8009ec0:	e7cf      	b.n	8009e62 <setvbuf+0xea>
 8009ec2:	2500      	movs	r5, #0
 8009ec4:	e7b2      	b.n	8009e2c <setvbuf+0xb4>
 8009ec6:	46a9      	mov	r9, r5
 8009ec8:	e7f5      	b.n	8009eb6 <setvbuf+0x13e>
 8009eca:	60a2      	str	r2, [r4, #8]
 8009ecc:	e7e6      	b.n	8009e9c <setvbuf+0x124>
 8009ece:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ed0:	f000 f968 	bl	800a1a4 <__retarget_lock_release_recursive>
 8009ed4:	e7e7      	b.n	8009ea6 <setvbuf+0x12e>
 8009ed6:	f04f 35ff 	mov.w	r5, #4294967295
 8009eda:	e7bc      	b.n	8009e56 <setvbuf+0xde>
 8009edc:	20000038 	.word	0x20000038

08009ee0 <__sread>:
 8009ee0:	b510      	push	{r4, lr}
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ee8:	f000 f8fc 	bl	800a0e4 <_read_r>
 8009eec:	2800      	cmp	r0, #0
 8009eee:	bfab      	itete	ge
 8009ef0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8009ef2:	89a3      	ldrhlt	r3, [r4, #12]
 8009ef4:	181b      	addge	r3, r3, r0
 8009ef6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009efa:	bfac      	ite	ge
 8009efc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009efe:	81a3      	strhlt	r3, [r4, #12]
 8009f00:	bd10      	pop	{r4, pc}

08009f02 <__swrite>:
 8009f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f06:	461f      	mov	r7, r3
 8009f08:	898b      	ldrh	r3, [r1, #12]
 8009f0a:	05db      	lsls	r3, r3, #23
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	460c      	mov	r4, r1
 8009f10:	4616      	mov	r6, r2
 8009f12:	d505      	bpl.n	8009f20 <__swrite+0x1e>
 8009f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f18:	2302      	movs	r3, #2
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f000 f8d0 	bl	800a0c0 <_lseek_r>
 8009f20:	89a3      	ldrh	r3, [r4, #12]
 8009f22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009f26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f2a:	81a3      	strh	r3, [r4, #12]
 8009f2c:	4632      	mov	r2, r6
 8009f2e:	463b      	mov	r3, r7
 8009f30:	4628      	mov	r0, r5
 8009f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f36:	f000 b8f7 	b.w	800a128 <_write_r>

08009f3a <__sseek>:
 8009f3a:	b510      	push	{r4, lr}
 8009f3c:	460c      	mov	r4, r1
 8009f3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f42:	f000 f8bd 	bl	800a0c0 <_lseek_r>
 8009f46:	1c43      	adds	r3, r0, #1
 8009f48:	89a3      	ldrh	r3, [r4, #12]
 8009f4a:	bf15      	itete	ne
 8009f4c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009f4e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8009f52:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8009f56:	81a3      	strheq	r3, [r4, #12]
 8009f58:	bf18      	it	ne
 8009f5a:	81a3      	strhne	r3, [r4, #12]
 8009f5c:	bd10      	pop	{r4, pc}

08009f5e <__sclose>:
 8009f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009f62:	f000 b89d 	b.w	800a0a0 <_close_r>

08009f66 <__swbuf_r>:
 8009f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f68:	460e      	mov	r6, r1
 8009f6a:	4614      	mov	r4, r2
 8009f6c:	4605      	mov	r5, r0
 8009f6e:	b118      	cbz	r0, 8009f78 <__swbuf_r+0x12>
 8009f70:	6a03      	ldr	r3, [r0, #32]
 8009f72:	b90b      	cbnz	r3, 8009f78 <__swbuf_r+0x12>
 8009f74:	f7ff fe5a 	bl	8009c2c <__sinit>
 8009f78:	69a3      	ldr	r3, [r4, #24]
 8009f7a:	60a3      	str	r3, [r4, #8]
 8009f7c:	89a3      	ldrh	r3, [r4, #12]
 8009f7e:	071a      	lsls	r2, r3, #28
 8009f80:	d501      	bpl.n	8009f86 <__swbuf_r+0x20>
 8009f82:	6923      	ldr	r3, [r4, #16]
 8009f84:	b943      	cbnz	r3, 8009f98 <__swbuf_r+0x32>
 8009f86:	4621      	mov	r1, r4
 8009f88:	4628      	mov	r0, r5
 8009f8a:	f000 f82b 	bl	8009fe4 <__swsetup_r>
 8009f8e:	b118      	cbz	r0, 8009f98 <__swbuf_r+0x32>
 8009f90:	f04f 37ff 	mov.w	r7, #4294967295
 8009f94:	4638      	mov	r0, r7
 8009f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f98:	6823      	ldr	r3, [r4, #0]
 8009f9a:	6922      	ldr	r2, [r4, #16]
 8009f9c:	1a98      	subs	r0, r3, r2
 8009f9e:	6963      	ldr	r3, [r4, #20]
 8009fa0:	b2f6      	uxtb	r6, r6
 8009fa2:	4283      	cmp	r3, r0
 8009fa4:	4637      	mov	r7, r6
 8009fa6:	dc05      	bgt.n	8009fb4 <__swbuf_r+0x4e>
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4628      	mov	r0, r5
 8009fac:	f000 fc98 	bl	800a8e0 <_fflush_r>
 8009fb0:	2800      	cmp	r0, #0
 8009fb2:	d1ed      	bne.n	8009f90 <__swbuf_r+0x2a>
 8009fb4:	68a3      	ldr	r3, [r4, #8]
 8009fb6:	3b01      	subs	r3, #1
 8009fb8:	60a3      	str	r3, [r4, #8]
 8009fba:	6823      	ldr	r3, [r4, #0]
 8009fbc:	1c5a      	adds	r2, r3, #1
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	701e      	strb	r6, [r3, #0]
 8009fc2:	6962      	ldr	r2, [r4, #20]
 8009fc4:	1c43      	adds	r3, r0, #1
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d004      	beq.n	8009fd4 <__swbuf_r+0x6e>
 8009fca:	89a3      	ldrh	r3, [r4, #12]
 8009fcc:	07db      	lsls	r3, r3, #31
 8009fce:	d5e1      	bpl.n	8009f94 <__swbuf_r+0x2e>
 8009fd0:	2e0a      	cmp	r6, #10
 8009fd2:	d1df      	bne.n	8009f94 <__swbuf_r+0x2e>
 8009fd4:	4621      	mov	r1, r4
 8009fd6:	4628      	mov	r0, r5
 8009fd8:	f000 fc82 	bl	800a8e0 <_fflush_r>
 8009fdc:	2800      	cmp	r0, #0
 8009fde:	d0d9      	beq.n	8009f94 <__swbuf_r+0x2e>
 8009fe0:	e7d6      	b.n	8009f90 <__swbuf_r+0x2a>
	...

08009fe4 <__swsetup_r>:
 8009fe4:	b538      	push	{r3, r4, r5, lr}
 8009fe6:	4b29      	ldr	r3, [pc, #164]	@ (800a08c <__swsetup_r+0xa8>)
 8009fe8:	4605      	mov	r5, r0
 8009fea:	6818      	ldr	r0, [r3, #0]
 8009fec:	460c      	mov	r4, r1
 8009fee:	b118      	cbz	r0, 8009ff8 <__swsetup_r+0x14>
 8009ff0:	6a03      	ldr	r3, [r0, #32]
 8009ff2:	b90b      	cbnz	r3, 8009ff8 <__swsetup_r+0x14>
 8009ff4:	f7ff fe1a 	bl	8009c2c <__sinit>
 8009ff8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffc:	0719      	lsls	r1, r3, #28
 8009ffe:	d422      	bmi.n	800a046 <__swsetup_r+0x62>
 800a000:	06da      	lsls	r2, r3, #27
 800a002:	d407      	bmi.n	800a014 <__swsetup_r+0x30>
 800a004:	2209      	movs	r2, #9
 800a006:	602a      	str	r2, [r5, #0]
 800a008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a00c:	81a3      	strh	r3, [r4, #12]
 800a00e:	f04f 30ff 	mov.w	r0, #4294967295
 800a012:	e033      	b.n	800a07c <__swsetup_r+0x98>
 800a014:	0758      	lsls	r0, r3, #29
 800a016:	d512      	bpl.n	800a03e <__swsetup_r+0x5a>
 800a018:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a01a:	b141      	cbz	r1, 800a02e <__swsetup_r+0x4a>
 800a01c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a020:	4299      	cmp	r1, r3
 800a022:	d002      	beq.n	800a02a <__swsetup_r+0x46>
 800a024:	4628      	mov	r0, r5
 800a026:	f000 f8bf 	bl	800a1a8 <_free_r>
 800a02a:	2300      	movs	r3, #0
 800a02c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a034:	81a3      	strh	r3, [r4, #12]
 800a036:	2300      	movs	r3, #0
 800a038:	6063      	str	r3, [r4, #4]
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	6023      	str	r3, [r4, #0]
 800a03e:	89a3      	ldrh	r3, [r4, #12]
 800a040:	f043 0308 	orr.w	r3, r3, #8
 800a044:	81a3      	strh	r3, [r4, #12]
 800a046:	6923      	ldr	r3, [r4, #16]
 800a048:	b94b      	cbnz	r3, 800a05e <__swsetup_r+0x7a>
 800a04a:	89a3      	ldrh	r3, [r4, #12]
 800a04c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a054:	d003      	beq.n	800a05e <__swsetup_r+0x7a>
 800a056:	4621      	mov	r1, r4
 800a058:	4628      	mov	r0, r5
 800a05a:	f000 fc8f 	bl	800a97c <__smakebuf_r>
 800a05e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a062:	f013 0201 	ands.w	r2, r3, #1
 800a066:	d00a      	beq.n	800a07e <__swsetup_r+0x9a>
 800a068:	2200      	movs	r2, #0
 800a06a:	60a2      	str	r2, [r4, #8]
 800a06c:	6962      	ldr	r2, [r4, #20]
 800a06e:	4252      	negs	r2, r2
 800a070:	61a2      	str	r2, [r4, #24]
 800a072:	6922      	ldr	r2, [r4, #16]
 800a074:	b942      	cbnz	r2, 800a088 <__swsetup_r+0xa4>
 800a076:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a07a:	d1c5      	bne.n	800a008 <__swsetup_r+0x24>
 800a07c:	bd38      	pop	{r3, r4, r5, pc}
 800a07e:	0799      	lsls	r1, r3, #30
 800a080:	bf58      	it	pl
 800a082:	6962      	ldrpl	r2, [r4, #20]
 800a084:	60a2      	str	r2, [r4, #8]
 800a086:	e7f4      	b.n	800a072 <__swsetup_r+0x8e>
 800a088:	2000      	movs	r0, #0
 800a08a:	e7f7      	b.n	800a07c <__swsetup_r+0x98>
 800a08c:	20000038 	.word	0x20000038

0800a090 <memset>:
 800a090:	4402      	add	r2, r0
 800a092:	4603      	mov	r3, r0
 800a094:	4293      	cmp	r3, r2
 800a096:	d100      	bne.n	800a09a <memset+0xa>
 800a098:	4770      	bx	lr
 800a09a:	f803 1b01 	strb.w	r1, [r3], #1
 800a09e:	e7f9      	b.n	800a094 <memset+0x4>

0800a0a0 <_close_r>:
 800a0a0:	b538      	push	{r3, r4, r5, lr}
 800a0a2:	4d06      	ldr	r5, [pc, #24]	@ (800a0bc <_close_r+0x1c>)
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	4604      	mov	r4, r0
 800a0a8:	4608      	mov	r0, r1
 800a0aa:	602b      	str	r3, [r5, #0]
 800a0ac:	f7f7 f9c7 	bl	800143e <_close>
 800a0b0:	1c43      	adds	r3, r0, #1
 800a0b2:	d102      	bne.n	800a0ba <_close_r+0x1a>
 800a0b4:	682b      	ldr	r3, [r5, #0]
 800a0b6:	b103      	cbz	r3, 800a0ba <_close_r+0x1a>
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	bd38      	pop	{r3, r4, r5, pc}
 800a0bc:	20000af8 	.word	0x20000af8

0800a0c0 <_lseek_r>:
 800a0c0:	b538      	push	{r3, r4, r5, lr}
 800a0c2:	4d07      	ldr	r5, [pc, #28]	@ (800a0e0 <_lseek_r+0x20>)
 800a0c4:	4604      	mov	r4, r0
 800a0c6:	4608      	mov	r0, r1
 800a0c8:	4611      	mov	r1, r2
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	602a      	str	r2, [r5, #0]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	f7f7 f9dc 	bl	800148c <_lseek>
 800a0d4:	1c43      	adds	r3, r0, #1
 800a0d6:	d102      	bne.n	800a0de <_lseek_r+0x1e>
 800a0d8:	682b      	ldr	r3, [r5, #0]
 800a0da:	b103      	cbz	r3, 800a0de <_lseek_r+0x1e>
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bd38      	pop	{r3, r4, r5, pc}
 800a0e0:	20000af8 	.word	0x20000af8

0800a0e4 <_read_r>:
 800a0e4:	b538      	push	{r3, r4, r5, lr}
 800a0e6:	4d07      	ldr	r5, [pc, #28]	@ (800a104 <_read_r+0x20>)
 800a0e8:	4604      	mov	r4, r0
 800a0ea:	4608      	mov	r0, r1
 800a0ec:	4611      	mov	r1, r2
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	602a      	str	r2, [r5, #0]
 800a0f2:	461a      	mov	r2, r3
 800a0f4:	f7f7 f986 	bl	8001404 <_read>
 800a0f8:	1c43      	adds	r3, r0, #1
 800a0fa:	d102      	bne.n	800a102 <_read_r+0x1e>
 800a0fc:	682b      	ldr	r3, [r5, #0]
 800a0fe:	b103      	cbz	r3, 800a102 <_read_r+0x1e>
 800a100:	6023      	str	r3, [r4, #0]
 800a102:	bd38      	pop	{r3, r4, r5, pc}
 800a104:	20000af8 	.word	0x20000af8

0800a108 <_sbrk_r>:
 800a108:	b538      	push	{r3, r4, r5, lr}
 800a10a:	4d06      	ldr	r5, [pc, #24]	@ (800a124 <_sbrk_r+0x1c>)
 800a10c:	2300      	movs	r3, #0
 800a10e:	4604      	mov	r4, r0
 800a110:	4608      	mov	r0, r1
 800a112:	602b      	str	r3, [r5, #0]
 800a114:	f7f7 f9c8 	bl	80014a8 <_sbrk>
 800a118:	1c43      	adds	r3, r0, #1
 800a11a:	d102      	bne.n	800a122 <_sbrk_r+0x1a>
 800a11c:	682b      	ldr	r3, [r5, #0]
 800a11e:	b103      	cbz	r3, 800a122 <_sbrk_r+0x1a>
 800a120:	6023      	str	r3, [r4, #0]
 800a122:	bd38      	pop	{r3, r4, r5, pc}
 800a124:	20000af8 	.word	0x20000af8

0800a128 <_write_r>:
 800a128:	b538      	push	{r3, r4, r5, lr}
 800a12a:	4d07      	ldr	r5, [pc, #28]	@ (800a148 <_write_r+0x20>)
 800a12c:	4604      	mov	r4, r0
 800a12e:	4608      	mov	r0, r1
 800a130:	4611      	mov	r1, r2
 800a132:	2200      	movs	r2, #0
 800a134:	602a      	str	r2, [r5, #0]
 800a136:	461a      	mov	r2, r3
 800a138:	f7f6 fa30 	bl	800059c <_write>
 800a13c:	1c43      	adds	r3, r0, #1
 800a13e:	d102      	bne.n	800a146 <_write_r+0x1e>
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	b103      	cbz	r3, 800a146 <_write_r+0x1e>
 800a144:	6023      	str	r3, [r4, #0]
 800a146:	bd38      	pop	{r3, r4, r5, pc}
 800a148:	20000af8 	.word	0x20000af8

0800a14c <__errno>:
 800a14c:	4b01      	ldr	r3, [pc, #4]	@ (800a154 <__errno+0x8>)
 800a14e:	6818      	ldr	r0, [r3, #0]
 800a150:	4770      	bx	lr
 800a152:	bf00      	nop
 800a154:	20000038 	.word	0x20000038

0800a158 <__libc_init_array>:
 800a158:	b570      	push	{r4, r5, r6, lr}
 800a15a:	4d0d      	ldr	r5, [pc, #52]	@ (800a190 <__libc_init_array+0x38>)
 800a15c:	4c0d      	ldr	r4, [pc, #52]	@ (800a194 <__libc_init_array+0x3c>)
 800a15e:	1b64      	subs	r4, r4, r5
 800a160:	10a4      	asrs	r4, r4, #2
 800a162:	2600      	movs	r6, #0
 800a164:	42a6      	cmp	r6, r4
 800a166:	d109      	bne.n	800a17c <__libc_init_array+0x24>
 800a168:	4d0b      	ldr	r5, [pc, #44]	@ (800a198 <__libc_init_array+0x40>)
 800a16a:	4c0c      	ldr	r4, [pc, #48]	@ (800a19c <__libc_init_array+0x44>)
 800a16c:	f000 fc64 	bl	800aa38 <_init>
 800a170:	1b64      	subs	r4, r4, r5
 800a172:	10a4      	asrs	r4, r4, #2
 800a174:	2600      	movs	r6, #0
 800a176:	42a6      	cmp	r6, r4
 800a178:	d105      	bne.n	800a186 <__libc_init_array+0x2e>
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a180:	4798      	blx	r3
 800a182:	3601      	adds	r6, #1
 800a184:	e7ee      	b.n	800a164 <__libc_init_array+0xc>
 800a186:	f855 3b04 	ldr.w	r3, [r5], #4
 800a18a:	4798      	blx	r3
 800a18c:	3601      	adds	r6, #1
 800a18e:	e7f2      	b.n	800a176 <__libc_init_array+0x1e>
 800a190:	0800ab28 	.word	0x0800ab28
 800a194:	0800ab28 	.word	0x0800ab28
 800a198:	0800ab28 	.word	0x0800ab28
 800a19c:	0800ab2c 	.word	0x0800ab2c

0800a1a0 <__retarget_lock_init_recursive>:
 800a1a0:	4770      	bx	lr

0800a1a2 <__retarget_lock_acquire_recursive>:
 800a1a2:	4770      	bx	lr

0800a1a4 <__retarget_lock_release_recursive>:
 800a1a4:	4770      	bx	lr
	...

0800a1a8 <_free_r>:
 800a1a8:	b538      	push	{r3, r4, r5, lr}
 800a1aa:	4605      	mov	r5, r0
 800a1ac:	2900      	cmp	r1, #0
 800a1ae:	d041      	beq.n	800a234 <_free_r+0x8c>
 800a1b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1b4:	1f0c      	subs	r4, r1, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	bfb8      	it	lt
 800a1ba:	18e4      	addlt	r4, r4, r3
 800a1bc:	f7ff fc9e 	bl	8009afc <__malloc_lock>
 800a1c0:	4a1d      	ldr	r2, [pc, #116]	@ (800a238 <_free_r+0x90>)
 800a1c2:	6813      	ldr	r3, [r2, #0]
 800a1c4:	b933      	cbnz	r3, 800a1d4 <_free_r+0x2c>
 800a1c6:	6063      	str	r3, [r4, #4]
 800a1c8:	6014      	str	r4, [r2, #0]
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1d0:	f7ff bc9a 	b.w	8009b08 <__malloc_unlock>
 800a1d4:	42a3      	cmp	r3, r4
 800a1d6:	d908      	bls.n	800a1ea <_free_r+0x42>
 800a1d8:	6820      	ldr	r0, [r4, #0]
 800a1da:	1821      	adds	r1, r4, r0
 800a1dc:	428b      	cmp	r3, r1
 800a1de:	bf01      	itttt	eq
 800a1e0:	6819      	ldreq	r1, [r3, #0]
 800a1e2:	685b      	ldreq	r3, [r3, #4]
 800a1e4:	1809      	addeq	r1, r1, r0
 800a1e6:	6021      	streq	r1, [r4, #0]
 800a1e8:	e7ed      	b.n	800a1c6 <_free_r+0x1e>
 800a1ea:	461a      	mov	r2, r3
 800a1ec:	685b      	ldr	r3, [r3, #4]
 800a1ee:	b10b      	cbz	r3, 800a1f4 <_free_r+0x4c>
 800a1f0:	42a3      	cmp	r3, r4
 800a1f2:	d9fa      	bls.n	800a1ea <_free_r+0x42>
 800a1f4:	6811      	ldr	r1, [r2, #0]
 800a1f6:	1850      	adds	r0, r2, r1
 800a1f8:	42a0      	cmp	r0, r4
 800a1fa:	d10b      	bne.n	800a214 <_free_r+0x6c>
 800a1fc:	6820      	ldr	r0, [r4, #0]
 800a1fe:	4401      	add	r1, r0
 800a200:	1850      	adds	r0, r2, r1
 800a202:	4283      	cmp	r3, r0
 800a204:	6011      	str	r1, [r2, #0]
 800a206:	d1e0      	bne.n	800a1ca <_free_r+0x22>
 800a208:	6818      	ldr	r0, [r3, #0]
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	6053      	str	r3, [r2, #4]
 800a20e:	4408      	add	r0, r1
 800a210:	6010      	str	r0, [r2, #0]
 800a212:	e7da      	b.n	800a1ca <_free_r+0x22>
 800a214:	d902      	bls.n	800a21c <_free_r+0x74>
 800a216:	230c      	movs	r3, #12
 800a218:	602b      	str	r3, [r5, #0]
 800a21a:	e7d6      	b.n	800a1ca <_free_r+0x22>
 800a21c:	6820      	ldr	r0, [r4, #0]
 800a21e:	1821      	adds	r1, r4, r0
 800a220:	428b      	cmp	r3, r1
 800a222:	bf04      	itt	eq
 800a224:	6819      	ldreq	r1, [r3, #0]
 800a226:	685b      	ldreq	r3, [r3, #4]
 800a228:	6063      	str	r3, [r4, #4]
 800a22a:	bf04      	itt	eq
 800a22c:	1809      	addeq	r1, r1, r0
 800a22e:	6021      	streq	r1, [r4, #0]
 800a230:	6054      	str	r4, [r2, #4]
 800a232:	e7ca      	b.n	800a1ca <_free_r+0x22>
 800a234:	bd38      	pop	{r3, r4, r5, pc}
 800a236:	bf00      	nop
 800a238:	200009b8 	.word	0x200009b8

0800a23c <__sfputc_r>:
 800a23c:	6893      	ldr	r3, [r2, #8]
 800a23e:	3b01      	subs	r3, #1
 800a240:	2b00      	cmp	r3, #0
 800a242:	b410      	push	{r4}
 800a244:	6093      	str	r3, [r2, #8]
 800a246:	da08      	bge.n	800a25a <__sfputc_r+0x1e>
 800a248:	6994      	ldr	r4, [r2, #24]
 800a24a:	42a3      	cmp	r3, r4
 800a24c:	db01      	blt.n	800a252 <__sfputc_r+0x16>
 800a24e:	290a      	cmp	r1, #10
 800a250:	d103      	bne.n	800a25a <__sfputc_r+0x1e>
 800a252:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a256:	f7ff be86 	b.w	8009f66 <__swbuf_r>
 800a25a:	6813      	ldr	r3, [r2, #0]
 800a25c:	1c58      	adds	r0, r3, #1
 800a25e:	6010      	str	r0, [r2, #0]
 800a260:	7019      	strb	r1, [r3, #0]
 800a262:	4608      	mov	r0, r1
 800a264:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a268:	4770      	bx	lr

0800a26a <__sfputs_r>:
 800a26a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a26c:	4606      	mov	r6, r0
 800a26e:	460f      	mov	r7, r1
 800a270:	4614      	mov	r4, r2
 800a272:	18d5      	adds	r5, r2, r3
 800a274:	42ac      	cmp	r4, r5
 800a276:	d101      	bne.n	800a27c <__sfputs_r+0x12>
 800a278:	2000      	movs	r0, #0
 800a27a:	e007      	b.n	800a28c <__sfputs_r+0x22>
 800a27c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a280:	463a      	mov	r2, r7
 800a282:	4630      	mov	r0, r6
 800a284:	f7ff ffda 	bl	800a23c <__sfputc_r>
 800a288:	1c43      	adds	r3, r0, #1
 800a28a:	d1f3      	bne.n	800a274 <__sfputs_r+0xa>
 800a28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a290 <_vfiprintf_r>:
 800a290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a294:	460d      	mov	r5, r1
 800a296:	b09d      	sub	sp, #116	@ 0x74
 800a298:	4614      	mov	r4, r2
 800a29a:	4698      	mov	r8, r3
 800a29c:	4606      	mov	r6, r0
 800a29e:	b118      	cbz	r0, 800a2a8 <_vfiprintf_r+0x18>
 800a2a0:	6a03      	ldr	r3, [r0, #32]
 800a2a2:	b90b      	cbnz	r3, 800a2a8 <_vfiprintf_r+0x18>
 800a2a4:	f7ff fcc2 	bl	8009c2c <__sinit>
 800a2a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2aa:	07d9      	lsls	r1, r3, #31
 800a2ac:	d405      	bmi.n	800a2ba <_vfiprintf_r+0x2a>
 800a2ae:	89ab      	ldrh	r3, [r5, #12]
 800a2b0:	059a      	lsls	r2, r3, #22
 800a2b2:	d402      	bmi.n	800a2ba <_vfiprintf_r+0x2a>
 800a2b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2b6:	f7ff ff74 	bl	800a1a2 <__retarget_lock_acquire_recursive>
 800a2ba:	89ab      	ldrh	r3, [r5, #12]
 800a2bc:	071b      	lsls	r3, r3, #28
 800a2be:	d501      	bpl.n	800a2c4 <_vfiprintf_r+0x34>
 800a2c0:	692b      	ldr	r3, [r5, #16]
 800a2c2:	b99b      	cbnz	r3, 800a2ec <_vfiprintf_r+0x5c>
 800a2c4:	4629      	mov	r1, r5
 800a2c6:	4630      	mov	r0, r6
 800a2c8:	f7ff fe8c 	bl	8009fe4 <__swsetup_r>
 800a2cc:	b170      	cbz	r0, 800a2ec <_vfiprintf_r+0x5c>
 800a2ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a2d0:	07dc      	lsls	r4, r3, #31
 800a2d2:	d504      	bpl.n	800a2de <_vfiprintf_r+0x4e>
 800a2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2d8:	b01d      	add	sp, #116	@ 0x74
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	89ab      	ldrh	r3, [r5, #12]
 800a2e0:	0598      	lsls	r0, r3, #22
 800a2e2:	d4f7      	bmi.n	800a2d4 <_vfiprintf_r+0x44>
 800a2e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a2e6:	f7ff ff5d 	bl	800a1a4 <__retarget_lock_release_recursive>
 800a2ea:	e7f3      	b.n	800a2d4 <_vfiprintf_r+0x44>
 800a2ec:	2300      	movs	r3, #0
 800a2ee:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2f0:	2320      	movs	r3, #32
 800a2f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2f6:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2fa:	2330      	movs	r3, #48	@ 0x30
 800a2fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a4ac <_vfiprintf_r+0x21c>
 800a300:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a304:	f04f 0901 	mov.w	r9, #1
 800a308:	4623      	mov	r3, r4
 800a30a:	469a      	mov	sl, r3
 800a30c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a310:	b10a      	cbz	r2, 800a316 <_vfiprintf_r+0x86>
 800a312:	2a25      	cmp	r2, #37	@ 0x25
 800a314:	d1f9      	bne.n	800a30a <_vfiprintf_r+0x7a>
 800a316:	ebba 0b04 	subs.w	fp, sl, r4
 800a31a:	d00b      	beq.n	800a334 <_vfiprintf_r+0xa4>
 800a31c:	465b      	mov	r3, fp
 800a31e:	4622      	mov	r2, r4
 800a320:	4629      	mov	r1, r5
 800a322:	4630      	mov	r0, r6
 800a324:	f7ff ffa1 	bl	800a26a <__sfputs_r>
 800a328:	3001      	adds	r0, #1
 800a32a:	f000 80a7 	beq.w	800a47c <_vfiprintf_r+0x1ec>
 800a32e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a330:	445a      	add	r2, fp
 800a332:	9209      	str	r2, [sp, #36]	@ 0x24
 800a334:	f89a 3000 	ldrb.w	r3, [sl]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	f000 809f 	beq.w	800a47c <_vfiprintf_r+0x1ec>
 800a33e:	2300      	movs	r3, #0
 800a340:	f04f 32ff 	mov.w	r2, #4294967295
 800a344:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a348:	f10a 0a01 	add.w	sl, sl, #1
 800a34c:	9304      	str	r3, [sp, #16]
 800a34e:	9307      	str	r3, [sp, #28]
 800a350:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a354:	931a      	str	r3, [sp, #104]	@ 0x68
 800a356:	4654      	mov	r4, sl
 800a358:	2205      	movs	r2, #5
 800a35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a35e:	4853      	ldr	r0, [pc, #332]	@ (800a4ac <_vfiprintf_r+0x21c>)
 800a360:	f7f5 ff36 	bl	80001d0 <memchr>
 800a364:	9a04      	ldr	r2, [sp, #16]
 800a366:	b9d8      	cbnz	r0, 800a3a0 <_vfiprintf_r+0x110>
 800a368:	06d1      	lsls	r1, r2, #27
 800a36a:	bf44      	itt	mi
 800a36c:	2320      	movmi	r3, #32
 800a36e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a372:	0713      	lsls	r3, r2, #28
 800a374:	bf44      	itt	mi
 800a376:	232b      	movmi	r3, #43	@ 0x2b
 800a378:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a37c:	f89a 3000 	ldrb.w	r3, [sl]
 800a380:	2b2a      	cmp	r3, #42	@ 0x2a
 800a382:	d015      	beq.n	800a3b0 <_vfiprintf_r+0x120>
 800a384:	9a07      	ldr	r2, [sp, #28]
 800a386:	4654      	mov	r4, sl
 800a388:	2000      	movs	r0, #0
 800a38a:	f04f 0c0a 	mov.w	ip, #10
 800a38e:	4621      	mov	r1, r4
 800a390:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a394:	3b30      	subs	r3, #48	@ 0x30
 800a396:	2b09      	cmp	r3, #9
 800a398:	d94b      	bls.n	800a432 <_vfiprintf_r+0x1a2>
 800a39a:	b1b0      	cbz	r0, 800a3ca <_vfiprintf_r+0x13a>
 800a39c:	9207      	str	r2, [sp, #28]
 800a39e:	e014      	b.n	800a3ca <_vfiprintf_r+0x13a>
 800a3a0:	eba0 0308 	sub.w	r3, r0, r8
 800a3a4:	fa09 f303 	lsl.w	r3, r9, r3
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	9304      	str	r3, [sp, #16]
 800a3ac:	46a2      	mov	sl, r4
 800a3ae:	e7d2      	b.n	800a356 <_vfiprintf_r+0xc6>
 800a3b0:	9b03      	ldr	r3, [sp, #12]
 800a3b2:	1d19      	adds	r1, r3, #4
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	9103      	str	r1, [sp, #12]
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	bfbb      	ittet	lt
 800a3bc:	425b      	neglt	r3, r3
 800a3be:	f042 0202 	orrlt.w	r2, r2, #2
 800a3c2:	9307      	strge	r3, [sp, #28]
 800a3c4:	9307      	strlt	r3, [sp, #28]
 800a3c6:	bfb8      	it	lt
 800a3c8:	9204      	strlt	r2, [sp, #16]
 800a3ca:	7823      	ldrb	r3, [r4, #0]
 800a3cc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a3ce:	d10a      	bne.n	800a3e6 <_vfiprintf_r+0x156>
 800a3d0:	7863      	ldrb	r3, [r4, #1]
 800a3d2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a3d4:	d132      	bne.n	800a43c <_vfiprintf_r+0x1ac>
 800a3d6:	9b03      	ldr	r3, [sp, #12]
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	9203      	str	r2, [sp, #12]
 800a3de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a3e2:	3402      	adds	r4, #2
 800a3e4:	9305      	str	r3, [sp, #20]
 800a3e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a4bc <_vfiprintf_r+0x22c>
 800a3ea:	7821      	ldrb	r1, [r4, #0]
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	4650      	mov	r0, sl
 800a3f0:	f7f5 feee 	bl	80001d0 <memchr>
 800a3f4:	b138      	cbz	r0, 800a406 <_vfiprintf_r+0x176>
 800a3f6:	9b04      	ldr	r3, [sp, #16]
 800a3f8:	eba0 000a 	sub.w	r0, r0, sl
 800a3fc:	2240      	movs	r2, #64	@ 0x40
 800a3fe:	4082      	lsls	r2, r0
 800a400:	4313      	orrs	r3, r2
 800a402:	3401      	adds	r4, #1
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a40a:	4829      	ldr	r0, [pc, #164]	@ (800a4b0 <_vfiprintf_r+0x220>)
 800a40c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a410:	2206      	movs	r2, #6
 800a412:	f7f5 fedd 	bl	80001d0 <memchr>
 800a416:	2800      	cmp	r0, #0
 800a418:	d03f      	beq.n	800a49a <_vfiprintf_r+0x20a>
 800a41a:	4b26      	ldr	r3, [pc, #152]	@ (800a4b4 <_vfiprintf_r+0x224>)
 800a41c:	bb1b      	cbnz	r3, 800a466 <_vfiprintf_r+0x1d6>
 800a41e:	9b03      	ldr	r3, [sp, #12]
 800a420:	3307      	adds	r3, #7
 800a422:	f023 0307 	bic.w	r3, r3, #7
 800a426:	3308      	adds	r3, #8
 800a428:	9303      	str	r3, [sp, #12]
 800a42a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a42c:	443b      	add	r3, r7
 800a42e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a430:	e76a      	b.n	800a308 <_vfiprintf_r+0x78>
 800a432:	fb0c 3202 	mla	r2, ip, r2, r3
 800a436:	460c      	mov	r4, r1
 800a438:	2001      	movs	r0, #1
 800a43a:	e7a8      	b.n	800a38e <_vfiprintf_r+0xfe>
 800a43c:	2300      	movs	r3, #0
 800a43e:	3401      	adds	r4, #1
 800a440:	9305      	str	r3, [sp, #20]
 800a442:	4619      	mov	r1, r3
 800a444:	f04f 0c0a 	mov.w	ip, #10
 800a448:	4620      	mov	r0, r4
 800a44a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a44e:	3a30      	subs	r2, #48	@ 0x30
 800a450:	2a09      	cmp	r2, #9
 800a452:	d903      	bls.n	800a45c <_vfiprintf_r+0x1cc>
 800a454:	2b00      	cmp	r3, #0
 800a456:	d0c6      	beq.n	800a3e6 <_vfiprintf_r+0x156>
 800a458:	9105      	str	r1, [sp, #20]
 800a45a:	e7c4      	b.n	800a3e6 <_vfiprintf_r+0x156>
 800a45c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a460:	4604      	mov	r4, r0
 800a462:	2301      	movs	r3, #1
 800a464:	e7f0      	b.n	800a448 <_vfiprintf_r+0x1b8>
 800a466:	ab03      	add	r3, sp, #12
 800a468:	9300      	str	r3, [sp, #0]
 800a46a:	462a      	mov	r2, r5
 800a46c:	4b12      	ldr	r3, [pc, #72]	@ (800a4b8 <_vfiprintf_r+0x228>)
 800a46e:	a904      	add	r1, sp, #16
 800a470:	4630      	mov	r0, r6
 800a472:	f3af 8000 	nop.w
 800a476:	4607      	mov	r7, r0
 800a478:	1c78      	adds	r0, r7, #1
 800a47a:	d1d6      	bne.n	800a42a <_vfiprintf_r+0x19a>
 800a47c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a47e:	07d9      	lsls	r1, r3, #31
 800a480:	d405      	bmi.n	800a48e <_vfiprintf_r+0x1fe>
 800a482:	89ab      	ldrh	r3, [r5, #12]
 800a484:	059a      	lsls	r2, r3, #22
 800a486:	d402      	bmi.n	800a48e <_vfiprintf_r+0x1fe>
 800a488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a48a:	f7ff fe8b 	bl	800a1a4 <__retarget_lock_release_recursive>
 800a48e:	89ab      	ldrh	r3, [r5, #12]
 800a490:	065b      	lsls	r3, r3, #25
 800a492:	f53f af1f 	bmi.w	800a2d4 <_vfiprintf_r+0x44>
 800a496:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a498:	e71e      	b.n	800a2d8 <_vfiprintf_r+0x48>
 800a49a:	ab03      	add	r3, sp, #12
 800a49c:	9300      	str	r3, [sp, #0]
 800a49e:	462a      	mov	r2, r5
 800a4a0:	4b05      	ldr	r3, [pc, #20]	@ (800a4b8 <_vfiprintf_r+0x228>)
 800a4a2:	a904      	add	r1, sp, #16
 800a4a4:	4630      	mov	r0, r6
 800a4a6:	f000 f879 	bl	800a59c <_printf_i>
 800a4aa:	e7e4      	b.n	800a476 <_vfiprintf_r+0x1e6>
 800a4ac:	0800aaec 	.word	0x0800aaec
 800a4b0:	0800aaf6 	.word	0x0800aaf6
 800a4b4:	00000000 	.word	0x00000000
 800a4b8:	0800a26b 	.word	0x0800a26b
 800a4bc:	0800aaf2 	.word	0x0800aaf2

0800a4c0 <_printf_common>:
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	4698      	mov	r8, r3
 800a4c8:	688a      	ldr	r2, [r1, #8]
 800a4ca:	690b      	ldr	r3, [r1, #16]
 800a4cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	bfb8      	it	lt
 800a4d4:	4613      	movlt	r3, r2
 800a4d6:	6033      	str	r3, [r6, #0]
 800a4d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a4dc:	4607      	mov	r7, r0
 800a4de:	460c      	mov	r4, r1
 800a4e0:	b10a      	cbz	r2, 800a4e6 <_printf_common+0x26>
 800a4e2:	3301      	adds	r3, #1
 800a4e4:	6033      	str	r3, [r6, #0]
 800a4e6:	6823      	ldr	r3, [r4, #0]
 800a4e8:	0699      	lsls	r1, r3, #26
 800a4ea:	bf42      	ittt	mi
 800a4ec:	6833      	ldrmi	r3, [r6, #0]
 800a4ee:	3302      	addmi	r3, #2
 800a4f0:	6033      	strmi	r3, [r6, #0]
 800a4f2:	6825      	ldr	r5, [r4, #0]
 800a4f4:	f015 0506 	ands.w	r5, r5, #6
 800a4f8:	d106      	bne.n	800a508 <_printf_common+0x48>
 800a4fa:	f104 0a19 	add.w	sl, r4, #25
 800a4fe:	68e3      	ldr	r3, [r4, #12]
 800a500:	6832      	ldr	r2, [r6, #0]
 800a502:	1a9b      	subs	r3, r3, r2
 800a504:	42ab      	cmp	r3, r5
 800a506:	dc26      	bgt.n	800a556 <_printf_common+0x96>
 800a508:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a50c:	6822      	ldr	r2, [r4, #0]
 800a50e:	3b00      	subs	r3, #0
 800a510:	bf18      	it	ne
 800a512:	2301      	movne	r3, #1
 800a514:	0692      	lsls	r2, r2, #26
 800a516:	d42b      	bmi.n	800a570 <_printf_common+0xb0>
 800a518:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a51c:	4641      	mov	r1, r8
 800a51e:	4638      	mov	r0, r7
 800a520:	47c8      	blx	r9
 800a522:	3001      	adds	r0, #1
 800a524:	d01e      	beq.n	800a564 <_printf_common+0xa4>
 800a526:	6823      	ldr	r3, [r4, #0]
 800a528:	6922      	ldr	r2, [r4, #16]
 800a52a:	f003 0306 	and.w	r3, r3, #6
 800a52e:	2b04      	cmp	r3, #4
 800a530:	bf02      	ittt	eq
 800a532:	68e5      	ldreq	r5, [r4, #12]
 800a534:	6833      	ldreq	r3, [r6, #0]
 800a536:	1aed      	subeq	r5, r5, r3
 800a538:	68a3      	ldr	r3, [r4, #8]
 800a53a:	bf0c      	ite	eq
 800a53c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a540:	2500      	movne	r5, #0
 800a542:	4293      	cmp	r3, r2
 800a544:	bfc4      	itt	gt
 800a546:	1a9b      	subgt	r3, r3, r2
 800a548:	18ed      	addgt	r5, r5, r3
 800a54a:	2600      	movs	r6, #0
 800a54c:	341a      	adds	r4, #26
 800a54e:	42b5      	cmp	r5, r6
 800a550:	d11a      	bne.n	800a588 <_printf_common+0xc8>
 800a552:	2000      	movs	r0, #0
 800a554:	e008      	b.n	800a568 <_printf_common+0xa8>
 800a556:	2301      	movs	r3, #1
 800a558:	4652      	mov	r2, sl
 800a55a:	4641      	mov	r1, r8
 800a55c:	4638      	mov	r0, r7
 800a55e:	47c8      	blx	r9
 800a560:	3001      	adds	r0, #1
 800a562:	d103      	bne.n	800a56c <_printf_common+0xac>
 800a564:	f04f 30ff 	mov.w	r0, #4294967295
 800a568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a56c:	3501      	adds	r5, #1
 800a56e:	e7c6      	b.n	800a4fe <_printf_common+0x3e>
 800a570:	18e1      	adds	r1, r4, r3
 800a572:	1c5a      	adds	r2, r3, #1
 800a574:	2030      	movs	r0, #48	@ 0x30
 800a576:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a57a:	4422      	add	r2, r4
 800a57c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a580:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a584:	3302      	adds	r3, #2
 800a586:	e7c7      	b.n	800a518 <_printf_common+0x58>
 800a588:	2301      	movs	r3, #1
 800a58a:	4622      	mov	r2, r4
 800a58c:	4641      	mov	r1, r8
 800a58e:	4638      	mov	r0, r7
 800a590:	47c8      	blx	r9
 800a592:	3001      	adds	r0, #1
 800a594:	d0e6      	beq.n	800a564 <_printf_common+0xa4>
 800a596:	3601      	adds	r6, #1
 800a598:	e7d9      	b.n	800a54e <_printf_common+0x8e>
	...

0800a59c <_printf_i>:
 800a59c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a5a0:	7e0f      	ldrb	r7, [r1, #24]
 800a5a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a5a4:	2f78      	cmp	r7, #120	@ 0x78
 800a5a6:	4691      	mov	r9, r2
 800a5a8:	4680      	mov	r8, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	469a      	mov	sl, r3
 800a5ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a5b2:	d807      	bhi.n	800a5c4 <_printf_i+0x28>
 800a5b4:	2f62      	cmp	r7, #98	@ 0x62
 800a5b6:	d80a      	bhi.n	800a5ce <_printf_i+0x32>
 800a5b8:	2f00      	cmp	r7, #0
 800a5ba:	f000 80d1 	beq.w	800a760 <_printf_i+0x1c4>
 800a5be:	2f58      	cmp	r7, #88	@ 0x58
 800a5c0:	f000 80b8 	beq.w	800a734 <_printf_i+0x198>
 800a5c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a5c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a5cc:	e03a      	b.n	800a644 <_printf_i+0xa8>
 800a5ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a5d2:	2b15      	cmp	r3, #21
 800a5d4:	d8f6      	bhi.n	800a5c4 <_printf_i+0x28>
 800a5d6:	a101      	add	r1, pc, #4	@ (adr r1, 800a5dc <_printf_i+0x40>)
 800a5d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5dc:	0800a635 	.word	0x0800a635
 800a5e0:	0800a649 	.word	0x0800a649
 800a5e4:	0800a5c5 	.word	0x0800a5c5
 800a5e8:	0800a5c5 	.word	0x0800a5c5
 800a5ec:	0800a5c5 	.word	0x0800a5c5
 800a5f0:	0800a5c5 	.word	0x0800a5c5
 800a5f4:	0800a649 	.word	0x0800a649
 800a5f8:	0800a5c5 	.word	0x0800a5c5
 800a5fc:	0800a5c5 	.word	0x0800a5c5
 800a600:	0800a5c5 	.word	0x0800a5c5
 800a604:	0800a5c5 	.word	0x0800a5c5
 800a608:	0800a747 	.word	0x0800a747
 800a60c:	0800a673 	.word	0x0800a673
 800a610:	0800a701 	.word	0x0800a701
 800a614:	0800a5c5 	.word	0x0800a5c5
 800a618:	0800a5c5 	.word	0x0800a5c5
 800a61c:	0800a769 	.word	0x0800a769
 800a620:	0800a5c5 	.word	0x0800a5c5
 800a624:	0800a673 	.word	0x0800a673
 800a628:	0800a5c5 	.word	0x0800a5c5
 800a62c:	0800a5c5 	.word	0x0800a5c5
 800a630:	0800a709 	.word	0x0800a709
 800a634:	6833      	ldr	r3, [r6, #0]
 800a636:	1d1a      	adds	r2, r3, #4
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6032      	str	r2, [r6, #0]
 800a63c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a640:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a644:	2301      	movs	r3, #1
 800a646:	e09c      	b.n	800a782 <_printf_i+0x1e6>
 800a648:	6833      	ldr	r3, [r6, #0]
 800a64a:	6820      	ldr	r0, [r4, #0]
 800a64c:	1d19      	adds	r1, r3, #4
 800a64e:	6031      	str	r1, [r6, #0]
 800a650:	0606      	lsls	r6, r0, #24
 800a652:	d501      	bpl.n	800a658 <_printf_i+0xbc>
 800a654:	681d      	ldr	r5, [r3, #0]
 800a656:	e003      	b.n	800a660 <_printf_i+0xc4>
 800a658:	0645      	lsls	r5, r0, #25
 800a65a:	d5fb      	bpl.n	800a654 <_printf_i+0xb8>
 800a65c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a660:	2d00      	cmp	r5, #0
 800a662:	da03      	bge.n	800a66c <_printf_i+0xd0>
 800a664:	232d      	movs	r3, #45	@ 0x2d
 800a666:	426d      	negs	r5, r5
 800a668:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a66c:	4858      	ldr	r0, [pc, #352]	@ (800a7d0 <_printf_i+0x234>)
 800a66e:	230a      	movs	r3, #10
 800a670:	e011      	b.n	800a696 <_printf_i+0xfa>
 800a672:	6821      	ldr	r1, [r4, #0]
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	0608      	lsls	r0, r1, #24
 800a678:	f853 5b04 	ldr.w	r5, [r3], #4
 800a67c:	d402      	bmi.n	800a684 <_printf_i+0xe8>
 800a67e:	0649      	lsls	r1, r1, #25
 800a680:	bf48      	it	mi
 800a682:	b2ad      	uxthmi	r5, r5
 800a684:	2f6f      	cmp	r7, #111	@ 0x6f
 800a686:	4852      	ldr	r0, [pc, #328]	@ (800a7d0 <_printf_i+0x234>)
 800a688:	6033      	str	r3, [r6, #0]
 800a68a:	bf14      	ite	ne
 800a68c:	230a      	movne	r3, #10
 800a68e:	2308      	moveq	r3, #8
 800a690:	2100      	movs	r1, #0
 800a692:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a696:	6866      	ldr	r6, [r4, #4]
 800a698:	60a6      	str	r6, [r4, #8]
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	db05      	blt.n	800a6aa <_printf_i+0x10e>
 800a69e:	6821      	ldr	r1, [r4, #0]
 800a6a0:	432e      	orrs	r6, r5
 800a6a2:	f021 0104 	bic.w	r1, r1, #4
 800a6a6:	6021      	str	r1, [r4, #0]
 800a6a8:	d04b      	beq.n	800a742 <_printf_i+0x1a6>
 800a6aa:	4616      	mov	r6, r2
 800a6ac:	fbb5 f1f3 	udiv	r1, r5, r3
 800a6b0:	fb03 5711 	mls	r7, r3, r1, r5
 800a6b4:	5dc7      	ldrb	r7, [r0, r7]
 800a6b6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a6ba:	462f      	mov	r7, r5
 800a6bc:	42bb      	cmp	r3, r7
 800a6be:	460d      	mov	r5, r1
 800a6c0:	d9f4      	bls.n	800a6ac <_printf_i+0x110>
 800a6c2:	2b08      	cmp	r3, #8
 800a6c4:	d10b      	bne.n	800a6de <_printf_i+0x142>
 800a6c6:	6823      	ldr	r3, [r4, #0]
 800a6c8:	07df      	lsls	r7, r3, #31
 800a6ca:	d508      	bpl.n	800a6de <_printf_i+0x142>
 800a6cc:	6923      	ldr	r3, [r4, #16]
 800a6ce:	6861      	ldr	r1, [r4, #4]
 800a6d0:	4299      	cmp	r1, r3
 800a6d2:	bfde      	ittt	le
 800a6d4:	2330      	movle	r3, #48	@ 0x30
 800a6d6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a6da:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a6de:	1b92      	subs	r2, r2, r6
 800a6e0:	6122      	str	r2, [r4, #16]
 800a6e2:	f8cd a000 	str.w	sl, [sp]
 800a6e6:	464b      	mov	r3, r9
 800a6e8:	aa03      	add	r2, sp, #12
 800a6ea:	4621      	mov	r1, r4
 800a6ec:	4640      	mov	r0, r8
 800a6ee:	f7ff fee7 	bl	800a4c0 <_printf_common>
 800a6f2:	3001      	adds	r0, #1
 800a6f4:	d14a      	bne.n	800a78c <_printf_i+0x1f0>
 800a6f6:	f04f 30ff 	mov.w	r0, #4294967295
 800a6fa:	b004      	add	sp, #16
 800a6fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a700:	6823      	ldr	r3, [r4, #0]
 800a702:	f043 0320 	orr.w	r3, r3, #32
 800a706:	6023      	str	r3, [r4, #0]
 800a708:	4832      	ldr	r0, [pc, #200]	@ (800a7d4 <_printf_i+0x238>)
 800a70a:	2778      	movs	r7, #120	@ 0x78
 800a70c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	6831      	ldr	r1, [r6, #0]
 800a714:	061f      	lsls	r7, r3, #24
 800a716:	f851 5b04 	ldr.w	r5, [r1], #4
 800a71a:	d402      	bmi.n	800a722 <_printf_i+0x186>
 800a71c:	065f      	lsls	r7, r3, #25
 800a71e:	bf48      	it	mi
 800a720:	b2ad      	uxthmi	r5, r5
 800a722:	6031      	str	r1, [r6, #0]
 800a724:	07d9      	lsls	r1, r3, #31
 800a726:	bf44      	itt	mi
 800a728:	f043 0320 	orrmi.w	r3, r3, #32
 800a72c:	6023      	strmi	r3, [r4, #0]
 800a72e:	b11d      	cbz	r5, 800a738 <_printf_i+0x19c>
 800a730:	2310      	movs	r3, #16
 800a732:	e7ad      	b.n	800a690 <_printf_i+0xf4>
 800a734:	4826      	ldr	r0, [pc, #152]	@ (800a7d0 <_printf_i+0x234>)
 800a736:	e7e9      	b.n	800a70c <_printf_i+0x170>
 800a738:	6823      	ldr	r3, [r4, #0]
 800a73a:	f023 0320 	bic.w	r3, r3, #32
 800a73e:	6023      	str	r3, [r4, #0]
 800a740:	e7f6      	b.n	800a730 <_printf_i+0x194>
 800a742:	4616      	mov	r6, r2
 800a744:	e7bd      	b.n	800a6c2 <_printf_i+0x126>
 800a746:	6833      	ldr	r3, [r6, #0]
 800a748:	6825      	ldr	r5, [r4, #0]
 800a74a:	6961      	ldr	r1, [r4, #20]
 800a74c:	1d18      	adds	r0, r3, #4
 800a74e:	6030      	str	r0, [r6, #0]
 800a750:	062e      	lsls	r6, r5, #24
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	d501      	bpl.n	800a75a <_printf_i+0x1be>
 800a756:	6019      	str	r1, [r3, #0]
 800a758:	e002      	b.n	800a760 <_printf_i+0x1c4>
 800a75a:	0668      	lsls	r0, r5, #25
 800a75c:	d5fb      	bpl.n	800a756 <_printf_i+0x1ba>
 800a75e:	8019      	strh	r1, [r3, #0]
 800a760:	2300      	movs	r3, #0
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	4616      	mov	r6, r2
 800a766:	e7bc      	b.n	800a6e2 <_printf_i+0x146>
 800a768:	6833      	ldr	r3, [r6, #0]
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	6032      	str	r2, [r6, #0]
 800a76e:	681e      	ldr	r6, [r3, #0]
 800a770:	6862      	ldr	r2, [r4, #4]
 800a772:	2100      	movs	r1, #0
 800a774:	4630      	mov	r0, r6
 800a776:	f7f5 fd2b 	bl	80001d0 <memchr>
 800a77a:	b108      	cbz	r0, 800a780 <_printf_i+0x1e4>
 800a77c:	1b80      	subs	r0, r0, r6
 800a77e:	6060      	str	r0, [r4, #4]
 800a780:	6863      	ldr	r3, [r4, #4]
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	2300      	movs	r3, #0
 800a786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a78a:	e7aa      	b.n	800a6e2 <_printf_i+0x146>
 800a78c:	6923      	ldr	r3, [r4, #16]
 800a78e:	4632      	mov	r2, r6
 800a790:	4649      	mov	r1, r9
 800a792:	4640      	mov	r0, r8
 800a794:	47d0      	blx	sl
 800a796:	3001      	adds	r0, #1
 800a798:	d0ad      	beq.n	800a6f6 <_printf_i+0x15a>
 800a79a:	6823      	ldr	r3, [r4, #0]
 800a79c:	079b      	lsls	r3, r3, #30
 800a79e:	d413      	bmi.n	800a7c8 <_printf_i+0x22c>
 800a7a0:	68e0      	ldr	r0, [r4, #12]
 800a7a2:	9b03      	ldr	r3, [sp, #12]
 800a7a4:	4298      	cmp	r0, r3
 800a7a6:	bfb8      	it	lt
 800a7a8:	4618      	movlt	r0, r3
 800a7aa:	e7a6      	b.n	800a6fa <_printf_i+0x15e>
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	4632      	mov	r2, r6
 800a7b0:	4649      	mov	r1, r9
 800a7b2:	4640      	mov	r0, r8
 800a7b4:	47d0      	blx	sl
 800a7b6:	3001      	adds	r0, #1
 800a7b8:	d09d      	beq.n	800a6f6 <_printf_i+0x15a>
 800a7ba:	3501      	adds	r5, #1
 800a7bc:	68e3      	ldr	r3, [r4, #12]
 800a7be:	9903      	ldr	r1, [sp, #12]
 800a7c0:	1a5b      	subs	r3, r3, r1
 800a7c2:	42ab      	cmp	r3, r5
 800a7c4:	dcf2      	bgt.n	800a7ac <_printf_i+0x210>
 800a7c6:	e7eb      	b.n	800a7a0 <_printf_i+0x204>
 800a7c8:	2500      	movs	r5, #0
 800a7ca:	f104 0619 	add.w	r6, r4, #25
 800a7ce:	e7f5      	b.n	800a7bc <_printf_i+0x220>
 800a7d0:	0800aafd 	.word	0x0800aafd
 800a7d4:	0800ab0e 	.word	0x0800ab0e

0800a7d8 <__sflush_r>:
 800a7d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a7dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7e0:	0716      	lsls	r6, r2, #28
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	460c      	mov	r4, r1
 800a7e6:	d454      	bmi.n	800a892 <__sflush_r+0xba>
 800a7e8:	684b      	ldr	r3, [r1, #4]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	dc02      	bgt.n	800a7f4 <__sflush_r+0x1c>
 800a7ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	dd48      	ble.n	800a886 <__sflush_r+0xae>
 800a7f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a7f6:	2e00      	cmp	r6, #0
 800a7f8:	d045      	beq.n	800a886 <__sflush_r+0xae>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a800:	682f      	ldr	r7, [r5, #0]
 800a802:	6a21      	ldr	r1, [r4, #32]
 800a804:	602b      	str	r3, [r5, #0]
 800a806:	d030      	beq.n	800a86a <__sflush_r+0x92>
 800a808:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a80a:	89a3      	ldrh	r3, [r4, #12]
 800a80c:	0759      	lsls	r1, r3, #29
 800a80e:	d505      	bpl.n	800a81c <__sflush_r+0x44>
 800a810:	6863      	ldr	r3, [r4, #4]
 800a812:	1ad2      	subs	r2, r2, r3
 800a814:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a816:	b10b      	cbz	r3, 800a81c <__sflush_r+0x44>
 800a818:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a81a:	1ad2      	subs	r2, r2, r3
 800a81c:	2300      	movs	r3, #0
 800a81e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a820:	6a21      	ldr	r1, [r4, #32]
 800a822:	4628      	mov	r0, r5
 800a824:	47b0      	blx	r6
 800a826:	1c43      	adds	r3, r0, #1
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	d106      	bne.n	800a83a <__sflush_r+0x62>
 800a82c:	6829      	ldr	r1, [r5, #0]
 800a82e:	291d      	cmp	r1, #29
 800a830:	d82b      	bhi.n	800a88a <__sflush_r+0xb2>
 800a832:	4a2a      	ldr	r2, [pc, #168]	@ (800a8dc <__sflush_r+0x104>)
 800a834:	40ca      	lsrs	r2, r1
 800a836:	07d6      	lsls	r6, r2, #31
 800a838:	d527      	bpl.n	800a88a <__sflush_r+0xb2>
 800a83a:	2200      	movs	r2, #0
 800a83c:	6062      	str	r2, [r4, #4]
 800a83e:	04d9      	lsls	r1, r3, #19
 800a840:	6922      	ldr	r2, [r4, #16]
 800a842:	6022      	str	r2, [r4, #0]
 800a844:	d504      	bpl.n	800a850 <__sflush_r+0x78>
 800a846:	1c42      	adds	r2, r0, #1
 800a848:	d101      	bne.n	800a84e <__sflush_r+0x76>
 800a84a:	682b      	ldr	r3, [r5, #0]
 800a84c:	b903      	cbnz	r3, 800a850 <__sflush_r+0x78>
 800a84e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a850:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a852:	602f      	str	r7, [r5, #0]
 800a854:	b1b9      	cbz	r1, 800a886 <__sflush_r+0xae>
 800a856:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a85a:	4299      	cmp	r1, r3
 800a85c:	d002      	beq.n	800a864 <__sflush_r+0x8c>
 800a85e:	4628      	mov	r0, r5
 800a860:	f7ff fca2 	bl	800a1a8 <_free_r>
 800a864:	2300      	movs	r3, #0
 800a866:	6363      	str	r3, [r4, #52]	@ 0x34
 800a868:	e00d      	b.n	800a886 <__sflush_r+0xae>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4628      	mov	r0, r5
 800a86e:	47b0      	blx	r6
 800a870:	4602      	mov	r2, r0
 800a872:	1c50      	adds	r0, r2, #1
 800a874:	d1c9      	bne.n	800a80a <__sflush_r+0x32>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d0c6      	beq.n	800a80a <__sflush_r+0x32>
 800a87c:	2b1d      	cmp	r3, #29
 800a87e:	d001      	beq.n	800a884 <__sflush_r+0xac>
 800a880:	2b16      	cmp	r3, #22
 800a882:	d11e      	bne.n	800a8c2 <__sflush_r+0xea>
 800a884:	602f      	str	r7, [r5, #0]
 800a886:	2000      	movs	r0, #0
 800a888:	e022      	b.n	800a8d0 <__sflush_r+0xf8>
 800a88a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a88e:	b21b      	sxth	r3, r3
 800a890:	e01b      	b.n	800a8ca <__sflush_r+0xf2>
 800a892:	690f      	ldr	r7, [r1, #16]
 800a894:	2f00      	cmp	r7, #0
 800a896:	d0f6      	beq.n	800a886 <__sflush_r+0xae>
 800a898:	0793      	lsls	r3, r2, #30
 800a89a:	680e      	ldr	r6, [r1, #0]
 800a89c:	bf08      	it	eq
 800a89e:	694b      	ldreq	r3, [r1, #20]
 800a8a0:	600f      	str	r7, [r1, #0]
 800a8a2:	bf18      	it	ne
 800a8a4:	2300      	movne	r3, #0
 800a8a6:	eba6 0807 	sub.w	r8, r6, r7
 800a8aa:	608b      	str	r3, [r1, #8]
 800a8ac:	f1b8 0f00 	cmp.w	r8, #0
 800a8b0:	dde9      	ble.n	800a886 <__sflush_r+0xae>
 800a8b2:	6a21      	ldr	r1, [r4, #32]
 800a8b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a8b6:	4643      	mov	r3, r8
 800a8b8:	463a      	mov	r2, r7
 800a8ba:	4628      	mov	r0, r5
 800a8bc:	47b0      	blx	r6
 800a8be:	2800      	cmp	r0, #0
 800a8c0:	dc08      	bgt.n	800a8d4 <__sflush_r+0xfc>
 800a8c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8ca:	81a3      	strh	r3, [r4, #12]
 800a8cc:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	4407      	add	r7, r0
 800a8d6:	eba8 0800 	sub.w	r8, r8, r0
 800a8da:	e7e7      	b.n	800a8ac <__sflush_r+0xd4>
 800a8dc:	20400001 	.word	0x20400001

0800a8e0 <_fflush_r>:
 800a8e0:	b538      	push	{r3, r4, r5, lr}
 800a8e2:	690b      	ldr	r3, [r1, #16]
 800a8e4:	4605      	mov	r5, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	b913      	cbnz	r3, 800a8f0 <_fflush_r+0x10>
 800a8ea:	2500      	movs	r5, #0
 800a8ec:	4628      	mov	r0, r5
 800a8ee:	bd38      	pop	{r3, r4, r5, pc}
 800a8f0:	b118      	cbz	r0, 800a8fa <_fflush_r+0x1a>
 800a8f2:	6a03      	ldr	r3, [r0, #32]
 800a8f4:	b90b      	cbnz	r3, 800a8fa <_fflush_r+0x1a>
 800a8f6:	f7ff f999 	bl	8009c2c <__sinit>
 800a8fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d0f3      	beq.n	800a8ea <_fflush_r+0xa>
 800a902:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a904:	07d0      	lsls	r0, r2, #31
 800a906:	d404      	bmi.n	800a912 <_fflush_r+0x32>
 800a908:	0599      	lsls	r1, r3, #22
 800a90a:	d402      	bmi.n	800a912 <_fflush_r+0x32>
 800a90c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a90e:	f7ff fc48 	bl	800a1a2 <__retarget_lock_acquire_recursive>
 800a912:	4628      	mov	r0, r5
 800a914:	4621      	mov	r1, r4
 800a916:	f7ff ff5f 	bl	800a7d8 <__sflush_r>
 800a91a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a91c:	07da      	lsls	r2, r3, #31
 800a91e:	4605      	mov	r5, r0
 800a920:	d4e4      	bmi.n	800a8ec <_fflush_r+0xc>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	059b      	lsls	r3, r3, #22
 800a926:	d4e1      	bmi.n	800a8ec <_fflush_r+0xc>
 800a928:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a92a:	f7ff fc3b 	bl	800a1a4 <__retarget_lock_release_recursive>
 800a92e:	e7dd      	b.n	800a8ec <_fflush_r+0xc>

0800a930 <__swhatbuf_r>:
 800a930:	b570      	push	{r4, r5, r6, lr}
 800a932:	460c      	mov	r4, r1
 800a934:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a938:	2900      	cmp	r1, #0
 800a93a:	b096      	sub	sp, #88	@ 0x58
 800a93c:	4615      	mov	r5, r2
 800a93e:	461e      	mov	r6, r3
 800a940:	da0d      	bge.n	800a95e <__swhatbuf_r+0x2e>
 800a942:	89a3      	ldrh	r3, [r4, #12]
 800a944:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a948:	f04f 0100 	mov.w	r1, #0
 800a94c:	bf14      	ite	ne
 800a94e:	2340      	movne	r3, #64	@ 0x40
 800a950:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a954:	2000      	movs	r0, #0
 800a956:	6031      	str	r1, [r6, #0]
 800a958:	602b      	str	r3, [r5, #0]
 800a95a:	b016      	add	sp, #88	@ 0x58
 800a95c:	bd70      	pop	{r4, r5, r6, pc}
 800a95e:	466a      	mov	r2, sp
 800a960:	f000 f848 	bl	800a9f4 <_fstat_r>
 800a964:	2800      	cmp	r0, #0
 800a966:	dbec      	blt.n	800a942 <__swhatbuf_r+0x12>
 800a968:	9901      	ldr	r1, [sp, #4]
 800a96a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a96e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a972:	4259      	negs	r1, r3
 800a974:	4159      	adcs	r1, r3
 800a976:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a97a:	e7eb      	b.n	800a954 <__swhatbuf_r+0x24>

0800a97c <__smakebuf_r>:
 800a97c:	898b      	ldrh	r3, [r1, #12]
 800a97e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a980:	079d      	lsls	r5, r3, #30
 800a982:	4606      	mov	r6, r0
 800a984:	460c      	mov	r4, r1
 800a986:	d507      	bpl.n	800a998 <__smakebuf_r+0x1c>
 800a988:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a98c:	6023      	str	r3, [r4, #0]
 800a98e:	6123      	str	r3, [r4, #16]
 800a990:	2301      	movs	r3, #1
 800a992:	6163      	str	r3, [r4, #20]
 800a994:	b003      	add	sp, #12
 800a996:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a998:	ab01      	add	r3, sp, #4
 800a99a:	466a      	mov	r2, sp
 800a99c:	f7ff ffc8 	bl	800a930 <__swhatbuf_r>
 800a9a0:	9f00      	ldr	r7, [sp, #0]
 800a9a2:	4605      	mov	r5, r0
 800a9a4:	4639      	mov	r1, r7
 800a9a6:	4630      	mov	r0, r6
 800a9a8:	f7ff f828 	bl	80099fc <_malloc_r>
 800a9ac:	b948      	cbnz	r0, 800a9c2 <__smakebuf_r+0x46>
 800a9ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a9b2:	059a      	lsls	r2, r3, #22
 800a9b4:	d4ee      	bmi.n	800a994 <__smakebuf_r+0x18>
 800a9b6:	f023 0303 	bic.w	r3, r3, #3
 800a9ba:	f043 0302 	orr.w	r3, r3, #2
 800a9be:	81a3      	strh	r3, [r4, #12]
 800a9c0:	e7e2      	b.n	800a988 <__smakebuf_r+0xc>
 800a9c2:	89a3      	ldrh	r3, [r4, #12]
 800a9c4:	6020      	str	r0, [r4, #0]
 800a9c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a9ca:	81a3      	strh	r3, [r4, #12]
 800a9cc:	9b01      	ldr	r3, [sp, #4]
 800a9ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a9d2:	b15b      	cbz	r3, 800a9ec <__smakebuf_r+0x70>
 800a9d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9d8:	4630      	mov	r0, r6
 800a9da:	f000 f81d 	bl	800aa18 <_isatty_r>
 800a9de:	b128      	cbz	r0, 800a9ec <__smakebuf_r+0x70>
 800a9e0:	89a3      	ldrh	r3, [r4, #12]
 800a9e2:	f023 0303 	bic.w	r3, r3, #3
 800a9e6:	f043 0301 	orr.w	r3, r3, #1
 800a9ea:	81a3      	strh	r3, [r4, #12]
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	431d      	orrs	r5, r3
 800a9f0:	81a5      	strh	r5, [r4, #12]
 800a9f2:	e7cf      	b.n	800a994 <__smakebuf_r+0x18>

0800a9f4 <_fstat_r>:
 800a9f4:	b538      	push	{r3, r4, r5, lr}
 800a9f6:	4d07      	ldr	r5, [pc, #28]	@ (800aa14 <_fstat_r+0x20>)
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	4604      	mov	r4, r0
 800a9fc:	4608      	mov	r0, r1
 800a9fe:	4611      	mov	r1, r2
 800aa00:	602b      	str	r3, [r5, #0]
 800aa02:	f7f6 fd28 	bl	8001456 <_fstat>
 800aa06:	1c43      	adds	r3, r0, #1
 800aa08:	d102      	bne.n	800aa10 <_fstat_r+0x1c>
 800aa0a:	682b      	ldr	r3, [r5, #0]
 800aa0c:	b103      	cbz	r3, 800aa10 <_fstat_r+0x1c>
 800aa0e:	6023      	str	r3, [r4, #0]
 800aa10:	bd38      	pop	{r3, r4, r5, pc}
 800aa12:	bf00      	nop
 800aa14:	20000af8 	.word	0x20000af8

0800aa18 <_isatty_r>:
 800aa18:	b538      	push	{r3, r4, r5, lr}
 800aa1a:	4d06      	ldr	r5, [pc, #24]	@ (800aa34 <_isatty_r+0x1c>)
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	4604      	mov	r4, r0
 800aa20:	4608      	mov	r0, r1
 800aa22:	602b      	str	r3, [r5, #0]
 800aa24:	f7f6 fd27 	bl	8001476 <_isatty>
 800aa28:	1c43      	adds	r3, r0, #1
 800aa2a:	d102      	bne.n	800aa32 <_isatty_r+0x1a>
 800aa2c:	682b      	ldr	r3, [r5, #0]
 800aa2e:	b103      	cbz	r3, 800aa32 <_isatty_r+0x1a>
 800aa30:	6023      	str	r3, [r4, #0]
 800aa32:	bd38      	pop	{r3, r4, r5, pc}
 800aa34:	20000af8 	.word	0x20000af8

0800aa38 <_init>:
 800aa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa3a:	bf00      	nop
 800aa3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa3e:	bc08      	pop	{r3}
 800aa40:	469e      	mov	lr, r3
 800aa42:	4770      	bx	lr

0800aa44 <_fini>:
 800aa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa46:	bf00      	nop
 800aa48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa4a:	bc08      	pop	{r3}
 800aa4c:	469e      	mov	lr, r3
 800aa4e:	4770      	bx	lr
