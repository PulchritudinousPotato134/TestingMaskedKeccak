
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cac4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000074c  0800cc58  0800cc58  0000dc58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3a4  0800d3a4  0000f088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d3a4  0800d3a4  0000e3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3ac  0800d3ac  0000f088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3ac  0800d3ac  0000e3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3b0  0800d3b0  0000e3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800d3b4  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000f088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000f088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c046  00000000  00000000  0000f0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b5f  00000000  00000000  0002b0fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016c0  00000000  00000000  0002fc60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001169  00000000  00000000  00031320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006ecd  00000000  00000000  00032489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a70  00000000  00000000  00039356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1f4e  00000000  00000000  00059dc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012bd14  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000067e4  00000000  00000000  0012bd58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cc3c 	.word	0x0800cc3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800cc3c 	.word	0x0800cc3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b0a0      	sub	sp, #128	@ 0x80
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 80005a6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80005aa:	2328      	movs	r3, #40	@ 0x28
 80005ac:	461a      	mov	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f00b fe2e 	bl	800c210 <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 80005b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005b8:	2328      	movs	r3, #40	@ 0x28
 80005ba:	461a      	mov	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f00b fe27 	bl	800c210 <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005c6:	e043      	b.n	8000650 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 80005c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ca:	00da      	lsls	r2, r3, #3
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	4413      	add	r3, r2
 80005d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005d6:	3305      	adds	r3, #5
 80005d8:	00da      	lsls	r2, r3, #3
 80005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005dc:	4413      	add	r3, r2
 80005de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e2:	ea80 0402 	eor.w	r4, r0, r2
 80005e6:	ea81 0503 	eor.w	r5, r1, r3
 80005ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ec:	330a      	adds	r3, #10
 80005ee:	00da      	lsls	r2, r3, #3
 80005f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f2:	4413      	add	r3, r2
 80005f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f8:	ea84 0a02 	eor.w	sl, r4, r2
 80005fc:	ea85 0b03 	eor.w	fp, r5, r3
 8000600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000602:	330f      	adds	r3, #15
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	4413      	add	r3, r2
 800060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060e:	ea8a 0102 	eor.w	r1, sl, r2
 8000612:	61b9      	str	r1, [r7, #24]
 8000614:	ea8b 0303 	eor.w	r3, fp, r3
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800061c:	3314      	adds	r3, #20
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000622:	4413      	add	r3, r2
 8000624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000628:	69b9      	ldr	r1, [r7, #24]
 800062a:	4051      	eors	r1, r2
 800062c:	6139      	str	r1, [r7, #16]
 800062e:	69f9      	ldr	r1, [r7, #28]
 8000630:	404b      	eors	r3, r1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	f107 0220 	add.w	r2, r7, #32
 800063e:	4413      	add	r3, r2
 8000640:	3b30      	subs	r3, #48	@ 0x30
 8000642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000646:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 800064a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800064c:	3301      	adds	r3, #1
 800064e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000652:	2b04      	cmp	r3, #4
 8000654:	ddb8      	ble.n	80005c8 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 8000656:	2300      	movs	r3, #0
 8000658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800065a:	e072      	b.n	8000742 <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 800065c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065e:	1d19      	adds	r1, r3, #4
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <theta+0x1b8>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	105a      	asrs	r2, r3, #1
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	00d3      	lsls	r3, r2, #3
 8000676:	3360      	adds	r3, #96	@ 0x60
 8000678:	f107 0220 	add.w	r2, r7, #32
 800067c:	4413      	add	r3, r2
 800067e:	3b30      	subs	r3, #48	@ 0x30
 8000680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000686:	1c5c      	adds	r4, r3, #1
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <theta+0x1b8>)
 800068a:	fb83 2304 	smull	r2, r3, r3, r4
 800068e:	105a      	asrs	r2, r3, #1
 8000690:	17e3      	asrs	r3, r4, #31
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	1ae2      	subs	r2, r4, r3
 800069c:	00d3      	lsls	r3, r2, #3
 800069e:	3360      	adds	r3, #96	@ 0x60
 80006a0:	f107 0220 	add.w	r2, r7, #32
 80006a4:	4413      	add	r3, r2
 80006a6:	3b30      	subs	r3, #48	@ 0x30
 80006a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ac:	0fd5      	lsrs	r5, r2, #31
 80006ae:	005c      	lsls	r4, r3, #1
 80006b0:	ea45 0904 	orr.w	r9, r5, r4
 80006b4:	0fdc      	lsrs	r4, r3, #31
 80006b6:	0053      	lsls	r3, r2, #1
 80006b8:	ea44 0803 	orr.w	r8, r4, r3
 80006bc:	ea80 0308 	eor.w	r3, r0, r8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	ea81 0309 	eor.w	r3, r1, r9
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	3360      	adds	r3, #96	@ 0x60
 80006ce:	f107 0220 	add.w	r2, r7, #32
 80006d2:	4413      	add	r3, r2
 80006d4:	3b58      	subs	r3, #88	@ 0x58
 80006d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006da:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 80006de:	2300      	movs	r3, #0
 80006e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006e2:	e028      	b.n	8000736 <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 80006e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	441a      	add	r2, r3
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f4:	4413      	add	r3, r2
 80006f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	3360      	adds	r3, #96	@ 0x60
 8000700:	f107 0220 	add.w	r2, r7, #32
 8000704:	4413      	add	r3, r2
 8000706:	3b58      	subs	r3, #88	@ 0x58
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 800070e:	462c      	mov	r4, r5
 8000710:	00a4      	lsls	r4, r4, #2
 8000712:	4425      	add	r5, r4
 8000714:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000716:	442c      	add	r4, r5
 8000718:	00e4      	lsls	r4, r4, #3
 800071a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800071c:	442c      	add	r4, r5
 800071e:	ea80 0502 	eor.w	r5, r0, r2
 8000722:	603d      	str	r5, [r7, #0]
 8000724:	404b      	eors	r3, r1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800072c:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000732:	3301      	adds	r3, #1
 8000734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000738:	2b04      	cmp	r3, #4
 800073a:	ddd3      	ble.n	80006e4 <theta+0x148>
  for (x = 0; x < 5; ++x) {
 800073c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800073e:	3301      	adds	r3, #1
 8000740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000744:	2b04      	cmp	r3, #4
 8000746:	dd89      	ble.n	800065c <theta+0xc0>
    }
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3780      	adds	r7, #128	@ 0x80
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000754:	66666667 	.word	0x66666667

08000758 <rho>:

void rho(uint64_t* state)
{
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 8000762:	2100      	movs	r1, #0
 8000764:	6139      	str	r1, [r7, #16]
 8000766:	e062      	b.n	800082e <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 8000768:	2100      	movs	r1, #0
 800076a:	6179      	str	r1, [r7, #20]
 800076c:	e059      	b.n	8000822 <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 800076e:	6938      	ldr	r0, [r7, #16]
 8000770:	4601      	mov	r1, r0
 8000772:	0089      	lsls	r1, r1, #2
 8000774:	4408      	add	r0, r1
 8000776:	6979      	ldr	r1, [r7, #20]
 8000778:	4401      	add	r1, r0
 800077a:	00c9      	lsls	r1, r1, #3
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	4401      	add	r1, r0
 8000780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000784:	693e      	ldr	r6, [r7, #16]
 8000786:	4634      	mov	r4, r6
 8000788:	4626      	mov	r6, r4
 800078a:	00b6      	lsls	r6, r6, #2
 800078c:	eb06 0c04 	add.w	ip, r6, r4
 8000790:	697e      	ldr	r6, [r7, #20]
 8000792:	4466      	add	r6, ip
 8000794:	4c2a      	ldr	r4, [pc, #168]	@ (8000840 <rho+0xe8>)
 8000796:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800079a:	693c      	ldr	r4, [r7, #16]
 800079c:	46a4      	mov	ip, r4
 800079e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007a2:	44a4      	add	ip, r4
 80007a4:	697c      	ldr	r4, [r7, #20]
 80007a6:	44a4      	add	ip, r4
 80007a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80007ac:	68fc      	ldr	r4, [r7, #12]
 80007ae:	eb04 0a0c 	add.w	sl, r4, ip
 80007b2:	f1a6 0e20 	sub.w	lr, r6, #32
 80007b6:	f1c6 0c20 	rsb	ip, r6, #32
 80007ba:	fa01 f406 	lsl.w	r4, r1, r6
 80007be:	607c      	str	r4, [r7, #4]
 80007c0:	fa00 fe0e 	lsl.w	lr, r0, lr
 80007c4:	687c      	ldr	r4, [r7, #4]
 80007c6:	ea44 040e 	orr.w	r4, r4, lr
 80007ca:	607c      	str	r4, [r7, #4]
 80007cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007d0:	687c      	ldr	r4, [r7, #4]
 80007d2:	ea44 040c 	orr.w	r4, r4, ip
 80007d6:	607c      	str	r4, [r7, #4]
 80007d8:	fa00 f406 	lsl.w	r4, r0, r6
 80007dc:	603c      	str	r4, [r7, #0]
 80007de:	4276      	negs	r6, r6
 80007e0:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80007e4:	f1c6 0e20 	rsb	lr, r6, #32
 80007e8:	f1a6 0c20 	sub.w	ip, r6, #32
 80007ec:	fa20 f206 	lsr.w	r2, r0, r6
 80007f0:	fa01 fe0e 	lsl.w	lr, r1, lr
 80007f4:	ea42 020e 	orr.w	r2, r2, lr
 80007f8:	fa21 fc0c 	lsr.w	ip, r1, ip
 80007fc:	ea42 020c 	orr.w	r2, r2, ip
 8000800:	fa21 f306 	lsr.w	r3, r1, r6
 8000804:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000808:	4621      	mov	r1, r4
 800080a:	ea41 0802 	orr.w	r8, r1, r2
 800080e:	4629      	mov	r1, r5
 8000810:	ea41 0903 	orr.w	r9, r1, r3
 8000814:	4642      	mov	r2, r8
 8000816:	464b      	mov	r3, r9
 8000818:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 800081c:	6979      	ldr	r1, [r7, #20]
 800081e:	3101      	adds	r1, #1
 8000820:	6179      	str	r1, [r7, #20]
 8000822:	6979      	ldr	r1, [r7, #20]
 8000824:	2904      	cmp	r1, #4
 8000826:	dda2      	ble.n	800076e <rho+0x16>
  for (y = 0; y < 5; ++y) {
 8000828:	6939      	ldr	r1, [r7, #16]
 800082a:	3101      	adds	r1, #1
 800082c:	6139      	str	r1, [r7, #16]
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	2904      	cmp	r1, #4
 8000832:	dd99      	ble.n	8000768 <rho+0x10>
    }
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	0800d214 	.word	0x0800d214

08000844 <pi>:

void pi(uint64_t* state)
{
 8000844:	b480      	push	{r7}
 8000846:	b0b9      	sub	sp, #228	@ 0xe4
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000852:	e02c      	b.n	80008ae <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800085a:	e01f      	b.n	800089c <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 800085c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	441a      	add	r2, r3
 8000866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	18d0      	adds	r0, r2, r3
 8000872:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	441a      	add	r2, r3
 800087c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000880:	18d1      	adds	r1, r2, r3
 8000882:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	31e0      	adds	r1, #224	@ 0xe0
 800088a:	4439      	add	r1, r7
 800088c:	39d8      	subs	r1, #216	@ 0xd8
 800088e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000896:	3301      	adds	r3, #1
 8000898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800089c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	dddb      	ble.n	800085c <pi+0x18>
  for (y = 0; y < 5; ++y) {
 80008a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008a8:	3301      	adds	r3, #1
 80008aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	ddce      	ble.n	8000854 <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008bc:	e04f      	b.n	800095e <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008c4:	e042      	b.n	800094c <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 80008c6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <pi+0x130>)
 80008cc:	fb83 1302 	smull	r1, r3, r3, r2
 80008d0:	1059      	asrs	r1, r3, #1
 80008d2:	17d3      	asrs	r3, r2, #31
 80008d4:	1ac9      	subs	r1, r1, r3
 80008d6:	460b      	mov	r3, r1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	440b      	add	r3, r1
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 80008e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008e6:	0059      	lsls	r1, r3, #1
 80008e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	18ca      	adds	r2, r1, r3
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <pi+0x130>)
 80008f6:	fb83 1302 	smull	r1, r3, r3, r2
 80008fa:	1059      	asrs	r1, r3, #1
 80008fc:	17d3      	asrs	r3, r2, #31
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 800090c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	441a      	add	r2, r3
 8000916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800091a:	18d0      	adds	r0, r2, r3
 800091c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	441a      	add	r2, r3
 8000926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	18d1      	adds	r1, r2, r3
 8000932:	00c3      	lsls	r3, r0, #3
 8000934:	33e0      	adds	r3, #224	@ 0xe0
 8000936:	443b      	add	r3, r7
 8000938:	3bd8      	subs	r3, #216	@ 0xd8
 800093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000946:	3301      	adds	r3, #1
 8000948:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800094c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000950:	2b04      	cmp	r3, #4
 8000952:	ddb8      	ble.n	80008c6 <pi+0x82>
  for (y = 0; y < 5; ++y) {
 8000954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000958:	3301      	adds	r3, #1
 800095a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800095e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000962:	2b04      	cmp	r3, #4
 8000964:	ddab      	ble.n	80008be <pi+0x7a>
    }
  }
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	37e4      	adds	r7, #228	@ 0xe4
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	66666667 	.word	0x66666667

08000978 <pad101>:
    }
  }
}

int pad101(int r, int blocks, int l, uint8_t* M, uint8_t* P)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b088      	sub	sp, #32
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
    int block_size = r / 8;
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b00      	cmp	r3, #0
 800098a:	da00      	bge.n	800098e <pad101+0x16>
 800098c:	3307      	adds	r3, #7
 800098e:	10db      	asrs	r3, r3, #3
 8000990:	61bb      	str	r3, [r7, #24]

    /* length of the padded block */
    size_t block_len = (blocks + 1) * block_size;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	3301      	adds	r3, #1
 8000996:	69ba      	ldr	r2, [r7, #24]
 8000998:	fb02 f303 	mul.w	r3, r2, r3
 800099c:	617b      	str	r3, [r7, #20]

    /* zero out data and copy M into P */
    memset(P, 0, block_len * sizeof(uint8_t));
 800099e:	697a      	ldr	r2, [r7, #20]
 80009a0:	2100      	movs	r1, #0
 80009a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80009a4:	f00b fc34 	bl	800c210 <memset>
    for (int i = 0; i < l; ++i) {
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
 80009ac:	e00a      	b.n	80009c4 <pad101+0x4c>
        P[i] = M[i];
 80009ae:	69fb      	ldr	r3, [r7, #28]
 80009b0:	683a      	ldr	r2, [r7, #0]
 80009b2:	441a      	add	r2, r3
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80009b8:	440b      	add	r3, r1
 80009ba:	7812      	ldrb	r2, [r2, #0]
 80009bc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < l; ++i) {
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	3301      	adds	r3, #1
 80009c2:	61fb      	str	r3, [r7, #28]
 80009c4:	69fa      	ldr	r2, [r7, #28]
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	dbf0      	blt.n	80009ae <pad101+0x36>
    }

    /* CRYSTALS-style padding */
    P[l] ^= 0x06;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009d0:	4413      	add	r3, r2
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80009d8:	440b      	add	r3, r1
 80009da:	f082 0206 	eor.w	r2, r2, #6
 80009de:	b2d2      	uxtb	r2, r2
 80009e0:	701a      	strb	r2, [r3, #0]
    P[block_len - 1] ^= 0x80;
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	3b01      	subs	r3, #1
 80009e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80009e8:	4413      	add	r3, r2
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	697a      	ldr	r2, [r7, #20]
 80009ee:	3a01      	subs	r2, #1
 80009f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80009f2:	440a      	add	r2, r1
 80009f4:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 80009f8:	43db      	mvns	r3, r3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	7013      	strb	r3, [r2, #0]

    return block_len;
 80009fe:	697b      	ldr	r3, [r7, #20]
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3720      	adds	r7, #32
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	b29a      	uxth	r2, r3
 8000a18:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1c:	68b9      	ldr	r1, [r7, #8]
 8000a1e:	4804      	ldr	r0, [pc, #16]	@ (8000a30 <_write+0x28>)
 8000a20:	f006 ffaf 	bl	8007982 <HAL_UART_Transmit>
    return len;
 8000a24:	687b      	ldr	r3, [r7, #4]
}
 8000a26:	4618      	mov	r0, r3
 8000a28:	3710      	adds	r7, #16
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	200001a8 	.word	0x200001a8

08000a34 <test_masked_rho>:
    }

    return fail_count;
}

int test_masked_rho(void) {
 8000a34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000a38:	f5ad 6da7 	sub.w	sp, sp, #1336	@ 0x538
 8000a3c:	af04      	add	r7, sp, #16
    printf("== TESTING masked_rho ==\n");
 8000a3e:	48e7      	ldr	r0, [pc, #924]	@ (8000ddc <test_masked_rho+0x3a8>)
 8000a40:	f00b fa42 	bl	800bec8 <puts>

    // 1. Initialize a known reference state
    uint64_t ref_state[25] = {0};
 8000a44:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000a48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	23c8      	movs	r3, #200	@ 0xc8
 8000a50:	461a      	mov	r2, r3
 8000a52:	2100      	movs	r1, #0
 8000a54:	f00b fbdc 	bl	800c210 <memset>
    for (int i = 0; i < 25; i++) {
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8000a5e:	e05a      	b.n	8000b16 <test_masked_rho+0xe2>
        ref_state[i] = (uint64_t)i * 0x0101010101010101ULL;  // predictable pattern
 8000a60:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8000a64:	17da      	asrs	r2, r3, #31
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000a68:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000a6a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8000a6e:	f04f 0000 	mov.w	r0, #0
 8000a72:	f04f 0100 	mov.w	r1, #0
 8000a76:	0219      	lsls	r1, r3, #8
 8000a78:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8000a7c:	0210      	lsls	r0, r2, #8
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8000a84:	1854      	adds	r4, r2, r1
 8000a86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8000a88:	eb43 0501 	adc.w	r5, r3, r1
 8000a8c:	f04f 0200 	mov.w	r2, #0
 8000a90:	f04f 0300 	mov.w	r3, #0
 8000a94:	062b      	lsls	r3, r5, #24
 8000a96:	ea43 2314 	orr.w	r3, r3, r4, lsr #8
 8000a9a:	0622      	lsls	r2, r4, #24
 8000a9c:	4614      	mov	r4, r2
 8000a9e:	461d      	mov	r5, r3
 8000aa0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	eb14 0803 	adds.w	r8, r4, r3
 8000aaa:	460b      	mov	r3, r1
 8000aac:	eb45 0903 	adc.w	r9, r5, r3
 8000ab0:	f04f 0200 	mov.w	r2, #0
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	ea4f 2309 	mov.w	r3, r9, lsl #8
 8000abc:	ea43 6318 	orr.w	r3, r3, r8, lsr #24
 8000ac0:	ea4f 2208 	mov.w	r2, r8, lsl #8
 8000ac4:	4690      	mov	r8, r2
 8000ac6:	4699      	mov	r9, r3
 8000ac8:	4603      	mov	r3, r0
 8000aca:	eb18 0a03 	adds.w	sl, r8, r3
 8000ace:	460b      	mov	r3, r1
 8000ad0:	eb49 0b03 	adc.w	fp, r9, r3
 8000ad4:	f04f 0200 	mov.w	r2, #0
 8000ad8:	f04f 0300 	mov.w	r3, #0
 8000adc:	ea4f 430b 	mov.w	r3, fp, lsl #16
 8000ae0:	ea43 431a 	orr.w	r3, r3, sl, lsr #16
 8000ae4:	ea4f 420a 	mov.w	r2, sl, lsl #16
 8000ae8:	eb1a 0102 	adds.w	r1, sl, r2
 8000aec:	6239      	str	r1, [r7, #32]
 8000aee:	eb4b 0303 	adc.w	r3, fp, r3
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000af4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000af8:	f5a3 7288 	sub.w	r2, r3, #272	@ 0x110
 8000afc:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8000b00:	00db      	lsls	r3, r3, #3
 8000b02:	4413      	add	r3, r2
 8000b04:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000b08:	e9c3 1200 	strd	r1, r2, [r3]
    for (int i = 0; i < 25; i++) {
 8000b0c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8000b10:	3301      	adds	r3, #1
 8000b12:	f8c7 3524 	str.w	r3, [r7, #1316]	@ 0x524
 8000b16:	f8d7 3524 	ldr.w	r3, [r7, #1316]	@ 0x524
 8000b1a:	2b18      	cmp	r3, #24
 8000b1c:	dda0      	ble.n	8000a60 <test_masked_rho+0x2c>
    }

    // 2. Create masked shares (simple XOR-based scheme for test)
    masked_uint64_t masked_state[5][5];
    for (int y = 0; y < 5; y++) {
 8000b1e:	2300      	movs	r3, #0
 8000b20:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8000b24:	e09a      	b.n	8000c5c <test_masked_rho+0x228>
        for (int x = 0; x < 5; x++) {
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8000b2c:	e08c      	b.n	8000c48 <test_masked_rho+0x214>
            uint64_t val = ref_state[5 * y + x];
 8000b2e:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8000b32:	4613      	mov	r3, r2
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	441a      	add	r2, r3
 8000b38:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8000b3c:	4413      	add	r3, r2
 8000b3e:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8000b42:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8000b46:	00db      	lsls	r3, r3, #3
 8000b48:	4413      	add	r3, r2
 8000b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b4e:	f507 619c 	add.w	r1, r7, #1248	@ 0x4e0
 8000b52:	e9c1 2300 	strd	r2, r3, [r1]
            uint64_t sum = 0;
 8000b56:	f04f 0200 	mov.w	r2, #0
 8000b5a:	f04f 0300 	mov.w	r3, #0
 8000b5e:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 8000b62:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N - 1; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8000b6c:	e043      	b.n	8000bf6 <test_masked_rho+0x1c2>
                masked_state[x][y].share[i] = get_random64();
 8000b6e:	f000 ff7b 	bl	8001a68 <get_random64>
 8000b72:	4603      	mov	r3, r0
 8000b74:	17da      	asrs	r2, r3, #31
 8000b76:	61bb      	str	r3, [r7, #24]
 8000b78:	61fa      	str	r2, [r7, #28]
 8000b7a:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000b7e:	f5a3 6186 	sub.w	r1, r3, #1072	@ 0x430
 8000b82:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8000b86:	4613      	mov	r3, r2
 8000b88:	009b      	lsls	r3, r3, #2
 8000b8a:	4413      	add	r3, r2
 8000b8c:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8000b90:	4413      	add	r3, r2
 8000b92:	009a      	lsls	r2, r3, #2
 8000b94:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000b98:	4413      	add	r3, r2
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	440b      	add	r3, r1
 8000b9e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8000ba2:	e9c3 1200 	strd	r1, r2, [r3]
                sum ^= masked_state[x][y].share[i];
 8000ba6:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000baa:	f5a3 6186 	sub.w	r1, r3, #1072	@ 0x430
 8000bae:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8000bb2:	4613      	mov	r3, r2
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	4413      	add	r3, r2
 8000bb8:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8000bbc:	4413      	add	r3, r2
 8000bbe:	009a      	lsls	r2, r3, #2
 8000bc0:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000bc4:	4413      	add	r3, r2
 8000bc6:	00db      	lsls	r3, r3, #3
 8000bc8:	440b      	add	r3, r1
 8000bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bce:	f507 61a2 	add.w	r1, r7, #1296	@ 0x510
 8000bd2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bd6:	ea80 0402 	eor.w	r4, r0, r2
 8000bda:	60bc      	str	r4, [r7, #8]
 8000bdc:	404b      	eors	r3, r1
 8000bde:	60fb      	str	r3, [r7, #12]
 8000be0:	f507 62a2 	add.w	r2, r7, #1296	@ 0x510
 8000be4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8000be8:	e9c2 3400 	strd	r3, r4, [r2]
            for (int i = 0; i < MASKING_N - 1; i++) {
 8000bec:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	f8c7 350c 	str.w	r3, [r7, #1292]	@ 0x50c
 8000bf6:	f8d7 350c 	ldr.w	r3, [r7, #1292]	@ 0x50c
 8000bfa:	2b02      	cmp	r3, #2
 8000bfc:	ddb7      	ble.n	8000b6e <test_masked_rho+0x13a>
            }
            masked_state[x][y].share[MASKING_N - 1] = val ^ sum;
 8000bfe:	f507 639c 	add.w	r3, r7, #1248	@ 0x4e0
 8000c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c06:	f507 63a2 	add.w	r3, r7, #1296	@ 0x510
 8000c0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0e:	ea80 0402 	eor.w	r4, r0, r2
 8000c12:	613c      	str	r4, [r7, #16]
 8000c14:	404b      	eors	r3, r1
 8000c16:	617b      	str	r3, [r7, #20]
 8000c18:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000c1c:	f5a3 6186 	sub.w	r1, r3, #1072	@ 0x430
 8000c20:	f8d7 251c 	ldr.w	r2, [r7, #1308]	@ 0x51c
 8000c24:	4613      	mov	r3, r2
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	4413      	add	r3, r2
 8000c2a:	f8d7 2520 	ldr.w	r2, [r7, #1312]	@ 0x520
 8000c2e:	4413      	add	r3, r2
 8000c30:	015b      	lsls	r3, r3, #5
 8000c32:	440b      	add	r3, r1
 8000c34:	3318      	adds	r3, #24
 8000c36:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000c3a:	e9c3 1200 	strd	r1, r2, [r3]
        for (int x = 0; x < 5; x++) {
 8000c3e:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8000c42:	3301      	adds	r3, #1
 8000c44:	f8c7 351c 	str.w	r3, [r7, #1308]	@ 0x51c
 8000c48:	f8d7 351c 	ldr.w	r3, [r7, #1308]	@ 0x51c
 8000c4c:	2b04      	cmp	r3, #4
 8000c4e:	f77f af6e 	ble.w	8000b2e <test_masked_rho+0xfa>
    for (int y = 0; y < 5; y++) {
 8000c52:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000c56:	3301      	adds	r3, #1
 8000c58:	f8c7 3520 	str.w	r3, [r7, #1312]	@ 0x520
 8000c5c:	f8d7 3520 	ldr.w	r3, [r7, #1312]	@ 0x520
 8000c60:	2b04      	cmp	r3, #4
 8000c62:	f77f af60 	ble.w	8000b26 <test_masked_rho+0xf2>
        }
    }

    // 3. Apply masked Rho
    masked_rho(masked_state);
 8000c66:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f001 f8c0 	bl	8001df0 <masked_rho>

    // 4. Apply reference Rho
    uint64_t expected[25];
    memcpy(expected, ref_state, sizeof(ref_state));
 8000c70:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000c74:	f5a3 629f 	sub.w	r2, r3, #1272	@ 0x4f8
 8000c78:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000c7c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000c80:	4610      	mov	r0, r2
 8000c82:	4619      	mov	r1, r3
 8000c84:	23c8      	movs	r3, #200	@ 0xc8
 8000c86:	461a      	mov	r2, r3
 8000c88:	f00b fb4d 	bl	800c326 <memcpy>
    rho(expected);
 8000c8c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff fd61 	bl	8000758 <rho>

    // 5. Recombine masked result and compare
    int failures = 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
    for (int y = 0; y < 5; y++) {
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8000ca2:	e081      	b.n	8000da8 <test_masked_rho+0x374>
        for (int x = 0; x < 5; x++) {
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8000caa:	e074      	b.n	8000d96 <test_masked_rho+0x362>
            uint64_t recombined = 0;
 8000cac:	f04f 0200 	mov.w	r2, #0
 8000cb0:	f04f 0300 	mov.w	r3, #0
 8000cb4:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 8000cb8:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8000cc2:	e027      	b.n	8000d14 <test_masked_rho+0x2e0>
                recombined ^= masked_state[x][y].share[i];
 8000cc4:	f507 63a5 	add.w	r3, r7, #1320	@ 0x528
 8000cc8:	f5a3 6186 	sub.w	r1, r3, #1072	@ 0x430
 8000ccc:	f8d7 2500 	ldr.w	r2, [r7, #1280]	@ 0x500
 8000cd0:	4613      	mov	r3, r2
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	4413      	add	r3, r2
 8000cd6:	f8d7 2504 	ldr.w	r2, [r7, #1284]	@ 0x504
 8000cda:	4413      	add	r3, r2
 8000cdc:	009a      	lsls	r2, r3, #2
 8000cde:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8000ce2:	4413      	add	r3, r2
 8000ce4:	00db      	lsls	r3, r3, #3
 8000ce6:	440b      	add	r3, r1
 8000ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cec:	f507 619f 	add.w	r1, r7, #1272	@ 0x4f8
 8000cf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cf4:	ea80 0402 	eor.w	r4, r0, r2
 8000cf8:	603c      	str	r4, [r7, #0]
 8000cfa:	404b      	eors	r3, r1
 8000cfc:	607b      	str	r3, [r7, #4]
 8000cfe:	f507 629f 	add.w	r2, r7, #1272	@ 0x4f8
 8000d02:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000d06:	e9c2 3400 	strd	r3, r4, [r2]
            for (int i = 0; i < MASKING_N; i++) {
 8000d0a:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8000d0e:	3301      	adds	r3, #1
 8000d10:	f8c7 34f4 	str.w	r3, [r7, #1268]	@ 0x4f4
 8000d14:	f8d7 34f4 	ldr.w	r3, [r7, #1268]	@ 0x4f4
 8000d18:	2b03      	cmp	r3, #3
 8000d1a:	ddd3      	ble.n	8000cc4 <test_masked_rho+0x290>
            }

            uint64_t expected_val = expected[5 * y + x];
 8000d1c:	f8d7 2504 	ldr.w	r2, [r7, #1284]	@ 0x504
 8000d20:	4613      	mov	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	441a      	add	r2, r3
 8000d26:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000d2a:	4413      	add	r3, r2
 8000d2c:	f507 62a5 	add.w	r2, r7, #1320	@ 0x528
 8000d30:	f5a2 629f 	sub.w	r2, r2, #1272	@ 0x4f8
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d3c:	f507 619d 	add.w	r1, r7, #1256	@ 0x4e8
 8000d40:	e9c1 2300 	strd	r2, r3, [r1]
            if (recombined != expected_val) {
 8000d44:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8000d48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4c:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d54:	4299      	cmp	r1, r3
 8000d56:	bf08      	it	eq
 8000d58:	4290      	cmpeq	r0, r2
 8000d5a:	d017      	beq.n	8000d8c <test_masked_rho+0x358>
                printf("FAIL @ [%d][%d]: expected %016llX, got %016llX\n",
 8000d5c:	f507 639f 	add.w	r3, r7, #1272	@ 0x4f8
 8000d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d68:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d70:	e9cd 2300 	strd	r2, r3, [sp]
 8000d74:	f8d7 2504 	ldr.w	r2, [r7, #1284]	@ 0x504
 8000d78:	f8d7 1500 	ldr.w	r1, [r7, #1280]	@ 0x500
 8000d7c:	4818      	ldr	r0, [pc, #96]	@ (8000de0 <test_masked_rho+0x3ac>)
 8000d7e:	f00b f833 	bl	800bde8 <iprintf>
                       x, y, (unsigned long long)expected_val, (unsigned long long)recombined);
                failures++;
 8000d82:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8000d86:	3301      	adds	r3, #1
 8000d88:	f8c7 3508 	str.w	r3, [r7, #1288]	@ 0x508
        for (int x = 0; x < 5; x++) {
 8000d8c:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000d90:	3301      	adds	r3, #1
 8000d92:	f8c7 3500 	str.w	r3, [r7, #1280]	@ 0x500
 8000d96:	f8d7 3500 	ldr.w	r3, [r7, #1280]	@ 0x500
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	dd86      	ble.n	8000cac <test_masked_rho+0x278>
    for (int y = 0; y < 5; y++) {
 8000d9e:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 8000da2:	3301      	adds	r3, #1
 8000da4:	f8c7 3504 	str.w	r3, [r7, #1284]	@ 0x504
 8000da8:	f8d7 3504 	ldr.w	r3, [r7, #1284]	@ 0x504
 8000dac:	2b04      	cmp	r3, #4
 8000dae:	f77f af79 	ble.w	8000ca4 <test_masked_rho+0x270>
            }
        }
    }

    if (failures == 0) {
 8000db2:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d103      	bne.n	8000dc2 <test_masked_rho+0x38e>
        printf("PASS: masked_rho output matches reference.\n\n");
 8000dba:	480a      	ldr	r0, [pc, #40]	@ (8000de4 <test_masked_rho+0x3b0>)
 8000dbc:	f00b f884 	bl	800bec8 <puts>
 8000dc0:	e004      	b.n	8000dcc <test_masked_rho+0x398>
    } else {
        printf("FAIL: %d mismatches in masked_rho.\n\n", failures);
 8000dc2:	f8d7 1508 	ldr.w	r1, [r7, #1288]	@ 0x508
 8000dc6:	4808      	ldr	r0, [pc, #32]	@ (8000de8 <test_masked_rho+0x3b4>)
 8000dc8:	f00b f80e 	bl	800bde8 <iprintf>
    }

    return failures;
 8000dcc:	f8d7 3508 	ldr.w	r3, [r7, #1288]	@ 0x508
}
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f507 67a5 	add.w	r7, r7, #1320	@ 0x528
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000ddc:	0800ce58 	.word	0x0800ce58
 8000de0:	0800ce74 	.word	0x0800ce74
 8000de4:	0800cea4 	.word	0x0800cea4
 8000de8:	0800ced0 	.word	0x0800ced0

08000dec <test_masked_pi>:

void test_masked_pi(void) {
 8000dec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000df0:	f5ad 6d8a 	sub.w	sp, sp, #1104	@ 0x450
 8000df4:	af04      	add	r7, sp, #16
    printf("== TESTING masked_pi ==\n");
 8000df6:	48a2      	ldr	r0, [pc, #648]	@ (8001080 <test_masked_pi+0x294>)
 8000df8:	f00b f866 	bl	800bec8 <puts>
    // Step 1: Prepare reference and masked states
    uint64_t ref_state[25];
    masked_uint64_t masked_state[5][5];

    // Fill both with known pattern (diagonal increasing)
    for (int y = 0; y < 5; y++) {
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8000e02:	e07c      	b.n	8000efe <test_masked_pi+0x112>
        for (int x = 0; x < 5; x++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8000e0a:	e06f      	b.n	8000eec <test_masked_pi+0x100>
            uint64_t val = ((uint64_t)(5 * y + x) << 4) | (x ^ y);
 8000e0c:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8000e10:	4613      	mov	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	441a      	add	r2, r3
 8000e16:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000e1a:	4413      	add	r3, r2
 8000e1c:	17da      	asrs	r2, r3, #31
 8000e1e:	4698      	mov	r8, r3
 8000e20:	4691      	mov	r9, r2
 8000e22:	ea4f 7528 	mov.w	r5, r8, asr #28
 8000e26:	ea4f 1408 	mov.w	r4, r8, lsl #4
 8000e2a:	f8d7 2438 	ldr.w	r2, [r7, #1080]	@ 0x438
 8000e2e:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000e32:	4053      	eors	r3, r2
 8000e34:	17da      	asrs	r2, r3, #31
 8000e36:	469a      	mov	sl, r3
 8000e38:	4693      	mov	fp, r2
 8000e3a:	ea44 030a 	orr.w	r3, r4, sl
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	ea45 030b 	orr.w	r3, r5, fp
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e4a:	f507 6180 	add.w	r1, r7, #1024	@ 0x400
 8000e4e:	e9c1 2300 	strd	r2, r3, [r1]
            ref_state[5 * y + x] = val;
 8000e52:	f8d7 243c 	ldr.w	r2, [r7, #1084]	@ 0x43c
 8000e56:	4613      	mov	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	441a      	add	r2, r3
 8000e5c:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000e60:	18d1      	adds	r1, r2, r3
 8000e62:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000e66:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8000e6a:	00cb      	lsls	r3, r1, #3
 8000e6c:	18d1      	adds	r1, r2, r3
 8000e6e:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e76:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8000e80:	e02b      	b.n	8000eda <test_masked_pi+0xee>
                masked_state[x][y].share[i] = (i == 0) ? val : get_random64();
 8000e82:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d006      	beq.n	8000e98 <test_masked_pi+0xac>
 8000e8a:	f000 fded 	bl	8001a68 <get_random64>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	17da      	asrs	r2, r3, #31
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	617a      	str	r2, [r7, #20]
 8000e96:	e005      	b.n	8000ea4 <test_masked_pi+0xb8>
 8000e98:	f507 6380 	add.w	r3, r7, #1024	@ 0x400
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000ea4:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000ea8:	f5a3 6185 	sub.w	r1, r3, #1064	@ 0x428
 8000eac:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	0092      	lsls	r2, r2, #2
 8000eb4:	441a      	add	r2, r3
 8000eb6:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000eba:	4413      	add	r3, r2
 8000ebc:	009a      	lsls	r2, r3, #2
 8000ebe:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000ec2:	4413      	add	r3, r2
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	440b      	add	r3, r1
 8000ec8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000ecc:	e9c3 1200 	strd	r1, r2, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8000ed0:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	f8c7 3434 	str.w	r3, [r7, #1076]	@ 0x434
 8000eda:	f8d7 3434 	ldr.w	r3, [r7, #1076]	@ 0x434
 8000ede:	2b03      	cmp	r3, #3
 8000ee0:	ddcf      	ble.n	8000e82 <test_masked_pi+0x96>
        for (int x = 0; x < 5; x++) {
 8000ee2:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	f8c7 3438 	str.w	r3, [r7, #1080]	@ 0x438
 8000eec:	f8d7 3438 	ldr.w	r3, [r7, #1080]	@ 0x438
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	dd8b      	ble.n	8000e0c <test_masked_pi+0x20>
    for (int y = 0; y < 5; y++) {
 8000ef4:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000ef8:	3301      	adds	r3, #1
 8000efa:	f8c7 343c 	str.w	r3, [r7, #1084]	@ 0x43c
 8000efe:	f8d7 343c 	ldr.w	r3, [r7, #1084]	@ 0x43c
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	f77f af7e 	ble.w	8000e04 <test_masked_pi+0x18>
            }
        }
    }

    // Step 2: Apply reference pi
    pi(ref_state);
 8000f08:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fc99 	bl	8000844 <pi>

    // Step 3: Apply masked pi
    masked_pi(masked_state);  // <- you need to implement this
 8000f12:	f107 0318 	add.w	r3, r7, #24
 8000f16:	4618      	mov	r0, r3
 8000f18:	f000 ffc4 	bl	8001ea4 <masked_pi>

    // Step 4: Compare recombined masked state to reference
    int pass = 1;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
    for (int y = 0; y < 5; y++) {
 8000f22:	2300      	movs	r3, #0
 8000f24:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 8000f28:	e098      	b.n	800105c <test_masked_pi+0x270>
        for (int x = 0; x < 5; x++) {
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8000f30:	e08a      	b.n	8001048 <test_masked_pi+0x25c>
            uint64_t recombined = 0;
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8000f3e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8000f42:	2300      	movs	r3, #0
 8000f44:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8000f48:	e027      	b.n	8000f9a <test_masked_pi+0x1ae>
                recombined ^= masked_state[x][y].share[i];
 8000f4a:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8000f4e:	f5a3 6185 	sub.w	r1, r3, #1064	@ 0x428
 8000f52:	f8d7 2428 	ldr.w	r2, [r7, #1064]	@ 0x428
 8000f56:	4613      	mov	r3, r2
 8000f58:	009b      	lsls	r3, r3, #2
 8000f5a:	4413      	add	r3, r2
 8000f5c:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8000f60:	4413      	add	r3, r2
 8000f62:	009a      	lsls	r2, r3, #2
 8000f64:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f68:	4413      	add	r3, r2
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f72:	f507 6184 	add.w	r1, r7, #1056	@ 0x420
 8000f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000f7a:	ea80 0402 	eor.w	r4, r0, r2
 8000f7e:	603c      	str	r4, [r7, #0]
 8000f80:	404b      	eors	r3, r1
 8000f82:	607b      	str	r3, [r7, #4]
 8000f84:	f507 6284 	add.w	r2, r7, #1056	@ 0x420
 8000f88:	e9d7 3400 	ldrd	r3, r4, [r7]
 8000f8c:	e9c2 3400 	strd	r3, r4, [r2]
            for (int i = 0; i < MASKING_N; i++) {
 8000f90:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f94:	3301      	adds	r3, #1
 8000f96:	f8c7 341c 	str.w	r3, [r7, #1052]	@ 0x41c
 8000f9a:	f8d7 341c 	ldr.w	r3, [r7, #1052]	@ 0x41c
 8000f9e:	2b03      	cmp	r3, #3
 8000fa0:	ddd3      	ble.n	8000f4a <test_masked_pi+0x15e>
            }
            uint64_t expected = ref_state[5 * y + x];
 8000fa2:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	441a      	add	r2, r3
 8000fac:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8000fb0:	4413      	add	r3, r2
 8000fb2:	f507 6288 	add.w	r2, r7, #1088	@ 0x440
 8000fb6:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4413      	add	r3, r2
 8000fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc2:	f507 6182 	add.w	r1, r7, #1040	@ 0x410
 8000fc6:	e9c1 2300 	strd	r2, r3, [r1]
            if (recombined != expected) {
 8000fca:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000fce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fd2:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8000fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fda:	4299      	cmp	r1, r3
 8000fdc:	bf08      	it	eq
 8000fde:	4290      	cmpeq	r0, r2
 8000fe0:	d02d      	beq.n	800103e <test_masked_pi+0x252>
            	uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 8000fe2:	f8d7 3420 	ldr.w	r3, [r7, #1056]	@ 0x420
 8000fe6:	f8c7 340c 	str.w	r3, [r7, #1036]	@ 0x40c
            	uint32_t hi = (uint32_t)(recombined >> 32);
 8000fea:	f507 6384 	add.w	r3, r7, #1056	@ 0x420
 8000fee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	f04f 0300 	mov.w	r3, #0
 8000ffa:	000a      	movs	r2, r1
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	4613      	mov	r3, r2
 8001000:	f8c7 3408 	str.w	r3, [r7, #1032]	@ 0x408
            	printf("FAIL: M[%d][%d] = %08X%08X, expected %08X%08X\n", x, y, hi, lo,
            	       (uint32_t)(expected >> 32), (uint32_t)(expected & 0xFFFFFFFF));
 8001004:	f507 6382 	add.w	r3, r7, #1040	@ 0x410
 8001008:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100c:	f04f 0200 	mov.w	r2, #0
 8001010:	f04f 0300 	mov.w	r3, #0
 8001014:	000a      	movs	r2, r1
 8001016:	2300      	movs	r3, #0
            	printf("FAIL: M[%d][%d] = %08X%08X, expected %08X%08X\n", x, y, hi, lo,
 8001018:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 800101c:	9302      	str	r3, [sp, #8]
 800101e:	9201      	str	r2, [sp, #4]
 8001020:	f8d7 340c 	ldr.w	r3, [r7, #1036]	@ 0x40c
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	f8d7 3408 	ldr.w	r3, [r7, #1032]	@ 0x408
 800102a:	f8d7 242c 	ldr.w	r2, [r7, #1068]	@ 0x42c
 800102e:	f8d7 1428 	ldr.w	r1, [r7, #1064]	@ 0x428
 8001032:	4814      	ldr	r0, [pc, #80]	@ (8001084 <test_masked_pi+0x298>)
 8001034:	f00a fed8 	bl	800bde8 <iprintf>

                pass = 0;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3430 	str.w	r3, [r7, #1072]	@ 0x430
        for (int x = 0; x < 5; x++) {
 800103e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 8001042:	3301      	adds	r3, #1
 8001044:	f8c7 3428 	str.w	r3, [r7, #1064]	@ 0x428
 8001048:	f8d7 3428 	ldr.w	r3, [r7, #1064]	@ 0x428
 800104c:	2b04      	cmp	r3, #4
 800104e:	f77f af70 	ble.w	8000f32 <test_masked_pi+0x146>
    for (int y = 0; y < 5; y++) {
 8001052:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001056:	3301      	adds	r3, #1
 8001058:	f8c7 342c 	str.w	r3, [r7, #1068]	@ 0x42c
 800105c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	@ 0x42c
 8001060:	2b04      	cmp	r3, #4
 8001062:	f77f af62 	ble.w	8000f2a <test_masked_pi+0x13e>
            }
        }
    }

    if (pass) {
 8001066:	f8d7 3430 	ldr.w	r3, [r7, #1072]	@ 0x430
 800106a:	2b00      	cmp	r3, #0
 800106c:	d002      	beq.n	8001074 <test_masked_pi+0x288>
        printf("PASS: masked_pi output matches reference.\n");
 800106e:	4806      	ldr	r0, [pc, #24]	@ (8001088 <test_masked_pi+0x29c>)
 8001070:	f00a ff2a 	bl	800bec8 <puts>
    }
}
 8001074:	bf00      	nop
 8001076:	f507 6788 	add.w	r7, r7, #1088	@ 0x440
 800107a:	46bd      	mov	sp, r7
 800107c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001080:	0800cef8 	.word	0x0800cef8
 8001084:	0800cf10 	.word	0x0800cf10
 8001088:	0800cf40 	.word	0x0800cf40

0800108c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800108c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001090:	f5ad 7d01 	sub.w	sp, sp, #516	@ 0x204
 8001094:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001096:	f002 facb 	bl	8003630 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800109a:	f000 faa5 	bl	80015e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800109e:	f000 fbdf 	bl	8001860 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010a2:	f000 fb0b 	bl	80016bc <MX_I2C1_Init>
  MX_I2S3_Init();
 80010a6:	f000 fb37 	bl	8001718 <MX_I2S3_Init>
  MX_SPI1_Init();
 80010aa:	f000 fb79 	bl	80017a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80010ae:	f00a fa11 	bl	800b4d4 <MX_USB_HOST_Init>
  MX_RNG_Init();
 80010b2:	f000 fb61 	bl	8001778 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80010b6:	f000 fba9 	bl	800180c <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010c0:	4bcc      	ldr	r3, [pc, #816]	@ (80013f4 <main+0x368>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010c4:	4acb      	ldr	r2, [pc, #812]	@ (80013f4 <main+0x368>)
 80010c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ca:	6353      	str	r3, [r2, #52]	@ 0x34
 80010cc:	4bc9      	ldr	r3, [pc, #804]	@ (80013f4 <main+0x368>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010d4:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80010d8:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
  HAL_RNG_Init(&hrng);
 80010dc:	48c6      	ldr	r0, [pc, #792]	@ (80013f8 <main+0x36c>)
 80010de:	f006 faf7 	bl	80076d0 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 80010e2:	4bc6      	ldr	r3, [pc, #792]	@ (80013fc <main+0x370>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6898      	ldr	r0, [r3, #8]
 80010e8:	2300      	movs	r3, #0
 80010ea:	2202      	movs	r2, #2
 80010ec:	2100      	movs	r1, #0
 80010ee:	f00a fef3 	bl	800bed8 <setvbuf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 80010f2:	466b      	mov	r3, sp
 80010f4:	461e      	mov	r6, r3
	  test_masked_rho();
 80010f6:	f7ff fc9d 	bl	8000a34 <test_masked_rho>
	  test_masked_pi();
 80010fa:	f7ff fe77 	bl	8000dec <test_masked_pi>
	      const uint8_t input[] = {
 80010fe:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001102:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8001106:	4abe      	ldr	r2, [pc, #760]	@ (8001400 <main+0x374>)
 8001108:	461d      	mov	r5, r3
 800110a:	4614      	mov	r4, r2
 800110c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800110e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001110:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001114:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	          0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07,
	          0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
	          0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17,
	          0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F
	      };
	      size_t input_len = sizeof(input);
 8001118:	2320      	movs	r3, #32
 800111a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc

	      // SHA3-512 has: r = 576, c = 1024
	      int r = 576;
 800111e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001122:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
	      int c = 1024;
 8001126:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800112a:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
	      int b = r + c;
 800112e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	@ 0x1c8
 8001132:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001136:	4413      	add	r3, r2
 8001138:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
	      int block_size = r / 8;
 800113c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001140:	2b00      	cmp	r3, #0
 8001142:	da00      	bge.n	8001146 <main+0xba>
 8001144:	3307      	adds	r3, #7
 8001146:	10db      	asrs	r3, r3, #3
 8001148:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc

	      // padded input buffer
	      int blocks = input_len / block_size;
 800114c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001150:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001154:	fbb3 f3f2 	udiv	r3, r3, r2
 8001158:	f8c7 31b8 	str.w	r3, [r7, #440]	@ 0x1b8
	      uint8_t padded[block_size * (blocks + 1)];
 800115c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	@ 0x1b8
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8001166:	fb03 f102 	mul.w	r1, r3, r2
 800116a:	1e4b      	subs	r3, r1, #1
 800116c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
 8001170:	460a      	mov	r2, r1
 8001172:	2300      	movs	r3, #0
 8001174:	4692      	mov	sl, r2
 8001176:	469b      	mov	fp, r3
 8001178:	f04f 0200 	mov.w	r2, #0
 800117c:	f04f 0300 	mov.w	r3, #0
 8001180:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001184:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001188:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800118c:	460a      	mov	r2, r1
 800118e:	2300      	movs	r3, #0
 8001190:	613a      	str	r2, [r7, #16]
 8001192:	617b      	str	r3, [r7, #20]
 8001194:	f04f 0200 	mov.w	r2, #0
 8001198:	f04f 0300 	mov.w	r3, #0
 800119c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80011a0:	4628      	mov	r0, r5
 80011a2:	00c3      	lsls	r3, r0, #3
 80011a4:	4620      	mov	r0, r4
 80011a6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011aa:	4620      	mov	r0, r4
 80011ac:	00c2      	lsls	r2, r0, #3
 80011ae:	460b      	mov	r3, r1
 80011b0:	3307      	adds	r3, #7
 80011b2:	08db      	lsrs	r3, r3, #3
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	ebad 0d03 	sub.w	sp, sp, r3
 80011ba:	ab02      	add	r3, sp, #8
 80011bc:	3300      	adds	r3, #0
 80011be:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
	      int padded_len = pad101(r, blocks, input_len, (uint8_t *)input, padded);
 80011c2:	f107 0220 	add.w	r2, r7, #32
 80011c6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	4613      	mov	r3, r2
 80011ce:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80011d2:	f8d7 11b8 	ldr.w	r1, [r7, #440]	@ 0x1b8
 80011d6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	@ 0x1c8
 80011da:	f7ff fbcd 	bl	8000978 <pad101>
 80011de:	f8c7 01ac 	str.w	r0, [r7, #428]	@ 0x1ac

	      // 25-lane state
	      uint64_t state[25] = {0};
 80011e2:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80011e6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80011ea:	4618      	mov	r0, r3
 80011ec:	23c8      	movs	r3, #200	@ 0xc8
 80011ee:	461a      	mov	r2, r3
 80011f0:	2100      	movs	r1, #0
 80011f2:	f00b f80d 	bl	800c210 <memset>

	      // absorb one block manually
	      for (int i = 0; i < r / 64; i++) {
 80011f6:	2300      	movs	r3, #0
 80011f8:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80011fc:	e071      	b.n	80012e2 <main+0x256>
	          uint32_t lo = 0, hi = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
	          for (int j = 0; j < 4; j++) {
 800120a:	2300      	movs	r3, #0
 800120c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001210:	e02b      	b.n	800126a <main+0x1de>
	              lo |= ((uint32_t)padded[i * 8 + j]) << (8 * j);
 8001212:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001216:	00da      	lsls	r2, r3, #3
 8001218:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800121c:	441a      	add	r2, r3
 800121e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001222:	5c9b      	ldrb	r3, [r3, r2]
 8001224:	461a      	mov	r2, r3
 8001226:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800122a:	00db      	lsls	r3, r3, #3
 800122c:	409a      	lsls	r2, r3
 800122e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001232:	4313      	orrs	r3, r2
 8001234:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
	              hi |= ((uint32_t)padded[i * 8 + 4 + j]) << (8 * j);
 8001238:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1d1a      	adds	r2, r3, #4
 8001240:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001244:	441a      	add	r2, r3
 8001246:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800124a:	5c9b      	ldrb	r3, [r3, r2]
 800124c:	461a      	mov	r2, r3
 800124e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	409a      	lsls	r2, r3
 8001256:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800125a:	4313      	orrs	r3, r2
 800125c:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
	          for (int j = 0; j < 4; j++) {
 8001260:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001264:	3301      	adds	r3, #1
 8001266:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 800126a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 800126e:	2b03      	cmp	r3, #3
 8001270:	ddcf      	ble.n	8001212 <main+0x186>
	          }
	          state[i] ^= ((uint64_t)hi << 32) | lo;
 8001272:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001276:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800127a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	4413      	add	r3, r2
 8001282:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001286:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800128a:	2200      	movs	r2, #0
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	60fa      	str	r2, [r7, #12]
 8001290:	f04f 0200 	mov.w	r2, #0
 8001294:	f04f 0300 	mov.w	r3, #0
 8001298:	68b9      	ldr	r1, [r7, #8]
 800129a:	000b      	movs	r3, r1
 800129c:	2200      	movs	r2, #0
 800129e:	f8d7 11f0 	ldr.w	r1, [r7, #496]	@ 0x1f0
 80012a2:	2000      	movs	r0, #0
 80012a4:	61b9      	str	r1, [r7, #24]
 80012a6:	61f8      	str	r0, [r7, #28]
 80012a8:	69b9      	ldr	r1, [r7, #24]
 80012aa:	ea42 0801 	orr.w	r8, r2, r1
 80012ae:	69f9      	ldr	r1, [r7, #28]
 80012b0:	ea43 0901 	orr.w	r9, r3, r1
 80012b4:	ea84 0308 	eor.w	r3, r4, r8
 80012b8:	603b      	str	r3, [r7, #0]
 80012ba:	ea85 0309 	eor.w	r3, r5, r9
 80012be:	607b      	str	r3, [r7, #4]
 80012c0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80012c4:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80012c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80012cc:	00db      	lsls	r3, r3, #3
 80012ce:	4413      	add	r3, r2
 80012d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012d4:	e9c3 1200 	strd	r1, r2, [r3]
	      for (int i = 0; i < r / 64; i++) {
 80012d8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80012dc:	3301      	adds	r3, #1
 80012de:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
 80012e2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	da00      	bge.n	80012ec <main+0x260>
 80012ea:	333f      	adds	r3, #63	@ 0x3f
 80012ec:	119b      	asrs	r3, r3, #6
 80012ee:	461a      	mov	r2, r3
 80012f0:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80012f4:	4293      	cmp	r3, r2
 80012f6:	db82      	blt.n	80011fe <main+0x172>
	      }

	      // Print state before theta
	      printf("== Before Theta ==\n");
 80012f8:	4842      	ldr	r0, [pc, #264]	@ (8001404 <main+0x378>)
 80012fa:	f00a fde5 	bl	800bec8 <puts>
	      for (int i = 0; i < 25; i++) {
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001304:	e02d      	b.n	8001362 <main+0x2d6>
	          uint32_t lo = (uint32_t)(state[i] & 0xFFFFFFFF);
 8001306:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800130a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800130e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001312:	00db      	lsls	r3, r3, #3
 8001314:	4413      	add	r3, r2
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	4613      	mov	r3, r2
 800131c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
	          uint32_t hi = (uint32_t)(state[i] >> 32);
 8001320:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001324:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8001328:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4413      	add	r3, r2
 8001330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001334:	f04f 0000 	mov.w	r0, #0
 8001338:	f04f 0100 	mov.w	r1, #0
 800133c:	0018      	movs	r0, r3
 800133e:	2100      	movs	r1, #0
 8001340:	4603      	mov	r3, r0
 8001342:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
	          printf("State[%02d]: %08lX%08lX\n", i, hi, lo);
 8001346:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800134a:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 800134e:	f8d7 11e4 	ldr.w	r1, [r7, #484]	@ 0x1e4
 8001352:	482d      	ldr	r0, [pc, #180]	@ (8001408 <main+0x37c>)
 8001354:	f00a fd48 	bl	800bde8 <iprintf>
	      for (int i = 0; i < 25; i++) {
 8001358:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800135c:	3301      	adds	r3, #1
 800135e:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001362:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001366:	2b18      	cmp	r3, #24
 8001368:	ddcd      	ble.n	8001306 <main+0x27a>
	      }

	      // Run just theta
	      theta(state);
 800136a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f914 	bl	800059c <theta>

	      // Print state after theta
	      printf("== After Theta ==\n");
 8001374:	4825      	ldr	r0, [pc, #148]	@ (800140c <main+0x380>)
 8001376:	f00a fda7 	bl	800bec8 <puts>
	      for (int i = 0; i < 25; i++) {
 800137a:	2300      	movs	r3, #0
 800137c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001380:	e02d      	b.n	80013de <main+0x352>
	          uint32_t lo = (uint32_t)(state[i] & 0xFFFFFFFF);
 8001382:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001386:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800138a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 800138e:	00db      	lsls	r3, r3, #3
 8001390:	4413      	add	r3, r2
 8001392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001396:	4613      	mov	r3, r2
 8001398:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
	          uint32_t hi = (uint32_t)(state[i] >> 32);
 800139c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80013a0:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80013a4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4413      	add	r3, r2
 80013ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b0:	f04f 0000 	mov.w	r0, #0
 80013b4:	f04f 0100 	mov.w	r1, #0
 80013b8:	0018      	movs	r0, r3
 80013ba:	2100      	movs	r1, #0
 80013bc:	4603      	mov	r3, r0
 80013be:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
	          printf("State[%02d]: %08lX%08lX\n", i, hi, lo);
 80013c2:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 80013c6:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80013ca:	f8d7 11e0 	ldr.w	r1, [r7, #480]	@ 0x1e0
 80013ce:	480e      	ldr	r0, [pc, #56]	@ (8001408 <main+0x37c>)
 80013d0:	f00a fd0a 	bl	800bde8 <iprintf>
	      for (int i = 0; i < 25; i++) {
 80013d4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80013d8:	3301      	adds	r3, #1
 80013da:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80013de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80013e2:	2b18      	cmp	r3, #24
 80013e4:	ddcd      	ble.n	8001382 <main+0x2f6>
	      }

	      // Print state before rho
	  	      printf("== Before THETA MASKED ==\n");
 80013e6:	480a      	ldr	r0, [pc, #40]	@ (8001410 <main+0x384>)
 80013e8:	f00a fd6e 	bl	800bec8 <puts>
	  	      for (int i = 0; i < 25; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80013f2:	e03d      	b.n	8001470 <main+0x3e4>
 80013f4:	40023800 	.word	0x40023800
 80013f8:	20000140 	.word	0x20000140
 80013fc:	20000038 	.word	0x20000038
 8001400:	0800d064 	.word	0x0800d064
 8001404:	0800cf6c 	.word	0x0800cf6c
 8001408:	0800cf80 	.word	0x0800cf80
 800140c:	0800cf9c 	.word	0x0800cf9c
 8001410:	0800cfb0 	.word	0x0800cfb0
	  	          uint32_t loRho = (uint32_t)(state[i] & 0xFFFFFFFF);
 8001414:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001418:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800141c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001420:	00db      	lsls	r3, r3, #3
 8001422:	4413      	add	r3, r2
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	4613      	mov	r3, r2
 800142a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
	  	          uint32_t hiRho = (uint32_t)(state[i] >> 32);
 800142e:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001432:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 8001436:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4413      	add	r3, r2
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f04f 0000 	mov.w	r0, #0
 8001446:	f04f 0100 	mov.w	r1, #0
 800144a:	0018      	movs	r0, r3
 800144c:	2100      	movs	r1, #0
 800144e:	4603      	mov	r3, r0
 8001450:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
	  	          printf("State[%02d]: %08lX%08lX\n", i, hiRho, loRho);
 8001454:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001458:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800145c:	f8d7 11dc 	ldr.w	r1, [r7, #476]	@ 0x1dc
 8001460:	4859      	ldr	r0, [pc, #356]	@ (80015c8 <main+0x53c>)
 8001462:	f00a fcc1 	bl	800bde8 <iprintf>
	  	      for (int i = 0; i < 25; i++) {
 8001466:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 800146a:	3301      	adds	r3, #1
 800146c:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001470:	f8d7 31dc 	ldr.w	r3, [r7, #476]	@ 0x1dc
 8001474:	2b18      	cmp	r3, #24
 8001476:	ddcd      	ble.n	8001414 <main+0x388>
	  	      }

	  	      // Print state after rho
	  	      printf("== AFTER THETA MASKED  \n");
 8001478:	4854      	ldr	r0, [pc, #336]	@ (80015cc <main+0x540>)
 800147a:	f00a fd25 	bl	800bec8 <puts>
	  	      for (int i = 0; i < 25; i++) {
 800147e:	2300      	movs	r3, #0
 8001480:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 8001484:	e02d      	b.n	80014e2 <main+0x456>
	  	    	  uint32_t loRhoa = (uint32_t)(state[i] & 0xFFFFFFFF);
 8001486:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 800148a:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 800148e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4413      	add	r3, r2
 8001496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149a:	4613      	mov	r3, r2
 800149c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
				  uint32_t hiRhoa = (uint32_t)(state[i] >> 32);
 80014a0:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80014a4:	f5a3 729c 	sub.w	r2, r3, #312	@ 0x138
 80014a8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	4413      	add	r3, r2
 80014b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b4:	f04f 0000 	mov.w	r0, #0
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	0018      	movs	r0, r3
 80014be:	2100      	movs	r1, #0
 80014c0:	4603      	mov	r3, r0
 80014c2:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
				  printf("State[%02d]: %08lX%08lX\n", i, hiRhoa, loRhoa);
 80014c6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80014ca:	f8d7 21a4 	ldr.w	r2, [r7, #420]	@ 0x1a4
 80014ce:	f8d7 11d8 	ldr.w	r1, [r7, #472]	@ 0x1d8
 80014d2:	483d      	ldr	r0, [pc, #244]	@ (80015c8 <main+0x53c>)
 80014d4:	f00a fc88 	bl	800bde8 <iprintf>
	  	      for (int i = 0; i < 25; i++) {
 80014d8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80014dc:	3301      	adds	r3, #1
 80014de:	f8c7 31d8 	str.w	r3, [r7, #472]	@ 0x1d8
 80014e2:	f8d7 31d8 	ldr.w	r3, [r7, #472]	@ 0x1d8
 80014e6:	2b18      	cmp	r3, #24
 80014e8:	ddcd      	ble.n	8001486 <main+0x3fa>

	     // Run reference SHA3-512
	     //sha3_512(ref_output, input, input_len);

	     // Run masked SHA3-512;
	     printf("BEFORE MASKED INPUT");
 80014ea:	4839      	ldr	r0, [pc, #228]	@ (80015d0 <main+0x544>)
 80014ec:	f00a fc7c 	bl	800bde8 <iprintf>
	     masked_sha3_512(masked_output, input, input_len);
 80014f0:	f107 0120 	add.w	r1, r7, #32
 80014f4:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80014f8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	@ 0x1cc
 80014fc:	4618      	mov	r0, r3
 80014fe:	f001 fcf1 	bl	8002ee4 <masked_sha3_512>

	     // Print both
	     printf("== Reference SHA3-512 ==\n");
 8001502:	4834      	ldr	r0, [pc, #208]	@ (80015d4 <main+0x548>)
 8001504:	f00a fce0 	bl	800bec8 <puts>
	     for (int i = 0; i < 64; i++) {
 8001508:	2300      	movs	r3, #0
 800150a:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 800150e:	e01a      	b.n	8001546 <main+0x4ba>
	         printf("%02X", ref_output[i]);
 8001510:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001514:	f5a3 72dc 	sub.w	r2, r3, #440	@ 0x1b8
 8001518:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800151c:	4413      	add	r3, r2
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	482d      	ldr	r0, [pc, #180]	@ (80015d8 <main+0x54c>)
 8001524:	f00a fc60 	bl	800bde8 <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8001528:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800152c:	3301      	adds	r3, #1
 800152e:	f003 030f 	and.w	r3, r3, #15
 8001532:	2b00      	cmp	r3, #0
 8001534:	d102      	bne.n	800153c <main+0x4b0>
 8001536:	200a      	movs	r0, #10
 8001538:	f00a fc68 	bl	800be0c <putchar>
	     for (int i = 0; i < 64; i++) {
 800153c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001540:	3301      	adds	r3, #1
 8001542:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
 8001546:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 800154a:	2b3f      	cmp	r3, #63	@ 0x3f
 800154c:	dde0      	ble.n	8001510 <main+0x484>
	     }

	     printf("== Masked SHA3-512 ==\n");
 800154e:	4823      	ldr	r0, [pc, #140]	@ (80015dc <main+0x550>)
 8001550:	f00a fcba 	bl	800bec8 <puts>
	     for (int i = 0; i < 64; i++) {
 8001554:	2300      	movs	r3, #0
 8001556:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 800155a:	e01a      	b.n	8001592 <main+0x506>
	         printf("%02X", masked_output[i]);
 800155c:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8001560:	f5a3 72bc 	sub.w	r2, r3, #376	@ 0x178
 8001564:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001568:	4413      	add	r3, r2
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	481a      	ldr	r0, [pc, #104]	@ (80015d8 <main+0x54c>)
 8001570:	f00a fc3a 	bl	800bde8 <iprintf>
	         if ((i + 1) % 16 == 0) printf("\n");
 8001574:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001578:	3301      	adds	r3, #1
 800157a:	f003 030f 	and.w	r3, r3, #15
 800157e:	2b00      	cmp	r3, #0
 8001580:	d102      	bne.n	8001588 <main+0x4fc>
 8001582:	200a      	movs	r0, #10
 8001584:	f00a fc42 	bl	800be0c <putchar>
	     for (int i = 0; i < 64; i++) {
 8001588:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 800158c:	3301      	adds	r3, #1
 800158e:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 8001592:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001596:	2b3f      	cmp	r3, #63	@ 0x3f
 8001598:	dde0      	ble.n	800155c <main+0x4d0>
	     }

	     // Compare
	     if (memcmp(ref_output, masked_output, 64) == 0) {
 800159a:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 800159e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a2:	2240      	movs	r2, #64	@ 0x40
 80015a4:	4618      	mov	r0, r3
 80015a6:	f00a fe23 	bl	800c1f0 <memcmp>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d103      	bne.n	80015b8 <main+0x52c>
	         printf("✅ masked_sha3_512: PASS\n");
 80015b0:	480b      	ldr	r0, [pc, #44]	@ (80015e0 <main+0x554>)
 80015b2:	f00a fc89 	bl	800bec8 <puts>
 80015b6:	e002      	b.n	80015be <main+0x532>
	     } else {
	         printf("❌ masked_sha3_512: FAIL\n");
 80015b8:	480a      	ldr	r0, [pc, #40]	@ (80015e4 <main+0x558>)
 80015ba:	f00a fc85 	bl	800bec8 <puts>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80015be:	f009 ffaf 	bl	800b520 <MX_USB_HOST_Process>
 80015c2:	46b5      	mov	sp, r6
  {
 80015c4:	e595      	b.n	80010f2 <main+0x66>
 80015c6:	bf00      	nop
 80015c8:	0800cf80 	.word	0x0800cf80
 80015cc:	0800cfcc 	.word	0x0800cfcc
 80015d0:	0800cfe4 	.word	0x0800cfe4
 80015d4:	0800cff8 	.word	0x0800cff8
 80015d8:	0800cc60 	.word	0x0800cc60
 80015dc:	0800d014 	.word	0x0800d014
 80015e0:	0800d02c 	.word	0x0800d02c
 80015e4:	0800d048 	.word	0x0800d048

080015e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b094      	sub	sp, #80	@ 0x50
 80015ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ee:	f107 0320 	add.w	r3, r7, #32
 80015f2:	2230      	movs	r2, #48	@ 0x30
 80015f4:	2100      	movs	r1, #0
 80015f6:	4618      	mov	r0, r3
 80015f8:	f00a fe0a 	bl	800c210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	2300      	movs	r3, #0
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	4b28      	ldr	r3, [pc, #160]	@ (80016b4 <SystemClock_Config+0xcc>)
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	4a27      	ldr	r2, [pc, #156]	@ (80016b4 <SystemClock_Config+0xcc>)
 8001616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800161a:	6413      	str	r3, [r2, #64]	@ 0x40
 800161c:	4b25      	ldr	r3, [pc, #148]	@ (80016b4 <SystemClock_Config+0xcc>)
 800161e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001620:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001628:	2300      	movs	r3, #0
 800162a:	607b      	str	r3, [r7, #4]
 800162c:	4b22      	ldr	r3, [pc, #136]	@ (80016b8 <SystemClock_Config+0xd0>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a21      	ldr	r2, [pc, #132]	@ (80016b8 <SystemClock_Config+0xd0>)
 8001632:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b1f      	ldr	r3, [pc, #124]	@ (80016b8 <SystemClock_Config+0xd0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001644:	2301      	movs	r3, #1
 8001646:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001648:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800164c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800164e:	2302      	movs	r3, #2
 8001650:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001652:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001658:	2308      	movs	r3, #8
 800165a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800165c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001660:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001662:	2302      	movs	r3, #2
 8001664:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001666:	2307      	movs	r3, #7
 8001668:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800166a:	f107 0320 	add.w	r3, r7, #32
 800166e:	4618      	mov	r0, r3
 8001670:	f005 fa54 	bl	8006b1c <HAL_RCC_OscConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800167a:	f000 f9ef 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800167e:	230f      	movs	r3, #15
 8001680:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001682:	2302      	movs	r3, #2
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800168a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800168e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001690:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001694:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001696:	f107 030c 	add.w	r3, r7, #12
 800169a:	2105      	movs	r1, #5
 800169c:	4618      	mov	r0, r3
 800169e:	f005 fcb5 	bl	800700c <HAL_RCC_ClockConfig>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a8:	f000 f9d8 	bl	8001a5c <Error_Handler>
  }
}
 80016ac:	bf00      	nop
 80016ae:	3750      	adds	r7, #80	@ 0x50
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000

080016bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016c0:	4b12      	ldr	r3, [pc, #72]	@ (800170c <MX_I2C1_Init+0x50>)
 80016c2:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <MX_I2C1_Init+0x54>)
 80016c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016c6:	4b11      	ldr	r3, [pc, #68]	@ (800170c <MX_I2C1_Init+0x50>)
 80016c8:	4a12      	ldr	r2, [pc, #72]	@ (8001714 <MX_I2C1_Init+0x58>)
 80016ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	@ (800170c <MX_I2C1_Init+0x50>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	@ (800170c <MX_I2C1_Init+0x50>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	@ (800170c <MX_I2C1_Init+0x50>)
 80016da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80016de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016e0:	4b0a      	ldr	r3, [pc, #40]	@ (800170c <MX_I2C1_Init+0x50>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80016e6:	4b09      	ldr	r3, [pc, #36]	@ (800170c <MX_I2C1_Init+0x50>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	@ (800170c <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016f2:	4b06      	ldr	r3, [pc, #24]	@ (800170c <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	@ (800170c <MX_I2C1_Init+0x50>)
 80016fa:	f004 fc2b 	bl	8005f54 <HAL_I2C_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001704:	f000 f9aa 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200000a4 	.word	0x200000a4
 8001710:	40005400 	.word	0x40005400
 8001714:	000186a0 	.word	0x000186a0

08001718 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800171c:	4b13      	ldr	r3, [pc, #76]	@ (800176c <MX_I2S3_Init+0x54>)
 800171e:	4a14      	ldr	r2, [pc, #80]	@ (8001770 <MX_I2S3_Init+0x58>)
 8001720:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001722:	4b12      	ldr	r3, [pc, #72]	@ (800176c <MX_I2S3_Init+0x54>)
 8001724:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001728:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800172a:	4b10      	ldr	r3, [pc, #64]	@ (800176c <MX_I2S3_Init+0x54>)
 800172c:	2200      	movs	r2, #0
 800172e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001730:	4b0e      	ldr	r3, [pc, #56]	@ (800176c <MX_I2S3_Init+0x54>)
 8001732:	2200      	movs	r2, #0
 8001734:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001736:	4b0d      	ldr	r3, [pc, #52]	@ (800176c <MX_I2S3_Init+0x54>)
 8001738:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800173c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800173e:	4b0b      	ldr	r3, [pc, #44]	@ (800176c <MX_I2S3_Init+0x54>)
 8001740:	4a0c      	ldr	r2, [pc, #48]	@ (8001774 <MX_I2S3_Init+0x5c>)
 8001742:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001744:	4b09      	ldr	r3, [pc, #36]	@ (800176c <MX_I2S3_Init+0x54>)
 8001746:	2200      	movs	r2, #0
 8001748:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800174a:	4b08      	ldr	r3, [pc, #32]	@ (800176c <MX_I2S3_Init+0x54>)
 800174c:	2200      	movs	r2, #0
 800174e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001750:	4b06      	ldr	r3, [pc, #24]	@ (800176c <MX_I2S3_Init+0x54>)
 8001752:	2200      	movs	r2, #0
 8001754:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001756:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_I2S3_Init+0x54>)
 8001758:	f004 fd40 	bl	80061dc <HAL_I2S_Init>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	d001      	beq.n	8001766 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001762:	f000 f97b 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001766:	bf00      	nop
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	200000f8 	.word	0x200000f8
 8001770:	40003c00 	.word	0x40003c00
 8001774:	00017700 	.word	0x00017700

08001778 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800177c:	4b06      	ldr	r3, [pc, #24]	@ (8001798 <MX_RNG_Init+0x20>)
 800177e:	4a07      	ldr	r2, [pc, #28]	@ (800179c <MX_RNG_Init+0x24>)
 8001780:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001782:	4805      	ldr	r0, [pc, #20]	@ (8001798 <MX_RNG_Init+0x20>)
 8001784:	f005 ffa4 	bl	80076d0 <HAL_RNG_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800178e:	f000 f965 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000140 	.word	0x20000140
 800179c:	50060800 	.word	0x50060800

080017a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017a4:	4b17      	ldr	r3, [pc, #92]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017a6:	4a18      	ldr	r2, [pc, #96]	@ (8001808 <MX_SPI1_Init+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017aa:	4b16      	ldr	r3, [pc, #88]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017b2:	4b14      	ldr	r3, [pc, #80]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017b8:	4b12      	ldr	r3, [pc, #72]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017be:	4b11      	ldr	r3, [pc, #68]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017da:	2200      	movs	r2, #0
 80017dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017de:	4b09      	ldr	r3, [pc, #36]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e4:	4b07      	ldr	r3, [pc, #28]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ea:	4b06      	ldr	r3, [pc, #24]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017ec:	220a      	movs	r2, #10
 80017ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017f0:	4804      	ldr	r0, [pc, #16]	@ (8001804 <MX_SPI1_Init+0x64>)
 80017f2:	f005 ffed 	bl	80077d0 <HAL_SPI_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017fc:	f000 f92e 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001800:	bf00      	nop
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000150 	.word	0x20000150
 8001808:	40013000 	.word	0x40013000

0800180c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001810:	4b11      	ldr	r3, [pc, #68]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	@ (800185c <MX_USART2_UART_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	@ (8001858 <MX_USART2_UART_Init+0x4c>)
 8001844:	f006 f84d 	bl	80078e2 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800184e:	f000 f905 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200001a8 	.word	0x200001a8
 800185c:	40004400 	.word	0x40004400

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	@ 0x30
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	4b72      	ldr	r3, [pc, #456]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187e:	4a71      	ldr	r2, [pc, #452]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 8001880:	f043 0310 	orr.w	r3, r3, #16
 8001884:	6313      	str	r3, [r2, #48]	@ 0x30
 8001886:	4b6f      	ldr	r3, [pc, #444]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b6b      	ldr	r3, [pc, #428]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800189a:	4a6a      	ldr	r2, [pc, #424]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018a2:	4b68      	ldr	r3, [pc, #416]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b64      	ldr	r3, [pc, #400]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	4a63      	ldr	r2, [pc, #396]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80018be:	4b61      	ldr	r3, [pc, #388]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b5a      	ldr	r3, [pc, #360]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b56      	ldr	r3, [pc, #344]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a55      	ldr	r2, [pc, #340]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018f0:	f043 0302 	orr.w	r3, r3, #2
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b53      	ldr	r3, [pc, #332]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b4f      	ldr	r3, [pc, #316]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a4e      	ldr	r2, [pc, #312]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 800190c:	f043 0308 	orr.w	r3, r3, #8
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b4c      	ldr	r3, [pc, #304]	@ (8001a44 <MX_GPIO_Init+0x1e4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	2108      	movs	r1, #8
 8001922:	4849      	ldr	r0, [pc, #292]	@ (8001a48 <MX_GPIO_Init+0x1e8>)
 8001924:	f002 f9c8 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001928:	2201      	movs	r2, #1
 800192a:	2101      	movs	r1, #1
 800192c:	4847      	ldr	r0, [pc, #284]	@ (8001a4c <MX_GPIO_Init+0x1ec>)
 800192e:	f002 f9c3 	bl	8003cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001932:	2200      	movs	r2, #0
 8001934:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001938:	4845      	ldr	r0, [pc, #276]	@ (8001a50 <MX_GPIO_Init+0x1f0>)
 800193a:	f002 f9bd 	bl	8003cb8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800193e:	2308      	movs	r3, #8
 8001940:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	483c      	ldr	r0, [pc, #240]	@ (8001a48 <MX_GPIO_Init+0x1e8>)
 8001956:	f002 f813 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800195a:	2301      	movs	r3, #1
 800195c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800195e:	2301      	movs	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001962:	2300      	movs	r3, #0
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800196a:	f107 031c 	add.w	r3, r7, #28
 800196e:	4619      	mov	r1, r3
 8001970:	4836      	ldr	r0, [pc, #216]	@ (8001a4c <MX_GPIO_Init+0x1ec>)
 8001972:	f002 f805 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001976:	2308      	movs	r3, #8
 8001978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001986:	2305      	movs	r3, #5
 8001988:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800198a:	f107 031c 	add.w	r3, r7, #28
 800198e:	4619      	mov	r1, r3
 8001990:	482e      	ldr	r0, [pc, #184]	@ (8001a4c <MX_GPIO_Init+0x1ec>)
 8001992:	f001 fff5 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001996:	2301      	movs	r3, #1
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800199a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800199e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a0:	2300      	movs	r3, #0
 80019a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80019a4:	f107 031c 	add.w	r3, r7, #28
 80019a8:	4619      	mov	r1, r3
 80019aa:	482a      	ldr	r0, [pc, #168]	@ (8001a54 <MX_GPIO_Init+0x1f4>)
 80019ac:	f001 ffe8 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80019b0:	2304      	movs	r3, #4
 80019b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 031c 	add.w	r3, r7, #28
 80019c0:	4619      	mov	r1, r3
 80019c2:	4825      	ldr	r0, [pc, #148]	@ (8001a58 <MX_GPIO_Init+0x1f8>)
 80019c4:	f001 ffdc 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ce:	2302      	movs	r3, #2
 80019d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d6:	2300      	movs	r3, #0
 80019d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019da:	2305      	movs	r3, #5
 80019dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80019de:	f107 031c 	add.w	r3, r7, #28
 80019e2:	4619      	mov	r1, r3
 80019e4:	481c      	ldr	r0, [pc, #112]	@ (8001a58 <MX_GPIO_Init+0x1f8>)
 80019e6:	f001 ffcb 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80019ea:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80019ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019f0:	2301      	movs	r3, #1
 80019f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	f107 031c 	add.w	r3, r7, #28
 8001a00:	4619      	mov	r1, r3
 8001a02:	4813      	ldr	r0, [pc, #76]	@ (8001a50 <MX_GPIO_Init+0x1f0>)
 8001a04:	f001 ffbc 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a08:	2320      	movs	r3, #32
 8001a0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	@ (8001a50 <MX_GPIO_Init+0x1f0>)
 8001a1c:	f001 ffb0 	bl	8003980 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a20:	2302      	movs	r3, #2
 8001a22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a24:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001a28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a2e:	f107 031c 	add.w	r3, r7, #28
 8001a32:	4619      	mov	r1, r3
 8001a34:	4804      	ldr	r0, [pc, #16]	@ (8001a48 <MX_GPIO_Init+0x1e8>)
 8001a36:	f001 ffa3 	bl	8003980 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3730      	adds	r7, #48	@ 0x30
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40023800 	.word	0x40023800
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40020800 	.word	0x40020800
 8001a50:	40020c00 	.word	0x40020c00
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <Error_Handler+0x8>

08001a68 <get_random64>:
#include "debug_log.h"// for HAL_RNG
  // or your specific STM32 HAL header

extern RNG_HandleTypeDef hrng;

uint64_t get_random64(void) {
 8001a68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 8001a70:	1d3b      	adds	r3, r7, #4
 8001a72:	4619      	mov	r1, r3
 8001a74:	4810      	ldr	r0, [pc, #64]	@ (8001ab8 <get_random64+0x50>)
 8001a76:	f005 fe55 	bl	8007724 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 8001a7a:	463b      	mov	r3, r7
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	480e      	ldr	r0, [pc, #56]	@ (8001ab8 <get_random64+0x50>)
 8001a80:	f005 fe50 	bl	8007724 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2200      	movs	r2, #0
 8001a88:	469a      	mov	sl, r3
 8001a8a:	4693      	mov	fp, r2
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	4653      	mov	r3, sl
 8001a96:	2200      	movs	r2, #0
 8001a98:	6839      	ldr	r1, [r7, #0]
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	460c      	mov	r4, r1
 8001a9e:	4605      	mov	r5, r0
 8001aa0:	ea42 0804 	orr.w	r8, r2, r4
 8001aa4:	ea43 0905 	orr.w	r9, r3, r5
 8001aa8:	4642      	mov	r2, r8
 8001aaa:	464b      	mov	r3, r9
}
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ab8:	20000140 	.word	0x20000140

08001abc <masked_theta>:

// === THETA ===
void masked_theta(masked_uint64_t state[5][5]) {
 8001abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac0:	b0e0      	sub	sp, #384	@ 0x180
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ac8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001acc:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};
 8001ace:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 8001ad2:	22a0      	movs	r2, #160	@ 0xa0
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f00a fb9a 	bl	800c210 <memset>
    masked_uint64_t D[5] = {0};
 8001adc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001ae0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	23a0      	movs	r3, #160	@ 0xa0
 8001ae8:	461a      	mov	r2, r3
 8001aea:	2100      	movs	r1, #0
 8001aec:	f00a fb90 	bl	800c210 <memset>

    // === Compute C[x] = A[x][0] ^ A[x][1] ^ ... ^ A[x][4] ===
    for (int x = 0; x < 5; x++) {
 8001af0:	2300      	movs	r3, #0
 8001af2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001af6:	e04f      	b.n	8001b98 <masked_theta+0xdc>
        C[x] = state[x][0];
 8001af8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001afc:	4613      	mov	r3, r2
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	4413      	add	r3, r2
 8001b02:	015b      	lsls	r3, r3, #5
 8001b04:	461a      	mov	r2, r3
 8001b06:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b0a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	441a      	add	r2, r3
 8001b12:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001b16:	015b      	lsls	r3, r3, #5
 8001b18:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001b1c:	f107 0108 	add.w	r1, r7, #8
 8001b20:	440b      	add	r3, r1
 8001b22:	3bd0      	subs	r3, #208	@ 0xd0
 8001b24:	461c      	mov	r4, r3
 8001b26:	4615      	mov	r5, r2
 8001b28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 8001b34:	2301      	movs	r3, #1
 8001b36:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001b3a:	e024      	b.n	8001b86 <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 8001b3c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001b40:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001b44:	015b      	lsls	r3, r3, #5
 8001b46:	18d0      	adds	r0, r2, r3
 8001b48:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001b4c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001b50:	015b      	lsls	r3, r3, #5
 8001b52:	18d1      	adds	r1, r2, r3
 8001b54:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	015b      	lsls	r3, r3, #5
 8001b60:	461a      	mov	r2, r3
 8001b62:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001b66:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	441a      	add	r2, r3
 8001b6e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001b72:	015b      	lsls	r3, r3, #5
 8001b74:	4413      	add	r3, r2
 8001b76:	461a      	mov	r2, r3
 8001b78:	f000 ff59 	bl	8002a2e <masked_xor>
        for (int y = 1; y < 5; y++) {
 8001b7c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001b80:	3301      	adds	r3, #1
 8001b82:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001b86:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001b8a:	2b04      	cmp	r3, #4
 8001b8c:	ddd6      	ble.n	8001b3c <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 8001b8e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001b92:	3301      	adds	r3, #1
 8001b94:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001b98:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	ddab      	ble.n	8001af8 <masked_theta+0x3c>
        }
    }

    // === Compute D[x] = C[x-1] ^ ROTL(C[x+1], 1) ===
    for (int x = 0; x < 5; x++) {
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001ba6:	e06f      	b.n	8001c88 <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 8001ba8:	2300      	movs	r3, #0
 8001baa:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001bae:	e062      	b.n	8001c76 <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 8001bb0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001bb4:	1c59      	adds	r1, r3, #1
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8001d6c <masked_theta+0x2b0>)
 8001bb8:	fb83 2301 	smull	r2, r3, r3, r1
 8001bbc:	105a      	asrs	r2, r3, #1
 8001bbe:	17cb      	asrs	r3, r1, #31
 8001bc0:	1ad2      	subs	r2, r2, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	1aca      	subs	r2, r1, r3
 8001bca:	0092      	lsls	r2, r2, #2
 8001bcc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001bd8:	f107 0208 	add.w	r2, r7, #8
 8001bdc:	4413      	add	r3, r2
 8001bde:	3bd0      	subs	r3, #208	@ 0xd0
 8001be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be4:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> (64 - 1));
 8001be8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001bec:	0fda      	lsrs	r2, r3, #31
 8001bee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	607b      	str	r3, [r7, #4]
 8001bf8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001bfc:	0fda      	lsrs	r2, r3, #31
 8001bfe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	4313      	orrs	r3, r2
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c0c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 8001c10:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c14:	1d19      	adds	r1, r3, #4
 8001c16:	4b55      	ldr	r3, [pc, #340]	@ (8001d6c <masked_theta+0x2b0>)
 8001c18:	fb83 2301 	smull	r2, r3, r3, r1
 8001c1c:	105a      	asrs	r2, r3, #1
 8001c1e:	17cb      	asrs	r3, r1, #31
 8001c20:	1ad2      	subs	r2, r2, r3
 8001c22:	4613      	mov	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4413      	add	r3, r2
 8001c28:	1aca      	subs	r2, r1, r3
 8001c2a:	0092      	lsls	r2, r2, #2
 8001c2c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c30:	4413      	add	r3, r2
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001c38:	f107 0208 	add.w	r2, r7, #8
 8001c3c:	4413      	add	r3, r2
 8001c3e:	3bd0      	subs	r3, #208	@ 0xd0
 8001c40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c44:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001c48:	ea80 0a02 	eor.w	sl, r0, r2
 8001c4c:	ea81 0b03 	eor.w	fp, r1, r3
 8001c50:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001c54:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001c58:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c5c:	0099      	lsls	r1, r3, #2
 8001c5e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c62:	440b      	add	r3, r1
 8001c64:	00db      	lsls	r3, r3, #3
 8001c66:	4413      	add	r3, r2
 8001c68:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001c6c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c70:	3301      	adds	r3, #1
 8001c72:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001c76:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001c7a:	2b03      	cmp	r3, #3
 8001c7c:	dd98      	ble.n	8001bb0 <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 8001c7e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c82:	3301      	adds	r3, #1
 8001c84:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001c88:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001c8c:	2b04      	cmp	r3, #4
 8001c8e:	dd8b      	ble.n	8001ba8 <masked_theta+0xec>
        }
    }

    // === Apply D[x] to all lanes in column x ===
    for (int x = 0; x < 5; x++) {
 8001c90:	2300      	movs	r3, #0
 8001c92:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001c96:	e05e      	b.n	8001d56 <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001c9e:	e051      	b.n	8001d44 <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001ca6:	e044      	b.n	8001d32 <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 8001ca8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001cac:	4613      	mov	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	015b      	lsls	r3, r3, #5
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001cba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001cc6:	0099      	lsls	r1, r3, #2
 8001cc8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ccc:	440b      	add	r3, r1
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001cd6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001cda:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001cde:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001ce2:	0099      	lsls	r1, r3, #2
 8001ce4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001ce8:	440b      	add	r3, r1
 8001cea:	00db      	lsls	r3, r3, #3
 8001cec:	4413      	add	r3, r2
 8001cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001cf2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	015b      	lsls	r3, r3, #5
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001d04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	441a      	add	r2, r3
 8001d0c:	ea84 0800 	eor.w	r8, r4, r0
 8001d10:	ea85 0901 	eor.w	r9, r5, r1
 8001d14:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d18:	0099      	lsls	r1, r3, #2
 8001d1a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d1e:	440b      	add	r3, r1
 8001d20:	00db      	lsls	r3, r3, #3
 8001d22:	4413      	add	r3, r2
 8001d24:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8001d28:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001d32:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001d36:	2b03      	cmp	r3, #3
 8001d38:	ddb6      	ble.n	8001ca8 <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 8001d3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d3e:	3301      	adds	r3, #1
 8001d40:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001d44:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001d48:	2b04      	cmp	r3, #4
 8001d4a:	dda9      	ble.n	8001ca0 <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 8001d4c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d50:	3301      	adds	r3, #1
 8001d52:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001d56:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001d5a:	2b04      	cmp	r3, #4
 8001d5c:	dd9c      	ble.n	8001c98 <masked_theta+0x1dc>
            }
        }
    }
}
 8001d5e:	bf00      	nop
 8001d60:	bf00      	nop
 8001d62:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001d66:	46bd      	mov	sp, r7
 8001d68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d6c:	66666667 	.word	0x66666667

08001d70 <rol64>:
    { 62,  6, 43, 15, 61 },
    { 28, 55, 25, 21, 56 },
    { 27, 20, 39,  8, 14 }
};

static inline uint64_t rol64(uint64_t x, unsigned int n) {
 8001d70:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
    n %= 64;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d84:	607b      	str	r3, [r7, #4]
    return (x << n) | (x >> ((64 - n) % 64));
 8001d86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	f1a1 0620 	sub.w	r6, r1, #32
 8001d90:	f1c1 0020 	rsb	r0, r1, #32
 8001d94:	fa03 f901 	lsl.w	r9, r3, r1
 8001d98:	fa02 f606 	lsl.w	r6, r2, r6
 8001d9c:	ea49 0906 	orr.w	r9, r9, r6
 8001da0:	fa22 f000 	lsr.w	r0, r2, r0
 8001da4:	ea49 0900 	orr.w	r9, r9, r0
 8001da8:	fa02 f801 	lsl.w	r8, r2, r1
 8001dac:	6879      	ldr	r1, [r7, #4]
 8001dae:	4249      	negs	r1, r1
 8001db0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8001db4:	f1c1 0620 	rsb	r6, r1, #32
 8001db8:	f1a1 0020 	sub.w	r0, r1, #32
 8001dbc:	fa22 f401 	lsr.w	r4, r2, r1
 8001dc0:	fa03 f606 	lsl.w	r6, r3, r6
 8001dc4:	4334      	orrs	r4, r6
 8001dc6:	fa23 f000 	lsr.w	r0, r3, r0
 8001dca:	4304      	orrs	r4, r0
 8001dcc:	fa23 f501 	lsr.w	r5, r3, r1
 8001dd0:	ea48 0a04 	orr.w	sl, r8, r4
 8001dd4:	ea49 0b05 	orr.w	fp, r9, r5
 8001dd8:	4654      	mov	r4, sl
 8001dda:	465d      	mov	r5, fp
 8001ddc:	4622      	mov	r2, r4
 8001dde:	462b      	mov	r3, r5
}
 8001de0:	4610      	mov	r0, r2
 8001de2:	4619      	mov	r1, r3
 8001de4:	3710      	adds	r7, #16
 8001de6:	46bd      	mov	sp, r7
 8001de8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001dec:	4770      	bx	lr
	...

08001df0 <masked_rho>:


void masked_rho(masked_uint64_t state[5][5]) {
 8001df0:	b590      	push	{r4, r7, lr}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 5; x++) {
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61fb      	str	r3, [r7, #28]
 8001dfc:	e048      	b.n	8001e90 <masked_rho+0xa0>
        for (int y = 0; y < 5; y++) {
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61bb      	str	r3, [r7, #24]
 8001e02:	e03f      	b.n	8001e84 <masked_rho+0x94>
            uint8_t r = keccak_rho_offsets[x][y];
 8001e04:	4926      	ldr	r1, [pc, #152]	@ (8001ea0 <masked_rho+0xb0>)
 8001e06:	69fa      	ldr	r2, [r7, #28]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	4413      	add	r3, r2
 8001e0e:	18ca      	adds	r2, r1, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4413      	add	r3, r2
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	e02c      	b.n	8001e78 <masked_rho+0x88>
                uint64_t value = state[x][y].share[i];
 8001e1e:	69fa      	ldr	r2, [r7, #28]
 8001e20:	4613      	mov	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	4413      	add	r3, r2
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	461a      	mov	r2, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	441a      	add	r2, r3
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	0099      	lsls	r1, r3, #2
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	440b      	add	r3, r1
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4413      	add	r3, r2
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	e9c7 2302 	strd	r2, r3, [r7, #8]
                state[x][y].share[i] = rol64(value, r);
 8001e42:	7cf9      	ldrb	r1, [r7, #19]
 8001e44:	69fa      	ldr	r2, [r7, #28]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	015b      	lsls	r3, r3, #5
 8001e4e:	461a      	mov	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	189c      	adds	r4, r3, r2
 8001e54:	460a      	mov	r2, r1
 8001e56:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e5a:	f7ff ff89 	bl	8001d70 <rol64>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	460b      	mov	r3, r1
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	0088      	lsls	r0, r1, #2
 8001e66:	6979      	ldr	r1, [r7, #20]
 8001e68:	4401      	add	r1, r0
 8001e6a:	00c9      	lsls	r1, r1, #3
 8001e6c:	4421      	add	r1, r4
 8001e6e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	3301      	adds	r3, #1
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	ddcf      	ble.n	8001e1e <masked_rho+0x2e>
        for (int y = 0; y < 5; y++) {
 8001e7e:	69bb      	ldr	r3, [r7, #24]
 8001e80:	3301      	adds	r3, #1
 8001e82:	61bb      	str	r3, [r7, #24]
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2b04      	cmp	r3, #4
 8001e88:	ddbc      	ble.n	8001e04 <masked_rho+0x14>
    for (int x = 0; x < 5; x++) {
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b04      	cmp	r3, #4
 8001e94:	ddb3      	ble.n	8001dfe <masked_rho+0xe>
            }
        }
    }
}
 8001e96:	bf00      	nop
 8001e98:	bf00      	nop
 8001e9a:	3724      	adds	r7, #36	@ 0x24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}
 8001ea0:	0800d278 	.word	0x0800d278

08001ea4 <masked_pi>:

// === PI ===
void masked_pi(masked_uint64_t state[5][5])
{
 8001ea4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001ea8:	f5ad 7d5b 	sub.w	sp, sp, #876	@ 0x36c
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001eb2:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8001eb6:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    /* 1. Make a copy of the current masked state ------------------------- */
    for (int x = 0; x < 5; ++x)
 8001eb8:	2300      	movs	r3, #0
 8001eba:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001ebe:	e038      	b.n	8001f32 <masked_pi+0x8e>
        for (int y = 0; y < 5; ++y)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8001ec6:	e02b      	b.n	8001f20 <masked_pi+0x7c>
            tmp[x][y] = state[x][y];
 8001ec8:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001ecc:	4613      	mov	r3, r2
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	4413      	add	r3, r2
 8001ed2:	015b      	lsls	r3, r3, #5
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001eda:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	1899      	adds	r1, r3, r2
 8001ee2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001ee6:	f5a3 7056 	sub.w	r0, r3, #856	@ 0x358
 8001eea:	f8d7 2364 	ldr.w	r2, [r7, #868]	@ 0x364
 8001eee:	4613      	mov	r3, r2
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f8d7 2360 	ldr.w	r2, [r7, #864]	@ 0x360
 8001ef8:	4413      	add	r3, r2
 8001efa:	015b      	lsls	r3, r3, #5
 8001efc:	18c2      	adds	r2, r0, r3
 8001efe:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001f02:	015b      	lsls	r3, r3, #5
 8001f04:	440b      	add	r3, r1
 8001f06:	4614      	mov	r4, r2
 8001f08:	461d      	mov	r5, r3
 8001f0a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f12:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8001f16:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	f8c7 3360 	str.w	r3, [r7, #864]	@ 0x360
 8001f20:	f8d7 3360 	ldr.w	r3, [r7, #864]	@ 0x360
 8001f24:	2b04      	cmp	r3, #4
 8001f26:	ddcf      	ble.n	8001ec8 <masked_pi+0x24>
    for (int x = 0; x < 5; ++x)
 8001f28:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	f8c7 3364 	str.w	r3, [r7, #868]	@ 0x364
 8001f32:	f8d7 3364 	ldr.w	r3, [r7, #868]	@ 0x364
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	ddc2      	ble.n	8001ec0 <masked_pi+0x1c>

    /* 2. Apply the Keccak π permutation to every share ------------------- */
    for (int x = 0; x < 5; ++x)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001f40:	e051      	b.n	8001fe6 <masked_pi+0x142>
        for (int y = 0; y < 5; ++y) {
 8001f42:	2300      	movs	r3, #0
 8001f44:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8001f48:	e044      	b.n	8001fd4 <masked_pi+0x130>
            int new_x = y;                       /* u */
 8001f4a:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8001f4e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
            int new_y = (2 * x + 3 * y) % 5;     /* v */
 8001f52:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001f56:	0059      	lsls	r1, r3, #1
 8001f58:	f8d7 2358 	ldr.w	r2, [r7, #856]	@ 0x358
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	4413      	add	r3, r2
 8001f62:	18ca      	adds	r2, r1, r3
 8001f64:	4b72      	ldr	r3, [pc, #456]	@ (8002130 <masked_pi+0x28c>)
 8001f66:	fb83 1302 	smull	r1, r3, r3, r2
 8001f6a:	1059      	asrs	r1, r3, #1
 8001f6c:	17d3      	asrs	r3, r2, #31
 8001f6e:	1ac9      	subs	r1, r1, r3
 8001f70:	460b      	mov	r3, r1
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	440b      	add	r3, r1
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
            state[new_x][new_y] = tmp[x][y];     /* moves ALL shares   */
 8001f7c:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	015b      	lsls	r3, r3, #5
 8001f88:	461a      	mov	r2, r3
 8001f8a:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001f8e:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	441a      	add	r2, r3
 8001f96:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001f9a:	015b      	lsls	r3, r3, #5
 8001f9c:	18d0      	adds	r0, r2, r3
 8001f9e:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8001fa2:	f5a3 7156 	sub.w	r1, r3, #856	@ 0x358
 8001fa6:	f8d7 235c 	ldr.w	r2, [r7, #860]	@ 0x35c
 8001faa:	4613      	mov	r3, r2
 8001fac:	009b      	lsls	r3, r3, #2
 8001fae:	4413      	add	r3, r2
 8001fb0:	f8d7 2358 	ldr.w	r2, [r7, #856]	@ 0x358
 8001fb4:	4413      	add	r3, r2
 8001fb6:	015b      	lsls	r3, r3, #5
 8001fb8:	440b      	add	r3, r1
 8001fba:	4604      	mov	r4, r0
 8001fbc:	461d      	mov	r5, r3
 8001fbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fc6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8001fca:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8001fce:	3301      	adds	r3, #1
 8001fd0:	f8c7 3358 	str.w	r3, [r7, #856]	@ 0x358
 8001fd4:	f8d7 3358 	ldr.w	r3, [r7, #856]	@ 0x358
 8001fd8:	2b04      	cmp	r3, #4
 8001fda:	ddb6      	ble.n	8001f4a <masked_pi+0xa6>
    for (int x = 0; x < 5; ++x)
 8001fdc:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	f8c7 335c 	str.w	r3, [r7, #860]	@ 0x35c
 8001fe6:	f8d7 335c 	ldr.w	r3, [r7, #860]	@ 0x35c
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	dda9      	ble.n	8001f42 <masked_pi+0x9e>
        }

    /* 3. Re-align the mask: force XOR(shares) == share[0] ---------------- */
    for (int x = 0; x < 5; ++x)
 8001fee:	2300      	movs	r3, #0
 8001ff0:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8001ff4:	e08e      	b.n	8002114 <masked_pi+0x270>
        for (int y = 0; y < 5; ++y) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8001ffc:	e080      	b.n	8002100 <masked_pi+0x25c>
            uint64_t parity = 0;
 8001ffe:	f04f 0200 	mov.w	r2, #0
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	e9c7 23d2 	strd	r2, r3, [r7, #840]	@ 0x348
            for (int i = 0; i < MASKING_N; ++i)
 800200a:	2300      	movs	r3, #0
 800200c:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 8002010:	e023      	b.n	800205a <masked_pi+0x1b6>
                parity ^= state[x][y].share[i];  /* current XOR */
 8002012:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	015b      	lsls	r3, r3, #5
 800201e:	461a      	mov	r2, r3
 8002020:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002024:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	441a      	add	r2, r3
 800202c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002030:	0099      	lsls	r1, r3, #2
 8002032:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002036:	440b      	add	r3, r1
 8002038:	00db      	lsls	r3, r3, #3
 800203a:	4413      	add	r3, r2
 800203c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002040:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 8002044:	ea80 0a02 	eor.w	sl, r0, r2
 8002048:	ea81 0b03 	eor.w	fp, r1, r3
 800204c:	e9c7 abd2 	strd	sl, fp, [r7, #840]	@ 0x348
            for (int i = 0; i < MASKING_N; ++i)
 8002050:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 8002054:	3301      	adds	r3, #1
 8002056:	f8c7 3344 	str.w	r3, [r7, #836]	@ 0x344
 800205a:	f8d7 3344 	ldr.w	r3, [r7, #836]	@ 0x344
 800205e:	2b03      	cmp	r3, #3
 8002060:	ddd7      	ble.n	8002012 <masked_pi+0x16e>

            /* delta = XOR(shares) ⊕ share[0]  ==  XOR(all other shares)   */
            uint64_t delta = parity ^ state[x][y].share[0];
 8002062:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 8002066:	4613      	mov	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	4413      	add	r3, r2
 800206c:	015b      	lsls	r3, r3, #5
 800206e:	461a      	mov	r2, r3
 8002070:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 8002074:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	441a      	add	r2, r3
 800207c:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002080:	015b      	lsls	r3, r3, #5
 8002082:	4413      	add	r3, r2
 8002084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002088:	e9d7 01d2 	ldrd	r0, r1, [r7, #840]	@ 0x348
 800208c:	ea80 0402 	eor.w	r4, r0, r2
 8002090:	603c      	str	r4, [r7, #0]
 8002092:	404b      	eors	r3, r1
 8002094:	607b      	str	r3, [r7, #4]
 8002096:	e9d7 3400 	ldrd	r3, r4, [r7]
 800209a:	e9c7 34ce 	strd	r3, r4, [r7, #824]	@ 0x338

            /* flip the bits of share[0] that are present in the other
               shares so that the overall XOR collapses to share[0] again */
            state[x][y].share[0] ^= delta;
 800209e:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80020a2:	4613      	mov	r3, r2
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	4413      	add	r3, r2
 80020a8:	015b      	lsls	r3, r3, #5
 80020aa:	461a      	mov	r2, r3
 80020ac:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80020b0:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	441a      	add	r2, r3
 80020b8:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80020bc:	015b      	lsls	r3, r3, #5
 80020be:	4413      	add	r3, r2
 80020c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020c4:	f8d7 2354 	ldr.w	r2, [r7, #852]	@ 0x354
 80020c8:	4613      	mov	r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	4413      	add	r3, r2
 80020ce:	015b      	lsls	r3, r3, #5
 80020d0:	461a      	mov	r2, r3
 80020d2:	f507 735a 	add.w	r3, r7, #872	@ 0x368
 80020d6:	f5a3 7357 	sub.w	r3, r3, #860	@ 0x35c
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	189c      	adds	r4, r3, r2
 80020de:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	@ 0x338
 80020e2:	ea80 0802 	eor.w	r8, r0, r2
 80020e6:	ea81 0903 	eor.w	r9, r1, r3
 80020ea:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80020ee:	015b      	lsls	r3, r3, #5
 80020f0:	4423      	add	r3, r4
 80020f2:	e9c3 8900 	strd	r8, r9, [r3]
        for (int y = 0; y < 5; ++y) {
 80020f6:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 80020fa:	3301      	adds	r3, #1
 80020fc:	f8c7 3350 	str.w	r3, [r7, #848]	@ 0x350
 8002100:	f8d7 3350 	ldr.w	r3, [r7, #848]	@ 0x350
 8002104:	2b04      	cmp	r3, #4
 8002106:	f77f af7a 	ble.w	8001ffe <masked_pi+0x15a>
    for (int x = 0; x < 5; ++x)
 800210a:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 800210e:	3301      	adds	r3, #1
 8002110:	f8c7 3354 	str.w	r3, [r7, #852]	@ 0x354
 8002114:	f8d7 3354 	ldr.w	r3, [r7, #852]	@ 0x354
 8002118:	2b04      	cmp	r3, #4
 800211a:	f77f af6c 	ble.w	8001ff6 <masked_pi+0x152>
        }
}
 800211e:	bf00      	nop
 8002120:	bf00      	nop
 8002122:	f507 775b 	add.w	r7, r7, #876	@ 0x36c
 8002126:	46bd      	mov	sp, r7
 8002128:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	66666667 	.word	0x66666667

08002134 <masked_chi>:


// === CHI ===
void masked_chi(masked_uint64_t state[5][5],
                uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8002134:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002138:	b0be      	sub	sp, #248	@ 0xf8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
 800213e:	6039      	str	r1, [r7, #0]
    masked_uint64_t temp[5];

    for (int y = 0; y < 5; y++) {
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002146:	e0a7      	b.n	8002298 <masked_chi+0x164>
        for (int x = 0; x < 5; x++) {
 8002148:	2300      	movs	r3, #0
 800214a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800214e:	e020      	b.n	8002192 <masked_chi+0x5e>
            temp[x] = state[x][y];
 8002150:	f8d7 20f0 	ldr.w	r2, [r7, #240]	@ 0xf0
 8002154:	4613      	mov	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	015b      	lsls	r3, r3, #5
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	441a      	add	r2, r3
 8002162:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002166:	015b      	lsls	r3, r3, #5
 8002168:	33f8      	adds	r3, #248	@ 0xf8
 800216a:	443b      	add	r3, r7
 800216c:	f1a3 01b0 	sub.w	r1, r3, #176	@ 0xb0
 8002170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002174:	015b      	lsls	r3, r3, #5
 8002176:	4413      	add	r3, r2
 8002178:	460c      	mov	r4, r1
 800217a:	461d      	mov	r5, r3
 800217c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800217e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002180:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002184:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int x = 0; x < 5; x++) {
 8002188:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 800218c:	3301      	adds	r3, #1
 800218e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002192:	f8d7 30f0 	ldr.w	r3, [r7, #240]	@ 0xf0
 8002196:	2b04      	cmp	r3, #4
 8002198:	ddda      	ble.n	8002150 <masked_chi+0x1c>
        }

        for (int x = 0; x < 5; x++) {
 800219a:	2300      	movs	r3, #0
 800219c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80021a0:	e071      	b.n	8002286 <masked_chi+0x152>
            masked_uint64_t notA1;
            for (int i = 0; i < MASKING_N; i++) {
 80021a2:	2300      	movs	r3, #0
 80021a4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021a8:	e027      	b.n	80021fa <masked_chi+0xc6>
                notA1.share[i] = ~temp[(x + 1) % 5].share[i];
 80021aa:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80021ae:	1c59      	adds	r1, r3, #1
 80021b0:	4b3f      	ldr	r3, [pc, #252]	@ (80022b0 <masked_chi+0x17c>)
 80021b2:	fb83 2301 	smull	r2, r3, r3, r1
 80021b6:	105a      	asrs	r2, r3, #1
 80021b8:	17cb      	asrs	r3, r1, #31
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	1aca      	subs	r2, r1, r3
 80021c4:	0092      	lsls	r2, r2, #2
 80021c6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021ca:	4413      	add	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	33f8      	adds	r3, #248	@ 0xf8
 80021d0:	443b      	add	r3, r7
 80021d2:	3bb0      	subs	r3, #176	@ 0xb0
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	ea6f 0802 	mvn.w	r8, r2
 80021dc:	ea6f 0903 	mvn.w	r9, r3
 80021e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021e4:	00db      	lsls	r3, r3, #3
 80021e6:	33f8      	adds	r3, #248	@ 0xf8
 80021e8:	443b      	add	r3, r7
 80021ea:	3bf0      	subs	r3, #240	@ 0xf0
 80021ec:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 80021f0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021f4:	3301      	adds	r3, #1
 80021f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80021fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80021fe:	2b03      	cmp	r3, #3
 8002200:	ddd3      	ble.n	80021aa <masked_chi+0x76>
            }

            masked_uint64_t and_result;
            masked_and(&and_result,
                       &notA1,
                       &temp[(x + 2) % 5],
 8002202:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002206:	1c99      	adds	r1, r3, #2
 8002208:	4b29      	ldr	r3, [pc, #164]	@ (80022b0 <masked_chi+0x17c>)
 800220a:	fb83 2301 	smull	r2, r3, r3, r1
 800220e:	105a      	asrs	r2, r3, #1
 8002210:	17cb      	asrs	r3, r1, #31
 8002212:	1ad2      	subs	r2, r2, r3
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	1aca      	subs	r2, r1, r3
 800221c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8002220:	0153      	lsls	r3, r2, #5
 8002222:	18cc      	adds	r4, r1, r3
                       r[x][y]);
 8002224:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	01db      	lsls	r3, r3, #7
 8002230:	461a      	mov	r2, r3
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	441a      	add	r2, r3
 8002236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800223a:	01db      	lsls	r3, r3, #7
 800223c:	4413      	add	r3, r2
            masked_and(&and_result,
 800223e:	f107 0108 	add.w	r1, r7, #8
 8002242:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8002246:	4622      	mov	r2, r4
 8002248:	f000 fc1c 	bl	8002a84 <masked_and>

            masked_xor(&state[x][y], &temp[x], &and_result);
 800224c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	015b      	lsls	r3, r3, #5
 8002258:	461a      	mov	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	441a      	add	r2, r3
 800225e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002262:	015b      	lsls	r3, r3, #5
 8002264:	18d0      	adds	r0, r2, r3
 8002266:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 800226a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800226e:	015b      	lsls	r3, r3, #5
 8002270:	4413      	add	r3, r2
 8002272:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002276:	4619      	mov	r1, r3
 8002278:	f000 fbd9 	bl	8002a2e <masked_xor>
        for (int x = 0; x < 5; x++) {
 800227c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002280:	3301      	adds	r3, #1
 8002282:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002286:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800228a:	2b04      	cmp	r3, #4
 800228c:	dd89      	ble.n	80021a2 <masked_chi+0x6e>
    for (int y = 0; y < 5; y++) {
 800228e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002292:	3301      	adds	r3, #1
 8002294:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229c:	2b04      	cmp	r3, #4
 800229e:	f77f af53 	ble.w	8002148 <masked_chi+0x14>
        }
    }
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	37f8      	adds	r7, #248	@ 0xf8
 80022a8:	46bd      	mov	sp, r7
 80022aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80022ae:	bf00      	nop
 80022b0:	66666667 	.word	0x66666667

080022b4 <masked_iota>:
void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 80022b4:	b4b0      	push	{r4, r5, r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	e9c7 2300 	strd	r2, r3, [r7]
    state[0][0].share[0] ^= rc;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022ca:	ea80 0402 	eor.w	r4, r0, r2
 80022ce:	ea81 0503 	eor.w	r5, r1, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	e9c3 4500 	strd	r4, r5, [r3]
}
 80022d8:	bf00      	nop
 80022da:	3714      	adds	r7, #20
 80022dc:	46bd      	mov	sp, r7
 80022de:	bcb0      	pop	{r4, r5, r7}
 80022e0:	4770      	bx	lr
	...

080022e4 <print_recombined_state>:

// Helper function (add this)
void print_recombined_state(masked_uint64_t state[5][5], const char *label) {
 80022e4:	b5b0      	push	{r4, r5, r7, lr}
 80022e6:	b08c      	sub	sp, #48	@ 0x30
 80022e8:	af02      	add	r7, sp, #8
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
    printf("== %s (Recombined) ==\n", label);
 80022ee:	6839      	ldr	r1, [r7, #0]
 80022f0:	482a      	ldr	r0, [pc, #168]	@ (800239c <print_recombined_state+0xb8>)
 80022f2:	f009 fd79 	bl	800bde8 <iprintf>
    for (int x = 0; x < 5; x++) {
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80022fa:	e046      	b.n	800238a <print_recombined_state+0xa6>
        for (int y = 0; y < 5; y++) {
 80022fc:	2300      	movs	r3, #0
 80022fe:	623b      	str	r3, [r7, #32]
 8002300:	e03d      	b.n	800237e <print_recombined_state+0x9a>
            uint64_t val = 0;
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	f04f 0300 	mov.w	r3, #0
 800230a:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 800230e:	2300      	movs	r3, #0
 8002310:	617b      	str	r3, [r7, #20]
 8002312:	e01a      	b.n	800234a <print_recombined_state+0x66>
                val ^= state[x][y].share[i];
 8002314:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002316:	4613      	mov	r3, r2
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	4413      	add	r3, r2
 800231c:	015b      	lsls	r3, r3, #5
 800231e:	461a      	mov	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	441a      	add	r2, r3
 8002324:	6a3b      	ldr	r3, [r7, #32]
 8002326:	0099      	lsls	r1, r3, #2
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	440b      	add	r3, r1
 800232c:	00db      	lsls	r3, r3, #3
 800232e:	4413      	add	r3, r2
 8002330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002334:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002338:	ea80 0402 	eor.w	r4, r0, r2
 800233c:	ea81 0503 	eor.w	r5, r1, r3
 8002340:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 0; i < MASKING_N; i++) {
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3301      	adds	r3, #1
 8002348:	617b      	str	r3, [r7, #20]
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b03      	cmp	r3, #3
 800234e:	dde1      	ble.n	8002314 <print_recombined_state+0x30>
            }
            uint32_t hi = (uint32_t)(val >> 32);
 8002350:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002354:	f04f 0200 	mov.w	r2, #0
 8002358:	f04f 0300 	mov.w	r3, #0
 800235c:	000a      	movs	r2, r1
 800235e:	2300      	movs	r3, #0
 8002360:	4613      	mov	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
            uint32_t lo = (uint32_t)(val & 0xFFFFFFFF);
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	60fb      	str	r3, [r7, #12]
            printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	9300      	str	r3, [sp, #0]
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	6a3a      	ldr	r2, [r7, #32]
 8002370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002372:	480b      	ldr	r0, [pc, #44]	@ (80023a0 <print_recombined_state+0xbc>)
 8002374:	f009 fd38 	bl	800bde8 <iprintf>
        for (int y = 0; y < 5; y++) {
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	3301      	adds	r3, #1
 800237c:	623b      	str	r3, [r7, #32]
 800237e:	6a3b      	ldr	r3, [r7, #32]
 8002380:	2b04      	cmp	r3, #4
 8002382:	ddbe      	ble.n	8002302 <print_recombined_state+0x1e>
    for (int x = 0; x < 5; x++) {
 8002384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002386:	3301      	adds	r3, #1
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
 800238a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238c:	2b04      	cmp	r3, #4
 800238e:	ddb5      	ble.n	80022fc <print_recombined_state+0x18>
        }
    }
}
 8002390:	bf00      	nop
 8002392:	bf00      	nop
 8002394:	3728      	adds	r7, #40	@ 0x28
 8002396:	46bd      	mov	sp, r7
 8002398:	bdb0      	pop	{r4, r5, r7, pc}
 800239a:	bf00      	nop
 800239c:	0800d084 	.word	0x0800d084
 80023a0:	0800d09c 	.word	0x0800d09c

080023a4 <masked_keccak_round>:


void masked_keccak_round(masked_uint64_t state[5][5], uint64_t rc) {
 80023a4:	b580      	push	{r7, lr}
 80023a6:	f6ad 4d98 	subw	sp, sp, #3224	@ 0xc98
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	f607 4198 	addw	r1, r7, #3224	@ 0xc98
 80023b0:	f6a1 418c 	subw	r1, r1, #3212	@ 0xc8c
 80023b4:	6008      	str	r0, [r1, #0]
 80023b6:	f107 0108 	add.w	r1, r7, #8
 80023ba:	e941 2302 	strd	r2, r3, [r1, #-8]
    // Allocate fresh randomness for Chi step
    uint64_t r_chi[5][5][MASKING_N][MASKING_N];

    // Fill randomness for each (x, y) lane
    for (int x = 0; x < 5; x++) {
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 80023c4:	e020      	b.n	8002408 <masked_keccak_round+0x64>
        for (int y = 0; y < 5; y++) {
 80023c6:	2300      	movs	r3, #0
 80023c8:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 80023cc:	e013      	b.n	80023f6 <masked_keccak_round+0x52>
            fill_random_matrix(r_chi[x][y]);
 80023ce:	f107 0110 	add.w	r1, r7, #16
 80023d2:	f8d7 2c94 	ldr.w	r2, [r7, #3220]	@ 0xc94
 80023d6:	4613      	mov	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	f8d7 2c90 	ldr.w	r2, [r7, #3216]	@ 0xc90
 80023e0:	4413      	add	r3, r2
 80023e2:	01db      	lsls	r3, r3, #7
 80023e4:	440b      	add	r3, r1
 80023e6:	4618      	mov	r0, r3
 80023e8:	f000 fada 	bl	80029a0 <fill_random_matrix>
        for (int y = 0; y < 5; y++) {
 80023ec:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 80023f0:	3301      	adds	r3, #1
 80023f2:	f8c7 3c90 	str.w	r3, [r7, #3216]	@ 0xc90
 80023f6:	f8d7 3c90 	ldr.w	r3, [r7, #3216]	@ 0xc90
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	dde7      	ble.n	80023ce <masked_keccak_round+0x2a>
    for (int x = 0; x < 5; x++) {
 80023fe:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 8002402:	3301      	adds	r3, #1
 8002404:	f8c7 3c94 	str.w	r3, [r7, #3220]	@ 0xc94
 8002408:	f8d7 3c94 	ldr.w	r3, [r7, #3220]	@ 0xc94
 800240c:	2b04      	cmp	r3, #4
 800240e:	ddda      	ble.n	80023c6 <masked_keccak_round+0x22>
        }
    }

    // Apply the five Keccak round steps
    print_recombined_state(state, "Before Theta");
 8002410:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002414:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002418:	492d      	ldr	r1, [pc, #180]	@ (80024d0 <masked_keccak_round+0x12c>)
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	f7ff ff62 	bl	80022e4 <print_recombined_state>
    masked_theta(state);
 8002420:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002424:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002428:	6818      	ldr	r0, [r3, #0]
 800242a:	f7ff fb47 	bl	8001abc <masked_theta>

    print_recombined_state(state, "After Theta");
 800242e:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002432:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002436:	4927      	ldr	r1, [pc, #156]	@ (80024d4 <masked_keccak_round+0x130>)
 8002438:	6818      	ldr	r0, [r3, #0]
 800243a:	f7ff ff53 	bl	80022e4 <print_recombined_state>
    masked_rho(state);
 800243e:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002442:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002446:	6818      	ldr	r0, [r3, #0]
 8002448:	f7ff fcd2 	bl	8001df0 <masked_rho>

    print_recombined_state(state, "After Rho");
 800244c:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002450:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002454:	4920      	ldr	r1, [pc, #128]	@ (80024d8 <masked_keccak_round+0x134>)
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	f7ff ff44 	bl	80022e4 <print_recombined_state>
    masked_pi(state);
 800245c:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002460:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002464:	6818      	ldr	r0, [r3, #0]
 8002466:	f7ff fd1d 	bl	8001ea4 <masked_pi>

    print_recombined_state(state, "After Pi");
 800246a:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 800246e:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002472:	491a      	ldr	r1, [pc, #104]	@ (80024dc <masked_keccak_round+0x138>)
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	f7ff ff35 	bl	80022e4 <print_recombined_state>
    masked_chi(state, r_chi);
 800247a:	f107 0210 	add.w	r2, r7, #16
 800247e:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002482:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002486:	4611      	mov	r1, r2
 8002488:	6818      	ldr	r0, [r3, #0]
 800248a:	f7ff fe53 	bl	8002134 <masked_chi>

    print_recombined_state(state, "After Chi");
 800248e:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 8002492:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 8002496:	4912      	ldr	r1, [pc, #72]	@ (80024e0 <masked_keccak_round+0x13c>)
 8002498:	6818      	ldr	r0, [r3, #0]
 800249a:	f7ff ff23 	bl	80022e4 <print_recombined_state>
    masked_iota(state, rc);
 800249e:	f107 0308 	add.w	r3, r7, #8
 80024a2:	461a      	mov	r2, r3
 80024a4:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 80024a8:	f6a3 418c 	subw	r1, r3, #3212	@ 0xc8c
 80024ac:	e952 2302 	ldrd	r2, r3, [r2, #-8]
 80024b0:	6808      	ldr	r0, [r1, #0]
 80024b2:	f7ff feff 	bl	80022b4 <masked_iota>

    print_recombined_state(state, "After Iota");
 80024b6:	f607 4398 	addw	r3, r7, #3224	@ 0xc98
 80024ba:	f6a3 438c 	subw	r3, r3, #3212	@ 0xc8c
 80024be:	4909      	ldr	r1, [pc, #36]	@ (80024e4 <masked_keccak_round+0x140>)
 80024c0:	6818      	ldr	r0, [r3, #0]
 80024c2:	f7ff ff0f 	bl	80022e4 <print_recombined_state>

}
 80024c6:	bf00      	nop
 80024c8:	f607 4798 	addw	r7, r7, #3224	@ 0xc98
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	0800d0b8 	.word	0x0800d0b8
 80024d4:	0800d0c8 	.word	0x0800d0c8
 80024d8:	0800d0d4 	.word	0x0800d0d4
 80024dc:	0800d0e0 	.word	0x0800d0e0
 80024e0:	0800d0ec 	.word	0x0800d0ec
 80024e4:	0800d0f8 	.word	0x0800d0f8

080024e8 <masked_value_set>:



extern RNG_HandleTypeDef hrng;

void masked_value_set(masked_uint64_t *out, uint64_t value) {
 80024e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024ec:	b08c      	sub	sp, #48	@ 0x30
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6178      	str	r0, [r7, #20]
 80024f2:	e9c7 2302 	strd	r2, r3, [r7, #8]
    uint64_t acc = value;
 80024f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80024fa:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28


    for (int i = 0; i < MASKING_N - 1; i++) {
 80024fe:	2300      	movs	r3, #0
 8002500:	627b      	str	r3, [r7, #36]	@ 0x24
 8002502:	e03f      	b.n	8002584 <masked_value_set+0x9c>
        uint32_t lo = 0, hi = 0;
 8002504:	2300      	movs	r3, #0
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	2300      	movs	r3, #0
 800250a:	61bb      	str	r3, [r7, #24]
        	HAL_StatusTypeDef status1 = HAL_RNG_GenerateRandomNumber(&hrng, &lo);
 800250c:	f107 031c 	add.w	r3, r7, #28
 8002510:	4619      	mov	r1, r3
 8002512:	4823      	ldr	r0, [pc, #140]	@ (80025a0 <masked_value_set+0xb8>)
 8002514:	f005 f906 	bl	8007724 <HAL_RNG_GenerateRandomNumber>
 8002518:	4603      	mov	r3, r0
 800251a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
           HAL_StatusTypeDef status2 = HAL_RNG_GenerateRandomNumber(&hrng, &hi);
 800251e:	f107 0318 	add.w	r3, r7, #24
 8002522:	4619      	mov	r1, r3
 8002524:	481e      	ldr	r0, [pc, #120]	@ (80025a0 <masked_value_set+0xb8>)
 8002526:	f005 f8fd 	bl	8007724 <HAL_RNG_GenerateRandomNumber>
 800252a:	4603      	mov	r3, r0
 800252c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

        out->share[i] = ((uint64_t)hi << 32) | lo;
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	2200      	movs	r2, #0
 8002534:	603b      	str	r3, [r7, #0]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	f04f 0200 	mov.w	r2, #0
 800253c:	f04f 0300 	mov.w	r3, #0
 8002540:	6839      	ldr	r1, [r7, #0]
 8002542:	000b      	movs	r3, r1
 8002544:	2200      	movs	r2, #0
 8002546:	69f9      	ldr	r1, [r7, #28]
 8002548:	2000      	movs	r0, #0
 800254a:	460c      	mov	r4, r1
 800254c:	4605      	mov	r5, r0
 800254e:	ea42 0804 	orr.w	r8, r2, r4
 8002552:	ea43 0905 	orr.w	r9, r3, r5
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4413      	add	r3, r2
 800255e:	e9c3 8900 	strd	r8, r9, [r3]
        acc ^= out->share[i];
 8002562:	697a      	ldr	r2, [r7, #20]
 8002564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002566:	00db      	lsls	r3, r3, #3
 8002568:	4413      	add	r3, r2
 800256a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002572:	ea80 0a02 	eor.w	sl, r0, r2
 8002576:	ea81 0b03 	eor.w	fp, r1, r3
 800257a:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N - 1; i++) {
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	3301      	adds	r3, #1
 8002582:	627b      	str	r3, [r7, #36]	@ 0x24
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	2b02      	cmp	r3, #2
 8002588:	ddbc      	ble.n	8002504 <masked_value_set+0x1c>
    }

    out->share[MASKING_N - 1] = acc;
 800258a:	6979      	ldr	r1, [r7, #20]
 800258c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002590:	e9c1 2306 	strd	r2, r3, [r1, #24]
}
 8002594:	bf00      	nop
 8002596:	3730      	adds	r7, #48	@ 0x30
 8002598:	46bd      	mov	sp, r7
 800259a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800259e:	bf00      	nop
 80025a0:	20000140 	.word	0x20000140

080025a4 <masked_absorb>:
void masked_absorb(masked_uint64_t state[5][5], const uint8_t *input, size_t input_len) {
 80025a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025a8:	b0ce      	sub	sp, #312	@ 0x138
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80025b0:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025b4:	6018      	str	r0, [r3, #0]
 80025b6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80025ba:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80025be:	6019      	str	r1, [r3, #0]
 80025c0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80025c4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80025c8:	601a      	str	r2, [r3, #0]
    // Zero the state
    for (int x = 0; x < 5; x++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80025d0:	e039      	b.n	8002646 <masked_absorb+0xa2>
        for (int y = 0; y < 5; y++) {
 80025d2:	2300      	movs	r3, #0
 80025d4:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 80025d8:	e02c      	b.n	8002634 <masked_absorb+0x90>
            for (int i = 0; i < MASKING_N; i++) {
 80025da:	2300      	movs	r3, #0
 80025dc:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 80025e0:	e01f      	b.n	8002622 <masked_absorb+0x7e>
                state[x][y].share[i] = 0;
 80025e2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	015b      	lsls	r3, r3, #5
 80025ee:	461a      	mov	r2, r3
 80025f0:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80025f4:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	1899      	adds	r1, r3, r2
 80025fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002600:	009a      	lsls	r2, r3, #2
 8002602:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002606:	4413      	add	r3, r2
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	4419      	add	r1, r3
 800260c:	f04f 0200 	mov.w	r2, #0
 8002610:	f04f 0300 	mov.w	r3, #0
 8002614:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8002618:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800261c:	3301      	adds	r3, #1
 800261e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002622:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8002626:	2b03      	cmp	r3, #3
 8002628:	dddb      	ble.n	80025e2 <masked_absorb+0x3e>
        for (int y = 0; y < 5; y++) {
 800262a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800262e:	3301      	adds	r3, #1
 8002630:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8002634:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002638:	2b04      	cmp	r3, #4
 800263a:	ddce      	ble.n	80025da <masked_absorb+0x36>
    for (int x = 0; x < 5; x++) {
 800263c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002640:	3301      	adds	r3, #1
 8002642:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8002646:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800264a:	2b04      	cmp	r3, #4
 800264c:	ddc1      	ble.n	80025d2 <masked_absorb+0x2e>
            }
        }
    }

    size_t offset = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
    // Process complete blocks
    while (input_len >= KECCAK_RATE) {
 8002654:	e0b8      	b.n	80027c8 <masked_absorb+0x224>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800265c:	e098      	b.n	8002790 <masked_absorb+0x1ec>
            uint64_t lane = 0;
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	f04f 0300 	mov.w	r3, #0
 8002666:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            // Correctly load 8 bytes as a 64-bit value (little-endian)
            for (int j = 0; j < 8; j++) {
 800266a:	2300      	movs	r3, #0
 800266c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002670:	e03a      	b.n	80026e8 <masked_absorb+0x144>
                lane |= ((uint64_t)input[offset + i + j]) << (8 * j);
 8002672:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8002676:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800267a:	441a      	add	r2, r3
 800267c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002680:	441a      	add	r2, r3
 8002682:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002686:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4413      	add	r3, r2
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	b2db      	uxtb	r3, r3
 8002692:	2200      	movs	r2, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	617a      	str	r2, [r7, #20]
 8002698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	f1a3 0120 	sub.w	r1, r3, #32
 80026a2:	f1c3 0220 	rsb	r2, r3, #32
 80026a6:	6978      	ldr	r0, [r7, #20]
 80026a8:	fa00 f903 	lsl.w	r9, r0, r3
 80026ac:	6938      	ldr	r0, [r7, #16]
 80026ae:	fa00 f101 	lsl.w	r1, r0, r1
 80026b2:	ea49 0901 	orr.w	r9, r9, r1
 80026b6:	6939      	ldr	r1, [r7, #16]
 80026b8:	fa21 f202 	lsr.w	r2, r1, r2
 80026bc:	ea49 0902 	orr.w	r9, r9, r2
 80026c0:	693a      	ldr	r2, [r7, #16]
 80026c2:	fa02 f803 	lsl.w	r8, r2, r3
 80026c6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80026ca:	ea42 0108 	orr.w	r1, r2, r8
 80026ce:	60b9      	str	r1, [r7, #8]
 80026d0:	ea43 0309 	orr.w	r3, r3, r9
 80026d4:	60fb      	str	r3, [r7, #12]
 80026d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026da:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
            for (int j = 0; j < 8; j++) {
 80026de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e2:	3301      	adds	r3, #1
 80026e4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 80026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ec:	2b07      	cmp	r3, #7
 80026ee:	ddc0      	ble.n	8002672 <masked_absorb+0xce>
            }

            size_t x = (i / 8) % 5;
 80026f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	da00      	bge.n	80026fa <masked_absorb+0x156>
 80026f8:	3307      	adds	r3, #7
 80026fa:	10db      	asrs	r3, r3, #3
 80026fc:	4619      	mov	r1, r3
 80026fe:	4ba7      	ldr	r3, [pc, #668]	@ (800299c <masked_absorb+0x3f8>)
 8002700:	fb83 2301 	smull	r2, r3, r3, r1
 8002704:	105a      	asrs	r2, r3, #1
 8002706:	17cb      	asrs	r3, r1, #31
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	461a      	mov	r2, r3
 800270c:	0092      	lsls	r2, r2, #2
 800270e:	441a      	add	r2, r3
 8002710:	1a8b      	subs	r3, r1, r2
 8002712:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
            size_t y = (i / 8) / 5;
 8002716:	f8d7 1124 	ldr.w	r1, [r7, #292]	@ 0x124
 800271a:	4ba0      	ldr	r3, [pc, #640]	@ (800299c <masked_absorb+0x3f8>)
 800271c:	fb83 2301 	smull	r2, r3, r3, r1
 8002720:	111a      	asrs	r2, r3, #4
 8002722:	17cb      	asrs	r3, r1, #31
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4

            // Securely mask the input value
            masked_uint64_t masked_lane;
            masked_value_set(&masked_lane, lane);
 800272a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800272e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002732:	4608      	mov	r0, r1
 8002734:	f7ff fed8 	bl	80024e8 <masked_value_set>

            // XOR into the state
            masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8002738:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800273c:	4613      	mov	r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	4413      	add	r3, r2
 8002742:	015b      	lsls	r3, r3, #5
 8002744:	461a      	mov	r2, r3
 8002746:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800274a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	441a      	add	r2, r3
 8002752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	18d0      	adds	r0, r2, r3
 800275a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800275e:	4613      	mov	r3, r2
 8002760:	009b      	lsls	r3, r3, #2
 8002762:	4413      	add	r3, r2
 8002764:	015b      	lsls	r3, r3, #5
 8002766:	461a      	mov	r2, r3
 8002768:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800276c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	441a      	add	r2, r3
 8002774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002778:	015b      	lsls	r3, r3, #5
 800277a:	18d1      	adds	r1, r2, r3
 800277c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002780:	461a      	mov	r2, r3
 8002782:	f000 f954 	bl	8002a2e <masked_xor>
        for (int i = 0; i < KECCAK_RATE; i += 8) {
 8002786:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800278a:	3308      	adds	r3, #8
 800278c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002790:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002794:	2ba7      	cmp	r3, #167	@ 0xa7
 8002796:	f77f af62 	ble.w	800265e <masked_absorb+0xba>
        }

        // Apply the permutation
        masked_keccak_f1600(state);
 800279a:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 800279e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	f000 fae2 	bl	8002d6c <masked_keccak_f1600>

        offset += KECCAK_RATE;
 80027a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027ac:	33a8      	adds	r3, #168	@ 0xa8
 80027ae:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
        input_len -= KECCAK_RATE;
 80027b2:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027b6:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 80027ba:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3ba8      	subs	r3, #168	@ 0xa8
 80027c6:	6013      	str	r3, [r2, #0]
    while (input_len >= KECCAK_RATE) {
 80027c8:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027cc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2ba7      	cmp	r3, #167	@ 0xa7
 80027d4:	f63f af3f 	bhi.w	8002656 <masked_absorb+0xb2>
    }

    // Final block with padding
    uint8_t block[KECCAK_RATE] = {0};
 80027d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80027dc:	22a8      	movs	r2, #168	@ 0xa8
 80027de:	2100      	movs	r1, #0
 80027e0:	4618      	mov	r0, r3
 80027e2:	f009 fd15 	bl	800c210 <memset>
    memcpy(block, input + offset, input_len);
 80027e6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027ea:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80027f4:	18d1      	adds	r1, r2, r3
 80027f6:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 80027fa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80027fe:	f107 004c 	add.w	r0, r7, #76	@ 0x4c
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	f009 fd8f 	bl	800c326 <memcpy>
    block[input_len] ^= 0x06;  // Apply domain separation
 8002808:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800280c:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002810:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4413      	add	r3, r2
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f083 0306 	eor.w	r3, r3, #6
 800281e:	b2d9      	uxtb	r1, r3
 8002820:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8002824:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002828:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	460a      	mov	r2, r1
 8002832:	701a      	strb	r2, [r3, #0]
    block[KECCAK_RATE - 1] ^= 0x80;  // Apply padding
 8002834:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8002838:	f083 037f 	eor.w	r3, r3, #127	@ 0x7f
 800283c:	43db      	mvns	r3, r3
 800283e:	b2db      	uxtb	r3, r3
 8002840:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3

    // Process the final block
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 8002844:	2300      	movs	r3, #0
 8002846:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800284a:	e095      	b.n	8002978 <masked_absorb+0x3d4>
        uint64_t lane = 0;
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 8002858:	2300      	movs	r3, #0
 800285a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800285e:	e030      	b.n	80028c2 <masked_absorb+0x31e>
            lane |= ((uint64_t)block[i + j]) << (8 * j);
 8002860:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8002864:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002868:	4413      	add	r3, r2
 800286a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800286e:	f107 0218 	add.w	r2, r7, #24
 8002872:	4413      	add	r3, r2
 8002874:	f813 3cec 	ldrb.w	r3, [r3, #-236]
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2200      	movs	r2, #0
 800287c:	469a      	mov	sl, r3
 800287e:	4693      	mov	fp, r2
 8002880:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	f1a3 0120 	sub.w	r1, r3, #32
 800288a:	f1c3 0220 	rsb	r2, r3, #32
 800288e:	fa0b f503 	lsl.w	r5, fp, r3
 8002892:	fa0a f101 	lsl.w	r1, sl, r1
 8002896:	430d      	orrs	r5, r1
 8002898:	fa2a f202 	lsr.w	r2, sl, r2
 800289c:	4315      	orrs	r5, r2
 800289e:	fa0a f403 	lsl.w	r4, sl, r3
 80028a2:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 80028a6:	ea42 0104 	orr.w	r1, r2, r4
 80028aa:	6039      	str	r1, [r7, #0]
 80028ac:	432b      	orrs	r3, r5
 80028ae:	607b      	str	r3, [r7, #4]
 80028b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028b4:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
        for (int j = 0; j < 8 && (i + j) < KECCAK_RATE; j++) {  // Added bounds check
 80028b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028bc:	3301      	adds	r3, #1
 80028be:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80028c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028c6:	2b07      	cmp	r3, #7
 80028c8:	dc06      	bgt.n	80028d8 <masked_absorb+0x334>
 80028ca:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80028ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80028d2:	4413      	add	r3, r2
 80028d4:	2ba7      	cmp	r3, #167	@ 0xa7
 80028d6:	ddc3      	ble.n	8002860 <masked_absorb+0x2bc>
        }

        size_t x = (i / 8) % 5;
 80028d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80028dc:	2b00      	cmp	r3, #0
 80028de:	da00      	bge.n	80028e2 <masked_absorb+0x33e>
 80028e0:	3307      	adds	r3, #7
 80028e2:	10db      	asrs	r3, r3, #3
 80028e4:	4619      	mov	r1, r3
 80028e6:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <masked_absorb+0x3f8>)
 80028e8:	fb83 2301 	smull	r2, r3, r3, r1
 80028ec:	105a      	asrs	r2, r3, #1
 80028ee:	17cb      	asrs	r3, r1, #31
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	1aca      	subs	r2, r1, r3
 80028fa:	f8c7 2100 	str.w	r2, [r7, #256]	@ 0x100
        size_t y = (i / 8) / 5;
 80028fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002902:	4a26      	ldr	r2, [pc, #152]	@ (800299c <masked_absorb+0x3f8>)
 8002904:	fb82 1203 	smull	r1, r2, r2, r3
 8002908:	1112      	asrs	r2, r2, #4
 800290a:	17db      	asrs	r3, r3, #31
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc

        masked_uint64_t masked_lane;
        masked_value_set(&masked_lane, lane);
 8002912:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8002916:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 800291a:	4608      	mov	r0, r1
 800291c:	f7ff fde4 	bl	80024e8 <masked_value_set>
        masked_xor(&state[x][y], &state[x][y], &masked_lane);
 8002920:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002924:	4613      	mov	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	4413      	add	r3, r2
 800292a:	015b      	lsls	r3, r3, #5
 800292c:	461a      	mov	r2, r3
 800292e:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002932:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	441a      	add	r2, r3
 800293a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800293e:	015b      	lsls	r3, r3, #5
 8002940:	18d0      	adds	r0, r2, r3
 8002942:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	015b      	lsls	r3, r3, #5
 800294e:	461a      	mov	r2, r3
 8002950:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002954:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	441a      	add	r2, r3
 800295c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002960:	015b      	lsls	r3, r3, #5
 8002962:	4413      	add	r3, r2
 8002964:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002968:	4619      	mov	r1, r3
 800296a:	f000 f860 	bl	8002a2e <masked_xor>
    for (int i = 0; i < KECCAK_RATE; i += 8) {
 800296e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002972:	3308      	adds	r3, #8
 8002974:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8002978:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800297c:	2ba7      	cmp	r3, #167	@ 0xa7
 800297e:	f77f af65 	ble.w	800284c <masked_absorb+0x2a8>
    }

    // Final permutation
    masked_keccak_f1600(state);
 8002982:	f507 739c 	add.w	r3, r7, #312	@ 0x138
 8002986:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800298a:	6818      	ldr	r0, [r3, #0]
 800298c:	f000 f9ee 	bl	8002d6c <masked_keccak_f1600>
}
 8002990:	bf00      	nop
 8002992:	f507 779c 	add.w	r7, r7, #312	@ 0x138
 8002996:	46bd      	mov	sp, r7
 8002998:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800299c:	66666667 	.word	0x66666667

080029a0 <fill_random_matrix>:
               hi, lo, ehi, elo);
        return 1;
    }
}

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80029a8:	2300      	movs	r3, #0
 80029aa:	617b      	str	r3, [r7, #20]
 80029ac:	e037      	b.n	8002a1e <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	3301      	adds	r3, #1
 80029b2:	613b      	str	r3, [r7, #16]
 80029b4:	e020      	b.n	80029f8 <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 80029b6:	f7ff f857 	bl	8001a68 <get_random64>
 80029ba:	4603      	mov	r3, r0
 80029bc:	17da      	asrs	r2, r3, #31
 80029be:	461c      	mov	r4, r3
 80029c0:	4615      	mov	r5, r2
 80029c2:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	015b      	lsls	r3, r3, #5
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	441a      	add	r2, r3
 80029ce:	693b      	ldr	r3, [r7, #16]
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	18d1      	adds	r1, r2, r3
 80029d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029d8:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	015b      	lsls	r3, r3, #5
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	441a      	add	r2, r3
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	00db      	lsls	r3, r3, #3
 80029e8:	18d1      	adds	r1, r2, r3
 80029ea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029ee:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	3301      	adds	r3, #1
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d9db      	bls.n	80029b6 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	015b      	lsls	r3, r3, #5
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	441a      	add	r2, r3
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	18d1      	adds	r1, r2, r3
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b03      	cmp	r3, #3
 8002a22:	d9c4      	bls.n	80029ae <fill_random_matrix+0xe>
    }
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdb0      	pop	{r4, r5, r7, pc}

08002a2e <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 8002a2e:	b4b0      	push	{r4, r5, r7}
 8002a30:	b087      	sub	sp, #28
 8002a32:	af00      	add	r7, sp, #0
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
 8002a3e:	e018      	b.n	8002a72 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	00db      	lsls	r3, r3, #3
 8002a46:	4413      	add	r3, r2
 8002a48:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	00db      	lsls	r3, r3, #3
 8002a52:	4413      	add	r3, r2
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	ea80 0402 	eor.w	r4, r0, r2
 8002a5c:	ea81 0503 	eor.w	r5, r1, r3
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	00db      	lsls	r3, r3, #3
 8002a66:	4413      	add	r3, r2
 8002a68:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	3301      	adds	r3, #1
 8002a70:	617b      	str	r3, [r7, #20]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d9e3      	bls.n	8002a40 <masked_xor+0x12>
    }
}
 8002a78:	bf00      	nop
 8002a7a:	bf00      	nop
 8002a7c:	371c      	adds	r7, #28
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bcb0      	pop	{r4, r5, r7}
 8002a82:	4770      	bx	lr

08002a84 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 8002a84:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002a88:	b092      	sub	sp, #72	@ 0x48
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8002a8e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002a90:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a92:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 8002a94:	2300      	movs	r3, #0
 8002a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a98:	e018      	b.n	8002acc <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 8002a9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	4413      	add	r3, r2
 8002aa2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aaa:	00db      	lsls	r3, r3, #3
 8002aac:	4413      	add	r3, r2
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	ea00 0402 	and.w	r4, r0, r2
 8002ab6:	ea01 0503 	and.w	r5, r1, r3
 8002aba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002abc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8002ac6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ac8:	3301      	adds	r3, #1
 8002aca:	647b      	str	r3, [r7, #68]	@ 0x44
 8002acc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002ace:	2b03      	cmp	r3, #3
 8002ad0:	d9e3      	bls.n	8002a9a <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	643b      	str	r3, [r7, #64]	@ 0x40
 8002ad6:	e078      	b.n	8002bca <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ada:	3301      	adds	r3, #1
 8002adc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ade:	e06e      	b.n	8002bbe <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8002ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ae4:	00db      	lsls	r3, r3, #3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	ea00 0802 	and.w	r8, r0, r2
 8002afc:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8002b00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b18:	ea00 0a02 	and.w	sl, r0, r2
 8002b1c:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8002b20:	ea88 030a 	eor.w	r3, r8, sl
 8002b24:	603b      	str	r3, [r7, #0]
 8002b26:	ea89 030b 	eor.w	r3, r9, fp
 8002b2a:	607b      	str	r3, [r7, #4]
 8002b2c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b30:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8002b34:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b42:	015a      	lsls	r2, r3, #5
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	441a      	add	r2, r3
 8002b48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b52:	ea80 0402 	eor.w	r4, r0, r2
 8002b56:	61bc      	str	r4, [r7, #24]
 8002b58:	404b      	eors	r3, r1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	4413      	add	r3, r2
 8002b64:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002b68:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 8002b6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4413      	add	r3, r2
 8002b74:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	441a      	add	r2, r3
 8002b80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b82:	00db      	lsls	r3, r3, #3
 8002b84:	4413      	add	r3, r2
 8002b86:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b8a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002b8e:	ea80 0602 	eor.w	r6, r0, r2
 8002b92:	613e      	str	r6, [r7, #16]
 8002b94:	404b      	eors	r3, r1
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4063      	eors	r3, r4
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	406b      	eors	r3, r5
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002baa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	4413      	add	r3, r2
 8002bb0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002bb4:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8002bb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bba:	3301      	adds	r3, #1
 8002bbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002bbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bc0:	2b03      	cmp	r3, #3
 8002bc2:	d98d      	bls.n	8002ae0 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 8002bc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc6:	3301      	adds	r3, #1
 8002bc8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bcc:	2b03      	cmp	r3, #3
 8002bce:	d983      	bls.n	8002ad8 <masked_and+0x54>
        }
    }
}
 8002bd0:	bf00      	nop
 8002bd2:	bf00      	nop
 8002bd4:	3748      	adds	r7, #72	@ 0x48
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8002bdc:	4770      	bx	lr

08002bde <masked_recombine>:
#include "masked_types.h"
#include "masked_gadgets.h"
#include "stm32f4xx_hal.h"
#include <stdio.h>

uint64_t masked_recombine(const masked_uint64_t *m) {
 8002bde:	b4b0      	push	{r4, r5, r7}
 8002be0:	b087      	sub	sp, #28
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
    uint64_t result = 0;
 8002be6:	f04f 0000 	mov.w	r0, #0
 8002bea:	f04f 0100 	mov.w	r1, #0
 8002bee:	e9c7 0104 	strd	r0, r1, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	60f9      	str	r1, [r7, #12]
 8002bf6:	e010      	b.n	8002c1a <masked_recombine+0x3c>
        result ^= m->share[i];
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	68f9      	ldr	r1, [r7, #12]
 8002bfc:	00c9      	lsls	r1, r1, #3
 8002bfe:	4401      	add	r1, r0
 8002c00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c04:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002c08:	ea84 0200 	eor.w	r2, r4, r0
 8002c0c:	ea85 0301 	eor.w	r3, r5, r1
 8002c10:	e9c7 2304 	strd	r2, r3, [r7, #16]
    for (int i = 0; i < MASKING_N; i++) {
 8002c14:	68f9      	ldr	r1, [r7, #12]
 8002c16:	3101      	adds	r1, #1
 8002c18:	60f9      	str	r1, [r7, #12]
 8002c1a:	68f9      	ldr	r1, [r7, #12]
 8002c1c:	2903      	cmp	r1, #3
 8002c1e:	ddeb      	ble.n	8002bf8 <masked_recombine+0x1a>
    }
    return result;
 8002c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8002c24:	4610      	mov	r0, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	371c      	adds	r7, #28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bcb0      	pop	{r4, r5, r7}
 8002c2e:	4770      	bx	lr

08002c30 <debug_print_masked_state>:
void debug_print_masked_state(masked_uint64_t state[5][5]) {
 8002c30:	b5b0      	push	{r4, r5, r7, lr}
 8002c32:	b08e      	sub	sp, #56	@ 0x38
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
    printf("=== Full Masked State (Shares + Recombined) ===\n");
 8002c38:	4848      	ldr	r0, [pc, #288]	@ (8002d5c <debug_print_masked_state+0x12c>)
 8002c3a:	f009 f945 	bl	800bec8 <puts>
    for (int y = 0; y < 5; y++) {
 8002c3e:	2300      	movs	r3, #0
 8002c40:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c42:	e081      	b.n	8002d48 <debug_print_masked_state+0x118>
        for (int x = 0; x < 5; x++) {
 8002c44:	2300      	movs	r3, #0
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c48:	e078      	b.n	8002d3c <debug_print_masked_state+0x10c>
            printf("State[%d][%d]: ", x, y);
 8002c4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002c4c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c4e:	4844      	ldr	r0, [pc, #272]	@ (8002d60 <debug_print_masked_state+0x130>)
 8002c50:	f009 f8ca 	bl	800bde8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002c54:	2300      	movs	r3, #0
 8002c56:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c58:	e032      	b.n	8002cc0 <debug_print_masked_state+0x90>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 8002c5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	015b      	lsls	r3, r3, #5
 8002c64:	461a      	mov	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	441a      	add	r2, r3
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c6c:	0099      	lsls	r1, r3, #2
 8002c6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002c70:	440b      	add	r3, r1
 8002c72:	00db      	lsls	r3, r3, #3
 8002c74:	4413      	add	r3, r2
 8002c76:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	f04f 0300 	mov.w	r3, #0
 8002c82:	000a      	movs	r2, r1
 8002c84:	2300      	movs	r3, #0
 8002c86:	4613      	mov	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 8002c8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	4413      	add	r3, r2
 8002c92:	015b      	lsls	r3, r3, #5
 8002c94:	461a      	mov	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	441a      	add	r2, r3
 8002c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c9c:	0099      	lsls	r1, r3, #2
 8002c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ca0:	440b      	add	r3, r1
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	4613      	mov	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
                printf("S[%d]=0x%08X%08X ", i, hi, lo);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cb4:	482b      	ldr	r0, [pc, #172]	@ (8002d64 <debug_print_masked_state+0x134>)
 8002cb6:	f009 f897 	bl	800bde8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002cba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002cc2:	2b03      	cmp	r3, #3
 8002cc4:	ddc9      	ble.n	8002c5a <debug_print_masked_state+0x2a>
            }
            // Recombined value
            uint64_t val = 0;
 8002cc6:	f04f 0200 	mov.w	r2, #0
 8002cca:	f04f 0300 	mov.w	r3, #0
 8002cce:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e01a      	b.n	8002d0e <debug_print_masked_state+0xde>
                val ^= state[x][y].share[i];
 8002cd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cda:	4613      	mov	r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	4413      	add	r3, r2
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	441a      	add	r2, r3
 8002ce8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cea:	0099      	lsls	r1, r3, #2
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	440b      	add	r3, r1
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002cfc:	ea80 0402 	eor.w	r4, r0, r2
 8002d00:	ea81 0503 	eor.w	r5, r1, r3
 8002d04:	e9c7 4508 	strd	r4, r5, [r7, #32]
            for (int i = 0; i < MASKING_N; i++) {
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	61fb      	str	r3, [r7, #28]
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	2b03      	cmp	r3, #3
 8002d12:	dde1      	ble.n	8002cd8 <debug_print_masked_state+0xa8>
            }
            uint32_t r_hi = (uint32_t)(val >> 32);
 8002d14:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002d18:	f04f 0200 	mov.w	r2, #0
 8002d1c:	f04f 0300 	mov.w	r3, #0
 8002d20:	000a      	movs	r2, r1
 8002d22:	2300      	movs	r3, #0
 8002d24:	4613      	mov	r3, r2
 8002d26:	61bb      	str	r3, [r7, #24]
            uint32_t r_lo = (uint32_t)(val & 0xFFFFFFFF);
 8002d28:	6a3b      	ldr	r3, [r7, #32]
 8002d2a:	617b      	str	r3, [r7, #20]
            printf(" | R=0x%08X%08X\n", r_hi, r_lo);
 8002d2c:	697a      	ldr	r2, [r7, #20]
 8002d2e:	69b9      	ldr	r1, [r7, #24]
 8002d30:	480d      	ldr	r0, [pc, #52]	@ (8002d68 <debug_print_masked_state+0x138>)
 8002d32:	f009 f859 	bl	800bde8 <iprintf>
        for (int x = 0; x < 5; x++) {
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	3301      	adds	r3, #1
 8002d3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d3e:	2b04      	cmp	r3, #4
 8002d40:	dd83      	ble.n	8002c4a <debug_print_masked_state+0x1a>
    for (int y = 0; y < 5; y++) {
 8002d42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d44:	3301      	adds	r3, #1
 8002d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	f77f af7a 	ble.w	8002c44 <debug_print_masked_state+0x14>
        }
    }
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3738      	adds	r7, #56	@ 0x38
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bdb0      	pop	{r4, r5, r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	0800d104 	.word	0x0800d104
 8002d60:	0800d134 	.word	0x0800d134
 8002d64:	0800d144 	.word	0x0800d144
 8002d68:	0800d158 	.word	0x0800d158

08002d6c <masked_keccak_f1600>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

void masked_keccak_f1600(masked_uint64_t state[5][5]) {
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b090      	sub	sp, #64	@ 0x40
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
	debug_print_masked_state(state);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f7ff ff5b 	bl	8002c30 <debug_print_masked_state>
	printf("== Before masked_keccak_f1600 ==\n");
 8002d7a:	4854      	ldr	r0, [pc, #336]	@ (8002ecc <masked_keccak_f1600+0x160>)
 8002d7c:	f009 f8a4 	bl	800bec8 <puts>
	for (int x = 0; x < 5; x++) {
 8002d80:	2300      	movs	r3, #0
 8002d82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002d84:	e02f      	b.n	8002de6 <masked_keccak_f1600+0x7a>
	    for (int y = 0; y < 5; y++) {
 8002d86:	2300      	movs	r3, #0
 8002d88:	633b      	str	r3, [r7, #48]	@ 0x30
 8002d8a:	e026      	b.n	8002dda <masked_keccak_f1600+0x6e>
	        uint64_t recombined = masked_recombine(&state[x][y]);
 8002d8c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	015b      	lsls	r3, r3, #5
 8002d96:	461a      	mov	r2, r3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	441a      	add	r2, r3
 8002d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d9e:	015b      	lsls	r3, r3, #5
 8002da0:	4413      	add	r3, r2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff ff1b 	bl	8002bde <masked_recombine>
 8002da8:	e9c7 0104 	strd	r0, r1, [r7, #16]
	        uint32_t hi = (uint32_t)(recombined >> 32);
 8002dac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	000a      	movs	r2, r1
 8002dba:	2300      	movs	r3, #0
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
	        uint32_t lo = (uint32_t)(recombined & 0xFFFFFFFF);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	60bb      	str	r3, [r7, #8]
	        printf("State[%d][%d]: %08X%08X\n", x, y, hi, lo);
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	9300      	str	r3, [sp, #0]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dcc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002dce:	4840      	ldr	r0, [pc, #256]	@ (8002ed0 <masked_keccak_f1600+0x164>)
 8002dd0:	f009 f80a 	bl	800bde8 <iprintf>
	    for (int y = 0; y < 5; y++) {
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002dda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	ddd5      	ble.n	8002d8c <masked_keccak_f1600+0x20>
	for (int x = 0; x < 5; x++) {
 8002de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de2:	3301      	adds	r3, #1
 8002de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002de8:	2b04      	cmp	r3, #4
 8002dea:	ddcc      	ble.n	8002d86 <masked_keccak_f1600+0x1a>

	    }
	}


    for (int i = 0; i < 24; i++) {
 8002dec:	2300      	movs	r3, #0
 8002dee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002df0:	e00b      	b.n	8002e0a <masked_keccak_f1600+0x9e>
        masked_keccak_round(state, keccak_round_constants[i]);
 8002df2:	4a38      	ldr	r2, [pc, #224]	@ (8002ed4 <masked_keccak_f1600+0x168>)
 8002df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002df6:	00db      	lsls	r3, r3, #3
 8002df8:	4413      	add	r3, r2
 8002dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dfe:	6878      	ldr	r0, [r7, #4]
 8002e00:	f7ff fad0 	bl	80023a4 <masked_keccak_round>
    for (int i = 0; i < 24; i++) {
 8002e04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e06:	3301      	adds	r3, #1
 8002e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e0c:	2b17      	cmp	r3, #23
 8002e0e:	ddf0      	ble.n	8002df2 <masked_keccak_f1600+0x86>
    }
    debug_print_masked_state(state);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7ff ff0d 	bl	8002c30 <debug_print_masked_state>
    printf("== After masked_keccak_f1600 ==\n");
 8002e16:	4830      	ldr	r0, [pc, #192]	@ (8002ed8 <masked_keccak_f1600+0x16c>)
 8002e18:	f009 f856 	bl	800bec8 <puts>
    for (int x = 0; x < 5; x++) {
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e20:	e04b      	b.n	8002eba <masked_keccak_f1600+0x14e>
        for (int y = 0; y < 5; y++) {
 8002e22:	2300      	movs	r3, #0
 8002e24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e26:	e042      	b.n	8002eae <masked_keccak_f1600+0x142>
            printf("State[%d][%d]:", x, y);
 8002e28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e2c:	482b      	ldr	r0, [pc, #172]	@ (8002edc <masked_keccak_f1600+0x170>)
 8002e2e:	f008 ffdb 	bl	800bde8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002e32:	2300      	movs	r3, #0
 8002e34:	623b      	str	r3, [r7, #32]
 8002e36:	e031      	b.n	8002e9c <masked_keccak_f1600+0x130>
                uint32_t hi = (uint32_t)(state[x][y].share[i] >> 32);
 8002e38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	015b      	lsls	r3, r3, #5
 8002e42:	461a      	mov	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	441a      	add	r2, r3
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	0099      	lsls	r1, r3, #2
 8002e4c:	6a3b      	ldr	r3, [r7, #32]
 8002e4e:	440b      	add	r3, r1
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	4413      	add	r3, r2
 8002e54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	000a      	movs	r2, r1
 8002e62:	2300      	movs	r3, #0
 8002e64:	4613      	mov	r3, r2
 8002e66:	61fb      	str	r3, [r7, #28]
                uint32_t lo = (uint32_t)(state[x][y].share[i] & 0xFFFFFFFF);
 8002e68:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	4413      	add	r3, r2
 8002e70:	015b      	lsls	r3, r3, #5
 8002e72:	461a      	mov	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	441a      	add	r2, r3
 8002e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e7a:	0099      	lsls	r1, r3, #2
 8002e7c:	6a3b      	ldr	r3, [r7, #32]
 8002e7e:	440b      	add	r3, r1
 8002e80:	00db      	lsls	r3, r3, #3
 8002e82:	4413      	add	r3, r2
 8002e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
                printf(" %08lX%08lX", hi, lo);
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	69f9      	ldr	r1, [r7, #28]
 8002e90:	4813      	ldr	r0, [pc, #76]	@ (8002ee0 <masked_keccak_f1600+0x174>)
 8002e92:	f008 ffa9 	bl	800bde8 <iprintf>
            for (int i = 0; i < MASKING_N; i++) {
 8002e96:	6a3b      	ldr	r3, [r7, #32]
 8002e98:	3301      	adds	r3, #1
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	6a3b      	ldr	r3, [r7, #32]
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	ddca      	ble.n	8002e38 <masked_keccak_f1600+0xcc>
            }
            printf("\n");
 8002ea2:	200a      	movs	r0, #10
 8002ea4:	f008 ffb2 	bl	800be0c <putchar>
        for (int y = 0; y < 5; y++) {
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eaa:	3301      	adds	r3, #1
 8002eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002eb0:	2b04      	cmp	r3, #4
 8002eb2:	ddb9      	ble.n	8002e28 <masked_keccak_f1600+0xbc>
    for (int x = 0; x < 5; x++) {
 8002eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	2b04      	cmp	r3, #4
 8002ebe:	ddb0      	ble.n	8002e22 <masked_keccak_f1600+0xb6>
        }
    }
}
 8002ec0:	bf00      	nop
 8002ec2:	bf00      	nop
 8002ec4:	3738      	adds	r7, #56	@ 0x38
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	0800d16c 	.word	0x0800d16c
 8002ed0:	0800d190 	.word	0x0800d190
 8002ed4:	0800d298 	.word	0x0800d298
 8002ed8:	0800d1ac 	.word	0x0800d1ac
 8002edc:	0800d1cc 	.word	0x0800d1cc
 8002ee0:	0800d1dc 	.word	0x0800d1dc

08002ee4 <masked_sha3_512>:
#include "masked_squeeze.h"

#define SHA3_512_RATE 72             // SHA3-512 rate in bytes
#define SHA3_512_OUTPUT_SIZE 64      // SHA3-512 output in bytes

void masked_sha3_512(uint8_t *output, const uint8_t *input, size_t input_len) {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	f5ad 7d50 	sub.w	sp, sp, #832	@ 0x340
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002ef0:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002ef4:	6018      	str	r0, [r3, #0]
 8002ef6:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002efa:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002efe:	6019      	str	r1, [r3, #0]
 8002f00:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002f04:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8002f08:	601a      	str	r2, [r3, #0]
    masked_uint64_t state[5][5];

    // === Zero the state ===
    for (int x = 0; x < 5; x++) {
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002f10:	e036      	b.n	8002f80 <masked_sha3_512+0x9c>
        for (int y = 0; y < 5; y++) {
 8002f12:	2300      	movs	r3, #0
 8002f14:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002f18:	e029      	b.n	8002f6e <masked_sha3_512+0x8a>
            for (int i = 0; i < MASKING_N; i++) {
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002f20:	e01c      	b.n	8002f5c <masked_sha3_512+0x78>
                state[x][y].share[i] = 0;
 8002f22:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002f26:	f5a3 714c 	sub.w	r1, r3, #816	@ 0x330
 8002f2a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8002f2e:	4613      	mov	r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	4413      	add	r3, r2
 8002f34:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8002f38:	4413      	add	r3, r2
 8002f3a:	009a      	lsls	r2, r3, #2
 8002f3c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002f40:	4413      	add	r3, r2
 8002f42:	00db      	lsls	r3, r3, #3
 8002f44:	4419      	add	r1, r3
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8002f52:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002f56:	3301      	adds	r3, #1
 8002f58:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8002f5c:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	ddde      	ble.n	8002f22 <masked_sha3_512+0x3e>
        for (int y = 0; y < 5; y++) {
 8002f64:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002f68:	3301      	adds	r3, #1
 8002f6a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8002f6e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8002f72:	2b04      	cmp	r3, #4
 8002f74:	ddd1      	ble.n	8002f1a <masked_sha3_512+0x36>
    for (int x = 0; x < 5; x++) {
 8002f76:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8002f80:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8002f84:	2b04      	cmp	r3, #4
 8002f86:	ddc4      	ble.n	8002f12 <masked_sha3_512+0x2e>
            }
        }
    }

    // === Absorb input using masked absorb ===
    printf("Starting masked_absorb\n");
 8002f88:	4811      	ldr	r0, [pc, #68]	@ (8002fd0 <masked_sha3_512+0xec>)
 8002f8a:	f008 ff9d 	bl	800bec8 <puts>
    masked_absorb(state, input, input_len);
 8002f8e:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002f92:	f5a3 724f 	sub.w	r2, r3, #828	@ 0x33c
 8002f96:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002f9a:	f5a3 734e 	sub.w	r3, r3, #824	@ 0x338
 8002f9e:	f107 0010 	add.w	r0, r7, #16
 8002fa2:	6812      	ldr	r2, [r2, #0]
 8002fa4:	6819      	ldr	r1, [r3, #0]
 8002fa6:	f7ff fafd 	bl	80025a4 <masked_absorb>
    printf("Finished absorb\n");
 8002faa:	480a      	ldr	r0, [pc, #40]	@ (8002fd4 <masked_sha3_512+0xf0>)
 8002fac:	f008 ff8c 	bl	800bec8 <puts>

    // === Squeeze output using masked squeeze ===
    masked_squeeze(output, SHA3_512_OUTPUT_SIZE, state);
 8002fb0:	f107 0210 	add.w	r2, r7, #16
 8002fb4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8002fb8:	f5a3 734d 	sub.w	r3, r3, #820	@ 0x334
 8002fbc:	2140      	movs	r1, #64	@ 0x40
 8002fbe:	6818      	ldr	r0, [r3, #0]
 8002fc0:	f000 f80a 	bl	8002fd8 <masked_squeeze>
}
 8002fc4:	bf00      	nop
 8002fc6:	f507 7750 	add.w	r7, r7, #832	@ 0x340
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	0800d1e8 	.word	0x0800d1e8
 8002fd4:	0800d200 	.word	0x0800d200

08002fd8 <masked_squeeze>:

#include <stddef.h>

#define KECCAK_RATE 168  // SHAKE128 rate in bytes

void masked_squeeze(uint8_t *output, size_t output_len, masked_uint64_t state[5][5]) {
 8002fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fdc:	b08d      	sub	sp, #52	@ 0x34
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	60f8      	str	r0, [r7, #12]
 8002fe2:	60b9      	str	r1, [r7, #8]
 8002fe4:	607a      	str	r2, [r7, #4]
    size_t offset = 0;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    while (offset < output_len) {
 8002fea:	e075      	b.n	80030d8 <masked_squeeze+0x100>
        // Squeeze up to KECCAK_RATE bytes per iteration
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 8002fec:	2300      	movs	r3, #0
 8002fee:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ff0:	e064      	b.n	80030bc <masked_squeeze+0xe4>
            size_t x = (i / 8) % 5;
 8002ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	da00      	bge.n	8002ffa <masked_squeeze+0x22>
 8002ff8:	3307      	adds	r3, #7
 8002ffa:	10db      	asrs	r3, r3, #3
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4b3b      	ldr	r3, [pc, #236]	@ (80030ec <masked_squeeze+0x114>)
 8003000:	fb83 2301 	smull	r2, r3, r3, r1
 8003004:	105a      	asrs	r2, r3, #1
 8003006:	17cb      	asrs	r3, r1, #31
 8003008:	1ad2      	subs	r2, r2, r3
 800300a:	4613      	mov	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4413      	add	r3, r2
 8003010:	1aca      	subs	r2, r1, r3
 8003012:	61ba      	str	r2, [r7, #24]
            size_t y = (i / 8) / 5;
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	4a35      	ldr	r2, [pc, #212]	@ (80030ec <masked_squeeze+0x114>)
 8003018:	fb82 1203 	smull	r1, r2, r2, r3
 800301c:	1112      	asrs	r2, r2, #4
 800301e:	17db      	asrs	r3, r3, #31
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	617b      	str	r3, [r7, #20]
            size_t byte_pos = i % 8;
 8003024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003026:	425a      	negs	r2, r3
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	f002 0207 	and.w	r2, r2, #7
 8003030:	bf58      	it	pl
 8003032:	4253      	negpl	r3, r2
 8003034:	613b      	str	r3, [r7, #16]

            // Recombine shares to get the true output byte
            uint64_t lane = 0;
 8003036:	f04f 0200 	mov.w	r2, #0
 800303a:	f04f 0300 	mov.w	r3, #0
 800303e:	e9c7 2308 	strd	r2, r3, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e01a      	b.n	800307e <masked_squeeze+0xa6>
                lane ^= state[x][y].share[j];
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4613      	mov	r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	015b      	lsls	r3, r3, #5
 8003052:	461a      	mov	r2, r3
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	441a      	add	r2, r3
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	0099      	lsls	r1, r3, #2
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	440b      	add	r3, r1
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003068:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800306c:	ea80 0802 	eor.w	r8, r0, r2
 8003070:	ea81 0903 	eor.w	r9, r1, r3
 8003074:	e9c7 8908 	strd	r8, r9, [r7, #32]
            for (int j = 0; j < MASKING_N; j++) {
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	3301      	adds	r3, #1
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	2b03      	cmp	r3, #3
 8003082:	dde1      	ble.n	8003048 <masked_squeeze+0x70>
            }

            output[offset++] = (lane >> (8 * byte_pos)) & 0xFF;
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	00d9      	lsls	r1, r3, #3
 8003088:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800308c:	f1c1 0620 	rsb	r6, r1, #32
 8003090:	f1a1 0020 	sub.w	r0, r1, #32
 8003094:	fa22 f401 	lsr.w	r4, r2, r1
 8003098:	fa03 f606 	lsl.w	r6, r3, r6
 800309c:	4334      	orrs	r4, r6
 800309e:	fa23 f000 	lsr.w	r0, r3, r0
 80030a2:	4304      	orrs	r4, r0
 80030a4:	fa23 f501 	lsr.w	r5, r3, r1
 80030a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030ae:	68fa      	ldr	r2, [r7, #12]
 80030b0:	4413      	add	r3, r2
 80030b2:	b2e2      	uxtb	r2, r4
 80030b4:	701a      	strb	r2, [r3, #0]
        for (int i = 0; i < KECCAK_RATE && offset < output_len; i++) {
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	3301      	adds	r3, #1
 80030ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030be:	2ba7      	cmp	r3, #167	@ 0xa7
 80030c0:	dc03      	bgt.n	80030ca <masked_squeeze+0xf2>
 80030c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d393      	bcc.n	8002ff2 <masked_squeeze+0x1a>
        }

        // If we haven’t yet squeezed enough, permute again
        if (offset < output_len) {
 80030ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d202      	bcs.n	80030d8 <masked_squeeze+0x100>
            masked_keccak_f1600(state);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f7ff fe4a 	bl	8002d6c <masked_keccak_f1600>
    while (offset < output_len) {
 80030d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d385      	bcc.n	8002fec <masked_squeeze+0x14>
        }
    }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3734      	adds	r7, #52	@ 0x34
 80030e6:	46bd      	mov	sp, r7
 80030e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030ec:	66666667 	.word	0x66666667

080030f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b082      	sub	sp, #8
 80030f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	4b10      	ldr	r3, [pc, #64]	@ (800313c <HAL_MspInit+0x4c>)
 80030fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fe:	4a0f      	ldr	r2, [pc, #60]	@ (800313c <HAL_MspInit+0x4c>)
 8003100:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003104:	6453      	str	r3, [r2, #68]	@ 0x44
 8003106:	4b0d      	ldr	r3, [pc, #52]	@ (800313c <HAL_MspInit+0x4c>)
 8003108:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800310e:	607b      	str	r3, [r7, #4]
 8003110:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	603b      	str	r3, [r7, #0]
 8003116:	4b09      	ldr	r3, [pc, #36]	@ (800313c <HAL_MspInit+0x4c>)
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	4a08      	ldr	r2, [pc, #32]	@ (800313c <HAL_MspInit+0x4c>)
 800311c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003120:	6413      	str	r3, [r2, #64]	@ 0x40
 8003122:	4b06      	ldr	r3, [pc, #24]	@ (800313c <HAL_MspInit+0x4c>)
 8003124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	603b      	str	r3, [r7, #0]
 800312c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800312e:	2007      	movs	r0, #7
 8003130:	f000 fbe4 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003134:	bf00      	nop
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}
 800313c:	40023800 	.word	0x40023800

08003140 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b08a      	sub	sp, #40	@ 0x28
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	2200      	movs	r2, #0
 800314e:	601a      	str	r2, [r3, #0]
 8003150:	605a      	str	r2, [r3, #4]
 8003152:	609a      	str	r2, [r3, #8]
 8003154:	60da      	str	r2, [r3, #12]
 8003156:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	@ (80031c4 <HAL_I2C_MspInit+0x84>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d12c      	bne.n	80031bc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	4b18      	ldr	r3, [pc, #96]	@ (80031c8 <HAL_I2C_MspInit+0x88>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800316a:	4a17      	ldr	r2, [pc, #92]	@ (80031c8 <HAL_I2C_MspInit+0x88>)
 800316c:	f043 0302 	orr.w	r3, r3, #2
 8003170:	6313      	str	r3, [r2, #48]	@ 0x30
 8003172:	4b15      	ldr	r3, [pc, #84]	@ (80031c8 <HAL_I2C_MspInit+0x88>)
 8003174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	613b      	str	r3, [r7, #16]
 800317c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800317e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8003182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003184:	2312      	movs	r3, #18
 8003186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003188:	2301      	movs	r3, #1
 800318a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800318c:	2300      	movs	r3, #0
 800318e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003190:	2304      	movs	r3, #4
 8003192:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003194:	f107 0314 	add.w	r3, r7, #20
 8003198:	4619      	mov	r1, r3
 800319a:	480c      	ldr	r0, [pc, #48]	@ (80031cc <HAL_I2C_MspInit+0x8c>)
 800319c:	f000 fbf0 	bl	8003980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	4b08      	ldr	r3, [pc, #32]	@ (80031c8 <HAL_I2C_MspInit+0x88>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	4a07      	ldr	r2, [pc, #28]	@ (80031c8 <HAL_I2C_MspInit+0x88>)
 80031aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80031ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80031b0:	4b05      	ldr	r3, [pc, #20]	@ (80031c8 <HAL_I2C_MspInit+0x88>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80031bc:	bf00      	nop
 80031be:	3728      	adds	r7, #40	@ 0x28
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	40005400 	.word	0x40005400
 80031c8:	40023800 	.word	0x40023800
 80031cc:	40020400 	.word	0x40020400

080031d0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08e      	sub	sp, #56	@ 0x38
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031e8:	f107 0314 	add.w	r3, r7, #20
 80031ec:	2200      	movs	r2, #0
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	605a      	str	r2, [r3, #4]
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a31      	ldr	r2, [pc, #196]	@ (80032c0 <HAL_I2S_MspInit+0xf0>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d15a      	bne.n	80032b6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003200:	2301      	movs	r3, #1
 8003202:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003204:	23c0      	movs	r3, #192	@ 0xc0
 8003206:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003208:	2302      	movs	r3, #2
 800320a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800320c:	f107 0314 	add.w	r3, r7, #20
 8003210:	4618      	mov	r0, r3
 8003212:	f004 f91b 	bl	800744c <HAL_RCCEx_PeriphCLKConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800321c:	f7fe fc1e 	bl	8001a5c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003220:	2300      	movs	r3, #0
 8003222:	613b      	str	r3, [r7, #16]
 8003224:	4b27      	ldr	r3, [pc, #156]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 8003226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003228:	4a26      	ldr	r2, [pc, #152]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 800322a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003230:	4b24      	ldr	r3, [pc, #144]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
 8003240:	4b20      	ldr	r3, [pc, #128]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 8003242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003244:	4a1f      	ldr	r2, [pc, #124]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 8003246:	f043 0301 	orr.w	r3, r3, #1
 800324a:	6313      	str	r3, [r2, #48]	@ 0x30
 800324c:	4b1d      	ldr	r3, [pc, #116]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 800324e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003250:	f003 0301 	and.w	r3, r3, #1
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003258:	2300      	movs	r3, #0
 800325a:	60bb      	str	r3, [r7, #8]
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 800325e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003260:	4a18      	ldr	r2, [pc, #96]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	6313      	str	r3, [r2, #48]	@ 0x30
 8003268:	4b16      	ldr	r3, [pc, #88]	@ (80032c4 <HAL_I2S_MspInit+0xf4>)
 800326a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800326c:	f003 0304 	and.w	r3, r3, #4
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003274:	2310      	movs	r3, #16
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003278:	2302      	movs	r3, #2
 800327a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003280:	2300      	movs	r3, #0
 8003282:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003284:	2306      	movs	r3, #6
 8003286:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003288:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800328c:	4619      	mov	r1, r3
 800328e:	480e      	ldr	r0, [pc, #56]	@ (80032c8 <HAL_I2S_MspInit+0xf8>)
 8003290:	f000 fb76 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003294:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8003298:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800329a:	2302      	movs	r3, #2
 800329c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a2:	2300      	movs	r3, #0
 80032a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80032a6:	2306      	movs	r3, #6
 80032a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80032ae:	4619      	mov	r1, r3
 80032b0:	4806      	ldr	r0, [pc, #24]	@ (80032cc <HAL_I2S_MspInit+0xfc>)
 80032b2:	f000 fb65 	bl	8003980 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80032b6:	bf00      	nop
 80032b8:	3738      	adds	r7, #56	@ 0x38
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40003c00 	.word	0x40003c00
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020000 	.word	0x40020000
 80032cc:	40020800 	.word	0x40020800

080032d0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0b      	ldr	r2, [pc, #44]	@ (800330c <HAL_RNG_MspInit+0x3c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d10d      	bne.n	80032fe <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80032e2:	2300      	movs	r3, #0
 80032e4:	60fb      	str	r3, [r7, #12]
 80032e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003310 <HAL_RNG_MspInit+0x40>)
 80032e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032ea:	4a09      	ldr	r2, [pc, #36]	@ (8003310 <HAL_RNG_MspInit+0x40>)
 80032ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80032f2:	4b07      	ldr	r3, [pc, #28]	@ (8003310 <HAL_RNG_MspInit+0x40>)
 80032f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fa:	60fb      	str	r3, [r7, #12]
 80032fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	50060800 	.word	0x50060800
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b08a      	sub	sp, #40	@ 0x28
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800331c:	f107 0314 	add.w	r3, r7, #20
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a19      	ldr	r2, [pc, #100]	@ (8003398 <HAL_SPI_MspInit+0x84>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d12b      	bne.n	800338e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
 800333a:	4b18      	ldr	r3, [pc, #96]	@ (800339c <HAL_SPI_MspInit+0x88>)
 800333c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333e:	4a17      	ldr	r2, [pc, #92]	@ (800339c <HAL_SPI_MspInit+0x88>)
 8003340:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003344:	6453      	str	r3, [r2, #68]	@ 0x44
 8003346:	4b15      	ldr	r3, [pc, #84]	@ (800339c <HAL_SPI_MspInit+0x88>)
 8003348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800334a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334e:	613b      	str	r3, [r7, #16]
 8003350:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b11      	ldr	r3, [pc, #68]	@ (800339c <HAL_SPI_MspInit+0x88>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800335a:	4a10      	ldr	r2, [pc, #64]	@ (800339c <HAL_SPI_MspInit+0x88>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6313      	str	r3, [r2, #48]	@ 0x30
 8003362:	4b0e      	ldr	r3, [pc, #56]	@ (800339c <HAL_SPI_MspInit+0x88>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800336e:	23e0      	movs	r3, #224	@ 0xe0
 8003370:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003372:	2302      	movs	r3, #2
 8003374:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003376:	2300      	movs	r3, #0
 8003378:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337a:	2300      	movs	r3, #0
 800337c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800337e:	2305      	movs	r3, #5
 8003380:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003382:	f107 0314 	add.w	r3, r7, #20
 8003386:	4619      	mov	r1, r3
 8003388:	4805      	ldr	r0, [pc, #20]	@ (80033a0 <HAL_SPI_MspInit+0x8c>)
 800338a:	f000 faf9 	bl	8003980 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800338e:	bf00      	nop
 8003390:	3728      	adds	r7, #40	@ 0x28
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40013000 	.word	0x40013000
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020000 	.word	0x40020000

080033a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08a      	sub	sp, #40	@ 0x28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	f107 0314 	add.w	r3, r7, #20
 80033b0:	2200      	movs	r2, #0
 80033b2:	601a      	str	r2, [r3, #0]
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	609a      	str	r2, [r3, #8]
 80033b8:	60da      	str	r2, [r3, #12]
 80033ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a19      	ldr	r2, [pc, #100]	@ (8003428 <HAL_UART_MspInit+0x84>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d12b      	bne.n	800341e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033c6:	2300      	movs	r3, #0
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	4b18      	ldr	r3, [pc, #96]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ce:	4a17      	ldr	r2, [pc, #92]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80033d6:	4b15      	ldr	r3, [pc, #84]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033de:	613b      	str	r3, [r7, #16]
 80033e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	4b11      	ldr	r3, [pc, #68]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	4a10      	ldr	r2, [pc, #64]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033ec:	f043 0301 	orr.w	r3, r3, #1
 80033f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80033f2:	4b0e      	ldr	r3, [pc, #56]	@ (800342c <HAL_UART_MspInit+0x88>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	60fb      	str	r3, [r7, #12]
 80033fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80033fe:	230c      	movs	r3, #12
 8003400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003402:	2302      	movs	r3, #2
 8003404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003406:	2300      	movs	r3, #0
 8003408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800340a:	2303      	movs	r3, #3
 800340c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800340e:	2307      	movs	r3, #7
 8003410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003412:	f107 0314 	add.w	r3, r7, #20
 8003416:	4619      	mov	r1, r3
 8003418:	4805      	ldr	r0, [pc, #20]	@ (8003430 <HAL_UART_MspInit+0x8c>)
 800341a:	f000 fab1 	bl	8003980 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800341e:	bf00      	nop
 8003420:	3728      	adds	r7, #40	@ 0x28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40004400 	.word	0x40004400
 800342c:	40023800 	.word	0x40023800
 8003430:	40020000 	.word	0x40020000

08003434 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003434:	b480      	push	{r7}
 8003436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003438:	bf00      	nop
 800343a:	e7fd      	b.n	8003438 <NMI_Handler+0x4>

0800343c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003440:	bf00      	nop
 8003442:	e7fd      	b.n	8003440 <HardFault_Handler+0x4>

08003444 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003448:	bf00      	nop
 800344a:	e7fd      	b.n	8003448 <MemManage_Handler+0x4>

0800344c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003450:	bf00      	nop
 8003452:	e7fd      	b.n	8003450 <BusFault_Handler+0x4>

08003454 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003458:	bf00      	nop
 800345a:	e7fd      	b.n	8003458 <UsageFault_Handler+0x4>

0800345c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003460:	bf00      	nop
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr

0800346a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800346a:	b480      	push	{r7}
 800346c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800347c:	bf00      	nop
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800348a:	f000 f923 	bl	80036d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8003498:	4802      	ldr	r0, [pc, #8]	@ (80034a4 <OTG_FS_IRQHandler+0x10>)
 800349a:	f000 ff07 	bl	80042ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200005d4 	.word	0x200005d4

080034a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b086      	sub	sp, #24
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	60f8      	str	r0, [r7, #12]
 80034b0:	60b9      	str	r1, [r7, #8]
 80034b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
 80034b8:	e00a      	b.n	80034d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80034ba:	f3af 8000 	nop.w
 80034be:	4601      	mov	r1, r0
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	1c5a      	adds	r2, r3, #1
 80034c4:	60ba      	str	r2, [r7, #8]
 80034c6:	b2ca      	uxtb	r2, r1
 80034c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	3301      	adds	r3, #1
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	697a      	ldr	r2, [r7, #20]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	429a      	cmp	r2, r3
 80034d6:	dbf0      	blt.n	80034ba <_read+0x12>
  }

  return len;
 80034d8:	687b      	ldr	r3, [r7, #4]
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80034ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	370c      	adds	r7, #12
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr

080034fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80034fa:	b480      	push	{r7}
 80034fc:	b083      	sub	sp, #12
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
 8003502:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800350a:	605a      	str	r2, [r3, #4]
  return 0;
 800350c:	2300      	movs	r3, #0
}
 800350e:	4618      	mov	r0, r3
 8003510:	370c      	adds	r7, #12
 8003512:	46bd      	mov	sp, r7
 8003514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003518:	4770      	bx	lr

0800351a <_isatty>:

int _isatty(int file)
{
 800351a:	b480      	push	{r7}
 800351c:	b083      	sub	sp, #12
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003522:	2301      	movs	r3, #1
}
 8003524:	4618      	mov	r0, r3
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
	...

0800354c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b086      	sub	sp, #24
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003554:	4a14      	ldr	r2, [pc, #80]	@ (80035a8 <_sbrk+0x5c>)
 8003556:	4b15      	ldr	r3, [pc, #84]	@ (80035ac <_sbrk+0x60>)
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003560:	4b13      	ldr	r3, [pc, #76]	@ (80035b0 <_sbrk+0x64>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d102      	bne.n	800356e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003568:	4b11      	ldr	r3, [pc, #68]	@ (80035b0 <_sbrk+0x64>)
 800356a:	4a12      	ldr	r2, [pc, #72]	@ (80035b4 <_sbrk+0x68>)
 800356c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800356e:	4b10      	ldr	r3, [pc, #64]	@ (80035b0 <_sbrk+0x64>)
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	429a      	cmp	r2, r3
 800357a:	d207      	bcs.n	800358c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800357c:	f008 fea6 	bl	800c2cc <__errno>
 8003580:	4603      	mov	r3, r0
 8003582:	220c      	movs	r2, #12
 8003584:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003586:	f04f 33ff 	mov.w	r3, #4294967295
 800358a:	e009      	b.n	80035a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800358c:	4b08      	ldr	r3, [pc, #32]	@ (80035b0 <_sbrk+0x64>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003592:	4b07      	ldr	r3, [pc, #28]	@ (80035b0 <_sbrk+0x64>)
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4413      	add	r3, r2
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <_sbrk+0x64>)
 800359c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800359e:	68fb      	ldr	r3, [r7, #12]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3718      	adds	r7, #24
 80035a4:	46bd      	mov	sp, r7
 80035a6:	bd80      	pop	{r7, pc}
 80035a8:	20020000 	.word	0x20020000
 80035ac:	00000400 	.word	0x00000400
 80035b0:	200001f0 	.word	0x200001f0
 80035b4:	20000b00 	.word	0x20000b00

080035b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035bc:	4b06      	ldr	r3, [pc, #24]	@ (80035d8 <SystemInit+0x20>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c2:	4a05      	ldr	r2, [pc, #20]	@ (80035d8 <SystemInit+0x20>)
 80035c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80035c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80035cc:	bf00      	nop
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00

080035dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80035dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003614 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80035e0:	f7ff ffea 	bl	80035b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80035e4:	480c      	ldr	r0, [pc, #48]	@ (8003618 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035e6:	490d      	ldr	r1, [pc, #52]	@ (800361c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003620 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80035ec:	e002      	b.n	80035f4 <LoopCopyDataInit>

080035ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80035ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80035f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80035f2:	3304      	adds	r3, #4

080035f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80035f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80035f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80035f8:	d3f9      	bcc.n	80035ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80035fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003624 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80035fc:	4c0a      	ldr	r4, [pc, #40]	@ (8003628 <LoopFillZerobss+0x22>)
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003600:	e001      	b.n	8003606 <LoopFillZerobss>

08003602 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003602:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003604:	3204      	adds	r2, #4

08003606 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003606:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003608:	d3fb      	bcc.n	8003602 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800360a:	f008 fe65 	bl	800c2d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800360e:	f7fd fd3d 	bl	800108c <main>
  bx  lr    
 8003612:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003614:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003618:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800361c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8003620:	0800d3b4 	.word	0x0800d3b4
  ldr r2, =_sbss
 8003624:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8003628:	20000b00 	.word	0x20000b00

0800362c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800362c:	e7fe      	b.n	800362c <ADC_IRQHandler>
	...

08003630 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003634:	4b0e      	ldr	r3, [pc, #56]	@ (8003670 <HAL_Init+0x40>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a0d      	ldr	r2, [pc, #52]	@ (8003670 <HAL_Init+0x40>)
 800363a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800363e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003640:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_Init+0x40>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a0a      	ldr	r2, [pc, #40]	@ (8003670 <HAL_Init+0x40>)
 8003646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800364a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800364c:	4b08      	ldr	r3, [pc, #32]	@ (8003670 <HAL_Init+0x40>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <HAL_Init+0x40>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003656:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003658:	2003      	movs	r0, #3
 800365a:	f000 f94f 	bl	80038fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365e:	2000      	movs	r0, #0
 8003660:	f000 f808 	bl	8003674 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003664:	f7ff fd44 	bl	80030f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	40023c00 	.word	0x40023c00

08003674 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b082      	sub	sp, #8
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800367c:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_InitTick+0x54>)
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	4b12      	ldr	r3, [pc, #72]	@ (80036cc <HAL_InitTick+0x58>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	4619      	mov	r1, r3
 8003686:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800368a:	fbb3 f3f1 	udiv	r3, r3, r1
 800368e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003692:	4618      	mov	r0, r3
 8003694:	f000 f967 	bl	8003966 <HAL_SYSTICK_Config>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e00e      	b.n	80036c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b0f      	cmp	r3, #15
 80036a6:	d80a      	bhi.n	80036be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a8:	2200      	movs	r2, #0
 80036aa:	6879      	ldr	r1, [r7, #4]
 80036ac:	f04f 30ff 	mov.w	r0, #4294967295
 80036b0:	f000 f92f 	bl	8003912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b4:	4a06      	ldr	r2, [pc, #24]	@ (80036d0 <HAL_InitTick+0x5c>)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	e000      	b.n	80036c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3708      	adds	r7, #8
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}
 80036c8:	20000000 	.word	0x20000000
 80036cc:	20000008 	.word	0x20000008
 80036d0:	20000004 	.word	0x20000004

080036d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d8:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_IncTick+0x20>)
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	461a      	mov	r2, r3
 80036de:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <HAL_IncTick+0x24>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4413      	add	r3, r2
 80036e4:	4a04      	ldr	r2, [pc, #16]	@ (80036f8 <HAL_IncTick+0x24>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	20000008 	.word	0x20000008
 80036f8:	200001f4 	.word	0x200001f4

080036fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	af00      	add	r7, sp, #0
  return uwTick;
 8003700:	4b03      	ldr	r3, [pc, #12]	@ (8003710 <HAL_GetTick+0x14>)
 8003702:	681b      	ldr	r3, [r3, #0]
}
 8003704:	4618      	mov	r0, r3
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	200001f4 	.word	0x200001f4

08003714 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800371c:	f7ff ffee 	bl	80036fc <HAL_GetTick>
 8003720:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372c:	d005      	beq.n	800373a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800372e:	4b0a      	ldr	r3, [pc, #40]	@ (8003758 <HAL_Delay+0x44>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	461a      	mov	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800373a:	bf00      	nop
 800373c:	f7ff ffde 	bl	80036fc <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	68fa      	ldr	r2, [r7, #12]
 8003748:	429a      	cmp	r2, r3
 800374a:	d8f7      	bhi.n	800373c <HAL_Delay+0x28>
  {
  }
}
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	20000008 	.word	0x20000008

0800375c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800375c:	b480      	push	{r7}
 800375e:	b085      	sub	sp, #20
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f003 0307 	and.w	r3, r3, #7
 800376a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800376c:	4b0c      	ldr	r3, [pc, #48]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003778:	4013      	ands	r3, r2
 800377a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003784:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800378e:	4a04      	ldr	r2, [pc, #16]	@ (80037a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	60d3      	str	r3, [r2, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80037a8:	4b04      	ldr	r3, [pc, #16]	@ (80037bc <__NVIC_GetPriorityGrouping+0x18>)
 80037aa:	68db      	ldr	r3, [r3, #12]
 80037ac:	0a1b      	lsrs	r3, r3, #8
 80037ae:	f003 0307 	and.w	r3, r3, #7
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000ed00 	.word	0xe000ed00

080037c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	db0b      	blt.n	80037ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037d2:	79fb      	ldrb	r3, [r7, #7]
 80037d4:	f003 021f 	and.w	r2, r3, #31
 80037d8:	4907      	ldr	r1, [pc, #28]	@ (80037f8 <__NVIC_EnableIRQ+0x38>)
 80037da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037de:	095b      	lsrs	r3, r3, #5
 80037e0:	2001      	movs	r0, #1
 80037e2:	fa00 f202 	lsl.w	r2, r0, r2
 80037e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	e000e100 	.word	0xe000e100

080037fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037fc:	b480      	push	{r7}
 80037fe:	b083      	sub	sp, #12
 8003800:	af00      	add	r7, sp, #0
 8003802:	4603      	mov	r3, r0
 8003804:	6039      	str	r1, [r7, #0]
 8003806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380c:	2b00      	cmp	r3, #0
 800380e:	db0a      	blt.n	8003826 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	b2da      	uxtb	r2, r3
 8003814:	490c      	ldr	r1, [pc, #48]	@ (8003848 <__NVIC_SetPriority+0x4c>)
 8003816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800381a:	0112      	lsls	r2, r2, #4
 800381c:	b2d2      	uxtb	r2, r2
 800381e:	440b      	add	r3, r1
 8003820:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003824:	e00a      	b.n	800383c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	b2da      	uxtb	r2, r3
 800382a:	4908      	ldr	r1, [pc, #32]	@ (800384c <__NVIC_SetPriority+0x50>)
 800382c:	79fb      	ldrb	r3, [r7, #7]
 800382e:	f003 030f 	and.w	r3, r3, #15
 8003832:	3b04      	subs	r3, #4
 8003834:	0112      	lsls	r2, r2, #4
 8003836:	b2d2      	uxtb	r2, r2
 8003838:	440b      	add	r3, r1
 800383a:	761a      	strb	r2, [r3, #24]
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr
 8003848:	e000e100 	.word	0xe000e100
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	@ 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 0307 	and.w	r3, r3, #7
 8003862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	f1c3 0307 	rsb	r3, r3, #7
 800386a:	2b04      	cmp	r3, #4
 800386c:	bf28      	it	cs
 800386e:	2304      	movcs	r3, #4
 8003870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	3304      	adds	r3, #4
 8003876:	2b06      	cmp	r3, #6
 8003878:	d902      	bls.n	8003880 <NVIC_EncodePriority+0x30>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	3b03      	subs	r3, #3
 800387e:	e000      	b.n	8003882 <NVIC_EncodePriority+0x32>
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43da      	mvns	r2, r3
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	401a      	ands	r2, r3
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003898:	f04f 31ff 	mov.w	r1, #4294967295
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	fa01 f303 	lsl.w	r3, r1, r3
 80038a2:	43d9      	mvns	r1, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	4313      	orrs	r3, r2
         );
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3724      	adds	r7, #36	@ 0x24
 80038ae:	46bd      	mov	sp, r7
 80038b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b4:	4770      	bx	lr
	...

080038b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	3b01      	subs	r3, #1
 80038c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038c8:	d301      	bcc.n	80038ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038ca:	2301      	movs	r3, #1
 80038cc:	e00f      	b.n	80038ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ce:	4a0a      	ldr	r2, [pc, #40]	@ (80038f8 <SysTick_Config+0x40>)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038d6:	210f      	movs	r1, #15
 80038d8:	f04f 30ff 	mov.w	r0, #4294967295
 80038dc:	f7ff ff8e 	bl	80037fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038e0:	4b05      	ldr	r3, [pc, #20]	@ (80038f8 <SysTick_Config+0x40>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038e6:	4b04      	ldr	r3, [pc, #16]	@ (80038f8 <SysTick_Config+0x40>)
 80038e8:	2207      	movs	r2, #7
 80038ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	e000e010 	.word	0xe000e010

080038fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f7ff ff29 	bl	800375c <__NVIC_SetPriorityGrouping>
}
 800390a:	bf00      	nop
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	4603      	mov	r3, r0
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003924:	f7ff ff3e 	bl	80037a4 <__NVIC_GetPriorityGrouping>
 8003928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	68b9      	ldr	r1, [r7, #8]
 800392e:	6978      	ldr	r0, [r7, #20]
 8003930:	f7ff ff8e 	bl	8003850 <NVIC_EncodePriority>
 8003934:	4602      	mov	r2, r0
 8003936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f7ff ff5d 	bl	80037fc <__NVIC_SetPriority>
}
 8003942:	bf00      	nop
 8003944:	3718      	adds	r7, #24
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	4603      	mov	r3, r0
 8003952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003958:	4618      	mov	r0, r3
 800395a:	f7ff ff31 	bl	80037c0 <__NVIC_EnableIRQ>
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003966:	b580      	push	{r7, lr}
 8003968:	b082      	sub	sp, #8
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f7ff ffa2 	bl	80038b8 <SysTick_Config>
 8003974:	4603      	mov	r3, r0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003980:	b480      	push	{r7}
 8003982:	b089      	sub	sp, #36	@ 0x24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398a:	2300      	movs	r3, #0
 800398c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	e16b      	b.n	8003c74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800399c:	2201      	movs	r2, #1
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	697a      	ldr	r2, [r7, #20]
 80039ac:	4013      	ands	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	f040 815a 	bne.w	8003c6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b01      	cmp	r3, #1
 80039c4:	d005      	beq.n	80039d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ce:	2b02      	cmp	r3, #2
 80039d0:	d130      	bne.n	8003a34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 0201 	and.w	r2, r3, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f003 0303 	and.w	r3, r3, #3
 8003a3c:	2b03      	cmp	r3, #3
 8003a3e:	d017      	beq.n	8003a70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	2203      	movs	r2, #3
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	43db      	mvns	r3, r3
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	4013      	ands	r3, r2
 8003a56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005b      	lsls	r3, r3, #1
 8003a60:	fa02 f303 	lsl.w	r3, r2, r3
 8003a64:	69ba      	ldr	r2, [r7, #24]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	2b02      	cmp	r3, #2
 8003a7a:	d123      	bne.n	8003ac4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	08da      	lsrs	r2, r3, #3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	3208      	adds	r2, #8
 8003a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8a:	69fb      	ldr	r3, [r7, #28]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	009b      	lsls	r3, r3, #2
 8003a92:	220f      	movs	r2, #15
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	43db      	mvns	r3, r3
 8003a9a:	69ba      	ldr	r2, [r7, #24]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	691a      	ldr	r2, [r3, #16]
 8003aa4:	69fb      	ldr	r3, [r7, #28]
 8003aa6:	f003 0307 	and.w	r3, r3, #7
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	69ba      	ldr	r2, [r7, #24]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	08da      	lsrs	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3208      	adds	r2, #8
 8003abe:	69b9      	ldr	r1, [r7, #24]
 8003ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	2203      	movs	r2, #3
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f003 0203 	and.w	r2, r3, #3
 8003ae4:	69fb      	ldr	r3, [r7, #28]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69ba      	ldr	r2, [r7, #24]
 8003af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 80b4 	beq.w	8003c6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b06:	2300      	movs	r3, #0
 8003b08:	60fb      	str	r3, [r7, #12]
 8003b0a:	4b60      	ldr	r3, [pc, #384]	@ (8003c8c <HAL_GPIO_Init+0x30c>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0e:	4a5f      	ldr	r2, [pc, #380]	@ (8003c8c <HAL_GPIO_Init+0x30c>)
 8003b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b14:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b16:	4b5d      	ldr	r3, [pc, #372]	@ (8003c8c <HAL_GPIO_Init+0x30c>)
 8003b18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b22:	4a5b      	ldr	r2, [pc, #364]	@ (8003c90 <HAL_GPIO_Init+0x310>)
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	089b      	lsrs	r3, r3, #2
 8003b28:	3302      	adds	r3, #2
 8003b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	4013      	ands	r3, r2
 8003b44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a52      	ldr	r2, [pc, #328]	@ (8003c94 <HAL_GPIO_Init+0x314>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d02b      	beq.n	8003ba6 <HAL_GPIO_Init+0x226>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a51      	ldr	r2, [pc, #324]	@ (8003c98 <HAL_GPIO_Init+0x318>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d025      	beq.n	8003ba2 <HAL_GPIO_Init+0x222>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a50      	ldr	r2, [pc, #320]	@ (8003c9c <HAL_GPIO_Init+0x31c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d01f      	beq.n	8003b9e <HAL_GPIO_Init+0x21e>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a4f      	ldr	r2, [pc, #316]	@ (8003ca0 <HAL_GPIO_Init+0x320>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d019      	beq.n	8003b9a <HAL_GPIO_Init+0x21a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a4e      	ldr	r2, [pc, #312]	@ (8003ca4 <HAL_GPIO_Init+0x324>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d013      	beq.n	8003b96 <HAL_GPIO_Init+0x216>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a4d      	ldr	r2, [pc, #308]	@ (8003ca8 <HAL_GPIO_Init+0x328>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d00d      	beq.n	8003b92 <HAL_GPIO_Init+0x212>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a4c      	ldr	r2, [pc, #304]	@ (8003cac <HAL_GPIO_Init+0x32c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d007      	beq.n	8003b8e <HAL_GPIO_Init+0x20e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a4b      	ldr	r2, [pc, #300]	@ (8003cb0 <HAL_GPIO_Init+0x330>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d101      	bne.n	8003b8a <HAL_GPIO_Init+0x20a>
 8003b86:	2307      	movs	r3, #7
 8003b88:	e00e      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b8a:	2308      	movs	r3, #8
 8003b8c:	e00c      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b8e:	2306      	movs	r3, #6
 8003b90:	e00a      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b92:	2305      	movs	r3, #5
 8003b94:	e008      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b96:	2304      	movs	r3, #4
 8003b98:	e006      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e004      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003b9e:	2302      	movs	r3, #2
 8003ba0:	e002      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e000      	b.n	8003ba8 <HAL_GPIO_Init+0x228>
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f002 0203 	and.w	r2, r2, #3
 8003bae:	0092      	lsls	r2, r2, #2
 8003bb0:	4093      	lsls	r3, r2
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bb8:	4935      	ldr	r1, [pc, #212]	@ (8003c90 <HAL_GPIO_Init+0x310>)
 8003bba:	69fb      	ldr	r3, [r7, #28]
 8003bbc:	089b      	lsrs	r3, r3, #2
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	69ba      	ldr	r2, [r7, #24]
 8003bc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	43db      	mvns	r3, r3
 8003bd0:	69ba      	ldr	r2, [r7, #24]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003be2:	69ba      	ldr	r2, [r7, #24]
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bea:	4a32      	ldr	r2, [pc, #200]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bf0:	4b30      	ldr	r3, [pc, #192]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c14:	4a27      	ldr	r2, [pc, #156]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c1a:	4b26      	ldr	r3, [pc, #152]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	43db      	mvns	r3, r3
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	4013      	ands	r3, r2
 8003c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003c36:	69ba      	ldr	r2, [r7, #24]
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c3e:	4a1d      	ldr	r2, [pc, #116]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	43db      	mvns	r3, r3
 8003c4e:	69ba      	ldr	r2, [r7, #24]
 8003c50:	4013      	ands	r3, r2
 8003c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003c60:	69ba      	ldr	r2, [r7, #24]
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c68:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <HAL_GPIO_Init+0x334>)
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	3301      	adds	r3, #1
 8003c72:	61fb      	str	r3, [r7, #28]
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	2b0f      	cmp	r3, #15
 8003c78:	f67f ae90 	bls.w	800399c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3724      	adds	r7, #36	@ 0x24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	40013800 	.word	0x40013800
 8003c94:	40020000 	.word	0x40020000
 8003c98:	40020400 	.word	0x40020400
 8003c9c:	40020800 	.word	0x40020800
 8003ca0:	40020c00 	.word	0x40020c00
 8003ca4:	40021000 	.word	0x40021000
 8003ca8:	40021400 	.word	0x40021400
 8003cac:	40021800 	.word	0x40021800
 8003cb0:	40021c00 	.word	0x40021c00
 8003cb4:	40013c00 	.word	0x40013c00

08003cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	807b      	strh	r3, [r7, #2]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cc8:	787b      	ldrb	r3, [r7, #1]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d003      	beq.n	8003cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cce:	887a      	ldrh	r2, [r7, #2]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cd4:	e003      	b.n	8003cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	041a      	lsls	r2, r3, #16
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	619a      	str	r2, [r3, #24]
}
 8003cde:	bf00      	nop
 8003ce0:	370c      	adds	r7, #12
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr

08003cea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b086      	sub	sp, #24
 8003cee:	af02      	add	r7, sp, #8
 8003cf0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d101      	bne.n	8003cfc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e059      	b.n	8003db0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f007 fc3a 	bl	800b590 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2203      	movs	r2, #3
 8003d20:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003d2a:	d102      	bne.n	8003d32 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f004 fa53 	bl	80081e2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7c1a      	ldrb	r2, [r3, #16]
 8003d44:	f88d 2000 	strb.w	r2, [sp]
 8003d48:	3304      	adds	r3, #4
 8003d4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d4c:	f004 f9d4 	bl	80080f8 <USB_CoreInit>
 8003d50:	4603      	mov	r3, r0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d005      	beq.n	8003d62 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2202      	movs	r2, #2
 8003d5a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e026      	b.n	8003db0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2101      	movs	r1, #1
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f004 fa4b 	bl	8008204 <USB_SetCurrentMode>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d005      	beq.n	8003d80 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e017      	b.n	8003db0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6818      	ldr	r0, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	7c1a      	ldrb	r2, [r3, #16]
 8003d88:	f88d 2000 	strb.w	r2, [sp]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d90:	f004 fbee 	bl	8008570 <USB_HostInit>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2202      	movs	r2, #2
 8003d9e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e004      	b.n	8003db0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003db8:	b590      	push	{r4, r7, lr}
 8003dba:	b08b      	sub	sp, #44	@ 0x2c
 8003dbc:	af04      	add	r7, sp, #16
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	4608      	mov	r0, r1
 8003dc2:	4611      	mov	r1, r2
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	70fb      	strb	r3, [r7, #3]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70bb      	strb	r3, [r7, #2]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8003dd2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003dd4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d101      	bne.n	8003de4 <HAL_HCD_HC_Init+0x2c>
 8003de0:	2302      	movs	r3, #2
 8003de2:	e09d      	b.n	8003f20 <HAL_HCD_HC_Init+0x168>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8003dec:	78fa      	ldrb	r2, [r7, #3]
 8003dee:	6879      	ldr	r1, [r7, #4]
 8003df0:	4613      	mov	r3, r2
 8003df2:	011b      	lsls	r3, r3, #4
 8003df4:	1a9b      	subs	r3, r3, r2
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	440b      	add	r3, r1
 8003dfa:	3319      	adds	r3, #25
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003e00:	78fa      	ldrb	r2, [r7, #3]
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	4613      	mov	r3, r2
 8003e06:	011b      	lsls	r3, r3, #4
 8003e08:	1a9b      	subs	r3, r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	440b      	add	r3, r1
 8003e0e:	3314      	adds	r3, #20
 8003e10:	787a      	ldrb	r2, [r7, #1]
 8003e12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003e14:	78fa      	ldrb	r2, [r7, #3]
 8003e16:	6879      	ldr	r1, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	011b      	lsls	r3, r3, #4
 8003e1c:	1a9b      	subs	r3, r3, r2
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	440b      	add	r3, r1
 8003e22:	3315      	adds	r3, #21
 8003e24:	78fa      	ldrb	r2, [r7, #3]
 8003e26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003e28:	78fa      	ldrb	r2, [r7, #3]
 8003e2a:	6879      	ldr	r1, [r7, #4]
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	011b      	lsls	r3, r3, #4
 8003e30:	1a9b      	subs	r3, r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	440b      	add	r3, r1
 8003e36:	3326      	adds	r3, #38	@ 0x26
 8003e38:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8003e3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003e3e:	78fa      	ldrb	r2, [r7, #3]
 8003e40:	78bb      	ldrb	r3, [r7, #2]
 8003e42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e46:	b2d8      	uxtb	r0, r3
 8003e48:	6879      	ldr	r1, [r7, #4]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	1a9b      	subs	r3, r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	440b      	add	r3, r1
 8003e54:	3316      	adds	r3, #22
 8003e56:	4602      	mov	r2, r0
 8003e58:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fbc8 	bl	80045f4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8003e64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	da0a      	bge.n	8003e82 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	3317      	adds	r3, #23
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	701a      	strb	r2, [r3, #0]
 8003e80:	e009      	b.n	8003e96 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003e82:	78fa      	ldrb	r2, [r7, #3]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	3317      	adds	r3, #23
 8003e92:	2200      	movs	r2, #0
 8003e94:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f004 fccc 	bl	8008838 <USB_GetHostSpeed>
 8003ea0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8003ea2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8003eaa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d107      	bne.n	8003ec2 <HAL_HCD_HC_Init+0x10a>
 8003eb2:	693b      	ldr	r3, [r7, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d104      	bne.n	8003ec2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2bbc      	cmp	r3, #188	@ 0xbc
 8003ebc:	d901      	bls.n	8003ec2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8003ebe:	23bc      	movs	r3, #188	@ 0xbc
 8003ec0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3318      	adds	r3, #24
 8003ed2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8003ed6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8003ed8:	78fa      	ldrb	r2, [r7, #3]
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	b298      	uxth	r0, r3
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	4613      	mov	r3, r2
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	1a9b      	subs	r3, r3, r2
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	440b      	add	r3, r1
 8003eea:	3328      	adds	r3, #40	@ 0x28
 8003eec:	4602      	mov	r2, r0
 8003eee:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6818      	ldr	r0, [r3, #0]
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	b29b      	uxth	r3, r3
 8003ef8:	787c      	ldrb	r4, [r7, #1]
 8003efa:	78ba      	ldrb	r2, [r7, #2]
 8003efc:	78f9      	ldrb	r1, [r7, #3]
 8003efe:	9302      	str	r3, [sp, #8]
 8003f00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003f04:	9301      	str	r3, [sp, #4]
 8003f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003f0a:	9300      	str	r3, [sp, #0]
 8003f0c:	4623      	mov	r3, r4
 8003f0e:	f004 fcbb 	bl	8008888 <USB_HC_Init>
 8003f12:	4603      	mov	r3, r0
 8003f14:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd90      	pop	{r4, r7, pc}

08003f28 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b084      	sub	sp, #16
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003f34:	2300      	movs	r3, #0
 8003f36:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d101      	bne.n	8003f46 <HAL_HCD_HC_Halt+0x1e>
 8003f42:	2302      	movs	r3, #2
 8003f44:	e00f      	b.n	8003f66 <HAL_HCD_HC_Halt+0x3e>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	78fa      	ldrb	r2, [r7, #3]
 8003f54:	4611      	mov	r1, r2
 8003f56:	4618      	mov	r0, r3
 8003f58:	f005 f84d 	bl	8008ff6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8003f64:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f66:	4618      	mov	r0, r3
 8003f68:	3710      	adds	r7, #16
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	bd80      	pop	{r7, pc}
	...

08003f70 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b082      	sub	sp, #8
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	4608      	mov	r0, r1
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4603      	mov	r3, r0
 8003f80:	70fb      	strb	r3, [r7, #3]
 8003f82:	460b      	mov	r3, r1
 8003f84:	70bb      	strb	r3, [r7, #2]
 8003f86:	4613      	mov	r3, r2
 8003f88:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003f8a:	78fa      	ldrb	r2, [r7, #3]
 8003f8c:	6879      	ldr	r1, [r7, #4]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	1a9b      	subs	r3, r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	440b      	add	r3, r1
 8003f98:	3317      	adds	r3, #23
 8003f9a:	78ba      	ldrb	r2, [r7, #2]
 8003f9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003f9e:	78fa      	ldrb	r2, [r7, #3]
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	1a9b      	subs	r3, r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	3326      	adds	r3, #38	@ 0x26
 8003fae:	787a      	ldrb	r2, [r7, #1]
 8003fb0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003fb2:	7c3b      	ldrb	r3, [r7, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d114      	bne.n	8003fe2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003fb8:	78fa      	ldrb	r2, [r7, #3]
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	1a9b      	subs	r3, r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	332a      	adds	r3, #42	@ 0x2a
 8003fc8:	2203      	movs	r2, #3
 8003fca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003fcc:	78fa      	ldrb	r2, [r7, #3]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	011b      	lsls	r3, r3, #4
 8003fd4:	1a9b      	subs	r3, r3, r2
 8003fd6:	009b      	lsls	r3, r3, #2
 8003fd8:	440b      	add	r3, r1
 8003fda:	3319      	adds	r3, #25
 8003fdc:	7f3a      	ldrb	r2, [r7, #28]
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e009      	b.n	8003ff6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	332a      	adds	r3, #42	@ 0x2a
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003ff6:	787b      	ldrb	r3, [r7, #1]
 8003ff8:	2b03      	cmp	r3, #3
 8003ffa:	f200 8102 	bhi.w	8004202 <HAL_HCD_HC_SubmitRequest+0x292>
 8003ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8004004 <HAL_HCD_HC_SubmitRequest+0x94>)
 8004000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004004:	08004015 	.word	0x08004015
 8004008:	080041ed 	.word	0x080041ed
 800400c:	080040d9 	.word	0x080040d9
 8004010:	08004163 	.word	0x08004163
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8004014:	7c3b      	ldrb	r3, [r7, #16]
 8004016:	2b01      	cmp	r3, #1
 8004018:	f040 80f5 	bne.w	8004206 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800401c:	78bb      	ldrb	r3, [r7, #2]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d12d      	bne.n	800407e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8004022:	8b3b      	ldrh	r3, [r7, #24]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d109      	bne.n	800403c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8004028:	78fa      	ldrb	r2, [r7, #3]
 800402a:	6879      	ldr	r1, [r7, #4]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	440b      	add	r3, r1
 8004036:	333d      	adds	r3, #61	@ 0x3d
 8004038:	2201      	movs	r2, #1
 800403a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800403c:	78fa      	ldrb	r2, [r7, #3]
 800403e:	6879      	ldr	r1, [r7, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	1a9b      	subs	r3, r3, r2
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	440b      	add	r3, r1
 800404a:	333d      	adds	r3, #61	@ 0x3d
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10a      	bne.n	8004068 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004052:	78fa      	ldrb	r2, [r7, #3]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	011b      	lsls	r3, r3, #4
 800405a:	1a9b      	subs	r3, r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	332a      	adds	r3, #42	@ 0x2a
 8004062:	2200      	movs	r2, #0
 8004064:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8004066:	e0ce      	b.n	8004206 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004068:	78fa      	ldrb	r2, [r7, #3]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	1a9b      	subs	r3, r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	332a      	adds	r3, #42	@ 0x2a
 8004078:	2202      	movs	r2, #2
 800407a:	701a      	strb	r2, [r3, #0]
      break;
 800407c:	e0c3      	b.n	8004206 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800407e:	78fa      	ldrb	r2, [r7, #3]
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	011b      	lsls	r3, r3, #4
 8004086:	1a9b      	subs	r3, r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	331a      	adds	r3, #26
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	2b01      	cmp	r3, #1
 8004092:	f040 80b8 	bne.w	8004206 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8004096:	78fa      	ldrb	r2, [r7, #3]
 8004098:	6879      	ldr	r1, [r7, #4]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	333c      	adds	r3, #60	@ 0x3c
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040ac:	78fa      	ldrb	r2, [r7, #3]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	011b      	lsls	r3, r3, #4
 80040b4:	1a9b      	subs	r3, r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	332a      	adds	r3, #42	@ 0x2a
 80040bc:	2200      	movs	r2, #0
 80040be:	701a      	strb	r2, [r3, #0]
      break;
 80040c0:	e0a1      	b.n	8004206 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80040c2:	78fa      	ldrb	r2, [r7, #3]
 80040c4:	6879      	ldr	r1, [r7, #4]
 80040c6:	4613      	mov	r3, r2
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	1a9b      	subs	r3, r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	440b      	add	r3, r1
 80040d0:	332a      	adds	r3, #42	@ 0x2a
 80040d2:	2202      	movs	r2, #2
 80040d4:	701a      	strb	r2, [r3, #0]
      break;
 80040d6:	e096      	b.n	8004206 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80040d8:	78bb      	ldrb	r3, [r7, #2]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d120      	bne.n	8004120 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80040de:	78fa      	ldrb	r2, [r7, #3]
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	4613      	mov	r3, r2
 80040e4:	011b      	lsls	r3, r3, #4
 80040e6:	1a9b      	subs	r3, r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	440b      	add	r3, r1
 80040ec:	333d      	adds	r3, #61	@ 0x3d
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80040f4:	78fa      	ldrb	r2, [r7, #3]
 80040f6:	6879      	ldr	r1, [r7, #4]
 80040f8:	4613      	mov	r3, r2
 80040fa:	011b      	lsls	r3, r3, #4
 80040fc:	1a9b      	subs	r3, r3, r2
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	332a      	adds	r3, #42	@ 0x2a
 8004104:	2200      	movs	r2, #0
 8004106:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004108:	e07e      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	332a      	adds	r3, #42	@ 0x2a
 800411a:	2202      	movs	r2, #2
 800411c:	701a      	strb	r2, [r3, #0]
      break;
 800411e:	e073      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004120:	78fa      	ldrb	r2, [r7, #3]
 8004122:	6879      	ldr	r1, [r7, #4]
 8004124:	4613      	mov	r3, r2
 8004126:	011b      	lsls	r3, r3, #4
 8004128:	1a9b      	subs	r3, r3, r2
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	440b      	add	r3, r1
 800412e:	333c      	adds	r3, #60	@ 0x3c
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10a      	bne.n	800414c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004136:	78fa      	ldrb	r2, [r7, #3]
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	4613      	mov	r3, r2
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	1a9b      	subs	r3, r3, r2
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	440b      	add	r3, r1
 8004144:	332a      	adds	r3, #42	@ 0x2a
 8004146:	2200      	movs	r2, #0
 8004148:	701a      	strb	r2, [r3, #0]
      break;
 800414a:	e05d      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800414c:	78fa      	ldrb	r2, [r7, #3]
 800414e:	6879      	ldr	r1, [r7, #4]
 8004150:	4613      	mov	r3, r2
 8004152:	011b      	lsls	r3, r3, #4
 8004154:	1a9b      	subs	r3, r3, r2
 8004156:	009b      	lsls	r3, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	332a      	adds	r3, #42	@ 0x2a
 800415c:	2202      	movs	r2, #2
 800415e:	701a      	strb	r2, [r3, #0]
      break;
 8004160:	e052      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004162:	78bb      	ldrb	r3, [r7, #2]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d120      	bne.n	80041aa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004168:	78fa      	ldrb	r2, [r7, #3]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	1a9b      	subs	r3, r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	333d      	adds	r3, #61	@ 0x3d
 8004178:	781b      	ldrb	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800417e:	78fa      	ldrb	r2, [r7, #3]
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	4613      	mov	r3, r2
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	1a9b      	subs	r3, r3, r2
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	440b      	add	r3, r1
 800418c:	332a      	adds	r3, #42	@ 0x2a
 800418e:	2200      	movs	r2, #0
 8004190:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004192:	e039      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004194:	78fa      	ldrb	r2, [r7, #3]
 8004196:	6879      	ldr	r1, [r7, #4]
 8004198:	4613      	mov	r3, r2
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	1a9b      	subs	r3, r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	332a      	adds	r3, #42	@ 0x2a
 80041a4:	2202      	movs	r2, #2
 80041a6:	701a      	strb	r2, [r3, #0]
      break;
 80041a8:	e02e      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	333c      	adds	r3, #60	@ 0x3c
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	332a      	adds	r3, #42	@ 0x2a
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
      break;
 80041d4:	e018      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	332a      	adds	r3, #42	@ 0x2a
 80041e6:	2202      	movs	r2, #2
 80041e8:	701a      	strb	r2, [r3, #0]
      break;
 80041ea:	e00d      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	332a      	adds	r3, #42	@ 0x2a
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
      break;
 8004200:	e002      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8004202:	bf00      	nop
 8004204:	e000      	b.n	8004208 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8004206:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8004208:	78fa      	ldrb	r2, [r7, #3]
 800420a:	6879      	ldr	r1, [r7, #4]
 800420c:	4613      	mov	r3, r2
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	1a9b      	subs	r3, r3, r2
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	440b      	add	r3, r1
 8004216:	332c      	adds	r3, #44	@ 0x2c
 8004218:	697a      	ldr	r2, [r7, #20]
 800421a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800421c:	78fa      	ldrb	r2, [r7, #3]
 800421e:	8b39      	ldrh	r1, [r7, #24]
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4613      	mov	r3, r2
 8004224:	011b      	lsls	r3, r3, #4
 8004226:	1a9b      	subs	r3, r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4403      	add	r3, r0
 800422c:	3334      	adds	r3, #52	@ 0x34
 800422e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334c      	adds	r3, #76	@ 0x4c
 8004240:	2200      	movs	r2, #0
 8004242:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004244:	78fa      	ldrb	r2, [r7, #3]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	4613      	mov	r3, r2
 800424a:	011b      	lsls	r3, r3, #4
 800424c:	1a9b      	subs	r3, r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	440b      	add	r3, r1
 8004252:	3338      	adds	r3, #56	@ 0x38
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	6879      	ldr	r1, [r7, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	011b      	lsls	r3, r3, #4
 8004260:	1a9b      	subs	r3, r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	440b      	add	r3, r1
 8004266:	3315      	adds	r3, #21
 8004268:	78fa      	ldrb	r2, [r7, #3]
 800426a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800426c:	78fa      	ldrb	r2, [r7, #3]
 800426e:	6879      	ldr	r1, [r7, #4]
 8004270:	4613      	mov	r3, r2
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	440b      	add	r3, r1
 800427a:	334d      	adds	r3, #77	@ 0x4d
 800427c:	2200      	movs	r2, #0
 800427e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6818      	ldr	r0, [r3, #0]
 8004284:	78fa      	ldrb	r2, [r7, #3]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	3310      	adds	r3, #16
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	1d19      	adds	r1, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	799b      	ldrb	r3, [r3, #6]
 800429a:	461a      	mov	r2, r3
 800429c:	f004 fc20 	bl	8008ae0 <USB_HC_StartXfer>
 80042a0:	4603      	mov	r3, r0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop

080042ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f004 f914 	bl	80084f0 <USB_GetMode>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	f040 80fb 	bne.w	80044c6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4618      	mov	r0, r3
 80042d6:	f004 f8d7 	bl	8008488 <USB_ReadInterrupts>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f000 80f1 	beq.w	80044c4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f004 f8ce 	bl	8008488 <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80042f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042f6:	d104      	bne.n	8004302 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004300:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4618      	mov	r0, r3
 8004308:	f004 f8be 	bl	8008488 <USB_ReadInterrupts>
 800430c:	4603      	mov	r3, r0
 800430e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004312:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004316:	d104      	bne.n	8004322 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004320:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4618      	mov	r0, r3
 8004328:	f004 f8ae 	bl	8008488 <USB_ReadInterrupts>
 800432c:	4603      	mov	r3, r0
 800432e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004332:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004336:	d104      	bne.n	8004342 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8004340:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f004 f89e 	bl	8008488 <USB_ReadInterrupts>
 800434c:	4603      	mov	r3, r0
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b02      	cmp	r3, #2
 8004354:	d103      	bne.n	800435e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2202      	movs	r2, #2
 800435c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4618      	mov	r0, r3
 8004364:	f004 f890 	bl	8008488 <USB_ReadInterrupts>
 8004368:	4603      	mov	r3, r0
 800436a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800436e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004372:	d120      	bne.n	80043b6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800437c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d113      	bne.n	80043b6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800438e:	2110      	movs	r1, #16
 8004390:	6938      	ldr	r0, [r7, #16]
 8004392:	f003 ff83 	bl	800829c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8004396:	6938      	ldr	r0, [r7, #16]
 8004398:	f003 ffb2 	bl	8008300 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	7a5b      	ldrb	r3, [r3, #9]
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d105      	bne.n	80043b0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2101      	movs	r1, #1
 80043aa:	4618      	mov	r0, r3
 80043ac:	f004 f9a4 	bl	80086f8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f007 f96b 	bl	800b68c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f004 f864 	bl	8008488 <USB_ReadInterrupts>
 80043c0:	4603      	mov	r3, r0
 80043c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ca:	d102      	bne.n	80043d2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f001 fd4d 	bl	8005e6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f004 f856 	bl	8008488 <USB_ReadInterrupts>
 80043dc:	4603      	mov	r3, r0
 80043de:	f003 0308 	and.w	r3, r3, #8
 80043e2:	2b08      	cmp	r3, #8
 80043e4:	d106      	bne.n	80043f4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f007 f934 	bl	800b654 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2208      	movs	r2, #8
 80043f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4618      	mov	r0, r3
 80043fa:	f004 f845 	bl	8008488 <USB_ReadInterrupts>
 80043fe:	4603      	mov	r3, r0
 8004400:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004404:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004408:	d139      	bne.n	800447e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4618      	mov	r0, r3
 8004410:	f004 fde0 	bl	8008fd4 <USB_HC_ReadInterrupt>
 8004414:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004416:	2300      	movs	r3, #0
 8004418:	617b      	str	r3, [r7, #20]
 800441a:	e025      	b.n	8004468 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	fa22 f303 	lsr.w	r3, r2, r3
 8004428:	f003 0301 	and.w	r3, r3, #1
 800442c:	2b00      	cmp	r3, #0
 800442e:	d018      	beq.n	8004462 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004442:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004446:	d106      	bne.n	8004456 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	b2db      	uxtb	r3, r3
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f905 	bl	800465e <HCD_HC_IN_IRQHandler>
 8004454:	e005      	b.n	8004462 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	b2db      	uxtb	r3, r3
 800445a:	4619      	mov	r1, r3
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 ff67 	bl	8005330 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	3301      	adds	r3, #1
 8004466:	617b      	str	r3, [r7, #20]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	795b      	ldrb	r3, [r3, #5]
 800446c:	461a      	mov	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4293      	cmp	r3, r2
 8004472:	d3d3      	bcc.n	800441c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800447c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	4618      	mov	r0, r3
 8004484:	f004 f800 	bl	8008488 <USB_ReadInterrupts>
 8004488:	4603      	mov	r3, r0
 800448a:	f003 0310 	and.w	r3, r3, #16
 800448e:	2b10      	cmp	r3, #16
 8004490:	d101      	bne.n	8004496 <HAL_HCD_IRQHandler+0x1ea>
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_HCD_IRQHandler+0x1ec>
 8004496:	2300      	movs	r3, #0
 8004498:	2b00      	cmp	r3, #0
 800449a:	d014      	beq.n	80044c6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	699a      	ldr	r2, [r3, #24]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 0210 	bic.w	r2, r2, #16
 80044aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f001 fbfe 	bl	8005cae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0210 	orr.w	r2, r2, #16
 80044c0:	619a      	str	r2, [r3, #24]
 80044c2:	e000      	b.n	80044c6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80044c4:	bf00      	nop
    }
  }
}
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d101      	bne.n	80044e2 <HAL_HCD_Start+0x16>
 80044de:	2302      	movs	r3, #2
 80044e0:	e013      	b.n	800450a <HAL_HCD_Start+0x3e>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	4618      	mov	r0, r3
 80044f2:	f004 f968 	bl	80087c6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f003 fe60 	bl	80081c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3708      	adds	r7, #8
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}

08004512 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004512:	b580      	push	{r7, lr}
 8004514:	b082      	sub	sp, #8
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_HCD_Stop+0x16>
 8004524:	2302      	movs	r3, #2
 8004526:	e00d      	b.n	8004544 <HAL_HCD_Stop+0x32>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4618      	mov	r0, r3
 8004536:	f004 febb 	bl	80092b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	3708      	adds	r7, #8
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b082      	sub	sp, #8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4618      	mov	r0, r3
 800455a:	f004 f90a 	bl	8008772 <USB_ResetPort>
 800455e:	4603      	mov	r3, r0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3708      	adds	r7, #8
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004568:	b480      	push	{r7}
 800456a:	b083      	sub	sp, #12
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	460b      	mov	r3, r1
 8004572:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	4613      	mov	r3, r2
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	1a9b      	subs	r3, r3, r2
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	440b      	add	r3, r1
 8004582:	334c      	adds	r3, #76	@ 0x4c
 8004584:	781b      	ldrb	r3, [r3, #0]
}
 8004586:	4618      	mov	r0, r3
 8004588:	370c      	adds	r7, #12
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr

08004592 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8004592:	b480      	push	{r7}
 8004594:	b083      	sub	sp, #12
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
 800459a:	460b      	mov	r3, r1
 800459c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800459e:	78fa      	ldrb	r2, [r7, #3]
 80045a0:	6879      	ldr	r1, [r7, #4]
 80045a2:	4613      	mov	r3, r2
 80045a4:	011b      	lsls	r3, r3, #4
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	440b      	add	r3, r1
 80045ac:	3338      	adds	r3, #56	@ 0x38
 80045ae:	681b      	ldr	r3, [r3, #0]
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f004 f94c 	bl	8008866 <USB_GetCurrentFrame>
 80045ce:	4603      	mov	r3, r0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4618      	mov	r0, r3
 80045e6:	f004 f927 	bl	8008838 <USB_GetHostSpeed>
 80045ea:	4603      	mov	r3, r0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	460b      	mov	r3, r1
 80045fe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	331a      	adds	r3, #26
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	331b      	adds	r3, #27
 8004624:	2200      	movs	r2, #0
 8004626:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8004628:	78fa      	ldrb	r2, [r7, #3]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	011b      	lsls	r3, r3, #4
 8004630:	1a9b      	subs	r3, r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	3325      	adds	r3, #37	@ 0x25
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800463c:	78fa      	ldrb	r2, [r7, #3]
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	4613      	mov	r3, r2
 8004642:	011b      	lsls	r3, r3, #4
 8004644:	1a9b      	subs	r3, r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	440b      	add	r3, r1
 800464a:	3324      	adds	r3, #36	@ 0x24
 800464c:	2200      	movs	r2, #0
 800464e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b086      	sub	sp, #24
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
 8004666:	460b      	mov	r3, r1
 8004668:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	78fa      	ldrb	r2, [r7, #3]
 800467a:	4611      	mov	r1, r2
 800467c:	4618      	mov	r0, r3
 800467e:	f003 ff16 	bl	80084ae <USB_ReadChInterrupts>
 8004682:	4603      	mov	r3, r0
 8004684:	f003 0304 	and.w	r3, r3, #4
 8004688:	2b04      	cmp	r3, #4
 800468a:	d11a      	bne.n	80046c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800468c:	78fb      	ldrb	r3, [r7, #3]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	4413      	add	r3, r2
 8004694:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004698:	461a      	mov	r2, r3
 800469a:	2304      	movs	r3, #4
 800469c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	334d      	adds	r3, #77	@ 0x4d
 80046ae:	2207      	movs	r2, #7
 80046b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	78fa      	ldrb	r2, [r7, #3]
 80046b8:	4611      	mov	r1, r2
 80046ba:	4618      	mov	r0, r3
 80046bc:	f004 fc9b 	bl	8008ff6 <USB_HC_Halt>
 80046c0:	e09e      	b.n	8004800 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	78fa      	ldrb	r2, [r7, #3]
 80046c8:	4611      	mov	r1, r2
 80046ca:	4618      	mov	r0, r3
 80046cc:	f003 feef 	bl	80084ae <USB_ReadChInterrupts>
 80046d0:	4603      	mov	r3, r0
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046da:	d11b      	bne.n	8004714 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80046dc:	78fb      	ldrb	r3, [r7, #3]
 80046de:	015a      	lsls	r2, r3, #5
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	4413      	add	r3, r2
 80046e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046e8:	461a      	mov	r2, r3
 80046ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80046ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80046f0:	78fa      	ldrb	r2, [r7, #3]
 80046f2:	6879      	ldr	r1, [r7, #4]
 80046f4:	4613      	mov	r3, r2
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	1a9b      	subs	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	440b      	add	r3, r1
 80046fe:	334d      	adds	r3, #77	@ 0x4d
 8004700:	2208      	movs	r2, #8
 8004702:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	78fa      	ldrb	r2, [r7, #3]
 800470a:	4611      	mov	r1, r2
 800470c:	4618      	mov	r0, r3
 800470e:	f004 fc72 	bl	8008ff6 <USB_HC_Halt>
 8004712:	e075      	b.n	8004800 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	78fa      	ldrb	r2, [r7, #3]
 800471a:	4611      	mov	r1, r2
 800471c:	4618      	mov	r0, r3
 800471e:	f003 fec6 	bl	80084ae <USB_ReadChInterrupts>
 8004722:	4603      	mov	r3, r0
 8004724:	f003 0308 	and.w	r3, r3, #8
 8004728:	2b08      	cmp	r3, #8
 800472a:	d11a      	bne.n	8004762 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800472c:	78fb      	ldrb	r3, [r7, #3]
 800472e:	015a      	lsls	r2, r3, #5
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004738:	461a      	mov	r2, r3
 800473a:	2308      	movs	r3, #8
 800473c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800473e:	78fa      	ldrb	r2, [r7, #3]
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	4613      	mov	r3, r2
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	1a9b      	subs	r3, r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	440b      	add	r3, r1
 800474c:	334d      	adds	r3, #77	@ 0x4d
 800474e:	2206      	movs	r2, #6
 8004750:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	78fa      	ldrb	r2, [r7, #3]
 8004758:	4611      	mov	r1, r2
 800475a:	4618      	mov	r0, r3
 800475c:	f004 fc4b 	bl	8008ff6 <USB_HC_Halt>
 8004760:	e04e      	b.n	8004800 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	78fa      	ldrb	r2, [r7, #3]
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f003 fe9f 	bl	80084ae <USB_ReadChInterrupts>
 8004770:	4603      	mov	r3, r0
 8004772:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004776:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800477a:	d11b      	bne.n	80047b4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800477c:	78fb      	ldrb	r3, [r7, #3]
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4413      	add	r3, r2
 8004784:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004788:	461a      	mov	r2, r3
 800478a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800478e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004790:	78fa      	ldrb	r2, [r7, #3]
 8004792:	6879      	ldr	r1, [r7, #4]
 8004794:	4613      	mov	r3, r2
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	1a9b      	subs	r3, r3, r2
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	440b      	add	r3, r1
 800479e:	334d      	adds	r3, #77	@ 0x4d
 80047a0:	2209      	movs	r2, #9
 80047a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	78fa      	ldrb	r2, [r7, #3]
 80047aa:	4611      	mov	r1, r2
 80047ac:	4618      	mov	r0, r3
 80047ae:	f004 fc22 	bl	8008ff6 <USB_HC_Halt>
 80047b2:	e025      	b.n	8004800 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	78fa      	ldrb	r2, [r7, #3]
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f003 fe76 	bl	80084ae <USB_ReadChInterrupts>
 80047c2:	4603      	mov	r3, r0
 80047c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047c8:	2b80      	cmp	r3, #128	@ 0x80
 80047ca:	d119      	bne.n	8004800 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80047cc:	78fb      	ldrb	r3, [r7, #3]
 80047ce:	015a      	lsls	r2, r3, #5
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	4413      	add	r3, r2
 80047d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047d8:	461a      	mov	r2, r3
 80047da:	2380      	movs	r3, #128	@ 0x80
 80047dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80047de:	78fa      	ldrb	r2, [r7, #3]
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	011b      	lsls	r3, r3, #4
 80047e6:	1a9b      	subs	r3, r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	334d      	adds	r3, #77	@ 0x4d
 80047ee:	2207      	movs	r2, #7
 80047f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	4611      	mov	r1, r2
 80047fa:	4618      	mov	r0, r3
 80047fc:	f004 fbfb 	bl	8008ff6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	78fa      	ldrb	r2, [r7, #3]
 8004806:	4611      	mov	r1, r2
 8004808:	4618      	mov	r0, r3
 800480a:	f003 fe50 	bl	80084ae <USB_ReadChInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004814:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004818:	d112      	bne.n	8004840 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	78fa      	ldrb	r2, [r7, #3]
 8004820:	4611      	mov	r1, r2
 8004822:	4618      	mov	r0, r3
 8004824:	f004 fbe7 	bl	8008ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004828:	78fb      	ldrb	r3, [r7, #3]
 800482a:	015a      	lsls	r2, r3, #5
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	4413      	add	r3, r2
 8004830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004834:	461a      	mov	r2, r3
 8004836:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800483a:	6093      	str	r3, [r2, #8]
 800483c:	f000 bd75 	b.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	78fa      	ldrb	r2, [r7, #3]
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f003 fe30 	bl	80084ae <USB_ReadChInterrupts>
 800484e:	4603      	mov	r3, r0
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b01      	cmp	r3, #1
 8004856:	f040 8128 	bne.w	8004aaa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800485a:	78fb      	ldrb	r3, [r7, #3]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004866:	461a      	mov	r2, r3
 8004868:	2320      	movs	r3, #32
 800486a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	331b      	adds	r3, #27
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d119      	bne.n	80048b6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	331b      	adds	r3, #27
 8004892:	2200      	movs	r2, #0
 8004894:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004896:	78fb      	ldrb	r3, [r7, #3]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	693b      	ldr	r3, [r7, #16]
 800489c:	4413      	add	r3, r2
 800489e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	0151      	lsls	r1, r2, #5
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	440a      	add	r2, r1
 80048ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80048b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048b4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	799b      	ldrb	r3, [r3, #6]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d01b      	beq.n	80048f6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80048be:	78fa      	ldrb	r2, [r7, #3]
 80048c0:	6879      	ldr	r1, [r7, #4]
 80048c2:	4613      	mov	r3, r2
 80048c4:	011b      	lsls	r3, r3, #4
 80048c6:	1a9b      	subs	r3, r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	440b      	add	r3, r1
 80048cc:	3330      	adds	r3, #48	@ 0x30
 80048ce:	6819      	ldr	r1, [r3, #0]
 80048d0:	78fb      	ldrb	r3, [r7, #3]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	1ac9      	subs	r1, r1, r3
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	011b      	lsls	r3, r3, #4
 80048ec:	1a9b      	subs	r3, r3, r2
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	4403      	add	r3, r0
 80048f2:	3338      	adds	r3, #56	@ 0x38
 80048f4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	334d      	adds	r3, #77	@ 0x4d
 8004906:	2201      	movs	r2, #1
 8004908:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800490a:	78fa      	ldrb	r2, [r7, #3]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	4613      	mov	r3, r2
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	1a9b      	subs	r3, r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	440b      	add	r3, r1
 8004918:	3344      	adds	r3, #68	@ 0x44
 800491a:	2200      	movs	r2, #0
 800491c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800491e:	78fb      	ldrb	r3, [r7, #3]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	4413      	add	r3, r2
 8004926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800492a:	461a      	mov	r2, r3
 800492c:	2301      	movs	r3, #1
 800492e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004930:	78fa      	ldrb	r2, [r7, #3]
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	011b      	lsls	r3, r3, #4
 8004938:	1a9b      	subs	r3, r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	3326      	adds	r3, #38	@ 0x26
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004946:	78fa      	ldrb	r2, [r7, #3]
 8004948:	6879      	ldr	r1, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	011b      	lsls	r3, r3, #4
 800494e:	1a9b      	subs	r3, r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	440b      	add	r3, r1
 8004954:	3326      	adds	r3, #38	@ 0x26
 8004956:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004958:	2b02      	cmp	r3, #2
 800495a:	d110      	bne.n	800497e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	78fa      	ldrb	r2, [r7, #3]
 8004962:	4611      	mov	r1, r2
 8004964:	4618      	mov	r0, r3
 8004966:	f004 fb46 	bl	8008ff6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800496a:	78fb      	ldrb	r3, [r7, #3]
 800496c:	015a      	lsls	r2, r3, #5
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	4413      	add	r3, r2
 8004972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004976:	461a      	mov	r2, r3
 8004978:	2310      	movs	r3, #16
 800497a:	6093      	str	r3, [r2, #8]
 800497c:	e03d      	b.n	80049fa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800497e:	78fa      	ldrb	r2, [r7, #3]
 8004980:	6879      	ldr	r1, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	1a9b      	subs	r3, r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3326      	adds	r3, #38	@ 0x26
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d00a      	beq.n	80049aa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004994:	78fa      	ldrb	r2, [r7, #3]
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	4613      	mov	r3, r2
 800499a:	011b      	lsls	r3, r3, #4
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	3326      	adds	r3, #38	@ 0x26
 80049a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d127      	bne.n	80049fa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	78fa      	ldrb	r2, [r7, #3]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80049c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80049c8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	334c      	adds	r3, #76	@ 0x4c
 80049da:	2201      	movs	r2, #1
 80049dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80049de:	78fa      	ldrb	r2, [r7, #3]
 80049e0:	6879      	ldr	r1, [r7, #4]
 80049e2:	4613      	mov	r3, r2
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	1a9b      	subs	r3, r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	440b      	add	r3, r1
 80049ec:	334c      	adds	r3, #76	@ 0x4c
 80049ee:	781a      	ldrb	r2, [r3, #0]
 80049f0:	78fb      	ldrb	r3, [r7, #3]
 80049f2:	4619      	mov	r1, r3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f006 fe57 	bl	800b6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	799b      	ldrb	r3, [r3, #6]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d13b      	bne.n	8004a7a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8004a02:	78fa      	ldrb	r2, [r7, #3]
 8004a04:	6879      	ldr	r1, [r7, #4]
 8004a06:	4613      	mov	r3, r2
 8004a08:	011b      	lsls	r3, r3, #4
 8004a0a:	1a9b      	subs	r3, r3, r2
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	440b      	add	r3, r1
 8004a10:	3338      	adds	r3, #56	@ 0x38
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	78fa      	ldrb	r2, [r7, #3]
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	1a9b      	subs	r3, r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	4403      	add	r3, r0
 8004a22:	3328      	adds	r3, #40	@ 0x28
 8004a24:	881b      	ldrh	r3, [r3, #0]
 8004a26:	440b      	add	r3, r1
 8004a28:	1e59      	subs	r1, r3, #1
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	4403      	add	r3, r0
 8004a38:	3328      	adds	r3, #40	@ 0x28
 8004a3a:	881b      	ldrh	r3, [r3, #0]
 8004a3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	f000 8470 	beq.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8004a4a:	78fa      	ldrb	r2, [r7, #3]
 8004a4c:	6879      	ldr	r1, [r7, #4]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	011b      	lsls	r3, r3, #4
 8004a52:	1a9b      	subs	r3, r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	333c      	adds	r3, #60	@ 0x3c
 8004a5a:	781b      	ldrb	r3, [r3, #0]
 8004a5c:	78fa      	ldrb	r2, [r7, #3]
 8004a5e:	f083 0301 	eor.w	r3, r3, #1
 8004a62:	b2d8      	uxtb	r0, r3
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	4613      	mov	r3, r2
 8004a68:	011b      	lsls	r3, r3, #4
 8004a6a:	1a9b      	subs	r3, r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	440b      	add	r3, r1
 8004a70:	333c      	adds	r3, #60	@ 0x3c
 8004a72:	4602      	mov	r2, r0
 8004a74:	701a      	strb	r2, [r3, #0]
 8004a76:	f000 bc58 	b.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8004a7a:	78fa      	ldrb	r2, [r7, #3]
 8004a7c:	6879      	ldr	r1, [r7, #4]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	011b      	lsls	r3, r3, #4
 8004a82:	1a9b      	subs	r3, r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	440b      	add	r3, r1
 8004a88:	333c      	adds	r3, #60	@ 0x3c
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	f083 0301 	eor.w	r3, r3, #1
 8004a92:	b2d8      	uxtb	r0, r3
 8004a94:	6879      	ldr	r1, [r7, #4]
 8004a96:	4613      	mov	r3, r2
 8004a98:	011b      	lsls	r3, r3, #4
 8004a9a:	1a9b      	subs	r3, r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	440b      	add	r3, r1
 8004aa0:	333c      	adds	r3, #60	@ 0x3c
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	701a      	strb	r2, [r3, #0]
 8004aa6:	f000 bc40 	b.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	4611      	mov	r1, r2
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f003 fcfb 	bl	80084ae <USB_ReadChInterrupts>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b20      	cmp	r3, #32
 8004ac0:	d131      	bne.n	8004b26 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004ac2:	78fb      	ldrb	r3, [r7, #3]
 8004ac4:	015a      	lsls	r2, r3, #5
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	4413      	add	r3, r2
 8004aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ace:	461a      	mov	r2, r3
 8004ad0:	2320      	movs	r3, #32
 8004ad2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8004ad4:	78fa      	ldrb	r2, [r7, #3]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	011b      	lsls	r3, r3, #4
 8004adc:	1a9b      	subs	r3, r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	331a      	adds	r3, #26
 8004ae4:	781b      	ldrb	r3, [r3, #0]
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	f040 841f 	bne.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8004aec:	78fa      	ldrb	r2, [r7, #3]
 8004aee:	6879      	ldr	r1, [r7, #4]
 8004af0:	4613      	mov	r3, r2
 8004af2:	011b      	lsls	r3, r3, #4
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	331b      	adds	r3, #27
 8004afc:	2201      	movs	r2, #1
 8004afe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	334d      	adds	r3, #77	@ 0x4d
 8004b10:	2203      	movs	r2, #3
 8004b12:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	78fa      	ldrb	r2, [r7, #3]
 8004b1a:	4611      	mov	r1, r2
 8004b1c:	4618      	mov	r0, r3
 8004b1e:	f004 fa6a 	bl	8008ff6 <USB_HC_Halt>
 8004b22:	f000 bc02 	b.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	4611      	mov	r1, r2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f003 fcbd 	bl	80084ae <USB_ReadChInterrupts>
 8004b34:	4603      	mov	r3, r0
 8004b36:	f003 0302 	and.w	r3, r3, #2
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	f040 8305 	bne.w	800514a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	2302      	movs	r3, #2
 8004b50:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004b52:	78fa      	ldrb	r2, [r7, #3]
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	4613      	mov	r3, r2
 8004b58:	011b      	lsls	r3, r3, #4
 8004b5a:	1a9b      	subs	r3, r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	440b      	add	r3, r1
 8004b60:	334d      	adds	r3, #77	@ 0x4d
 8004b62:	781b      	ldrb	r3, [r3, #0]
 8004b64:	2b01      	cmp	r3, #1
 8004b66:	d114      	bne.n	8004b92 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b68:	78fa      	ldrb	r2, [r7, #3]
 8004b6a:	6879      	ldr	r1, [r7, #4]
 8004b6c:	4613      	mov	r3, r2
 8004b6e:	011b      	lsls	r3, r3, #4
 8004b70:	1a9b      	subs	r3, r3, r2
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	440b      	add	r3, r1
 8004b76:	334d      	adds	r3, #77	@ 0x4d
 8004b78:	2202      	movs	r2, #2
 8004b7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004b7c:	78fa      	ldrb	r2, [r7, #3]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	4613      	mov	r3, r2
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	1a9b      	subs	r3, r3, r2
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	440b      	add	r3, r1
 8004b8a:	334c      	adds	r3, #76	@ 0x4c
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	701a      	strb	r2, [r3, #0]
 8004b90:	e2cc      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004b92:	78fa      	ldrb	r2, [r7, #3]
 8004b94:	6879      	ldr	r1, [r7, #4]
 8004b96:	4613      	mov	r3, r2
 8004b98:	011b      	lsls	r3, r3, #4
 8004b9a:	1a9b      	subs	r3, r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	440b      	add	r3, r1
 8004ba0:	334d      	adds	r3, #77	@ 0x4d
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b06      	cmp	r3, #6
 8004ba6:	d114      	bne.n	8004bd2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ba8:	78fa      	ldrb	r2, [r7, #3]
 8004baa:	6879      	ldr	r1, [r7, #4]
 8004bac:	4613      	mov	r3, r2
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	1a9b      	subs	r3, r3, r2
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	440b      	add	r3, r1
 8004bb6:	334d      	adds	r3, #77	@ 0x4d
 8004bb8:	2202      	movs	r2, #2
 8004bba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	440b      	add	r3, r1
 8004bca:	334c      	adds	r3, #76	@ 0x4c
 8004bcc:	2205      	movs	r2, #5
 8004bce:	701a      	strb	r2, [r3, #0]
 8004bd0:	e2ac      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004bd2:	78fa      	ldrb	r2, [r7, #3]
 8004bd4:	6879      	ldr	r1, [r7, #4]
 8004bd6:	4613      	mov	r3, r2
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	1a9b      	subs	r3, r3, r2
 8004bdc:	009b      	lsls	r3, r3, #2
 8004bde:	440b      	add	r3, r1
 8004be0:	334d      	adds	r3, #77	@ 0x4d
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b07      	cmp	r3, #7
 8004be6:	d00b      	beq.n	8004c00 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004be8:	78fa      	ldrb	r2, [r7, #3]
 8004bea:	6879      	ldr	r1, [r7, #4]
 8004bec:	4613      	mov	r3, r2
 8004bee:	011b      	lsls	r3, r3, #4
 8004bf0:	1a9b      	subs	r3, r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	440b      	add	r3, r1
 8004bf6:	334d      	adds	r3, #77	@ 0x4d
 8004bf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004bfa:	2b09      	cmp	r3, #9
 8004bfc:	f040 80a6 	bne.w	8004d4c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004c00:	78fa      	ldrb	r2, [r7, #3]
 8004c02:	6879      	ldr	r1, [r7, #4]
 8004c04:	4613      	mov	r3, r2
 8004c06:	011b      	lsls	r3, r3, #4
 8004c08:	1a9b      	subs	r3, r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	334d      	adds	r3, #77	@ 0x4d
 8004c10:	2202      	movs	r2, #2
 8004c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004c14:	78fa      	ldrb	r2, [r7, #3]
 8004c16:	6879      	ldr	r1, [r7, #4]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3344      	adds	r3, #68	@ 0x44
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	1c59      	adds	r1, r3, #1
 8004c28:	6878      	ldr	r0, [r7, #4]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	1a9b      	subs	r3, r3, r2
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4403      	add	r3, r0
 8004c34:	3344      	adds	r3, #68	@ 0x44
 8004c36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c38:	78fa      	ldrb	r2, [r7, #3]
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	4613      	mov	r3, r2
 8004c3e:	011b      	lsls	r3, r3, #4
 8004c40:	1a9b      	subs	r3, r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	440b      	add	r3, r1
 8004c46:	3344      	adds	r3, #68	@ 0x44
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d943      	bls.n	8004cd6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004c4e:	78fa      	ldrb	r2, [r7, #3]
 8004c50:	6879      	ldr	r1, [r7, #4]
 8004c52:	4613      	mov	r3, r2
 8004c54:	011b      	lsls	r3, r3, #4
 8004c56:	1a9b      	subs	r3, r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	440b      	add	r3, r1
 8004c5c:	3344      	adds	r3, #68	@ 0x44
 8004c5e:	2200      	movs	r2, #0
 8004c60:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004c62:	78fa      	ldrb	r2, [r7, #3]
 8004c64:	6879      	ldr	r1, [r7, #4]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	331a      	adds	r3, #26
 8004c72:	781b      	ldrb	r3, [r3, #0]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d123      	bne.n	8004cc0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	6879      	ldr	r1, [r7, #4]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	440b      	add	r3, r1
 8004c86:	331b      	adds	r3, #27
 8004c88:	2200      	movs	r2, #0
 8004c8a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8004c8c:	78fa      	ldrb	r2, [r7, #3]
 8004c8e:	6879      	ldr	r1, [r7, #4]
 8004c90:	4613      	mov	r3, r2
 8004c92:	011b      	lsls	r3, r3, #4
 8004c94:	1a9b      	subs	r3, r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	440b      	add	r3, r1
 8004c9a:	331c      	adds	r3, #28
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	78fa      	ldrb	r2, [r7, #3]
 8004cb0:	0151      	lsls	r1, r2, #5
 8004cb2:	693a      	ldr	r2, [r7, #16]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004cba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cbe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004cc0:	78fa      	ldrb	r2, [r7, #3]
 8004cc2:	6879      	ldr	r1, [r7, #4]
 8004cc4:	4613      	mov	r3, r2
 8004cc6:	011b      	lsls	r3, r3, #4
 8004cc8:	1a9b      	subs	r3, r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	440b      	add	r3, r1
 8004cce:	334c      	adds	r3, #76	@ 0x4c
 8004cd0:	2204      	movs	r2, #4
 8004cd2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004cd4:	e229      	b.n	800512a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004cd6:	78fa      	ldrb	r2, [r7, #3]
 8004cd8:	6879      	ldr	r1, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	011b      	lsls	r3, r3, #4
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	440b      	add	r3, r1
 8004ce4:	334c      	adds	r3, #76	@ 0x4c
 8004ce6:	2202      	movs	r2, #2
 8004ce8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004cea:	78fa      	ldrb	r2, [r7, #3]
 8004cec:	6879      	ldr	r1, [r7, #4]
 8004cee:	4613      	mov	r3, r2
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	1a9b      	subs	r3, r3, r2
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	440b      	add	r3, r1
 8004cf8:	3326      	adds	r3, #38	@ 0x26
 8004cfa:	781b      	ldrb	r3, [r3, #0]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00b      	beq.n	8004d18 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d00:	78fa      	ldrb	r2, [r7, #3]
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	011b      	lsls	r3, r3, #4
 8004d08:	1a9b      	subs	r3, r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	440b      	add	r3, r1
 8004d0e:	3326      	adds	r3, #38	@ 0x26
 8004d10:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d12:	2b02      	cmp	r3, #2
 8004d14:	f040 8209 	bne.w	800512a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	015a      	lsls	r2, r3, #5
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	4413      	add	r3, r2
 8004d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004d2e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d36:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	015a      	lsls	r2, r3, #5
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4413      	add	r3, r2
 8004d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d44:	461a      	mov	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004d4a:	e1ee      	b.n	800512a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004d4c:	78fa      	ldrb	r2, [r7, #3]
 8004d4e:	6879      	ldr	r1, [r7, #4]
 8004d50:	4613      	mov	r3, r2
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	009b      	lsls	r3, r3, #2
 8004d58:	440b      	add	r3, r1
 8004d5a:	334d      	adds	r3, #77	@ 0x4d
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	2b05      	cmp	r3, #5
 8004d60:	f040 80c8 	bne.w	8004ef4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	334d      	adds	r3, #77	@ 0x4d
 8004d74:	2202      	movs	r2, #2
 8004d76:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004d78:	78fa      	ldrb	r2, [r7, #3]
 8004d7a:	6879      	ldr	r1, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	011b      	lsls	r3, r3, #4
 8004d80:	1a9b      	subs	r3, r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	440b      	add	r3, r1
 8004d86:	331b      	adds	r3, #27
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	f040 81ce 	bne.w	800512c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004d90:	78fa      	ldrb	r2, [r7, #3]
 8004d92:	6879      	ldr	r1, [r7, #4]
 8004d94:	4613      	mov	r3, r2
 8004d96:	011b      	lsls	r3, r3, #4
 8004d98:	1a9b      	subs	r3, r3, r2
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	440b      	add	r3, r1
 8004d9e:	3326      	adds	r3, #38	@ 0x26
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d16b      	bne.n	8004e7e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004da6:	78fa      	ldrb	r2, [r7, #3]
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	4613      	mov	r3, r2
 8004dac:	011b      	lsls	r3, r3, #4
 8004dae:	1a9b      	subs	r3, r3, r2
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	440b      	add	r3, r1
 8004db4:	3348      	adds	r3, #72	@ 0x48
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	1c59      	adds	r1, r3, #1
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	4613      	mov	r3, r2
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	1a9b      	subs	r3, r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	4403      	add	r3, r0
 8004dc6:	3348      	adds	r3, #72	@ 0x48
 8004dc8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8004dca:	78fa      	ldrb	r2, [r7, #3]
 8004dcc:	6879      	ldr	r1, [r7, #4]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	1a9b      	subs	r3, r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	3348      	adds	r3, #72	@ 0x48
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d943      	bls.n	8004e68 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8004de0:	78fa      	ldrb	r2, [r7, #3]
 8004de2:	6879      	ldr	r1, [r7, #4]
 8004de4:	4613      	mov	r3, r2
 8004de6:	011b      	lsls	r3, r3, #4
 8004de8:	1a9b      	subs	r3, r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	440b      	add	r3, r1
 8004dee:	3348      	adds	r3, #72	@ 0x48
 8004df0:	2200      	movs	r2, #0
 8004df2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	011b      	lsls	r3, r3, #4
 8004dfc:	1a9b      	subs	r3, r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	440b      	add	r3, r1
 8004e02:	331b      	adds	r3, #27
 8004e04:	2200      	movs	r2, #0
 8004e06:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8004e08:	78fa      	ldrb	r2, [r7, #3]
 8004e0a:	6879      	ldr	r1, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	011b      	lsls	r3, r3, #4
 8004e10:	1a9b      	subs	r3, r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	440b      	add	r3, r1
 8004e16:	3344      	adds	r3, #68	@ 0x44
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b02      	cmp	r3, #2
 8004e1c:	d809      	bhi.n	8004e32 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004e1e:	78fa      	ldrb	r2, [r7, #3]
 8004e20:	6879      	ldr	r1, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	1a9b      	subs	r3, r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	440b      	add	r3, r1
 8004e2c:	331c      	adds	r3, #28
 8004e2e:	2201      	movs	r2, #1
 8004e30:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004e32:	78fb      	ldrb	r3, [r7, #3]
 8004e34:	015a      	lsls	r2, r3, #5
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	4413      	add	r3, r2
 8004e3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	78fa      	ldrb	r2, [r7, #3]
 8004e42:	0151      	lsls	r1, r2, #5
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	440a      	add	r2, r1
 8004e48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e50:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004e52:	78fa      	ldrb	r2, [r7, #3]
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	4613      	mov	r3, r2
 8004e58:	011b      	lsls	r3, r3, #4
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	440b      	add	r3, r1
 8004e60:	334c      	adds	r3, #76	@ 0x4c
 8004e62:	2204      	movs	r2, #4
 8004e64:	701a      	strb	r2, [r3, #0]
 8004e66:	e014      	b.n	8004e92 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e68:	78fa      	ldrb	r2, [r7, #3]
 8004e6a:	6879      	ldr	r1, [r7, #4]
 8004e6c:	4613      	mov	r3, r2
 8004e6e:	011b      	lsls	r3, r3, #4
 8004e70:	1a9b      	subs	r3, r3, r2
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	440b      	add	r3, r1
 8004e76:	334c      	adds	r3, #76	@ 0x4c
 8004e78:	2202      	movs	r2, #2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	e009      	b.n	8004e92 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004e7e:	78fa      	ldrb	r2, [r7, #3]
 8004e80:	6879      	ldr	r1, [r7, #4]
 8004e82:	4613      	mov	r3, r2
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	1a9b      	subs	r3, r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	440b      	add	r3, r1
 8004e8c:	334c      	adds	r3, #76	@ 0x4c
 8004e8e:	2202      	movs	r2, #2
 8004e90:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004e92:	78fa      	ldrb	r2, [r7, #3]
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	4613      	mov	r3, r2
 8004e98:	011b      	lsls	r3, r3, #4
 8004e9a:	1a9b      	subs	r3, r3, r2
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	440b      	add	r3, r1
 8004ea0:	3326      	adds	r3, #38	@ 0x26
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d00b      	beq.n	8004ec0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ea8:	78fa      	ldrb	r2, [r7, #3]
 8004eaa:	6879      	ldr	r1, [r7, #4]
 8004eac:	4613      	mov	r3, r2
 8004eae:	011b      	lsls	r3, r3, #4
 8004eb0:	1a9b      	subs	r3, r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	3326      	adds	r3, #38	@ 0x26
 8004eb8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	f040 8136 	bne.w	800512c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ec0:	78fb      	ldrb	r3, [r7, #3]
 8004ec2:	015a      	lsls	r2, r3, #5
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	4413      	add	r3, r2
 8004ec8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ed6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ede:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ee0:	78fb      	ldrb	r3, [r7, #3]
 8004ee2:	015a      	lsls	r2, r3, #5
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	4413      	add	r3, r2
 8004ee8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eec:	461a      	mov	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	6013      	str	r3, [r2, #0]
 8004ef2:	e11b      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004ef4:	78fa      	ldrb	r2, [r7, #3]
 8004ef6:	6879      	ldr	r1, [r7, #4]
 8004ef8:	4613      	mov	r3, r2
 8004efa:	011b      	lsls	r3, r3, #4
 8004efc:	1a9b      	subs	r3, r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	440b      	add	r3, r1
 8004f02:	334d      	adds	r3, #77	@ 0x4d
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b03      	cmp	r3, #3
 8004f08:	f040 8081 	bne.w	800500e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004f0c:	78fa      	ldrb	r2, [r7, #3]
 8004f0e:	6879      	ldr	r1, [r7, #4]
 8004f10:	4613      	mov	r3, r2
 8004f12:	011b      	lsls	r3, r3, #4
 8004f14:	1a9b      	subs	r3, r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	440b      	add	r3, r1
 8004f1a:	334d      	adds	r3, #77	@ 0x4d
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004f20:	78fa      	ldrb	r2, [r7, #3]
 8004f22:	6879      	ldr	r1, [r7, #4]
 8004f24:	4613      	mov	r3, r2
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	1a9b      	subs	r3, r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	440b      	add	r3, r1
 8004f2e:	331b      	adds	r3, #27
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	f040 80fa 	bne.w	800512c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	6879      	ldr	r1, [r7, #4]
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	011b      	lsls	r3, r3, #4
 8004f40:	1a9b      	subs	r3, r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	440b      	add	r3, r1
 8004f46:	334c      	adds	r3, #76	@ 0x4c
 8004f48:	2202      	movs	r2, #2
 8004f4a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004f4c:	78fb      	ldrb	r3, [r7, #3]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	693a      	ldr	r2, [r7, #16]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f6a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004f8a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004f8c:	78fb      	ldrb	r3, [r7, #3]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	78fa      	ldrb	r2, [r7, #3]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004fa6:	f023 0320 	bic.w	r3, r3, #32
 8004faa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fac:	78fa      	ldrb	r2, [r7, #3]
 8004fae:	6879      	ldr	r1, [r7, #4]
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	011b      	lsls	r3, r3, #4
 8004fb4:	1a9b      	subs	r3, r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3326      	adds	r3, #38	@ 0x26
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004fc2:	78fa      	ldrb	r2, [r7, #3]
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	1a9b      	subs	r3, r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	440b      	add	r3, r1
 8004fd0:	3326      	adds	r3, #38	@ 0x26
 8004fd2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004fd4:	2b02      	cmp	r3, #2
 8004fd6:	f040 80a9 	bne.w	800512c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004fda:	78fb      	ldrb	r3, [r7, #3]
 8004fdc:	015a      	lsls	r2, r3, #5
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	4413      	add	r3, r2
 8004fe2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ff0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004ff8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004ffa:	78fb      	ldrb	r3, [r7, #3]
 8004ffc:	015a      	lsls	r2, r3, #5
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	4413      	add	r3, r2
 8005002:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005006:	461a      	mov	r2, r3
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	6013      	str	r3, [r2, #0]
 800500c:	e08e      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800500e:	78fa      	ldrb	r2, [r7, #3]
 8005010:	6879      	ldr	r1, [r7, #4]
 8005012:	4613      	mov	r3, r2
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	1a9b      	subs	r3, r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	440b      	add	r3, r1
 800501c:	334d      	adds	r3, #77	@ 0x4d
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b04      	cmp	r3, #4
 8005022:	d143      	bne.n	80050ac <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005024:	78fa      	ldrb	r2, [r7, #3]
 8005026:	6879      	ldr	r1, [r7, #4]
 8005028:	4613      	mov	r3, r2
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	1a9b      	subs	r3, r3, r2
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	440b      	add	r3, r1
 8005032:	334d      	adds	r3, #77	@ 0x4d
 8005034:	2202      	movs	r2, #2
 8005036:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005038:	78fa      	ldrb	r2, [r7, #3]
 800503a:	6879      	ldr	r1, [r7, #4]
 800503c:	4613      	mov	r3, r2
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	1a9b      	subs	r3, r3, r2
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	440b      	add	r3, r1
 8005046:	334c      	adds	r3, #76	@ 0x4c
 8005048:	2202      	movs	r2, #2
 800504a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800504c:	78fa      	ldrb	r2, [r7, #3]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	4613      	mov	r3, r2
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	1a9b      	subs	r3, r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	440b      	add	r3, r1
 800505a:	3326      	adds	r3, #38	@ 0x26
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005062:	78fa      	ldrb	r2, [r7, #3]
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	4613      	mov	r3, r2
 8005068:	011b      	lsls	r3, r3, #4
 800506a:	1a9b      	subs	r3, r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	440b      	add	r3, r1
 8005070:	3326      	adds	r3, #38	@ 0x26
 8005072:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005074:	2b02      	cmp	r3, #2
 8005076:	d159      	bne.n	800512c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800508e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005096:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a4:	461a      	mov	r2, r3
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e03f      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80050ac:	78fa      	ldrb	r2, [r7, #3]
 80050ae:	6879      	ldr	r1, [r7, #4]
 80050b0:	4613      	mov	r3, r2
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	1a9b      	subs	r3, r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	440b      	add	r3, r1
 80050ba:	334d      	adds	r3, #77	@ 0x4d
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b08      	cmp	r3, #8
 80050c0:	d126      	bne.n	8005110 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	6879      	ldr	r1, [r7, #4]
 80050c6:	4613      	mov	r3, r2
 80050c8:	011b      	lsls	r3, r3, #4
 80050ca:	1a9b      	subs	r3, r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	440b      	add	r3, r1
 80050d0:	334d      	adds	r3, #77	@ 0x4d
 80050d2:	2202      	movs	r2, #2
 80050d4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80050d6:	78fa      	ldrb	r2, [r7, #3]
 80050d8:	6879      	ldr	r1, [r7, #4]
 80050da:	4613      	mov	r3, r2
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	1a9b      	subs	r3, r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	440b      	add	r3, r1
 80050e4:	3344      	adds	r3, #68	@ 0x44
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	1c59      	adds	r1, r3, #1
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	4613      	mov	r3, r2
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	1a9b      	subs	r3, r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4403      	add	r3, r0
 80050f6:	3344      	adds	r3, #68	@ 0x44
 80050f8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	334c      	adds	r3, #76	@ 0x4c
 800510a:	2204      	movs	r2, #4
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	e00d      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	334d      	adds	r3, #77	@ 0x4d
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b02      	cmp	r3, #2
 8005124:	f000 8100 	beq.w	8005328 <HCD_HC_IN_IRQHandler+0xcca>
 8005128:	e000      	b.n	800512c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800512a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800512c:	78fa      	ldrb	r2, [r7, #3]
 800512e:	6879      	ldr	r1, [r7, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	011b      	lsls	r3, r3, #4
 8005134:	1a9b      	subs	r3, r3, r2
 8005136:	009b      	lsls	r3, r3, #2
 8005138:	440b      	add	r3, r1
 800513a:	334c      	adds	r3, #76	@ 0x4c
 800513c:	781a      	ldrb	r2, [r3, #0]
 800513e:	78fb      	ldrb	r3, [r7, #3]
 8005140:	4619      	mov	r1, r3
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f006 fab0 	bl	800b6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005148:	e0ef      	b.n	800532a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	78fa      	ldrb	r2, [r7, #3]
 8005150:	4611      	mov	r1, r2
 8005152:	4618      	mov	r0, r3
 8005154:	f003 f9ab 	bl	80084ae <USB_ReadChInterrupts>
 8005158:	4603      	mov	r3, r0
 800515a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515e:	2b40      	cmp	r3, #64	@ 0x40
 8005160:	d12f      	bne.n	80051c2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005162:	78fb      	ldrb	r3, [r7, #3]
 8005164:	015a      	lsls	r2, r3, #5
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4413      	add	r3, r2
 800516a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800516e:	461a      	mov	r2, r3
 8005170:	2340      	movs	r3, #64	@ 0x40
 8005172:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8005174:	78fa      	ldrb	r2, [r7, #3]
 8005176:	6879      	ldr	r1, [r7, #4]
 8005178:	4613      	mov	r3, r2
 800517a:	011b      	lsls	r3, r3, #4
 800517c:	1a9b      	subs	r3, r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	440b      	add	r3, r1
 8005182:	334d      	adds	r3, #77	@ 0x4d
 8005184:	2205      	movs	r2, #5
 8005186:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005188:	78fa      	ldrb	r2, [r7, #3]
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	4613      	mov	r3, r2
 800518e:	011b      	lsls	r3, r3, #4
 8005190:	1a9b      	subs	r3, r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	440b      	add	r3, r1
 8005196:	331a      	adds	r3, #26
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d109      	bne.n	80051b2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800519e:	78fa      	ldrb	r2, [r7, #3]
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	011b      	lsls	r3, r3, #4
 80051a6:	1a9b      	subs	r3, r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	3344      	adds	r3, #68	@ 0x44
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f003 ff1b 	bl	8008ff6 <USB_HC_Halt>
 80051c0:	e0b3      	b.n	800532a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	78fa      	ldrb	r2, [r7, #3]
 80051c8:	4611      	mov	r1, r2
 80051ca:	4618      	mov	r0, r3
 80051cc:	f003 f96f 	bl	80084ae <USB_ReadChInterrupts>
 80051d0:	4603      	mov	r3, r0
 80051d2:	f003 0310 	and.w	r3, r3, #16
 80051d6:	2b10      	cmp	r3, #16
 80051d8:	f040 80a7 	bne.w	800532a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	6879      	ldr	r1, [r7, #4]
 80051e0:	4613      	mov	r3, r2
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	1a9b      	subs	r3, r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	440b      	add	r3, r1
 80051ea:	3326      	adds	r3, #38	@ 0x26
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	2b03      	cmp	r3, #3
 80051f0:	d11b      	bne.n	800522a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80051f2:	78fa      	ldrb	r2, [r7, #3]
 80051f4:	6879      	ldr	r1, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	011b      	lsls	r3, r3, #4
 80051fa:	1a9b      	subs	r3, r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	440b      	add	r3, r1
 8005200:	3344      	adds	r3, #68	@ 0x44
 8005202:	2200      	movs	r2, #0
 8005204:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8005206:	78fa      	ldrb	r2, [r7, #3]
 8005208:	6879      	ldr	r1, [r7, #4]
 800520a:	4613      	mov	r3, r2
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	440b      	add	r3, r1
 8005214:	334d      	adds	r3, #77	@ 0x4d
 8005216:	2204      	movs	r2, #4
 8005218:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	78fa      	ldrb	r2, [r7, #3]
 8005220:	4611      	mov	r1, r2
 8005222:	4618      	mov	r0, r3
 8005224:	f003 fee7 	bl	8008ff6 <USB_HC_Halt>
 8005228:	e03f      	b.n	80052aa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800522a:	78fa      	ldrb	r2, [r7, #3]
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	011b      	lsls	r3, r3, #4
 8005232:	1a9b      	subs	r3, r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	440b      	add	r3, r1
 8005238:	3326      	adds	r3, #38	@ 0x26
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8005240:	78fa      	ldrb	r2, [r7, #3]
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	4613      	mov	r3, r2
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	1a9b      	subs	r3, r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	440b      	add	r3, r1
 800524e:	3326      	adds	r3, #38	@ 0x26
 8005250:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8005252:	2b02      	cmp	r3, #2
 8005254:	d129      	bne.n	80052aa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	6879      	ldr	r1, [r7, #4]
 800525a:	4613      	mov	r3, r2
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	1a9b      	subs	r3, r3, r2
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	440b      	add	r3, r1
 8005264:	3344      	adds	r3, #68	@ 0x44
 8005266:	2200      	movs	r2, #0
 8005268:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	799b      	ldrb	r3, [r3, #6]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HCD_HC_IN_IRQHandler+0xc2a>
 8005272:	78fa      	ldrb	r2, [r7, #3]
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	331b      	adds	r3, #27
 8005282:	781b      	ldrb	r3, [r3, #0]
 8005284:	2b01      	cmp	r3, #1
 8005286:	d110      	bne.n	80052aa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8005288:	78fa      	ldrb	r2, [r7, #3]
 800528a:	6879      	ldr	r1, [r7, #4]
 800528c:	4613      	mov	r3, r2
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	1a9b      	subs	r3, r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	440b      	add	r3, r1
 8005296:	334d      	adds	r3, #77	@ 0x4d
 8005298:	2204      	movs	r2, #4
 800529a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	78fa      	ldrb	r2, [r7, #3]
 80052a2:	4611      	mov	r1, r2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f003 fea6 	bl	8008ff6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	6879      	ldr	r1, [r7, #4]
 80052ae:	4613      	mov	r3, r2
 80052b0:	011b      	lsls	r3, r3, #4
 80052b2:	1a9b      	subs	r3, r3, r2
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	440b      	add	r3, r1
 80052b8:	331b      	adds	r3, #27
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d129      	bne.n	8005314 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	011b      	lsls	r3, r3, #4
 80052c8:	1a9b      	subs	r3, r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	331b      	adds	r3, #27
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80052d4:	78fb      	ldrb	r3, [r7, #3]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	78fa      	ldrb	r2, [r7, #3]
 80052e4:	0151      	lsls	r1, r2, #5
 80052e6:	693a      	ldr	r2, [r7, #16]
 80052e8:	440a      	add	r2, r1
 80052ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80052f4:	78fb      	ldrb	r3, [r7, #3]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	78fa      	ldrb	r2, [r7, #3]
 8005304:	0151      	lsls	r1, r2, #5
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	440a      	add	r2, r1
 800530a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800530e:	f043 0320 	orr.w	r3, r3, #32
 8005312:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	4413      	add	r3, r2
 800531c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005320:	461a      	mov	r2, r3
 8005322:	2310      	movs	r3, #16
 8005324:	6093      	str	r3, [r2, #8]
 8005326:	e000      	b.n	800532a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8005328:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800532a:	3718      	adds	r7, #24
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	460b      	mov	r3, r1
 800533a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	78fa      	ldrb	r2, [r7, #3]
 800534c:	4611      	mov	r1, r2
 800534e:	4618      	mov	r0, r3
 8005350:	f003 f8ad 	bl	80084ae <USB_ReadChInterrupts>
 8005354:	4603      	mov	r3, r0
 8005356:	f003 0304 	and.w	r3, r3, #4
 800535a:	2b04      	cmp	r3, #4
 800535c:	d11b      	bne.n	8005396 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800535e:	78fb      	ldrb	r3, [r7, #3]
 8005360:	015a      	lsls	r2, r3, #5
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	4413      	add	r3, r2
 8005366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800536a:	461a      	mov	r2, r3
 800536c:	2304      	movs	r3, #4
 800536e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8005370:	78fa      	ldrb	r2, [r7, #3]
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	334d      	adds	r3, #77	@ 0x4d
 8005380:	2207      	movs	r2, #7
 8005382:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	78fa      	ldrb	r2, [r7, #3]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f003 fe32 	bl	8008ff6 <USB_HC_Halt>
 8005392:	f000 bc89 	b.w	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	78fa      	ldrb	r2, [r7, #3]
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f003 f885 	bl	80084ae <USB_ReadChInterrupts>
 80053a4:	4603      	mov	r3, r0
 80053a6:	f003 0320 	and.w	r3, r3, #32
 80053aa:	2b20      	cmp	r3, #32
 80053ac:	f040 8082 	bne.w	80054b4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80053b0:	78fb      	ldrb	r3, [r7, #3]
 80053b2:	015a      	lsls	r2, r3, #5
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	4413      	add	r3, r2
 80053b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053bc:	461a      	mov	r2, r3
 80053be:	2320      	movs	r3, #32
 80053c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80053c2:	78fa      	ldrb	r2, [r7, #3]
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	1a9b      	subs	r3, r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3319      	adds	r3, #25
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d124      	bne.n	8005422 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	6879      	ldr	r1, [r7, #4]
 80053dc:	4613      	mov	r3, r2
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	1a9b      	subs	r3, r3, r2
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	3319      	adds	r3, #25
 80053e8:	2200      	movs	r2, #0
 80053ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80053ec:	78fa      	ldrb	r2, [r7, #3]
 80053ee:	6879      	ldr	r1, [r7, #4]
 80053f0:	4613      	mov	r3, r2
 80053f2:	011b      	lsls	r3, r3, #4
 80053f4:	1a9b      	subs	r3, r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	440b      	add	r3, r1
 80053fa:	334c      	adds	r3, #76	@ 0x4c
 80053fc:	2202      	movs	r2, #2
 80053fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	334d      	adds	r3, #77	@ 0x4d
 8005410:	2203      	movs	r2, #3
 8005412:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	78fa      	ldrb	r2, [r7, #3]
 800541a:	4611      	mov	r1, r2
 800541c:	4618      	mov	r0, r3
 800541e:	f003 fdea 	bl	8008ff6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8005422:	78fa      	ldrb	r2, [r7, #3]
 8005424:	6879      	ldr	r1, [r7, #4]
 8005426:	4613      	mov	r3, r2
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	440b      	add	r3, r1
 8005430:	331a      	adds	r3, #26
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b01      	cmp	r3, #1
 8005436:	f040 8437 	bne.w	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
 800543a:	78fa      	ldrb	r2, [r7, #3]
 800543c:	6879      	ldr	r1, [r7, #4]
 800543e:	4613      	mov	r3, r2
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	1a9b      	subs	r3, r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	440b      	add	r3, r1
 8005448:	331b      	adds	r3, #27
 800544a:	781b      	ldrb	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f040 842b 	bne.w	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8005452:	78fa      	ldrb	r2, [r7, #3]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	011b      	lsls	r3, r3, #4
 800545a:	1a9b      	subs	r3, r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	3326      	adds	r3, #38	@ 0x26
 8005462:	781b      	ldrb	r3, [r3, #0]
 8005464:	2b01      	cmp	r3, #1
 8005466:	d009      	beq.n	800547c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8005468:	78fa      	ldrb	r2, [r7, #3]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	011b      	lsls	r3, r3, #4
 8005470:	1a9b      	subs	r3, r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	331b      	adds	r3, #27
 8005478:	2201      	movs	r2, #1
 800547a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800547c:	78fa      	ldrb	r2, [r7, #3]
 800547e:	6879      	ldr	r1, [r7, #4]
 8005480:	4613      	mov	r3, r2
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	1a9b      	subs	r3, r3, r2
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	440b      	add	r3, r1
 800548a:	334d      	adds	r3, #77	@ 0x4d
 800548c:	2203      	movs	r2, #3
 800548e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	4611      	mov	r1, r2
 8005498:	4618      	mov	r0, r3
 800549a:	f003 fdac 	bl	8008ff6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	4613      	mov	r3, r2
 80054a4:	011b      	lsls	r3, r3, #4
 80054a6:	1a9b      	subs	r3, r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	440b      	add	r3, r1
 80054ac:	3344      	adds	r3, #68	@ 0x44
 80054ae:	2200      	movs	r2, #0
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	e3f9      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	78fa      	ldrb	r2, [r7, #3]
 80054ba:	4611      	mov	r1, r2
 80054bc:	4618      	mov	r0, r3
 80054be:	f002 fff6 	bl	80084ae <USB_ReadChInterrupts>
 80054c2:	4603      	mov	r3, r0
 80054c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054cc:	d111      	bne.n	80054f2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80054ce:	78fb      	ldrb	r3, [r7, #3]
 80054d0:	015a      	lsls	r2, r3, #5
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054da:	461a      	mov	r2, r3
 80054dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80054e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	78fa      	ldrb	r2, [r7, #3]
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f003 fd83 	bl	8008ff6 <USB_HC_Halt>
 80054f0:	e3da      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	78fa      	ldrb	r2, [r7, #3]
 80054f8:	4611      	mov	r1, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f002 ffd7 	bl	80084ae <USB_ReadChInterrupts>
 8005500:	4603      	mov	r3, r0
 8005502:	f003 0301 	and.w	r3, r3, #1
 8005506:	2b01      	cmp	r3, #1
 8005508:	d168      	bne.n	80055dc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	6879      	ldr	r1, [r7, #4]
 800550e:	4613      	mov	r3, r2
 8005510:	011b      	lsls	r3, r3, #4
 8005512:	1a9b      	subs	r3, r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	3344      	adds	r3, #68	@ 0x44
 800551a:	2200      	movs	r2, #0
 800551c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f002 ffc1 	bl	80084ae <USB_ReadChInterrupts>
 800552c:	4603      	mov	r3, r0
 800552e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005532:	2b40      	cmp	r3, #64	@ 0x40
 8005534:	d112      	bne.n	800555c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005536:	78fa      	ldrb	r2, [r7, #3]
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	4613      	mov	r3, r2
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	1a9b      	subs	r3, r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	440b      	add	r3, r1
 8005544:	3319      	adds	r3, #25
 8005546:	2201      	movs	r2, #1
 8005548:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	4413      	add	r3, r2
 8005552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005556:	461a      	mov	r2, r3
 8005558:	2340      	movs	r3, #64	@ 0x40
 800555a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800555c:	78fa      	ldrb	r2, [r7, #3]
 800555e:	6879      	ldr	r1, [r7, #4]
 8005560:	4613      	mov	r3, r2
 8005562:	011b      	lsls	r3, r3, #4
 8005564:	1a9b      	subs	r3, r3, r2
 8005566:	009b      	lsls	r3, r3, #2
 8005568:	440b      	add	r3, r1
 800556a:	331b      	adds	r3, #27
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d019      	beq.n	80055a6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005572:	78fa      	ldrb	r2, [r7, #3]
 8005574:	6879      	ldr	r1, [r7, #4]
 8005576:	4613      	mov	r3, r2
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	331b      	adds	r3, #27
 8005582:	2200      	movs	r2, #0
 8005584:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4413      	add	r3, r2
 800558e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	440a      	add	r2, r1
 800559c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055b2:	461a      	mov	r2, r3
 80055b4:	2301      	movs	r3, #1
 80055b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80055b8:	78fa      	ldrb	r2, [r7, #3]
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	4613      	mov	r3, r2
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	1a9b      	subs	r3, r3, r2
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	440b      	add	r3, r1
 80055c6:	334d      	adds	r3, #77	@ 0x4d
 80055c8:	2201      	movs	r2, #1
 80055ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	78fa      	ldrb	r2, [r7, #3]
 80055d2:	4611      	mov	r1, r2
 80055d4:	4618      	mov	r0, r3
 80055d6:	f003 fd0e 	bl	8008ff6 <USB_HC_Halt>
 80055da:	e365      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	78fa      	ldrb	r2, [r7, #3]
 80055e2:	4611      	mov	r1, r2
 80055e4:	4618      	mov	r0, r3
 80055e6:	f002 ff62 	bl	80084ae <USB_ReadChInterrupts>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055f0:	2b40      	cmp	r3, #64	@ 0x40
 80055f2:	d139      	bne.n	8005668 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	6879      	ldr	r1, [r7, #4]
 80055f8:	4613      	mov	r3, r2
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	009b      	lsls	r3, r3, #2
 8005600:	440b      	add	r3, r1
 8005602:	334d      	adds	r3, #77	@ 0x4d
 8005604:	2205      	movs	r2, #5
 8005606:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8005608:	78fa      	ldrb	r2, [r7, #3]
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	011b      	lsls	r3, r3, #4
 8005610:	1a9b      	subs	r3, r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	440b      	add	r3, r1
 8005616:	331a      	adds	r3, #26
 8005618:	781b      	ldrb	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800561e:	78fa      	ldrb	r2, [r7, #3]
 8005620:	6879      	ldr	r1, [r7, #4]
 8005622:	4613      	mov	r3, r2
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	1a9b      	subs	r3, r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	3319      	adds	r3, #25
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005632:	78fa      	ldrb	r2, [r7, #3]
 8005634:	6879      	ldr	r1, [r7, #4]
 8005636:	4613      	mov	r3, r2
 8005638:	011b      	lsls	r3, r3, #4
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	440b      	add	r3, r1
 8005640:	3344      	adds	r3, #68	@ 0x44
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	4611      	mov	r1, r2
 800564e:	4618      	mov	r0, r3
 8005650:	f003 fcd1 	bl	8008ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005654:	78fb      	ldrb	r3, [r7, #3]
 8005656:	015a      	lsls	r2, r3, #5
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	4413      	add	r3, r2
 800565c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005660:	461a      	mov	r2, r3
 8005662:	2340      	movs	r3, #64	@ 0x40
 8005664:	6093      	str	r3, [r2, #8]
 8005666:	e31f      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	78fa      	ldrb	r2, [r7, #3]
 800566e:	4611      	mov	r1, r2
 8005670:	4618      	mov	r0, r3
 8005672:	f002 ff1c 	bl	80084ae <USB_ReadChInterrupts>
 8005676:	4603      	mov	r3, r0
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b08      	cmp	r3, #8
 800567e:	d11a      	bne.n	80056b6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005680:	78fb      	ldrb	r3, [r7, #3]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	4413      	add	r3, r2
 8005688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800568c:	461a      	mov	r2, r3
 800568e:	2308      	movs	r3, #8
 8005690:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005692:	78fa      	ldrb	r2, [r7, #3]
 8005694:	6879      	ldr	r1, [r7, #4]
 8005696:	4613      	mov	r3, r2
 8005698:	011b      	lsls	r3, r3, #4
 800569a:	1a9b      	subs	r3, r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	440b      	add	r3, r1
 80056a0:	334d      	adds	r3, #77	@ 0x4d
 80056a2:	2206      	movs	r2, #6
 80056a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	78fa      	ldrb	r2, [r7, #3]
 80056ac:	4611      	mov	r1, r2
 80056ae:	4618      	mov	r0, r3
 80056b0:	f003 fca1 	bl	8008ff6 <USB_HC_Halt>
 80056b4:	e2f8      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	78fa      	ldrb	r2, [r7, #3]
 80056bc:	4611      	mov	r1, r2
 80056be:	4618      	mov	r0, r3
 80056c0:	f002 fef5 	bl	80084ae <USB_ReadChInterrupts>
 80056c4:	4603      	mov	r3, r0
 80056c6:	f003 0310 	and.w	r3, r3, #16
 80056ca:	2b10      	cmp	r3, #16
 80056cc:	d144      	bne.n	8005758 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	4613      	mov	r3, r2
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	1a9b      	subs	r3, r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	3344      	adds	r3, #68	@ 0x44
 80056de:	2200      	movs	r2, #0
 80056e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80056e2:	78fa      	ldrb	r2, [r7, #3]
 80056e4:	6879      	ldr	r1, [r7, #4]
 80056e6:	4613      	mov	r3, r2
 80056e8:	011b      	lsls	r3, r3, #4
 80056ea:	1a9b      	subs	r3, r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	440b      	add	r3, r1
 80056f0:	334d      	adds	r3, #77	@ 0x4d
 80056f2:	2204      	movs	r2, #4
 80056f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80056f6:	78fa      	ldrb	r2, [r7, #3]
 80056f8:	6879      	ldr	r1, [r7, #4]
 80056fa:	4613      	mov	r3, r2
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	1a9b      	subs	r3, r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	440b      	add	r3, r1
 8005704:	3319      	adds	r3, #25
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d114      	bne.n	8005736 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800570c:	78fa      	ldrb	r2, [r7, #3]
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	4613      	mov	r3, r2
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	1a9b      	subs	r3, r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	440b      	add	r3, r1
 800571a:	3318      	adds	r3, #24
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d109      	bne.n	8005736 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005722:	78fa      	ldrb	r2, [r7, #3]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	011b      	lsls	r3, r3, #4
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	009b      	lsls	r3, r3, #2
 800572e:	440b      	add	r3, r1
 8005730:	3319      	adds	r3, #25
 8005732:	2201      	movs	r2, #1
 8005734:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	78fa      	ldrb	r2, [r7, #3]
 800573c:	4611      	mov	r1, r2
 800573e:	4618      	mov	r0, r3
 8005740:	f003 fc59 	bl	8008ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005744:	78fb      	ldrb	r3, [r7, #3]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005750:	461a      	mov	r2, r3
 8005752:	2310      	movs	r3, #16
 8005754:	6093      	str	r3, [r2, #8]
 8005756:	e2a7      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	78fa      	ldrb	r2, [r7, #3]
 800575e:	4611      	mov	r1, r2
 8005760:	4618      	mov	r0, r3
 8005762:	f002 fea4 	bl	80084ae <USB_ReadChInterrupts>
 8005766:	4603      	mov	r3, r0
 8005768:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800576c:	2b80      	cmp	r3, #128	@ 0x80
 800576e:	f040 8083 	bne.w	8005878 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	799b      	ldrb	r3, [r3, #6]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d111      	bne.n	800579e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800577a:	78fa      	ldrb	r2, [r7, #3]
 800577c:	6879      	ldr	r1, [r7, #4]
 800577e:	4613      	mov	r3, r2
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	1a9b      	subs	r3, r3, r2
 8005784:	009b      	lsls	r3, r3, #2
 8005786:	440b      	add	r3, r1
 8005788:	334d      	adds	r3, #77	@ 0x4d
 800578a:	2207      	movs	r2, #7
 800578c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	78fa      	ldrb	r2, [r7, #3]
 8005794:	4611      	mov	r1, r2
 8005796:	4618      	mov	r0, r3
 8005798:	f003 fc2d 	bl	8008ff6 <USB_HC_Halt>
 800579c:	e062      	b.n	8005864 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800579e:	78fa      	ldrb	r2, [r7, #3]
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	011b      	lsls	r3, r3, #4
 80057a6:	1a9b      	subs	r3, r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3344      	adds	r3, #68	@ 0x44
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	1c59      	adds	r1, r3, #1
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	4613      	mov	r3, r2
 80057b6:	011b      	lsls	r3, r3, #4
 80057b8:	1a9b      	subs	r3, r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4403      	add	r3, r0
 80057be:	3344      	adds	r3, #68	@ 0x44
 80057c0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80057c2:	78fa      	ldrb	r2, [r7, #3]
 80057c4:	6879      	ldr	r1, [r7, #4]
 80057c6:	4613      	mov	r3, r2
 80057c8:	011b      	lsls	r3, r3, #4
 80057ca:	1a9b      	subs	r3, r3, r2
 80057cc:	009b      	lsls	r3, r3, #2
 80057ce:	440b      	add	r3, r1
 80057d0:	3344      	adds	r3, #68	@ 0x44
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d922      	bls.n	800581e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80057d8:	78fa      	ldrb	r2, [r7, #3]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	011b      	lsls	r3, r3, #4
 80057e0:	1a9b      	subs	r3, r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	3344      	adds	r3, #68	@ 0x44
 80057e8:	2200      	movs	r2, #0
 80057ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80057ec:	78fa      	ldrb	r2, [r7, #3]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	011b      	lsls	r3, r3, #4
 80057f4:	1a9b      	subs	r3, r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	334c      	adds	r3, #76	@ 0x4c
 80057fc:	2204      	movs	r2, #4
 80057fe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005800:	78fa      	ldrb	r2, [r7, #3]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	011b      	lsls	r3, r3, #4
 8005808:	1a9b      	subs	r3, r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	334c      	adds	r3, #76	@ 0x4c
 8005810:	781a      	ldrb	r2, [r3, #0]
 8005812:	78fb      	ldrb	r3, [r7, #3]
 8005814:	4619      	mov	r1, r3
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f005 ff46 	bl	800b6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800581c:	e022      	b.n	8005864 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800581e:	78fa      	ldrb	r2, [r7, #3]
 8005820:	6879      	ldr	r1, [r7, #4]
 8005822:	4613      	mov	r3, r2
 8005824:	011b      	lsls	r3, r3, #4
 8005826:	1a9b      	subs	r3, r3, r2
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	440b      	add	r3, r1
 800582c:	334c      	adds	r3, #76	@ 0x4c
 800582e:	2202      	movs	r2, #2
 8005830:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005832:	78fb      	ldrb	r3, [r7, #3]
 8005834:	015a      	lsls	r2, r3, #5
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	4413      	add	r3, r2
 800583a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005848:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005850:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005852:	78fb      	ldrb	r3, [r7, #3]
 8005854:	015a      	lsls	r2, r3, #5
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	4413      	add	r3, r2
 800585a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800585e:	461a      	mov	r2, r3
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005864:	78fb      	ldrb	r3, [r7, #3]
 8005866:	015a      	lsls	r2, r3, #5
 8005868:	693b      	ldr	r3, [r7, #16]
 800586a:	4413      	add	r3, r2
 800586c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005870:	461a      	mov	r2, r3
 8005872:	2380      	movs	r3, #128	@ 0x80
 8005874:	6093      	str	r3, [r2, #8]
 8005876:	e217      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	78fa      	ldrb	r2, [r7, #3]
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f002 fe14 	bl	80084ae <USB_ReadChInterrupts>
 8005886:	4603      	mov	r3, r0
 8005888:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800588c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005890:	d11b      	bne.n	80058ca <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005892:	78fa      	ldrb	r2, [r7, #3]
 8005894:	6879      	ldr	r1, [r7, #4]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	440b      	add	r3, r1
 80058a0:	334d      	adds	r3, #77	@ 0x4d
 80058a2:	2209      	movs	r2, #9
 80058a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	78fa      	ldrb	r2, [r7, #3]
 80058ac:	4611      	mov	r1, r2
 80058ae:	4618      	mov	r0, r3
 80058b0:	f003 fba1 	bl	8008ff6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058c0:	461a      	mov	r2, r3
 80058c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80058c6:	6093      	str	r3, [r2, #8]
 80058c8:	e1ee      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	78fa      	ldrb	r2, [r7, #3]
 80058d0:	4611      	mov	r1, r2
 80058d2:	4618      	mov	r0, r3
 80058d4:	f002 fdeb 	bl	80084ae <USB_ReadChInterrupts>
 80058d8:	4603      	mov	r3, r0
 80058da:	f003 0302 	and.w	r3, r3, #2
 80058de:	2b02      	cmp	r3, #2
 80058e0:	f040 81df 	bne.w	8005ca2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80058e4:	78fb      	ldrb	r3, [r7, #3]
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058f0:	461a      	mov	r2, r3
 80058f2:	2302      	movs	r3, #2
 80058f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	6879      	ldr	r1, [r7, #4]
 80058fa:	4613      	mov	r3, r2
 80058fc:	011b      	lsls	r3, r3, #4
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	440b      	add	r3, r1
 8005904:	334d      	adds	r3, #77	@ 0x4d
 8005906:	781b      	ldrb	r3, [r3, #0]
 8005908:	2b01      	cmp	r3, #1
 800590a:	f040 8093 	bne.w	8005a34 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800590e:	78fa      	ldrb	r2, [r7, #3]
 8005910:	6879      	ldr	r1, [r7, #4]
 8005912:	4613      	mov	r3, r2
 8005914:	011b      	lsls	r3, r3, #4
 8005916:	1a9b      	subs	r3, r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	334d      	adds	r3, #77	@ 0x4d
 800591e:	2202      	movs	r2, #2
 8005920:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005922:	78fa      	ldrb	r2, [r7, #3]
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	4613      	mov	r3, r2
 8005928:	011b      	lsls	r3, r3, #4
 800592a:	1a9b      	subs	r3, r3, r2
 800592c:	009b      	lsls	r3, r3, #2
 800592e:	440b      	add	r3, r1
 8005930:	334c      	adds	r3, #76	@ 0x4c
 8005932:	2201      	movs	r2, #1
 8005934:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005936:	78fa      	ldrb	r2, [r7, #3]
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	011b      	lsls	r3, r3, #4
 800593e:	1a9b      	subs	r3, r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3326      	adds	r3, #38	@ 0x26
 8005946:	781b      	ldrb	r3, [r3, #0]
 8005948:	2b02      	cmp	r3, #2
 800594a:	d00b      	beq.n	8005964 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800594c:	78fa      	ldrb	r2, [r7, #3]
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	4613      	mov	r3, r2
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	1a9b      	subs	r3, r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	440b      	add	r3, r1
 800595a:	3326      	adds	r3, #38	@ 0x26
 800595c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800595e:	2b03      	cmp	r3, #3
 8005960:	f040 8190 	bne.w	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	799b      	ldrb	r3, [r3, #6]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d115      	bne.n	8005998 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800596c:	78fa      	ldrb	r2, [r7, #3]
 800596e:	6879      	ldr	r1, [r7, #4]
 8005970:	4613      	mov	r3, r2
 8005972:	011b      	lsls	r3, r3, #4
 8005974:	1a9b      	subs	r3, r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	333d      	adds	r3, #61	@ 0x3d
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	78fa      	ldrb	r2, [r7, #3]
 8005980:	f083 0301 	eor.w	r3, r3, #1
 8005984:	b2d8      	uxtb	r0, r3
 8005986:	6879      	ldr	r1, [r7, #4]
 8005988:	4613      	mov	r3, r2
 800598a:	011b      	lsls	r3, r3, #4
 800598c:	1a9b      	subs	r3, r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	440b      	add	r3, r1
 8005992:	333d      	adds	r3, #61	@ 0x3d
 8005994:	4602      	mov	r2, r0
 8005996:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	799b      	ldrb	r3, [r3, #6]
 800599c:	2b01      	cmp	r3, #1
 800599e:	f040 8171 	bne.w	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
 80059a2:	78fa      	ldrb	r2, [r7, #3]
 80059a4:	6879      	ldr	r1, [r7, #4]
 80059a6:	4613      	mov	r3, r2
 80059a8:	011b      	lsls	r3, r3, #4
 80059aa:	1a9b      	subs	r3, r3, r2
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	440b      	add	r3, r1
 80059b0:	3334      	adds	r3, #52	@ 0x34
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8165 	beq.w	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80059ba:	78fa      	ldrb	r2, [r7, #3]
 80059bc:	6879      	ldr	r1, [r7, #4]
 80059be:	4613      	mov	r3, r2
 80059c0:	011b      	lsls	r3, r3, #4
 80059c2:	1a9b      	subs	r3, r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	440b      	add	r3, r1
 80059c8:	3334      	adds	r3, #52	@ 0x34
 80059ca:	6819      	ldr	r1, [r3, #0]
 80059cc:	78fa      	ldrb	r2, [r7, #3]
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	4613      	mov	r3, r2
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	1a9b      	subs	r3, r3, r2
 80059d6:	009b      	lsls	r3, r3, #2
 80059d8:	4403      	add	r3, r0
 80059da:	3328      	adds	r3, #40	@ 0x28
 80059dc:	881b      	ldrh	r3, [r3, #0]
 80059de:	440b      	add	r3, r1
 80059e0:	1e59      	subs	r1, r3, #1
 80059e2:	78fa      	ldrb	r2, [r7, #3]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	4613      	mov	r3, r2
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	1a9b      	subs	r3, r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4403      	add	r3, r0
 80059f0:	3328      	adds	r3, #40	@ 0x28
 80059f2:	881b      	ldrh	r3, [r3, #0]
 80059f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80059f8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80059fa:	68bb      	ldr	r3, [r7, #8]
 80059fc:	f003 0301 	and.w	r3, r3, #1
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f000 813f 	beq.w	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8005a06:	78fa      	ldrb	r2, [r7, #3]
 8005a08:	6879      	ldr	r1, [r7, #4]
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	1a9b      	subs	r3, r3, r2
 8005a10:	009b      	lsls	r3, r3, #2
 8005a12:	440b      	add	r3, r1
 8005a14:	333d      	adds	r3, #61	@ 0x3d
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	78fa      	ldrb	r2, [r7, #3]
 8005a1a:	f083 0301 	eor.w	r3, r3, #1
 8005a1e:	b2d8      	uxtb	r0, r3
 8005a20:	6879      	ldr	r1, [r7, #4]
 8005a22:	4613      	mov	r3, r2
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	440b      	add	r3, r1
 8005a2c:	333d      	adds	r3, #61	@ 0x3d
 8005a2e:	4602      	mov	r2, r0
 8005a30:	701a      	strb	r2, [r3, #0]
 8005a32:	e127      	b.n	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005a34:	78fa      	ldrb	r2, [r7, #3]
 8005a36:	6879      	ldr	r1, [r7, #4]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	1a9b      	subs	r3, r3, r2
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	440b      	add	r3, r1
 8005a42:	334d      	adds	r3, #77	@ 0x4d
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	2b03      	cmp	r3, #3
 8005a48:	d120      	bne.n	8005a8c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005a4a:	78fa      	ldrb	r2, [r7, #3]
 8005a4c:	6879      	ldr	r1, [r7, #4]
 8005a4e:	4613      	mov	r3, r2
 8005a50:	011b      	lsls	r3, r3, #4
 8005a52:	1a9b      	subs	r3, r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	440b      	add	r3, r1
 8005a58:	334d      	adds	r3, #77	@ 0x4d
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005a5e:	78fa      	ldrb	r2, [r7, #3]
 8005a60:	6879      	ldr	r1, [r7, #4]
 8005a62:	4613      	mov	r3, r2
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	1a9b      	subs	r3, r3, r2
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	440b      	add	r3, r1
 8005a6c:	331b      	adds	r3, #27
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	f040 8107 	bne.w	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005a76:	78fa      	ldrb	r2, [r7, #3]
 8005a78:	6879      	ldr	r1, [r7, #4]
 8005a7a:	4613      	mov	r3, r2
 8005a7c:	011b      	lsls	r3, r3, #4
 8005a7e:	1a9b      	subs	r3, r3, r2
 8005a80:	009b      	lsls	r3, r3, #2
 8005a82:	440b      	add	r3, r1
 8005a84:	334c      	adds	r3, #76	@ 0x4c
 8005a86:	2202      	movs	r2, #2
 8005a88:	701a      	strb	r2, [r3, #0]
 8005a8a:	e0fb      	b.n	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8005a8c:	78fa      	ldrb	r2, [r7, #3]
 8005a8e:	6879      	ldr	r1, [r7, #4]
 8005a90:	4613      	mov	r3, r2
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	1a9b      	subs	r3, r3, r2
 8005a96:	009b      	lsls	r3, r3, #2
 8005a98:	440b      	add	r3, r1
 8005a9a:	334d      	adds	r3, #77	@ 0x4d
 8005a9c:	781b      	ldrb	r3, [r3, #0]
 8005a9e:	2b04      	cmp	r3, #4
 8005aa0:	d13a      	bne.n	8005b18 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005aa2:	78fa      	ldrb	r2, [r7, #3]
 8005aa4:	6879      	ldr	r1, [r7, #4]
 8005aa6:	4613      	mov	r3, r2
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	1a9b      	subs	r3, r3, r2
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	440b      	add	r3, r1
 8005ab0:	334d      	adds	r3, #77	@ 0x4d
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005ab6:	78fa      	ldrb	r2, [r7, #3]
 8005ab8:	6879      	ldr	r1, [r7, #4]
 8005aba:	4613      	mov	r3, r2
 8005abc:	011b      	lsls	r3, r3, #4
 8005abe:	1a9b      	subs	r3, r3, r2
 8005ac0:	009b      	lsls	r3, r3, #2
 8005ac2:	440b      	add	r3, r1
 8005ac4:	334c      	adds	r3, #76	@ 0x4c
 8005ac6:	2202      	movs	r2, #2
 8005ac8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005aca:	78fa      	ldrb	r2, [r7, #3]
 8005acc:	6879      	ldr	r1, [r7, #4]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	011b      	lsls	r3, r3, #4
 8005ad2:	1a9b      	subs	r3, r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	440b      	add	r3, r1
 8005ad8:	331b      	adds	r3, #27
 8005ada:	781b      	ldrb	r3, [r3, #0]
 8005adc:	2b01      	cmp	r3, #1
 8005ade:	f040 80d1 	bne.w	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8005ae2:	78fa      	ldrb	r2, [r7, #3]
 8005ae4:	6879      	ldr	r1, [r7, #4]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	1a9b      	subs	r3, r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	331b      	adds	r3, #27
 8005af2:	2200      	movs	r2, #0
 8005af4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005af6:	78fb      	ldrb	r3, [r7, #3]
 8005af8:	015a      	lsls	r2, r3, #5
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	4413      	add	r3, r2
 8005afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005b02:	685b      	ldr	r3, [r3, #4]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	0151      	lsls	r1, r2, #5
 8005b08:	693a      	ldr	r2, [r7, #16]
 8005b0a:	440a      	add	r2, r1
 8005b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005b10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b14:	6053      	str	r3, [r2, #4]
 8005b16:	e0b5      	b.n	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8005b18:	78fa      	ldrb	r2, [r7, #3]
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	1a9b      	subs	r3, r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	334d      	adds	r3, #77	@ 0x4d
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	d114      	bne.n	8005b58 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b2e:	78fa      	ldrb	r2, [r7, #3]
 8005b30:	6879      	ldr	r1, [r7, #4]
 8005b32:	4613      	mov	r3, r2
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	1a9b      	subs	r3, r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	334d      	adds	r3, #77	@ 0x4d
 8005b3e:	2202      	movs	r2, #2
 8005b40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005b42:	78fa      	ldrb	r2, [r7, #3]
 8005b44:	6879      	ldr	r1, [r7, #4]
 8005b46:	4613      	mov	r3, r2
 8005b48:	011b      	lsls	r3, r3, #4
 8005b4a:	1a9b      	subs	r3, r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	440b      	add	r3, r1
 8005b50:	334c      	adds	r3, #76	@ 0x4c
 8005b52:	2202      	movs	r2, #2
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	e095      	b.n	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8005b58:	78fa      	ldrb	r2, [r7, #3]
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	011b      	lsls	r3, r3, #4
 8005b60:	1a9b      	subs	r3, r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	334d      	adds	r3, #77	@ 0x4d
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	2b06      	cmp	r3, #6
 8005b6c:	d114      	bne.n	8005b98 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005b6e:	78fa      	ldrb	r2, [r7, #3]
 8005b70:	6879      	ldr	r1, [r7, #4]
 8005b72:	4613      	mov	r3, r2
 8005b74:	011b      	lsls	r3, r3, #4
 8005b76:	1a9b      	subs	r3, r3, r2
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	440b      	add	r3, r1
 8005b7c:	334d      	adds	r3, #77	@ 0x4d
 8005b7e:	2202      	movs	r2, #2
 8005b80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005b82:	78fa      	ldrb	r2, [r7, #3]
 8005b84:	6879      	ldr	r1, [r7, #4]
 8005b86:	4613      	mov	r3, r2
 8005b88:	011b      	lsls	r3, r3, #4
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	334c      	adds	r3, #76	@ 0x4c
 8005b92:	2205      	movs	r2, #5
 8005b94:	701a      	strb	r2, [r3, #0]
 8005b96:	e075      	b.n	8005c84 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005b98:	78fa      	ldrb	r2, [r7, #3]
 8005b9a:	6879      	ldr	r1, [r7, #4]
 8005b9c:	4613      	mov	r3, r2
 8005b9e:	011b      	lsls	r3, r3, #4
 8005ba0:	1a9b      	subs	r3, r3, r2
 8005ba2:	009b      	lsls	r3, r3, #2
 8005ba4:	440b      	add	r3, r1
 8005ba6:	334d      	adds	r3, #77	@ 0x4d
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b07      	cmp	r3, #7
 8005bac:	d00a      	beq.n	8005bc4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	6879      	ldr	r1, [r7, #4]
 8005bb2:	4613      	mov	r3, r2
 8005bb4:	011b      	lsls	r3, r3, #4
 8005bb6:	1a9b      	subs	r3, r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	440b      	add	r3, r1
 8005bbc:	334d      	adds	r3, #77	@ 0x4d
 8005bbe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8005bc0:	2b09      	cmp	r3, #9
 8005bc2:	d170      	bne.n	8005ca6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005bc4:	78fa      	ldrb	r2, [r7, #3]
 8005bc6:	6879      	ldr	r1, [r7, #4]
 8005bc8:	4613      	mov	r3, r2
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	1a9b      	subs	r3, r3, r2
 8005bce:	009b      	lsls	r3, r3, #2
 8005bd0:	440b      	add	r3, r1
 8005bd2:	334d      	adds	r3, #77	@ 0x4d
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8005bd8:	78fa      	ldrb	r2, [r7, #3]
 8005bda:	6879      	ldr	r1, [r7, #4]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	1a9b      	subs	r3, r3, r2
 8005be2:	009b      	lsls	r3, r3, #2
 8005be4:	440b      	add	r3, r1
 8005be6:	3344      	adds	r3, #68	@ 0x44
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	1c59      	adds	r1, r3, #1
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	011b      	lsls	r3, r3, #4
 8005bf2:	1a9b      	subs	r3, r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	4403      	add	r3, r0
 8005bf8:	3344      	adds	r3, #68	@ 0x44
 8005bfa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005bfc:	78fa      	ldrb	r2, [r7, #3]
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	4613      	mov	r3, r2
 8005c02:	011b      	lsls	r3, r3, #4
 8005c04:	1a9b      	subs	r3, r3, r2
 8005c06:	009b      	lsls	r3, r3, #2
 8005c08:	440b      	add	r3, r1
 8005c0a:	3344      	adds	r3, #68	@ 0x44
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	d914      	bls.n	8005c3c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	4613      	mov	r3, r2
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	1a9b      	subs	r3, r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	440b      	add	r3, r1
 8005c20:	3344      	adds	r3, #68	@ 0x44
 8005c22:	2200      	movs	r2, #0
 8005c24:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005c26:	78fa      	ldrb	r2, [r7, #3]
 8005c28:	6879      	ldr	r1, [r7, #4]
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	011b      	lsls	r3, r3, #4
 8005c2e:	1a9b      	subs	r3, r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	334c      	adds	r3, #76	@ 0x4c
 8005c36:	2204      	movs	r2, #4
 8005c38:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c3a:	e022      	b.n	8005c82 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005c3c:	78fa      	ldrb	r2, [r7, #3]
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	1a9b      	subs	r3, r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	334c      	adds	r3, #76	@ 0x4c
 8005c4c:	2202      	movs	r2, #2
 8005c4e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c50:	78fb      	ldrb	r3, [r7, #3]
 8005c52:	015a      	lsls	r2, r3, #5
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	4413      	add	r3, r2
 8005c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005c66:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005c6e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005c82:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005c84:	78fa      	ldrb	r2, [r7, #3]
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	4613      	mov	r3, r2
 8005c8a:	011b      	lsls	r3, r3, #4
 8005c8c:	1a9b      	subs	r3, r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	440b      	add	r3, r1
 8005c92:	334c      	adds	r3, #76	@ 0x4c
 8005c94:	781a      	ldrb	r2, [r3, #0]
 8005c96:	78fb      	ldrb	r3, [r7, #3]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f005 fd04 	bl	800b6a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005ca0:	e002      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005ca2:	bf00      	nop
 8005ca4:	e000      	b.n	8005ca8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005ca6:	bf00      	nop
  }
}
 8005ca8:	3718      	adds	r7, #24
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b08a      	sub	sp, #40	@ 0x28
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cbe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6a1b      	ldr	r3, [r3, #32]
 8005cc6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f003 030f 	and.w	r3, r3, #15
 8005cce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8005cd0:	69fb      	ldr	r3, [r7, #28]
 8005cd2:	0c5b      	lsrs	r3, r3, #17
 8005cd4:	f003 030f 	and.w	r3, r3, #15
 8005cd8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005cda:	69fb      	ldr	r3, [r7, #28]
 8005cdc:	091b      	lsrs	r3, r3, #4
 8005cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ce2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	d004      	beq.n	8005cf4 <HCD_RXQLVL_IRQHandler+0x46>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	2b05      	cmp	r3, #5
 8005cee:	f000 80b6 	beq.w	8005e5e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005cf2:	e0b7      	b.n	8005e64 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 80b3 	beq.w	8005e62 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005cfc:	6879      	ldr	r1, [r7, #4]
 8005cfe:	69ba      	ldr	r2, [r7, #24]
 8005d00:	4613      	mov	r3, r2
 8005d02:	011b      	lsls	r3, r3, #4
 8005d04:	1a9b      	subs	r3, r3, r2
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	440b      	add	r3, r1
 8005d0a:	332c      	adds	r3, #44	@ 0x2c
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 80a7 	beq.w	8005e62 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005d14:	6879      	ldr	r1, [r7, #4]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	1a9b      	subs	r3, r3, r2
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	440b      	add	r3, r1
 8005d22:	3338      	adds	r3, #56	@ 0x38
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	693b      	ldr	r3, [r7, #16]
 8005d28:	18d1      	adds	r1, r2, r3
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	4613      	mov	r3, r2
 8005d30:	011b      	lsls	r3, r3, #4
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4403      	add	r3, r0
 8005d38:	3334      	adds	r3, #52	@ 0x34
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4299      	cmp	r1, r3
 8005d3e:	f200 8083 	bhi.w	8005e48 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6818      	ldr	r0, [r3, #0]
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	011b      	lsls	r3, r3, #4
 8005d4e:	1a9b      	subs	r3, r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	332c      	adds	r3, #44	@ 0x2c
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	b292      	uxth	r2, r2
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	f002 fb3b 	bl	80083d8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005d62:	6879      	ldr	r1, [r7, #4]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	4613      	mov	r3, r2
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	1a9b      	subs	r3, r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	440b      	add	r3, r1
 8005d70:	332c      	adds	r3, #44	@ 0x2c
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	18d1      	adds	r1, r2, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	69ba      	ldr	r2, [r7, #24]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	011b      	lsls	r3, r3, #4
 8005d80:	1a9b      	subs	r3, r3, r2
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	4403      	add	r3, r0
 8005d86:	332c      	adds	r3, #44	@ 0x2c
 8005d88:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8005d8a:	6879      	ldr	r1, [r7, #4]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	4613      	mov	r3, r2
 8005d90:	011b      	lsls	r3, r3, #4
 8005d92:	1a9b      	subs	r3, r3, r2
 8005d94:	009b      	lsls	r3, r3, #2
 8005d96:	440b      	add	r3, r1
 8005d98:	3338      	adds	r3, #56	@ 0x38
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	18d1      	adds	r1, r2, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	69ba      	ldr	r2, [r7, #24]
 8005da4:	4613      	mov	r3, r2
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	1a9b      	subs	r3, r3, r2
 8005daa:	009b      	lsls	r3, r3, #2
 8005dac:	4403      	add	r3, r0
 8005dae:	3338      	adds	r3, #56	@ 0x38
 8005db0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	015a      	lsls	r2, r3, #5
 8005db6:	6a3b      	ldr	r3, [r7, #32]
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	0cdb      	lsrs	r3, r3, #19
 8005dc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dc6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005dc8:	6879      	ldr	r1, [r7, #4]
 8005dca:	69ba      	ldr	r2, [r7, #24]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	011b      	lsls	r3, r3, #4
 8005dd0:	1a9b      	subs	r3, r3, r2
 8005dd2:	009b      	lsls	r3, r3, #2
 8005dd4:	440b      	add	r3, r1
 8005dd6:	3328      	adds	r3, #40	@ 0x28
 8005dd8:	881b      	ldrh	r3, [r3, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d13f      	bne.n	8005e62 <HCD_RXQLVL_IRQHandler+0x1b4>
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d03c      	beq.n	8005e62 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	6a3b      	ldr	r3, [r7, #32]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005dfe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005e06:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	6a3b      	ldr	r3, [r7, #32]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005e14:	461a      	mov	r2, r3
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8005e1a:	6879      	ldr	r1, [r7, #4]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	011b      	lsls	r3, r3, #4
 8005e22:	1a9b      	subs	r3, r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	333c      	adds	r3, #60	@ 0x3c
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	f083 0301 	eor.w	r3, r3, #1
 8005e30:	b2d8      	uxtb	r0, r3
 8005e32:	6879      	ldr	r1, [r7, #4]
 8005e34:	69ba      	ldr	r2, [r7, #24]
 8005e36:	4613      	mov	r3, r2
 8005e38:	011b      	lsls	r3, r3, #4
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	009b      	lsls	r3, r3, #2
 8005e3e:	440b      	add	r3, r1
 8005e40:	333c      	adds	r3, #60	@ 0x3c
 8005e42:	4602      	mov	r2, r0
 8005e44:	701a      	strb	r2, [r3, #0]
      break;
 8005e46:	e00c      	b.n	8005e62 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8005e48:	6879      	ldr	r1, [r7, #4]
 8005e4a:	69ba      	ldr	r2, [r7, #24]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	011b      	lsls	r3, r3, #4
 8005e50:	1a9b      	subs	r3, r3, r2
 8005e52:	009b      	lsls	r3, r3, #2
 8005e54:	440b      	add	r3, r1
 8005e56:	334c      	adds	r3, #76	@ 0x4c
 8005e58:	2204      	movs	r2, #4
 8005e5a:	701a      	strb	r2, [r3, #0]
      break;
 8005e5c:	e001      	b.n	8005e62 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005e5e:	bf00      	nop
 8005e60:	e000      	b.n	8005e64 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005e62:	bf00      	nop
  }
}
 8005e64:	bf00      	nop
 8005e66:	3728      	adds	r7, #40	@ 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005e98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f003 0302 	and.w	r3, r3, #2
 8005ea0:	2b02      	cmp	r3, #2
 8005ea2:	d10b      	bne.n	8005ebc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	2b01      	cmp	r3, #1
 8005eac:	d102      	bne.n	8005eb4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f005 fbde 	bl	800b670 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f043 0302 	orr.w	r3, r3, #2
 8005eba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	f003 0308 	and.w	r3, r3, #8
 8005ec2:	2b08      	cmp	r3, #8
 8005ec4:	d132      	bne.n	8005f2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f043 0308 	orr.w	r3, r3, #8
 8005ecc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f003 0304 	and.w	r3, r3, #4
 8005ed4:	2b04      	cmp	r3, #4
 8005ed6:	d126      	bne.n	8005f26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	7a5b      	ldrb	r3, [r3, #9]
 8005edc:	2b02      	cmp	r3, #2
 8005ede:	d113      	bne.n	8005f08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8005ee6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005eea:	d106      	bne.n	8005efa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	2102      	movs	r1, #2
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f002 fc00 	bl	80086f8 <USB_InitFSLSPClkSel>
 8005ef8:	e011      	b.n	8005f1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2101      	movs	r1, #1
 8005f00:	4618      	mov	r0, r3
 8005f02:	f002 fbf9 	bl	80086f8 <USB_InitFSLSPClkSel>
 8005f06:	e00a      	b.n	8005f1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	79db      	ldrb	r3, [r3, #7]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d106      	bne.n	8005f1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f16:	461a      	mov	r2, r3
 8005f18:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005f1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f005 fbd0 	bl	800b6c4 <HAL_HCD_PortEnabled_Callback>
 8005f24:	e002      	b.n	8005f2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f005 fbda 	bl	800b6e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b20      	cmp	r3, #32
 8005f34:	d103      	bne.n	8005f3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f043 0320 	orr.w	r3, r3, #32
 8005f3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005f44:	461a      	mov	r2, r3
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	6013      	str	r3, [r2, #0]
}
 8005f4a:	bf00      	nop
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
	...

08005f54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d101      	bne.n	8005f66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f62:	2301      	movs	r3, #1
 8005f64:	e12b      	b.n	80061be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d106      	bne.n	8005f80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	2200      	movs	r2, #0
 8005f76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f7fd f8e0 	bl	8003140 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2224      	movs	r2, #36	@ 0x24
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0201 	bic.w	r2, r2, #1
 8005f96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005fa6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005fb8:	f001 fa20 	bl	80073fc <HAL_RCC_GetPCLK1Freq>
 8005fbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	4a81      	ldr	r2, [pc, #516]	@ (80061c8 <HAL_I2C_Init+0x274>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d807      	bhi.n	8005fd8 <HAL_I2C_Init+0x84>
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4a80      	ldr	r2, [pc, #512]	@ (80061cc <HAL_I2C_Init+0x278>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	bf94      	ite	ls
 8005fd0:	2301      	movls	r3, #1
 8005fd2:	2300      	movhi	r3, #0
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	e006      	b.n	8005fe6 <HAL_I2C_Init+0x92>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	4a7d      	ldr	r2, [pc, #500]	@ (80061d0 <HAL_I2C_Init+0x27c>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	bf94      	ite	ls
 8005fe0:	2301      	movls	r3, #1
 8005fe2:	2300      	movhi	r3, #0
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d001      	beq.n	8005fee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005fea:	2301      	movs	r3, #1
 8005fec:	e0e7      	b.n	80061be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4a78      	ldr	r2, [pc, #480]	@ (80061d4 <HAL_I2C_Init+0x280>)
 8005ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ff6:	0c9b      	lsrs	r3, r3, #18
 8005ff8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68ba      	ldr	r2, [r7, #8]
 800600a:	430a      	orrs	r2, r1
 800600c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6a1b      	ldr	r3, [r3, #32]
 8006014:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	685b      	ldr	r3, [r3, #4]
 800601c:	4a6a      	ldr	r2, [pc, #424]	@ (80061c8 <HAL_I2C_Init+0x274>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d802      	bhi.n	8006028 <HAL_I2C_Init+0xd4>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	3301      	adds	r3, #1
 8006026:	e009      	b.n	800603c <HAL_I2C_Init+0xe8>
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800602e:	fb02 f303 	mul.w	r3, r2, r3
 8006032:	4a69      	ldr	r2, [pc, #420]	@ (80061d8 <HAL_I2C_Init+0x284>)
 8006034:	fba2 2303 	umull	r2, r3, r2, r3
 8006038:	099b      	lsrs	r3, r3, #6
 800603a:	3301      	adds	r3, #1
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6812      	ldr	r2, [r2, #0]
 8006040:	430b      	orrs	r3, r1
 8006042:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800604e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	495c      	ldr	r1, [pc, #368]	@ (80061c8 <HAL_I2C_Init+0x274>)
 8006058:	428b      	cmp	r3, r1
 800605a:	d819      	bhi.n	8006090 <HAL_I2C_Init+0x13c>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1e59      	subs	r1, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	fbb1 f3f3 	udiv	r3, r1, r3
 800606a:	1c59      	adds	r1, r3, #1
 800606c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006070:	400b      	ands	r3, r1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <HAL_I2C_Init+0x138>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	1e59      	subs	r1, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	fbb1 f3f3 	udiv	r3, r1, r3
 8006084:	3301      	adds	r3, #1
 8006086:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800608a:	e051      	b.n	8006130 <HAL_I2C_Init+0x1dc>
 800608c:	2304      	movs	r3, #4
 800608e:	e04f      	b.n	8006130 <HAL_I2C_Init+0x1dc>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d111      	bne.n	80060bc <HAL_I2C_Init+0x168>
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	1e58      	subs	r0, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6859      	ldr	r1, [r3, #4]
 80060a0:	460b      	mov	r3, r1
 80060a2:	005b      	lsls	r3, r3, #1
 80060a4:	440b      	add	r3, r1
 80060a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80060aa:	3301      	adds	r3, #1
 80060ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf0c      	ite	eq
 80060b4:	2301      	moveq	r3, #1
 80060b6:	2300      	movne	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	e012      	b.n	80060e2 <HAL_I2C_Init+0x18e>
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	1e58      	subs	r0, r3, #1
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6859      	ldr	r1, [r3, #4]
 80060c4:	460b      	mov	r3, r1
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	440b      	add	r3, r1
 80060ca:	0099      	lsls	r1, r3, #2
 80060cc:	440b      	add	r3, r1
 80060ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80060d2:	3301      	adds	r3, #1
 80060d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80060d8:	2b00      	cmp	r3, #0
 80060da:	bf0c      	ite	eq
 80060dc:	2301      	moveq	r3, #1
 80060de:	2300      	movne	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_I2C_Init+0x196>
 80060e6:	2301      	movs	r3, #1
 80060e8:	e022      	b.n	8006130 <HAL_I2C_Init+0x1dc>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10e      	bne.n	8006110 <HAL_I2C_Init+0x1bc>
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	1e58      	subs	r0, r3, #1
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6859      	ldr	r1, [r3, #4]
 80060fa:	460b      	mov	r3, r1
 80060fc:	005b      	lsls	r3, r3, #1
 80060fe:	440b      	add	r3, r1
 8006100:	fbb0 f3f3 	udiv	r3, r0, r3
 8006104:	3301      	adds	r3, #1
 8006106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800610a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800610e:	e00f      	b.n	8006130 <HAL_I2C_Init+0x1dc>
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	1e58      	subs	r0, r3, #1
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6859      	ldr	r1, [r3, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	0099      	lsls	r1, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	fbb0 f3f3 	udiv	r3, r0, r3
 8006126:	3301      	adds	r3, #1
 8006128:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800612c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006130:	6879      	ldr	r1, [r7, #4]
 8006132:	6809      	ldr	r1, [r1, #0]
 8006134:	4313      	orrs	r3, r2
 8006136:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	69da      	ldr	r2, [r3, #28]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	431a      	orrs	r2, r3
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	430a      	orrs	r2, r1
 8006152:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	689b      	ldr	r3, [r3, #8]
 800615a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800615e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006162:	687a      	ldr	r2, [r7, #4]
 8006164:	6911      	ldr	r1, [r2, #16]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68d2      	ldr	r2, [r2, #12]
 800616a:	4311      	orrs	r1, r2
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6812      	ldr	r2, [r2, #0]
 8006170:	430b      	orrs	r3, r1
 8006172:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68db      	ldr	r3, [r3, #12]
 800617a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	695a      	ldr	r2, [r3, #20]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	699b      	ldr	r3, [r3, #24]
 8006186:	431a      	orrs	r2, r3
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	430a      	orrs	r2, r1
 800618e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0201 	orr.w	r2, r2, #1
 800619e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	000186a0 	.word	0x000186a0
 80061cc:	001e847f 	.word	0x001e847f
 80061d0:	003d08ff 	.word	0x003d08ff
 80061d4:	431bde83 	.word	0x431bde83
 80061d8:	10624dd3 	.word	0x10624dd3

080061dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d101      	bne.n	80061ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e128      	b.n	8006440 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d109      	bne.n	800620e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4a90      	ldr	r2, [pc, #576]	@ (8006448 <HAL_I2S_Init+0x26c>)
 8006206:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fc ffe1 	bl	80031d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2202      	movs	r2, #2
 8006212:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69db      	ldr	r3, [r3, #28]
 800621c:	687a      	ldr	r2, [r7, #4]
 800621e:	6812      	ldr	r2, [r2, #0]
 8006220:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8006224:	f023 030f 	bic.w	r3, r3, #15
 8006228:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	2202      	movs	r2, #2
 8006230:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	695b      	ldr	r3, [r3, #20]
 8006236:	2b02      	cmp	r3, #2
 8006238:	d060      	beq.n	80062fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d102      	bne.n	8006248 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8006242:	2310      	movs	r3, #16
 8006244:	617b      	str	r3, [r7, #20]
 8006246:	e001      	b.n	800624c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8006248:	2320      	movs	r3, #32
 800624a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b20      	cmp	r3, #32
 8006252:	d802      	bhi.n	800625a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800625a:	2001      	movs	r0, #1
 800625c:	f001 f9d8 	bl	8007610 <HAL_RCCEx_GetPeriphCLKFreq>
 8006260:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800626a:	d125      	bne.n	80062b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d010      	beq.n	8006296 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	68fa      	ldr	r2, [r7, #12]
 800627a:	fbb2 f2f3 	udiv	r2, r2, r3
 800627e:	4613      	mov	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	4413      	add	r3, r2
 8006284:	005b      	lsls	r3, r3, #1
 8006286:	461a      	mov	r2, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006290:	3305      	adds	r3, #5
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	e01f      	b.n	80062d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	00db      	lsls	r3, r3, #3
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	fbb2 f2f3 	udiv	r2, r2, r3
 80062a0:	4613      	mov	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	4413      	add	r3, r2
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	461a      	mov	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	695b      	ldr	r3, [r3, #20]
 80062ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80062b2:	3305      	adds	r3, #5
 80062b4:	613b      	str	r3, [r7, #16]
 80062b6:	e00e      	b.n	80062d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80062c0:	4613      	mov	r3, r2
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	4413      	add	r3, r2
 80062c6:	005b      	lsls	r3, r3, #1
 80062c8:	461a      	mov	r2, r3
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	695b      	ldr	r3, [r3, #20]
 80062ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80062d2:	3305      	adds	r3, #5
 80062d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	4a5c      	ldr	r2, [pc, #368]	@ (800644c <HAL_I2S_Init+0x270>)
 80062da:	fba2 2303 	umull	r2, r3, r2, r3
 80062de:	08db      	lsrs	r3, r3, #3
 80062e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f003 0301 	and.w	r3, r3, #1
 80062e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80062ea:	693a      	ldr	r2, [r7, #16]
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	1ad3      	subs	r3, r2, r3
 80062f0:	085b      	lsrs	r3, r3, #1
 80062f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	e003      	b.n	8006304 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80062fc:	2302      	movs	r3, #2
 80062fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	2b01      	cmp	r3, #1
 8006308:	d902      	bls.n	8006310 <HAL_I2S_Init+0x134>
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	2bff      	cmp	r3, #255	@ 0xff
 800630e:	d907      	bls.n	8006320 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006314:	f043 0210 	orr.w	r2, r3, #16
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e08f      	b.n	8006440 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	691a      	ldr	r2, [r3, #16]
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	ea42 0103 	orr.w	r1, r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	430a      	orrs	r2, r1
 8006332:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800633e:	f023 030f 	bic.w	r3, r3, #15
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6851      	ldr	r1, [r2, #4]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	6892      	ldr	r2, [r2, #8]
 800634a:	4311      	orrs	r1, r2
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	68d2      	ldr	r2, [r2, #12]
 8006350:	4311      	orrs	r1, r2
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6992      	ldr	r2, [r2, #24]
 8006356:	430a      	orrs	r2, r1
 8006358:	431a      	orrs	r2, r3
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006362:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a1b      	ldr	r3, [r3, #32]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d161      	bne.n	8006430 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	4a38      	ldr	r2, [pc, #224]	@ (8006450 <HAL_I2S_Init+0x274>)
 8006370:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a37      	ldr	r2, [pc, #220]	@ (8006454 <HAL_I2S_Init+0x278>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d101      	bne.n	8006380 <HAL_I2S_Init+0x1a4>
 800637c:	4b36      	ldr	r3, [pc, #216]	@ (8006458 <HAL_I2S_Init+0x27c>)
 800637e:	e001      	b.n	8006384 <HAL_I2S_Init+0x1a8>
 8006380:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006384:	69db      	ldr	r3, [r3, #28]
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	4932      	ldr	r1, [pc, #200]	@ (8006454 <HAL_I2S_Init+0x278>)
 800638c:	428a      	cmp	r2, r1
 800638e:	d101      	bne.n	8006394 <HAL_I2S_Init+0x1b8>
 8006390:	4a31      	ldr	r2, [pc, #196]	@ (8006458 <HAL_I2S_Init+0x27c>)
 8006392:	e001      	b.n	8006398 <HAL_I2S_Init+0x1bc>
 8006394:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8006398:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800639c:	f023 030f 	bic.w	r3, r3, #15
 80063a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a2b      	ldr	r2, [pc, #172]	@ (8006454 <HAL_I2S_Init+0x278>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d101      	bne.n	80063b0 <HAL_I2S_Init+0x1d4>
 80063ac:	4b2a      	ldr	r3, [pc, #168]	@ (8006458 <HAL_I2S_Init+0x27c>)
 80063ae:	e001      	b.n	80063b4 <HAL_I2S_Init+0x1d8>
 80063b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063b4:	2202      	movs	r2, #2
 80063b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a25      	ldr	r2, [pc, #148]	@ (8006454 <HAL_I2S_Init+0x278>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d101      	bne.n	80063c6 <HAL_I2S_Init+0x1ea>
 80063c2:	4b25      	ldr	r3, [pc, #148]	@ (8006458 <HAL_I2S_Init+0x27c>)
 80063c4:	e001      	b.n	80063ca <HAL_I2S_Init+0x1ee>
 80063c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80063ca:	69db      	ldr	r3, [r3, #28]
 80063cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063d6:	d003      	beq.n	80063e0 <HAL_I2S_Init+0x204>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d103      	bne.n	80063e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80063e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80063e4:	613b      	str	r3, [r7, #16]
 80063e6:	e001      	b.n	80063ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80063e8:	2300      	movs	r3, #0
 80063ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80063f6:	4313      	orrs	r3, r2
 80063f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8006400:	4313      	orrs	r3, r2
 8006402:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800640a:	4313      	orrs	r3, r2
 800640c:	b29a      	uxth	r2, r3
 800640e:	897b      	ldrh	r3, [r7, #10]
 8006410:	4313      	orrs	r3, r2
 8006412:	b29b      	uxth	r3, r3
 8006414:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006418:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4a0d      	ldr	r2, [pc, #52]	@ (8006454 <HAL_I2S_Init+0x278>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d101      	bne.n	8006428 <HAL_I2S_Init+0x24c>
 8006424:	4b0c      	ldr	r3, [pc, #48]	@ (8006458 <HAL_I2S_Init+0x27c>)
 8006426:	e001      	b.n	800642c <HAL_I2S_Init+0x250>
 8006428:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800642c:	897a      	ldrh	r2, [r7, #10]
 800642e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2200      	movs	r2, #0
 8006434:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800643e:	2300      	movs	r3, #0
}
 8006440:	4618      	mov	r0, r3
 8006442:	3720      	adds	r7, #32
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	08006553 	.word	0x08006553
 800644c:	cccccccd 	.word	0xcccccccd
 8006450:	08006669 	.word	0x08006669
 8006454:	40003800 	.word	0x40003800
 8006458:	40003400 	.word	0x40003400

0800645c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800645c:	b480      	push	{r7}
 800645e:	b083      	sub	sp, #12
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8006464:	bf00      	nop
 8006466:	370c      	adds	r7, #12
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr

08006470 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b082      	sub	sp, #8
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a4:	881a      	ldrh	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	1c9a      	adds	r2, r3, #2
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064ba:	b29b      	uxth	r3, r3
 80064bc:	3b01      	subs	r3, #1
 80064be:	b29a      	uxth	r2, r3
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10e      	bne.n	80064ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80064dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2201      	movs	r2, #1
 80064e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7ff ffb8 	bl	800645c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80064ec:	bf00      	nop
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68da      	ldr	r2, [r3, #12]
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006506:	b292      	uxth	r2, r2
 8006508:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800650e:	1c9a      	adds	r2, r3, #2
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006518:	b29b      	uxth	r3, r3
 800651a:	3b01      	subs	r3, #1
 800651c:	b29a      	uxth	r2, r3
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006526:	b29b      	uxth	r3, r3
 8006528:	2b00      	cmp	r3, #0
 800652a:	d10e      	bne.n	800654a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800653a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f7ff ff93 	bl	8006470 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800654a:	bf00      	nop
 800654c:	3708      	adds	r7, #8
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}

08006552 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006552:	b580      	push	{r7, lr}
 8006554:	b086      	sub	sp, #24
 8006556:	af00      	add	r7, sp, #0
 8006558:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006568:	b2db      	uxtb	r3, r3
 800656a:	2b04      	cmp	r3, #4
 800656c:	d13a      	bne.n	80065e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	f003 0301 	and.w	r3, r3, #1
 8006574:	2b01      	cmp	r3, #1
 8006576:	d109      	bne.n	800658c <I2S_IRQHandler+0x3a>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006582:	2b40      	cmp	r3, #64	@ 0x40
 8006584:	d102      	bne.n	800658c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8006586:	6878      	ldr	r0, [r7, #4]
 8006588:	f7ff ffb4 	bl	80064f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006592:	2b40      	cmp	r3, #64	@ 0x40
 8006594:	d126      	bne.n	80065e4 <I2S_IRQHandler+0x92>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685b      	ldr	r3, [r3, #4]
 800659c:	f003 0320 	and.w	r3, r3, #32
 80065a0:	2b20      	cmp	r3, #32
 80065a2:	d11f      	bne.n	80065e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685a      	ldr	r2, [r3, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80065b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80065b4:	2300      	movs	r3, #0
 80065b6:	613b      	str	r3, [r7, #16]
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68db      	ldr	r3, [r3, #12]
 80065be:	613b      	str	r3, [r7, #16]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	613b      	str	r3, [r7, #16]
 80065c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065d6:	f043 0202 	orr.w	r2, r3, #2
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ff50 	bl	8006484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d136      	bne.n	800665e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f003 0302 	and.w	r3, r3, #2
 80065f6:	2b02      	cmp	r3, #2
 80065f8:	d109      	bne.n	800660e <I2S_IRQHandler+0xbc>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	685b      	ldr	r3, [r3, #4]
 8006600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006604:	2b80      	cmp	r3, #128	@ 0x80
 8006606:	d102      	bne.n	800660e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f7ff ff45 	bl	8006498 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f003 0308 	and.w	r3, r3, #8
 8006614:	2b08      	cmp	r3, #8
 8006616:	d122      	bne.n	800665e <I2S_IRQHandler+0x10c>
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f003 0320 	and.w	r3, r3, #32
 8006622:	2b20      	cmp	r3, #32
 8006624:	d11b      	bne.n	800665e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685a      	ldr	r2, [r3, #4]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006634:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8006636:	2300      	movs	r3, #0
 8006638:	60fb      	str	r3, [r7, #12]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006650:	f043 0204 	orr.w	r2, r3, #4
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7ff ff13 	bl	8006484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800665e:	bf00      	nop
 8006660:	3718      	adds	r7, #24
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
	...

08006668 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b088      	sub	sp, #32
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a92      	ldr	r2, [pc, #584]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d101      	bne.n	8006686 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8006682:	4b92      	ldr	r3, [pc, #584]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006684:	e001      	b.n	800668a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8006686:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a8b      	ldr	r2, [pc, #556]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d101      	bne.n	80066a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80066a0:	4b8a      	ldr	r3, [pc, #552]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80066a2:	e001      	b.n	80066a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80066a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066b4:	d004      	beq.n	80066c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f040 8099 	bne.w	80067f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f003 0302 	and.w	r3, r3, #2
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	d107      	bne.n	80066da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f925 	bl	8006924 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d107      	bne.n	80066f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d002      	beq.n	80066f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 f9c8 	bl	8006a84 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fa:	2b40      	cmp	r3, #64	@ 0x40
 80066fc:	d13a      	bne.n	8006774 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f003 0320 	and.w	r3, r3, #32
 8006704:	2b00      	cmp	r3, #0
 8006706:	d035      	beq.n	8006774 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a6e      	ldr	r2, [pc, #440]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d101      	bne.n	8006716 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8006712:	4b6e      	ldr	r3, [pc, #440]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006714:	e001      	b.n	800671a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8006716:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800671a:	685a      	ldr	r2, [r3, #4]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4969      	ldr	r1, [pc, #420]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006722:	428b      	cmp	r3, r1
 8006724:	d101      	bne.n	800672a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8006726:	4b69      	ldr	r3, [pc, #420]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006728:	e001      	b.n	800672e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800672a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800672e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006732:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006742:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	68db      	ldr	r3, [r3, #12]
 800674e:	60fb      	str	r3, [r7, #12]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	60fb      	str	r3, [r7, #12]
 8006758:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006766:	f043 0202 	orr.w	r2, r3, #2
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f7ff fe88 	bl	8006484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b08      	cmp	r3, #8
 800677c:	f040 80c3 	bne.w	8006906 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	f000 80bd 	beq.w	8006906 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685a      	ldr	r2, [r3, #4]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800679a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a49      	ldr	r2, [pc, #292]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d101      	bne.n	80067aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80067a6:	4b49      	ldr	r3, [pc, #292]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067a8:	e001      	b.n	80067ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80067aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4944      	ldr	r1, [pc, #272]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80067b6:	428b      	cmp	r3, r1
 80067b8:	d101      	bne.n	80067be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80067ba:	4b44      	ldr	r3, [pc, #272]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80067bc:	e001      	b.n	80067c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80067be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80067c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80067c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80067c8:	2300      	movs	r3, #0
 80067ca:	60bb      	str	r3, [r7, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	60bb      	str	r3, [r7, #8]
 80067d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2201      	movs	r2, #1
 80067da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067e2:	f043 0204 	orr.w	r2, r3, #4
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7ff fe4a 	bl	8006484 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80067f0:	e089      	b.n	8006906 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b02      	cmp	r3, #2
 80067fa:	d107      	bne.n	800680c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006802:	2b00      	cmp	r3, #0
 8006804:	d002      	beq.n	800680c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 f8be 	bl	8006988 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	f003 0301 	and.w	r3, r3, #1
 8006812:	2b01      	cmp	r3, #1
 8006814:	d107      	bne.n	8006826 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d002      	beq.n	8006826 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 f8fd 	bl	8006a20 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800682c:	2b40      	cmp	r3, #64	@ 0x40
 800682e:	d12f      	bne.n	8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f003 0320 	and.w	r3, r3, #32
 8006836:	2b00      	cmp	r3, #0
 8006838:	d02a      	beq.n	8006890 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006848:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a1e      	ldr	r2, [pc, #120]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d101      	bne.n	8006858 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8006854:	4b1d      	ldr	r3, [pc, #116]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8006856:	e001      	b.n	800685c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8006858:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800685c:	685a      	ldr	r2, [r3, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	4919      	ldr	r1, [pc, #100]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8006864:	428b      	cmp	r3, r1
 8006866:	d101      	bne.n	800686c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8006868:	4b18      	ldr	r3, [pc, #96]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800686a:	e001      	b.n	8006870 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800686c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006870:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006874:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006882:	f043 0202 	orr.w	r2, r3, #2
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f7ff fdfa 	bl	8006484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8006890:	69bb      	ldr	r3, [r7, #24]
 8006892:	f003 0308 	and.w	r3, r3, #8
 8006896:	2b08      	cmp	r3, #8
 8006898:	d136      	bne.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	f003 0320 	and.w	r3, r3, #32
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d031      	beq.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	4a07      	ldr	r2, [pc, #28]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d101      	bne.n	80068b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80068ae:	4b07      	ldr	r3, [pc, #28]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068b0:	e001      	b.n	80068b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80068b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068b6:	685a      	ldr	r2, [r3, #4]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	4902      	ldr	r1, [pc, #8]	@ (80068c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80068be:	428b      	cmp	r3, r1
 80068c0:	d106      	bne.n	80068d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80068c2:	4b02      	ldr	r3, [pc, #8]	@ (80068cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80068c4:	e006      	b.n	80068d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80068c6:	bf00      	nop
 80068c8:	40003800 	.word	0x40003800
 80068cc:	40003400 	.word	0x40003400
 80068d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80068d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80068d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	685a      	ldr	r2, [r3, #4]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80068e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2201      	movs	r2, #1
 80068ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068f6:	f043 0204 	orr.w	r2, r3, #4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff fdc0 	bl	8006484 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006904:	e000      	b.n	8006908 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8006906:	bf00      	nop
}
 8006908:	bf00      	nop
 800690a:	3720      	adds	r7, #32
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8006918:	bf00      	nop
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006924:	b580      	push	{r7, lr}
 8006926:	b082      	sub	sp, #8
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	1c99      	adds	r1, r3, #2
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	6251      	str	r1, [r2, #36]	@ 0x24
 8006936:	881a      	ldrh	r2, [r3, #0]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006950:	b29b      	uxth	r3, r3
 8006952:	2b00      	cmp	r3, #0
 8006954:	d113      	bne.n	800697e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	685a      	ldr	r2, [r3, #4]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8006964:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800696a:	b29b      	uxth	r3, r3
 800696c:	2b00      	cmp	r3, #0
 800696e:	d106      	bne.n	800697e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f7ff ffc9 	bl	8006910 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800697e:	bf00      	nop
 8006980:	3708      	adds	r7, #8
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
	...

08006988 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006994:	1c99      	adds	r1, r3, #2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	6251      	str	r1, [r2, #36]	@ 0x24
 800699a:	8819      	ldrh	r1, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006a18 <I2SEx_TxISR_I2SExt+0x90>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d101      	bne.n	80069aa <I2SEx_TxISR_I2SExt+0x22>
 80069a6:	4b1d      	ldr	r3, [pc, #116]	@ (8006a1c <I2SEx_TxISR_I2SExt+0x94>)
 80069a8:	e001      	b.n	80069ae <I2SEx_TxISR_I2SExt+0x26>
 80069aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069ae:	460a      	mov	r2, r1
 80069b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	3b01      	subs	r3, #1
 80069ba:	b29a      	uxth	r2, r3
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069c4:	b29b      	uxth	r3, r3
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d121      	bne.n	8006a0e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a12      	ldr	r2, [pc, #72]	@ (8006a18 <I2SEx_TxISR_I2SExt+0x90>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d101      	bne.n	80069d8 <I2SEx_TxISR_I2SExt+0x50>
 80069d4:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <I2SEx_TxISR_I2SExt+0x94>)
 80069d6:	e001      	b.n	80069dc <I2SEx_TxISR_I2SExt+0x54>
 80069d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	490d      	ldr	r1, [pc, #52]	@ (8006a18 <I2SEx_TxISR_I2SExt+0x90>)
 80069e4:	428b      	cmp	r3, r1
 80069e6:	d101      	bne.n	80069ec <I2SEx_TxISR_I2SExt+0x64>
 80069e8:	4b0c      	ldr	r3, [pc, #48]	@ (8006a1c <I2SEx_TxISR_I2SExt+0x94>)
 80069ea:	e001      	b.n	80069f0 <I2SEx_TxISR_I2SExt+0x68>
 80069ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80069f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80069f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80069fa:	b29b      	uxth	r3, r3
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d106      	bne.n	8006a0e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff ff81 	bl	8006910 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a0e:	bf00      	nop
 8006a10:	3708      	adds	r7, #8
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	40003800 	.word	0x40003800
 8006a1c:	40003400 	.word	0x40003400

08006a20 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68d8      	ldr	r0, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a32:	1c99      	adds	r1, r3, #2
 8006a34:	687a      	ldr	r2, [r7, #4]
 8006a36:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006a38:	b282      	uxth	r2, r0
 8006a3a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29a      	uxth	r2, r3
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d113      	bne.n	8006a7c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685a      	ldr	r2, [r3, #4]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006a62:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d106      	bne.n	8006a7c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f7ff ff4a 	bl	8006910 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006a7c:	bf00      	nop
 8006a7e:	3708      	adds	r7, #8
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	4a20      	ldr	r2, [pc, #128]	@ (8006b14 <I2SEx_RxISR_I2SExt+0x90>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d101      	bne.n	8006a9a <I2SEx_RxISR_I2SExt+0x16>
 8006a96:	4b20      	ldr	r3, [pc, #128]	@ (8006b18 <I2SEx_RxISR_I2SExt+0x94>)
 8006a98:	e001      	b.n	8006a9e <I2SEx_RxISR_I2SExt+0x1a>
 8006a9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006a9e:	68d8      	ldr	r0, [r3, #12]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aa4:	1c99      	adds	r1, r3, #2
 8006aa6:	687a      	ldr	r2, [r7, #4]
 8006aa8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8006aaa:	b282      	uxth	r2, r0
 8006aac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d121      	bne.n	8006b0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a12      	ldr	r2, [pc, #72]	@ (8006b14 <I2SEx_RxISR_I2SExt+0x90>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d101      	bne.n	8006ad4 <I2SEx_RxISR_I2SExt+0x50>
 8006ad0:	4b11      	ldr	r3, [pc, #68]	@ (8006b18 <I2SEx_RxISR_I2SExt+0x94>)
 8006ad2:	e001      	b.n	8006ad8 <I2SEx_RxISR_I2SExt+0x54>
 8006ad4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006ad8:	685a      	ldr	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	490d      	ldr	r1, [pc, #52]	@ (8006b14 <I2SEx_RxISR_I2SExt+0x90>)
 8006ae0:	428b      	cmp	r3, r1
 8006ae2:	d101      	bne.n	8006ae8 <I2SEx_RxISR_I2SExt+0x64>
 8006ae4:	4b0c      	ldr	r3, [pc, #48]	@ (8006b18 <I2SEx_RxISR_I2SExt+0x94>)
 8006ae6:	e001      	b.n	8006aec <I2SEx_RxISR_I2SExt+0x68>
 8006ae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8006aec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006af0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006af6:	b29b      	uxth	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d106      	bne.n	8006b0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2201      	movs	r2, #1
 8006b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	f7ff ff03 	bl	8006910 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006b0a:	bf00      	nop
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40003800 	.word	0x40003800
 8006b18:	40003400 	.word	0x40003400

08006b1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b086      	sub	sp, #24
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d101      	bne.n	8006b2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	e267      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f003 0301 	and.w	r3, r3, #1
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d075      	beq.n	8006c26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b3a:	4b88      	ldr	r3, [pc, #544]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	f003 030c 	and.w	r3, r3, #12
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d00c      	beq.n	8006b60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b46:	4b85      	ldr	r3, [pc, #532]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b48:	689b      	ldr	r3, [r3, #8]
 8006b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006b4e:	2b08      	cmp	r3, #8
 8006b50:	d112      	bne.n	8006b78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006b52:	4b82      	ldr	r3, [pc, #520]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006b5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006b5e:	d10b      	bne.n	8006b78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b60:	4b7e      	ldr	r3, [pc, #504]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d05b      	beq.n	8006c24 <HAL_RCC_OscConfig+0x108>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d157      	bne.n	8006c24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e242      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b80:	d106      	bne.n	8006b90 <HAL_RCC_OscConfig+0x74>
 8006b82:	4b76      	ldr	r3, [pc, #472]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a75      	ldr	r2, [pc, #468]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b8c:	6013      	str	r3, [r2, #0]
 8006b8e:	e01d      	b.n	8006bcc <HAL_RCC_OscConfig+0xb0>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006b98:	d10c      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x98>
 8006b9a:	4b70      	ldr	r3, [pc, #448]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a6f      	ldr	r2, [pc, #444]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006ba0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ba4:	6013      	str	r3, [r2, #0]
 8006ba6:	4b6d      	ldr	r3, [pc, #436]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a6c      	ldr	r2, [pc, #432]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006bb0:	6013      	str	r3, [r2, #0]
 8006bb2:	e00b      	b.n	8006bcc <HAL_RCC_OscConfig+0xb0>
 8006bb4:	4b69      	ldr	r3, [pc, #420]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a68      	ldr	r2, [pc, #416]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006bbe:	6013      	str	r3, [r2, #0]
 8006bc0:	4b66      	ldr	r3, [pc, #408]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a65      	ldr	r2, [pc, #404]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006bca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d013      	beq.n	8006bfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bd4:	f7fc fd92 	bl	80036fc <HAL_GetTick>
 8006bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bda:	e008      	b.n	8006bee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006bdc:	f7fc fd8e 	bl	80036fc <HAL_GetTick>
 8006be0:	4602      	mov	r2, r0
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	1ad3      	subs	r3, r2, r3
 8006be6:	2b64      	cmp	r3, #100	@ 0x64
 8006be8:	d901      	bls.n	8006bee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006bea:	2303      	movs	r3, #3
 8006bec:	e207      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bee:	4b5b      	ldr	r3, [pc, #364]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d0f0      	beq.n	8006bdc <HAL_RCC_OscConfig+0xc0>
 8006bfa:	e014      	b.n	8006c26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fc fd7e 	bl	80036fc <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c04:	f7fc fd7a 	bl	80036fc <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b64      	cmp	r3, #100	@ 0x64
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e1f3      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c16:	4b51      	ldr	r3, [pc, #324]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f0      	bne.n	8006c04 <HAL_RCC_OscConfig+0xe8>
 8006c22:	e000      	b.n	8006c26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006c24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0302 	and.w	r3, r3, #2
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d063      	beq.n	8006cfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c32:	4b4a      	ldr	r3, [pc, #296]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c34:	689b      	ldr	r3, [r3, #8]
 8006c36:	f003 030c 	and.w	r3, r3, #12
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00b      	beq.n	8006c56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c3e:	4b47      	ldr	r3, [pc, #284]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c40:	689b      	ldr	r3, [r3, #8]
 8006c42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d11c      	bne.n	8006c84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006c4a:	4b44      	ldr	r3, [pc, #272]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d116      	bne.n	8006c84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c56:	4b41      	ldr	r3, [pc, #260]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f003 0302 	and.w	r3, r3, #2
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <HAL_RCC_OscConfig+0x152>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d001      	beq.n	8006c6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e1c7      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	691b      	ldr	r3, [r3, #16]
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4937      	ldr	r1, [pc, #220]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006c82:	e03a      	b.n	8006cfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	68db      	ldr	r3, [r3, #12]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d020      	beq.n	8006cce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006c8c:	4b34      	ldr	r3, [pc, #208]	@ (8006d60 <HAL_RCC_OscConfig+0x244>)
 8006c8e:	2201      	movs	r2, #1
 8006c90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c92:	f7fc fd33 	bl	80036fc <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c9a:	f7fc fd2f 	bl	80036fc <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e1a8      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006cac:	4b2b      	ldr	r3, [pc, #172]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0302 	and.w	r3, r3, #2
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d0f0      	beq.n	8006c9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cb8:	4b28      	ldr	r3, [pc, #160]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	00db      	lsls	r3, r3, #3
 8006cc6:	4925      	ldr	r1, [pc, #148]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	600b      	str	r3, [r1, #0]
 8006ccc:	e015      	b.n	8006cfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006cce:	4b24      	ldr	r3, [pc, #144]	@ (8006d60 <HAL_RCC_OscConfig+0x244>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cd4:	f7fc fd12 	bl	80036fc <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006cdc:	f7fc fd0e 	bl	80036fc <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e187      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006cee:	4b1b      	ldr	r3, [pc, #108]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0302 	and.w	r3, r3, #2
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d1f0      	bne.n	8006cdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f003 0308 	and.w	r3, r3, #8
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d036      	beq.n	8006d74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	695b      	ldr	r3, [r3, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d016      	beq.n	8006d3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d0e:	4b15      	ldr	r3, [pc, #84]	@ (8006d64 <HAL_RCC_OscConfig+0x248>)
 8006d10:	2201      	movs	r2, #1
 8006d12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d14:	f7fc fcf2 	bl	80036fc <HAL_GetTick>
 8006d18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d1a:	e008      	b.n	8006d2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d1c:	f7fc fcee 	bl	80036fc <HAL_GetTick>
 8006d20:	4602      	mov	r2, r0
 8006d22:	693b      	ldr	r3, [r7, #16]
 8006d24:	1ad3      	subs	r3, r2, r3
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d901      	bls.n	8006d2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e167      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d2e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d5c <HAL_RCC_OscConfig+0x240>)
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0f0      	beq.n	8006d1c <HAL_RCC_OscConfig+0x200>
 8006d3a:	e01b      	b.n	8006d74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d3c:	4b09      	ldr	r3, [pc, #36]	@ (8006d64 <HAL_RCC_OscConfig+0x248>)
 8006d3e:	2200      	movs	r2, #0
 8006d40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006d42:	f7fc fcdb 	bl	80036fc <HAL_GetTick>
 8006d46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d48:	e00e      	b.n	8006d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006d4a:	f7fc fcd7 	bl	80036fc <HAL_GetTick>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	1ad3      	subs	r3, r2, r3
 8006d54:	2b02      	cmp	r3, #2
 8006d56:	d907      	bls.n	8006d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e150      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
 8006d5c:	40023800 	.word	0x40023800
 8006d60:	42470000 	.word	0x42470000
 8006d64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006d68:	4b88      	ldr	r3, [pc, #544]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d6c:	f003 0302 	and.w	r3, r3, #2
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d1ea      	bne.n	8006d4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	f000 8097 	beq.w	8006eb0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006d82:	2300      	movs	r3, #0
 8006d84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d86:	4b81      	ldr	r3, [pc, #516]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10f      	bne.n	8006db2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	60bb      	str	r3, [r7, #8]
 8006d96:	4b7d      	ldr	r3, [pc, #500]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	4a7c      	ldr	r2, [pc, #496]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006d9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006da0:	6413      	str	r3, [r2, #64]	@ 0x40
 8006da2:	4b7a      	ldr	r3, [pc, #488]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006daa:	60bb      	str	r3, [r7, #8]
 8006dac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006dae:	2301      	movs	r3, #1
 8006db0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006db2:	4b77      	ldr	r3, [pc, #476]	@ (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d118      	bne.n	8006df0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006dbe:	4b74      	ldr	r3, [pc, #464]	@ (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a73      	ldr	r2, [pc, #460]	@ (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006dca:	f7fc fc97 	bl	80036fc <HAL_GetTick>
 8006dce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006dd0:	e008      	b.n	8006de4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006dd2:	f7fc fc93 	bl	80036fc <HAL_GetTick>
 8006dd6:	4602      	mov	r2, r0
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	2b02      	cmp	r3, #2
 8006dde:	d901      	bls.n	8006de4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006de0:	2303      	movs	r3, #3
 8006de2:	e10c      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006de4:	4b6a      	ldr	r3, [pc, #424]	@ (8006f90 <HAL_RCC_OscConfig+0x474>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f0      	beq.n	8006dd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	689b      	ldr	r3, [r3, #8]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d106      	bne.n	8006e06 <HAL_RCC_OscConfig+0x2ea>
 8006df8:	4b64      	ldr	r3, [pc, #400]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006dfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfc:	4a63      	ldr	r2, [pc, #396]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e04:	e01c      	b.n	8006e40 <HAL_RCC_OscConfig+0x324>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	689b      	ldr	r3, [r3, #8]
 8006e0a:	2b05      	cmp	r3, #5
 8006e0c:	d10c      	bne.n	8006e28 <HAL_RCC_OscConfig+0x30c>
 8006e0e:	4b5f      	ldr	r3, [pc, #380]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e12:	4a5e      	ldr	r2, [pc, #376]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e14:	f043 0304 	orr.w	r3, r3, #4
 8006e18:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e1a:	4b5c      	ldr	r3, [pc, #368]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e1e:	4a5b      	ldr	r2, [pc, #364]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e20:	f043 0301 	orr.w	r3, r3, #1
 8006e24:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e26:	e00b      	b.n	8006e40 <HAL_RCC_OscConfig+0x324>
 8006e28:	4b58      	ldr	r3, [pc, #352]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e2c:	4a57      	ldr	r2, [pc, #348]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e34:	4b55      	ldr	r3, [pc, #340]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e38:	4a54      	ldr	r2, [pc, #336]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e3a:	f023 0304 	bic.w	r3, r3, #4
 8006e3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d015      	beq.n	8006e74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e48:	f7fc fc58 	bl	80036fc <HAL_GetTick>
 8006e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e4e:	e00a      	b.n	8006e66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e50:	f7fc fc54 	bl	80036fc <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	693b      	ldr	r3, [r7, #16]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e0cb      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006e66:	4b49      	ldr	r3, [pc, #292]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e6a:	f003 0302 	and.w	r3, r3, #2
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0ee      	beq.n	8006e50 <HAL_RCC_OscConfig+0x334>
 8006e72:	e014      	b.n	8006e9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006e74:	f7fc fc42 	bl	80036fc <HAL_GetTick>
 8006e78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e7a:	e00a      	b.n	8006e92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e7c:	f7fc fc3e 	bl	80036fc <HAL_GetTick>
 8006e80:	4602      	mov	r2, r0
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	1ad3      	subs	r3, r2, r3
 8006e86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d901      	bls.n	8006e92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006e8e:	2303      	movs	r3, #3
 8006e90:	e0b5      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006e92:	4b3e      	ldr	r3, [pc, #248]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	f003 0302 	and.w	r3, r3, #2
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d1ee      	bne.n	8006e7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d105      	bne.n	8006eb0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea4:	4b39      	ldr	r3, [pc, #228]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea8:	4a38      	ldr	r2, [pc, #224]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006eaa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006eae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	f000 80a1 	beq.w	8006ffc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006eba:	4b34      	ldr	r3, [pc, #208]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 030c 	and.w	r3, r3, #12
 8006ec2:	2b08      	cmp	r3, #8
 8006ec4:	d05c      	beq.n	8006f80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	2b02      	cmp	r3, #2
 8006ecc:	d141      	bne.n	8006f52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ece:	4b31      	ldr	r3, [pc, #196]	@ (8006f94 <HAL_RCC_OscConfig+0x478>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ed4:	f7fc fc12 	bl	80036fc <HAL_GetTick>
 8006ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eda:	e008      	b.n	8006eee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006edc:	f7fc fc0e 	bl	80036fc <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e087      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006eee:	4b27      	ldr	r3, [pc, #156]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d1f0      	bne.n	8006edc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	69da      	ldr	r2, [r3, #28]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	431a      	orrs	r2, r3
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f08:	019b      	lsls	r3, r3, #6
 8006f0a:	431a      	orrs	r2, r3
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f10:	085b      	lsrs	r3, r3, #1
 8006f12:	3b01      	subs	r3, #1
 8006f14:	041b      	lsls	r3, r3, #16
 8006f16:	431a      	orrs	r2, r3
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1c:	061b      	lsls	r3, r3, #24
 8006f1e:	491b      	ldr	r1, [pc, #108]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006f20:	4313      	orrs	r3, r2
 8006f22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006f24:	4b1b      	ldr	r3, [pc, #108]	@ (8006f94 <HAL_RCC_OscConfig+0x478>)
 8006f26:	2201      	movs	r2, #1
 8006f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f2a:	f7fc fbe7 	bl	80036fc <HAL_GetTick>
 8006f2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f30:	e008      	b.n	8006f44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f32:	f7fc fbe3 	bl	80036fc <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d901      	bls.n	8006f44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006f40:	2303      	movs	r3, #3
 8006f42:	e05c      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006f44:	4b11      	ldr	r3, [pc, #68]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d0f0      	beq.n	8006f32 <HAL_RCC_OscConfig+0x416>
 8006f50:	e054      	b.n	8006ffc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b10      	ldr	r3, [pc, #64]	@ (8006f94 <HAL_RCC_OscConfig+0x478>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fc fbd0 	bl	80036fc <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fc fbcc 	bl	80036fc <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e045      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	4b06      	ldr	r3, [pc, #24]	@ (8006f8c <HAL_RCC_OscConfig+0x470>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x444>
 8006f7e:	e03d      	b.n	8006ffc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	699b      	ldr	r3, [r3, #24]
 8006f84:	2b01      	cmp	r3, #1
 8006f86:	d107      	bne.n	8006f98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006f88:	2301      	movs	r3, #1
 8006f8a:	e038      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
 8006f8c:	40023800 	.word	0x40023800
 8006f90:	40007000 	.word	0x40007000
 8006f94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006f98:	4b1b      	ldr	r3, [pc, #108]	@ (8007008 <HAL_RCC_OscConfig+0x4ec>)
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	2b01      	cmp	r3, #1
 8006fa4:	d028      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d121      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d11a      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006fc8:	4013      	ands	r3, r2
 8006fca:	687a      	ldr	r2, [r7, #4]
 8006fcc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006fce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d111      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fde:	085b      	lsrs	r3, r3, #1
 8006fe0:	3b01      	subs	r3, #1
 8006fe2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d107      	bne.n	8006ff8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d001      	beq.n	8006ffc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	e000      	b.n	8006ffe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ffc:	2300      	movs	r3, #0
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3718      	adds	r7, #24
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	40023800 	.word	0x40023800

0800700c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d101      	bne.n	8007020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800701c:	2301      	movs	r3, #1
 800701e:	e0cc      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007020:	4b68      	ldr	r3, [pc, #416]	@ (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f003 0307 	and.w	r3, r3, #7
 8007028:	683a      	ldr	r2, [r7, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	d90c      	bls.n	8007048 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800702e:	4b65      	ldr	r3, [pc, #404]	@ (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	b2d2      	uxtb	r2, r2
 8007034:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007036:	4b63      	ldr	r3, [pc, #396]	@ (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f003 0307 	and.w	r3, r3, #7
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d001      	beq.n	8007048 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e0b8      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 0302 	and.w	r3, r3, #2
 8007050:	2b00      	cmp	r3, #0
 8007052:	d020      	beq.n	8007096 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d005      	beq.n	800706c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007060:	4b59      	ldr	r3, [pc, #356]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	4a58      	ldr	r2, [pc, #352]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007066:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800706a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d005      	beq.n	8007084 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007078:	4b53      	ldr	r3, [pc, #332]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	4a52      	ldr	r2, [pc, #328]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800707e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007082:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007084:	4b50      	ldr	r3, [pc, #320]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007086:	689b      	ldr	r3, [r3, #8]
 8007088:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	494d      	ldr	r1, [pc, #308]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007092:	4313      	orrs	r3, r2
 8007094:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d044      	beq.n	800712c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d107      	bne.n	80070ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070aa:	4b47      	ldr	r3, [pc, #284]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d119      	bne.n	80070ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e07f      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d003      	beq.n	80070ca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	d107      	bne.n	80070da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80070ca:	4b3f      	ldr	r3, [pc, #252]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d109      	bne.n	80070ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e06f      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070da:	4b3b      	ldr	r3, [pc, #236]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 0302 	and.w	r3, r3, #2
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d101      	bne.n	80070ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e067      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80070ea:	4b37      	ldr	r3, [pc, #220]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 0203 	bic.w	r2, r3, #3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	4934      	ldr	r1, [pc, #208]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 80070f8:	4313      	orrs	r3, r2
 80070fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80070fc:	f7fc fafe 	bl	80036fc <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007102:	e00a      	b.n	800711a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007104:	f7fc fafa 	bl	80036fc <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007112:	4293      	cmp	r3, r2
 8007114:	d901      	bls.n	800711a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e04f      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711a:	4b2b      	ldr	r3, [pc, #172]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800711c:	689b      	ldr	r3, [r3, #8]
 800711e:	f003 020c 	and.w	r2, r3, #12
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	429a      	cmp	r2, r3
 800712a:	d1eb      	bne.n	8007104 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800712c:	4b25      	ldr	r3, [pc, #148]	@ (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0307 	and.w	r3, r3, #7
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	429a      	cmp	r2, r3
 8007138:	d20c      	bcs.n	8007154 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800713a:	4b22      	ldr	r3, [pc, #136]	@ (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007142:	4b20      	ldr	r3, [pc, #128]	@ (80071c4 <HAL_RCC_ClockConfig+0x1b8>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f003 0307 	and.w	r3, r3, #7
 800714a:	683a      	ldr	r2, [r7, #0]
 800714c:	429a      	cmp	r2, r3
 800714e:	d001      	beq.n	8007154 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e032      	b.n	80071ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0304 	and.w	r3, r3, #4
 800715c:	2b00      	cmp	r3, #0
 800715e:	d008      	beq.n	8007172 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007160:	4b19      	ldr	r3, [pc, #100]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	68db      	ldr	r3, [r3, #12]
 800716c:	4916      	ldr	r1, [pc, #88]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0308 	and.w	r3, r3, #8
 800717a:	2b00      	cmp	r3, #0
 800717c:	d009      	beq.n	8007192 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800717e:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	490e      	ldr	r1, [pc, #56]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800718e:	4313      	orrs	r3, r2
 8007190:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007192:	f000 f821 	bl	80071d8 <HAL_RCC_GetSysClockFreq>
 8007196:	4602      	mov	r2, r0
 8007198:	4b0b      	ldr	r3, [pc, #44]	@ (80071c8 <HAL_RCC_ClockConfig+0x1bc>)
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	091b      	lsrs	r3, r3, #4
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	490a      	ldr	r1, [pc, #40]	@ (80071cc <HAL_RCC_ClockConfig+0x1c0>)
 80071a4:	5ccb      	ldrb	r3, [r1, r3]
 80071a6:	fa22 f303 	lsr.w	r3, r2, r3
 80071aa:	4a09      	ldr	r2, [pc, #36]	@ (80071d0 <HAL_RCC_ClockConfig+0x1c4>)
 80071ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80071ae:	4b09      	ldr	r3, [pc, #36]	@ (80071d4 <HAL_RCC_ClockConfig+0x1c8>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fc fa5e 	bl	8003674 <HAL_InitTick>

  return HAL_OK;
 80071b8:	2300      	movs	r3, #0
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	40023c00 	.word	0x40023c00
 80071c8:	40023800 	.word	0x40023800
 80071cc:	0800d358 	.word	0x0800d358
 80071d0:	20000000 	.word	0x20000000
 80071d4:	20000004 	.word	0x20000004

080071d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80071d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071dc:	b094      	sub	sp, #80	@ 0x50
 80071de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80071e0:	2300      	movs	r3, #0
 80071e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80071e8:	2300      	movs	r3, #0
 80071ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80071ec:	2300      	movs	r3, #0
 80071ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80071f0:	4b79      	ldr	r3, [pc, #484]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80071f2:	689b      	ldr	r3, [r3, #8]
 80071f4:	f003 030c 	and.w	r3, r3, #12
 80071f8:	2b08      	cmp	r3, #8
 80071fa:	d00d      	beq.n	8007218 <HAL_RCC_GetSysClockFreq+0x40>
 80071fc:	2b08      	cmp	r3, #8
 80071fe:	f200 80e1 	bhi.w	80073c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_RCC_GetSysClockFreq+0x34>
 8007206:	2b04      	cmp	r3, #4
 8007208:	d003      	beq.n	8007212 <HAL_RCC_GetSysClockFreq+0x3a>
 800720a:	e0db      	b.n	80073c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800720c:	4b73      	ldr	r3, [pc, #460]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x204>)
 800720e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007210:	e0db      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007212:	4b73      	ldr	r3, [pc, #460]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8007214:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007216:	e0d8      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007218:	4b6f      	ldr	r3, [pc, #444]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007220:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007222:	4b6d      	ldr	r3, [pc, #436]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d063      	beq.n	80072f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800722e:	4b6a      	ldr	r3, [pc, #424]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	099b      	lsrs	r3, r3, #6
 8007234:	2200      	movs	r2, #0
 8007236:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007238:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800723a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800723c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007240:	633b      	str	r3, [r7, #48]	@ 0x30
 8007242:	2300      	movs	r3, #0
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
 8007246:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800724a:	4622      	mov	r2, r4
 800724c:	462b      	mov	r3, r5
 800724e:	f04f 0000 	mov.w	r0, #0
 8007252:	f04f 0100 	mov.w	r1, #0
 8007256:	0159      	lsls	r1, r3, #5
 8007258:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800725c:	0150      	lsls	r0, r2, #5
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	4621      	mov	r1, r4
 8007264:	1a51      	subs	r1, r2, r1
 8007266:	6139      	str	r1, [r7, #16]
 8007268:	4629      	mov	r1, r5
 800726a:	eb63 0301 	sbc.w	r3, r3, r1
 800726e:	617b      	str	r3, [r7, #20]
 8007270:	f04f 0200 	mov.w	r2, #0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800727c:	4659      	mov	r1, fp
 800727e:	018b      	lsls	r3, r1, #6
 8007280:	4651      	mov	r1, sl
 8007282:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007286:	4651      	mov	r1, sl
 8007288:	018a      	lsls	r2, r1, #6
 800728a:	4651      	mov	r1, sl
 800728c:	ebb2 0801 	subs.w	r8, r2, r1
 8007290:	4659      	mov	r1, fp
 8007292:	eb63 0901 	sbc.w	r9, r3, r1
 8007296:	f04f 0200 	mov.w	r2, #0
 800729a:	f04f 0300 	mov.w	r3, #0
 800729e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072aa:	4690      	mov	r8, r2
 80072ac:	4699      	mov	r9, r3
 80072ae:	4623      	mov	r3, r4
 80072b0:	eb18 0303 	adds.w	r3, r8, r3
 80072b4:	60bb      	str	r3, [r7, #8]
 80072b6:	462b      	mov	r3, r5
 80072b8:	eb49 0303 	adc.w	r3, r9, r3
 80072bc:	60fb      	str	r3, [r7, #12]
 80072be:	f04f 0200 	mov.w	r2, #0
 80072c2:	f04f 0300 	mov.w	r3, #0
 80072c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80072ca:	4629      	mov	r1, r5
 80072cc:	024b      	lsls	r3, r1, #9
 80072ce:	4621      	mov	r1, r4
 80072d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80072d4:	4621      	mov	r1, r4
 80072d6:	024a      	lsls	r2, r1, #9
 80072d8:	4610      	mov	r0, r2
 80072da:	4619      	mov	r1, r3
 80072dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072de:	2200      	movs	r2, #0
 80072e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80072e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80072e8:	f7f8 ffc2 	bl	8000270 <__aeabi_uldivmod>
 80072ec:	4602      	mov	r2, r0
 80072ee:	460b      	mov	r3, r1
 80072f0:	4613      	mov	r3, r2
 80072f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80072f4:	e058      	b.n	80073a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072f6:	4b38      	ldr	r3, [pc, #224]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	099b      	lsrs	r3, r3, #6
 80072fc:	2200      	movs	r2, #0
 80072fe:	4618      	mov	r0, r3
 8007300:	4611      	mov	r1, r2
 8007302:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007306:	623b      	str	r3, [r7, #32]
 8007308:	2300      	movs	r3, #0
 800730a:	627b      	str	r3, [r7, #36]	@ 0x24
 800730c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007310:	4642      	mov	r2, r8
 8007312:	464b      	mov	r3, r9
 8007314:	f04f 0000 	mov.w	r0, #0
 8007318:	f04f 0100 	mov.w	r1, #0
 800731c:	0159      	lsls	r1, r3, #5
 800731e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007322:	0150      	lsls	r0, r2, #5
 8007324:	4602      	mov	r2, r0
 8007326:	460b      	mov	r3, r1
 8007328:	4641      	mov	r1, r8
 800732a:	ebb2 0a01 	subs.w	sl, r2, r1
 800732e:	4649      	mov	r1, r9
 8007330:	eb63 0b01 	sbc.w	fp, r3, r1
 8007334:	f04f 0200 	mov.w	r2, #0
 8007338:	f04f 0300 	mov.w	r3, #0
 800733c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007340:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007344:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007348:	ebb2 040a 	subs.w	r4, r2, sl
 800734c:	eb63 050b 	sbc.w	r5, r3, fp
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	00eb      	lsls	r3, r5, #3
 800735a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800735e:	00e2      	lsls	r2, r4, #3
 8007360:	4614      	mov	r4, r2
 8007362:	461d      	mov	r5, r3
 8007364:	4643      	mov	r3, r8
 8007366:	18e3      	adds	r3, r4, r3
 8007368:	603b      	str	r3, [r7, #0]
 800736a:	464b      	mov	r3, r9
 800736c:	eb45 0303 	adc.w	r3, r5, r3
 8007370:	607b      	str	r3, [r7, #4]
 8007372:	f04f 0200 	mov.w	r2, #0
 8007376:	f04f 0300 	mov.w	r3, #0
 800737a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800737e:	4629      	mov	r1, r5
 8007380:	028b      	lsls	r3, r1, #10
 8007382:	4621      	mov	r1, r4
 8007384:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007388:	4621      	mov	r1, r4
 800738a:	028a      	lsls	r2, r1, #10
 800738c:	4610      	mov	r0, r2
 800738e:	4619      	mov	r1, r3
 8007390:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007392:	2200      	movs	r2, #0
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	61fa      	str	r2, [r7, #28]
 8007398:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800739c:	f7f8 ff68 	bl	8000270 <__aeabi_uldivmod>
 80073a0:	4602      	mov	r2, r0
 80073a2:	460b      	mov	r3, r1
 80073a4:	4613      	mov	r3, r2
 80073a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80073a8:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80073aa:	685b      	ldr	r3, [r3, #4]
 80073ac:	0c1b      	lsrs	r3, r3, #16
 80073ae:	f003 0303 	and.w	r3, r3, #3
 80073b2:	3301      	adds	r3, #1
 80073b4:	005b      	lsls	r3, r3, #1
 80073b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80073b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80073ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80073bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073c2:	e002      	b.n	80073ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c4:	4b05      	ldr	r3, [pc, #20]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x204>)
 80073c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80073c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3750      	adds	r7, #80	@ 0x50
 80073d0:	46bd      	mov	sp, r7
 80073d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073d6:	bf00      	nop
 80073d8:	40023800 	.word	0x40023800
 80073dc:	00f42400 	.word	0x00f42400
 80073e0:	007a1200 	.word	0x007a1200

080073e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073e8:	4b03      	ldr	r3, [pc, #12]	@ (80073f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80073ea:	681b      	ldr	r3, [r3, #0]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
 80073f6:	bf00      	nop
 80073f8:	20000000 	.word	0x20000000

080073fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007400:	f7ff fff0 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 8007404:	4602      	mov	r2, r0
 8007406:	4b05      	ldr	r3, [pc, #20]	@ (800741c <HAL_RCC_GetPCLK1Freq+0x20>)
 8007408:	689b      	ldr	r3, [r3, #8]
 800740a:	0a9b      	lsrs	r3, r3, #10
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	4903      	ldr	r1, [pc, #12]	@ (8007420 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007412:	5ccb      	ldrb	r3, [r1, r3]
 8007414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007418:	4618      	mov	r0, r3
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40023800 	.word	0x40023800
 8007420:	0800d368 	.word	0x0800d368

08007424 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007428:	f7ff ffdc 	bl	80073e4 <HAL_RCC_GetHCLKFreq>
 800742c:	4602      	mov	r2, r0
 800742e:	4b05      	ldr	r3, [pc, #20]	@ (8007444 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007430:	689b      	ldr	r3, [r3, #8]
 8007432:	0b5b      	lsrs	r3, r3, #13
 8007434:	f003 0307 	and.w	r3, r3, #7
 8007438:	4903      	ldr	r1, [pc, #12]	@ (8007448 <HAL_RCC_GetPCLK2Freq+0x24>)
 800743a:	5ccb      	ldrb	r3, [r1, r3]
 800743c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007440:	4618      	mov	r0, r3
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40023800 	.word	0x40023800
 8007448:	0800d368 	.word	0x0800d368

0800744c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b086      	sub	sp, #24
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007454:	2300      	movs	r3, #0
 8007456:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007458:	2300      	movs	r3, #0
 800745a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f003 0301 	and.w	r3, r3, #1
 8007464:	2b00      	cmp	r3, #0
 8007466:	d105      	bne.n	8007474 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007470:	2b00      	cmp	r3, #0
 8007472:	d035      	beq.n	80074e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007474:	4b62      	ldr	r3, [pc, #392]	@ (8007600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007476:	2200      	movs	r2, #0
 8007478:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800747a:	f7fc f93f 	bl	80036fc <HAL_GetTick>
 800747e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007480:	e008      	b.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007482:	f7fc f93b 	bl	80036fc <HAL_GetTick>
 8007486:	4602      	mov	r2, r0
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	1ad3      	subs	r3, r2, r3
 800748c:	2b02      	cmp	r3, #2
 800748e:	d901      	bls.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007490:	2303      	movs	r3, #3
 8007492:	e0b0      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007494:	4b5b      	ldr	r3, [pc, #364]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1f0      	bne.n	8007482 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	685b      	ldr	r3, [r3, #4]
 80074a4:	019a      	lsls	r2, r3, #6
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	071b      	lsls	r3, r3, #28
 80074ac:	4955      	ldr	r1, [pc, #340]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074ae:	4313      	orrs	r3, r2
 80074b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80074b4:	4b52      	ldr	r3, [pc, #328]	@ (8007600 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80074ba:	f7fc f91f 	bl	80036fc <HAL_GetTick>
 80074be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074c0:	e008      	b.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074c2:	f7fc f91b 	bl	80036fc <HAL_GetTick>
 80074c6:	4602      	mov	r2, r0
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	1ad3      	subs	r3, r2, r3
 80074cc:	2b02      	cmp	r3, #2
 80074ce:	d901      	bls.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e090      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074d4:	4b4b      	ldr	r3, [pc, #300]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d0f0      	beq.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	f000 8083 	beq.w	80075f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
 80074f2:	4b44      	ldr	r3, [pc, #272]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074f6:	4a43      	ldr	r2, [pc, #268]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80074f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80074fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80074fe:	4b41      	ldr	r3, [pc, #260]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007502:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007506:	60fb      	str	r3, [r7, #12]
 8007508:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800750a:	4b3f      	ldr	r3, [pc, #252]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a3e      	ldr	r2, [pc, #248]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007510:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007514:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007516:	f7fc f8f1 	bl	80036fc <HAL_GetTick>
 800751a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800751c:	e008      	b.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800751e:	f7fc f8ed 	bl	80036fc <HAL_GetTick>
 8007522:	4602      	mov	r2, r0
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	1ad3      	subs	r3, r2, r3
 8007528:	2b02      	cmp	r3, #2
 800752a:	d901      	bls.n	8007530 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800752c:	2303      	movs	r3, #3
 800752e:	e062      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007530:	4b35      	ldr	r3, [pc, #212]	@ (8007608 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007538:	2b00      	cmp	r3, #0
 800753a:	d0f0      	beq.n	800751e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800753c:	4b31      	ldr	r3, [pc, #196]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800753e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007540:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007544:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d02f      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	68db      	ldr	r3, [r3, #12]
 8007550:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	429a      	cmp	r2, r3
 8007558:	d028      	beq.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800755a:	4b2a      	ldr	r3, [pc, #168]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800755c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800755e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007562:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007564:	4b29      	ldr	r3, [pc, #164]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007566:	2201      	movs	r2, #1
 8007568:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800756a:	4b28      	ldr	r3, [pc, #160]	@ (800760c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007570:	4a24      	ldr	r2, [pc, #144]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007576:	4b23      	ldr	r3, [pc, #140]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007578:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800757a:	f003 0301 	and.w	r3, r3, #1
 800757e:	2b01      	cmp	r3, #1
 8007580:	d114      	bne.n	80075ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007582:	f7fc f8bb 	bl	80036fc <HAL_GetTick>
 8007586:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007588:	e00a      	b.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800758a:	f7fc f8b7 	bl	80036fc <HAL_GetTick>
 800758e:	4602      	mov	r2, r0
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	1ad3      	subs	r3, r2, r3
 8007594:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007598:	4293      	cmp	r3, r2
 800759a:	d901      	bls.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800759c:	2303      	movs	r3, #3
 800759e:	e02a      	b.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80075a0:	4b18      	ldr	r3, [pc, #96]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80075a4:	f003 0302 	and.w	r3, r3, #2
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d0ee      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80075b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80075b8:	d10d      	bne.n	80075d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80075ba:	4b12      	ldr	r3, [pc, #72]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80075ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075ce:	490d      	ldr	r1, [pc, #52]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d0:	4313      	orrs	r3, r2
 80075d2:	608b      	str	r3, [r1, #8]
 80075d4:	e005      	b.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80075d6:	4b0b      	ldr	r3, [pc, #44]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	4a0a      	ldr	r2, [pc, #40]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80075e0:	6093      	str	r3, [r2, #8]
 80075e2:	4b08      	ldr	r3, [pc, #32]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075ee:	4905      	ldr	r1, [pc, #20]	@ (8007604 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80075f0:	4313      	orrs	r3, r2
 80075f2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3718      	adds	r7, #24
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}
 80075fe:	bf00      	nop
 8007600:	42470068 	.word	0x42470068
 8007604:	40023800 	.word	0x40023800
 8007608:	40007000 	.word	0x40007000
 800760c:	42470e40 	.word	0x42470e40

08007610 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8007610:	b480      	push	{r7}
 8007612:	b087      	sub	sp, #28
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8007618:	2300      	movs	r3, #0
 800761a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800761c:	2300      	movs	r3, #0
 800761e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8007620:	2300      	movs	r3, #0
 8007622:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8007624:	2300      	movs	r3, #0
 8007626:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b01      	cmp	r3, #1
 800762c:	d13f      	bne.n	80076ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800762e:	4b24      	ldr	r3, [pc, #144]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007636:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d006      	beq.n	800764c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8007644:	d12f      	bne.n	80076a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007646:	4b1f      	ldr	r3, [pc, #124]	@ (80076c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007648:	617b      	str	r3, [r7, #20]
          break;
 800764a:	e02f      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800764c:	4b1c      	ldr	r3, [pc, #112]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007654:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007658:	d108      	bne.n	800766c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800765a:	4b19      	ldr	r3, [pc, #100]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007662:	4a19      	ldr	r2, [pc, #100]	@ (80076c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007664:	fbb2 f3f3 	udiv	r3, r2, r3
 8007668:	613b      	str	r3, [r7, #16]
 800766a:	e007      	b.n	800767c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800766c:	4b14      	ldr	r3, [pc, #80]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007674:	4a15      	ldr	r2, [pc, #84]	@ (80076cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007676:	fbb2 f3f3 	udiv	r3, r2, r3
 800767a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800767c:	4b10      	ldr	r3, [pc, #64]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800767e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007682:	099b      	lsrs	r3, r3, #6
 8007684:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007688:	693b      	ldr	r3, [r7, #16]
 800768a:	fb02 f303 	mul.w	r3, r2, r3
 800768e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007690:	4b0b      	ldr	r3, [pc, #44]	@ (80076c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007692:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8007696:	0f1b      	lsrs	r3, r3, #28
 8007698:	f003 0307 	and.w	r3, r3, #7
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	fbb2 f3f3 	udiv	r3, r2, r3
 80076a2:	617b      	str	r3, [r7, #20]
          break;
 80076a4:	e002      	b.n	80076ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	617b      	str	r3, [r7, #20]
          break;
 80076aa:	bf00      	nop
        }
      }
      break;
 80076ac:	e000      	b.n	80076b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80076ae:	bf00      	nop
    }
  }
  return frequency;
 80076b0:	697b      	ldr	r3, [r7, #20]
}
 80076b2:	4618      	mov	r0, r3
 80076b4:	371c      	adds	r7, #28
 80076b6:	46bd      	mov	sp, r7
 80076b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076bc:	4770      	bx	lr
 80076be:	bf00      	nop
 80076c0:	40023800 	.word	0x40023800
 80076c4:	00bb8000 	.word	0x00bb8000
 80076c8:	007a1200 	.word	0x007a1200
 80076cc:	00f42400 	.word	0x00f42400

080076d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
 80076e0:	e01c      	b.n	800771c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	795b      	ldrb	r3, [r3, #5]
 80076e6:	b2db      	uxtb	r3, r3
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d105      	bne.n	80076f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7fb fdec 	bl	80032d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f042 0204 	orr.w	r2, r2, #4
 800770c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3708      	adds	r7, #8
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
 800772c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	791b      	ldrb	r3, [r3, #4]
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_RNG_GenerateRandomNumber+0x1a>
 800773a:	2302      	movs	r3, #2
 800773c:	e044      	b.n	80077c8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	795b      	ldrb	r3, [r3, #5]
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b01      	cmp	r3, #1
 800774c:	d133      	bne.n	80077b6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2202      	movs	r2, #2
 8007752:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007754:	f7fb ffd2 	bl	80036fc <HAL_GetTick>
 8007758:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800775a:	e018      	b.n	800778e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800775c:	f7fb ffce 	bl	80036fc <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	2b02      	cmp	r3, #2
 8007768:	d911      	bls.n	800778e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	f003 0301 	and.w	r3, r3, #1
 8007774:	2b01      	cmp	r3, #1
 8007776:	d00a      	beq.n	800778e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2201      	movs	r2, #1
 800777c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2202      	movs	r2, #2
 8007782:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
 800778c:	e01c      	b.n	80077c8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f003 0301 	and.w	r3, r3, #1
 8007798:	2b01      	cmp	r3, #1
 800779a:	d1df      	bne.n	800775c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	689a      	ldr	r2, [r3, #8]
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	68da      	ldr	r2, [r3, #12]
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	715a      	strb	r2, [r3, #5]
 80077b4:	e004      	b.n	80077c0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2204      	movs	r2, #4
 80077ba:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2200      	movs	r2, #0
 80077c4:	711a      	strb	r2, [r3, #4]

  return status;
 80077c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3710      	adds	r7, #16
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}

080077d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e07b      	b.n	80078da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d108      	bne.n	80077fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077f2:	d009      	beq.n	8007808 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2200      	movs	r2, #0
 80077f8:	61da      	str	r2, [r3, #28]
 80077fa:	e005      	b.n	8007808 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b00      	cmp	r3, #0
 8007818:	d106      	bne.n	8007828 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f7fb fd76 	bl	8003314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2202      	movs	r2, #2
 800782c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800783e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007850:	431a      	orrs	r2, r3
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800785a:	431a      	orrs	r2, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	f003 0302 	and.w	r3, r3, #2
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	695b      	ldr	r3, [r3, #20]
 800786a:	f003 0301 	and.w	r3, r3, #1
 800786e:	431a      	orrs	r2, r3
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007878:	431a      	orrs	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	69db      	ldr	r3, [r3, #28]
 800787e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007882:	431a      	orrs	r2, r3
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6a1b      	ldr	r3, [r3, #32]
 8007888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800788c:	ea42 0103 	orr.w	r1, r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007894:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	430a      	orrs	r2, r1
 800789e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	0c1b      	lsrs	r3, r3, #16
 80078a6:	f003 0104 	and.w	r1, r3, #4
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	f003 0210 	and.w	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	430a      	orrs	r2, r1
 80078b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	69da      	ldr	r2, [r3, #28]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80078c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80078d8:	2300      	movs	r3, #0
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b082      	sub	sp, #8
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e042      	b.n	800797a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d106      	bne.n	800790e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f7fb fd4b 	bl	80033a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2224      	movs	r2, #36	@ 0x24
 8007912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68da      	ldr	r2, [r3, #12]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007924:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f972 	bl	8007c10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	691a      	ldr	r2, [r3, #16]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800793a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695a      	ldr	r2, [r3, #20]
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800794a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68da      	ldr	r2, [r3, #12]
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800795a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	2220      	movs	r2, #32
 8007966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2220      	movs	r2, #32
 800796e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3708      	adds	r7, #8
 800797e:	46bd      	mov	sp, r7
 8007980:	bd80      	pop	{r7, pc}

08007982 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b08a      	sub	sp, #40	@ 0x28
 8007986:	af02      	add	r7, sp, #8
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	603b      	str	r3, [r7, #0]
 800798e:	4613      	mov	r3, r2
 8007990:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007992:	2300      	movs	r3, #0
 8007994:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b20      	cmp	r3, #32
 80079a0:	d175      	bne.n	8007a8e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d002      	beq.n	80079ae <HAL_UART_Transmit+0x2c>
 80079a8:	88fb      	ldrh	r3, [r7, #6]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d101      	bne.n	80079b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e06e      	b.n	8007a90 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2221      	movs	r2, #33	@ 0x21
 80079bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079c0:	f7fb fe9c 	bl	80036fc <HAL_GetTick>
 80079c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	88fa      	ldrh	r2, [r7, #6]
 80079ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	88fa      	ldrh	r2, [r7, #6]
 80079d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079da:	d108      	bne.n	80079ee <HAL_UART_Transmit+0x6c>
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d104      	bne.n	80079ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079e4:	2300      	movs	r3, #0
 80079e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	61bb      	str	r3, [r7, #24]
 80079ec:	e003      	b.n	80079f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f2:	2300      	movs	r3, #0
 80079f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079f6:	e02e      	b.n	8007a56 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2200      	movs	r2, #0
 8007a00:	2180      	movs	r1, #128	@ 0x80
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 f848 	bl	8007a98 <UART_WaitOnFlagUntilTimeout>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2220      	movs	r2, #32
 8007a12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e03a      	b.n	8007a90 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a1a:	69fb      	ldr	r3, [r7, #28]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10b      	bne.n	8007a38 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a20:	69bb      	ldr	r3, [r7, #24]
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	461a      	mov	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a2e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	3302      	adds	r3, #2
 8007a34:	61bb      	str	r3, [r7, #24]
 8007a36:	e007      	b.n	8007a48 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	781a      	ldrb	r2, [r3, #0]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a42:	69fb      	ldr	r3, [r7, #28]
 8007a44:	3301      	adds	r3, #1
 8007a46:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b29a      	uxth	r2, r3
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d1cb      	bne.n	80079f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	697b      	ldr	r3, [r7, #20]
 8007a66:	2200      	movs	r2, #0
 8007a68:	2140      	movs	r1, #64	@ 0x40
 8007a6a:	68f8      	ldr	r0, [r7, #12]
 8007a6c:	f000 f814 	bl	8007a98 <UART_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d005      	beq.n	8007a82 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2220      	movs	r2, #32
 8007a7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e006      	b.n	8007a90 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2220      	movs	r2, #32
 8007a86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	e000      	b.n	8007a90 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007a8e:	2302      	movs	r3, #2
  }
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3720      	adds	r7, #32
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aa8:	e03b      	b.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aaa:	6a3b      	ldr	r3, [r7, #32]
 8007aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ab0:	d037      	beq.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab2:	f7fb fe23 	bl	80036fc <HAL_GetTick>
 8007ab6:	4602      	mov	r2, r0
 8007ab8:	683b      	ldr	r3, [r7, #0]
 8007aba:	1ad3      	subs	r3, r2, r3
 8007abc:	6a3a      	ldr	r2, [r7, #32]
 8007abe:	429a      	cmp	r2, r3
 8007ac0:	d302      	bcc.n	8007ac8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d101      	bne.n	8007acc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ac8:	2303      	movs	r3, #3
 8007aca:	e03a      	b.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	68db      	ldr	r3, [r3, #12]
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d023      	beq.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	2b80      	cmp	r3, #128	@ 0x80
 8007ade:	d020      	beq.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	2b40      	cmp	r3, #64	@ 0x40
 8007ae4:	d01d      	beq.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0308 	and.w	r3, r3, #8
 8007af0:	2b08      	cmp	r3, #8
 8007af2:	d116      	bne.n	8007b22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007af4:	2300      	movs	r3, #0
 8007af6:	617b      	str	r3, [r7, #20]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	617b      	str	r3, [r7, #20]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	617b      	str	r3, [r7, #20]
 8007b08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b0a:	68f8      	ldr	r0, [r7, #12]
 8007b0c:	f000 f81d 	bl	8007b4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	2208      	movs	r2, #8
 8007b14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e00f      	b.n	8007b42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	4013      	ands	r3, r2
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	bf0c      	ite	eq
 8007b32:	2301      	moveq	r3, #1
 8007b34:	2300      	movne	r3, #0
 8007b36:	b2db      	uxtb	r3, r3
 8007b38:	461a      	mov	r2, r3
 8007b3a:	79fb      	ldrb	r3, [r7, #7]
 8007b3c:	429a      	cmp	r2, r3
 8007b3e:	d0b4      	beq.n	8007aaa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3718      	adds	r7, #24
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b095      	sub	sp, #84	@ 0x54
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	330c      	adds	r3, #12
 8007b58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5c:	e853 3f00 	ldrex	r3, [r3]
 8007b60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	330c      	adds	r3, #12
 8007b70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b72:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b7a:	e841 2300 	strex	r3, r2, [r1]
 8007b7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1e5      	bne.n	8007b52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3314      	adds	r3, #20
 8007b8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	e853 3f00 	ldrex	r3, [r3]
 8007b94:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	f023 0301 	bic.w	r3, r3, #1
 8007b9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3314      	adds	r3, #20
 8007ba4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ba6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007baa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bae:	e841 2300 	strex	r3, r2, [r1]
 8007bb2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1e5      	bne.n	8007b86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d119      	bne.n	8007bf6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f023 0310 	bic.w	r3, r3, #16
 8007bd8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	330c      	adds	r3, #12
 8007be0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be2:	61ba      	str	r2, [r7, #24]
 8007be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6979      	ldr	r1, [r7, #20]
 8007be8:	69ba      	ldr	r2, [r7, #24]
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e5      	bne.n	8007bc2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2220      	movs	r2, #32
 8007bfa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2200      	movs	r2, #0
 8007c02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c04:	bf00      	nop
 8007c06:	3754      	adds	r7, #84	@ 0x54
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c14:	b0c0      	sub	sp, #256	@ 0x100
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	691b      	ldr	r3, [r3, #16]
 8007c24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2c:	68d9      	ldr	r1, [r3, #12]
 8007c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	ea40 0301 	orr.w	r3, r0, r1
 8007c38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	431a      	orrs	r2, r3
 8007c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	431a      	orrs	r2, r3
 8007c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c68:	f021 010c 	bic.w	r1, r1, #12
 8007c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c76:	430b      	orrs	r3, r1
 8007c78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8a:	6999      	ldr	r1, [r3, #24]
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	ea40 0301 	orr.w	r3, r0, r1
 8007c96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	4b8f      	ldr	r3, [pc, #572]	@ (8007edc <UART_SetConfig+0x2cc>)
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d005      	beq.n	8007cb0 <UART_SetConfig+0xa0>
 8007ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	4b8d      	ldr	r3, [pc, #564]	@ (8007ee0 <UART_SetConfig+0x2d0>)
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d104      	bne.n	8007cba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cb0:	f7ff fbb8 	bl	8007424 <HAL_RCC_GetPCLK2Freq>
 8007cb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cb8:	e003      	b.n	8007cc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cba:	f7ff fb9f 	bl	80073fc <HAL_RCC_GetPCLK1Freq>
 8007cbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ccc:	f040 810c 	bne.w	8007ee8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007cde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ce2:	4622      	mov	r2, r4
 8007ce4:	462b      	mov	r3, r5
 8007ce6:	1891      	adds	r1, r2, r2
 8007ce8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cea:	415b      	adcs	r3, r3
 8007cec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	eb12 0801 	adds.w	r8, r2, r1
 8007cf8:	4629      	mov	r1, r5
 8007cfa:	eb43 0901 	adc.w	r9, r3, r1
 8007cfe:	f04f 0200 	mov.w	r2, #0
 8007d02:	f04f 0300 	mov.w	r3, #0
 8007d06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d12:	4690      	mov	r8, r2
 8007d14:	4699      	mov	r9, r3
 8007d16:	4623      	mov	r3, r4
 8007d18:	eb18 0303 	adds.w	r3, r8, r3
 8007d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d20:	462b      	mov	r3, r5
 8007d22:	eb49 0303 	adc.w	r3, r9, r3
 8007d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d2e:	685b      	ldr	r3, [r3, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d3e:	460b      	mov	r3, r1
 8007d40:	18db      	adds	r3, r3, r3
 8007d42:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d44:	4613      	mov	r3, r2
 8007d46:	eb42 0303 	adc.w	r3, r2, r3
 8007d4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d54:	f7f8 fa8c 	bl	8000270 <__aeabi_uldivmod>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	460b      	mov	r3, r1
 8007d5c:	4b61      	ldr	r3, [pc, #388]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8007d62:	095b      	lsrs	r3, r3, #5
 8007d64:	011c      	lsls	r4, r3, #4
 8007d66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d78:	4642      	mov	r2, r8
 8007d7a:	464b      	mov	r3, r9
 8007d7c:	1891      	adds	r1, r2, r2
 8007d7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d80:	415b      	adcs	r3, r3
 8007d82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d88:	4641      	mov	r1, r8
 8007d8a:	eb12 0a01 	adds.w	sl, r2, r1
 8007d8e:	4649      	mov	r1, r9
 8007d90:	eb43 0b01 	adc.w	fp, r3, r1
 8007d94:	f04f 0200 	mov.w	r2, #0
 8007d98:	f04f 0300 	mov.w	r3, #0
 8007d9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007da0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007da4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007da8:	4692      	mov	sl, r2
 8007daa:	469b      	mov	fp, r3
 8007dac:	4643      	mov	r3, r8
 8007dae:	eb1a 0303 	adds.w	r3, sl, r3
 8007db2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007db6:	464b      	mov	r3, r9
 8007db8:	eb4b 0303 	adc.w	r3, fp, r3
 8007dbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dcc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	18db      	adds	r3, r3, r3
 8007dd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dda:	4613      	mov	r3, r2
 8007ddc:	eb42 0303 	adc.w	r3, r2, r3
 8007de0:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007de6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dea:	f7f8 fa41 	bl	8000270 <__aeabi_uldivmod>
 8007dee:	4602      	mov	r2, r0
 8007df0:	460b      	mov	r3, r1
 8007df2:	4611      	mov	r1, r2
 8007df4:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007df6:	fba3 2301 	umull	r2, r3, r3, r1
 8007dfa:	095b      	lsrs	r3, r3, #5
 8007dfc:	2264      	movs	r2, #100	@ 0x64
 8007dfe:	fb02 f303 	mul.w	r3, r2, r3
 8007e02:	1acb      	subs	r3, r1, r3
 8007e04:	00db      	lsls	r3, r3, #3
 8007e06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e0a:	4b36      	ldr	r3, [pc, #216]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007e0c:	fba3 2302 	umull	r2, r3, r3, r2
 8007e10:	095b      	lsrs	r3, r3, #5
 8007e12:	005b      	lsls	r3, r3, #1
 8007e14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e18:	441c      	add	r4, r3
 8007e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e1e:	2200      	movs	r2, #0
 8007e20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e2c:	4642      	mov	r2, r8
 8007e2e:	464b      	mov	r3, r9
 8007e30:	1891      	adds	r1, r2, r2
 8007e32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e34:	415b      	adcs	r3, r3
 8007e36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e3c:	4641      	mov	r1, r8
 8007e3e:	1851      	adds	r1, r2, r1
 8007e40:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e42:	4649      	mov	r1, r9
 8007e44:	414b      	adcs	r3, r1
 8007e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e48:	f04f 0200 	mov.w	r2, #0
 8007e4c:	f04f 0300 	mov.w	r3, #0
 8007e50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e54:	4659      	mov	r1, fp
 8007e56:	00cb      	lsls	r3, r1, #3
 8007e58:	4651      	mov	r1, sl
 8007e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e5e:	4651      	mov	r1, sl
 8007e60:	00ca      	lsls	r2, r1, #3
 8007e62:	4610      	mov	r0, r2
 8007e64:	4619      	mov	r1, r3
 8007e66:	4603      	mov	r3, r0
 8007e68:	4642      	mov	r2, r8
 8007e6a:	189b      	adds	r3, r3, r2
 8007e6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e70:	464b      	mov	r3, r9
 8007e72:	460a      	mov	r2, r1
 8007e74:	eb42 0303 	adc.w	r3, r2, r3
 8007e78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e90:	460b      	mov	r3, r1
 8007e92:	18db      	adds	r3, r3, r3
 8007e94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e96:	4613      	mov	r3, r2
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ea2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ea6:	f7f8 f9e3 	bl	8000270 <__aeabi_uldivmod>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	460b      	mov	r3, r1
 8007eae:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb4:	095b      	lsrs	r3, r3, #5
 8007eb6:	2164      	movs	r1, #100	@ 0x64
 8007eb8:	fb01 f303 	mul.w	r3, r1, r3
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	00db      	lsls	r3, r3, #3
 8007ec0:	3332      	adds	r3, #50	@ 0x32
 8007ec2:	4a08      	ldr	r2, [pc, #32]	@ (8007ee4 <UART_SetConfig+0x2d4>)
 8007ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ec8:	095b      	lsrs	r3, r3, #5
 8007eca:	f003 0207 	and.w	r2, r3, #7
 8007ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4422      	add	r2, r4
 8007ed6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007ed8:	e106      	b.n	80080e8 <UART_SetConfig+0x4d8>
 8007eda:	bf00      	nop
 8007edc:	40011000 	.word	0x40011000
 8007ee0:	40011400 	.word	0x40011400
 8007ee4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eec:	2200      	movs	r2, #0
 8007eee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ef2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007ef6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007efa:	4642      	mov	r2, r8
 8007efc:	464b      	mov	r3, r9
 8007efe:	1891      	adds	r1, r2, r2
 8007f00:	6239      	str	r1, [r7, #32]
 8007f02:	415b      	adcs	r3, r3
 8007f04:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f0a:	4641      	mov	r1, r8
 8007f0c:	1854      	adds	r4, r2, r1
 8007f0e:	4649      	mov	r1, r9
 8007f10:	eb43 0501 	adc.w	r5, r3, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	00eb      	lsls	r3, r5, #3
 8007f1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f22:	00e2      	lsls	r2, r4, #3
 8007f24:	4614      	mov	r4, r2
 8007f26:	461d      	mov	r5, r3
 8007f28:	4643      	mov	r3, r8
 8007f2a:	18e3      	adds	r3, r4, r3
 8007f2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f30:	464b      	mov	r3, r9
 8007f32:	eb45 0303 	adc.w	r3, r5, r3
 8007f36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f4a:	f04f 0200 	mov.w	r2, #0
 8007f4e:	f04f 0300 	mov.w	r3, #0
 8007f52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f56:	4629      	mov	r1, r5
 8007f58:	008b      	lsls	r3, r1, #2
 8007f5a:	4621      	mov	r1, r4
 8007f5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f60:	4621      	mov	r1, r4
 8007f62:	008a      	lsls	r2, r1, #2
 8007f64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f68:	f7f8 f982 	bl	8000270 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4b60      	ldr	r3, [pc, #384]	@ (80080f4 <UART_SetConfig+0x4e4>)
 8007f72:	fba3 2302 	umull	r2, r3, r3, r2
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	011c      	lsls	r4, r3, #4
 8007f7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f7e:	2200      	movs	r2, #0
 8007f80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f8c:	4642      	mov	r2, r8
 8007f8e:	464b      	mov	r3, r9
 8007f90:	1891      	adds	r1, r2, r2
 8007f92:	61b9      	str	r1, [r7, #24]
 8007f94:	415b      	adcs	r3, r3
 8007f96:	61fb      	str	r3, [r7, #28]
 8007f98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f9c:	4641      	mov	r1, r8
 8007f9e:	1851      	adds	r1, r2, r1
 8007fa0:	6139      	str	r1, [r7, #16]
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	414b      	adcs	r3, r1
 8007fa6:	617b      	str	r3, [r7, #20]
 8007fa8:	f04f 0200 	mov.w	r2, #0
 8007fac:	f04f 0300 	mov.w	r3, #0
 8007fb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb4:	4659      	mov	r1, fp
 8007fb6:	00cb      	lsls	r3, r1, #3
 8007fb8:	4651      	mov	r1, sl
 8007fba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fbe:	4651      	mov	r1, sl
 8007fc0:	00ca      	lsls	r2, r1, #3
 8007fc2:	4610      	mov	r0, r2
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	4603      	mov	r3, r0
 8007fc8:	4642      	mov	r2, r8
 8007fca:	189b      	adds	r3, r3, r2
 8007fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fd0:	464b      	mov	r3, r9
 8007fd2:	460a      	mov	r2, r1
 8007fd4:	eb42 0303 	adc.w	r3, r2, r3
 8007fd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fe6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fe8:	f04f 0200 	mov.w	r2, #0
 8007fec:	f04f 0300 	mov.w	r3, #0
 8007ff0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ff4:	4649      	mov	r1, r9
 8007ff6:	008b      	lsls	r3, r1, #2
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ffe:	4641      	mov	r1, r8
 8008000:	008a      	lsls	r2, r1, #2
 8008002:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008006:	f7f8 f933 	bl	8000270 <__aeabi_uldivmod>
 800800a:	4602      	mov	r2, r0
 800800c:	460b      	mov	r3, r1
 800800e:	4611      	mov	r1, r2
 8008010:	4b38      	ldr	r3, [pc, #224]	@ (80080f4 <UART_SetConfig+0x4e4>)
 8008012:	fba3 2301 	umull	r2, r3, r3, r1
 8008016:	095b      	lsrs	r3, r3, #5
 8008018:	2264      	movs	r2, #100	@ 0x64
 800801a:	fb02 f303 	mul.w	r3, r2, r3
 800801e:	1acb      	subs	r3, r1, r3
 8008020:	011b      	lsls	r3, r3, #4
 8008022:	3332      	adds	r3, #50	@ 0x32
 8008024:	4a33      	ldr	r2, [pc, #204]	@ (80080f4 <UART_SetConfig+0x4e4>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	095b      	lsrs	r3, r3, #5
 800802c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008030:	441c      	add	r4, r3
 8008032:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008036:	2200      	movs	r2, #0
 8008038:	673b      	str	r3, [r7, #112]	@ 0x70
 800803a:	677a      	str	r2, [r7, #116]	@ 0x74
 800803c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008040:	4642      	mov	r2, r8
 8008042:	464b      	mov	r3, r9
 8008044:	1891      	adds	r1, r2, r2
 8008046:	60b9      	str	r1, [r7, #8]
 8008048:	415b      	adcs	r3, r3
 800804a:	60fb      	str	r3, [r7, #12]
 800804c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008050:	4641      	mov	r1, r8
 8008052:	1851      	adds	r1, r2, r1
 8008054:	6039      	str	r1, [r7, #0]
 8008056:	4649      	mov	r1, r9
 8008058:	414b      	adcs	r3, r1
 800805a:	607b      	str	r3, [r7, #4]
 800805c:	f04f 0200 	mov.w	r2, #0
 8008060:	f04f 0300 	mov.w	r3, #0
 8008064:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008068:	4659      	mov	r1, fp
 800806a:	00cb      	lsls	r3, r1, #3
 800806c:	4651      	mov	r1, sl
 800806e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008072:	4651      	mov	r1, sl
 8008074:	00ca      	lsls	r2, r1, #3
 8008076:	4610      	mov	r0, r2
 8008078:	4619      	mov	r1, r3
 800807a:	4603      	mov	r3, r0
 800807c:	4642      	mov	r2, r8
 800807e:	189b      	adds	r3, r3, r2
 8008080:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008082:	464b      	mov	r3, r9
 8008084:	460a      	mov	r2, r1
 8008086:	eb42 0303 	adc.w	r3, r2, r3
 800808a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800808c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	663b      	str	r3, [r7, #96]	@ 0x60
 8008096:	667a      	str	r2, [r7, #100]	@ 0x64
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080a4:	4649      	mov	r1, r9
 80080a6:	008b      	lsls	r3, r1, #2
 80080a8:	4641      	mov	r1, r8
 80080aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ae:	4641      	mov	r1, r8
 80080b0:	008a      	lsls	r2, r1, #2
 80080b2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080b6:	f7f8 f8db 	bl	8000270 <__aeabi_uldivmod>
 80080ba:	4602      	mov	r2, r0
 80080bc:	460b      	mov	r3, r1
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <UART_SetConfig+0x4e4>)
 80080c0:	fba3 1302 	umull	r1, r3, r3, r2
 80080c4:	095b      	lsrs	r3, r3, #5
 80080c6:	2164      	movs	r1, #100	@ 0x64
 80080c8:	fb01 f303 	mul.w	r3, r1, r3
 80080cc:	1ad3      	subs	r3, r2, r3
 80080ce:	011b      	lsls	r3, r3, #4
 80080d0:	3332      	adds	r3, #50	@ 0x32
 80080d2:	4a08      	ldr	r2, [pc, #32]	@ (80080f4 <UART_SetConfig+0x4e4>)
 80080d4:	fba2 2303 	umull	r2, r3, r2, r3
 80080d8:	095b      	lsrs	r3, r3, #5
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4422      	add	r2, r4
 80080e6:	609a      	str	r2, [r3, #8]
}
 80080e8:	bf00      	nop
 80080ea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080ee:	46bd      	mov	sp, r7
 80080f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f4:	51eb851f 	.word	0x51eb851f

080080f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080f8:	b084      	sub	sp, #16
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b084      	sub	sp, #16
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	f107 001c 	add.w	r0, r7, #28
 8008106:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800810a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800810e:	2b01      	cmp	r3, #1
 8008110:	d123      	bne.n	800815a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008116:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008126:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	68db      	ldr	r3, [r3, #12]
 8008132:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800813a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800813e:	2b01      	cmp	r3, #1
 8008140:	d105      	bne.n	800814e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	68db      	ldr	r3, [r3, #12]
 8008146:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f000 f9dc 	bl	800850c <USB_CoreReset>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]
 8008158:	e01b      	b.n	8008192 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f9d0 	bl	800850c <USB_CoreReset>
 800816c:	4603      	mov	r3, r0
 800816e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008170:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800817c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	639a      	str	r2, [r3, #56]	@ 0x38
 8008184:	e005      	b.n	8008192 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800818a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008192:	7fbb      	ldrb	r3, [r7, #30]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d10b      	bne.n	80081b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f043 0206 	orr.w	r2, r3, #6
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	689b      	ldr	r3, [r3, #8]
 80081a8:	f043 0220 	orr.w	r2, r3, #32
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80081b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80081bc:	b004      	add	sp, #16
 80081be:	4770      	bx	lr

080081c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b083      	sub	sp, #12
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	f043 0201 	orr.w	r2, r3, #1
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	370c      	adds	r7, #12
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr

080081e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081e2:	b480      	push	{r7}
 80081e4:	b083      	sub	sp, #12
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	689b      	ldr	r3, [r3, #8]
 80081ee:	f023 0201 	bic.w	r2, r3, #1
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081f6:	2300      	movs	r3, #0
}
 80081f8:	4618      	mov	r0, r3
 80081fa:	370c      	adds	r7, #12
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	460b      	mov	r3, r1
 800820e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008210:	2300      	movs	r3, #0
 8008212:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008220:	78fb      	ldrb	r3, [r7, #3]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d115      	bne.n	8008252 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	68db      	ldr	r3, [r3, #12]
 800822a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008232:	200a      	movs	r0, #10
 8008234:	f7fb fa6e 	bl	8003714 <HAL_Delay>
      ms += 10U;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	330a      	adds	r3, #10
 800823c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f956 	bl	80084f0 <USB_GetMode>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d01e      	beq.n	8008288 <USB_SetCurrentMode+0x84>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2bc7      	cmp	r3, #199	@ 0xc7
 800824e:	d9f0      	bls.n	8008232 <USB_SetCurrentMode+0x2e>
 8008250:	e01a      	b.n	8008288 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008252:	78fb      	ldrb	r3, [r7, #3]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d115      	bne.n	8008284 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	68db      	ldr	r3, [r3, #12]
 800825c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008264:	200a      	movs	r0, #10
 8008266:	f7fb fa55 	bl	8003714 <HAL_Delay>
      ms += 10U;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	330a      	adds	r3, #10
 800826e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f93d 	bl	80084f0 <USB_GetMode>
 8008276:	4603      	mov	r3, r0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d005      	beq.n	8008288 <USB_SetCurrentMode+0x84>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008280:	d9f0      	bls.n	8008264 <USB_SetCurrentMode+0x60>
 8008282:	e001      	b.n	8008288 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e005      	b.n	8008294 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2bc8      	cmp	r3, #200	@ 0xc8
 800828c:	d101      	bne.n	8008292 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e000      	b.n	8008294 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3710      	adds	r7, #16
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}

0800829c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800829c:	b480      	push	{r7}
 800829e:	b085      	sub	sp, #20
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	6078      	str	r0, [r7, #4]
 80082a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082a6:	2300      	movs	r3, #0
 80082a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	3301      	adds	r3, #1
 80082ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082b6:	d901      	bls.n	80082bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e01b      	b.n	80082f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	691b      	ldr	r3, [r3, #16]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	daf2      	bge.n	80082aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80082c4:	2300      	movs	r3, #0
 80082c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	019b      	lsls	r3, r3, #6
 80082cc:	f043 0220 	orr.w	r2, r3, #32
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	3301      	adds	r3, #1
 80082d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80082e0:	d901      	bls.n	80082e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80082e2:	2303      	movs	r3, #3
 80082e4:	e006      	b.n	80082f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0320 	and.w	r3, r3, #32
 80082ee:	2b20      	cmp	r3, #32
 80082f0:	d0f0      	beq.n	80082d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3714      	adds	r7, #20
 80082f8:	46bd      	mov	sp, r7
 80082fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fe:	4770      	bx	lr

08008300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008300:	b480      	push	{r7}
 8008302:	b085      	sub	sp, #20
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008308:	2300      	movs	r3, #0
 800830a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	3301      	adds	r3, #1
 8008310:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008318:	d901      	bls.n	800831e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800831a:	2303      	movs	r3, #3
 800831c:	e018      	b.n	8008350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	691b      	ldr	r3, [r3, #16]
 8008322:	2b00      	cmp	r3, #0
 8008324:	daf2      	bge.n	800830c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008326:	2300      	movs	r3, #0
 8008328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2210      	movs	r2, #16
 800832e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	3301      	adds	r3, #1
 8008334:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800833c:	d901      	bls.n	8008342 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800833e:	2303      	movs	r3, #3
 8008340:	e006      	b.n	8008350 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	691b      	ldr	r3, [r3, #16]
 8008346:	f003 0310 	and.w	r3, r3, #16
 800834a:	2b10      	cmp	r3, #16
 800834c:	d0f0      	beq.n	8008330 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800834e:	2300      	movs	r3, #0
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800835c:	b480      	push	{r7}
 800835e:	b089      	sub	sp, #36	@ 0x24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60f8      	str	r0, [r7, #12]
 8008364:	60b9      	str	r1, [r7, #8]
 8008366:	4611      	mov	r1, r2
 8008368:	461a      	mov	r2, r3
 800836a:	460b      	mov	r3, r1
 800836c:	71fb      	strb	r3, [r7, #7]
 800836e:	4613      	mov	r3, r2
 8008370:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800837a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800837e:	2b00      	cmp	r3, #0
 8008380:	d123      	bne.n	80083ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008382:	88bb      	ldrh	r3, [r7, #4]
 8008384:	3303      	adds	r3, #3
 8008386:	089b      	lsrs	r3, r3, #2
 8008388:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800838a:	2300      	movs	r3, #0
 800838c:	61bb      	str	r3, [r7, #24]
 800838e:	e018      	b.n	80083c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008390:	79fb      	ldrb	r3, [r7, #7]
 8008392:	031a      	lsls	r2, r3, #12
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	4413      	add	r3, r2
 8008398:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800839c:	461a      	mov	r2, r3
 800839e:	69fb      	ldr	r3, [r7, #28]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80083a4:	69fb      	ldr	r3, [r7, #28]
 80083a6:	3301      	adds	r3, #1
 80083a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	3301      	adds	r3, #1
 80083ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	3301      	adds	r3, #1
 80083b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3301      	adds	r3, #1
 80083ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80083bc:	69bb      	ldr	r3, [r7, #24]
 80083be:	3301      	adds	r3, #1
 80083c0:	61bb      	str	r3, [r7, #24]
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	693b      	ldr	r3, [r7, #16]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d3e2      	bcc.n	8008390 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80083ca:	2300      	movs	r3, #0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3724      	adds	r7, #36	@ 0x24
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80083d8:	b480      	push	{r7}
 80083da:	b08b      	sub	sp, #44	@ 0x2c
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	4613      	mov	r3, r2
 80083e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80083ee:	88fb      	ldrh	r3, [r7, #6]
 80083f0:	089b      	lsrs	r3, r3, #2
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80083f6:	88fb      	ldrh	r3, [r7, #6]
 80083f8:	f003 0303 	and.w	r3, r3, #3
 80083fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80083fe:	2300      	movs	r3, #0
 8008400:	623b      	str	r3, [r7, #32]
 8008402:	e014      	b.n	800842e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008404:	69bb      	ldr	r3, [r7, #24]
 8008406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800840a:	681a      	ldr	r2, [r3, #0]
 800840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800840e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008412:	3301      	adds	r3, #1
 8008414:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	3301      	adds	r3, #1
 800841a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800841c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841e:	3301      	adds	r3, #1
 8008420:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	3301      	adds	r3, #1
 8008426:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	3301      	adds	r3, #1
 800842c:	623b      	str	r3, [r7, #32]
 800842e:	6a3a      	ldr	r2, [r7, #32]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	429a      	cmp	r2, r3
 8008434:	d3e6      	bcc.n	8008404 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008436:	8bfb      	ldrh	r3, [r7, #30]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d01e      	beq.n	800847a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800843c:	2300      	movs	r3, #0
 800843e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008440:	69bb      	ldr	r3, [r7, #24]
 8008442:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008446:	461a      	mov	r2, r3
 8008448:	f107 0310 	add.w	r3, r7, #16
 800844c:	6812      	ldr	r2, [r2, #0]
 800844e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	b2db      	uxtb	r3, r3
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	fa22 f303 	lsr.w	r3, r2, r3
 800845c:	b2da      	uxtb	r2, r3
 800845e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008460:	701a      	strb	r2, [r3, #0]
      i++;
 8008462:	6a3b      	ldr	r3, [r7, #32]
 8008464:	3301      	adds	r3, #1
 8008466:	623b      	str	r3, [r7, #32]
      pDest++;
 8008468:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800846a:	3301      	adds	r3, #1
 800846c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800846e:	8bfb      	ldrh	r3, [r7, #30]
 8008470:	3b01      	subs	r3, #1
 8008472:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008474:	8bfb      	ldrh	r3, [r7, #30]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1ea      	bne.n	8008450 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800847a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800847c:	4618      	mov	r0, r3
 800847e:	372c      	adds	r7, #44	@ 0x2c
 8008480:	46bd      	mov	sp, r7
 8008482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008486:	4770      	bx	lr

08008488 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8008488:	b480      	push	{r7}
 800848a:	b085      	sub	sp, #20
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	695b      	ldr	r3, [r3, #20]
 8008494:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	699b      	ldr	r3, [r3, #24]
 800849a:	68fa      	ldr	r2, [r7, #12]
 800849c:	4013      	ands	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80084a0:	68fb      	ldr	r3, [r7, #12]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	3714      	adds	r7, #20
 80084a6:	46bd      	mov	sp, r7
 80084a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ac:	4770      	bx	lr

080084ae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80084ae:	b480      	push	{r7}
 80084b0:	b085      	sub	sp, #20
 80084b2:	af00      	add	r7, sp, #0
 80084b4:	6078      	str	r0, [r7, #4]
 80084b6:	460b      	mov	r3, r1
 80084b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80084be:	78fb      	ldrb	r3, [r7, #3]
 80084c0:	015a      	lsls	r2, r3, #5
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	4413      	add	r3, r2
 80084c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084ca:	689b      	ldr	r3, [r3, #8]
 80084cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	015a      	lsls	r2, r3, #5
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	4413      	add	r3, r2
 80084d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	68ba      	ldr	r2, [r7, #8]
 80084de:	4013      	ands	r3, r2
 80084e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084e2:	68bb      	ldr	r3, [r7, #8]
}
 80084e4:	4618      	mov	r0, r3
 80084e6:	3714      	adds	r7, #20
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	695b      	ldr	r3, [r3, #20]
 80084fc:	f003 0301 	and.w	r3, r3, #1
}
 8008500:	4618      	mov	r0, r3
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800850c:	b480      	push	{r7}
 800850e:	b085      	sub	sp, #20
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008514:	2300      	movs	r3, #0
 8008516:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	3301      	adds	r3, #1
 800851c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008524:	d901      	bls.n	800852a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008526:	2303      	movs	r3, #3
 8008528:	e01b      	b.n	8008562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	691b      	ldr	r3, [r3, #16]
 800852e:	2b00      	cmp	r3, #0
 8008530:	daf2      	bge.n	8008518 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008532:	2300      	movs	r3, #0
 8008534:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	f043 0201 	orr.w	r2, r3, #1
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	3301      	adds	r3, #1
 8008546:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800854e:	d901      	bls.n	8008554 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008550:	2303      	movs	r3, #3
 8008552:	e006      	b.n	8008562 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	691b      	ldr	r3, [r3, #16]
 8008558:	f003 0301 	and.w	r3, r3, #1
 800855c:	2b01      	cmp	r3, #1
 800855e:	d0f0      	beq.n	8008542 <USB_CoreReset+0x36>

  return HAL_OK;
 8008560:	2300      	movs	r3, #0
}
 8008562:	4618      	mov	r0, r3
 8008564:	3714      	adds	r7, #20
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
	...

08008570 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008570:	b084      	sub	sp, #16
 8008572:	b580      	push	{r7, lr}
 8008574:	b086      	sub	sp, #24
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
 800857a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800857e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008582:	2300      	movs	r3, #0
 8008584:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008590:	461a      	mov	r2, r3
 8008592:	2300      	movs	r3, #0
 8008594:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800859a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	68db      	ldr	r3, [r3, #12]
 80085be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d119      	bne.n	80085fa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80085c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d10a      	bne.n	80085e4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085dc:	f043 0304 	orr.w	r3, r3, #4
 80085e0:	6013      	str	r3, [r2, #0]
 80085e2:	e014      	b.n	800860e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	68fa      	ldr	r2, [r7, #12]
 80085ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80085f2:	f023 0304 	bic.w	r3, r3, #4
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	e009      	b.n	800860e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008608:	f023 0304 	bic.w	r3, r3, #4
 800860c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800860e:	2110      	movs	r1, #16
 8008610:	6878      	ldr	r0, [r7, #4]
 8008612:	f7ff fe43 	bl	800829c <USB_FlushTxFifo>
 8008616:	4603      	mov	r3, r0
 8008618:	2b00      	cmp	r3, #0
 800861a:	d001      	beq.n	8008620 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800861c:	2301      	movs	r3, #1
 800861e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f7ff fe6d 	bl	8008300 <USB_FlushRxFifo>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d001      	beq.n	8008630 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008630:	2300      	movs	r3, #0
 8008632:	613b      	str	r3, [r7, #16]
 8008634:	e015      	b.n	8008662 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	015a      	lsls	r2, r3, #5
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008642:	461a      	mov	r2, r3
 8008644:	f04f 33ff 	mov.w	r3, #4294967295
 8008648:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	015a      	lsls	r2, r3, #5
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4413      	add	r3, r2
 8008652:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008656:	461a      	mov	r2, r3
 8008658:	2300      	movs	r3, #0
 800865a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	3301      	adds	r3, #1
 8008660:	613b      	str	r3, [r7, #16]
 8008662:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008666:	461a      	mov	r2, r3
 8008668:	693b      	ldr	r3, [r7, #16]
 800866a:	4293      	cmp	r3, r2
 800866c:	d3e3      	bcc.n	8008636 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2200      	movs	r2, #0
 8008672:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a18      	ldr	r2, [pc, #96]	@ (80086e0 <USB_HostInit+0x170>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d10b      	bne.n	800869c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800868a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	4a15      	ldr	r2, [pc, #84]	@ (80086e4 <USB_HostInit+0x174>)
 8008690:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4a14      	ldr	r2, [pc, #80]	@ (80086e8 <USB_HostInit+0x178>)
 8008696:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800869a:	e009      	b.n	80086b0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2280      	movs	r2, #128	@ 0x80
 80086a0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a11      	ldr	r2, [pc, #68]	@ (80086ec <USB_HostInit+0x17c>)
 80086a6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	4a11      	ldr	r2, [pc, #68]	@ (80086f0 <USB_HostInit+0x180>)
 80086ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80086b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d105      	bne.n	80086c4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	699b      	ldr	r3, [r3, #24]
 80086bc:	f043 0210 	orr.w	r2, r3, #16
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	699a      	ldr	r2, [r3, #24]
 80086c8:	4b0a      	ldr	r3, [pc, #40]	@ (80086f4 <USB_HostInit+0x184>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	687a      	ldr	r2, [r7, #4]
 80086ce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80086d2:	4618      	mov	r0, r3
 80086d4:	3718      	adds	r7, #24
 80086d6:	46bd      	mov	sp, r7
 80086d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80086dc:	b004      	add	sp, #16
 80086de:	4770      	bx	lr
 80086e0:	40040000 	.word	0x40040000
 80086e4:	01000200 	.word	0x01000200
 80086e8:	00e00300 	.word	0x00e00300
 80086ec:	00600080 	.word	0x00600080
 80086f0:	004000e0 	.word	0x004000e0
 80086f4:	a3200008 	.word	0xa3200008

080086f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b085      	sub	sp, #20
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	460b      	mov	r3, r1
 8008702:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	68fa      	ldr	r2, [r7, #12]
 8008712:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008716:	f023 0303 	bic.w	r3, r3, #3
 800871a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	78fb      	ldrb	r3, [r7, #3]
 8008726:	f003 0303 	and.w	r3, r3, #3
 800872a:	68f9      	ldr	r1, [r7, #12]
 800872c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008730:	4313      	orrs	r3, r2
 8008732:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008734:	78fb      	ldrb	r3, [r7, #3]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d107      	bne.n	800874a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008740:	461a      	mov	r2, r3
 8008742:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8008746:	6053      	str	r3, [r2, #4]
 8008748:	e00c      	b.n	8008764 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800874a:	78fb      	ldrb	r3, [r7, #3]
 800874c:	2b02      	cmp	r3, #2
 800874e:	d107      	bne.n	8008760 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008756:	461a      	mov	r2, r3
 8008758:	f241 7370 	movw	r3, #6000	@ 0x1770
 800875c:	6053      	str	r3, [r2, #4]
 800875e:	e001      	b.n	8008764 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	e000      	b.n	8008766 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8008764:	2300      	movs	r3, #0
}
 8008766:	4618      	mov	r0, r3
 8008768:	3714      	adds	r7, #20
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8008772:	b580      	push	{r7, lr}
 8008774:	b084      	sub	sp, #16
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800877e:	2300      	movs	r3, #0
 8008780:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008792:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800879c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80087a2:	2064      	movs	r0, #100	@ 0x64
 80087a4:	f7fa ffb6 	bl	8003714 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80087a8:	68bb      	ldr	r3, [r7, #8]
 80087aa:	68fa      	ldr	r2, [r7, #12]
 80087ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80087b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80087b6:	200a      	movs	r0, #10
 80087b8:	f7fa ffac 	bl	8003714 <HAL_Delay>

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b085      	sub	sp, #20
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	460b      	mov	r3, r1
 80087d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80087d6:	2300      	movs	r3, #0
 80087d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80087ea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d109      	bne.n	800880a <USB_DriveVbus+0x44>
 80087f6:	78fb      	ldrb	r3, [r7, #3]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d106      	bne.n	800880a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	68fa      	ldr	r2, [r7, #12]
 8008800:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008804:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008808:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008810:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008814:	d109      	bne.n	800882a <USB_DriveVbus+0x64>
 8008816:	78fb      	ldrb	r3, [r7, #3]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d106      	bne.n	800882a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	68fa      	ldr	r2, [r7, #12]
 8008820:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008824:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008828:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008844:	2300      	movs	r3, #0
 8008846:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	0c5b      	lsrs	r3, r3, #17
 8008856:	f003 0303 	and.w	r3, r3, #3
}
 800885a:	4618      	mov	r0, r3
 800885c:	3714      	adds	r7, #20
 800885e:	46bd      	mov	sp, r7
 8008860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008864:	4770      	bx	lr

08008866 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8008866:	b480      	push	{r7}
 8008868:	b085      	sub	sp, #20
 800886a:	af00      	add	r7, sp, #0
 800886c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008878:	689b      	ldr	r3, [r3, #8]
 800887a:	b29b      	uxth	r3, r3
}
 800887c:	4618      	mov	r0, r3
 800887e:	3714      	adds	r7, #20
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b088      	sub	sp, #32
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
 8008890:	4608      	mov	r0, r1
 8008892:	4611      	mov	r1, r2
 8008894:	461a      	mov	r2, r3
 8008896:	4603      	mov	r3, r0
 8008898:	70fb      	strb	r3, [r7, #3]
 800889a:	460b      	mov	r3, r1
 800889c:	70bb      	strb	r3, [r7, #2]
 800889e:	4613      	mov	r3, r2
 80088a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80088aa:	78fb      	ldrb	r3, [r7, #3]
 80088ac:	015a      	lsls	r2, r3, #5
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	4413      	add	r3, r2
 80088b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088b6:	461a      	mov	r2, r3
 80088b8:	f04f 33ff 	mov.w	r3, #4294967295
 80088bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80088be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80088c2:	2b03      	cmp	r3, #3
 80088c4:	d87c      	bhi.n	80089c0 <USB_HC_Init+0x138>
 80088c6:	a201      	add	r2, pc, #4	@ (adr r2, 80088cc <USB_HC_Init+0x44>)
 80088c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088cc:	080088dd 	.word	0x080088dd
 80088d0:	08008983 	.word	0x08008983
 80088d4:	080088dd 	.word	0x080088dd
 80088d8:	08008945 	.word	0x08008945
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80088dc:	78fb      	ldrb	r3, [r7, #3]
 80088de:	015a      	lsls	r2, r3, #5
 80088e0:	693b      	ldr	r3, [r7, #16]
 80088e2:	4413      	add	r3, r2
 80088e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088e8:	461a      	mov	r2, r3
 80088ea:	f240 439d 	movw	r3, #1181	@ 0x49d
 80088ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80088f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	da10      	bge.n	800891a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80088f8:	78fb      	ldrb	r3, [r7, #3]
 80088fa:	015a      	lsls	r2, r3, #5
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	4413      	add	r3, r2
 8008900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008904:	68db      	ldr	r3, [r3, #12]
 8008906:	78fa      	ldrb	r2, [r7, #3]
 8008908:	0151      	lsls	r1, r2, #5
 800890a:	693a      	ldr	r2, [r7, #16]
 800890c:	440a      	add	r2, r1
 800890e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008916:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8008918:	e055      	b.n	80089c6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	4a6f      	ldr	r2, [pc, #444]	@ (8008adc <USB_HC_Init+0x254>)
 800891e:	4293      	cmp	r3, r2
 8008920:	d151      	bne.n	80089c6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008922:	78fb      	ldrb	r3, [r7, #3]
 8008924:	015a      	lsls	r2, r3, #5
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	4413      	add	r3, r2
 800892a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	78fa      	ldrb	r2, [r7, #3]
 8008932:	0151      	lsls	r1, r2, #5
 8008934:	693a      	ldr	r2, [r7, #16]
 8008936:	440a      	add	r2, r1
 8008938:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800893c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008940:	60d3      	str	r3, [r2, #12]
      break;
 8008942:	e040      	b.n	80089c6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008944:	78fb      	ldrb	r3, [r7, #3]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	693b      	ldr	r3, [r7, #16]
 800894a:	4413      	add	r3, r2
 800894c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008950:	461a      	mov	r2, r3
 8008952:	f240 639d 	movw	r3, #1693	@ 0x69d
 8008956:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008958:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800895c:	2b00      	cmp	r3, #0
 800895e:	da34      	bge.n	80089ca <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008960:	78fb      	ldrb	r3, [r7, #3]
 8008962:	015a      	lsls	r2, r3, #5
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	4413      	add	r3, r2
 8008968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	0151      	lsls	r1, r2, #5
 8008972:	693a      	ldr	r2, [r7, #16]
 8008974:	440a      	add	r2, r1
 8008976:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800897a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800897e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8008980:	e023      	b.n	80089ca <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008982:	78fb      	ldrb	r3, [r7, #3]
 8008984:	015a      	lsls	r2, r3, #5
 8008986:	693b      	ldr	r3, [r7, #16]
 8008988:	4413      	add	r3, r2
 800898a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800898e:	461a      	mov	r2, r3
 8008990:	f240 2325 	movw	r3, #549	@ 0x225
 8008994:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008996:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800899a:	2b00      	cmp	r3, #0
 800899c:	da17      	bge.n	80089ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800899e:	78fb      	ldrb	r3, [r7, #3]
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	693b      	ldr	r3, [r7, #16]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	78fa      	ldrb	r2, [r7, #3]
 80089ae:	0151      	lsls	r1, r2, #5
 80089b0:	693a      	ldr	r2, [r7, #16]
 80089b2:	440a      	add	r2, r1
 80089b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089b8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80089bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80089be:	e006      	b.n	80089ce <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80089c0:	2301      	movs	r3, #1
 80089c2:	77fb      	strb	r3, [r7, #31]
      break;
 80089c4:	e004      	b.n	80089d0 <USB_HC_Init+0x148>
      break;
 80089c6:	bf00      	nop
 80089c8:	e002      	b.n	80089d0 <USB_HC_Init+0x148>
      break;
 80089ca:	bf00      	nop
 80089cc:	e000      	b.n	80089d0 <USB_HC_Init+0x148>
      break;
 80089ce:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80089d0:	78fb      	ldrb	r3, [r7, #3]
 80089d2:	015a      	lsls	r2, r3, #5
 80089d4:	693b      	ldr	r3, [r7, #16]
 80089d6:	4413      	add	r3, r2
 80089d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089dc:	461a      	mov	r2, r3
 80089de:	2300      	movs	r3, #0
 80089e0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	78fa      	ldrb	r2, [r7, #3]
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089fc:	f043 0302 	orr.w	r3, r3, #2
 8008a00:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a08:	699a      	ldr	r2, [r3, #24]
 8008a0a:	78fb      	ldrb	r3, [r7, #3]
 8008a0c:	f003 030f 	and.w	r3, r3, #15
 8008a10:	2101      	movs	r1, #1
 8008a12:	fa01 f303 	lsl.w	r3, r1, r3
 8008a16:	6939      	ldr	r1, [r7, #16]
 8008a18:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8008a2c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	da03      	bge.n	8008a3c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008a34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a38:	61bb      	str	r3, [r7, #24]
 8008a3a:	e001      	b.n	8008a40 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f7ff fef9 	bl	8008838 <USB_GetHostSpeed>
 8008a46:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008a48:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a4c:	2b02      	cmp	r3, #2
 8008a4e:	d106      	bne.n	8008a5e <USB_HC_Init+0x1d6>
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2b02      	cmp	r3, #2
 8008a54:	d003      	beq.n	8008a5e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008a56:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008a5a:	617b      	str	r3, [r7, #20]
 8008a5c:	e001      	b.n	8008a62 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a62:	787b      	ldrb	r3, [r7, #1]
 8008a64:	059b      	lsls	r3, r3, #22
 8008a66:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a6a:	78bb      	ldrb	r3, [r7, #2]
 8008a6c:	02db      	lsls	r3, r3, #11
 8008a6e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a72:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a74:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008a78:	049b      	lsls	r3, r3, #18
 8008a7a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008a7e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8008a80:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008a82:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008a86:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a88:	69bb      	ldr	r3, [r7, #24]
 8008a8a:	431a      	orrs	r2, r3
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008a90:	78fa      	ldrb	r2, [r7, #3]
 8008a92:	0151      	lsls	r1, r2, #5
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	440a      	add	r2, r1
 8008a98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8008a9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008aa0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8008aa2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008aa6:	2b03      	cmp	r3, #3
 8008aa8:	d003      	beq.n	8008ab2 <USB_HC_Init+0x22a>
 8008aaa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008aae:	2b01      	cmp	r3, #1
 8008ab0:	d10f      	bne.n	8008ad2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008ab2:	78fb      	ldrb	r3, [r7, #3]
 8008ab4:	015a      	lsls	r2, r3, #5
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	4413      	add	r3, r2
 8008aba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	78fa      	ldrb	r2, [r7, #3]
 8008ac2:	0151      	lsls	r1, r2, #5
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	440a      	add	r2, r1
 8008ac8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008acc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008ad0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8008ad2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3720      	adds	r7, #32
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}
 8008adc:	40040000 	.word	0x40040000

08008ae0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b08c      	sub	sp, #48	@ 0x30
 8008ae4:	af02      	add	r7, sp, #8
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	4613      	mov	r3, r2
 8008aec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8008af8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008afc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	4a5d      	ldr	r2, [pc, #372]	@ (8008c78 <USB_HC_StartXfer+0x198>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d12f      	bne.n	8008b66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d11c      	bne.n	8008b46 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8008b0c:	68bb      	ldr	r3, [r7, #8]
 8008b0e:	7c9b      	ldrb	r3, [r3, #18]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d003      	beq.n	8008b1c <USB_HC_StartXfer+0x3c>
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	7c9b      	ldrb	r3, [r3, #18]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d124      	bne.n	8008b66 <USB_HC_StartXfer+0x86>
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	799b      	ldrb	r3, [r3, #6]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d120      	bne.n	8008b66 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008b24:	69fb      	ldr	r3, [r7, #28]
 8008b26:	015a      	lsls	r2, r3, #5
 8008b28:	6a3b      	ldr	r3, [r7, #32]
 8008b2a:	4413      	add	r3, r2
 8008b2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b30:	68db      	ldr	r3, [r3, #12]
 8008b32:	69fa      	ldr	r2, [r7, #28]
 8008b34:	0151      	lsls	r1, r2, #5
 8008b36:	6a3a      	ldr	r2, [r7, #32]
 8008b38:	440a      	add	r2, r1
 8008b3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b42:	60d3      	str	r3, [r2, #12]
 8008b44:	e00f      	b.n	8008b66 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	791b      	ldrb	r3, [r3, #4]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d10b      	bne.n	8008b66 <USB_HC_StartXfer+0x86>
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	795b      	ldrb	r3, [r3, #5]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d107      	bne.n	8008b66 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	785b      	ldrb	r3, [r3, #1]
 8008b5a:	4619      	mov	r1, r3
 8008b5c:	68f8      	ldr	r0, [r7, #12]
 8008b5e:	f000 fb6b 	bl	8009238 <USB_DoPing>
        return HAL_OK;
 8008b62:	2300      	movs	r3, #0
 8008b64:	e232      	b.n	8008fcc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	799b      	ldrb	r3, [r3, #6]
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d158      	bne.n	8008c20 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	78db      	ldrb	r3, [r3, #3]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008b7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008b7c:	68ba      	ldr	r2, [r7, #8]
 8008b7e:	8a92      	ldrh	r2, [r2, #20]
 8008b80:	fb03 f202 	mul.w	r2, r3, r2
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	61da      	str	r2, [r3, #28]
 8008b88:	e07c      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	7c9b      	ldrb	r3, [r3, #18]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d130      	bne.n	8008bf4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	6a1b      	ldr	r3, [r3, #32]
 8008b96:	2bbc      	cmp	r3, #188	@ 0xbc
 8008b98:	d918      	bls.n	8008bcc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	8a9b      	ldrh	r3, [r3, #20]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	69da      	ldr	r2, [r3, #28]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d003      	beq.n	8008bbc <USB_HC_StartXfer+0xdc>
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	68db      	ldr	r3, [r3, #12]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d103      	bne.n	8008bc4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	2202      	movs	r2, #2
 8008bc0:	60da      	str	r2, [r3, #12]
 8008bc2:	e05f      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	60da      	str	r2, [r3, #12]
 8008bca:	e05b      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	6a1a      	ldr	r2, [r3, #32]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	68db      	ldr	r3, [r3, #12]
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	d007      	beq.n	8008bec <USB_HC_StartXfer+0x10c>
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	2b02      	cmp	r3, #2
 8008be2:	d003      	beq.n	8008bec <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8008be4:	68bb      	ldr	r3, [r7, #8]
 8008be6:	2204      	movs	r2, #4
 8008be8:	60da      	str	r2, [r3, #12]
 8008bea:	e04b      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2203      	movs	r2, #3
 8008bf0:	60da      	str	r2, [r3, #12]
 8008bf2:	e047      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8008bf4:	79fb      	ldrb	r3, [r7, #7]
 8008bf6:	2b01      	cmp	r3, #1
 8008bf8:	d10d      	bne.n	8008c16 <USB_HC_StartXfer+0x136>
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	6a1b      	ldr	r3, [r3, #32]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	8a92      	ldrh	r2, [r2, #20]
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d907      	bls.n	8008c16 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c08:	68ba      	ldr	r2, [r7, #8]
 8008c0a:	8a92      	ldrh	r2, [r2, #20]
 8008c0c:	fb03 f202 	mul.w	r2, r3, r2
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	61da      	str	r2, [r3, #28]
 8008c14:	e036      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	6a1a      	ldr	r2, [r3, #32]
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	61da      	str	r2, [r3, #28]
 8008c1e:	e031      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	6a1b      	ldr	r3, [r3, #32]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d018      	beq.n	8008c5a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	6a1b      	ldr	r3, [r3, #32]
 8008c2c:	68ba      	ldr	r2, [r7, #8]
 8008c2e:	8a92      	ldrh	r2, [r2, #20]
 8008c30:	4413      	add	r3, r2
 8008c32:	3b01      	subs	r3, #1
 8008c34:	68ba      	ldr	r2, [r7, #8]
 8008c36:	8a92      	ldrh	r2, [r2, #20]
 8008c38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8008c3e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008c40:	8b7b      	ldrh	r3, [r7, #26]
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d90b      	bls.n	8008c5e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8008c46:	8b7b      	ldrh	r3, [r7, #26]
 8008c48:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c4c:	68ba      	ldr	r2, [r7, #8]
 8008c4e:	8a92      	ldrh	r2, [r2, #20]
 8008c50:	fb03 f202 	mul.w	r2, r3, r2
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	61da      	str	r2, [r3, #28]
 8008c58:	e001      	b.n	8008c5e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8008c5a:	2301      	movs	r3, #1
 8008c5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	78db      	ldrb	r3, [r3, #3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d00a      	beq.n	8008c7c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8008c66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c68:	68ba      	ldr	r2, [r7, #8]
 8008c6a:	8a92      	ldrh	r2, [r2, #20]
 8008c6c:	fb03 f202 	mul.w	r2, r3, r2
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	61da      	str	r2, [r3, #28]
 8008c74:	e006      	b.n	8008c84 <USB_HC_StartXfer+0x1a4>
 8008c76:	bf00      	nop
 8008c78:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	6a1a      	ldr	r2, [r3, #32]
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c84:	68bb      	ldr	r3, [r7, #8]
 8008c86:	69db      	ldr	r3, [r3, #28]
 8008c88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008c8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008c8e:	04d9      	lsls	r1, r3, #19
 8008c90:	4ba3      	ldr	r3, [pc, #652]	@ (8008f20 <USB_HC_StartXfer+0x440>)
 8008c92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008c94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	7d9b      	ldrb	r3, [r3, #22]
 8008c9a:	075b      	lsls	r3, r3, #29
 8008c9c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008ca0:	69f9      	ldr	r1, [r7, #28]
 8008ca2:	0148      	lsls	r0, r1, #5
 8008ca4:	6a39      	ldr	r1, [r7, #32]
 8008ca6:	4401      	add	r1, r0
 8008ca8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008cae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d009      	beq.n	8008cca <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8008cb6:	68bb      	ldr	r3, [r7, #8]
 8008cb8:	6999      	ldr	r1, [r3, #24]
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	015a      	lsls	r2, r3, #5
 8008cbe:	6a3b      	ldr	r3, [r7, #32]
 8008cc0:	4413      	add	r3, r2
 8008cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cc6:	460a      	mov	r2, r1
 8008cc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008cca:	6a3b      	ldr	r3, [r7, #32]
 8008ccc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f003 0301 	and.w	r3, r3, #1
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	bf0c      	ite	eq
 8008cda:	2301      	moveq	r3, #1
 8008cdc:	2300      	movne	r3, #0
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	0151      	lsls	r1, r2, #5
 8008cf4:	6a3a      	ldr	r2, [r7, #32]
 8008cf6:	440a      	add	r2, r1
 8008cf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008cfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008d00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	015a      	lsls	r2, r3, #5
 8008d06:	6a3b      	ldr	r3, [r7, #32]
 8008d08:	4413      	add	r3, r2
 8008d0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	7e7b      	ldrb	r3, [r7, #25]
 8008d12:	075b      	lsls	r3, r3, #29
 8008d14:	69f9      	ldr	r1, [r7, #28]
 8008d16:	0148      	lsls	r0, r1, #5
 8008d18:	6a39      	ldr	r1, [r7, #32]
 8008d1a:	4401      	add	r1, r0
 8008d1c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008d20:	4313      	orrs	r3, r2
 8008d22:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	799b      	ldrb	r3, [r3, #6]
 8008d28:	2b01      	cmp	r3, #1
 8008d2a:	f040 80c3 	bne.w	8008eb4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	7c5b      	ldrb	r3, [r3, #17]
 8008d32:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	69fa      	ldr	r2, [r7, #28]
 8008d3c:	0151      	lsls	r1, r2, #5
 8008d3e:	6a3a      	ldr	r2, [r7, #32]
 8008d40:	440a      	add	r2, r1
 8008d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8008d46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8008d4a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8008d4c:	69fb      	ldr	r3, [r7, #28]
 8008d4e:	015a      	lsls	r2, r3, #5
 8008d50:	6a3b      	ldr	r3, [r7, #32]
 8008d52:	4413      	add	r3, r2
 8008d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d58:	68db      	ldr	r3, [r3, #12]
 8008d5a:	69fa      	ldr	r2, [r7, #28]
 8008d5c:	0151      	lsls	r1, r2, #5
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	440a      	add	r2, r1
 8008d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008d6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	79db      	ldrb	r3, [r3, #7]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d123      	bne.n	8008dbc <USB_HC_StartXfer+0x2dc>
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	78db      	ldrb	r3, [r3, #3]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d11f      	bne.n	8008dbc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008d7c:	69fb      	ldr	r3, [r7, #28]
 8008d7e:	015a      	lsls	r2, r3, #5
 8008d80:	6a3b      	ldr	r3, [r7, #32]
 8008d82:	4413      	add	r3, r2
 8008d84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d88:	685b      	ldr	r3, [r3, #4]
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	0151      	lsls	r1, r2, #5
 8008d8e:	6a3a      	ldr	r2, [r7, #32]
 8008d90:	440a      	add	r2, r1
 8008d92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008d9a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	015a      	lsls	r2, r3, #5
 8008da0:	6a3b      	ldr	r3, [r7, #32]
 8008da2:	4413      	add	r3, r2
 8008da4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	69fa      	ldr	r2, [r7, #28]
 8008dac:	0151      	lsls	r1, r2, #5
 8008dae:	6a3a      	ldr	r2, [r7, #32]
 8008db0:	440a      	add	r2, r1
 8008db2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dba:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	7c9b      	ldrb	r3, [r3, #18]
 8008dc0:	2b01      	cmp	r3, #1
 8008dc2:	d003      	beq.n	8008dcc <USB_HC_StartXfer+0x2ec>
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	7c9b      	ldrb	r3, [r3, #18]
 8008dc8:	2b03      	cmp	r3, #3
 8008dca:	d117      	bne.n	8008dfc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d113      	bne.n	8008dfc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	78db      	ldrb	r3, [r3, #3]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d10f      	bne.n	8008dfc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	015a      	lsls	r2, r3, #5
 8008de0:	6a3b      	ldr	r3, [r7, #32]
 8008de2:	4413      	add	r3, r2
 8008de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008de8:	685b      	ldr	r3, [r3, #4]
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	0151      	lsls	r1, r2, #5
 8008dee:	6a3a      	ldr	r2, [r7, #32]
 8008df0:	440a      	add	r2, r1
 8008df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008df6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008dfa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	7c9b      	ldrb	r3, [r3, #18]
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	d162      	bne.n	8008eca <USB_HC_StartXfer+0x3ea>
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	78db      	ldrb	r3, [r3, #3]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d15e      	bne.n	8008eca <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	3b01      	subs	r3, #1
 8008e12:	2b03      	cmp	r3, #3
 8008e14:	d858      	bhi.n	8008ec8 <USB_HC_StartXfer+0x3e8>
 8008e16:	a201      	add	r2, pc, #4	@ (adr r2, 8008e1c <USB_HC_StartXfer+0x33c>)
 8008e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1c:	08008e2d 	.word	0x08008e2d
 8008e20:	08008e4f 	.word	0x08008e4f
 8008e24:	08008e71 	.word	0x08008e71
 8008e28:	08008e93 	.word	0x08008e93
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8008e2c:	69fb      	ldr	r3, [r7, #28]
 8008e2e:	015a      	lsls	r2, r3, #5
 8008e30:	6a3b      	ldr	r3, [r7, #32]
 8008e32:	4413      	add	r3, r2
 8008e34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e38:	685b      	ldr	r3, [r3, #4]
 8008e3a:	69fa      	ldr	r2, [r7, #28]
 8008e3c:	0151      	lsls	r1, r2, #5
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	440a      	add	r2, r1
 8008e42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008e4a:	6053      	str	r3, [r2, #4]
          break;
 8008e4c:	e03d      	b.n	8008eca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8008e4e:	69fb      	ldr	r3, [r7, #28]
 8008e50:	015a      	lsls	r2, r3, #5
 8008e52:	6a3b      	ldr	r3, [r7, #32]
 8008e54:	4413      	add	r3, r2
 8008e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e5a:	685b      	ldr	r3, [r3, #4]
 8008e5c:	69fa      	ldr	r2, [r7, #28]
 8008e5e:	0151      	lsls	r1, r2, #5
 8008e60:	6a3a      	ldr	r2, [r7, #32]
 8008e62:	440a      	add	r2, r1
 8008e64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e68:	f043 030e 	orr.w	r3, r3, #14
 8008e6c:	6053      	str	r3, [r2, #4]
          break;
 8008e6e:	e02c      	b.n	8008eca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8008e70:	69fb      	ldr	r3, [r7, #28]
 8008e72:	015a      	lsls	r2, r3, #5
 8008e74:	6a3b      	ldr	r3, [r7, #32]
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	0151      	lsls	r1, r2, #5
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	440a      	add	r2, r1
 8008e86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008e8e:	6053      	str	r3, [r2, #4]
          break;
 8008e90:	e01b      	b.n	8008eca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8008e92:	69fb      	ldr	r3, [r7, #28]
 8008e94:	015a      	lsls	r2, r3, #5
 8008e96:	6a3b      	ldr	r3, [r7, #32]
 8008e98:	4413      	add	r3, r2
 8008e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e9e:	685b      	ldr	r3, [r3, #4]
 8008ea0:	69fa      	ldr	r2, [r7, #28]
 8008ea2:	0151      	lsls	r1, r2, #5
 8008ea4:	6a3a      	ldr	r2, [r7, #32]
 8008ea6:	440a      	add	r2, r1
 8008ea8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008eb0:	6053      	str	r3, [r2, #4]
          break;
 8008eb2:	e00a      	b.n	8008eca <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8008eb4:	69fb      	ldr	r3, [r7, #28]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	6a3b      	ldr	r3, [r7, #32]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ec0:	461a      	mov	r2, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	6053      	str	r3, [r2, #4]
 8008ec6:	e000      	b.n	8008eca <USB_HC_StartXfer+0x3ea>
          break;
 8008ec8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8008eca:	69fb      	ldr	r3, [r7, #28]
 8008ecc:	015a      	lsls	r2, r3, #5
 8008ece:	6a3b      	ldr	r3, [r7, #32]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008ee0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	78db      	ldrb	r3, [r3, #3]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d004      	beq.n	8008ef4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008ef0:	613b      	str	r3, [r7, #16]
 8008ef2:	e003      	b.n	8008efc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008efa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f02:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8008f04:	69fb      	ldr	r3, [r7, #28]
 8008f06:	015a      	lsls	r2, r3, #5
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	4413      	add	r3, r2
 8008f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f10:	461a      	mov	r2, r3
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8008f16:	79fb      	ldrb	r3, [r7, #7]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	e055      	b.n	8008fcc <USB_HC_StartXfer+0x4ec>
 8008f20:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	78db      	ldrb	r3, [r3, #3]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d14e      	bne.n	8008fca <USB_HC_StartXfer+0x4ea>
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	6a1b      	ldr	r3, [r3, #32]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d04a      	beq.n	8008fca <USB_HC_StartXfer+0x4ea>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	79db      	ldrb	r3, [r3, #7]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d146      	bne.n	8008fca <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	7c9b      	ldrb	r3, [r3, #18]
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d831      	bhi.n	8008fa8 <USB_HC_StartXfer+0x4c8>
 8008f44:	a201      	add	r2, pc, #4	@ (adr r2, 8008f4c <USB_HC_StartXfer+0x46c>)
 8008f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f4a:	bf00      	nop
 8008f4c:	08008f5d 	.word	0x08008f5d
 8008f50:	08008f81 	.word	0x08008f81
 8008f54:	08008f5d 	.word	0x08008f5d
 8008f58:	08008f81 	.word	0x08008f81
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	6a1b      	ldr	r3, [r3, #32]
 8008f60:	3303      	adds	r3, #3
 8008f62:	089b      	lsrs	r3, r3, #2
 8008f64:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008f66:	8afa      	ldrh	r2, [r7, #22]
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f6c:	b29b      	uxth	r3, r3
 8008f6e:	429a      	cmp	r2, r3
 8008f70:	d91c      	bls.n	8008fac <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	699b      	ldr	r3, [r3, #24]
 8008f76:	f043 0220 	orr.w	r2, r3, #32
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	619a      	str	r2, [r3, #24]
        }
        break;
 8008f7e:	e015      	b.n	8008fac <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	6a1b      	ldr	r3, [r3, #32]
 8008f84:	3303      	adds	r3, #3
 8008f86:	089b      	lsrs	r3, r3, #2
 8008f88:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008f8a:	8afa      	ldrh	r2, [r7, #22]
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f92:	691b      	ldr	r3, [r3, #16]
 8008f94:	b29b      	uxth	r3, r3
 8008f96:	429a      	cmp	r2, r3
 8008f98:	d90a      	bls.n	8008fb0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	699b      	ldr	r3, [r3, #24]
 8008f9e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	619a      	str	r2, [r3, #24]
        }
        break;
 8008fa6:	e003      	b.n	8008fb0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8008fa8:	bf00      	nop
 8008faa:	e002      	b.n	8008fb2 <USB_HC_StartXfer+0x4d2>
        break;
 8008fac:	bf00      	nop
 8008fae:	e000      	b.n	8008fb2 <USB_HC_StartXfer+0x4d2>
        break;
 8008fb0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	6999      	ldr	r1, [r3, #24]
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	785a      	ldrb	r2, [r3, #1]
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2000      	movs	r0, #0
 8008fc2:	9000      	str	r0, [sp, #0]
 8008fc4:	68f8      	ldr	r0, [r7, #12]
 8008fc6:	f7ff f9c9 	bl	800835c <USB_WritePacket>
  }

  return HAL_OK;
 8008fca:	2300      	movs	r3, #0
}
 8008fcc:	4618      	mov	r0, r3
 8008fce:	3728      	adds	r7, #40	@ 0x28
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	bd80      	pop	{r7, pc}

08008fd4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b085      	sub	sp, #20
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008fe6:	695b      	ldr	r3, [r3, #20]
 8008fe8:	b29b      	uxth	r3, r3
}
 8008fea:	4618      	mov	r0, r3
 8008fec:	3714      	adds	r7, #20
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr

08008ff6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008ff6:	b480      	push	{r7}
 8008ff8:	b089      	sub	sp, #36	@ 0x24
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8009006:	78fb      	ldrb	r3, [r7, #3]
 8009008:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800900a:	2300      	movs	r3, #0
 800900c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	015a      	lsls	r2, r3, #5
 8009012:	69fb      	ldr	r3, [r7, #28]
 8009014:	4413      	add	r3, r2
 8009016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	0c9b      	lsrs	r3, r3, #18
 800901e:	f003 0303 	and.w	r3, r3, #3
 8009022:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8009024:	69bb      	ldr	r3, [r7, #24]
 8009026:	015a      	lsls	r2, r3, #5
 8009028:	69fb      	ldr	r3, [r7, #28]
 800902a:	4413      	add	r3, r2
 800902c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	0fdb      	lsrs	r3, r3, #31
 8009034:	f003 0301 	and.w	r3, r3, #1
 8009038:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800903a:	69bb      	ldr	r3, [r7, #24]
 800903c:	015a      	lsls	r2, r3, #5
 800903e:	69fb      	ldr	r3, [r7, #28]
 8009040:	4413      	add	r3, r2
 8009042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	0fdb      	lsrs	r3, r3, #31
 800904a:	f003 0301 	and.w	r3, r3, #1
 800904e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	f003 0320 	and.w	r3, r3, #32
 8009058:	2b20      	cmp	r3, #32
 800905a:	d10d      	bne.n	8009078 <USB_HC_Halt+0x82>
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <USB_HC_Halt+0x82>
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d005      	beq.n	8009074 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	2b01      	cmp	r3, #1
 800906c:	d002      	beq.n	8009074 <USB_HC_Halt+0x7e>
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	2b03      	cmp	r3, #3
 8009072:	d101      	bne.n	8009078 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8009074:	2300      	movs	r3, #0
 8009076:	e0d8      	b.n	800922a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8009078:	697b      	ldr	r3, [r7, #20]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d002      	beq.n	8009084 <USB_HC_Halt+0x8e>
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	2b02      	cmp	r3, #2
 8009082:	d173      	bne.n	800916c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009084:	69bb      	ldr	r3, [r7, #24]
 8009086:	015a      	lsls	r2, r3, #5
 8009088:	69fb      	ldr	r3, [r7, #28]
 800908a:	4413      	add	r3, r2
 800908c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	69ba      	ldr	r2, [r7, #24]
 8009094:	0151      	lsls	r1, r2, #5
 8009096:	69fa      	ldr	r2, [r7, #28]
 8009098:	440a      	add	r2, r1
 800909a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800909e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80090a2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	f003 0320 	and.w	r3, r3, #32
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d14a      	bne.n	8009146 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090b4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d133      	bne.n	8009124 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80090bc:	69bb      	ldr	r3, [r7, #24]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	69fb      	ldr	r3, [r7, #28]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	0151      	lsls	r1, r2, #5
 80090ce:	69fa      	ldr	r2, [r7, #28]
 80090d0:	440a      	add	r2, r1
 80090d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80090da:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80090dc:	69bb      	ldr	r3, [r7, #24]
 80090de:	015a      	lsls	r2, r3, #5
 80090e0:	69fb      	ldr	r3, [r7, #28]
 80090e2:	4413      	add	r3, r2
 80090e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	69ba      	ldr	r2, [r7, #24]
 80090ec:	0151      	lsls	r1, r2, #5
 80090ee:	69fa      	ldr	r2, [r7, #28]
 80090f0:	440a      	add	r2, r1
 80090f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80090f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80090fa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80090fc:	68bb      	ldr	r3, [r7, #8]
 80090fe:	3301      	adds	r3, #1
 8009100:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009108:	d82e      	bhi.n	8009168 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	015a      	lsls	r2, r3, #5
 800910e:	69fb      	ldr	r3, [r7, #28]
 8009110:	4413      	add	r3, r2
 8009112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800911c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009120:	d0ec      	beq.n	80090fc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009122:	e081      	b.n	8009228 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	015a      	lsls	r2, r3, #5
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	4413      	add	r3, r2
 800912c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	69ba      	ldr	r2, [r7, #24]
 8009134:	0151      	lsls	r1, r2, #5
 8009136:	69fa      	ldr	r2, [r7, #28]
 8009138:	440a      	add	r2, r1
 800913a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800913e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009142:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009144:	e070      	b.n	8009228 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	015a      	lsls	r2, r3, #5
 800914a:	69fb      	ldr	r3, [r7, #28]
 800914c:	4413      	add	r3, r2
 800914e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	0151      	lsls	r1, r2, #5
 8009158:	69fa      	ldr	r2, [r7, #28]
 800915a:	440a      	add	r2, r1
 800915c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009164:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009166:	e05f      	b.n	8009228 <USB_HC_Halt+0x232>
            break;
 8009168:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800916a:	e05d      	b.n	8009228 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800916c:	69bb      	ldr	r3, [r7, #24]
 800916e:	015a      	lsls	r2, r3, #5
 8009170:	69fb      	ldr	r3, [r7, #28]
 8009172:	4413      	add	r3, r2
 8009174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69ba      	ldr	r2, [r7, #24]
 800917c:	0151      	lsls	r1, r2, #5
 800917e:	69fa      	ldr	r2, [r7, #28]
 8009180:	440a      	add	r2, r1
 8009182:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009186:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800918a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800918c:	69fb      	ldr	r3, [r7, #28]
 800918e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009192:	691b      	ldr	r3, [r3, #16]
 8009194:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009198:	2b00      	cmp	r3, #0
 800919a:	d133      	bne.n	8009204 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	69ba      	ldr	r2, [r7, #24]
 80091ac:	0151      	lsls	r1, r2, #5
 80091ae:	69fa      	ldr	r2, [r7, #28]
 80091b0:	440a      	add	r2, r1
 80091b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80091ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80091bc:	69bb      	ldr	r3, [r7, #24]
 80091be:	015a      	lsls	r2, r3, #5
 80091c0:	69fb      	ldr	r3, [r7, #28]
 80091c2:	4413      	add	r3, r2
 80091c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	69ba      	ldr	r2, [r7, #24]
 80091cc:	0151      	lsls	r1, r2, #5
 80091ce:	69fa      	ldr	r2, [r7, #28]
 80091d0:	440a      	add	r2, r1
 80091d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80091d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	3301      	adds	r3, #1
 80091e0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80091e8:	d81d      	bhi.n	8009226 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80091ea:	69bb      	ldr	r3, [r7, #24]
 80091ec:	015a      	lsls	r2, r3, #5
 80091ee:	69fb      	ldr	r3, [r7, #28]
 80091f0:	4413      	add	r3, r2
 80091f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009200:	d0ec      	beq.n	80091dc <USB_HC_Halt+0x1e6>
 8009202:	e011      	b.n	8009228 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009204:	69bb      	ldr	r3, [r7, #24]
 8009206:	015a      	lsls	r2, r3, #5
 8009208:	69fb      	ldr	r3, [r7, #28]
 800920a:	4413      	add	r3, r2
 800920c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	69ba      	ldr	r2, [r7, #24]
 8009214:	0151      	lsls	r1, r2, #5
 8009216:	69fa      	ldr	r2, [r7, #28]
 8009218:	440a      	add	r2, r1
 800921a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800921e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009222:	6013      	str	r3, [r2, #0]
 8009224:	e000      	b.n	8009228 <USB_HC_Halt+0x232>
          break;
 8009226:	bf00      	nop
    }
  }

  return HAL_OK;
 8009228:	2300      	movs	r3, #0
}
 800922a:	4618      	mov	r0, r3
 800922c:	3724      	adds	r7, #36	@ 0x24
 800922e:	46bd      	mov	sp, r7
 8009230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009234:	4770      	bx	lr
	...

08009238 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8009238:	b480      	push	{r7}
 800923a:	b087      	sub	sp, #28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
 8009240:	460b      	mov	r3, r1
 8009242:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8009248:	78fb      	ldrb	r3, [r7, #3]
 800924a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800924c:	2301      	movs	r3, #1
 800924e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	04da      	lsls	r2, r3, #19
 8009254:	4b15      	ldr	r3, [pc, #84]	@ (80092ac <USB_DoPing+0x74>)
 8009256:	4013      	ands	r3, r2
 8009258:	693a      	ldr	r2, [r7, #16]
 800925a:	0151      	lsls	r1, r2, #5
 800925c:	697a      	ldr	r2, [r7, #20]
 800925e:	440a      	add	r2, r1
 8009260:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009264:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009268:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	015a      	lsls	r2, r3, #5
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	4413      	add	r3, r2
 8009272:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009280:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009282:	68bb      	ldr	r3, [r7, #8]
 8009284:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009288:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	015a      	lsls	r2, r3, #5
 800928e:	697b      	ldr	r3, [r7, #20]
 8009290:	4413      	add	r3, r2
 8009292:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009296:	461a      	mov	r2, r3
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	371c      	adds	r7, #28
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	1ff80000 	.word	0x1ff80000

080092b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b088      	sub	sp, #32
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80092b8:	2300      	movs	r3, #0
 80092ba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80092c0:	2300      	movs	r3, #0
 80092c2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f7fe ff8c 	bl	80081e2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80092ca:	2110      	movs	r1, #16
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f7fe ffe5 	bl	800829c <USB_FlushTxFifo>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80092dc:	6878      	ldr	r0, [r7, #4]
 80092de:	f7ff f80f 	bl	8008300 <USB_FlushRxFifo>
 80092e2:	4603      	mov	r3, r0
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d001      	beq.n	80092ec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80092e8:	2301      	movs	r3, #1
 80092ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80092ec:	2300      	movs	r3, #0
 80092ee:	61bb      	str	r3, [r7, #24]
 80092f0:	e01f      	b.n	8009332 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80092f2:	69bb      	ldr	r3, [r7, #24]
 80092f4:	015a      	lsls	r2, r3, #5
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	4413      	add	r3, r2
 80092fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009308:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009310:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009318:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800931a:	69bb      	ldr	r3, [r7, #24]
 800931c:	015a      	lsls	r2, r3, #5
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	4413      	add	r3, r2
 8009322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009326:	461a      	mov	r2, r3
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800932c:	69bb      	ldr	r3, [r7, #24]
 800932e:	3301      	adds	r3, #1
 8009330:	61bb      	str	r3, [r7, #24]
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b0f      	cmp	r3, #15
 8009336:	d9dc      	bls.n	80092f2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8009338:	2300      	movs	r3, #0
 800933a:	61bb      	str	r3, [r7, #24]
 800933c:	e034      	b.n	80093a8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	4413      	add	r3, r2
 8009346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009354:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800935c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800935e:	693b      	ldr	r3, [r7, #16]
 8009360:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009364:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8009366:	69bb      	ldr	r3, [r7, #24]
 8009368:	015a      	lsls	r2, r3, #5
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	4413      	add	r3, r2
 800936e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009372:	461a      	mov	r2, r3
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	3301      	adds	r3, #1
 800937c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009384:	d80c      	bhi.n	80093a0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8009386:	69bb      	ldr	r3, [r7, #24]
 8009388:	015a      	lsls	r2, r3, #5
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	4413      	add	r3, r2
 800938e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009398:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800939c:	d0ec      	beq.n	8009378 <USB_StopHost+0xc8>
 800939e:	e000      	b.n	80093a2 <USB_StopHost+0xf2>
        break;
 80093a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80093a2:	69bb      	ldr	r3, [r7, #24]
 80093a4:	3301      	adds	r3, #1
 80093a6:	61bb      	str	r3, [r7, #24]
 80093a8:	69bb      	ldr	r3, [r7, #24]
 80093aa:	2b0f      	cmp	r3, #15
 80093ac:	d9c7      	bls.n	800933e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80093b4:	461a      	mov	r2, r3
 80093b6:	f04f 33ff 	mov.w	r3, #4294967295
 80093ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	f04f 32ff 	mov.w	r2, #4294967295
 80093c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f7fe fefb 	bl	80081c0 <USB_EnableGlobalInt>

  return ret;
 80093ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80093cc:	4618      	mov	r0, r3
 80093ce:	3720      	adds	r7, #32
 80093d0:	46bd      	mov	sp, r7
 80093d2:	bd80      	pop	{r7, pc}

080093d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80093d4:	b590      	push	{r4, r7, lr}
 80093d6:	b089      	sub	sp, #36	@ 0x24
 80093d8:	af04      	add	r7, sp, #16
 80093da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80093dc:	2301      	movs	r3, #1
 80093de:	2202      	movs	r2, #2
 80093e0:	2102      	movs	r1, #2
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 fc85 	bl	8009cf2 <USBH_FindInterface>
 80093e8:	4603      	mov	r3, r0
 80093ea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	2bff      	cmp	r3, #255	@ 0xff
 80093f0:	d002      	beq.n	80093f8 <USBH_CDC_InterfaceInit+0x24>
 80093f2:	7bfb      	ldrb	r3, [r7, #15]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d901      	bls.n	80093fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80093f8:	2302      	movs	r3, #2
 80093fa:	e13d      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80093fc:	7bfb      	ldrb	r3, [r7, #15]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fc5a 	bl	8009cba <USBH_SelectInterface>
 8009406:	4603      	mov	r3, r0
 8009408:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800940a:	7bbb      	ldrb	r3, [r7, #14]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d001      	beq.n	8009414 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8009410:	2302      	movs	r3, #2
 8009412:	e131      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800941a:	2050      	movs	r0, #80	@ 0x50
 800941c:	f002 fb64 	bl	800bae8 <malloc>
 8009420:	4603      	mov	r3, r0
 8009422:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800942a:	69db      	ldr	r3, [r3, #28]
 800942c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d101      	bne.n	8009438 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8009434:	2302      	movs	r3, #2
 8009436:	e11f      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009438:	2250      	movs	r2, #80	@ 0x50
 800943a:	2100      	movs	r1, #0
 800943c:	68b8      	ldr	r0, [r7, #8]
 800943e:	f002 fee7 	bl	800c210 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8009442:	7bfb      	ldrb	r3, [r7, #15]
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	211a      	movs	r1, #26
 8009448:	fb01 f303 	mul.w	r3, r1, r3
 800944c:	4413      	add	r3, r2
 800944e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	b25b      	sxtb	r3, r3
 8009456:	2b00      	cmp	r3, #0
 8009458:	da15      	bge.n	8009486 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800945a:	7bfb      	ldrb	r3, [r7, #15]
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	211a      	movs	r1, #26
 8009460:	fb01 f303 	mul.w	r3, r1, r3
 8009464:	4413      	add	r3, r2
 8009466:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800946a:	781a      	ldrb	r2, [r3, #0]
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009470:	7bfb      	ldrb	r3, [r7, #15]
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	211a      	movs	r1, #26
 8009476:	fb01 f303 	mul.w	r3, r1, r3
 800947a:	4413      	add	r3, r2
 800947c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009480:	881a      	ldrh	r2, [r3, #0]
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	785b      	ldrb	r3, [r3, #1]
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f001 ffbe 	bl	800b40e <USBH_AllocPipe>
 8009492:	4603      	mov	r3, r0
 8009494:	461a      	mov	r2, r3
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	7819      	ldrb	r1, [r3, #0]
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	7858      	ldrb	r0, [r3, #1]
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80094ae:	68ba      	ldr	r2, [r7, #8]
 80094b0:	8952      	ldrh	r2, [r2, #10]
 80094b2:	9202      	str	r2, [sp, #8]
 80094b4:	2203      	movs	r2, #3
 80094b6:	9201      	str	r2, [sp, #4]
 80094b8:	9300      	str	r3, [sp, #0]
 80094ba:	4623      	mov	r3, r4
 80094bc:	4602      	mov	r2, r0
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 ff76 	bl	800b3b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	781b      	ldrb	r3, [r3, #0]
 80094c8:	2200      	movs	r2, #0
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f002 fa85 	bl	800b9dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80094d2:	2300      	movs	r3, #0
 80094d4:	2200      	movs	r2, #0
 80094d6:	210a      	movs	r1, #10
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f000 fc0a 	bl	8009cf2 <USBH_FindInterface>
 80094de:	4603      	mov	r3, r0
 80094e0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80094e2:	7bfb      	ldrb	r3, [r7, #15]
 80094e4:	2bff      	cmp	r3, #255	@ 0xff
 80094e6:	d002      	beq.n	80094ee <USBH_CDC_InterfaceInit+0x11a>
 80094e8:	7bfb      	ldrb	r3, [r7, #15]
 80094ea:	2b01      	cmp	r3, #1
 80094ec:	d901      	bls.n	80094f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80094ee:	2302      	movs	r3, #2
 80094f0:	e0c2      	b.n	8009678 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80094f2:	7bfb      	ldrb	r3, [r7, #15]
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	211a      	movs	r1, #26
 80094f8:	fb01 f303 	mul.w	r3, r1, r3
 80094fc:	4413      	add	r3, r2
 80094fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009502:	781b      	ldrb	r3, [r3, #0]
 8009504:	b25b      	sxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	da16      	bge.n	8009538 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800950a:	7bfb      	ldrb	r3, [r7, #15]
 800950c:	687a      	ldr	r2, [r7, #4]
 800950e:	211a      	movs	r1, #26
 8009510:	fb01 f303 	mul.w	r3, r1, r3
 8009514:	4413      	add	r3, r2
 8009516:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009520:	7bfb      	ldrb	r3, [r7, #15]
 8009522:	687a      	ldr	r2, [r7, #4]
 8009524:	211a      	movs	r1, #26
 8009526:	fb01 f303 	mul.w	r3, r1, r3
 800952a:	4413      	add	r3, r2
 800952c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009530:	881a      	ldrh	r2, [r3, #0]
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	835a      	strh	r2, [r3, #26]
 8009536:	e015      	b.n	8009564 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009538:	7bfb      	ldrb	r3, [r7, #15]
 800953a:	687a      	ldr	r2, [r7, #4]
 800953c:	211a      	movs	r1, #26
 800953e:	fb01 f303 	mul.w	r3, r1, r3
 8009542:	4413      	add	r3, r2
 8009544:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009548:	781a      	ldrb	r2, [r3, #0]
 800954a:	68bb      	ldr	r3, [r7, #8]
 800954c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800954e:	7bfb      	ldrb	r3, [r7, #15]
 8009550:	687a      	ldr	r2, [r7, #4]
 8009552:	211a      	movs	r1, #26
 8009554:	fb01 f303 	mul.w	r3, r1, r3
 8009558:	4413      	add	r3, r2
 800955a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800955e:	881a      	ldrh	r2, [r3, #0]
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8009564:	7bfb      	ldrb	r3, [r7, #15]
 8009566:	687a      	ldr	r2, [r7, #4]
 8009568:	211a      	movs	r1, #26
 800956a:	fb01 f303 	mul.w	r3, r1, r3
 800956e:	4413      	add	r3, r2
 8009570:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	b25b      	sxtb	r3, r3
 8009578:	2b00      	cmp	r3, #0
 800957a:	da16      	bge.n	80095aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800957c:	7bfb      	ldrb	r3, [r7, #15]
 800957e:	687a      	ldr	r2, [r7, #4]
 8009580:	211a      	movs	r1, #26
 8009582:	fb01 f303 	mul.w	r3, r1, r3
 8009586:	4413      	add	r3, r2
 8009588:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800958c:	781a      	ldrb	r2, [r3, #0]
 800958e:	68bb      	ldr	r3, [r7, #8]
 8009590:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009592:	7bfb      	ldrb	r3, [r7, #15]
 8009594:	687a      	ldr	r2, [r7, #4]
 8009596:	211a      	movs	r1, #26
 8009598:	fb01 f303 	mul.w	r3, r1, r3
 800959c:	4413      	add	r3, r2
 800959e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80095a2:	881a      	ldrh	r2, [r3, #0]
 80095a4:	68bb      	ldr	r3, [r7, #8]
 80095a6:	835a      	strh	r2, [r3, #26]
 80095a8:	e015      	b.n	80095d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80095aa:	7bfb      	ldrb	r3, [r7, #15]
 80095ac:	687a      	ldr	r2, [r7, #4]
 80095ae:	211a      	movs	r1, #26
 80095b0:	fb01 f303 	mul.w	r3, r1, r3
 80095b4:	4413      	add	r3, r2
 80095b6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80095ba:	781a      	ldrb	r2, [r3, #0]
 80095bc:	68bb      	ldr	r3, [r7, #8]
 80095be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80095c0:	7bfb      	ldrb	r3, [r7, #15]
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	211a      	movs	r1, #26
 80095c6:	fb01 f303 	mul.w	r3, r1, r3
 80095ca:	4413      	add	r3, r2
 80095cc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80095d0:	881a      	ldrh	r2, [r3, #0]
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80095d6:	68bb      	ldr	r3, [r7, #8]
 80095d8:	7b9b      	ldrb	r3, [r3, #14]
 80095da:	4619      	mov	r1, r3
 80095dc:	6878      	ldr	r0, [r7, #4]
 80095de:	f001 ff16 	bl	800b40e <USBH_AllocPipe>
 80095e2:	4603      	mov	r3, r0
 80095e4:	461a      	mov	r2, r3
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	7bdb      	ldrb	r3, [r3, #15]
 80095ee:	4619      	mov	r1, r3
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f001 ff0c 	bl	800b40e <USBH_AllocPipe>
 80095f6:	4603      	mov	r3, r0
 80095f8:	461a      	mov	r2, r3
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80095fe:	68bb      	ldr	r3, [r7, #8]
 8009600:	7b59      	ldrb	r1, [r3, #13]
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	7b98      	ldrb	r0, [r3, #14]
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	8b12      	ldrh	r2, [r2, #24]
 8009616:	9202      	str	r2, [sp, #8]
 8009618:	2202      	movs	r2, #2
 800961a:	9201      	str	r2, [sp, #4]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	4623      	mov	r3, r4
 8009620:	4602      	mov	r2, r0
 8009622:	6878      	ldr	r0, [r7, #4]
 8009624:	f001 fec4 	bl	800b3b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	7b19      	ldrb	r1, [r3, #12]
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	7bd8      	ldrb	r0, [r3, #15]
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800963c:	68ba      	ldr	r2, [r7, #8]
 800963e:	8b52      	ldrh	r2, [r2, #26]
 8009640:	9202      	str	r2, [sp, #8]
 8009642:	2202      	movs	r2, #2
 8009644:	9201      	str	r2, [sp, #4]
 8009646:	9300      	str	r3, [sp, #0]
 8009648:	4623      	mov	r3, r4
 800964a:	4602      	mov	r2, r0
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f001 feaf 	bl	800b3b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2200      	movs	r2, #0
 8009656:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	7b5b      	ldrb	r3, [r3, #13]
 800965e:	2200      	movs	r2, #0
 8009660:	4619      	mov	r1, r3
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f002 f9ba 	bl	800b9dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	7b1b      	ldrb	r3, [r3, #12]
 800966c:	2200      	movs	r2, #0
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f002 f9b3 	bl	800b9dc <USBH_LL_SetToggle>

  return USBH_OK;
 8009676:	2300      	movs	r3, #0
}
 8009678:	4618      	mov	r0, r3
 800967a:	3714      	adds	r7, #20
 800967c:	46bd      	mov	sp, r7
 800967e:	bd90      	pop	{r4, r7, pc}

08009680 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800968e:	69db      	ldr	r3, [r3, #28]
 8009690:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	781b      	ldrb	r3, [r3, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d00e      	beq.n	80096b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	781b      	ldrb	r3, [r3, #0]
 800969e:	4619      	mov	r1, r3
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f001 fea4 	bl	800b3ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	4619      	mov	r1, r3
 80096ac:	6878      	ldr	r0, [r7, #4]
 80096ae:	f001 fecf 	bl	800b450 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	7b1b      	ldrb	r3, [r3, #12]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00e      	beq.n	80096de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	7b1b      	ldrb	r3, [r3, #12]
 80096c4:	4619      	mov	r1, r3
 80096c6:	6878      	ldr	r0, [r7, #4]
 80096c8:	f001 fe91 	bl	800b3ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	7b1b      	ldrb	r3, [r3, #12]
 80096d0:	4619      	mov	r1, r3
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f001 febc 	bl	800b450 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	2200      	movs	r2, #0
 80096dc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	7b5b      	ldrb	r3, [r3, #13]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d00e      	beq.n	8009704 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	7b5b      	ldrb	r3, [r3, #13]
 80096ea:	4619      	mov	r1, r3
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f001 fe7e 	bl	800b3ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	7b5b      	ldrb	r3, [r3, #13]
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f001 fea9 	bl	800b450 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2200      	movs	r2, #0
 8009702:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800970a:	69db      	ldr	r3, [r3, #28]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00b      	beq.n	8009728 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009716:	69db      	ldr	r3, [r3, #28]
 8009718:	4618      	mov	r0, r3
 800971a:	f002 f9ed 	bl	800baf8 <free>
    phost->pActiveClass->pData = 0U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009724:	2200      	movs	r2, #0
 8009726:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009728:	2300      	movs	r3, #0
}
 800972a:	4618      	mov	r0, r3
 800972c:	3710      	adds	r7, #16
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}

08009732 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009732:	b580      	push	{r7, lr}
 8009734:	b084      	sub	sp, #16
 8009736:	af00      	add	r7, sp, #0
 8009738:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3340      	adds	r3, #64	@ 0x40
 8009748:	4619      	mov	r1, r3
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 f8b1 	bl	80098b2 <GetLineCoding>
 8009750:	4603      	mov	r3, r0
 8009752:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8009754:	7afb      	ldrb	r3, [r7, #11]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d105      	bne.n	8009766 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009760:	2102      	movs	r1, #2
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8009766:	7afb      	ldrb	r3, [r7, #11]
}
 8009768:	4618      	mov	r0, r3
 800976a:	3710      	adds	r7, #16
 800976c:	46bd      	mov	sp, r7
 800976e:	bd80      	pop	{r7, pc}

08009770 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009778:	2301      	movs	r3, #1
 800977a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009786:	69db      	ldr	r3, [r3, #28]
 8009788:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009790:	2b04      	cmp	r3, #4
 8009792:	d877      	bhi.n	8009884 <USBH_CDC_Process+0x114>
 8009794:	a201      	add	r2, pc, #4	@ (adr r2, 800979c <USBH_CDC_Process+0x2c>)
 8009796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800979a:	bf00      	nop
 800979c:	080097b1 	.word	0x080097b1
 80097a0:	080097b7 	.word	0x080097b7
 80097a4:	080097e7 	.word	0x080097e7
 80097a8:	0800985b 	.word	0x0800985b
 80097ac:	08009869 	.word	0x08009869
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80097b0:	2300      	movs	r3, #0
 80097b2:	73fb      	strb	r3, [r7, #15]
      break;
 80097b4:	e06d      	b.n	8009892 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80097ba:	4619      	mov	r1, r3
 80097bc:	6878      	ldr	r0, [r7, #4]
 80097be:	f000 f897 	bl	80098f0 <SetLineCoding>
 80097c2:	4603      	mov	r3, r0
 80097c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097c6:	7bbb      	ldrb	r3, [r7, #14]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d104      	bne.n	80097d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	2202      	movs	r2, #2
 80097d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80097d4:	e058      	b.n	8009888 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80097d6:	7bbb      	ldrb	r3, [r7, #14]
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d055      	beq.n	8009888 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80097dc:	68bb      	ldr	r3, [r7, #8]
 80097de:	2204      	movs	r2, #4
 80097e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80097e4:	e050      	b.n	8009888 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3340      	adds	r3, #64	@ 0x40
 80097ea:	4619      	mov	r1, r3
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 f860 	bl	80098b2 <GetLineCoding>
 80097f2:	4603      	mov	r3, r0
 80097f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80097f6:	7bbb      	ldrb	r3, [r7, #14]
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d126      	bne.n	800984a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800980e:	791b      	ldrb	r3, [r3, #4]
 8009810:	429a      	cmp	r2, r3
 8009812:	d13b      	bne.n	800988c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800981e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009820:	429a      	cmp	r2, r3
 8009822:	d133      	bne.n	800988c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009824:	68bb      	ldr	r3, [r7, #8]
 8009826:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800982a:	68bb      	ldr	r3, [r7, #8]
 800982c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800982e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009830:	429a      	cmp	r2, r3
 8009832:	d12b      	bne.n	800988c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800983c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800983e:	429a      	cmp	r2, r3
 8009840:	d124      	bne.n	800988c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8009842:	6878      	ldr	r0, [r7, #4]
 8009844:	f000 f958 	bl	8009af8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009848:	e020      	b.n	800988c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800984a:	7bbb      	ldrb	r3, [r7, #14]
 800984c:	2b01      	cmp	r3, #1
 800984e:	d01d      	beq.n	800988c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009850:	68bb      	ldr	r3, [r7, #8]
 8009852:	2204      	movs	r2, #4
 8009854:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009858:	e018      	b.n	800988c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f000 f867 	bl	800992e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 f8da 	bl	8009a1a <CDC_ProcessReception>
      break;
 8009866:	e014      	b.n	8009892 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009868:	2100      	movs	r1, #0
 800986a:	6878      	ldr	r0, [r7, #4]
 800986c:	f001 f81a 	bl	800a8a4 <USBH_ClrFeature>
 8009870:	4603      	mov	r3, r0
 8009872:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009874:	7bbb      	ldrb	r3, [r7, #14]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d10a      	bne.n	8009890 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8009882:	e005      	b.n	8009890 <USBH_CDC_Process+0x120>

    default:
      break;
 8009884:	bf00      	nop
 8009886:	e004      	b.n	8009892 <USBH_CDC_Process+0x122>
      break;
 8009888:	bf00      	nop
 800988a:	e002      	b.n	8009892 <USBH_CDC_Process+0x122>
      break;
 800988c:	bf00      	nop
 800988e:	e000      	b.n	8009892 <USBH_CDC_Process+0x122>
      break;
 8009890:	bf00      	nop

  }

  return status;
 8009892:	7bfb      	ldrb	r3, [r7, #15]
}
 8009894:	4618      	mov	r0, r3
 8009896:	3710      	adds	r7, #16
 8009898:	46bd      	mov	sp, r7
 800989a:	bd80      	pop	{r7, pc}

0800989c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800989c:	b480      	push	{r7}
 800989e:	b083      	sub	sp, #12
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80098a4:	2300      	movs	r3, #0
}
 80098a6:	4618      	mov	r0, r3
 80098a8:	370c      	adds	r7, #12
 80098aa:	46bd      	mov	sp, r7
 80098ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b0:	4770      	bx	lr

080098b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80098b2:	b580      	push	{r7, lr}
 80098b4:	b082      	sub	sp, #8
 80098b6:	af00      	add	r7, sp, #0
 80098b8:	6078      	str	r0, [r7, #4]
 80098ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	22a1      	movs	r2, #161	@ 0xa1
 80098c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2221      	movs	r2, #33	@ 0x21
 80098c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2200      	movs	r2, #0
 80098cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2200      	movs	r2, #0
 80098d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2207      	movs	r2, #7
 80098d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80098da:	683b      	ldr	r3, [r7, #0]
 80098dc:	2207      	movs	r2, #7
 80098de:	4619      	mov	r1, r3
 80098e0:	6878      	ldr	r0, [r7, #4]
 80098e2:	f001 fb14 	bl	800af0e <USBH_CtlReq>
 80098e6:	4603      	mov	r3, r0
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3708      	adds	r7, #8
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b082      	sub	sp, #8
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
 80098f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2221      	movs	r2, #33	@ 0x21
 80098fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2220      	movs	r2, #32
 8009904:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2200      	movs	r2, #0
 800990a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2207      	movs	r2, #7
 8009916:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009918:	683b      	ldr	r3, [r7, #0]
 800991a:	2207      	movs	r2, #7
 800991c:	4619      	mov	r1, r3
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 faf5 	bl	800af0e <USBH_CtlReq>
 8009924:	4603      	mov	r3, r0
}
 8009926:	4618      	mov	r0, r3
 8009928:	3708      	adds	r7, #8
 800992a:	46bd      	mov	sp, r7
 800992c:	bd80      	pop	{r7, pc}

0800992e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800992e:	b580      	push	{r7, lr}
 8009930:	b086      	sub	sp, #24
 8009932:	af02      	add	r7, sp, #8
 8009934:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800993c:	69db      	ldr	r3, [r3, #28]
 800993e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009940:	2300      	movs	r3, #0
 8009942:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800994a:	2b01      	cmp	r3, #1
 800994c:	d002      	beq.n	8009954 <CDC_ProcessTransmission+0x26>
 800994e:	2b02      	cmp	r3, #2
 8009950:	d023      	beq.n	800999a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8009952:	e05e      	b.n	8009a12 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	8b12      	ldrh	r2, [r2, #24]
 800995c:	4293      	cmp	r3, r2
 800995e:	d90b      	bls.n	8009978 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	69d9      	ldr	r1, [r3, #28]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	8b1a      	ldrh	r2, [r3, #24]
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	7b5b      	ldrb	r3, [r3, #13]
 800996c:	2001      	movs	r0, #1
 800996e:	9000      	str	r0, [sp, #0]
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f001 fcda 	bl	800b32a <USBH_BulkSendData>
 8009976:	e00b      	b.n	8009990 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009980:	b29a      	uxth	r2, r3
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	7b5b      	ldrb	r3, [r3, #13]
 8009986:	2001      	movs	r0, #1
 8009988:	9000      	str	r0, [sp, #0]
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f001 fccd 	bl	800b32a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2202      	movs	r2, #2
 8009994:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009998:	e03b      	b.n	8009a12 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	7b5b      	ldrb	r3, [r3, #13]
 800999e:	4619      	mov	r1, r3
 80099a0:	6878      	ldr	r0, [r7, #4]
 80099a2:	f001 fff1 	bl	800b988 <USBH_LL_GetURBState>
 80099a6:	4603      	mov	r3, r0
 80099a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80099aa:	7afb      	ldrb	r3, [r7, #11]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d128      	bne.n	8009a02 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099b4:	68fa      	ldr	r2, [r7, #12]
 80099b6:	8b12      	ldrh	r2, [r2, #24]
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d90e      	bls.n	80099da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099c0:	68fa      	ldr	r2, [r7, #12]
 80099c2:	8b12      	ldrh	r2, [r2, #24]
 80099c4:	1a9a      	subs	r2, r3, r2
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	69db      	ldr	r3, [r3, #28]
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	8b12      	ldrh	r2, [r2, #24]
 80099d2:	441a      	add	r2, r3
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	61da      	str	r2, [r3, #28]
 80099d8:	e002      	b.n	80099e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	2200      	movs	r2, #0
 80099de:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d004      	beq.n	80099f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80099f0:	e00e      	b.n	8009a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	2200      	movs	r2, #0
 80099f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80099fa:	6878      	ldr	r0, [r7, #4]
 80099fc:	f000 f868 	bl	8009ad0 <USBH_CDC_TransmitCallback>
      break;
 8009a00:	e006      	b.n	8009a10 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009a02:	7afb      	ldrb	r3, [r7, #11]
 8009a04:	2b02      	cmp	r3, #2
 8009a06:	d103      	bne.n	8009a10 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009a10:	bf00      	nop
  }
}
 8009a12:	bf00      	nop
 8009a14:	3710      	adds	r7, #16
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}

08009a1a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b086      	sub	sp, #24
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a28:	69db      	ldr	r3, [r3, #28]
 8009a2a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009a36:	2b03      	cmp	r3, #3
 8009a38:	d002      	beq.n	8009a40 <CDC_ProcessReception+0x26>
 8009a3a:	2b04      	cmp	r3, #4
 8009a3c:	d00e      	beq.n	8009a5c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009a3e:	e043      	b.n	8009ac8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	6a19      	ldr	r1, [r3, #32]
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	8b5a      	ldrh	r2, [r3, #26]
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	7b1b      	ldrb	r3, [r3, #12]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f001 fc91 	bl	800b374 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	2204      	movs	r2, #4
 8009a56:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009a5a:	e035      	b.n	8009ac8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	7b1b      	ldrb	r3, [r3, #12]
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 ff90 	bl	800b988 <USBH_LL_GetURBState>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009a6c:	7cfb      	ldrb	r3, [r7, #19]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d129      	bne.n	8009ac6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8009a72:	697b      	ldr	r3, [r7, #20]
 8009a74:	7b1b      	ldrb	r3, [r3, #12]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f001 fef3 	bl	800b864 <USBH_LL_GetLastXferSize>
 8009a7e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	429a      	cmp	r2, r3
 8009a88:	d016      	beq.n	8009ab8 <CDC_ProcessReception+0x9e>
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	8b5b      	ldrh	r3, [r3, #26]
 8009a8e:	461a      	mov	r2, r3
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d110      	bne.n	8009ab8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8009a96:	697b      	ldr	r3, [r7, #20]
 8009a98:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	1ad2      	subs	r2, r2, r3
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	6a1a      	ldr	r2, [r3, #32]
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	441a      	add	r2, r3
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	2203      	movs	r2, #3
 8009ab2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009ab6:	e006      	b.n	8009ac6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	2200      	movs	r2, #0
 8009abc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f80f 	bl	8009ae4 <USBH_CDC_ReceiveCallback>
      break;
 8009ac6:	bf00      	nop
  }
}
 8009ac8:	bf00      	nop
 8009aca:	3718      	adds	r7, #24
 8009acc:	46bd      	mov	sp, r7
 8009ace:	bd80      	pop	{r7, pc}

08009ad0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b083      	sub	sp, #12
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009ad8:	bf00      	nop
 8009ada:	370c      	adds	r7, #12
 8009adc:	46bd      	mov	sp, r7
 8009ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae2:	4770      	bx	lr

08009ae4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009ae4:	b480      	push	{r7}
 8009ae6:	b083      	sub	sp, #12
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009aec:	bf00      	nop
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr

08009af8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009b00:	bf00      	nop
 8009b02:	370c      	adds	r7, #12
 8009b04:	46bd      	mov	sp, r7
 8009b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b0a:	4770      	bx	lr

08009b0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af00      	add	r7, sp, #0
 8009b12:	60f8      	str	r0, [r7, #12]
 8009b14:	60b9      	str	r1, [r7, #8]
 8009b16:	4613      	mov	r3, r2
 8009b18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d101      	bne.n	8009b24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009b20:	2302      	movs	r3, #2
 8009b22:	e029      	b.n	8009b78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	79fa      	ldrb	r2, [r7, #7]
 8009b28:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2200      	movs	r2, #0
 8009b30:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009b3c:	68f8      	ldr	r0, [r7, #12]
 8009b3e:	f000 f81f 	bl	8009b80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	2200      	movs	r2, #0
 8009b4e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d003      	beq.n	8009b70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f001 fdc3 	bl	800b6fc <USBH_LL_Init>

  return USBH_OK;
 8009b76:	2300      	movs	r3, #0
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}

08009b80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e009      	b.n	8009ba6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009b92:	687a      	ldr	r2, [r7, #4]
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	33e0      	adds	r3, #224	@ 0xe0
 8009b98:	009b      	lsls	r3, r3, #2
 8009b9a:	4413      	add	r3, r2
 8009b9c:	2200      	movs	r2, #0
 8009b9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	3301      	adds	r3, #1
 8009ba4:	60fb      	str	r3, [r7, #12]
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2b0f      	cmp	r3, #15
 8009baa:	d9f2      	bls.n	8009b92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
 8009bb0:	e009      	b.n	8009bc6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bcc:	d3f1      	bcc.n	8009bb2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2201      	movs	r2, #1
 8009bde:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2200      	movs	r2, #0
 8009be4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2201      	movs	r2, #1
 8009bec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2240      	movs	r2, #64	@ 0x40
 8009bf2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	331c      	adds	r3, #28
 8009c1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c22:	2100      	movs	r1, #0
 8009c24:	4618      	mov	r0, r3
 8009c26:	f002 faf3 	bl	800c210 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009c30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009c34:	2100      	movs	r1, #0
 8009c36:	4618      	mov	r0, r3
 8009c38:	f002 faea 	bl	800c210 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009c42:	2212      	movs	r2, #18
 8009c44:	2100      	movs	r1, #0
 8009c46:	4618      	mov	r0, r3
 8009c48:	f002 fae2 	bl	800c210 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009c52:	223e      	movs	r2, #62	@ 0x3e
 8009c54:	2100      	movs	r1, #0
 8009c56:	4618      	mov	r0, r3
 8009c58:	f002 fada 	bl	800c210 <memset>

  return USBH_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009c66:	b480      	push	{r7}
 8009c68:	b085      	sub	sp, #20
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009c70:	2300      	movs	r3, #0
 8009c72:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d016      	beq.n	8009ca8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10e      	bne.n	8009ca2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	33de      	adds	r3, #222	@ 0xde
 8009c96:	6839      	ldr	r1, [r7, #0]
 8009c98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	73fb      	strb	r3, [r7, #15]
 8009ca0:	e004      	b.n	8009cac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009ca2:	2302      	movs	r3, #2
 8009ca4:	73fb      	strb	r3, [r7, #15]
 8009ca6:	e001      	b.n	8009cac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009ca8:	2302      	movs	r3, #2
 8009caa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3714      	adds	r7, #20
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb8:	4770      	bx	lr

08009cba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009cba:	b480      	push	{r7}
 8009cbc:	b085      	sub	sp, #20
 8009cbe:	af00      	add	r7, sp, #0
 8009cc0:	6078      	str	r0, [r7, #4]
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8009cd0:	78fa      	ldrb	r2, [r7, #3]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d204      	bcs.n	8009ce0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	78fa      	ldrb	r2, [r7, #3]
 8009cda:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8009cde:	e001      	b.n	8009ce4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009ce0:	2302      	movs	r3, #2
 8009ce2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ce4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3714      	adds	r7, #20
 8009cea:	46bd      	mov	sp, r7
 8009cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf0:	4770      	bx	lr

08009cf2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009cf2:	b480      	push	{r7}
 8009cf4:	b087      	sub	sp, #28
 8009cf6:	af00      	add	r7, sp, #0
 8009cf8:	6078      	str	r0, [r7, #4]
 8009cfa:	4608      	mov	r0, r1
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	461a      	mov	r2, r3
 8009d00:	4603      	mov	r3, r0
 8009d02:	70fb      	strb	r3, [r7, #3]
 8009d04:	460b      	mov	r3, r1
 8009d06:	70bb      	strb	r3, [r7, #2]
 8009d08:	4613      	mov	r3, r2
 8009d0a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009d10:	2300      	movs	r3, #0
 8009d12:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009d1a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d1c:	e025      	b.n	8009d6a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009d1e:	7dfb      	ldrb	r3, [r7, #23]
 8009d20:	221a      	movs	r2, #26
 8009d22:	fb02 f303 	mul.w	r3, r2, r3
 8009d26:	3308      	adds	r3, #8
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4413      	add	r3, r2
 8009d2c:	3302      	adds	r3, #2
 8009d2e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d30:	693b      	ldr	r3, [r7, #16]
 8009d32:	795b      	ldrb	r3, [r3, #5]
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d002      	beq.n	8009d40 <USBH_FindInterface+0x4e>
 8009d3a:	78fb      	ldrb	r3, [r7, #3]
 8009d3c:	2bff      	cmp	r3, #255	@ 0xff
 8009d3e:	d111      	bne.n	8009d64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009d44:	78ba      	ldrb	r2, [r7, #2]
 8009d46:	429a      	cmp	r2, r3
 8009d48:	d002      	beq.n	8009d50 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d4a:	78bb      	ldrb	r3, [r7, #2]
 8009d4c:	2bff      	cmp	r3, #255	@ 0xff
 8009d4e:	d109      	bne.n	8009d64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d50:	693b      	ldr	r3, [r7, #16]
 8009d52:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009d54:	787a      	ldrb	r2, [r7, #1]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d002      	beq.n	8009d60 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009d5a:	787b      	ldrb	r3, [r7, #1]
 8009d5c:	2bff      	cmp	r3, #255	@ 0xff
 8009d5e:	d101      	bne.n	8009d64 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009d60:	7dfb      	ldrb	r3, [r7, #23]
 8009d62:	e006      	b.n	8009d72 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009d64:	7dfb      	ldrb	r3, [r7, #23]
 8009d66:	3301      	adds	r3, #1
 8009d68:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d9d6      	bls.n	8009d1e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009d70:	23ff      	movs	r3, #255	@ 0xff
}
 8009d72:	4618      	mov	r0, r3
 8009d74:	371c      	adds	r7, #28
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr

08009d7e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009d7e:	b580      	push	{r7, lr}
 8009d80:	b082      	sub	sp, #8
 8009d82:	af00      	add	r7, sp, #0
 8009d84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fcf4 	bl	800b774 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009d8c:	2101      	movs	r1, #1
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f001 fe0d 	bl	800b9ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009d94:	2300      	movs	r3, #0
}
 8009d96:	4618      	mov	r0, r3
 8009d98:	3708      	adds	r7, #8
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	bd80      	pop	{r7, pc}
	...

08009da0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b088      	sub	sp, #32
 8009da4:	af04      	add	r7, sp, #16
 8009da6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009da8:	2302      	movs	r3, #2
 8009daa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009dac:	2300      	movs	r3, #0
 8009dae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009db6:	b2db      	uxtb	r3, r3
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d102      	bne.n	8009dc2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	781b      	ldrb	r3, [r3, #0]
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b0b      	cmp	r3, #11
 8009dca:	f200 81bb 	bhi.w	800a144 <USBH_Process+0x3a4>
 8009dce:	a201      	add	r2, pc, #4	@ (adr r2, 8009dd4 <USBH_Process+0x34>)
 8009dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dd4:	08009e05 	.word	0x08009e05
 8009dd8:	08009e37 	.word	0x08009e37
 8009ddc:	08009e9f 	.word	0x08009e9f
 8009de0:	0800a0df 	.word	0x0800a0df
 8009de4:	0800a145 	.word	0x0800a145
 8009de8:	08009f3f 	.word	0x08009f3f
 8009dec:	0800a085 	.word	0x0800a085
 8009df0:	08009f75 	.word	0x08009f75
 8009df4:	08009f95 	.word	0x08009f95
 8009df8:	08009fb3 	.word	0x08009fb3
 8009dfc:	08009ff7 	.word	0x08009ff7
 8009e00:	0800a0c7 	.word	0x0800a0c7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009e0a:	b2db      	uxtb	r3, r3
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 819b 	beq.w	800a148 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2201      	movs	r2, #1
 8009e16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009e18:	20c8      	movs	r0, #200	@ 0xc8
 8009e1a:	f001 fe12 	bl	800ba42 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f001 fd05 	bl	800b82e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	2200      	movs	r2, #0
 8009e28:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2200      	movs	r2, #0
 8009e30:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e34:	e188      	b.n	800a148 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	d107      	bne.n	8009e50 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2202      	movs	r2, #2
 8009e4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e4e:	e18a      	b.n	800a166 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009e56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009e5a:	d914      	bls.n	8009e86 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009e62:	3301      	adds	r3, #1
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009e72:	2b03      	cmp	r3, #3
 8009e74:	d903      	bls.n	8009e7e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	220d      	movs	r2, #13
 8009e7a:	701a      	strb	r2, [r3, #0]
      break;
 8009e7c:	e173      	b.n	800a166 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	701a      	strb	r2, [r3, #0]
      break;
 8009e84:	e16f      	b.n	800a166 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009e8c:	f103 020a 	add.w	r2, r3, #10
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009e96:	200a      	movs	r0, #10
 8009e98:	f001 fdd3 	bl	800ba42 <USBH_Delay>
      break;
 8009e9c:	e163      	b.n	800a166 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d005      	beq.n	8009eb4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009eae:	2104      	movs	r1, #4
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009eb4:	2064      	movs	r0, #100	@ 0x64
 8009eb6:	f001 fdc4 	bl	800ba42 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f001 fc90 	bl	800b7e0 <USBH_LL_GetSpeed>
 8009ec0:	4603      	mov	r3, r0
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2205      	movs	r2, #5
 8009ece:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ed0:	2100      	movs	r1, #0
 8009ed2:	6878      	ldr	r0, [r7, #4]
 8009ed4:	f001 fa9b 	bl	800b40e <USBH_AllocPipe>
 8009ed8:	4603      	mov	r3, r0
 8009eda:	461a      	mov	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009ee0:	2180      	movs	r1, #128	@ 0x80
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f001 fa93 	bl	800b40e <USBH_AllocPipe>
 8009ee8:	4603      	mov	r3, r0
 8009eea:	461a      	mov	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	7919      	ldrb	r1, [r3, #4]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f00:	687a      	ldr	r2, [r7, #4]
 8009f02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009f04:	9202      	str	r2, [sp, #8]
 8009f06:	2200      	movs	r2, #0
 8009f08:	9201      	str	r2, [sp, #4]
 8009f0a:	9300      	str	r3, [sp, #0]
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2280      	movs	r2, #128	@ 0x80
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f001 fa4d 	bl	800b3b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	7959      	ldrb	r1, [r3, #5]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009f2a:	9202      	str	r2, [sp, #8]
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	9201      	str	r2, [sp, #4]
 8009f30:	9300      	str	r3, [sp, #0]
 8009f32:	4603      	mov	r3, r0
 8009f34:	2200      	movs	r2, #0
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f001 fa3a 	bl	800b3b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009f3c:	e113      	b.n	800a166 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009f3e:	6878      	ldr	r0, [r7, #4]
 8009f40:	f000 f916 	bl	800a170 <USBH_HandleEnum>
 8009f44:	4603      	mov	r3, r0
 8009f46:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	b2db      	uxtb	r3, r3
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f040 80fd 	bne.w	800a14c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d103      	bne.n	8009f6c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2208      	movs	r2, #8
 8009f68:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009f6a:	e0ef      	b.n	800a14c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2207      	movs	r2, #7
 8009f70:	701a      	strb	r2, [r3, #0]
      break;
 8009f72:	e0eb      	b.n	800a14c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	f000 80e8 	beq.w	800a150 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009f86:	2101      	movs	r1, #1
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2208      	movs	r2, #8
 8009f90:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009f92:	e0dd      	b.n	800a150 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fc3a 	bl	800a816 <USBH_SetCfg>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	f040 80d5 	bne.w	800a154 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	2209      	movs	r2, #9
 8009fae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fb0:	e0d0      	b.n	800a154 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009fb8:	f003 0320 	and.w	r3, r3, #32
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d016      	beq.n	8009fee <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 fc4a 	bl	800a85c <USBH_SetFeature>
 8009fc8:	4603      	mov	r3, r0
 8009fca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009fcc:	7bbb      	ldrb	r3, [r7, #14]
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d103      	bne.n	8009fdc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	220a      	movs	r2, #10
 8009fd8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009fda:	e0bd      	b.n	800a158 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009fdc:	7bbb      	ldrb	r3, [r7, #14]
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	2b03      	cmp	r3, #3
 8009fe2:	f040 80b9 	bne.w	800a158 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	220a      	movs	r2, #10
 8009fea:	701a      	strb	r2, [r3, #0]
      break;
 8009fec:	e0b4      	b.n	800a158 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	220a      	movs	r2, #10
 8009ff2:	701a      	strb	r2, [r3, #0]
      break;
 8009ff4:	e0b0      	b.n	800a158 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 80ad 	beq.w	800a15c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	2200      	movs	r2, #0
 800a006:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a00a:	2300      	movs	r3, #0
 800a00c:	73fb      	strb	r3, [r7, #15]
 800a00e:	e016      	b.n	800a03e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800a010:	7bfa      	ldrb	r2, [r7, #15]
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	32de      	adds	r2, #222	@ 0xde
 800a016:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a01a:	791a      	ldrb	r2, [r3, #4]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800a022:	429a      	cmp	r2, r3
 800a024:	d108      	bne.n	800a038 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800a026:	7bfa      	ldrb	r2, [r7, #15]
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	32de      	adds	r2, #222	@ 0xde
 800a02c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800a036:	e005      	b.n	800a044 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	3301      	adds	r3, #1
 800a03c:	73fb      	strb	r3, [r7, #15]
 800a03e:	7bfb      	ldrb	r3, [r7, #15]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0e5      	beq.n	800a010 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d016      	beq.n	800a07c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	4798      	blx	r3
 800a05a:	4603      	mov	r3, r0
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d109      	bne.n	800a074 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2206      	movs	r2, #6
 800a064:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a06c:	2103      	movs	r1, #3
 800a06e:	6878      	ldr	r0, [r7, #4]
 800a070:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a072:	e073      	b.n	800a15c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	220d      	movs	r2, #13
 800a078:	701a      	strb	r2, [r3, #0]
      break;
 800a07a:	e06f      	b.n	800a15c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	220d      	movs	r2, #13
 800a080:	701a      	strb	r2, [r3, #0]
      break;
 800a082:	e06b      	b.n	800a15c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d017      	beq.n	800a0be <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	6878      	ldr	r0, [r7, #4]
 800a098:	4798      	blx	r3
 800a09a:	4603      	mov	r3, r0
 800a09c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800a09e:	7bbb      	ldrb	r3, [r7, #14]
 800a0a0:	b2db      	uxtb	r3, r3
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d103      	bne.n	800a0ae <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	220b      	movs	r2, #11
 800a0aa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a0ac:	e058      	b.n	800a160 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	b2db      	uxtb	r3, r3
 800a0b2:	2b02      	cmp	r3, #2
 800a0b4:	d154      	bne.n	800a160 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	220d      	movs	r2, #13
 800a0ba:	701a      	strb	r2, [r3, #0]
      break;
 800a0bc:	e050      	b.n	800a160 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	220d      	movs	r2, #13
 800a0c2:	701a      	strb	r2, [r3, #0]
      break;
 800a0c4:	e04c      	b.n	800a160 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d049      	beq.n	800a164 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0d6:	695b      	ldr	r3, [r3, #20]
 800a0d8:	6878      	ldr	r0, [r7, #4]
 800a0da:	4798      	blx	r3
      }
      break;
 800a0dc:	e042      	b.n	800a164 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f7ff fd4a 	bl	8009b80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d009      	beq.n	800a10a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a110:	2b00      	cmp	r3, #0
 800a112:	d005      	beq.n	800a120 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a11a:	2105      	movs	r1, #5
 800a11c:	6878      	ldr	r0, [r7, #4]
 800a11e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b01      	cmp	r3, #1
 800a12a:	d107      	bne.n	800a13c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800a134:	6878      	ldr	r0, [r7, #4]
 800a136:	f7ff fe22 	bl	8009d7e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800a13a:	e014      	b.n	800a166 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f001 fb19 	bl	800b774 <USBH_LL_Start>
      break;
 800a142:	e010      	b.n	800a166 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800a144:	bf00      	nop
 800a146:	e00e      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a148:	bf00      	nop
 800a14a:	e00c      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a14c:	bf00      	nop
 800a14e:	e00a      	b.n	800a166 <USBH_Process+0x3c6>
    break;
 800a150:	bf00      	nop
 800a152:	e008      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a154:	bf00      	nop
 800a156:	e006      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a158:	bf00      	nop
 800a15a:	e004      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a15c:	bf00      	nop
 800a15e:	e002      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a160:	bf00      	nop
 800a162:	e000      	b.n	800a166 <USBH_Process+0x3c6>
      break;
 800a164:	bf00      	nop
  }
  return USBH_OK;
 800a166:	2300      	movs	r3, #0
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af04      	add	r7, sp, #16
 800a176:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800a178:	2301      	movs	r3, #1
 800a17a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800a17c:	2301      	movs	r3, #1
 800a17e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	785b      	ldrb	r3, [r3, #1]
 800a184:	2b07      	cmp	r3, #7
 800a186:	f200 81bd 	bhi.w	800a504 <USBH_HandleEnum+0x394>
 800a18a:	a201      	add	r2, pc, #4	@ (adr r2, 800a190 <USBH_HandleEnum+0x20>)
 800a18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a190:	0800a1b1 	.word	0x0800a1b1
 800a194:	0800a26b 	.word	0x0800a26b
 800a198:	0800a2d5 	.word	0x0800a2d5
 800a19c:	0800a35f 	.word	0x0800a35f
 800a1a0:	0800a3c9 	.word	0x0800a3c9
 800a1a4:	0800a439 	.word	0x0800a439
 800a1a8:	0800a47f 	.word	0x0800a47f
 800a1ac:	0800a4c5 	.word	0x0800a4c5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800a1b0:	2108      	movs	r1, #8
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 fa4c 	bl	800a650 <USBH_Get_DevDesc>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a1bc:	7bbb      	ldrb	r3, [r7, #14]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d12e      	bne.n	800a220 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2201      	movs	r2, #1
 800a1d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	7919      	ldrb	r1, [r3, #4]
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a1e2:	687a      	ldr	r2, [r7, #4]
 800a1e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800a1e6:	9202      	str	r2, [sp, #8]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	9201      	str	r2, [sp, #4]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2280      	movs	r2, #128	@ 0x80
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 f8dc 	bl	800b3b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	7959      	ldrb	r1, [r3, #5]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a208:	687a      	ldr	r2, [r7, #4]
 800a20a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a20c:	9202      	str	r2, [sp, #8]
 800a20e:	2200      	movs	r2, #0
 800a210:	9201      	str	r2, [sp, #4]
 800a212:	9300      	str	r3, [sp, #0]
 800a214:	4603      	mov	r3, r0
 800a216:	2200      	movs	r2, #0
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f001 f8c9 	bl	800b3b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a21e:	e173      	b.n	800a508 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a220:	7bbb      	ldrb	r3, [r7, #14]
 800a222:	2b03      	cmp	r3, #3
 800a224:	f040 8170 	bne.w	800a508 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a22e:	3301      	adds	r3, #1
 800a230:	b2da      	uxtb	r2, r3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a23e:	2b03      	cmp	r3, #3
 800a240:	d903      	bls.n	800a24a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	220d      	movs	r2, #13
 800a246:	701a      	strb	r2, [r3, #0]
      break;
 800a248:	e15e      	b.n	800a508 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	795b      	ldrb	r3, [r3, #5]
 800a24e:	4619      	mov	r1, r3
 800a250:	6878      	ldr	r0, [r7, #4]
 800a252:	f001 f8fd 	bl	800b450 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	791b      	ldrb	r3, [r3, #4]
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f001 f8f7 	bl	800b450 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	2200      	movs	r2, #0
 800a266:	701a      	strb	r2, [r3, #0]
      break;
 800a268:	e14e      	b.n	800a508 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800a26a:	2112      	movs	r1, #18
 800a26c:	6878      	ldr	r0, [r7, #4]
 800a26e:	f000 f9ef 	bl	800a650 <USBH_Get_DevDesc>
 800a272:	4603      	mov	r3, r0
 800a274:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a276:	7bbb      	ldrb	r3, [r7, #14]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d103      	bne.n	800a284 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	2202      	movs	r2, #2
 800a280:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a282:	e143      	b.n	800a50c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a284:	7bbb      	ldrb	r3, [r7, #14]
 800a286:	2b03      	cmp	r3, #3
 800a288:	f040 8140 	bne.w	800a50c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a292:	3301      	adds	r3, #1
 800a294:	b2da      	uxtb	r2, r3
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d903      	bls.n	800a2ae <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	220d      	movs	r2, #13
 800a2aa:	701a      	strb	r2, [r3, #0]
      break;
 800a2ac:	e12e      	b.n	800a50c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	795b      	ldrb	r3, [r3, #5]
 800a2b2:	4619      	mov	r1, r3
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f001 f8cb 	bl	800b450 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	791b      	ldrb	r3, [r3, #4]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 f8c5 	bl	800b450 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	701a      	strb	r2, [r3, #0]
      break;
 800a2d2:	e11b      	b.n	800a50c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800a2d4:	2101      	movs	r1, #1
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa79 	bl	800a7ce <USBH_SetAddress>
 800a2dc:	4603      	mov	r3, r0
 800a2de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a2e0:	7bbb      	ldrb	r3, [r7, #14]
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d130      	bne.n	800a348 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800a2e6:	2002      	movs	r0, #2
 800a2e8:	f001 fbab 	bl	800ba42 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2201      	movs	r2, #1
 800a2f0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2203      	movs	r2, #3
 800a2f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	7919      	ldrb	r1, [r3, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800a30e:	9202      	str	r2, [sp, #8]
 800a310:	2200      	movs	r2, #0
 800a312:	9201      	str	r2, [sp, #4]
 800a314:	9300      	str	r3, [sp, #0]
 800a316:	4603      	mov	r3, r0
 800a318:	2280      	movs	r2, #128	@ 0x80
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f001 f848 	bl	800b3b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	7959      	ldrb	r1, [r3, #5]
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a334:	9202      	str	r2, [sp, #8]
 800a336:	2200      	movs	r2, #0
 800a338:	9201      	str	r2, [sp, #4]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	4603      	mov	r3, r0
 800a33e:	2200      	movs	r2, #0
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f001 f835 	bl	800b3b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a346:	e0e3      	b.n	800a510 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a348:	7bbb      	ldrb	r3, [r7, #14]
 800a34a:	2b03      	cmp	r3, #3
 800a34c:	f040 80e0 	bne.w	800a510 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	220d      	movs	r2, #13
 800a354:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	2200      	movs	r2, #0
 800a35a:	705a      	strb	r2, [r3, #1]
      break;
 800a35c:	e0d8      	b.n	800a510 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a35e:	2109      	movs	r1, #9
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 f9a1 	bl	800a6a8 <USBH_Get_CfgDesc>
 800a366:	4603      	mov	r3, r0
 800a368:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a36a:	7bbb      	ldrb	r3, [r7, #14]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d103      	bne.n	800a378 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2204      	movs	r2, #4
 800a374:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a376:	e0cd      	b.n	800a514 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a378:	7bbb      	ldrb	r3, [r7, #14]
 800a37a:	2b03      	cmp	r3, #3
 800a37c:	f040 80ca 	bne.w	800a514 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a386:	3301      	adds	r3, #1
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a396:	2b03      	cmp	r3, #3
 800a398:	d903      	bls.n	800a3a2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	220d      	movs	r2, #13
 800a39e:	701a      	strb	r2, [r3, #0]
      break;
 800a3a0:	e0b8      	b.n	800a514 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	795b      	ldrb	r3, [r3, #5]
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f001 f851 	bl	800b450 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	791b      	ldrb	r3, [r3, #4]
 800a3b2:	4619      	mov	r1, r3
 800a3b4:	6878      	ldr	r0, [r7, #4]
 800a3b6:	f001 f84b 	bl	800b450 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	2200      	movs	r2, #0
 800a3be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
      break;
 800a3c6:	e0a5      	b.n	800a514 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a3ce:	4619      	mov	r1, r3
 800a3d0:	6878      	ldr	r0, [r7, #4]
 800a3d2:	f000 f969 	bl	800a6a8 <USBH_Get_CfgDesc>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a3da:	7bbb      	ldrb	r3, [r7, #14]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d103      	bne.n	800a3e8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2205      	movs	r2, #5
 800a3e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a3e6:	e097      	b.n	800a518 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a3e8:	7bbb      	ldrb	r3, [r7, #14]
 800a3ea:	2b03      	cmp	r3, #3
 800a3ec:	f040 8094 	bne.w	800a518 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	b2da      	uxtb	r2, r3
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a406:	2b03      	cmp	r3, #3
 800a408:	d903      	bls.n	800a412 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	220d      	movs	r2, #13
 800a40e:	701a      	strb	r2, [r3, #0]
      break;
 800a410:	e082      	b.n	800a518 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	795b      	ldrb	r3, [r3, #5]
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f001 f819 	bl	800b450 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	791b      	ldrb	r3, [r3, #4]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 f813 	bl	800b450 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2200      	movs	r2, #0
 800a434:	701a      	strb	r2, [r3, #0]
      break;
 800a436:	e06f      	b.n	800a518 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d019      	beq.n	800a476 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a44e:	23ff      	movs	r3, #255	@ 0xff
 800a450:	6878      	ldr	r0, [r7, #4]
 800a452:	f000 f953 	bl	800a6fc <USBH_Get_StringDesc>
 800a456:	4603      	mov	r3, r0
 800a458:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a45a:	7bbb      	ldrb	r3, [r7, #14]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d103      	bne.n	800a468 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2206      	movs	r2, #6
 800a464:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a466:	e059      	b.n	800a51c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a468:	7bbb      	ldrb	r3, [r7, #14]
 800a46a:	2b03      	cmp	r3, #3
 800a46c:	d156      	bne.n	800a51c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	2206      	movs	r2, #6
 800a472:	705a      	strb	r2, [r3, #1]
      break;
 800a474:	e052      	b.n	800a51c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2206      	movs	r2, #6
 800a47a:	705a      	strb	r2, [r3, #1]
      break;
 800a47c:	e04e      	b.n	800a51c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a484:	2b00      	cmp	r3, #0
 800a486:	d019      	beq.n	800a4bc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a494:	23ff      	movs	r3, #255	@ 0xff
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f000 f930 	bl	800a6fc <USBH_Get_StringDesc>
 800a49c:	4603      	mov	r3, r0
 800a49e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d103      	bne.n	800a4ae <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2207      	movs	r2, #7
 800a4aa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a4ac:	e038      	b.n	800a520 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4ae:	7bbb      	ldrb	r3, [r7, #14]
 800a4b0:	2b03      	cmp	r3, #3
 800a4b2:	d135      	bne.n	800a520 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2207      	movs	r2, #7
 800a4b8:	705a      	strb	r2, [r3, #1]
      break;
 800a4ba:	e031      	b.n	800a520 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2207      	movs	r2, #7
 800a4c0:	705a      	strb	r2, [r3, #1]
      break;
 800a4c2:	e02d      	b.n	800a520 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d017      	beq.n	800a4fe <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a4da:	23ff      	movs	r3, #255	@ 0xff
 800a4dc:	6878      	ldr	r0, [r7, #4]
 800a4de:	f000 f90d 	bl	800a6fc <USBH_Get_StringDesc>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a4e6:	7bbb      	ldrb	r3, [r7, #14]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d102      	bne.n	800a4f2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a4f0:	e018      	b.n	800a524 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a4f2:	7bbb      	ldrb	r3, [r7, #14]
 800a4f4:	2b03      	cmp	r3, #3
 800a4f6:	d115      	bne.n	800a524 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	73fb      	strb	r3, [r7, #15]
      break;
 800a4fc:	e012      	b.n	800a524 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a4fe:	2300      	movs	r3, #0
 800a500:	73fb      	strb	r3, [r7, #15]
      break;
 800a502:	e00f      	b.n	800a524 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a504:	bf00      	nop
 800a506:	e00e      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a508:	bf00      	nop
 800a50a:	e00c      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a50c:	bf00      	nop
 800a50e:	e00a      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a510:	bf00      	nop
 800a512:	e008      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a514:	bf00      	nop
 800a516:	e006      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a518:	bf00      	nop
 800a51a:	e004      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a51c:	bf00      	nop
 800a51e:	e002      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a520:	bf00      	nop
 800a522:	e000      	b.n	800a526 <USBH_HandleEnum+0x3b6>
      break;
 800a524:	bf00      	nop
  }
  return Status;
 800a526:	7bfb      	ldrb	r3, [r7, #15]
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a530:	b480      	push	{r7}
 800a532:	b083      	sub	sp, #12
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	683a      	ldr	r2, [r7, #0]
 800a53e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a542:	bf00      	nop
 800a544:	370c      	adds	r7, #12
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr

0800a54e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a54e:	b580      	push	{r7, lr}
 800a550:	b082      	sub	sp, #8
 800a552:	af00      	add	r7, sp, #0
 800a554:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a55c:	1c5a      	adds	r2, r3, #1
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a564:	6878      	ldr	r0, [r7, #4]
 800a566:	f000 f804 	bl	800a572 <USBH_HandleSof>
}
 800a56a:	bf00      	nop
 800a56c:	3708      	adds	r7, #8
 800a56e:	46bd      	mov	sp, r7
 800a570:	bd80      	pop	{r7, pc}

0800a572 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a572:	b580      	push	{r7, lr}
 800a574:	b082      	sub	sp, #8
 800a576:	af00      	add	r7, sp, #0
 800a578:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	2b0b      	cmp	r3, #11
 800a582:	d10a      	bne.n	800a59a <USBH_HandleSof+0x28>
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d005      	beq.n	800a59a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a594:	699b      	ldr	r3, [r3, #24]
 800a596:	6878      	ldr	r0, [r7, #4]
 800a598:	4798      	blx	r3
  }
}
 800a59a:	bf00      	nop
 800a59c:	3708      	adds	r7, #8
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}

0800a5a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a5a2:	b480      	push	{r7}
 800a5a4:	b083      	sub	sp, #12
 800a5a6:	af00      	add	r7, sp, #0
 800a5a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a5b2:	bf00      	nop
}
 800a5b4:	370c      	adds	r7, #12
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2200      	movs	r2, #0
 800a5ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a5ce:	bf00      	nop
}
 800a5d0:	370c      	adds	r7, #12
 800a5d2:	46bd      	mov	sp, r7
 800a5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d8:	4770      	bx	lr

0800a5da <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a5da:	b480      	push	{r7}
 800a5dc:	b083      	sub	sp, #12
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2201      	movs	r2, #1
 800a5e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a5fa:	2300      	movs	r3, #0
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2201      	movs	r2, #1
 800a614:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2200      	movs	r2, #0
 800a61c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f001 f8be 	bl	800b7aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	791b      	ldrb	r3, [r3, #4]
 800a632:	4619      	mov	r1, r3
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 ff0b 	bl	800b450 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	795b      	ldrb	r3, [r3, #5]
 800a63e:	4619      	mov	r1, r3
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 ff05 	bl	800b450 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a646:	2300      	movs	r3, #0
}
 800a648:	4618      	mov	r0, r3
 800a64a:	3708      	adds	r7, #8
 800a64c:	46bd      	mov	sp, r7
 800a64e:	bd80      	pop	{r7, pc}

0800a650 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b086      	sub	sp, #24
 800a654:	af02      	add	r7, sp, #8
 800a656:	6078      	str	r0, [r7, #4]
 800a658:	460b      	mov	r3, r1
 800a65a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a65c:	887b      	ldrh	r3, [r7, #2]
 800a65e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a662:	d901      	bls.n	800a668 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a664:	2303      	movs	r3, #3
 800a666:	e01b      	b.n	800a6a0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a66e:	887b      	ldrh	r3, [r7, #2]
 800a670:	9300      	str	r3, [sp, #0]
 800a672:	4613      	mov	r3, r2
 800a674:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a678:	2100      	movs	r1, #0
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 f872 	bl	800a764 <USBH_GetDescriptor>
 800a680:	4603      	mov	r3, r0
 800a682:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a684:	7bfb      	ldrb	r3, [r7, #15]
 800a686:	2b00      	cmp	r3, #0
 800a688:	d109      	bne.n	800a69e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a690:	887a      	ldrh	r2, [r7, #2]
 800a692:	4619      	mov	r1, r3
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f929 	bl	800a8ec <USBH_ParseDevDesc>
 800a69a:	4603      	mov	r3, r0
 800a69c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a69e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	3710      	adds	r7, #16
 800a6a4:	46bd      	mov	sp, r7
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b086      	sub	sp, #24
 800a6ac:	af02      	add	r7, sp, #8
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	331c      	adds	r3, #28
 800a6b8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a6ba:	887b      	ldrh	r3, [r7, #2]
 800a6bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a6c0:	d901      	bls.n	800a6c6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	e016      	b.n	800a6f4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a6c6:	887b      	ldrh	r3, [r7, #2]
 800a6c8:	9300      	str	r3, [sp, #0]
 800a6ca:	68bb      	ldr	r3, [r7, #8]
 800a6cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 f846 	bl	800a764 <USBH_GetDescriptor>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a6dc:	7bfb      	ldrb	r3, [r7, #15]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d107      	bne.n	800a6f2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a6e2:	887b      	ldrh	r3, [r7, #2]
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	68b9      	ldr	r1, [r7, #8]
 800a6e8:	6878      	ldr	r0, [r7, #4]
 800a6ea:	f000 f9af 	bl	800aa4c <USBH_ParseCfgDesc>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3710      	adds	r7, #16
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd80      	pop	{r7, pc}

0800a6fc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b088      	sub	sp, #32
 800a700:	af02      	add	r7, sp, #8
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	607a      	str	r2, [r7, #4]
 800a706:	461a      	mov	r2, r3
 800a708:	460b      	mov	r3, r1
 800a70a:	72fb      	strb	r3, [r7, #11]
 800a70c:	4613      	mov	r3, r2
 800a70e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a710:	893b      	ldrh	r3, [r7, #8]
 800a712:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a716:	d802      	bhi.n	800a71e <USBH_Get_StringDesc+0x22>
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d101      	bne.n	800a722 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a71e:	2303      	movs	r3, #3
 800a720:	e01c      	b.n	800a75c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a722:	7afb      	ldrb	r3, [r7, #11]
 800a724:	b29b      	uxth	r3, r3
 800a726:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a72a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a732:	893b      	ldrh	r3, [r7, #8]
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	460b      	mov	r3, r1
 800a738:	2100      	movs	r1, #0
 800a73a:	68f8      	ldr	r0, [r7, #12]
 800a73c:	f000 f812 	bl	800a764 <USBH_GetDescriptor>
 800a740:	4603      	mov	r3, r0
 800a742:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a744:	7dfb      	ldrb	r3, [r7, #23]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d107      	bne.n	800a75a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a750:	893a      	ldrh	r2, [r7, #8]
 800a752:	6879      	ldr	r1, [r7, #4]
 800a754:	4618      	mov	r0, r3
 800a756:	f000 fb8d 	bl	800ae74 <USBH_ParseStringDesc>
  }

  return status;
 800a75a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3718      	adds	r7, #24
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b084      	sub	sp, #16
 800a768:	af00      	add	r7, sp, #0
 800a76a:	60f8      	str	r0, [r7, #12]
 800a76c:	607b      	str	r3, [r7, #4]
 800a76e:	460b      	mov	r3, r1
 800a770:	72fb      	strb	r3, [r7, #11]
 800a772:	4613      	mov	r3, r2
 800a774:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	789b      	ldrb	r3, [r3, #2]
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d11c      	bne.n	800a7b8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a77e:	7afb      	ldrb	r3, [r7, #11]
 800a780:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a784:	b2da      	uxtb	r2, r3
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	2206      	movs	r2, #6
 800a78e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	893a      	ldrh	r2, [r7, #8]
 800a794:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a796:	893b      	ldrh	r3, [r7, #8]
 800a798:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a79c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a7a0:	d104      	bne.n	800a7ac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	f240 4209 	movw	r2, #1033	@ 0x409
 800a7a8:	829a      	strh	r2, [r3, #20]
 800a7aa:	e002      	b.n	800a7b2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	8b3a      	ldrh	r2, [r7, #24]
 800a7b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a7b8:	8b3b      	ldrh	r3, [r7, #24]
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6879      	ldr	r1, [r7, #4]
 800a7be:	68f8      	ldr	r0, [r7, #12]
 800a7c0:	f000 fba5 	bl	800af0e <USBH_CtlReq>
 800a7c4:	4603      	mov	r3, r0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3710      	adds	r7, #16
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	bd80      	pop	{r7, pc}

0800a7ce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a7ce:	b580      	push	{r7, lr}
 800a7d0:	b082      	sub	sp, #8
 800a7d2:	af00      	add	r7, sp, #0
 800a7d4:	6078      	str	r0, [r7, #4]
 800a7d6:	460b      	mov	r3, r1
 800a7d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	789b      	ldrb	r3, [r3, #2]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d10f      	bne.n	800a802 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2200      	movs	r2, #0
 800a7e6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	2205      	movs	r2, #5
 800a7ec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a7ee:	78fb      	ldrb	r3, [r7, #3]
 800a7f0:	b29a      	uxth	r2, r3
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a802:	2200      	movs	r2, #0
 800a804:	2100      	movs	r1, #0
 800a806:	6878      	ldr	r0, [r7, #4]
 800a808:	f000 fb81 	bl	800af0e <USBH_CtlReq>
 800a80c:	4603      	mov	r3, r0
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}

0800a816 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a816:	b580      	push	{r7, lr}
 800a818:	b082      	sub	sp, #8
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	460b      	mov	r3, r1
 800a820:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	789b      	ldrb	r3, [r3, #2]
 800a826:	2b01      	cmp	r3, #1
 800a828:	d10e      	bne.n	800a848 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2209      	movs	r2, #9
 800a834:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	887a      	ldrh	r2, [r7, #2]
 800a83a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2200      	movs	r2, #0
 800a840:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a848:	2200      	movs	r2, #0
 800a84a:	2100      	movs	r1, #0
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f000 fb5e 	bl	800af0e <USBH_CtlReq>
 800a852:	4603      	mov	r3, r0
}
 800a854:	4618      	mov	r0, r3
 800a856:	3708      	adds	r7, #8
 800a858:	46bd      	mov	sp, r7
 800a85a:	bd80      	pop	{r7, pc}

0800a85c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b082      	sub	sp, #8
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	460b      	mov	r3, r1
 800a866:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	789b      	ldrb	r3, [r3, #2]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d10f      	bne.n	800a890 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2203      	movs	r2, #3
 800a87a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a87c:	78fb      	ldrb	r3, [r7, #3]
 800a87e:	b29a      	uxth	r2, r3
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	2200      	movs	r2, #0
 800a88e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a890:	2200      	movs	r2, #0
 800a892:	2100      	movs	r1, #0
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 fb3a 	bl	800af0e <USBH_CtlReq>
 800a89a:	4603      	mov	r3, r0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3708      	adds	r7, #8
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}

0800a8a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a8a4:	b580      	push	{r7, lr}
 800a8a6:	b082      	sub	sp, #8
 800a8a8:	af00      	add	r7, sp, #0
 800a8aa:	6078      	str	r0, [r7, #4]
 800a8ac:	460b      	mov	r3, r1
 800a8ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	789b      	ldrb	r3, [r3, #2]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d10f      	bne.n	800a8d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2202      	movs	r2, #2
 800a8bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a8ca:	78fb      	ldrb	r3, [r7, #3]
 800a8cc:	b29a      	uxth	r2, r3
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a8d8:	2200      	movs	r2, #0
 800a8da:	2100      	movs	r1, #0
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fb16 	bl	800af0e <USBH_CtlReq>
 800a8e2:	4603      	mov	r3, r0
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}

0800a8ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a8ec:	b480      	push	{r7}
 800a8ee:	b087      	sub	sp, #28
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	4613      	mov	r3, r2
 800a8f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a900:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a902:	2300      	movs	r3, #0
 800a904:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d101      	bne.n	800a910 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a90c:	2302      	movs	r3, #2
 800a90e:	e094      	b.n	800aa3a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	781a      	ldrb	r2, [r3, #0]
 800a914:	693b      	ldr	r3, [r7, #16]
 800a916:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a918:	68bb      	ldr	r3, [r7, #8]
 800a91a:	785a      	ldrb	r2, [r3, #1]
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	3302      	adds	r3, #2
 800a924:	781b      	ldrb	r3, [r3, #0]
 800a926:	461a      	mov	r2, r3
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	3303      	adds	r3, #3
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	021b      	lsls	r3, r3, #8
 800a930:	b29b      	uxth	r3, r3
 800a932:	4313      	orrs	r3, r2
 800a934:	b29a      	uxth	r2, r3
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	791a      	ldrb	r2, [r3, #4]
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	795a      	ldrb	r2, [r3, #5]
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a94a:	68bb      	ldr	r3, [r7, #8]
 800a94c:	799a      	ldrb	r2, [r3, #6]
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	79da      	ldrb	r2, [r3, #7]
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a960:	2b00      	cmp	r3, #0
 800a962:	d004      	beq.n	800a96e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d11b      	bne.n	800a9a6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	79db      	ldrb	r3, [r3, #7]
 800a972:	2b20      	cmp	r3, #32
 800a974:	dc0f      	bgt.n	800a996 <USBH_ParseDevDesc+0xaa>
 800a976:	2b08      	cmp	r3, #8
 800a978:	db0f      	blt.n	800a99a <USBH_ParseDevDesc+0xae>
 800a97a:	3b08      	subs	r3, #8
 800a97c:	4a32      	ldr	r2, [pc, #200]	@ (800aa48 <USBH_ParseDevDesc+0x15c>)
 800a97e:	fa22 f303 	lsr.w	r3, r2, r3
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b00      	cmp	r3, #0
 800a988:	bf14      	ite	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	2300      	moveq	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	d106      	bne.n	800a9a2 <USBH_ParseDevDesc+0xb6>
 800a994:	e001      	b.n	800a99a <USBH_ParseDevDesc+0xae>
 800a996:	2b40      	cmp	r3, #64	@ 0x40
 800a998:	d003      	beq.n	800a9a2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	2208      	movs	r2, #8
 800a99e:	71da      	strb	r2, [r3, #7]
        break;
 800a9a0:	e000      	b.n	800a9a4 <USBH_ParseDevDesc+0xb8>
        break;
 800a9a2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a9a4:	e00e      	b.n	800a9c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d107      	bne.n	800a9c0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	79db      	ldrb	r3, [r3, #7]
 800a9b4:	2b08      	cmp	r3, #8
 800a9b6:	d005      	beq.n	800a9c4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2208      	movs	r2, #8
 800a9bc:	71da      	strb	r2, [r3, #7]
 800a9be:	e001      	b.n	800a9c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a9c0:	2303      	movs	r3, #3
 800a9c2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a9c4:	88fb      	ldrh	r3, [r7, #6]
 800a9c6:	2b08      	cmp	r3, #8
 800a9c8:	d936      	bls.n	800aa38 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	3308      	adds	r3, #8
 800a9ce:	781b      	ldrb	r3, [r3, #0]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	3309      	adds	r3, #9
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	021b      	lsls	r3, r3, #8
 800a9da:	b29b      	uxth	r3, r3
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	b29a      	uxth	r2, r3
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	330a      	adds	r3, #10
 800a9e8:	781b      	ldrb	r3, [r3, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	68bb      	ldr	r3, [r7, #8]
 800a9ee:	330b      	adds	r3, #11
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	021b      	lsls	r3, r3, #8
 800a9f4:	b29b      	uxth	r3, r3
 800a9f6:	4313      	orrs	r3, r2
 800a9f8:	b29a      	uxth	r2, r3
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	330c      	adds	r3, #12
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	461a      	mov	r2, r3
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	330d      	adds	r3, #13
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	021b      	lsls	r3, r3, #8
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	4313      	orrs	r3, r2
 800aa12:	b29a      	uxth	r2, r3
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	7b9a      	ldrb	r2, [r3, #14]
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	7bda      	ldrb	r2, [r3, #15]
 800aa24:	693b      	ldr	r3, [r7, #16]
 800aa26:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	7c1a      	ldrb	r2, [r3, #16]
 800aa2c:	693b      	ldr	r3, [r7, #16]
 800aa2e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	7c5a      	ldrb	r2, [r3, #17]
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800aa38:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	371c      	adds	r7, #28
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa44:	4770      	bx	lr
 800aa46:	bf00      	nop
 800aa48:	01000101 	.word	0x01000101

0800aa4c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b08c      	sub	sp, #48	@ 0x30
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800aa60:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800aa62:	2300      	movs	r3, #0
 800aa64:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800aa6e:	2300      	movs	r3, #0
 800aa70:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d101      	bne.n	800aa7e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800aa7a:	2302      	movs	r3, #2
 800aa7c:	e0da      	b.n	800ac34 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800aa82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa84:	781b      	ldrb	r3, [r3, #0]
 800aa86:	2b09      	cmp	r3, #9
 800aa88:	d002      	beq.n	800aa90 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800aa8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa8c:	2209      	movs	r2, #9
 800aa8e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	781a      	ldrb	r2, [r3, #0]
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	785a      	ldrb	r2, [r3, #1]
 800aa9c:	6a3b      	ldr	r3, [r7, #32]
 800aa9e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	3302      	adds	r3, #2
 800aaa4:	781b      	ldrb	r3, [r3, #0]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	68bb      	ldr	r3, [r7, #8]
 800aaaa:	3303      	adds	r3, #3
 800aaac:	781b      	ldrb	r3, [r3, #0]
 800aaae:	021b      	lsls	r3, r3, #8
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	4313      	orrs	r3, r2
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800aaba:	bf28      	it	cs
 800aabc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800aac0:	b29a      	uxth	r2, r3
 800aac2:	6a3b      	ldr	r3, [r7, #32]
 800aac4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800aac6:	68bb      	ldr	r3, [r7, #8]
 800aac8:	791a      	ldrb	r2, [r3, #4]
 800aaca:	6a3b      	ldr	r3, [r7, #32]
 800aacc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	795a      	ldrb	r2, [r3, #5]
 800aad2:	6a3b      	ldr	r3, [r7, #32]
 800aad4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	799a      	ldrb	r2, [r3, #6]
 800aada:	6a3b      	ldr	r3, [r7, #32]
 800aadc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	79da      	ldrb	r2, [r3, #7]
 800aae2:	6a3b      	ldr	r3, [r7, #32]
 800aae4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	7a1a      	ldrb	r2, [r3, #8]
 800aaea:	6a3b      	ldr	r3, [r7, #32]
 800aaec:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800aaee:	88fb      	ldrh	r3, [r7, #6]
 800aaf0:	2b09      	cmp	r3, #9
 800aaf2:	f240 809d 	bls.w	800ac30 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800aaf6:	2309      	movs	r3, #9
 800aaf8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800aafa:	2300      	movs	r3, #0
 800aafc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800aafe:	e081      	b.n	800ac04 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab00:	f107 0316 	add.w	r3, r7, #22
 800ab04:	4619      	mov	r1, r3
 800ab06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab08:	f000 f9e7 	bl	800aeda <USBH_GetNextDesc>
 800ab0c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800ab0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab10:	785b      	ldrb	r3, [r3, #1]
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d176      	bne.n	800ac04 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800ab16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab18:	781b      	ldrb	r3, [r3, #0]
 800ab1a:	2b09      	cmp	r3, #9
 800ab1c:	d002      	beq.n	800ab24 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800ab1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab20:	2209      	movs	r2, #9
 800ab22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800ab24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ab28:	221a      	movs	r2, #26
 800ab2a:	fb02 f303 	mul.w	r3, r2, r3
 800ab2e:	3308      	adds	r3, #8
 800ab30:	6a3a      	ldr	r2, [r7, #32]
 800ab32:	4413      	add	r3, r2
 800ab34:	3302      	adds	r3, #2
 800ab36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800ab38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab3a:	69f8      	ldr	r0, [r7, #28]
 800ab3c:	f000 f87e 	bl	800ac3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800ab40:	2300      	movs	r3, #0
 800ab42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800ab46:	2300      	movs	r3, #0
 800ab48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800ab4a:	e043      	b.n	800abd4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800ab4c:	f107 0316 	add.w	r3, r7, #22
 800ab50:	4619      	mov	r1, r3
 800ab52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab54:	f000 f9c1 	bl	800aeda <USBH_GetNextDesc>
 800ab58:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ab5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab5c:	785b      	ldrb	r3, [r3, #1]
 800ab5e:	2b05      	cmp	r3, #5
 800ab60:	d138      	bne.n	800abd4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	795b      	ldrb	r3, [r3, #5]
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d113      	bne.n	800ab92 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d003      	beq.n	800ab7a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800ab72:	69fb      	ldr	r3, [r7, #28]
 800ab74:	799b      	ldrb	r3, [r3, #6]
 800ab76:	2b03      	cmp	r3, #3
 800ab78:	d10b      	bne.n	800ab92 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	79db      	ldrb	r3, [r3, #7]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d10b      	bne.n	800ab9a <USBH_ParseCfgDesc+0x14e>
 800ab82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	2b09      	cmp	r3, #9
 800ab88:	d007      	beq.n	800ab9a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800ab8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab8c:	2209      	movs	r2, #9
 800ab8e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab90:	e003      	b.n	800ab9a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800ab92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab94:	2207      	movs	r2, #7
 800ab96:	701a      	strb	r2, [r3, #0]
 800ab98:	e000      	b.n	800ab9c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800ab9a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800ab9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800aba0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800aba4:	3201      	adds	r2, #1
 800aba6:	00d2      	lsls	r2, r2, #3
 800aba8:	211a      	movs	r1, #26
 800abaa:	fb01 f303 	mul.w	r3, r1, r3
 800abae:	4413      	add	r3, r2
 800abb0:	3308      	adds	r3, #8
 800abb2:	6a3a      	ldr	r2, [r7, #32]
 800abb4:	4413      	add	r3, r2
 800abb6:	3304      	adds	r3, #4
 800abb8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800abba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800abbc:	69b9      	ldr	r1, [r7, #24]
 800abbe:	68f8      	ldr	r0, [r7, #12]
 800abc0:	f000 f870 	bl	800aca4 <USBH_ParseEPDesc>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800abca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800abce:	3301      	adds	r3, #1
 800abd0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800abd4:	69fb      	ldr	r3, [r7, #28]
 800abd6:	791b      	ldrb	r3, [r3, #4]
 800abd8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800abdc:	429a      	cmp	r2, r3
 800abde:	d204      	bcs.n	800abea <USBH_ParseCfgDesc+0x19e>
 800abe0:	6a3b      	ldr	r3, [r7, #32]
 800abe2:	885a      	ldrh	r2, [r3, #2]
 800abe4:	8afb      	ldrh	r3, [r7, #22]
 800abe6:	429a      	cmp	r2, r3
 800abe8:	d8b0      	bhi.n	800ab4c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800abea:	69fb      	ldr	r3, [r7, #28]
 800abec:	791b      	ldrb	r3, [r3, #4]
 800abee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d201      	bcs.n	800abfa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800abf6:	2303      	movs	r3, #3
 800abf8:	e01c      	b.n	800ac34 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800abfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800abfe:	3301      	adds	r3, #1
 800ac00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800ac04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d805      	bhi.n	800ac18 <USBH_ParseCfgDesc+0x1cc>
 800ac0c:	6a3b      	ldr	r3, [r7, #32]
 800ac0e:	885a      	ldrh	r2, [r3, #2]
 800ac10:	8afb      	ldrh	r3, [r7, #22]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	f63f af74 	bhi.w	800ab00 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800ac18:	6a3b      	ldr	r3, [r7, #32]
 800ac1a:	791b      	ldrb	r3, [r3, #4]
 800ac1c:	2b02      	cmp	r3, #2
 800ac1e:	bf28      	it	cs
 800ac20:	2302      	movcs	r3, #2
 800ac22:	b2db      	uxtb	r3, r3
 800ac24:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800ac28:	429a      	cmp	r2, r3
 800ac2a:	d201      	bcs.n	800ac30 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800ac2c:	2303      	movs	r3, #3
 800ac2e:	e001      	b.n	800ac34 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800ac30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	3730      	adds	r7, #48	@ 0x30
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	bd80      	pop	{r7, pc}

0800ac3c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b083      	sub	sp, #12
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
 800ac44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	781a      	ldrb	r2, [r3, #0]
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	785a      	ldrb	r2, [r3, #1]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800ac56:	683b      	ldr	r3, [r7, #0]
 800ac58:	789a      	ldrb	r2, [r3, #2]
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	78da      	ldrb	r2, [r3, #3]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800ac66:	683b      	ldr	r3, [r7, #0]
 800ac68:	3304      	adds	r3, #4
 800ac6a:	781b      	ldrb	r3, [r3, #0]
 800ac6c:	2b02      	cmp	r3, #2
 800ac6e:	bf28      	it	cs
 800ac70:	2302      	movcs	r3, #2
 800ac72:	b2da      	uxtb	r2, r3
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	795a      	ldrb	r2, [r3, #5]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800ac80:	683b      	ldr	r3, [r7, #0]
 800ac82:	799a      	ldrb	r2, [r3, #6]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	79da      	ldrb	r2, [r3, #7]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	7a1a      	ldrb	r2, [r3, #8]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	721a      	strb	r2, [r3, #8]
}
 800ac98:	bf00      	nop
 800ac9a:	370c      	adds	r7, #12
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aca2:	4770      	bx	lr

0800aca4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800aca4:	b480      	push	{r7}
 800aca6:	b087      	sub	sp, #28
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800acb0:	2300      	movs	r3, #0
 800acb2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	781a      	ldrb	r2, [r3, #0]
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	785a      	ldrb	r2, [r3, #1]
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	789a      	ldrb	r2, [r3, #2]
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	78da      	ldrb	r2, [r3, #3]
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3304      	adds	r3, #4
 800acd8:	781b      	ldrb	r3, [r3, #0]
 800acda:	461a      	mov	r2, r3
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	3305      	adds	r3, #5
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	021b      	lsls	r3, r3, #8
 800ace4:	b29b      	uxth	r3, r3
 800ace6:	4313      	orrs	r3, r2
 800ace8:	b29a      	uxth	r2, r3
 800acea:	68bb      	ldr	r3, [r7, #8]
 800acec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	799a      	ldrb	r2, [r3, #6]
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	889b      	ldrh	r3, [r3, #4]
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d009      	beq.n	800ad12 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800ad02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ad06:	d804      	bhi.n	800ad12 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800ad0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad10:	d901      	bls.n	800ad16 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800ad12:	2303      	movs	r3, #3
 800ad14:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d136      	bne.n	800ad8e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	78db      	ldrb	r3, [r3, #3]
 800ad24:	f003 0303 	and.w	r3, r3, #3
 800ad28:	2b02      	cmp	r3, #2
 800ad2a:	d108      	bne.n	800ad3e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	889b      	ldrh	r3, [r3, #4]
 800ad30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad34:	f240 8097 	bls.w	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ad38:	2303      	movs	r3, #3
 800ad3a:	75fb      	strb	r3, [r7, #23]
 800ad3c:	e093      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	78db      	ldrb	r3, [r3, #3]
 800ad42:	f003 0303 	and.w	r3, r3, #3
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d107      	bne.n	800ad5a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ad4a:	68bb      	ldr	r3, [r7, #8]
 800ad4c:	889b      	ldrh	r3, [r3, #4]
 800ad4e:	2b40      	cmp	r3, #64	@ 0x40
 800ad50:	f240 8089 	bls.w	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ad54:	2303      	movs	r3, #3
 800ad56:	75fb      	strb	r3, [r7, #23]
 800ad58:	e085      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ad5a:	68bb      	ldr	r3, [r7, #8]
 800ad5c:	78db      	ldrb	r3, [r3, #3]
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d005      	beq.n	800ad72 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	78db      	ldrb	r3, [r3, #3]
 800ad6a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ad6e:	2b03      	cmp	r3, #3
 800ad70:	d10a      	bne.n	800ad88 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	799b      	ldrb	r3, [r3, #6]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d003      	beq.n	800ad82 <USBH_ParseEPDesc+0xde>
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	799b      	ldrb	r3, [r3, #6]
 800ad7e:	2b10      	cmp	r3, #16
 800ad80:	d970      	bls.n	800ae64 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800ad82:	2303      	movs	r3, #3
 800ad84:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ad86:	e06d      	b.n	800ae64 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ad88:	2303      	movs	r3, #3
 800ad8a:	75fb      	strb	r3, [r7, #23]
 800ad8c:	e06b      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ad94:	2b01      	cmp	r3, #1
 800ad96:	d13c      	bne.n	800ae12 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	78db      	ldrb	r3, [r3, #3]
 800ad9c:	f003 0303 	and.w	r3, r3, #3
 800ada0:	2b02      	cmp	r3, #2
 800ada2:	d005      	beq.n	800adb0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	78db      	ldrb	r3, [r3, #3]
 800ada8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800adac:	2b00      	cmp	r3, #0
 800adae:	d106      	bne.n	800adbe <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	889b      	ldrh	r3, [r3, #4]
 800adb4:	2b40      	cmp	r3, #64	@ 0x40
 800adb6:	d956      	bls.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800adb8:	2303      	movs	r3, #3
 800adba:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800adbc:	e053      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	78db      	ldrb	r3, [r3, #3]
 800adc2:	f003 0303 	and.w	r3, r3, #3
 800adc6:	2b01      	cmp	r3, #1
 800adc8:	d10e      	bne.n	800ade8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	799b      	ldrb	r3, [r3, #6]
 800adce:	2b00      	cmp	r3, #0
 800add0:	d007      	beq.n	800ade2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800add6:	2b10      	cmp	r3, #16
 800add8:	d803      	bhi.n	800ade2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800adde:	2b40      	cmp	r3, #64	@ 0x40
 800ade0:	d941      	bls.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ade2:	2303      	movs	r3, #3
 800ade4:	75fb      	strb	r3, [r7, #23]
 800ade6:	e03e      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	78db      	ldrb	r3, [r3, #3]
 800adec:	f003 0303 	and.w	r3, r3, #3
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d10b      	bne.n	800ae0c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	799b      	ldrb	r3, [r3, #6]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d004      	beq.n	800ae06 <USBH_ParseEPDesc+0x162>
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	889b      	ldrh	r3, [r3, #4]
 800ae00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ae04:	d32f      	bcc.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae06:	2303      	movs	r3, #3
 800ae08:	75fb      	strb	r3, [r7, #23]
 800ae0a:	e02c      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ae0c:	2303      	movs	r3, #3
 800ae0e:	75fb      	strb	r3, [r7, #23]
 800ae10:	e029      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	d120      	bne.n	800ae5e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800ae1c:	68bb      	ldr	r3, [r7, #8]
 800ae1e:	78db      	ldrb	r3, [r3, #3]
 800ae20:	f003 0303 	and.w	r3, r3, #3
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d106      	bne.n	800ae36 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	889b      	ldrh	r3, [r3, #4]
 800ae2c:	2b08      	cmp	r3, #8
 800ae2e:	d01a      	beq.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae30:	2303      	movs	r3, #3
 800ae32:	75fb      	strb	r3, [r7, #23]
 800ae34:	e017      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	78db      	ldrb	r3, [r3, #3]
 800ae3a:	f003 0303 	and.w	r3, r3, #3
 800ae3e:	2b03      	cmp	r3, #3
 800ae40:	d10a      	bne.n	800ae58 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	799b      	ldrb	r3, [r3, #6]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d003      	beq.n	800ae52 <USBH_ParseEPDesc+0x1ae>
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	889b      	ldrh	r3, [r3, #4]
 800ae4e:	2b08      	cmp	r3, #8
 800ae50:	d909      	bls.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ae52:	2303      	movs	r3, #3
 800ae54:	75fb      	strb	r3, [r7, #23]
 800ae56:	e006      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ae58:	2303      	movs	r3, #3
 800ae5a:	75fb      	strb	r3, [r7, #23]
 800ae5c:	e003      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ae5e:	2303      	movs	r3, #3
 800ae60:	75fb      	strb	r3, [r7, #23]
 800ae62:	e000      	b.n	800ae66 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ae64:	bf00      	nop
  }

  return status;
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	371c      	adds	r7, #28
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae72:	4770      	bx	lr

0800ae74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b087      	sub	sp, #28
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	4613      	mov	r3, r2
 800ae80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	3301      	adds	r3, #1
 800ae86:	781b      	ldrb	r3, [r3, #0]
 800ae88:	2b03      	cmp	r3, #3
 800ae8a:	d120      	bne.n	800aece <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	1e9a      	subs	r2, r3, #2
 800ae92:	88fb      	ldrh	r3, [r7, #6]
 800ae94:	4293      	cmp	r3, r2
 800ae96:	bf28      	it	cs
 800ae98:	4613      	movcs	r3, r2
 800ae9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	3302      	adds	r3, #2
 800aea0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800aea2:	2300      	movs	r3, #0
 800aea4:	82fb      	strh	r3, [r7, #22]
 800aea6:	e00b      	b.n	800aec0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800aea8:	8afb      	ldrh	r3, [r7, #22]
 800aeaa:	68fa      	ldr	r2, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	781a      	ldrb	r2, [r3, #0]
 800aeb0:	68bb      	ldr	r3, [r7, #8]
 800aeb2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800aeba:	8afb      	ldrh	r3, [r7, #22]
 800aebc:	3302      	adds	r3, #2
 800aebe:	82fb      	strh	r3, [r7, #22]
 800aec0:	8afa      	ldrh	r2, [r7, #22]
 800aec2:	8abb      	ldrh	r3, [r7, #20]
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d3ef      	bcc.n	800aea8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	2200      	movs	r2, #0
 800aecc:	701a      	strb	r2, [r3, #0]
  }
}
 800aece:	bf00      	nop
 800aed0:	371c      	adds	r7, #28
 800aed2:	46bd      	mov	sp, r7
 800aed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed8:	4770      	bx	lr

0800aeda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aeda:	b480      	push	{r7}
 800aedc:	b085      	sub	sp, #20
 800aede:	af00      	add	r7, sp, #0
 800aee0:	6078      	str	r0, [r7, #4]
 800aee2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	687a      	ldr	r2, [r7, #4]
 800aeea:	7812      	ldrb	r2, [r2, #0]
 800aeec:	4413      	add	r3, r2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	683b      	ldr	r3, [r7, #0]
 800aef2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	4413      	add	r3, r2
 800aefe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800af00:	68fb      	ldr	r3, [r7, #12]
}
 800af02:	4618      	mov	r0, r3
 800af04:	3714      	adds	r7, #20
 800af06:	46bd      	mov	sp, r7
 800af08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0c:	4770      	bx	lr

0800af0e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800af0e:	b580      	push	{r7, lr}
 800af10:	b086      	sub	sp, #24
 800af12:	af00      	add	r7, sp, #0
 800af14:	60f8      	str	r0, [r7, #12]
 800af16:	60b9      	str	r1, [r7, #8]
 800af18:	4613      	mov	r3, r2
 800af1a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800af1c:	2301      	movs	r3, #1
 800af1e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	789b      	ldrb	r3, [r3, #2]
 800af24:	2b01      	cmp	r3, #1
 800af26:	d002      	beq.n	800af2e <USBH_CtlReq+0x20>
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d00f      	beq.n	800af4c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800af2c:	e027      	b.n	800af7e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	88fa      	ldrh	r2, [r7, #6]
 800af38:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	2201      	movs	r2, #1
 800af3e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2202      	movs	r2, #2
 800af44:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800af46:	2301      	movs	r3, #1
 800af48:	75fb      	strb	r3, [r7, #23]
      break;
 800af4a:	e018      	b.n	800af7e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800af4c:	68f8      	ldr	r0, [r7, #12]
 800af4e:	f000 f81b 	bl	800af88 <USBH_HandleControl>
 800af52:	4603      	mov	r3, r0
 800af54:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800af56:	7dfb      	ldrb	r3, [r7, #23]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d002      	beq.n	800af62 <USBH_CtlReq+0x54>
 800af5c:	7dfb      	ldrb	r3, [r7, #23]
 800af5e:	2b03      	cmp	r3, #3
 800af60:	d106      	bne.n	800af70 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2201      	movs	r2, #1
 800af66:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	2200      	movs	r2, #0
 800af6c:	761a      	strb	r2, [r3, #24]
      break;
 800af6e:	e005      	b.n	800af7c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800af70:	7dfb      	ldrb	r3, [r7, #23]
 800af72:	2b02      	cmp	r3, #2
 800af74:	d102      	bne.n	800af7c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2201      	movs	r2, #1
 800af7a:	709a      	strb	r2, [r3, #2]
      break;
 800af7c:	bf00      	nop
  }
  return status;
 800af7e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af80:	4618      	mov	r0, r3
 800af82:	3718      	adds	r7, #24
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800af90:	2301      	movs	r3, #1
 800af92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af94:	2300      	movs	r3, #0
 800af96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	7e1b      	ldrb	r3, [r3, #24]
 800af9c:	3b01      	subs	r3, #1
 800af9e:	2b0a      	cmp	r3, #10
 800afa0:	f200 8156 	bhi.w	800b250 <USBH_HandleControl+0x2c8>
 800afa4:	a201      	add	r2, pc, #4	@ (adr r2, 800afac <USBH_HandleControl+0x24>)
 800afa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afaa:	bf00      	nop
 800afac:	0800afd9 	.word	0x0800afd9
 800afb0:	0800aff3 	.word	0x0800aff3
 800afb4:	0800b05d 	.word	0x0800b05d
 800afb8:	0800b083 	.word	0x0800b083
 800afbc:	0800b0bb 	.word	0x0800b0bb
 800afc0:	0800b0e5 	.word	0x0800b0e5
 800afc4:	0800b137 	.word	0x0800b137
 800afc8:	0800b159 	.word	0x0800b159
 800afcc:	0800b195 	.word	0x0800b195
 800afd0:	0800b1bb 	.word	0x0800b1bb
 800afd4:	0800b1f9 	.word	0x0800b1f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f103 0110 	add.w	r1, r3, #16
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	795b      	ldrb	r3, [r3, #5]
 800afe2:	461a      	mov	r2, r3
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f943 	bl	800b270 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2202      	movs	r2, #2
 800afee:	761a      	strb	r2, [r3, #24]
      break;
 800aff0:	e139      	b.n	800b266 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	795b      	ldrb	r3, [r3, #5]
 800aff6:	4619      	mov	r1, r3
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 fcc5 	bl	800b988 <USBH_LL_GetURBState>
 800affe:	4603      	mov	r3, r0
 800b000:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800b002:	7bbb      	ldrb	r3, [r7, #14]
 800b004:	2b01      	cmp	r3, #1
 800b006:	d11e      	bne.n	800b046 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	7c1b      	ldrb	r3, [r3, #16]
 800b00c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b010:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	8adb      	ldrh	r3, [r3, #22]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800b01a:	7b7b      	ldrb	r3, [r7, #13]
 800b01c:	2b80      	cmp	r3, #128	@ 0x80
 800b01e:	d103      	bne.n	800b028 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	2203      	movs	r2, #3
 800b024:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b026:	e115      	b.n	800b254 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	2205      	movs	r2, #5
 800b02c:	761a      	strb	r2, [r3, #24]
      break;
 800b02e:	e111      	b.n	800b254 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800b030:	7b7b      	ldrb	r3, [r7, #13]
 800b032:	2b80      	cmp	r3, #128	@ 0x80
 800b034:	d103      	bne.n	800b03e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2209      	movs	r2, #9
 800b03a:	761a      	strb	r2, [r3, #24]
      break;
 800b03c:	e10a      	b.n	800b254 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2207      	movs	r2, #7
 800b042:	761a      	strb	r2, [r3, #24]
      break;
 800b044:	e106      	b.n	800b254 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800b046:	7bbb      	ldrb	r3, [r7, #14]
 800b048:	2b04      	cmp	r3, #4
 800b04a:	d003      	beq.n	800b054 <USBH_HandleControl+0xcc>
 800b04c:	7bbb      	ldrb	r3, [r7, #14]
 800b04e:	2b02      	cmp	r3, #2
 800b050:	f040 8100 	bne.w	800b254 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	220b      	movs	r2, #11
 800b058:	761a      	strb	r2, [r3, #24]
      break;
 800b05a:	e0fb      	b.n	800b254 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b062:	b29a      	uxth	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	6899      	ldr	r1, [r3, #8]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	899a      	ldrh	r2, [r3, #12]
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	791b      	ldrb	r3, [r3, #4]
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f93a 	bl	800b2ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2204      	movs	r2, #4
 800b07e:	761a      	strb	r2, [r3, #24]
      break;
 800b080:	e0f1      	b.n	800b266 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	791b      	ldrb	r3, [r3, #4]
 800b086:	4619      	mov	r1, r3
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f000 fc7d 	bl	800b988 <USBH_LL_GetURBState>
 800b08e:	4603      	mov	r3, r0
 800b090:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800b092:	7bbb      	ldrb	r3, [r7, #14]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d102      	bne.n	800b09e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2209      	movs	r2, #9
 800b09c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800b09e:	7bbb      	ldrb	r3, [r7, #14]
 800b0a0:	2b05      	cmp	r3, #5
 800b0a2:	d102      	bne.n	800b0aa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800b0a4:	2303      	movs	r3, #3
 800b0a6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b0a8:	e0d6      	b.n	800b258 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800b0aa:	7bbb      	ldrb	r3, [r7, #14]
 800b0ac:	2b04      	cmp	r3, #4
 800b0ae:	f040 80d3 	bne.w	800b258 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	220b      	movs	r2, #11
 800b0b6:	761a      	strb	r2, [r3, #24]
      break;
 800b0b8:	e0ce      	b.n	800b258 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	6899      	ldr	r1, [r3, #8]
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	899a      	ldrh	r2, [r3, #12]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	795b      	ldrb	r3, [r3, #5]
 800b0c6:	2001      	movs	r0, #1
 800b0c8:	9000      	str	r0, [sp, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 f8ea 	bl	800b2a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b0d6:	b29a      	uxth	r2, r3
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2206      	movs	r2, #6
 800b0e0:	761a      	strb	r2, [r3, #24]
      break;
 800b0e2:	e0c0      	b.n	800b266 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	795b      	ldrb	r3, [r3, #5]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 fc4c 	bl	800b988 <USBH_LL_GetURBState>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b0f4:	7bbb      	ldrb	r3, [r7, #14]
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d103      	bne.n	800b102 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2207      	movs	r2, #7
 800b0fe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b100:	e0ac      	b.n	800b25c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800b102:	7bbb      	ldrb	r3, [r7, #14]
 800b104:	2b05      	cmp	r3, #5
 800b106:	d105      	bne.n	800b114 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	220c      	movs	r2, #12
 800b10c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800b10e:	2303      	movs	r3, #3
 800b110:	73fb      	strb	r3, [r7, #15]
      break;
 800b112:	e0a3      	b.n	800b25c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b114:	7bbb      	ldrb	r3, [r7, #14]
 800b116:	2b02      	cmp	r3, #2
 800b118:	d103      	bne.n	800b122 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2205      	movs	r2, #5
 800b11e:	761a      	strb	r2, [r3, #24]
      break;
 800b120:	e09c      	b.n	800b25c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800b122:	7bbb      	ldrb	r3, [r7, #14]
 800b124:	2b04      	cmp	r3, #4
 800b126:	f040 8099 	bne.w	800b25c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	220b      	movs	r2, #11
 800b12e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800b130:	2302      	movs	r3, #2
 800b132:	73fb      	strb	r3, [r7, #15]
      break;
 800b134:	e092      	b.n	800b25c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	791b      	ldrb	r3, [r3, #4]
 800b13a:	2200      	movs	r2, #0
 800b13c:	2100      	movs	r1, #0
 800b13e:	6878      	ldr	r0, [r7, #4]
 800b140:	f000 f8d5 	bl	800b2ee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b14a:	b29a      	uxth	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	2208      	movs	r2, #8
 800b154:	761a      	strb	r2, [r3, #24]

      break;
 800b156:	e086      	b.n	800b266 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	791b      	ldrb	r3, [r3, #4]
 800b15c:	4619      	mov	r1, r3
 800b15e:	6878      	ldr	r0, [r7, #4]
 800b160:	f000 fc12 	bl	800b988 <USBH_LL_GetURBState>
 800b164:	4603      	mov	r3, r0
 800b166:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800b168:	7bbb      	ldrb	r3, [r7, #14]
 800b16a:	2b01      	cmp	r3, #1
 800b16c:	d105      	bne.n	800b17a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	220d      	movs	r2, #13
 800b172:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b178:	e072      	b.n	800b260 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800b17a:	7bbb      	ldrb	r3, [r7, #14]
 800b17c:	2b04      	cmp	r3, #4
 800b17e:	d103      	bne.n	800b188 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	220b      	movs	r2, #11
 800b184:	761a      	strb	r2, [r3, #24]
      break;
 800b186:	e06b      	b.n	800b260 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800b188:	7bbb      	ldrb	r3, [r7, #14]
 800b18a:	2b05      	cmp	r3, #5
 800b18c:	d168      	bne.n	800b260 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800b18e:	2303      	movs	r3, #3
 800b190:	73fb      	strb	r3, [r7, #15]
      break;
 800b192:	e065      	b.n	800b260 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	795b      	ldrb	r3, [r3, #5]
 800b198:	2201      	movs	r2, #1
 800b19a:	9200      	str	r2, [sp, #0]
 800b19c:	2200      	movs	r2, #0
 800b19e:	2100      	movs	r1, #0
 800b1a0:	6878      	ldr	r0, [r7, #4]
 800b1a2:	f000 f87f 	bl	800b2a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800b1ac:	b29a      	uxth	r2, r3
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	220a      	movs	r2, #10
 800b1b6:	761a      	strb	r2, [r3, #24]
      break;
 800b1b8:	e055      	b.n	800b266 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	795b      	ldrb	r3, [r3, #5]
 800b1be:	4619      	mov	r1, r3
 800b1c0:	6878      	ldr	r0, [r7, #4]
 800b1c2:	f000 fbe1 	bl	800b988 <USBH_LL_GetURBState>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800b1ca:	7bbb      	ldrb	r3, [r7, #14]
 800b1cc:	2b01      	cmp	r3, #1
 800b1ce:	d105      	bne.n	800b1dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	220d      	movs	r2, #13
 800b1d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800b1da:	e043      	b.n	800b264 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b1dc:	7bbb      	ldrb	r3, [r7, #14]
 800b1de:	2b02      	cmp	r3, #2
 800b1e0:	d103      	bne.n	800b1ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2209      	movs	r2, #9
 800b1e6:	761a      	strb	r2, [r3, #24]
      break;
 800b1e8:	e03c      	b.n	800b264 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800b1ea:	7bbb      	ldrb	r3, [r7, #14]
 800b1ec:	2b04      	cmp	r3, #4
 800b1ee:	d139      	bne.n	800b264 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	220b      	movs	r2, #11
 800b1f4:	761a      	strb	r2, [r3, #24]
      break;
 800b1f6:	e035      	b.n	800b264 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	7e5b      	ldrb	r3, [r3, #25]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	b2da      	uxtb	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	765a      	strb	r2, [r3, #25]
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	7e5b      	ldrb	r3, [r3, #25]
 800b208:	2b02      	cmp	r3, #2
 800b20a:	d806      	bhi.n	800b21a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2201      	movs	r2, #1
 800b216:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800b218:	e025      	b.n	800b266 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b220:	2106      	movs	r1, #6
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2200      	movs	r2, #0
 800b22a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	795b      	ldrb	r3, [r3, #5]
 800b230:	4619      	mov	r1, r3
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f000 f90c 	bl	800b450 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	791b      	ldrb	r3, [r3, #4]
 800b23c:	4619      	mov	r1, r3
 800b23e:	6878      	ldr	r0, [r7, #4]
 800b240:	f000 f906 	bl	800b450 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800b24a:	2302      	movs	r3, #2
 800b24c:	73fb      	strb	r3, [r7, #15]
      break;
 800b24e:	e00a      	b.n	800b266 <USBH_HandleControl+0x2de>

    default:
      break;
 800b250:	bf00      	nop
 800b252:	e008      	b.n	800b266 <USBH_HandleControl+0x2de>
      break;
 800b254:	bf00      	nop
 800b256:	e006      	b.n	800b266 <USBH_HandleControl+0x2de>
      break;
 800b258:	bf00      	nop
 800b25a:	e004      	b.n	800b266 <USBH_HandleControl+0x2de>
      break;
 800b25c:	bf00      	nop
 800b25e:	e002      	b.n	800b266 <USBH_HandleControl+0x2de>
      break;
 800b260:	bf00      	nop
 800b262:	e000      	b.n	800b266 <USBH_HandleControl+0x2de>
      break;
 800b264:	bf00      	nop
  }

  return status;
 800b266:	7bfb      	ldrb	r3, [r7, #15]
}
 800b268:	4618      	mov	r0, r3
 800b26a:	3710      	adds	r7, #16
 800b26c:	46bd      	mov	sp, r7
 800b26e:	bd80      	pop	{r7, pc}

0800b270 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b088      	sub	sp, #32
 800b274:	af04      	add	r7, sp, #16
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	4613      	mov	r3, r2
 800b27c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b27e:	79f9      	ldrb	r1, [r7, #7]
 800b280:	2300      	movs	r3, #0
 800b282:	9303      	str	r3, [sp, #12]
 800b284:	2308      	movs	r3, #8
 800b286:	9302      	str	r3, [sp, #8]
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	9301      	str	r3, [sp, #4]
 800b28c:	2300      	movs	r3, #0
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	2300      	movs	r3, #0
 800b292:	2200      	movs	r2, #0
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fb46 	bl	800b926 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b088      	sub	sp, #32
 800b2a8:	af04      	add	r7, sp, #16
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	460b      	mov	r3, r1
 800b2b4:	80fb      	strh	r3, [r7, #6]
 800b2b6:	4613      	mov	r3, r2
 800b2b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d001      	beq.n	800b2c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b2c8:	7979      	ldrb	r1, [r7, #5]
 800b2ca:	7e3b      	ldrb	r3, [r7, #24]
 800b2cc:	9303      	str	r3, [sp, #12]
 800b2ce:	88fb      	ldrh	r3, [r7, #6]
 800b2d0:	9302      	str	r3, [sp, #8]
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	9301      	str	r3, [sp, #4]
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	9300      	str	r3, [sp, #0]
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2200      	movs	r2, #0
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f000 fb21 	bl	800b926 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800b2e4:	2300      	movs	r3, #0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b088      	sub	sp, #32
 800b2f2:	af04      	add	r7, sp, #16
 800b2f4:	60f8      	str	r0, [r7, #12]
 800b2f6:	60b9      	str	r1, [r7, #8]
 800b2f8:	4611      	mov	r1, r2
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	460b      	mov	r3, r1
 800b2fe:	80fb      	strh	r3, [r7, #6]
 800b300:	4613      	mov	r3, r2
 800b302:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b304:	7979      	ldrb	r1, [r7, #5]
 800b306:	2300      	movs	r3, #0
 800b308:	9303      	str	r3, [sp, #12]
 800b30a:	88fb      	ldrh	r3, [r7, #6]
 800b30c:	9302      	str	r3, [sp, #8]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	9301      	str	r3, [sp, #4]
 800b312:	2301      	movs	r3, #1
 800b314:	9300      	str	r3, [sp, #0]
 800b316:	2300      	movs	r3, #0
 800b318:	2201      	movs	r2, #1
 800b31a:	68f8      	ldr	r0, [r7, #12]
 800b31c:	f000 fb03 	bl	800b926 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b320:	2300      	movs	r3, #0

}
 800b322:	4618      	mov	r0, r3
 800b324:	3710      	adds	r7, #16
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b088      	sub	sp, #32
 800b32e:	af04      	add	r7, sp, #16
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	60b9      	str	r1, [r7, #8]
 800b334:	4611      	mov	r1, r2
 800b336:	461a      	mov	r2, r3
 800b338:	460b      	mov	r3, r1
 800b33a:	80fb      	strh	r3, [r7, #6]
 800b33c:	4613      	mov	r3, r2
 800b33e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b346:	2b00      	cmp	r3, #0
 800b348:	d001      	beq.n	800b34e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b34a:	2300      	movs	r3, #0
 800b34c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b34e:	7979      	ldrb	r1, [r7, #5]
 800b350:	7e3b      	ldrb	r3, [r7, #24]
 800b352:	9303      	str	r3, [sp, #12]
 800b354:	88fb      	ldrh	r3, [r7, #6]
 800b356:	9302      	str	r3, [sp, #8]
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	2301      	movs	r3, #1
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2302      	movs	r3, #2
 800b362:	2200      	movs	r2, #0
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 fade 	bl	800b926 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b36a:	2300      	movs	r3, #0
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3710      	adds	r7, #16
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}

0800b374 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b088      	sub	sp, #32
 800b378:	af04      	add	r7, sp, #16
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	4611      	mov	r1, r2
 800b380:	461a      	mov	r2, r3
 800b382:	460b      	mov	r3, r1
 800b384:	80fb      	strh	r3, [r7, #6]
 800b386:	4613      	mov	r3, r2
 800b388:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b38a:	7979      	ldrb	r1, [r7, #5]
 800b38c:	2300      	movs	r3, #0
 800b38e:	9303      	str	r3, [sp, #12]
 800b390:	88fb      	ldrh	r3, [r7, #6]
 800b392:	9302      	str	r3, [sp, #8]
 800b394:	68bb      	ldr	r3, [r7, #8]
 800b396:	9301      	str	r3, [sp, #4]
 800b398:	2301      	movs	r3, #1
 800b39a:	9300      	str	r3, [sp, #0]
 800b39c:	2302      	movs	r3, #2
 800b39e:	2201      	movs	r2, #1
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 fac0 	bl	800b926 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b086      	sub	sp, #24
 800b3b4:	af04      	add	r7, sp, #16
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	4608      	mov	r0, r1
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	461a      	mov	r2, r3
 800b3be:	4603      	mov	r3, r0
 800b3c0:	70fb      	strb	r3, [r7, #3]
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	70bb      	strb	r3, [r7, #2]
 800b3c6:	4613      	mov	r3, r2
 800b3c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b3ca:	7878      	ldrb	r0, [r7, #1]
 800b3cc:	78ba      	ldrb	r2, [r7, #2]
 800b3ce:	78f9      	ldrb	r1, [r7, #3]
 800b3d0:	8b3b      	ldrh	r3, [r7, #24]
 800b3d2:	9302      	str	r3, [sp, #8]
 800b3d4:	7d3b      	ldrb	r3, [r7, #20]
 800b3d6:	9301      	str	r3, [sp, #4]
 800b3d8:	7c3b      	ldrb	r3, [r7, #16]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	4603      	mov	r3, r0
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f000 fa53 	bl	800b88a <USBH_LL_OpenPipe>

  return USBH_OK;
 800b3e4:	2300      	movs	r3, #0
}
 800b3e6:	4618      	mov	r0, r3
 800b3e8:	3708      	adds	r7, #8
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	bd80      	pop	{r7, pc}

0800b3ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b3ee:	b580      	push	{r7, lr}
 800b3f0:	b082      	sub	sp, #8
 800b3f2:	af00      	add	r7, sp, #0
 800b3f4:	6078      	str	r0, [r7, #4]
 800b3f6:	460b      	mov	r3, r1
 800b3f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b3fa:	78fb      	ldrb	r3, [r7, #3]
 800b3fc:	4619      	mov	r1, r3
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 fa72 	bl	800b8e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800b404:	2300      	movs	r3, #0
}
 800b406:	4618      	mov	r0, r3
 800b408:	3708      	adds	r7, #8
 800b40a:	46bd      	mov	sp, r7
 800b40c:	bd80      	pop	{r7, pc}

0800b40e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b40e:	b580      	push	{r7, lr}
 800b410:	b084      	sub	sp, #16
 800b412:	af00      	add	r7, sp, #0
 800b414:	6078      	str	r0, [r7, #4]
 800b416:	460b      	mov	r3, r1
 800b418:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 f836 	bl	800b48c <USBH_GetFreePipe>
 800b420:	4603      	mov	r3, r0
 800b422:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b424:	89fb      	ldrh	r3, [r7, #14]
 800b426:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b42a:	4293      	cmp	r3, r2
 800b42c:	d00a      	beq.n	800b444 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b42e:	78fa      	ldrb	r2, [r7, #3]
 800b430:	89fb      	ldrh	r3, [r7, #14]
 800b432:	f003 030f 	and.w	r3, r3, #15
 800b436:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b43a:	6879      	ldr	r1, [r7, #4]
 800b43c:	33e0      	adds	r3, #224	@ 0xe0
 800b43e:	009b      	lsls	r3, r3, #2
 800b440:	440b      	add	r3, r1
 800b442:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b444:	89fb      	ldrh	r3, [r7, #14]
 800b446:	b2db      	uxtb	r3, r3
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b450:	b480      	push	{r7}
 800b452:	b083      	sub	sp, #12
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	460b      	mov	r3, r1
 800b45a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b45c:	78fb      	ldrb	r3, [r7, #3]
 800b45e:	2b0f      	cmp	r3, #15
 800b460:	d80d      	bhi.n	800b47e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b462:	78fb      	ldrb	r3, [r7, #3]
 800b464:	687a      	ldr	r2, [r7, #4]
 800b466:	33e0      	adds	r3, #224	@ 0xe0
 800b468:	009b      	lsls	r3, r3, #2
 800b46a:	4413      	add	r3, r2
 800b46c:	685a      	ldr	r2, [r3, #4]
 800b46e:	78fb      	ldrb	r3, [r7, #3]
 800b470:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b474:	6879      	ldr	r1, [r7, #4]
 800b476:	33e0      	adds	r3, #224	@ 0xe0
 800b478:	009b      	lsls	r3, r3, #2
 800b47a:	440b      	add	r3, r1
 800b47c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b47e:	2300      	movs	r3, #0
}
 800b480:	4618      	mov	r0, r3
 800b482:	370c      	adds	r7, #12
 800b484:	46bd      	mov	sp, r7
 800b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48a:	4770      	bx	lr

0800b48c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b494:	2300      	movs	r3, #0
 800b496:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b498:	2300      	movs	r3, #0
 800b49a:	73fb      	strb	r3, [r7, #15]
 800b49c:	e00f      	b.n	800b4be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	33e0      	adds	r3, #224	@ 0xe0
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d102      	bne.n	800b4b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b4b2:	7bfb      	ldrb	r3, [r7, #15]
 800b4b4:	b29b      	uxth	r3, r3
 800b4b6:	e007      	b.n	800b4c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b4b8:	7bfb      	ldrb	r3, [r7, #15]
 800b4ba:	3301      	adds	r3, #1
 800b4bc:	73fb      	strb	r3, [r7, #15]
 800b4be:	7bfb      	ldrb	r3, [r7, #15]
 800b4c0:	2b0f      	cmp	r3, #15
 800b4c2:	d9ec      	bls.n	800b49e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b4c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	3714      	adds	r7, #20
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr

0800b4d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b4d8:	2201      	movs	r2, #1
 800b4da:	490e      	ldr	r1, [pc, #56]	@ (800b514 <MX_USB_HOST_Init+0x40>)
 800b4dc:	480e      	ldr	r0, [pc, #56]	@ (800b518 <MX_USB_HOST_Init+0x44>)
 800b4de:	f7fe fb15 	bl	8009b0c <USBH_Init>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d001      	beq.n	800b4ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b4e8:	f7f6 fab8 	bl	8001a5c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800b4ec:	490b      	ldr	r1, [pc, #44]	@ (800b51c <MX_USB_HOST_Init+0x48>)
 800b4ee:	480a      	ldr	r0, [pc, #40]	@ (800b518 <MX_USB_HOST_Init+0x44>)
 800b4f0:	f7fe fbb9 	bl	8009c66 <USBH_RegisterClass>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	d001      	beq.n	800b4fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b4fa:	f7f6 faaf 	bl	8001a5c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b4fe:	4806      	ldr	r0, [pc, #24]	@ (800b518 <MX_USB_HOST_Init+0x44>)
 800b500:	f7fe fc3d 	bl	8009d7e <USBH_Start>
 800b504:	4603      	mov	r3, r0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d001      	beq.n	800b50e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b50a:	f7f6 faa7 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b50e:	bf00      	nop
 800b510:	bd80      	pop	{r7, pc}
 800b512:	bf00      	nop
 800b514:	0800b535 	.word	0x0800b535
 800b518:	200001f8 	.word	0x200001f8
 800b51c:	2000000c 	.word	0x2000000c

0800b520 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b524:	4802      	ldr	r0, [pc, #8]	@ (800b530 <MX_USB_HOST_Process+0x10>)
 800b526:	f7fe fc3b 	bl	8009da0 <USBH_Process>
}
 800b52a:	bf00      	nop
 800b52c:	bd80      	pop	{r7, pc}
 800b52e:	bf00      	nop
 800b530:	200001f8 	.word	0x200001f8

0800b534 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
 800b53c:	460b      	mov	r3, r1
 800b53e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b540:	78fb      	ldrb	r3, [r7, #3]
 800b542:	3b01      	subs	r3, #1
 800b544:	2b04      	cmp	r3, #4
 800b546:	d819      	bhi.n	800b57c <USBH_UserProcess+0x48>
 800b548:	a201      	add	r2, pc, #4	@ (adr r2, 800b550 <USBH_UserProcess+0x1c>)
 800b54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b54e:	bf00      	nop
 800b550:	0800b57d 	.word	0x0800b57d
 800b554:	0800b56d 	.word	0x0800b56d
 800b558:	0800b57d 	.word	0x0800b57d
 800b55c:	0800b575 	.word	0x0800b575
 800b560:	0800b565 	.word	0x0800b565
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b564:	4b09      	ldr	r3, [pc, #36]	@ (800b58c <USBH_UserProcess+0x58>)
 800b566:	2203      	movs	r2, #3
 800b568:	701a      	strb	r2, [r3, #0]
  break;
 800b56a:	e008      	b.n	800b57e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b56c:	4b07      	ldr	r3, [pc, #28]	@ (800b58c <USBH_UserProcess+0x58>)
 800b56e:	2202      	movs	r2, #2
 800b570:	701a      	strb	r2, [r3, #0]
  break;
 800b572:	e004      	b.n	800b57e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b574:	4b05      	ldr	r3, [pc, #20]	@ (800b58c <USBH_UserProcess+0x58>)
 800b576:	2201      	movs	r2, #1
 800b578:	701a      	strb	r2, [r3, #0]
  break;
 800b57a:	e000      	b.n	800b57e <USBH_UserProcess+0x4a>

  default:
  break;
 800b57c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b57e:	bf00      	nop
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr
 800b58a:	bf00      	nop
 800b58c:	200005d0 	.word	0x200005d0

0800b590 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b08a      	sub	sp, #40	@ 0x28
 800b594:	af00      	add	r7, sp, #0
 800b596:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b598:	f107 0314 	add.w	r3, r7, #20
 800b59c:	2200      	movs	r2, #0
 800b59e:	601a      	str	r2, [r3, #0]
 800b5a0:	605a      	str	r2, [r3, #4]
 800b5a2:	609a      	str	r2, [r3, #8]
 800b5a4:	60da      	str	r2, [r3, #12]
 800b5a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b5b0:	d147      	bne.n	800b642 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	613b      	str	r3, [r7, #16]
 800b5b6:	4b25      	ldr	r3, [pc, #148]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b5b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5ba:	4a24      	ldr	r2, [pc, #144]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b5bc:	f043 0301 	orr.w	r3, r3, #1
 800b5c0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b5c2:	4b22      	ldr	r3, [pc, #136]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b5c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b5c6:	f003 0301 	and.w	r3, r3, #1
 800b5ca:	613b      	str	r3, [r7, #16]
 800b5cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b5ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b5d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b5dc:	f107 0314 	add.w	r3, r7, #20
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	481b      	ldr	r0, [pc, #108]	@ (800b650 <HAL_HCD_MspInit+0xc0>)
 800b5e4:	f7f8 f9cc 	bl	8003980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b5e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800b5ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5ee:	2302      	movs	r3, #2
 800b5f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b5f6:	2300      	movs	r3, #0
 800b5f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5fa:	230a      	movs	r3, #10
 800b5fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5fe:	f107 0314 	add.w	r3, r7, #20
 800b602:	4619      	mov	r1, r3
 800b604:	4812      	ldr	r0, [pc, #72]	@ (800b650 <HAL_HCD_MspInit+0xc0>)
 800b606:	f7f8 f9bb 	bl	8003980 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b60a:	4b10      	ldr	r3, [pc, #64]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b60c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b60e:	4a0f      	ldr	r2, [pc, #60]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b610:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b614:	6353      	str	r3, [r2, #52]	@ 0x34
 800b616:	2300      	movs	r3, #0
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	4b0c      	ldr	r3, [pc, #48]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b61e:	4a0b      	ldr	r2, [pc, #44]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b620:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b624:	6453      	str	r3, [r2, #68]	@ 0x44
 800b626:	4b09      	ldr	r3, [pc, #36]	@ (800b64c <HAL_HCD_MspInit+0xbc>)
 800b628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b62a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b62e:	60fb      	str	r3, [r7, #12]
 800b630:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	2043      	movs	r0, #67	@ 0x43
 800b638:	f7f8 f96b 	bl	8003912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b63c:	2043      	movs	r0, #67	@ 0x43
 800b63e:	f7f8 f984 	bl	800394a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b642:	bf00      	nop
 800b644:	3728      	adds	r7, #40	@ 0x28
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}
 800b64a:	bf00      	nop
 800b64c:	40023800 	.word	0x40023800
 800b650:	40020000 	.word	0x40020000

0800b654 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b662:	4618      	mov	r0, r3
 800b664:	f7fe ff73 	bl	800a54e <USBH_LL_IncTimer>
}
 800b668:	bf00      	nop
 800b66a:	3708      	adds	r7, #8
 800b66c:	46bd      	mov	sp, r7
 800b66e:	bd80      	pop	{r7, pc}

0800b670 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe ffab 	bl	800a5da <USBH_LL_Connect>
}
 800b684:	bf00      	nop
 800b686:	3708      	adds	r7, #8
 800b688:	46bd      	mov	sp, r7
 800b68a:	bd80      	pop	{r7, pc}

0800b68c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b68c:	b580      	push	{r7, lr}
 800b68e:	b082      	sub	sp, #8
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fe ffb4 	bl	800a608 <USBH_LL_Disconnect>
}
 800b6a0:	bf00      	nop
 800b6a2:	3708      	adds	r7, #8
 800b6a4:	46bd      	mov	sp, r7
 800b6a6:	bd80      	pop	{r7, pc}

0800b6a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b083      	sub	sp, #12
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	460b      	mov	r3, r1
 800b6b2:	70fb      	strb	r3, [r7, #3]
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b6b8:	bf00      	nop
 800b6ba:	370c      	adds	r7, #12
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b082      	sub	sp, #8
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b6d2:	4618      	mov	r0, r3
 800b6d4:	f7fe ff65 	bl	800a5a2 <USBH_LL_PortEnabled>
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b082      	sub	sp, #8
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe ff65 	bl	800a5be <USBH_LL_PortDisabled>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b70a:	2b01      	cmp	r3, #1
 800b70c:	d12a      	bne.n	800b764 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b70e:	4a18      	ldr	r2, [pc, #96]	@ (800b770 <USBH_LL_Init+0x74>)
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	4a15      	ldr	r2, [pc, #84]	@ (800b770 <USBH_LL_Init+0x74>)
 800b71a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b71e:	4b14      	ldr	r3, [pc, #80]	@ (800b770 <USBH_LL_Init+0x74>)
 800b720:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b724:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b726:	4b12      	ldr	r3, [pc, #72]	@ (800b770 <USBH_LL_Init+0x74>)
 800b728:	2208      	movs	r2, #8
 800b72a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b72c:	4b10      	ldr	r3, [pc, #64]	@ (800b770 <USBH_LL_Init+0x74>)
 800b72e:	2201      	movs	r2, #1
 800b730:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b732:	4b0f      	ldr	r3, [pc, #60]	@ (800b770 <USBH_LL_Init+0x74>)
 800b734:	2200      	movs	r2, #0
 800b736:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b738:	4b0d      	ldr	r3, [pc, #52]	@ (800b770 <USBH_LL_Init+0x74>)
 800b73a:	2202      	movs	r2, #2
 800b73c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b73e:	4b0c      	ldr	r3, [pc, #48]	@ (800b770 <USBH_LL_Init+0x74>)
 800b740:	2200      	movs	r2, #0
 800b742:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b744:	480a      	ldr	r0, [pc, #40]	@ (800b770 <USBH_LL_Init+0x74>)
 800b746:	f7f8 fad0 	bl	8003cea <HAL_HCD_Init>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b750:	f7f6 f984 	bl	8001a5c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b754:	4806      	ldr	r0, [pc, #24]	@ (800b770 <USBH_LL_Init+0x74>)
 800b756:	f7f8 ff31 	bl	80045bc <HAL_HCD_GetCurrentFrame>
 800b75a:	4603      	mov	r3, r0
 800b75c:	4619      	mov	r1, r3
 800b75e:	6878      	ldr	r0, [r7, #4]
 800b760:	f7fe fee6 	bl	800a530 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b764:	2300      	movs	r3, #0
}
 800b766:	4618      	mov	r0, r3
 800b768:	3708      	adds	r7, #8
 800b76a:	46bd      	mov	sp, r7
 800b76c:	bd80      	pop	{r7, pc}
 800b76e:	bf00      	nop
 800b770:	200005d4 	.word	0x200005d4

0800b774 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b774:	b580      	push	{r7, lr}
 800b776:	b084      	sub	sp, #16
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b77c:	2300      	movs	r3, #0
 800b77e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b780:	2300      	movs	r3, #0
 800b782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b78a:	4618      	mov	r0, r3
 800b78c:	f7f8 fe9e 	bl	80044cc <HAL_HCD_Start>
 800b790:	4603      	mov	r3, r0
 800b792:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	4618      	mov	r0, r3
 800b798:	f000 f95e 	bl	800ba58 <USBH_Get_USB_Status>
 800b79c:	4603      	mov	r3, r0
 800b79e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7a2:	4618      	mov	r0, r3
 800b7a4:	3710      	adds	r7, #16
 800b7a6:	46bd      	mov	sp, r7
 800b7a8:	bd80      	pop	{r7, pc}

0800b7aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b7aa:	b580      	push	{r7, lr}
 800b7ac:	b084      	sub	sp, #16
 800b7ae:	af00      	add	r7, sp, #0
 800b7b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b7b6:	2300      	movs	r3, #0
 800b7b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f7f8 fea6 	bl	8004512 <HAL_HCD_Stop>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b7ca:	7bfb      	ldrb	r3, [r7, #15]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 f943 	bl	800ba58 <USBH_Get_USB_Status>
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3710      	adds	r7, #16
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	bd80      	pop	{r7, pc}

0800b7e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b084      	sub	sp, #16
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b7e8:	2301      	movs	r3, #1
 800b7ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f7f8 fef0 	bl	80045d8 <HAL_HCD_GetCurrentSpeed>
 800b7f8:	4603      	mov	r3, r0
 800b7fa:	2b02      	cmp	r3, #2
 800b7fc:	d00c      	beq.n	800b818 <USBH_LL_GetSpeed+0x38>
 800b7fe:	2b02      	cmp	r3, #2
 800b800:	d80d      	bhi.n	800b81e <USBH_LL_GetSpeed+0x3e>
 800b802:	2b00      	cmp	r3, #0
 800b804:	d002      	beq.n	800b80c <USBH_LL_GetSpeed+0x2c>
 800b806:	2b01      	cmp	r3, #1
 800b808:	d003      	beq.n	800b812 <USBH_LL_GetSpeed+0x32>
 800b80a:	e008      	b.n	800b81e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b80c:	2300      	movs	r3, #0
 800b80e:	73fb      	strb	r3, [r7, #15]
    break;
 800b810:	e008      	b.n	800b824 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b812:	2301      	movs	r3, #1
 800b814:	73fb      	strb	r3, [r7, #15]
    break;
 800b816:	e005      	b.n	800b824 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b818:	2302      	movs	r3, #2
 800b81a:	73fb      	strb	r3, [r7, #15]
    break;
 800b81c:	e002      	b.n	800b824 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b81e:	2301      	movs	r3, #1
 800b820:	73fb      	strb	r3, [r7, #15]
    break;
 800b822:	bf00      	nop
  }
  return  speed;
 800b824:	7bfb      	ldrb	r3, [r7, #15]
}
 800b826:	4618      	mov	r0, r3
 800b828:	3710      	adds	r7, #16
 800b82a:	46bd      	mov	sp, r7
 800b82c:	bd80      	pop	{r7, pc}

0800b82e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b82e:	b580      	push	{r7, lr}
 800b830:	b084      	sub	sp, #16
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b836:	2300      	movs	r3, #0
 800b838:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b83a:	2300      	movs	r3, #0
 800b83c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b844:	4618      	mov	r0, r3
 800b846:	f7f8 fe81 	bl	800454c <HAL_HCD_ResetPort>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b84e:	7bfb      	ldrb	r3, [r7, #15]
 800b850:	4618      	mov	r0, r3
 800b852:	f000 f901 	bl	800ba58 <USBH_Get_USB_Status>
 800b856:	4603      	mov	r3, r0
 800b858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b85c:	4618      	mov	r0, r3
 800b85e:	3710      	adds	r7, #16
 800b860:	46bd      	mov	sp, r7
 800b862:	bd80      	pop	{r7, pc}

0800b864 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b082      	sub	sp, #8
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	460b      	mov	r3, r1
 800b86e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b876:	78fa      	ldrb	r2, [r7, #3]
 800b878:	4611      	mov	r1, r2
 800b87a:	4618      	mov	r0, r3
 800b87c:	f7f8 fe89 	bl	8004592 <HAL_HCD_HC_GetXferCount>
 800b880:	4603      	mov	r3, r0
}
 800b882:	4618      	mov	r0, r3
 800b884:	3708      	adds	r7, #8
 800b886:	46bd      	mov	sp, r7
 800b888:	bd80      	pop	{r7, pc}

0800b88a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b88a:	b590      	push	{r4, r7, lr}
 800b88c:	b089      	sub	sp, #36	@ 0x24
 800b88e:	af04      	add	r7, sp, #16
 800b890:	6078      	str	r0, [r7, #4]
 800b892:	4608      	mov	r0, r1
 800b894:	4611      	mov	r1, r2
 800b896:	461a      	mov	r2, r3
 800b898:	4603      	mov	r3, r0
 800b89a:	70fb      	strb	r3, [r7, #3]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70bb      	strb	r3, [r7, #2]
 800b8a0:	4613      	mov	r3, r2
 800b8a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b8b2:	787c      	ldrb	r4, [r7, #1]
 800b8b4:	78ba      	ldrb	r2, [r7, #2]
 800b8b6:	78f9      	ldrb	r1, [r7, #3]
 800b8b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b8ba:	9302      	str	r3, [sp, #8]
 800b8bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b8c0:	9301      	str	r3, [sp, #4]
 800b8c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8c6:	9300      	str	r3, [sp, #0]
 800b8c8:	4623      	mov	r3, r4
 800b8ca:	f7f8 fa75 	bl	8003db8 <HAL_HCD_HC_Init>
 800b8ce:	4603      	mov	r3, r0
 800b8d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b8d2:	7bfb      	ldrb	r3, [r7, #15]
 800b8d4:	4618      	mov	r0, r3
 800b8d6:	f000 f8bf 	bl	800ba58 <USBH_Get_USB_Status>
 800b8da:	4603      	mov	r3, r0
 800b8dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd90      	pop	{r4, r7, pc}

0800b8e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b084      	sub	sp, #16
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	6078      	str	r0, [r7, #4]
 800b8f0:	460b      	mov	r3, r1
 800b8f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b902:	78fa      	ldrb	r2, [r7, #3]
 800b904:	4611      	mov	r1, r2
 800b906:	4618      	mov	r0, r3
 800b908:	f7f8 fb0e 	bl	8003f28 <HAL_HCD_HC_Halt>
 800b90c:	4603      	mov	r3, r0
 800b90e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b910:	7bfb      	ldrb	r3, [r7, #15]
 800b912:	4618      	mov	r0, r3
 800b914:	f000 f8a0 	bl	800ba58 <USBH_Get_USB_Status>
 800b918:	4603      	mov	r3, r0
 800b91a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b91c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3710      	adds	r7, #16
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}

0800b926 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b926:	b590      	push	{r4, r7, lr}
 800b928:	b089      	sub	sp, #36	@ 0x24
 800b92a:	af04      	add	r7, sp, #16
 800b92c:	6078      	str	r0, [r7, #4]
 800b92e:	4608      	mov	r0, r1
 800b930:	4611      	mov	r1, r2
 800b932:	461a      	mov	r2, r3
 800b934:	4603      	mov	r3, r0
 800b936:	70fb      	strb	r3, [r7, #3]
 800b938:	460b      	mov	r3, r1
 800b93a:	70bb      	strb	r3, [r7, #2]
 800b93c:	4613      	mov	r3, r2
 800b93e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b940:	2300      	movs	r3, #0
 800b942:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b944:	2300      	movs	r3, #0
 800b946:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b94e:	787c      	ldrb	r4, [r7, #1]
 800b950:	78ba      	ldrb	r2, [r7, #2]
 800b952:	78f9      	ldrb	r1, [r7, #3]
 800b954:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b958:	9303      	str	r3, [sp, #12]
 800b95a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b95c:	9302      	str	r3, [sp, #8]
 800b95e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b960:	9301      	str	r3, [sp, #4]
 800b962:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b966:	9300      	str	r3, [sp, #0]
 800b968:	4623      	mov	r3, r4
 800b96a:	f7f8 fb01 	bl	8003f70 <HAL_HCD_HC_SubmitRequest>
 800b96e:	4603      	mov	r3, r0
 800b970:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b972:	7bfb      	ldrb	r3, [r7, #15]
 800b974:	4618      	mov	r0, r3
 800b976:	f000 f86f 	bl	800ba58 <USBH_Get_USB_Status>
 800b97a:	4603      	mov	r3, r0
 800b97c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b97e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	bd90      	pop	{r4, r7, pc}

0800b988 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	460b      	mov	r3, r1
 800b992:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b99a:	78fa      	ldrb	r2, [r7, #3]
 800b99c:	4611      	mov	r1, r2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7f8 fde2 	bl	8004568 <HAL_HCD_HC_GetURBState>
 800b9a4:	4603      	mov	r3, r0
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	3708      	adds	r7, #8
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	bd80      	pop	{r7, pc}

0800b9ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b9ae:	b580      	push	{r7, lr}
 800b9b0:	b082      	sub	sp, #8
 800b9b2:	af00      	add	r7, sp, #0
 800b9b4:	6078      	str	r0, [r7, #4]
 800b9b6:	460b      	mov	r3, r1
 800b9b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d103      	bne.n	800b9cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b9c4:	78fb      	ldrb	r3, [r7, #3]
 800b9c6:	4618      	mov	r0, r3
 800b9c8:	f000 f872 	bl	800bab0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b9cc:	20c8      	movs	r0, #200	@ 0xc8
 800b9ce:	f7f7 fea1 	bl	8003714 <HAL_Delay>
  return USBH_OK;
 800b9d2:	2300      	movs	r3, #0
}
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	3708      	adds	r7, #8
 800b9d8:	46bd      	mov	sp, r7
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	460b      	mov	r3, r1
 800b9e6:	70fb      	strb	r3, [r7, #3]
 800b9e8:	4613      	mov	r3, r2
 800b9ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b9f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b9f4:	78fa      	ldrb	r2, [r7, #3]
 800b9f6:	68f9      	ldr	r1, [r7, #12]
 800b9f8:	4613      	mov	r3, r2
 800b9fa:	011b      	lsls	r3, r3, #4
 800b9fc:	1a9b      	subs	r3, r3, r2
 800b9fe:	009b      	lsls	r3, r3, #2
 800ba00:	440b      	add	r3, r1
 800ba02:	3317      	adds	r3, #23
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00a      	beq.n	800ba20 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ba0a:	78fa      	ldrb	r2, [r7, #3]
 800ba0c:	68f9      	ldr	r1, [r7, #12]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	011b      	lsls	r3, r3, #4
 800ba12:	1a9b      	subs	r3, r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	440b      	add	r3, r1
 800ba18:	333c      	adds	r3, #60	@ 0x3c
 800ba1a:	78ba      	ldrb	r2, [r7, #2]
 800ba1c:	701a      	strb	r2, [r3, #0]
 800ba1e:	e009      	b.n	800ba34 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800ba20:	78fa      	ldrb	r2, [r7, #3]
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	4613      	mov	r3, r2
 800ba26:	011b      	lsls	r3, r3, #4
 800ba28:	1a9b      	subs	r3, r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	333d      	adds	r3, #61	@ 0x3d
 800ba30:	78ba      	ldrb	r2, [r7, #2]
 800ba32:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800ba34:	2300      	movs	r3, #0
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3714      	adds	r7, #20
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba40:	4770      	bx	lr

0800ba42 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b082      	sub	sp, #8
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f7f7 fe62 	bl	8003714 <HAL_Delay>
}
 800ba50:	bf00      	nop
 800ba52:	3708      	adds	r7, #8
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	4603      	mov	r3, r0
 800ba60:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ba62:	2300      	movs	r3, #0
 800ba64:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba66:	79fb      	ldrb	r3, [r7, #7]
 800ba68:	2b03      	cmp	r3, #3
 800ba6a:	d817      	bhi.n	800ba9c <USBH_Get_USB_Status+0x44>
 800ba6c:	a201      	add	r2, pc, #4	@ (adr r2, 800ba74 <USBH_Get_USB_Status+0x1c>)
 800ba6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba72:	bf00      	nop
 800ba74:	0800ba85 	.word	0x0800ba85
 800ba78:	0800ba8b 	.word	0x0800ba8b
 800ba7c:	0800ba91 	.word	0x0800ba91
 800ba80:	0800ba97 	.word	0x0800ba97
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800ba84:	2300      	movs	r3, #0
 800ba86:	73fb      	strb	r3, [r7, #15]
    break;
 800ba88:	e00b      	b.n	800baa2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800ba8a:	2302      	movs	r3, #2
 800ba8c:	73fb      	strb	r3, [r7, #15]
    break;
 800ba8e:	e008      	b.n	800baa2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800ba90:	2301      	movs	r3, #1
 800ba92:	73fb      	strb	r3, [r7, #15]
    break;
 800ba94:	e005      	b.n	800baa2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800ba96:	2302      	movs	r3, #2
 800ba98:	73fb      	strb	r3, [r7, #15]
    break;
 800ba9a:	e002      	b.n	800baa2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800ba9c:	2302      	movs	r3, #2
 800ba9e:	73fb      	strb	r3, [r7, #15]
    break;
 800baa0:	bf00      	nop
  }
  return usb_status;
 800baa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3714      	adds	r7, #20
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr

0800bab0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b084      	sub	sp, #16
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800baba:	79fb      	ldrb	r3, [r7, #7]
 800babc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800babe:	79fb      	ldrb	r3, [r7, #7]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d102      	bne.n	800baca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800bac4:	2300      	movs	r3, #0
 800bac6:	73fb      	strb	r3, [r7, #15]
 800bac8:	e001      	b.n	800bace <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800baca:	2301      	movs	r3, #1
 800bacc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800bace:	7bfb      	ldrb	r3, [r7, #15]
 800bad0:	461a      	mov	r2, r3
 800bad2:	2101      	movs	r1, #1
 800bad4:	4803      	ldr	r0, [pc, #12]	@ (800bae4 <MX_DriverVbusFS+0x34>)
 800bad6:	f7f8 f8ef 	bl	8003cb8 <HAL_GPIO_WritePin>
}
 800bada:	bf00      	nop
 800badc:	3710      	adds	r7, #16
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	40020800 	.word	0x40020800

0800bae8 <malloc>:
 800bae8:	4b02      	ldr	r3, [pc, #8]	@ (800baf4 <malloc+0xc>)
 800baea:	4601      	mov	r1, r0
 800baec:	6818      	ldr	r0, [r3, #0]
 800baee:	f000 b82d 	b.w	800bb4c <_malloc_r>
 800baf2:	bf00      	nop
 800baf4:	20000038 	.word	0x20000038

0800baf8 <free>:
 800baf8:	4b02      	ldr	r3, [pc, #8]	@ (800bb04 <free+0xc>)
 800bafa:	4601      	mov	r1, r0
 800bafc:	6818      	ldr	r0, [r3, #0]
 800bafe:	f000 bc21 	b.w	800c344 <_free_r>
 800bb02:	bf00      	nop
 800bb04:	20000038 	.word	0x20000038

0800bb08 <sbrk_aligned>:
 800bb08:	b570      	push	{r4, r5, r6, lr}
 800bb0a:	4e0f      	ldr	r6, [pc, #60]	@ (800bb48 <sbrk_aligned+0x40>)
 800bb0c:	460c      	mov	r4, r1
 800bb0e:	6831      	ldr	r1, [r6, #0]
 800bb10:	4605      	mov	r5, r0
 800bb12:	b911      	cbnz	r1, 800bb1a <sbrk_aligned+0x12>
 800bb14:	f000 fbb8 	bl	800c288 <_sbrk_r>
 800bb18:	6030      	str	r0, [r6, #0]
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	4628      	mov	r0, r5
 800bb1e:	f000 fbb3 	bl	800c288 <_sbrk_r>
 800bb22:	1c43      	adds	r3, r0, #1
 800bb24:	d103      	bne.n	800bb2e <sbrk_aligned+0x26>
 800bb26:	f04f 34ff 	mov.w	r4, #4294967295
 800bb2a:	4620      	mov	r0, r4
 800bb2c:	bd70      	pop	{r4, r5, r6, pc}
 800bb2e:	1cc4      	adds	r4, r0, #3
 800bb30:	f024 0403 	bic.w	r4, r4, #3
 800bb34:	42a0      	cmp	r0, r4
 800bb36:	d0f8      	beq.n	800bb2a <sbrk_aligned+0x22>
 800bb38:	1a21      	subs	r1, r4, r0
 800bb3a:	4628      	mov	r0, r5
 800bb3c:	f000 fba4 	bl	800c288 <_sbrk_r>
 800bb40:	3001      	adds	r0, #1
 800bb42:	d1f2      	bne.n	800bb2a <sbrk_aligned+0x22>
 800bb44:	e7ef      	b.n	800bb26 <sbrk_aligned+0x1e>
 800bb46:	bf00      	nop
 800bb48:	200009b4 	.word	0x200009b4

0800bb4c <_malloc_r>:
 800bb4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb50:	1ccd      	adds	r5, r1, #3
 800bb52:	f025 0503 	bic.w	r5, r5, #3
 800bb56:	3508      	adds	r5, #8
 800bb58:	2d0c      	cmp	r5, #12
 800bb5a:	bf38      	it	cc
 800bb5c:	250c      	movcc	r5, #12
 800bb5e:	2d00      	cmp	r5, #0
 800bb60:	4606      	mov	r6, r0
 800bb62:	db01      	blt.n	800bb68 <_malloc_r+0x1c>
 800bb64:	42a9      	cmp	r1, r5
 800bb66:	d904      	bls.n	800bb72 <_malloc_r+0x26>
 800bb68:	230c      	movs	r3, #12
 800bb6a:	6033      	str	r3, [r6, #0]
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bc48 <_malloc_r+0xfc>
 800bb76:	f000 f869 	bl	800bc4c <__malloc_lock>
 800bb7a:	f8d8 3000 	ldr.w	r3, [r8]
 800bb7e:	461c      	mov	r4, r3
 800bb80:	bb44      	cbnz	r4, 800bbd4 <_malloc_r+0x88>
 800bb82:	4629      	mov	r1, r5
 800bb84:	4630      	mov	r0, r6
 800bb86:	f7ff ffbf 	bl	800bb08 <sbrk_aligned>
 800bb8a:	1c43      	adds	r3, r0, #1
 800bb8c:	4604      	mov	r4, r0
 800bb8e:	d158      	bne.n	800bc42 <_malloc_r+0xf6>
 800bb90:	f8d8 4000 	ldr.w	r4, [r8]
 800bb94:	4627      	mov	r7, r4
 800bb96:	2f00      	cmp	r7, #0
 800bb98:	d143      	bne.n	800bc22 <_malloc_r+0xd6>
 800bb9a:	2c00      	cmp	r4, #0
 800bb9c:	d04b      	beq.n	800bc36 <_malloc_r+0xea>
 800bb9e:	6823      	ldr	r3, [r4, #0]
 800bba0:	4639      	mov	r1, r7
 800bba2:	4630      	mov	r0, r6
 800bba4:	eb04 0903 	add.w	r9, r4, r3
 800bba8:	f000 fb6e 	bl	800c288 <_sbrk_r>
 800bbac:	4581      	cmp	r9, r0
 800bbae:	d142      	bne.n	800bc36 <_malloc_r+0xea>
 800bbb0:	6821      	ldr	r1, [r4, #0]
 800bbb2:	1a6d      	subs	r5, r5, r1
 800bbb4:	4629      	mov	r1, r5
 800bbb6:	4630      	mov	r0, r6
 800bbb8:	f7ff ffa6 	bl	800bb08 <sbrk_aligned>
 800bbbc:	3001      	adds	r0, #1
 800bbbe:	d03a      	beq.n	800bc36 <_malloc_r+0xea>
 800bbc0:	6823      	ldr	r3, [r4, #0]
 800bbc2:	442b      	add	r3, r5
 800bbc4:	6023      	str	r3, [r4, #0]
 800bbc6:	f8d8 3000 	ldr.w	r3, [r8]
 800bbca:	685a      	ldr	r2, [r3, #4]
 800bbcc:	bb62      	cbnz	r2, 800bc28 <_malloc_r+0xdc>
 800bbce:	f8c8 7000 	str.w	r7, [r8]
 800bbd2:	e00f      	b.n	800bbf4 <_malloc_r+0xa8>
 800bbd4:	6822      	ldr	r2, [r4, #0]
 800bbd6:	1b52      	subs	r2, r2, r5
 800bbd8:	d420      	bmi.n	800bc1c <_malloc_r+0xd0>
 800bbda:	2a0b      	cmp	r2, #11
 800bbdc:	d917      	bls.n	800bc0e <_malloc_r+0xc2>
 800bbde:	1961      	adds	r1, r4, r5
 800bbe0:	42a3      	cmp	r3, r4
 800bbe2:	6025      	str	r5, [r4, #0]
 800bbe4:	bf18      	it	ne
 800bbe6:	6059      	strne	r1, [r3, #4]
 800bbe8:	6863      	ldr	r3, [r4, #4]
 800bbea:	bf08      	it	eq
 800bbec:	f8c8 1000 	streq.w	r1, [r8]
 800bbf0:	5162      	str	r2, [r4, r5]
 800bbf2:	604b      	str	r3, [r1, #4]
 800bbf4:	4630      	mov	r0, r6
 800bbf6:	f000 f82f 	bl	800bc58 <__malloc_unlock>
 800bbfa:	f104 000b 	add.w	r0, r4, #11
 800bbfe:	1d23      	adds	r3, r4, #4
 800bc00:	f020 0007 	bic.w	r0, r0, #7
 800bc04:	1ac2      	subs	r2, r0, r3
 800bc06:	bf1c      	itt	ne
 800bc08:	1a1b      	subne	r3, r3, r0
 800bc0a:	50a3      	strne	r3, [r4, r2]
 800bc0c:	e7af      	b.n	800bb6e <_malloc_r+0x22>
 800bc0e:	6862      	ldr	r2, [r4, #4]
 800bc10:	42a3      	cmp	r3, r4
 800bc12:	bf0c      	ite	eq
 800bc14:	f8c8 2000 	streq.w	r2, [r8]
 800bc18:	605a      	strne	r2, [r3, #4]
 800bc1a:	e7eb      	b.n	800bbf4 <_malloc_r+0xa8>
 800bc1c:	4623      	mov	r3, r4
 800bc1e:	6864      	ldr	r4, [r4, #4]
 800bc20:	e7ae      	b.n	800bb80 <_malloc_r+0x34>
 800bc22:	463c      	mov	r4, r7
 800bc24:	687f      	ldr	r7, [r7, #4]
 800bc26:	e7b6      	b.n	800bb96 <_malloc_r+0x4a>
 800bc28:	461a      	mov	r2, r3
 800bc2a:	685b      	ldr	r3, [r3, #4]
 800bc2c:	42a3      	cmp	r3, r4
 800bc2e:	d1fb      	bne.n	800bc28 <_malloc_r+0xdc>
 800bc30:	2300      	movs	r3, #0
 800bc32:	6053      	str	r3, [r2, #4]
 800bc34:	e7de      	b.n	800bbf4 <_malloc_r+0xa8>
 800bc36:	230c      	movs	r3, #12
 800bc38:	6033      	str	r3, [r6, #0]
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	f000 f80c 	bl	800bc58 <__malloc_unlock>
 800bc40:	e794      	b.n	800bb6c <_malloc_r+0x20>
 800bc42:	6005      	str	r5, [r0, #0]
 800bc44:	e7d6      	b.n	800bbf4 <_malloc_r+0xa8>
 800bc46:	bf00      	nop
 800bc48:	200009b8 	.word	0x200009b8

0800bc4c <__malloc_lock>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	@ (800bc54 <__malloc_lock+0x8>)
 800bc4e:	f000 bb68 	b.w	800c322 <__retarget_lock_acquire_recursive>
 800bc52:	bf00      	nop
 800bc54:	20000afc 	.word	0x20000afc

0800bc58 <__malloc_unlock>:
 800bc58:	4801      	ldr	r0, [pc, #4]	@ (800bc60 <__malloc_unlock+0x8>)
 800bc5a:	f000 bb63 	b.w	800c324 <__retarget_lock_release_recursive>
 800bc5e:	bf00      	nop
 800bc60:	20000afc 	.word	0x20000afc

0800bc64 <std>:
 800bc64:	2300      	movs	r3, #0
 800bc66:	b510      	push	{r4, lr}
 800bc68:	4604      	mov	r4, r0
 800bc6a:	e9c0 3300 	strd	r3, r3, [r0]
 800bc6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc72:	6083      	str	r3, [r0, #8]
 800bc74:	8181      	strh	r1, [r0, #12]
 800bc76:	6643      	str	r3, [r0, #100]	@ 0x64
 800bc78:	81c2      	strh	r2, [r0, #14]
 800bc7a:	6183      	str	r3, [r0, #24]
 800bc7c:	4619      	mov	r1, r3
 800bc7e:	2208      	movs	r2, #8
 800bc80:	305c      	adds	r0, #92	@ 0x5c
 800bc82:	f000 fac5 	bl	800c210 <memset>
 800bc86:	4b0d      	ldr	r3, [pc, #52]	@ (800bcbc <std+0x58>)
 800bc88:	6263      	str	r3, [r4, #36]	@ 0x24
 800bc8a:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc0 <std+0x5c>)
 800bc8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800bc8e:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc4 <std+0x60>)
 800bc90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800bc92:	4b0d      	ldr	r3, [pc, #52]	@ (800bcc8 <std+0x64>)
 800bc94:	6323      	str	r3, [r4, #48]	@ 0x30
 800bc96:	4b0d      	ldr	r3, [pc, #52]	@ (800bccc <std+0x68>)
 800bc98:	6224      	str	r4, [r4, #32]
 800bc9a:	429c      	cmp	r4, r3
 800bc9c:	d006      	beq.n	800bcac <std+0x48>
 800bc9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800bca2:	4294      	cmp	r4, r2
 800bca4:	d002      	beq.n	800bcac <std+0x48>
 800bca6:	33d0      	adds	r3, #208	@ 0xd0
 800bca8:	429c      	cmp	r4, r3
 800bcaa:	d105      	bne.n	800bcb8 <std+0x54>
 800bcac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800bcb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcb4:	f000 bb34 	b.w	800c320 <__retarget_lock_init_recursive>
 800bcb8:	bd10      	pop	{r4, pc}
 800bcba:	bf00      	nop
 800bcbc:	0800c041 	.word	0x0800c041
 800bcc0:	0800c063 	.word	0x0800c063
 800bcc4:	0800c09b 	.word	0x0800c09b
 800bcc8:	0800c0bf 	.word	0x0800c0bf
 800bccc:	200009bc 	.word	0x200009bc

0800bcd0 <stdio_exit_handler>:
 800bcd0:	4a02      	ldr	r2, [pc, #8]	@ (800bcdc <stdio_exit_handler+0xc>)
 800bcd2:	4903      	ldr	r1, [pc, #12]	@ (800bce0 <stdio_exit_handler+0x10>)
 800bcd4:	4803      	ldr	r0, [pc, #12]	@ (800bce4 <stdio_exit_handler+0x14>)
 800bcd6:	f000 b869 	b.w	800bdac <_fwalk_sglue>
 800bcda:	bf00      	nop
 800bcdc:	2000002c 	.word	0x2000002c
 800bce0:	0800ca7d 	.word	0x0800ca7d
 800bce4:	2000003c 	.word	0x2000003c

0800bce8 <cleanup_stdio>:
 800bce8:	6841      	ldr	r1, [r0, #4]
 800bcea:	4b0c      	ldr	r3, [pc, #48]	@ (800bd1c <cleanup_stdio+0x34>)
 800bcec:	4299      	cmp	r1, r3
 800bcee:	b510      	push	{r4, lr}
 800bcf0:	4604      	mov	r4, r0
 800bcf2:	d001      	beq.n	800bcf8 <cleanup_stdio+0x10>
 800bcf4:	f000 fec2 	bl	800ca7c <_fflush_r>
 800bcf8:	68a1      	ldr	r1, [r4, #8]
 800bcfa:	4b09      	ldr	r3, [pc, #36]	@ (800bd20 <cleanup_stdio+0x38>)
 800bcfc:	4299      	cmp	r1, r3
 800bcfe:	d002      	beq.n	800bd06 <cleanup_stdio+0x1e>
 800bd00:	4620      	mov	r0, r4
 800bd02:	f000 febb 	bl	800ca7c <_fflush_r>
 800bd06:	68e1      	ldr	r1, [r4, #12]
 800bd08:	4b06      	ldr	r3, [pc, #24]	@ (800bd24 <cleanup_stdio+0x3c>)
 800bd0a:	4299      	cmp	r1, r3
 800bd0c:	d004      	beq.n	800bd18 <cleanup_stdio+0x30>
 800bd0e:	4620      	mov	r0, r4
 800bd10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd14:	f000 beb2 	b.w	800ca7c <_fflush_r>
 800bd18:	bd10      	pop	{r4, pc}
 800bd1a:	bf00      	nop
 800bd1c:	200009bc 	.word	0x200009bc
 800bd20:	20000a24 	.word	0x20000a24
 800bd24:	20000a8c 	.word	0x20000a8c

0800bd28 <global_stdio_init.part.0>:
 800bd28:	b510      	push	{r4, lr}
 800bd2a:	4b0b      	ldr	r3, [pc, #44]	@ (800bd58 <global_stdio_init.part.0+0x30>)
 800bd2c:	4c0b      	ldr	r4, [pc, #44]	@ (800bd5c <global_stdio_init.part.0+0x34>)
 800bd2e:	4a0c      	ldr	r2, [pc, #48]	@ (800bd60 <global_stdio_init.part.0+0x38>)
 800bd30:	601a      	str	r2, [r3, #0]
 800bd32:	4620      	mov	r0, r4
 800bd34:	2200      	movs	r2, #0
 800bd36:	2104      	movs	r1, #4
 800bd38:	f7ff ff94 	bl	800bc64 <std>
 800bd3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800bd40:	2201      	movs	r2, #1
 800bd42:	2109      	movs	r1, #9
 800bd44:	f7ff ff8e 	bl	800bc64 <std>
 800bd48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800bd4c:	2202      	movs	r2, #2
 800bd4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd52:	2112      	movs	r1, #18
 800bd54:	f7ff bf86 	b.w	800bc64 <std>
 800bd58:	20000af4 	.word	0x20000af4
 800bd5c:	200009bc 	.word	0x200009bc
 800bd60:	0800bcd1 	.word	0x0800bcd1

0800bd64 <__sfp_lock_acquire>:
 800bd64:	4801      	ldr	r0, [pc, #4]	@ (800bd6c <__sfp_lock_acquire+0x8>)
 800bd66:	f000 badc 	b.w	800c322 <__retarget_lock_acquire_recursive>
 800bd6a:	bf00      	nop
 800bd6c:	20000afd 	.word	0x20000afd

0800bd70 <__sfp_lock_release>:
 800bd70:	4801      	ldr	r0, [pc, #4]	@ (800bd78 <__sfp_lock_release+0x8>)
 800bd72:	f000 bad7 	b.w	800c324 <__retarget_lock_release_recursive>
 800bd76:	bf00      	nop
 800bd78:	20000afd 	.word	0x20000afd

0800bd7c <__sinit>:
 800bd7c:	b510      	push	{r4, lr}
 800bd7e:	4604      	mov	r4, r0
 800bd80:	f7ff fff0 	bl	800bd64 <__sfp_lock_acquire>
 800bd84:	6a23      	ldr	r3, [r4, #32]
 800bd86:	b11b      	cbz	r3, 800bd90 <__sinit+0x14>
 800bd88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd8c:	f7ff bff0 	b.w	800bd70 <__sfp_lock_release>
 800bd90:	4b04      	ldr	r3, [pc, #16]	@ (800bda4 <__sinit+0x28>)
 800bd92:	6223      	str	r3, [r4, #32]
 800bd94:	4b04      	ldr	r3, [pc, #16]	@ (800bda8 <__sinit+0x2c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d1f5      	bne.n	800bd88 <__sinit+0xc>
 800bd9c:	f7ff ffc4 	bl	800bd28 <global_stdio_init.part.0>
 800bda0:	e7f2      	b.n	800bd88 <__sinit+0xc>
 800bda2:	bf00      	nop
 800bda4:	0800bce9 	.word	0x0800bce9
 800bda8:	20000af4 	.word	0x20000af4

0800bdac <_fwalk_sglue>:
 800bdac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdb0:	4607      	mov	r7, r0
 800bdb2:	4688      	mov	r8, r1
 800bdb4:	4614      	mov	r4, r2
 800bdb6:	2600      	movs	r6, #0
 800bdb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bdbc:	f1b9 0901 	subs.w	r9, r9, #1
 800bdc0:	d505      	bpl.n	800bdce <_fwalk_sglue+0x22>
 800bdc2:	6824      	ldr	r4, [r4, #0]
 800bdc4:	2c00      	cmp	r4, #0
 800bdc6:	d1f7      	bne.n	800bdb8 <_fwalk_sglue+0xc>
 800bdc8:	4630      	mov	r0, r6
 800bdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdce:	89ab      	ldrh	r3, [r5, #12]
 800bdd0:	2b01      	cmp	r3, #1
 800bdd2:	d907      	bls.n	800bde4 <_fwalk_sglue+0x38>
 800bdd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdd8:	3301      	adds	r3, #1
 800bdda:	d003      	beq.n	800bde4 <_fwalk_sglue+0x38>
 800bddc:	4629      	mov	r1, r5
 800bdde:	4638      	mov	r0, r7
 800bde0:	47c0      	blx	r8
 800bde2:	4306      	orrs	r6, r0
 800bde4:	3568      	adds	r5, #104	@ 0x68
 800bde6:	e7e9      	b.n	800bdbc <_fwalk_sglue+0x10>

0800bde8 <iprintf>:
 800bde8:	b40f      	push	{r0, r1, r2, r3}
 800bdea:	b507      	push	{r0, r1, r2, lr}
 800bdec:	4906      	ldr	r1, [pc, #24]	@ (800be08 <iprintf+0x20>)
 800bdee:	ab04      	add	r3, sp, #16
 800bdf0:	6808      	ldr	r0, [r1, #0]
 800bdf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdf6:	6881      	ldr	r1, [r0, #8]
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	f000 fb17 	bl	800c42c <_vfiprintf_r>
 800bdfe:	b003      	add	sp, #12
 800be00:	f85d eb04 	ldr.w	lr, [sp], #4
 800be04:	b004      	add	sp, #16
 800be06:	4770      	bx	lr
 800be08:	20000038 	.word	0x20000038

0800be0c <putchar>:
 800be0c:	4b02      	ldr	r3, [pc, #8]	@ (800be18 <putchar+0xc>)
 800be0e:	4601      	mov	r1, r0
 800be10:	6818      	ldr	r0, [r3, #0]
 800be12:	6882      	ldr	r2, [r0, #8]
 800be14:	f000 bebc 	b.w	800cb90 <_putc_r>
 800be18:	20000038 	.word	0x20000038

0800be1c <_puts_r>:
 800be1c:	6a03      	ldr	r3, [r0, #32]
 800be1e:	b570      	push	{r4, r5, r6, lr}
 800be20:	6884      	ldr	r4, [r0, #8]
 800be22:	4605      	mov	r5, r0
 800be24:	460e      	mov	r6, r1
 800be26:	b90b      	cbnz	r3, 800be2c <_puts_r+0x10>
 800be28:	f7ff ffa8 	bl	800bd7c <__sinit>
 800be2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be2e:	07db      	lsls	r3, r3, #31
 800be30:	d405      	bmi.n	800be3e <_puts_r+0x22>
 800be32:	89a3      	ldrh	r3, [r4, #12]
 800be34:	0598      	lsls	r0, r3, #22
 800be36:	d402      	bmi.n	800be3e <_puts_r+0x22>
 800be38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be3a:	f000 fa72 	bl	800c322 <__retarget_lock_acquire_recursive>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	0719      	lsls	r1, r3, #28
 800be42:	d502      	bpl.n	800be4a <_puts_r+0x2e>
 800be44:	6923      	ldr	r3, [r4, #16]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d135      	bne.n	800beb6 <_puts_r+0x9a>
 800be4a:	4621      	mov	r1, r4
 800be4c:	4628      	mov	r0, r5
 800be4e:	f000 f979 	bl	800c144 <__swsetup_r>
 800be52:	b380      	cbz	r0, 800beb6 <_puts_r+0x9a>
 800be54:	f04f 35ff 	mov.w	r5, #4294967295
 800be58:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be5a:	07da      	lsls	r2, r3, #31
 800be5c:	d405      	bmi.n	800be6a <_puts_r+0x4e>
 800be5e:	89a3      	ldrh	r3, [r4, #12]
 800be60:	059b      	lsls	r3, r3, #22
 800be62:	d402      	bmi.n	800be6a <_puts_r+0x4e>
 800be64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be66:	f000 fa5d 	bl	800c324 <__retarget_lock_release_recursive>
 800be6a:	4628      	mov	r0, r5
 800be6c:	bd70      	pop	{r4, r5, r6, pc}
 800be6e:	2b00      	cmp	r3, #0
 800be70:	da04      	bge.n	800be7c <_puts_r+0x60>
 800be72:	69a2      	ldr	r2, [r4, #24]
 800be74:	429a      	cmp	r2, r3
 800be76:	dc17      	bgt.n	800bea8 <_puts_r+0x8c>
 800be78:	290a      	cmp	r1, #10
 800be7a:	d015      	beq.n	800bea8 <_puts_r+0x8c>
 800be7c:	6823      	ldr	r3, [r4, #0]
 800be7e:	1c5a      	adds	r2, r3, #1
 800be80:	6022      	str	r2, [r4, #0]
 800be82:	7019      	strb	r1, [r3, #0]
 800be84:	68a3      	ldr	r3, [r4, #8]
 800be86:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800be8a:	3b01      	subs	r3, #1
 800be8c:	60a3      	str	r3, [r4, #8]
 800be8e:	2900      	cmp	r1, #0
 800be90:	d1ed      	bne.n	800be6e <_puts_r+0x52>
 800be92:	2b00      	cmp	r3, #0
 800be94:	da11      	bge.n	800beba <_puts_r+0x9e>
 800be96:	4622      	mov	r2, r4
 800be98:	210a      	movs	r1, #10
 800be9a:	4628      	mov	r0, r5
 800be9c:	f000 f913 	bl	800c0c6 <__swbuf_r>
 800bea0:	3001      	adds	r0, #1
 800bea2:	d0d7      	beq.n	800be54 <_puts_r+0x38>
 800bea4:	250a      	movs	r5, #10
 800bea6:	e7d7      	b.n	800be58 <_puts_r+0x3c>
 800bea8:	4622      	mov	r2, r4
 800beaa:	4628      	mov	r0, r5
 800beac:	f000 f90b 	bl	800c0c6 <__swbuf_r>
 800beb0:	3001      	adds	r0, #1
 800beb2:	d1e7      	bne.n	800be84 <_puts_r+0x68>
 800beb4:	e7ce      	b.n	800be54 <_puts_r+0x38>
 800beb6:	3e01      	subs	r6, #1
 800beb8:	e7e4      	b.n	800be84 <_puts_r+0x68>
 800beba:	6823      	ldr	r3, [r4, #0]
 800bebc:	1c5a      	adds	r2, r3, #1
 800bebe:	6022      	str	r2, [r4, #0]
 800bec0:	220a      	movs	r2, #10
 800bec2:	701a      	strb	r2, [r3, #0]
 800bec4:	e7ee      	b.n	800bea4 <_puts_r+0x88>
	...

0800bec8 <puts>:
 800bec8:	4b02      	ldr	r3, [pc, #8]	@ (800bed4 <puts+0xc>)
 800beca:	4601      	mov	r1, r0
 800becc:	6818      	ldr	r0, [r3, #0]
 800bece:	f7ff bfa5 	b.w	800be1c <_puts_r>
 800bed2:	bf00      	nop
 800bed4:	20000038 	.word	0x20000038

0800bed8 <setvbuf>:
 800bed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bedc:	461d      	mov	r5, r3
 800bede:	4b57      	ldr	r3, [pc, #348]	@ (800c03c <setvbuf+0x164>)
 800bee0:	681f      	ldr	r7, [r3, #0]
 800bee2:	4604      	mov	r4, r0
 800bee4:	460e      	mov	r6, r1
 800bee6:	4690      	mov	r8, r2
 800bee8:	b127      	cbz	r7, 800bef4 <setvbuf+0x1c>
 800beea:	6a3b      	ldr	r3, [r7, #32]
 800beec:	b913      	cbnz	r3, 800bef4 <setvbuf+0x1c>
 800beee:	4638      	mov	r0, r7
 800bef0:	f7ff ff44 	bl	800bd7c <__sinit>
 800bef4:	f1b8 0f02 	cmp.w	r8, #2
 800bef8:	d006      	beq.n	800bf08 <setvbuf+0x30>
 800befa:	f1b8 0f01 	cmp.w	r8, #1
 800befe:	f200 809a 	bhi.w	800c036 <setvbuf+0x15e>
 800bf02:	2d00      	cmp	r5, #0
 800bf04:	f2c0 8097 	blt.w	800c036 <setvbuf+0x15e>
 800bf08:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bf0a:	07d9      	lsls	r1, r3, #31
 800bf0c:	d405      	bmi.n	800bf1a <setvbuf+0x42>
 800bf0e:	89a3      	ldrh	r3, [r4, #12]
 800bf10:	059a      	lsls	r2, r3, #22
 800bf12:	d402      	bmi.n	800bf1a <setvbuf+0x42>
 800bf14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bf16:	f000 fa04 	bl	800c322 <__retarget_lock_acquire_recursive>
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	4638      	mov	r0, r7
 800bf1e:	f000 fdad 	bl	800ca7c <_fflush_r>
 800bf22:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf24:	b141      	cbz	r1, 800bf38 <setvbuf+0x60>
 800bf26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf2a:	4299      	cmp	r1, r3
 800bf2c:	d002      	beq.n	800bf34 <setvbuf+0x5c>
 800bf2e:	4638      	mov	r0, r7
 800bf30:	f000 fa08 	bl	800c344 <_free_r>
 800bf34:	2300      	movs	r3, #0
 800bf36:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf38:	2300      	movs	r3, #0
 800bf3a:	61a3      	str	r3, [r4, #24]
 800bf3c:	6063      	str	r3, [r4, #4]
 800bf3e:	89a3      	ldrh	r3, [r4, #12]
 800bf40:	061b      	lsls	r3, r3, #24
 800bf42:	d503      	bpl.n	800bf4c <setvbuf+0x74>
 800bf44:	6921      	ldr	r1, [r4, #16]
 800bf46:	4638      	mov	r0, r7
 800bf48:	f000 f9fc 	bl	800c344 <_free_r>
 800bf4c:	89a3      	ldrh	r3, [r4, #12]
 800bf4e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800bf52:	f023 0303 	bic.w	r3, r3, #3
 800bf56:	f1b8 0f02 	cmp.w	r8, #2
 800bf5a:	81a3      	strh	r3, [r4, #12]
 800bf5c:	d061      	beq.n	800c022 <setvbuf+0x14a>
 800bf5e:	ab01      	add	r3, sp, #4
 800bf60:	466a      	mov	r2, sp
 800bf62:	4621      	mov	r1, r4
 800bf64:	4638      	mov	r0, r7
 800bf66:	f000 fdb1 	bl	800cacc <__swhatbuf_r>
 800bf6a:	89a3      	ldrh	r3, [r4, #12]
 800bf6c:	4318      	orrs	r0, r3
 800bf6e:	81a0      	strh	r0, [r4, #12]
 800bf70:	bb2d      	cbnz	r5, 800bfbe <setvbuf+0xe6>
 800bf72:	9d00      	ldr	r5, [sp, #0]
 800bf74:	4628      	mov	r0, r5
 800bf76:	f7ff fdb7 	bl	800bae8 <malloc>
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	2800      	cmp	r0, #0
 800bf7e:	d152      	bne.n	800c026 <setvbuf+0x14e>
 800bf80:	f8dd 9000 	ldr.w	r9, [sp]
 800bf84:	45a9      	cmp	r9, r5
 800bf86:	d140      	bne.n	800c00a <setvbuf+0x132>
 800bf88:	f04f 35ff 	mov.w	r5, #4294967295
 800bf8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf90:	f043 0202 	orr.w	r2, r3, #2
 800bf94:	81a2      	strh	r2, [r4, #12]
 800bf96:	2200      	movs	r2, #0
 800bf98:	60a2      	str	r2, [r4, #8]
 800bf9a:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800bf9e:	6022      	str	r2, [r4, #0]
 800bfa0:	6122      	str	r2, [r4, #16]
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	6162      	str	r2, [r4, #20]
 800bfa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bfa8:	07d6      	lsls	r6, r2, #31
 800bfaa:	d404      	bmi.n	800bfb6 <setvbuf+0xde>
 800bfac:	0598      	lsls	r0, r3, #22
 800bfae:	d402      	bmi.n	800bfb6 <setvbuf+0xde>
 800bfb0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bfb2:	f000 f9b7 	bl	800c324 <__retarget_lock_release_recursive>
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	b003      	add	sp, #12
 800bfba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bfbe:	2e00      	cmp	r6, #0
 800bfc0:	d0d8      	beq.n	800bf74 <setvbuf+0x9c>
 800bfc2:	6a3b      	ldr	r3, [r7, #32]
 800bfc4:	b913      	cbnz	r3, 800bfcc <setvbuf+0xf4>
 800bfc6:	4638      	mov	r0, r7
 800bfc8:	f7ff fed8 	bl	800bd7c <__sinit>
 800bfcc:	f1b8 0f01 	cmp.w	r8, #1
 800bfd0:	bf08      	it	eq
 800bfd2:	89a3      	ldrheq	r3, [r4, #12]
 800bfd4:	6026      	str	r6, [r4, #0]
 800bfd6:	bf04      	itt	eq
 800bfd8:	f043 0301 	orreq.w	r3, r3, #1
 800bfdc:	81a3      	strheq	r3, [r4, #12]
 800bfde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfe2:	f013 0208 	ands.w	r2, r3, #8
 800bfe6:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800bfea:	d01e      	beq.n	800c02a <setvbuf+0x152>
 800bfec:	07d9      	lsls	r1, r3, #31
 800bfee:	bf41      	itttt	mi
 800bff0:	2200      	movmi	r2, #0
 800bff2:	426d      	negmi	r5, r5
 800bff4:	60a2      	strmi	r2, [r4, #8]
 800bff6:	61a5      	strmi	r5, [r4, #24]
 800bff8:	bf58      	it	pl
 800bffa:	60a5      	strpl	r5, [r4, #8]
 800bffc:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bffe:	07d2      	lsls	r2, r2, #31
 800c000:	d401      	bmi.n	800c006 <setvbuf+0x12e>
 800c002:	059b      	lsls	r3, r3, #22
 800c004:	d513      	bpl.n	800c02e <setvbuf+0x156>
 800c006:	2500      	movs	r5, #0
 800c008:	e7d5      	b.n	800bfb6 <setvbuf+0xde>
 800c00a:	4648      	mov	r0, r9
 800c00c:	f7ff fd6c 	bl	800bae8 <malloc>
 800c010:	4606      	mov	r6, r0
 800c012:	2800      	cmp	r0, #0
 800c014:	d0b8      	beq.n	800bf88 <setvbuf+0xb0>
 800c016:	89a3      	ldrh	r3, [r4, #12]
 800c018:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c01c:	81a3      	strh	r3, [r4, #12]
 800c01e:	464d      	mov	r5, r9
 800c020:	e7cf      	b.n	800bfc2 <setvbuf+0xea>
 800c022:	2500      	movs	r5, #0
 800c024:	e7b2      	b.n	800bf8c <setvbuf+0xb4>
 800c026:	46a9      	mov	r9, r5
 800c028:	e7f5      	b.n	800c016 <setvbuf+0x13e>
 800c02a:	60a2      	str	r2, [r4, #8]
 800c02c:	e7e6      	b.n	800bffc <setvbuf+0x124>
 800c02e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c030:	f000 f978 	bl	800c324 <__retarget_lock_release_recursive>
 800c034:	e7e7      	b.n	800c006 <setvbuf+0x12e>
 800c036:	f04f 35ff 	mov.w	r5, #4294967295
 800c03a:	e7bc      	b.n	800bfb6 <setvbuf+0xde>
 800c03c:	20000038 	.word	0x20000038

0800c040 <__sread>:
 800c040:	b510      	push	{r4, lr}
 800c042:	460c      	mov	r4, r1
 800c044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c048:	f000 f90c 	bl	800c264 <_read_r>
 800c04c:	2800      	cmp	r0, #0
 800c04e:	bfab      	itete	ge
 800c050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c052:	89a3      	ldrhlt	r3, [r4, #12]
 800c054:	181b      	addge	r3, r3, r0
 800c056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c05a:	bfac      	ite	ge
 800c05c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c05e:	81a3      	strhlt	r3, [r4, #12]
 800c060:	bd10      	pop	{r4, pc}

0800c062 <__swrite>:
 800c062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c066:	461f      	mov	r7, r3
 800c068:	898b      	ldrh	r3, [r1, #12]
 800c06a:	05db      	lsls	r3, r3, #23
 800c06c:	4605      	mov	r5, r0
 800c06e:	460c      	mov	r4, r1
 800c070:	4616      	mov	r6, r2
 800c072:	d505      	bpl.n	800c080 <__swrite+0x1e>
 800c074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c078:	2302      	movs	r3, #2
 800c07a:	2200      	movs	r2, #0
 800c07c:	f000 f8e0 	bl	800c240 <_lseek_r>
 800c080:	89a3      	ldrh	r3, [r4, #12]
 800c082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c08a:	81a3      	strh	r3, [r4, #12]
 800c08c:	4632      	mov	r2, r6
 800c08e:	463b      	mov	r3, r7
 800c090:	4628      	mov	r0, r5
 800c092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c096:	f000 b907 	b.w	800c2a8 <_write_r>

0800c09a <__sseek>:
 800c09a:	b510      	push	{r4, lr}
 800c09c:	460c      	mov	r4, r1
 800c09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a2:	f000 f8cd 	bl	800c240 <_lseek_r>
 800c0a6:	1c43      	adds	r3, r0, #1
 800c0a8:	89a3      	ldrh	r3, [r4, #12]
 800c0aa:	bf15      	itete	ne
 800c0ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0b6:	81a3      	strheq	r3, [r4, #12]
 800c0b8:	bf18      	it	ne
 800c0ba:	81a3      	strhne	r3, [r4, #12]
 800c0bc:	bd10      	pop	{r4, pc}

0800c0be <__sclose>:
 800c0be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c2:	f000 b8ad 	b.w	800c220 <_close_r>

0800c0c6 <__swbuf_r>:
 800c0c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c8:	460e      	mov	r6, r1
 800c0ca:	4614      	mov	r4, r2
 800c0cc:	4605      	mov	r5, r0
 800c0ce:	b118      	cbz	r0, 800c0d8 <__swbuf_r+0x12>
 800c0d0:	6a03      	ldr	r3, [r0, #32]
 800c0d2:	b90b      	cbnz	r3, 800c0d8 <__swbuf_r+0x12>
 800c0d4:	f7ff fe52 	bl	800bd7c <__sinit>
 800c0d8:	69a3      	ldr	r3, [r4, #24]
 800c0da:	60a3      	str	r3, [r4, #8]
 800c0dc:	89a3      	ldrh	r3, [r4, #12]
 800c0de:	071a      	lsls	r2, r3, #28
 800c0e0:	d501      	bpl.n	800c0e6 <__swbuf_r+0x20>
 800c0e2:	6923      	ldr	r3, [r4, #16]
 800c0e4:	b943      	cbnz	r3, 800c0f8 <__swbuf_r+0x32>
 800c0e6:	4621      	mov	r1, r4
 800c0e8:	4628      	mov	r0, r5
 800c0ea:	f000 f82b 	bl	800c144 <__swsetup_r>
 800c0ee:	b118      	cbz	r0, 800c0f8 <__swbuf_r+0x32>
 800c0f0:	f04f 37ff 	mov.w	r7, #4294967295
 800c0f4:	4638      	mov	r0, r7
 800c0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	6922      	ldr	r2, [r4, #16]
 800c0fc:	1a98      	subs	r0, r3, r2
 800c0fe:	6963      	ldr	r3, [r4, #20]
 800c100:	b2f6      	uxtb	r6, r6
 800c102:	4283      	cmp	r3, r0
 800c104:	4637      	mov	r7, r6
 800c106:	dc05      	bgt.n	800c114 <__swbuf_r+0x4e>
 800c108:	4621      	mov	r1, r4
 800c10a:	4628      	mov	r0, r5
 800c10c:	f000 fcb6 	bl	800ca7c <_fflush_r>
 800c110:	2800      	cmp	r0, #0
 800c112:	d1ed      	bne.n	800c0f0 <__swbuf_r+0x2a>
 800c114:	68a3      	ldr	r3, [r4, #8]
 800c116:	3b01      	subs	r3, #1
 800c118:	60a3      	str	r3, [r4, #8]
 800c11a:	6823      	ldr	r3, [r4, #0]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	6022      	str	r2, [r4, #0]
 800c120:	701e      	strb	r6, [r3, #0]
 800c122:	6962      	ldr	r2, [r4, #20]
 800c124:	1c43      	adds	r3, r0, #1
 800c126:	429a      	cmp	r2, r3
 800c128:	d004      	beq.n	800c134 <__swbuf_r+0x6e>
 800c12a:	89a3      	ldrh	r3, [r4, #12]
 800c12c:	07db      	lsls	r3, r3, #31
 800c12e:	d5e1      	bpl.n	800c0f4 <__swbuf_r+0x2e>
 800c130:	2e0a      	cmp	r6, #10
 800c132:	d1df      	bne.n	800c0f4 <__swbuf_r+0x2e>
 800c134:	4621      	mov	r1, r4
 800c136:	4628      	mov	r0, r5
 800c138:	f000 fca0 	bl	800ca7c <_fflush_r>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d0d9      	beq.n	800c0f4 <__swbuf_r+0x2e>
 800c140:	e7d6      	b.n	800c0f0 <__swbuf_r+0x2a>
	...

0800c144 <__swsetup_r>:
 800c144:	b538      	push	{r3, r4, r5, lr}
 800c146:	4b29      	ldr	r3, [pc, #164]	@ (800c1ec <__swsetup_r+0xa8>)
 800c148:	4605      	mov	r5, r0
 800c14a:	6818      	ldr	r0, [r3, #0]
 800c14c:	460c      	mov	r4, r1
 800c14e:	b118      	cbz	r0, 800c158 <__swsetup_r+0x14>
 800c150:	6a03      	ldr	r3, [r0, #32]
 800c152:	b90b      	cbnz	r3, 800c158 <__swsetup_r+0x14>
 800c154:	f7ff fe12 	bl	800bd7c <__sinit>
 800c158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c15c:	0719      	lsls	r1, r3, #28
 800c15e:	d422      	bmi.n	800c1a6 <__swsetup_r+0x62>
 800c160:	06da      	lsls	r2, r3, #27
 800c162:	d407      	bmi.n	800c174 <__swsetup_r+0x30>
 800c164:	2209      	movs	r2, #9
 800c166:	602a      	str	r2, [r5, #0]
 800c168:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c16c:	81a3      	strh	r3, [r4, #12]
 800c16e:	f04f 30ff 	mov.w	r0, #4294967295
 800c172:	e033      	b.n	800c1dc <__swsetup_r+0x98>
 800c174:	0758      	lsls	r0, r3, #29
 800c176:	d512      	bpl.n	800c19e <__swsetup_r+0x5a>
 800c178:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c17a:	b141      	cbz	r1, 800c18e <__swsetup_r+0x4a>
 800c17c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c180:	4299      	cmp	r1, r3
 800c182:	d002      	beq.n	800c18a <__swsetup_r+0x46>
 800c184:	4628      	mov	r0, r5
 800c186:	f000 f8dd 	bl	800c344 <_free_r>
 800c18a:	2300      	movs	r3, #0
 800c18c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c18e:	89a3      	ldrh	r3, [r4, #12]
 800c190:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c194:	81a3      	strh	r3, [r4, #12]
 800c196:	2300      	movs	r3, #0
 800c198:	6063      	str	r3, [r4, #4]
 800c19a:	6923      	ldr	r3, [r4, #16]
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	89a3      	ldrh	r3, [r4, #12]
 800c1a0:	f043 0308 	orr.w	r3, r3, #8
 800c1a4:	81a3      	strh	r3, [r4, #12]
 800c1a6:	6923      	ldr	r3, [r4, #16]
 800c1a8:	b94b      	cbnz	r3, 800c1be <__swsetup_r+0x7a>
 800c1aa:	89a3      	ldrh	r3, [r4, #12]
 800c1ac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1b4:	d003      	beq.n	800c1be <__swsetup_r+0x7a>
 800c1b6:	4621      	mov	r1, r4
 800c1b8:	4628      	mov	r0, r5
 800c1ba:	f000 fcad 	bl	800cb18 <__smakebuf_r>
 800c1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1c2:	f013 0201 	ands.w	r2, r3, #1
 800c1c6:	d00a      	beq.n	800c1de <__swsetup_r+0x9a>
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	60a2      	str	r2, [r4, #8]
 800c1cc:	6962      	ldr	r2, [r4, #20]
 800c1ce:	4252      	negs	r2, r2
 800c1d0:	61a2      	str	r2, [r4, #24]
 800c1d2:	6922      	ldr	r2, [r4, #16]
 800c1d4:	b942      	cbnz	r2, 800c1e8 <__swsetup_r+0xa4>
 800c1d6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1da:	d1c5      	bne.n	800c168 <__swsetup_r+0x24>
 800c1dc:	bd38      	pop	{r3, r4, r5, pc}
 800c1de:	0799      	lsls	r1, r3, #30
 800c1e0:	bf58      	it	pl
 800c1e2:	6962      	ldrpl	r2, [r4, #20]
 800c1e4:	60a2      	str	r2, [r4, #8]
 800c1e6:	e7f4      	b.n	800c1d2 <__swsetup_r+0x8e>
 800c1e8:	2000      	movs	r0, #0
 800c1ea:	e7f7      	b.n	800c1dc <__swsetup_r+0x98>
 800c1ec:	20000038 	.word	0x20000038

0800c1f0 <memcmp>:
 800c1f0:	b510      	push	{r4, lr}
 800c1f2:	3901      	subs	r1, #1
 800c1f4:	4402      	add	r2, r0
 800c1f6:	4290      	cmp	r0, r2
 800c1f8:	d101      	bne.n	800c1fe <memcmp+0xe>
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	e005      	b.n	800c20a <memcmp+0x1a>
 800c1fe:	7803      	ldrb	r3, [r0, #0]
 800c200:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c204:	42a3      	cmp	r3, r4
 800c206:	d001      	beq.n	800c20c <memcmp+0x1c>
 800c208:	1b18      	subs	r0, r3, r4
 800c20a:	bd10      	pop	{r4, pc}
 800c20c:	3001      	adds	r0, #1
 800c20e:	e7f2      	b.n	800c1f6 <memcmp+0x6>

0800c210 <memset>:
 800c210:	4402      	add	r2, r0
 800c212:	4603      	mov	r3, r0
 800c214:	4293      	cmp	r3, r2
 800c216:	d100      	bne.n	800c21a <memset+0xa>
 800c218:	4770      	bx	lr
 800c21a:	f803 1b01 	strb.w	r1, [r3], #1
 800c21e:	e7f9      	b.n	800c214 <memset+0x4>

0800c220 <_close_r>:
 800c220:	b538      	push	{r3, r4, r5, lr}
 800c222:	4d06      	ldr	r5, [pc, #24]	@ (800c23c <_close_r+0x1c>)
 800c224:	2300      	movs	r3, #0
 800c226:	4604      	mov	r4, r0
 800c228:	4608      	mov	r0, r1
 800c22a:	602b      	str	r3, [r5, #0]
 800c22c:	f7f7 f959 	bl	80034e2 <_close>
 800c230:	1c43      	adds	r3, r0, #1
 800c232:	d102      	bne.n	800c23a <_close_r+0x1a>
 800c234:	682b      	ldr	r3, [r5, #0]
 800c236:	b103      	cbz	r3, 800c23a <_close_r+0x1a>
 800c238:	6023      	str	r3, [r4, #0]
 800c23a:	bd38      	pop	{r3, r4, r5, pc}
 800c23c:	20000af8 	.word	0x20000af8

0800c240 <_lseek_r>:
 800c240:	b538      	push	{r3, r4, r5, lr}
 800c242:	4d07      	ldr	r5, [pc, #28]	@ (800c260 <_lseek_r+0x20>)
 800c244:	4604      	mov	r4, r0
 800c246:	4608      	mov	r0, r1
 800c248:	4611      	mov	r1, r2
 800c24a:	2200      	movs	r2, #0
 800c24c:	602a      	str	r2, [r5, #0]
 800c24e:	461a      	mov	r2, r3
 800c250:	f7f7 f96e 	bl	8003530 <_lseek>
 800c254:	1c43      	adds	r3, r0, #1
 800c256:	d102      	bne.n	800c25e <_lseek_r+0x1e>
 800c258:	682b      	ldr	r3, [r5, #0]
 800c25a:	b103      	cbz	r3, 800c25e <_lseek_r+0x1e>
 800c25c:	6023      	str	r3, [r4, #0]
 800c25e:	bd38      	pop	{r3, r4, r5, pc}
 800c260:	20000af8 	.word	0x20000af8

0800c264 <_read_r>:
 800c264:	b538      	push	{r3, r4, r5, lr}
 800c266:	4d07      	ldr	r5, [pc, #28]	@ (800c284 <_read_r+0x20>)
 800c268:	4604      	mov	r4, r0
 800c26a:	4608      	mov	r0, r1
 800c26c:	4611      	mov	r1, r2
 800c26e:	2200      	movs	r2, #0
 800c270:	602a      	str	r2, [r5, #0]
 800c272:	461a      	mov	r2, r3
 800c274:	f7f7 f918 	bl	80034a8 <_read>
 800c278:	1c43      	adds	r3, r0, #1
 800c27a:	d102      	bne.n	800c282 <_read_r+0x1e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	b103      	cbz	r3, 800c282 <_read_r+0x1e>
 800c280:	6023      	str	r3, [r4, #0]
 800c282:	bd38      	pop	{r3, r4, r5, pc}
 800c284:	20000af8 	.word	0x20000af8

0800c288 <_sbrk_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d06      	ldr	r5, [pc, #24]	@ (800c2a4 <_sbrk_r+0x1c>)
 800c28c:	2300      	movs	r3, #0
 800c28e:	4604      	mov	r4, r0
 800c290:	4608      	mov	r0, r1
 800c292:	602b      	str	r3, [r5, #0]
 800c294:	f7f7 f95a 	bl	800354c <_sbrk>
 800c298:	1c43      	adds	r3, r0, #1
 800c29a:	d102      	bne.n	800c2a2 <_sbrk_r+0x1a>
 800c29c:	682b      	ldr	r3, [r5, #0]
 800c29e:	b103      	cbz	r3, 800c2a2 <_sbrk_r+0x1a>
 800c2a0:	6023      	str	r3, [r4, #0]
 800c2a2:	bd38      	pop	{r3, r4, r5, pc}
 800c2a4:	20000af8 	.word	0x20000af8

0800c2a8 <_write_r>:
 800c2a8:	b538      	push	{r3, r4, r5, lr}
 800c2aa:	4d07      	ldr	r5, [pc, #28]	@ (800c2c8 <_write_r+0x20>)
 800c2ac:	4604      	mov	r4, r0
 800c2ae:	4608      	mov	r0, r1
 800c2b0:	4611      	mov	r1, r2
 800c2b2:	2200      	movs	r2, #0
 800c2b4:	602a      	str	r2, [r5, #0]
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	f7f4 fba6 	bl	8000a08 <_write>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_write_r+0x1e>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_write_r+0x1e>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	20000af8 	.word	0x20000af8

0800c2cc <__errno>:
 800c2cc:	4b01      	ldr	r3, [pc, #4]	@ (800c2d4 <__errno+0x8>)
 800c2ce:	6818      	ldr	r0, [r3, #0]
 800c2d0:	4770      	bx	lr
 800c2d2:	bf00      	nop
 800c2d4:	20000038 	.word	0x20000038

0800c2d8 <__libc_init_array>:
 800c2d8:	b570      	push	{r4, r5, r6, lr}
 800c2da:	4d0d      	ldr	r5, [pc, #52]	@ (800c310 <__libc_init_array+0x38>)
 800c2dc:	4c0d      	ldr	r4, [pc, #52]	@ (800c314 <__libc_init_array+0x3c>)
 800c2de:	1b64      	subs	r4, r4, r5
 800c2e0:	10a4      	asrs	r4, r4, #2
 800c2e2:	2600      	movs	r6, #0
 800c2e4:	42a6      	cmp	r6, r4
 800c2e6:	d109      	bne.n	800c2fc <__libc_init_array+0x24>
 800c2e8:	4d0b      	ldr	r5, [pc, #44]	@ (800c318 <__libc_init_array+0x40>)
 800c2ea:	4c0c      	ldr	r4, [pc, #48]	@ (800c31c <__libc_init_array+0x44>)
 800c2ec:	f000 fca6 	bl	800cc3c <_init>
 800c2f0:	1b64      	subs	r4, r4, r5
 800c2f2:	10a4      	asrs	r4, r4, #2
 800c2f4:	2600      	movs	r6, #0
 800c2f6:	42a6      	cmp	r6, r4
 800c2f8:	d105      	bne.n	800c306 <__libc_init_array+0x2e>
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c300:	4798      	blx	r3
 800c302:	3601      	adds	r6, #1
 800c304:	e7ee      	b.n	800c2e4 <__libc_init_array+0xc>
 800c306:	f855 3b04 	ldr.w	r3, [r5], #4
 800c30a:	4798      	blx	r3
 800c30c:	3601      	adds	r6, #1
 800c30e:	e7f2      	b.n	800c2f6 <__libc_init_array+0x1e>
 800c310:	0800d3ac 	.word	0x0800d3ac
 800c314:	0800d3ac 	.word	0x0800d3ac
 800c318:	0800d3ac 	.word	0x0800d3ac
 800c31c:	0800d3b0 	.word	0x0800d3b0

0800c320 <__retarget_lock_init_recursive>:
 800c320:	4770      	bx	lr

0800c322 <__retarget_lock_acquire_recursive>:
 800c322:	4770      	bx	lr

0800c324 <__retarget_lock_release_recursive>:
 800c324:	4770      	bx	lr

0800c326 <memcpy>:
 800c326:	440a      	add	r2, r1
 800c328:	4291      	cmp	r1, r2
 800c32a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c32e:	d100      	bne.n	800c332 <memcpy+0xc>
 800c330:	4770      	bx	lr
 800c332:	b510      	push	{r4, lr}
 800c334:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c338:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c33c:	4291      	cmp	r1, r2
 800c33e:	d1f9      	bne.n	800c334 <memcpy+0xe>
 800c340:	bd10      	pop	{r4, pc}
	...

0800c344 <_free_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4605      	mov	r5, r0
 800c348:	2900      	cmp	r1, #0
 800c34a:	d041      	beq.n	800c3d0 <_free_r+0x8c>
 800c34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c350:	1f0c      	subs	r4, r1, #4
 800c352:	2b00      	cmp	r3, #0
 800c354:	bfb8      	it	lt
 800c356:	18e4      	addlt	r4, r4, r3
 800c358:	f7ff fc78 	bl	800bc4c <__malloc_lock>
 800c35c:	4a1d      	ldr	r2, [pc, #116]	@ (800c3d4 <_free_r+0x90>)
 800c35e:	6813      	ldr	r3, [r2, #0]
 800c360:	b933      	cbnz	r3, 800c370 <_free_r+0x2c>
 800c362:	6063      	str	r3, [r4, #4]
 800c364:	6014      	str	r4, [r2, #0]
 800c366:	4628      	mov	r0, r5
 800c368:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c36c:	f7ff bc74 	b.w	800bc58 <__malloc_unlock>
 800c370:	42a3      	cmp	r3, r4
 800c372:	d908      	bls.n	800c386 <_free_r+0x42>
 800c374:	6820      	ldr	r0, [r4, #0]
 800c376:	1821      	adds	r1, r4, r0
 800c378:	428b      	cmp	r3, r1
 800c37a:	bf01      	itttt	eq
 800c37c:	6819      	ldreq	r1, [r3, #0]
 800c37e:	685b      	ldreq	r3, [r3, #4]
 800c380:	1809      	addeq	r1, r1, r0
 800c382:	6021      	streq	r1, [r4, #0]
 800c384:	e7ed      	b.n	800c362 <_free_r+0x1e>
 800c386:	461a      	mov	r2, r3
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	b10b      	cbz	r3, 800c390 <_free_r+0x4c>
 800c38c:	42a3      	cmp	r3, r4
 800c38e:	d9fa      	bls.n	800c386 <_free_r+0x42>
 800c390:	6811      	ldr	r1, [r2, #0]
 800c392:	1850      	adds	r0, r2, r1
 800c394:	42a0      	cmp	r0, r4
 800c396:	d10b      	bne.n	800c3b0 <_free_r+0x6c>
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	4401      	add	r1, r0
 800c39c:	1850      	adds	r0, r2, r1
 800c39e:	4283      	cmp	r3, r0
 800c3a0:	6011      	str	r1, [r2, #0]
 800c3a2:	d1e0      	bne.n	800c366 <_free_r+0x22>
 800c3a4:	6818      	ldr	r0, [r3, #0]
 800c3a6:	685b      	ldr	r3, [r3, #4]
 800c3a8:	6053      	str	r3, [r2, #4]
 800c3aa:	4408      	add	r0, r1
 800c3ac:	6010      	str	r0, [r2, #0]
 800c3ae:	e7da      	b.n	800c366 <_free_r+0x22>
 800c3b0:	d902      	bls.n	800c3b8 <_free_r+0x74>
 800c3b2:	230c      	movs	r3, #12
 800c3b4:	602b      	str	r3, [r5, #0]
 800c3b6:	e7d6      	b.n	800c366 <_free_r+0x22>
 800c3b8:	6820      	ldr	r0, [r4, #0]
 800c3ba:	1821      	adds	r1, r4, r0
 800c3bc:	428b      	cmp	r3, r1
 800c3be:	bf04      	itt	eq
 800c3c0:	6819      	ldreq	r1, [r3, #0]
 800c3c2:	685b      	ldreq	r3, [r3, #4]
 800c3c4:	6063      	str	r3, [r4, #4]
 800c3c6:	bf04      	itt	eq
 800c3c8:	1809      	addeq	r1, r1, r0
 800c3ca:	6021      	streq	r1, [r4, #0]
 800c3cc:	6054      	str	r4, [r2, #4]
 800c3ce:	e7ca      	b.n	800c366 <_free_r+0x22>
 800c3d0:	bd38      	pop	{r3, r4, r5, pc}
 800c3d2:	bf00      	nop
 800c3d4:	200009b8 	.word	0x200009b8

0800c3d8 <__sfputc_r>:
 800c3d8:	6893      	ldr	r3, [r2, #8]
 800c3da:	3b01      	subs	r3, #1
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	b410      	push	{r4}
 800c3e0:	6093      	str	r3, [r2, #8]
 800c3e2:	da08      	bge.n	800c3f6 <__sfputc_r+0x1e>
 800c3e4:	6994      	ldr	r4, [r2, #24]
 800c3e6:	42a3      	cmp	r3, r4
 800c3e8:	db01      	blt.n	800c3ee <__sfputc_r+0x16>
 800c3ea:	290a      	cmp	r1, #10
 800c3ec:	d103      	bne.n	800c3f6 <__sfputc_r+0x1e>
 800c3ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3f2:	f7ff be68 	b.w	800c0c6 <__swbuf_r>
 800c3f6:	6813      	ldr	r3, [r2, #0]
 800c3f8:	1c58      	adds	r0, r3, #1
 800c3fa:	6010      	str	r0, [r2, #0]
 800c3fc:	7019      	strb	r1, [r3, #0]
 800c3fe:	4608      	mov	r0, r1
 800c400:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <__sfputs_r>:
 800c406:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c408:	4606      	mov	r6, r0
 800c40a:	460f      	mov	r7, r1
 800c40c:	4614      	mov	r4, r2
 800c40e:	18d5      	adds	r5, r2, r3
 800c410:	42ac      	cmp	r4, r5
 800c412:	d101      	bne.n	800c418 <__sfputs_r+0x12>
 800c414:	2000      	movs	r0, #0
 800c416:	e007      	b.n	800c428 <__sfputs_r+0x22>
 800c418:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c41c:	463a      	mov	r2, r7
 800c41e:	4630      	mov	r0, r6
 800c420:	f7ff ffda 	bl	800c3d8 <__sfputc_r>
 800c424:	1c43      	adds	r3, r0, #1
 800c426:	d1f3      	bne.n	800c410 <__sfputs_r+0xa>
 800c428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c42c <_vfiprintf_r>:
 800c42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c430:	460d      	mov	r5, r1
 800c432:	b09d      	sub	sp, #116	@ 0x74
 800c434:	4614      	mov	r4, r2
 800c436:	4698      	mov	r8, r3
 800c438:	4606      	mov	r6, r0
 800c43a:	b118      	cbz	r0, 800c444 <_vfiprintf_r+0x18>
 800c43c:	6a03      	ldr	r3, [r0, #32]
 800c43e:	b90b      	cbnz	r3, 800c444 <_vfiprintf_r+0x18>
 800c440:	f7ff fc9c 	bl	800bd7c <__sinit>
 800c444:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c446:	07d9      	lsls	r1, r3, #31
 800c448:	d405      	bmi.n	800c456 <_vfiprintf_r+0x2a>
 800c44a:	89ab      	ldrh	r3, [r5, #12]
 800c44c:	059a      	lsls	r2, r3, #22
 800c44e:	d402      	bmi.n	800c456 <_vfiprintf_r+0x2a>
 800c450:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c452:	f7ff ff66 	bl	800c322 <__retarget_lock_acquire_recursive>
 800c456:	89ab      	ldrh	r3, [r5, #12]
 800c458:	071b      	lsls	r3, r3, #28
 800c45a:	d501      	bpl.n	800c460 <_vfiprintf_r+0x34>
 800c45c:	692b      	ldr	r3, [r5, #16]
 800c45e:	b99b      	cbnz	r3, 800c488 <_vfiprintf_r+0x5c>
 800c460:	4629      	mov	r1, r5
 800c462:	4630      	mov	r0, r6
 800c464:	f7ff fe6e 	bl	800c144 <__swsetup_r>
 800c468:	b170      	cbz	r0, 800c488 <_vfiprintf_r+0x5c>
 800c46a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c46c:	07dc      	lsls	r4, r3, #31
 800c46e:	d504      	bpl.n	800c47a <_vfiprintf_r+0x4e>
 800c470:	f04f 30ff 	mov.w	r0, #4294967295
 800c474:	b01d      	add	sp, #116	@ 0x74
 800c476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47a:	89ab      	ldrh	r3, [r5, #12]
 800c47c:	0598      	lsls	r0, r3, #22
 800c47e:	d4f7      	bmi.n	800c470 <_vfiprintf_r+0x44>
 800c480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c482:	f7ff ff4f 	bl	800c324 <__retarget_lock_release_recursive>
 800c486:	e7f3      	b.n	800c470 <_vfiprintf_r+0x44>
 800c488:	2300      	movs	r3, #0
 800c48a:	9309      	str	r3, [sp, #36]	@ 0x24
 800c48c:	2320      	movs	r3, #32
 800c48e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c492:	f8cd 800c 	str.w	r8, [sp, #12]
 800c496:	2330      	movs	r3, #48	@ 0x30
 800c498:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c648 <_vfiprintf_r+0x21c>
 800c49c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c4a0:	f04f 0901 	mov.w	r9, #1
 800c4a4:	4623      	mov	r3, r4
 800c4a6:	469a      	mov	sl, r3
 800c4a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ac:	b10a      	cbz	r2, 800c4b2 <_vfiprintf_r+0x86>
 800c4ae:	2a25      	cmp	r2, #37	@ 0x25
 800c4b0:	d1f9      	bne.n	800c4a6 <_vfiprintf_r+0x7a>
 800c4b2:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b6:	d00b      	beq.n	800c4d0 <_vfiprintf_r+0xa4>
 800c4b8:	465b      	mov	r3, fp
 800c4ba:	4622      	mov	r2, r4
 800c4bc:	4629      	mov	r1, r5
 800c4be:	4630      	mov	r0, r6
 800c4c0:	f7ff ffa1 	bl	800c406 <__sfputs_r>
 800c4c4:	3001      	adds	r0, #1
 800c4c6:	f000 80a7 	beq.w	800c618 <_vfiprintf_r+0x1ec>
 800c4ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4cc:	445a      	add	r2, fp
 800c4ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800c4d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	f000 809f 	beq.w	800c618 <_vfiprintf_r+0x1ec>
 800c4da:	2300      	movs	r3, #0
 800c4dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4e4:	f10a 0a01 	add.w	sl, sl, #1
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	9307      	str	r3, [sp, #28]
 800c4ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c4f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800c4f2:	4654      	mov	r4, sl
 800c4f4:	2205      	movs	r2, #5
 800c4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4fa:	4853      	ldr	r0, [pc, #332]	@ (800c648 <_vfiprintf_r+0x21c>)
 800c4fc:	f7f3 fe68 	bl	80001d0 <memchr>
 800c500:	9a04      	ldr	r2, [sp, #16]
 800c502:	b9d8      	cbnz	r0, 800c53c <_vfiprintf_r+0x110>
 800c504:	06d1      	lsls	r1, r2, #27
 800c506:	bf44      	itt	mi
 800c508:	2320      	movmi	r3, #32
 800c50a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c50e:	0713      	lsls	r3, r2, #28
 800c510:	bf44      	itt	mi
 800c512:	232b      	movmi	r3, #43	@ 0x2b
 800c514:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c518:	f89a 3000 	ldrb.w	r3, [sl]
 800c51c:	2b2a      	cmp	r3, #42	@ 0x2a
 800c51e:	d015      	beq.n	800c54c <_vfiprintf_r+0x120>
 800c520:	9a07      	ldr	r2, [sp, #28]
 800c522:	4654      	mov	r4, sl
 800c524:	2000      	movs	r0, #0
 800c526:	f04f 0c0a 	mov.w	ip, #10
 800c52a:	4621      	mov	r1, r4
 800c52c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c530:	3b30      	subs	r3, #48	@ 0x30
 800c532:	2b09      	cmp	r3, #9
 800c534:	d94b      	bls.n	800c5ce <_vfiprintf_r+0x1a2>
 800c536:	b1b0      	cbz	r0, 800c566 <_vfiprintf_r+0x13a>
 800c538:	9207      	str	r2, [sp, #28]
 800c53a:	e014      	b.n	800c566 <_vfiprintf_r+0x13a>
 800c53c:	eba0 0308 	sub.w	r3, r0, r8
 800c540:	fa09 f303 	lsl.w	r3, r9, r3
 800c544:	4313      	orrs	r3, r2
 800c546:	9304      	str	r3, [sp, #16]
 800c548:	46a2      	mov	sl, r4
 800c54a:	e7d2      	b.n	800c4f2 <_vfiprintf_r+0xc6>
 800c54c:	9b03      	ldr	r3, [sp, #12]
 800c54e:	1d19      	adds	r1, r3, #4
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	9103      	str	r1, [sp, #12]
 800c554:	2b00      	cmp	r3, #0
 800c556:	bfbb      	ittet	lt
 800c558:	425b      	neglt	r3, r3
 800c55a:	f042 0202 	orrlt.w	r2, r2, #2
 800c55e:	9307      	strge	r3, [sp, #28]
 800c560:	9307      	strlt	r3, [sp, #28]
 800c562:	bfb8      	it	lt
 800c564:	9204      	strlt	r2, [sp, #16]
 800c566:	7823      	ldrb	r3, [r4, #0]
 800c568:	2b2e      	cmp	r3, #46	@ 0x2e
 800c56a:	d10a      	bne.n	800c582 <_vfiprintf_r+0x156>
 800c56c:	7863      	ldrb	r3, [r4, #1]
 800c56e:	2b2a      	cmp	r3, #42	@ 0x2a
 800c570:	d132      	bne.n	800c5d8 <_vfiprintf_r+0x1ac>
 800c572:	9b03      	ldr	r3, [sp, #12]
 800c574:	1d1a      	adds	r2, r3, #4
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	9203      	str	r2, [sp, #12]
 800c57a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c57e:	3402      	adds	r4, #2
 800c580:	9305      	str	r3, [sp, #20]
 800c582:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c658 <_vfiprintf_r+0x22c>
 800c586:	7821      	ldrb	r1, [r4, #0]
 800c588:	2203      	movs	r2, #3
 800c58a:	4650      	mov	r0, sl
 800c58c:	f7f3 fe20 	bl	80001d0 <memchr>
 800c590:	b138      	cbz	r0, 800c5a2 <_vfiprintf_r+0x176>
 800c592:	9b04      	ldr	r3, [sp, #16]
 800c594:	eba0 000a 	sub.w	r0, r0, sl
 800c598:	2240      	movs	r2, #64	@ 0x40
 800c59a:	4082      	lsls	r2, r0
 800c59c:	4313      	orrs	r3, r2
 800c59e:	3401      	adds	r4, #1
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a6:	4829      	ldr	r0, [pc, #164]	@ (800c64c <_vfiprintf_r+0x220>)
 800c5a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c5ac:	2206      	movs	r2, #6
 800c5ae:	f7f3 fe0f 	bl	80001d0 <memchr>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d03f      	beq.n	800c636 <_vfiprintf_r+0x20a>
 800c5b6:	4b26      	ldr	r3, [pc, #152]	@ (800c650 <_vfiprintf_r+0x224>)
 800c5b8:	bb1b      	cbnz	r3, 800c602 <_vfiprintf_r+0x1d6>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	3307      	adds	r3, #7
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	9303      	str	r3, [sp, #12]
 800c5c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5c8:	443b      	add	r3, r7
 800c5ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800c5cc:	e76a      	b.n	800c4a4 <_vfiprintf_r+0x78>
 800c5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	2001      	movs	r0, #1
 800c5d6:	e7a8      	b.n	800c52a <_vfiprintf_r+0xfe>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	3401      	adds	r4, #1
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f04f 0c0a 	mov.w	ip, #10
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ea:	3a30      	subs	r2, #48	@ 0x30
 800c5ec:	2a09      	cmp	r2, #9
 800c5ee:	d903      	bls.n	800c5f8 <_vfiprintf_r+0x1cc>
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0c6      	beq.n	800c582 <_vfiprintf_r+0x156>
 800c5f4:	9105      	str	r1, [sp, #20]
 800c5f6:	e7c4      	b.n	800c582 <_vfiprintf_r+0x156>
 800c5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	2301      	movs	r3, #1
 800c600:	e7f0      	b.n	800c5e4 <_vfiprintf_r+0x1b8>
 800c602:	ab03      	add	r3, sp, #12
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	462a      	mov	r2, r5
 800c608:	4b12      	ldr	r3, [pc, #72]	@ (800c654 <_vfiprintf_r+0x228>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	4630      	mov	r0, r6
 800c60e:	f3af 8000 	nop.w
 800c612:	4607      	mov	r7, r0
 800c614:	1c78      	adds	r0, r7, #1
 800c616:	d1d6      	bne.n	800c5c6 <_vfiprintf_r+0x19a>
 800c618:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c61a:	07d9      	lsls	r1, r3, #31
 800c61c:	d405      	bmi.n	800c62a <_vfiprintf_r+0x1fe>
 800c61e:	89ab      	ldrh	r3, [r5, #12]
 800c620:	059a      	lsls	r2, r3, #22
 800c622:	d402      	bmi.n	800c62a <_vfiprintf_r+0x1fe>
 800c624:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c626:	f7ff fe7d 	bl	800c324 <__retarget_lock_release_recursive>
 800c62a:	89ab      	ldrh	r3, [r5, #12]
 800c62c:	065b      	lsls	r3, r3, #25
 800c62e:	f53f af1f 	bmi.w	800c470 <_vfiprintf_r+0x44>
 800c632:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c634:	e71e      	b.n	800c474 <_vfiprintf_r+0x48>
 800c636:	ab03      	add	r3, sp, #12
 800c638:	9300      	str	r3, [sp, #0]
 800c63a:	462a      	mov	r2, r5
 800c63c:	4b05      	ldr	r3, [pc, #20]	@ (800c654 <_vfiprintf_r+0x228>)
 800c63e:	a904      	add	r1, sp, #16
 800c640:	4630      	mov	r0, r6
 800c642:	f000 f879 	bl	800c738 <_printf_i>
 800c646:	e7e4      	b.n	800c612 <_vfiprintf_r+0x1e6>
 800c648:	0800d370 	.word	0x0800d370
 800c64c:	0800d37a 	.word	0x0800d37a
 800c650:	00000000 	.word	0x00000000
 800c654:	0800c407 	.word	0x0800c407
 800c658:	0800d376 	.word	0x0800d376

0800c65c <_printf_common>:
 800c65c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c660:	4616      	mov	r6, r2
 800c662:	4698      	mov	r8, r3
 800c664:	688a      	ldr	r2, [r1, #8]
 800c666:	690b      	ldr	r3, [r1, #16]
 800c668:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c66c:	4293      	cmp	r3, r2
 800c66e:	bfb8      	it	lt
 800c670:	4613      	movlt	r3, r2
 800c672:	6033      	str	r3, [r6, #0]
 800c674:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c678:	4607      	mov	r7, r0
 800c67a:	460c      	mov	r4, r1
 800c67c:	b10a      	cbz	r2, 800c682 <_printf_common+0x26>
 800c67e:	3301      	adds	r3, #1
 800c680:	6033      	str	r3, [r6, #0]
 800c682:	6823      	ldr	r3, [r4, #0]
 800c684:	0699      	lsls	r1, r3, #26
 800c686:	bf42      	ittt	mi
 800c688:	6833      	ldrmi	r3, [r6, #0]
 800c68a:	3302      	addmi	r3, #2
 800c68c:	6033      	strmi	r3, [r6, #0]
 800c68e:	6825      	ldr	r5, [r4, #0]
 800c690:	f015 0506 	ands.w	r5, r5, #6
 800c694:	d106      	bne.n	800c6a4 <_printf_common+0x48>
 800c696:	f104 0a19 	add.w	sl, r4, #25
 800c69a:	68e3      	ldr	r3, [r4, #12]
 800c69c:	6832      	ldr	r2, [r6, #0]
 800c69e:	1a9b      	subs	r3, r3, r2
 800c6a0:	42ab      	cmp	r3, r5
 800c6a2:	dc26      	bgt.n	800c6f2 <_printf_common+0x96>
 800c6a4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c6a8:	6822      	ldr	r2, [r4, #0]
 800c6aa:	3b00      	subs	r3, #0
 800c6ac:	bf18      	it	ne
 800c6ae:	2301      	movne	r3, #1
 800c6b0:	0692      	lsls	r2, r2, #26
 800c6b2:	d42b      	bmi.n	800c70c <_printf_common+0xb0>
 800c6b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c6b8:	4641      	mov	r1, r8
 800c6ba:	4638      	mov	r0, r7
 800c6bc:	47c8      	blx	r9
 800c6be:	3001      	adds	r0, #1
 800c6c0:	d01e      	beq.n	800c700 <_printf_common+0xa4>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	6922      	ldr	r2, [r4, #16]
 800c6c6:	f003 0306 	and.w	r3, r3, #6
 800c6ca:	2b04      	cmp	r3, #4
 800c6cc:	bf02      	ittt	eq
 800c6ce:	68e5      	ldreq	r5, [r4, #12]
 800c6d0:	6833      	ldreq	r3, [r6, #0]
 800c6d2:	1aed      	subeq	r5, r5, r3
 800c6d4:	68a3      	ldr	r3, [r4, #8]
 800c6d6:	bf0c      	ite	eq
 800c6d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c6dc:	2500      	movne	r5, #0
 800c6de:	4293      	cmp	r3, r2
 800c6e0:	bfc4      	itt	gt
 800c6e2:	1a9b      	subgt	r3, r3, r2
 800c6e4:	18ed      	addgt	r5, r5, r3
 800c6e6:	2600      	movs	r6, #0
 800c6e8:	341a      	adds	r4, #26
 800c6ea:	42b5      	cmp	r5, r6
 800c6ec:	d11a      	bne.n	800c724 <_printf_common+0xc8>
 800c6ee:	2000      	movs	r0, #0
 800c6f0:	e008      	b.n	800c704 <_printf_common+0xa8>
 800c6f2:	2301      	movs	r3, #1
 800c6f4:	4652      	mov	r2, sl
 800c6f6:	4641      	mov	r1, r8
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	47c8      	blx	r9
 800c6fc:	3001      	adds	r0, #1
 800c6fe:	d103      	bne.n	800c708 <_printf_common+0xac>
 800c700:	f04f 30ff 	mov.w	r0, #4294967295
 800c704:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c708:	3501      	adds	r5, #1
 800c70a:	e7c6      	b.n	800c69a <_printf_common+0x3e>
 800c70c:	18e1      	adds	r1, r4, r3
 800c70e:	1c5a      	adds	r2, r3, #1
 800c710:	2030      	movs	r0, #48	@ 0x30
 800c712:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c716:	4422      	add	r2, r4
 800c718:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c71c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c720:	3302      	adds	r3, #2
 800c722:	e7c7      	b.n	800c6b4 <_printf_common+0x58>
 800c724:	2301      	movs	r3, #1
 800c726:	4622      	mov	r2, r4
 800c728:	4641      	mov	r1, r8
 800c72a:	4638      	mov	r0, r7
 800c72c:	47c8      	blx	r9
 800c72e:	3001      	adds	r0, #1
 800c730:	d0e6      	beq.n	800c700 <_printf_common+0xa4>
 800c732:	3601      	adds	r6, #1
 800c734:	e7d9      	b.n	800c6ea <_printf_common+0x8e>
	...

0800c738 <_printf_i>:
 800c738:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c73c:	7e0f      	ldrb	r7, [r1, #24]
 800c73e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c740:	2f78      	cmp	r7, #120	@ 0x78
 800c742:	4691      	mov	r9, r2
 800c744:	4680      	mov	r8, r0
 800c746:	460c      	mov	r4, r1
 800c748:	469a      	mov	sl, r3
 800c74a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c74e:	d807      	bhi.n	800c760 <_printf_i+0x28>
 800c750:	2f62      	cmp	r7, #98	@ 0x62
 800c752:	d80a      	bhi.n	800c76a <_printf_i+0x32>
 800c754:	2f00      	cmp	r7, #0
 800c756:	f000 80d1 	beq.w	800c8fc <_printf_i+0x1c4>
 800c75a:	2f58      	cmp	r7, #88	@ 0x58
 800c75c:	f000 80b8 	beq.w	800c8d0 <_printf_i+0x198>
 800c760:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c764:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c768:	e03a      	b.n	800c7e0 <_printf_i+0xa8>
 800c76a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c76e:	2b15      	cmp	r3, #21
 800c770:	d8f6      	bhi.n	800c760 <_printf_i+0x28>
 800c772:	a101      	add	r1, pc, #4	@ (adr r1, 800c778 <_printf_i+0x40>)
 800c774:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c778:	0800c7d1 	.word	0x0800c7d1
 800c77c:	0800c7e5 	.word	0x0800c7e5
 800c780:	0800c761 	.word	0x0800c761
 800c784:	0800c761 	.word	0x0800c761
 800c788:	0800c761 	.word	0x0800c761
 800c78c:	0800c761 	.word	0x0800c761
 800c790:	0800c7e5 	.word	0x0800c7e5
 800c794:	0800c761 	.word	0x0800c761
 800c798:	0800c761 	.word	0x0800c761
 800c79c:	0800c761 	.word	0x0800c761
 800c7a0:	0800c761 	.word	0x0800c761
 800c7a4:	0800c8e3 	.word	0x0800c8e3
 800c7a8:	0800c80f 	.word	0x0800c80f
 800c7ac:	0800c89d 	.word	0x0800c89d
 800c7b0:	0800c761 	.word	0x0800c761
 800c7b4:	0800c761 	.word	0x0800c761
 800c7b8:	0800c905 	.word	0x0800c905
 800c7bc:	0800c761 	.word	0x0800c761
 800c7c0:	0800c80f 	.word	0x0800c80f
 800c7c4:	0800c761 	.word	0x0800c761
 800c7c8:	0800c761 	.word	0x0800c761
 800c7cc:	0800c8a5 	.word	0x0800c8a5
 800c7d0:	6833      	ldr	r3, [r6, #0]
 800c7d2:	1d1a      	adds	r2, r3, #4
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	6032      	str	r2, [r6, #0]
 800c7d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7dc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c7e0:	2301      	movs	r3, #1
 800c7e2:	e09c      	b.n	800c91e <_printf_i+0x1e6>
 800c7e4:	6833      	ldr	r3, [r6, #0]
 800c7e6:	6820      	ldr	r0, [r4, #0]
 800c7e8:	1d19      	adds	r1, r3, #4
 800c7ea:	6031      	str	r1, [r6, #0]
 800c7ec:	0606      	lsls	r6, r0, #24
 800c7ee:	d501      	bpl.n	800c7f4 <_printf_i+0xbc>
 800c7f0:	681d      	ldr	r5, [r3, #0]
 800c7f2:	e003      	b.n	800c7fc <_printf_i+0xc4>
 800c7f4:	0645      	lsls	r5, r0, #25
 800c7f6:	d5fb      	bpl.n	800c7f0 <_printf_i+0xb8>
 800c7f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c7fc:	2d00      	cmp	r5, #0
 800c7fe:	da03      	bge.n	800c808 <_printf_i+0xd0>
 800c800:	232d      	movs	r3, #45	@ 0x2d
 800c802:	426d      	negs	r5, r5
 800c804:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c808:	4858      	ldr	r0, [pc, #352]	@ (800c96c <_printf_i+0x234>)
 800c80a:	230a      	movs	r3, #10
 800c80c:	e011      	b.n	800c832 <_printf_i+0xfa>
 800c80e:	6821      	ldr	r1, [r4, #0]
 800c810:	6833      	ldr	r3, [r6, #0]
 800c812:	0608      	lsls	r0, r1, #24
 800c814:	f853 5b04 	ldr.w	r5, [r3], #4
 800c818:	d402      	bmi.n	800c820 <_printf_i+0xe8>
 800c81a:	0649      	lsls	r1, r1, #25
 800c81c:	bf48      	it	mi
 800c81e:	b2ad      	uxthmi	r5, r5
 800c820:	2f6f      	cmp	r7, #111	@ 0x6f
 800c822:	4852      	ldr	r0, [pc, #328]	@ (800c96c <_printf_i+0x234>)
 800c824:	6033      	str	r3, [r6, #0]
 800c826:	bf14      	ite	ne
 800c828:	230a      	movne	r3, #10
 800c82a:	2308      	moveq	r3, #8
 800c82c:	2100      	movs	r1, #0
 800c82e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c832:	6866      	ldr	r6, [r4, #4]
 800c834:	60a6      	str	r6, [r4, #8]
 800c836:	2e00      	cmp	r6, #0
 800c838:	db05      	blt.n	800c846 <_printf_i+0x10e>
 800c83a:	6821      	ldr	r1, [r4, #0]
 800c83c:	432e      	orrs	r6, r5
 800c83e:	f021 0104 	bic.w	r1, r1, #4
 800c842:	6021      	str	r1, [r4, #0]
 800c844:	d04b      	beq.n	800c8de <_printf_i+0x1a6>
 800c846:	4616      	mov	r6, r2
 800c848:	fbb5 f1f3 	udiv	r1, r5, r3
 800c84c:	fb03 5711 	mls	r7, r3, r1, r5
 800c850:	5dc7      	ldrb	r7, [r0, r7]
 800c852:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c856:	462f      	mov	r7, r5
 800c858:	42bb      	cmp	r3, r7
 800c85a:	460d      	mov	r5, r1
 800c85c:	d9f4      	bls.n	800c848 <_printf_i+0x110>
 800c85e:	2b08      	cmp	r3, #8
 800c860:	d10b      	bne.n	800c87a <_printf_i+0x142>
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	07df      	lsls	r7, r3, #31
 800c866:	d508      	bpl.n	800c87a <_printf_i+0x142>
 800c868:	6923      	ldr	r3, [r4, #16]
 800c86a:	6861      	ldr	r1, [r4, #4]
 800c86c:	4299      	cmp	r1, r3
 800c86e:	bfde      	ittt	le
 800c870:	2330      	movle	r3, #48	@ 0x30
 800c872:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c876:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c87a:	1b92      	subs	r2, r2, r6
 800c87c:	6122      	str	r2, [r4, #16]
 800c87e:	f8cd a000 	str.w	sl, [sp]
 800c882:	464b      	mov	r3, r9
 800c884:	aa03      	add	r2, sp, #12
 800c886:	4621      	mov	r1, r4
 800c888:	4640      	mov	r0, r8
 800c88a:	f7ff fee7 	bl	800c65c <_printf_common>
 800c88e:	3001      	adds	r0, #1
 800c890:	d14a      	bne.n	800c928 <_printf_i+0x1f0>
 800c892:	f04f 30ff 	mov.w	r0, #4294967295
 800c896:	b004      	add	sp, #16
 800c898:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	f043 0320 	orr.w	r3, r3, #32
 800c8a2:	6023      	str	r3, [r4, #0]
 800c8a4:	4832      	ldr	r0, [pc, #200]	@ (800c970 <_printf_i+0x238>)
 800c8a6:	2778      	movs	r7, #120	@ 0x78
 800c8a8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c8ac:	6823      	ldr	r3, [r4, #0]
 800c8ae:	6831      	ldr	r1, [r6, #0]
 800c8b0:	061f      	lsls	r7, r3, #24
 800c8b2:	f851 5b04 	ldr.w	r5, [r1], #4
 800c8b6:	d402      	bmi.n	800c8be <_printf_i+0x186>
 800c8b8:	065f      	lsls	r7, r3, #25
 800c8ba:	bf48      	it	mi
 800c8bc:	b2ad      	uxthmi	r5, r5
 800c8be:	6031      	str	r1, [r6, #0]
 800c8c0:	07d9      	lsls	r1, r3, #31
 800c8c2:	bf44      	itt	mi
 800c8c4:	f043 0320 	orrmi.w	r3, r3, #32
 800c8c8:	6023      	strmi	r3, [r4, #0]
 800c8ca:	b11d      	cbz	r5, 800c8d4 <_printf_i+0x19c>
 800c8cc:	2310      	movs	r3, #16
 800c8ce:	e7ad      	b.n	800c82c <_printf_i+0xf4>
 800c8d0:	4826      	ldr	r0, [pc, #152]	@ (800c96c <_printf_i+0x234>)
 800c8d2:	e7e9      	b.n	800c8a8 <_printf_i+0x170>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	f023 0320 	bic.w	r3, r3, #32
 800c8da:	6023      	str	r3, [r4, #0]
 800c8dc:	e7f6      	b.n	800c8cc <_printf_i+0x194>
 800c8de:	4616      	mov	r6, r2
 800c8e0:	e7bd      	b.n	800c85e <_printf_i+0x126>
 800c8e2:	6833      	ldr	r3, [r6, #0]
 800c8e4:	6825      	ldr	r5, [r4, #0]
 800c8e6:	6961      	ldr	r1, [r4, #20]
 800c8e8:	1d18      	adds	r0, r3, #4
 800c8ea:	6030      	str	r0, [r6, #0]
 800c8ec:	062e      	lsls	r6, r5, #24
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	d501      	bpl.n	800c8f6 <_printf_i+0x1be>
 800c8f2:	6019      	str	r1, [r3, #0]
 800c8f4:	e002      	b.n	800c8fc <_printf_i+0x1c4>
 800c8f6:	0668      	lsls	r0, r5, #25
 800c8f8:	d5fb      	bpl.n	800c8f2 <_printf_i+0x1ba>
 800c8fa:	8019      	strh	r1, [r3, #0]
 800c8fc:	2300      	movs	r3, #0
 800c8fe:	6123      	str	r3, [r4, #16]
 800c900:	4616      	mov	r6, r2
 800c902:	e7bc      	b.n	800c87e <_printf_i+0x146>
 800c904:	6833      	ldr	r3, [r6, #0]
 800c906:	1d1a      	adds	r2, r3, #4
 800c908:	6032      	str	r2, [r6, #0]
 800c90a:	681e      	ldr	r6, [r3, #0]
 800c90c:	6862      	ldr	r2, [r4, #4]
 800c90e:	2100      	movs	r1, #0
 800c910:	4630      	mov	r0, r6
 800c912:	f7f3 fc5d 	bl	80001d0 <memchr>
 800c916:	b108      	cbz	r0, 800c91c <_printf_i+0x1e4>
 800c918:	1b80      	subs	r0, r0, r6
 800c91a:	6060      	str	r0, [r4, #4]
 800c91c:	6863      	ldr	r3, [r4, #4]
 800c91e:	6123      	str	r3, [r4, #16]
 800c920:	2300      	movs	r3, #0
 800c922:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c926:	e7aa      	b.n	800c87e <_printf_i+0x146>
 800c928:	6923      	ldr	r3, [r4, #16]
 800c92a:	4632      	mov	r2, r6
 800c92c:	4649      	mov	r1, r9
 800c92e:	4640      	mov	r0, r8
 800c930:	47d0      	blx	sl
 800c932:	3001      	adds	r0, #1
 800c934:	d0ad      	beq.n	800c892 <_printf_i+0x15a>
 800c936:	6823      	ldr	r3, [r4, #0]
 800c938:	079b      	lsls	r3, r3, #30
 800c93a:	d413      	bmi.n	800c964 <_printf_i+0x22c>
 800c93c:	68e0      	ldr	r0, [r4, #12]
 800c93e:	9b03      	ldr	r3, [sp, #12]
 800c940:	4298      	cmp	r0, r3
 800c942:	bfb8      	it	lt
 800c944:	4618      	movlt	r0, r3
 800c946:	e7a6      	b.n	800c896 <_printf_i+0x15e>
 800c948:	2301      	movs	r3, #1
 800c94a:	4632      	mov	r2, r6
 800c94c:	4649      	mov	r1, r9
 800c94e:	4640      	mov	r0, r8
 800c950:	47d0      	blx	sl
 800c952:	3001      	adds	r0, #1
 800c954:	d09d      	beq.n	800c892 <_printf_i+0x15a>
 800c956:	3501      	adds	r5, #1
 800c958:	68e3      	ldr	r3, [r4, #12]
 800c95a:	9903      	ldr	r1, [sp, #12]
 800c95c:	1a5b      	subs	r3, r3, r1
 800c95e:	42ab      	cmp	r3, r5
 800c960:	dcf2      	bgt.n	800c948 <_printf_i+0x210>
 800c962:	e7eb      	b.n	800c93c <_printf_i+0x204>
 800c964:	2500      	movs	r5, #0
 800c966:	f104 0619 	add.w	r6, r4, #25
 800c96a:	e7f5      	b.n	800c958 <_printf_i+0x220>
 800c96c:	0800d381 	.word	0x0800d381
 800c970:	0800d392 	.word	0x0800d392

0800c974 <__sflush_r>:
 800c974:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c97c:	0716      	lsls	r6, r2, #28
 800c97e:	4605      	mov	r5, r0
 800c980:	460c      	mov	r4, r1
 800c982:	d454      	bmi.n	800ca2e <__sflush_r+0xba>
 800c984:	684b      	ldr	r3, [r1, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	dc02      	bgt.n	800c990 <__sflush_r+0x1c>
 800c98a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	dd48      	ble.n	800ca22 <__sflush_r+0xae>
 800c990:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c992:	2e00      	cmp	r6, #0
 800c994:	d045      	beq.n	800ca22 <__sflush_r+0xae>
 800c996:	2300      	movs	r3, #0
 800c998:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c99c:	682f      	ldr	r7, [r5, #0]
 800c99e:	6a21      	ldr	r1, [r4, #32]
 800c9a0:	602b      	str	r3, [r5, #0]
 800c9a2:	d030      	beq.n	800ca06 <__sflush_r+0x92>
 800c9a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c9a6:	89a3      	ldrh	r3, [r4, #12]
 800c9a8:	0759      	lsls	r1, r3, #29
 800c9aa:	d505      	bpl.n	800c9b8 <__sflush_r+0x44>
 800c9ac:	6863      	ldr	r3, [r4, #4]
 800c9ae:	1ad2      	subs	r2, r2, r3
 800c9b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c9b2:	b10b      	cbz	r3, 800c9b8 <__sflush_r+0x44>
 800c9b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c9b6:	1ad2      	subs	r2, r2, r3
 800c9b8:	2300      	movs	r3, #0
 800c9ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c9bc:	6a21      	ldr	r1, [r4, #32]
 800c9be:	4628      	mov	r0, r5
 800c9c0:	47b0      	blx	r6
 800c9c2:	1c43      	adds	r3, r0, #1
 800c9c4:	89a3      	ldrh	r3, [r4, #12]
 800c9c6:	d106      	bne.n	800c9d6 <__sflush_r+0x62>
 800c9c8:	6829      	ldr	r1, [r5, #0]
 800c9ca:	291d      	cmp	r1, #29
 800c9cc:	d82b      	bhi.n	800ca26 <__sflush_r+0xb2>
 800c9ce:	4a2a      	ldr	r2, [pc, #168]	@ (800ca78 <__sflush_r+0x104>)
 800c9d0:	40ca      	lsrs	r2, r1
 800c9d2:	07d6      	lsls	r6, r2, #31
 800c9d4:	d527      	bpl.n	800ca26 <__sflush_r+0xb2>
 800c9d6:	2200      	movs	r2, #0
 800c9d8:	6062      	str	r2, [r4, #4]
 800c9da:	04d9      	lsls	r1, r3, #19
 800c9dc:	6922      	ldr	r2, [r4, #16]
 800c9de:	6022      	str	r2, [r4, #0]
 800c9e0:	d504      	bpl.n	800c9ec <__sflush_r+0x78>
 800c9e2:	1c42      	adds	r2, r0, #1
 800c9e4:	d101      	bne.n	800c9ea <__sflush_r+0x76>
 800c9e6:	682b      	ldr	r3, [r5, #0]
 800c9e8:	b903      	cbnz	r3, 800c9ec <__sflush_r+0x78>
 800c9ea:	6560      	str	r0, [r4, #84]	@ 0x54
 800c9ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c9ee:	602f      	str	r7, [r5, #0]
 800c9f0:	b1b9      	cbz	r1, 800ca22 <__sflush_r+0xae>
 800c9f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c9f6:	4299      	cmp	r1, r3
 800c9f8:	d002      	beq.n	800ca00 <__sflush_r+0x8c>
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f7ff fca2 	bl	800c344 <_free_r>
 800ca00:	2300      	movs	r3, #0
 800ca02:	6363      	str	r3, [r4, #52]	@ 0x34
 800ca04:	e00d      	b.n	800ca22 <__sflush_r+0xae>
 800ca06:	2301      	movs	r3, #1
 800ca08:	4628      	mov	r0, r5
 800ca0a:	47b0      	blx	r6
 800ca0c:	4602      	mov	r2, r0
 800ca0e:	1c50      	adds	r0, r2, #1
 800ca10:	d1c9      	bne.n	800c9a6 <__sflush_r+0x32>
 800ca12:	682b      	ldr	r3, [r5, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0c6      	beq.n	800c9a6 <__sflush_r+0x32>
 800ca18:	2b1d      	cmp	r3, #29
 800ca1a:	d001      	beq.n	800ca20 <__sflush_r+0xac>
 800ca1c:	2b16      	cmp	r3, #22
 800ca1e:	d11e      	bne.n	800ca5e <__sflush_r+0xea>
 800ca20:	602f      	str	r7, [r5, #0]
 800ca22:	2000      	movs	r0, #0
 800ca24:	e022      	b.n	800ca6c <__sflush_r+0xf8>
 800ca26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca2a:	b21b      	sxth	r3, r3
 800ca2c:	e01b      	b.n	800ca66 <__sflush_r+0xf2>
 800ca2e:	690f      	ldr	r7, [r1, #16]
 800ca30:	2f00      	cmp	r7, #0
 800ca32:	d0f6      	beq.n	800ca22 <__sflush_r+0xae>
 800ca34:	0793      	lsls	r3, r2, #30
 800ca36:	680e      	ldr	r6, [r1, #0]
 800ca38:	bf08      	it	eq
 800ca3a:	694b      	ldreq	r3, [r1, #20]
 800ca3c:	600f      	str	r7, [r1, #0]
 800ca3e:	bf18      	it	ne
 800ca40:	2300      	movne	r3, #0
 800ca42:	eba6 0807 	sub.w	r8, r6, r7
 800ca46:	608b      	str	r3, [r1, #8]
 800ca48:	f1b8 0f00 	cmp.w	r8, #0
 800ca4c:	dde9      	ble.n	800ca22 <__sflush_r+0xae>
 800ca4e:	6a21      	ldr	r1, [r4, #32]
 800ca50:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ca52:	4643      	mov	r3, r8
 800ca54:	463a      	mov	r2, r7
 800ca56:	4628      	mov	r0, r5
 800ca58:	47b0      	blx	r6
 800ca5a:	2800      	cmp	r0, #0
 800ca5c:	dc08      	bgt.n	800ca70 <__sflush_r+0xfc>
 800ca5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ca66:	81a3      	strh	r3, [r4, #12]
 800ca68:	f04f 30ff 	mov.w	r0, #4294967295
 800ca6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca70:	4407      	add	r7, r0
 800ca72:	eba8 0800 	sub.w	r8, r8, r0
 800ca76:	e7e7      	b.n	800ca48 <__sflush_r+0xd4>
 800ca78:	20400001 	.word	0x20400001

0800ca7c <_fflush_r>:
 800ca7c:	b538      	push	{r3, r4, r5, lr}
 800ca7e:	690b      	ldr	r3, [r1, #16]
 800ca80:	4605      	mov	r5, r0
 800ca82:	460c      	mov	r4, r1
 800ca84:	b913      	cbnz	r3, 800ca8c <_fflush_r+0x10>
 800ca86:	2500      	movs	r5, #0
 800ca88:	4628      	mov	r0, r5
 800ca8a:	bd38      	pop	{r3, r4, r5, pc}
 800ca8c:	b118      	cbz	r0, 800ca96 <_fflush_r+0x1a>
 800ca8e:	6a03      	ldr	r3, [r0, #32]
 800ca90:	b90b      	cbnz	r3, 800ca96 <_fflush_r+0x1a>
 800ca92:	f7ff f973 	bl	800bd7c <__sinit>
 800ca96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d0f3      	beq.n	800ca86 <_fflush_r+0xa>
 800ca9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800caa0:	07d0      	lsls	r0, r2, #31
 800caa2:	d404      	bmi.n	800caae <_fflush_r+0x32>
 800caa4:	0599      	lsls	r1, r3, #22
 800caa6:	d402      	bmi.n	800caae <_fflush_r+0x32>
 800caa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800caaa:	f7ff fc3a 	bl	800c322 <__retarget_lock_acquire_recursive>
 800caae:	4628      	mov	r0, r5
 800cab0:	4621      	mov	r1, r4
 800cab2:	f7ff ff5f 	bl	800c974 <__sflush_r>
 800cab6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cab8:	07da      	lsls	r2, r3, #31
 800caba:	4605      	mov	r5, r0
 800cabc:	d4e4      	bmi.n	800ca88 <_fflush_r+0xc>
 800cabe:	89a3      	ldrh	r3, [r4, #12]
 800cac0:	059b      	lsls	r3, r3, #22
 800cac2:	d4e1      	bmi.n	800ca88 <_fflush_r+0xc>
 800cac4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cac6:	f7ff fc2d 	bl	800c324 <__retarget_lock_release_recursive>
 800caca:	e7dd      	b.n	800ca88 <_fflush_r+0xc>

0800cacc <__swhatbuf_r>:
 800cacc:	b570      	push	{r4, r5, r6, lr}
 800cace:	460c      	mov	r4, r1
 800cad0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cad4:	2900      	cmp	r1, #0
 800cad6:	b096      	sub	sp, #88	@ 0x58
 800cad8:	4615      	mov	r5, r2
 800cada:	461e      	mov	r6, r3
 800cadc:	da0d      	bge.n	800cafa <__swhatbuf_r+0x2e>
 800cade:	89a3      	ldrh	r3, [r4, #12]
 800cae0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cae4:	f04f 0100 	mov.w	r1, #0
 800cae8:	bf14      	ite	ne
 800caea:	2340      	movne	r3, #64	@ 0x40
 800caec:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800caf0:	2000      	movs	r0, #0
 800caf2:	6031      	str	r1, [r6, #0]
 800caf4:	602b      	str	r3, [r5, #0]
 800caf6:	b016      	add	sp, #88	@ 0x58
 800caf8:	bd70      	pop	{r4, r5, r6, pc}
 800cafa:	466a      	mov	r2, sp
 800cafc:	f000 f87c 	bl	800cbf8 <_fstat_r>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	dbec      	blt.n	800cade <__swhatbuf_r+0x12>
 800cb04:	9901      	ldr	r1, [sp, #4]
 800cb06:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cb0a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cb0e:	4259      	negs	r1, r3
 800cb10:	4159      	adcs	r1, r3
 800cb12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cb16:	e7eb      	b.n	800caf0 <__swhatbuf_r+0x24>

0800cb18 <__smakebuf_r>:
 800cb18:	898b      	ldrh	r3, [r1, #12]
 800cb1a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb1c:	079d      	lsls	r5, r3, #30
 800cb1e:	4606      	mov	r6, r0
 800cb20:	460c      	mov	r4, r1
 800cb22:	d507      	bpl.n	800cb34 <__smakebuf_r+0x1c>
 800cb24:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cb28:	6023      	str	r3, [r4, #0]
 800cb2a:	6123      	str	r3, [r4, #16]
 800cb2c:	2301      	movs	r3, #1
 800cb2e:	6163      	str	r3, [r4, #20]
 800cb30:	b003      	add	sp, #12
 800cb32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb34:	ab01      	add	r3, sp, #4
 800cb36:	466a      	mov	r2, sp
 800cb38:	f7ff ffc8 	bl	800cacc <__swhatbuf_r>
 800cb3c:	9f00      	ldr	r7, [sp, #0]
 800cb3e:	4605      	mov	r5, r0
 800cb40:	4639      	mov	r1, r7
 800cb42:	4630      	mov	r0, r6
 800cb44:	f7ff f802 	bl	800bb4c <_malloc_r>
 800cb48:	b948      	cbnz	r0, 800cb5e <__smakebuf_r+0x46>
 800cb4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb4e:	059a      	lsls	r2, r3, #22
 800cb50:	d4ee      	bmi.n	800cb30 <__smakebuf_r+0x18>
 800cb52:	f023 0303 	bic.w	r3, r3, #3
 800cb56:	f043 0302 	orr.w	r3, r3, #2
 800cb5a:	81a3      	strh	r3, [r4, #12]
 800cb5c:	e7e2      	b.n	800cb24 <__smakebuf_r+0xc>
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	6020      	str	r0, [r4, #0]
 800cb62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cb66:	81a3      	strh	r3, [r4, #12]
 800cb68:	9b01      	ldr	r3, [sp, #4]
 800cb6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cb6e:	b15b      	cbz	r3, 800cb88 <__smakebuf_r+0x70>
 800cb70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb74:	4630      	mov	r0, r6
 800cb76:	f000 f851 	bl	800cc1c <_isatty_r>
 800cb7a:	b128      	cbz	r0, 800cb88 <__smakebuf_r+0x70>
 800cb7c:	89a3      	ldrh	r3, [r4, #12]
 800cb7e:	f023 0303 	bic.w	r3, r3, #3
 800cb82:	f043 0301 	orr.w	r3, r3, #1
 800cb86:	81a3      	strh	r3, [r4, #12]
 800cb88:	89a3      	ldrh	r3, [r4, #12]
 800cb8a:	431d      	orrs	r5, r3
 800cb8c:	81a5      	strh	r5, [r4, #12]
 800cb8e:	e7cf      	b.n	800cb30 <__smakebuf_r+0x18>

0800cb90 <_putc_r>:
 800cb90:	b570      	push	{r4, r5, r6, lr}
 800cb92:	460d      	mov	r5, r1
 800cb94:	4614      	mov	r4, r2
 800cb96:	4606      	mov	r6, r0
 800cb98:	b118      	cbz	r0, 800cba2 <_putc_r+0x12>
 800cb9a:	6a03      	ldr	r3, [r0, #32]
 800cb9c:	b90b      	cbnz	r3, 800cba2 <_putc_r+0x12>
 800cb9e:	f7ff f8ed 	bl	800bd7c <__sinit>
 800cba2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cba4:	07d8      	lsls	r0, r3, #31
 800cba6:	d405      	bmi.n	800cbb4 <_putc_r+0x24>
 800cba8:	89a3      	ldrh	r3, [r4, #12]
 800cbaa:	0599      	lsls	r1, r3, #22
 800cbac:	d402      	bmi.n	800cbb4 <_putc_r+0x24>
 800cbae:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbb0:	f7ff fbb7 	bl	800c322 <__retarget_lock_acquire_recursive>
 800cbb4:	68a3      	ldr	r3, [r4, #8]
 800cbb6:	3b01      	subs	r3, #1
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	60a3      	str	r3, [r4, #8]
 800cbbc:	da05      	bge.n	800cbca <_putc_r+0x3a>
 800cbbe:	69a2      	ldr	r2, [r4, #24]
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	db12      	blt.n	800cbea <_putc_r+0x5a>
 800cbc4:	b2eb      	uxtb	r3, r5
 800cbc6:	2b0a      	cmp	r3, #10
 800cbc8:	d00f      	beq.n	800cbea <_putc_r+0x5a>
 800cbca:	6823      	ldr	r3, [r4, #0]
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	6022      	str	r2, [r4, #0]
 800cbd0:	701d      	strb	r5, [r3, #0]
 800cbd2:	b2ed      	uxtb	r5, r5
 800cbd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cbd6:	07da      	lsls	r2, r3, #31
 800cbd8:	d405      	bmi.n	800cbe6 <_putc_r+0x56>
 800cbda:	89a3      	ldrh	r3, [r4, #12]
 800cbdc:	059b      	lsls	r3, r3, #22
 800cbde:	d402      	bmi.n	800cbe6 <_putc_r+0x56>
 800cbe0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cbe2:	f7ff fb9f 	bl	800c324 <__retarget_lock_release_recursive>
 800cbe6:	4628      	mov	r0, r5
 800cbe8:	bd70      	pop	{r4, r5, r6, pc}
 800cbea:	4629      	mov	r1, r5
 800cbec:	4622      	mov	r2, r4
 800cbee:	4630      	mov	r0, r6
 800cbf0:	f7ff fa69 	bl	800c0c6 <__swbuf_r>
 800cbf4:	4605      	mov	r5, r0
 800cbf6:	e7ed      	b.n	800cbd4 <_putc_r+0x44>

0800cbf8 <_fstat_r>:
 800cbf8:	b538      	push	{r3, r4, r5, lr}
 800cbfa:	4d07      	ldr	r5, [pc, #28]	@ (800cc18 <_fstat_r+0x20>)
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	4604      	mov	r4, r0
 800cc00:	4608      	mov	r0, r1
 800cc02:	4611      	mov	r1, r2
 800cc04:	602b      	str	r3, [r5, #0]
 800cc06:	f7f6 fc78 	bl	80034fa <_fstat>
 800cc0a:	1c43      	adds	r3, r0, #1
 800cc0c:	d102      	bne.n	800cc14 <_fstat_r+0x1c>
 800cc0e:	682b      	ldr	r3, [r5, #0]
 800cc10:	b103      	cbz	r3, 800cc14 <_fstat_r+0x1c>
 800cc12:	6023      	str	r3, [r4, #0]
 800cc14:	bd38      	pop	{r3, r4, r5, pc}
 800cc16:	bf00      	nop
 800cc18:	20000af8 	.word	0x20000af8

0800cc1c <_isatty_r>:
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4d06      	ldr	r5, [pc, #24]	@ (800cc38 <_isatty_r+0x1c>)
 800cc20:	2300      	movs	r3, #0
 800cc22:	4604      	mov	r4, r0
 800cc24:	4608      	mov	r0, r1
 800cc26:	602b      	str	r3, [r5, #0]
 800cc28:	f7f6 fc77 	bl	800351a <_isatty>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	d102      	bne.n	800cc36 <_isatty_r+0x1a>
 800cc30:	682b      	ldr	r3, [r5, #0]
 800cc32:	b103      	cbz	r3, 800cc36 <_isatty_r+0x1a>
 800cc34:	6023      	str	r3, [r4, #0]
 800cc36:	bd38      	pop	{r3, r4, r5, pc}
 800cc38:	20000af8 	.word	0x20000af8

0800cc3c <_init>:
 800cc3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc3e:	bf00      	nop
 800cc40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc42:	bc08      	pop	{r3}
 800cc44:	469e      	mov	lr, r3
 800cc46:	4770      	bx	lr

0800cc48 <_fini>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr
