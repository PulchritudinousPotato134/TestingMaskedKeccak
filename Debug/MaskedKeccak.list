
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b784  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  0800b918  0800b918  0000c918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd48  0800bd48  0000d088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd48  0800bd48  0000cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd50  0800bd50  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd50  0800bd50  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd54  0800bd54  0000cd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800bd58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c38b  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000482c  00000000  00000000  00029443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001730  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011d9  00000000  00000000  0002f3a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006ae1  00000000  00000000  00030579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f9e6  00000000  00000000  0003705a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e46  00000000  00000000  00056a40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00128886  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006abc  00000000  00000000  001288cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012f388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b8fc 	.word	0x0800b8fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800b8fc 	.word	0x0800b8fc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <get_random64>:
#include "global_rng.h"
#include "stm32f4xx_hal.h"

extern RNG_HandleTypeDef hrng;  // defined in your HAL setup

uint64_t get_random64(void) {
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b082      	sub	sp, #8
 80005a2:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r1) != HAL_OK) {
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	4619      	mov	r1, r3
 80005a8:	4815      	ldr	r0, [pc, #84]	@ (8000600 <get_random64+0x64>)
 80005aa:	f005 ffc5 	bl	8006538 <HAL_RNG_GenerateRandomNumber>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <get_random64+0x1c>
        Error_Handler(); // or fail securely
 80005b4:	f000 fffe 	bl	80015b4 <Error_Handler>
    }
    if (HAL_RNG_GenerateRandomNumber(&hrng, &r2) != HAL_OK) {
 80005b8:	463b      	mov	r3, r7
 80005ba:	4619      	mov	r1, r3
 80005bc:	4810      	ldr	r0, [pc, #64]	@ (8000600 <get_random64+0x64>)
 80005be:	f005 ffbb 	bl	8006538 <HAL_RNG_GenerateRandomNumber>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <get_random64+0x30>
        Error_Handler();
 80005c8:	f000 fff4 	bl	80015b4 <Error_Handler>
    }
    return ((uint64_t)r1 << 32) | r2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2200      	movs	r2, #0
 80005d0:	469a      	mov	sl, r3
 80005d2:	4693      	mov	fp, r2
 80005d4:	f04f 0200 	mov.w	r2, #0
 80005d8:	f04f 0300 	mov.w	r3, #0
 80005dc:	4653      	mov	r3, sl
 80005de:	2200      	movs	r2, #0
 80005e0:	6839      	ldr	r1, [r7, #0]
 80005e2:	2000      	movs	r0, #0
 80005e4:	460c      	mov	r4, r1
 80005e6:	4605      	mov	r5, r0
 80005e8:	ea42 0804 	orr.w	r8, r2, r4
 80005ec:	ea43 0905 	orr.w	r9, r3, r5
 80005f0:	4642      	mov	r2, r8
 80005f2:	464b      	mov	r3, r9
}
 80005f4:	4610      	mov	r0, r2
 80005f6:	4619      	mov	r1, r3
 80005f8:	3708      	adds	r7, #8
 80005fa:	46bd      	mov	sp, r7
 80005fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000600:	20000140 	.word	0x20000140

08000604 <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 8000604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000608:	b0a0      	sub	sp, #128	@ 0x80
 800060a:	af00      	add	r7, sp, #0
 800060c:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 800060e:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 8000612:	2328      	movs	r3, #40	@ 0x28
 8000614:	461a      	mov	r2, r3
 8000616:	2100      	movs	r1, #0
 8000618:	f00a fc8e 	bl	800af38 <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 800061c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8000620:	2328      	movs	r3, #40	@ 0x28
 8000622:	461a      	mov	r2, r3
 8000624:	2100      	movs	r1, #0
 8000626:	f00a fc87 	bl	800af38 <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 800062a:	2300      	movs	r3, #0
 800062c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800062e:	e043      	b.n	80006b8 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 8000630:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000632:	00da      	lsls	r2, r3, #3
 8000634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000636:	4413      	add	r3, r2
 8000638:	e9d3 0100 	ldrd	r0, r1, [r3]
 800063c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800063e:	3305      	adds	r3, #5
 8000640:	00da      	lsls	r2, r3, #3
 8000642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000644:	4413      	add	r3, r2
 8000646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800064a:	ea80 0402 	eor.w	r4, r0, r2
 800064e:	ea81 0503 	eor.w	r5, r1, r3
 8000652:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000654:	330a      	adds	r3, #10
 8000656:	00da      	lsls	r2, r3, #3
 8000658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800065a:	4413      	add	r3, r2
 800065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000660:	ea84 0a02 	eor.w	sl, r4, r2
 8000664:	ea85 0b03 	eor.w	fp, r5, r3
 8000668:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800066a:	330f      	adds	r3, #15
 800066c:	00da      	lsls	r2, r3, #3
 800066e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000670:	4413      	add	r3, r2
 8000672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000676:	ea8a 0102 	eor.w	r1, sl, r2
 800067a:	61b9      	str	r1, [r7, #24]
 800067c:	ea8b 0303 	eor.w	r3, fp, r3
 8000680:	61fb      	str	r3, [r7, #28]
 8000682:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000684:	3314      	adds	r3, #20
 8000686:	00da      	lsls	r2, r3, #3
 8000688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800068a:	4413      	add	r3, r2
 800068c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000690:	69b9      	ldr	r1, [r7, #24]
 8000692:	4051      	eors	r1, r2
 8000694:	6139      	str	r1, [r7, #16]
 8000696:	69f9      	ldr	r1, [r7, #28]
 8000698:	404b      	eors	r3, r1
 800069a:	617b      	str	r3, [r7, #20]
 800069c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800069e:	00db      	lsls	r3, r3, #3
 80006a0:	3360      	adds	r3, #96	@ 0x60
 80006a2:	f107 0220 	add.w	r2, r7, #32
 80006a6:	4413      	add	r3, r2
 80006a8:	3b30      	subs	r3, #48	@ 0x30
 80006aa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80006ae:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 80006b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006b4:	3301      	adds	r3, #1
 80006b6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006b8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ba:	2b04      	cmp	r3, #4
 80006bc:	ddb8      	ble.n	8000630 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 80006be:	2300      	movs	r3, #0
 80006c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80006c2:	e072      	b.n	80007aa <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 80006c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006c6:	1d19      	adds	r1, r3, #4
 80006c8:	4b3c      	ldr	r3, [pc, #240]	@ (80007bc <theta+0x1b8>)
 80006ca:	fb83 2301 	smull	r2, r3, r3, r1
 80006ce:	105a      	asrs	r2, r3, #1
 80006d0:	17cb      	asrs	r3, r1, #31
 80006d2:	1ad2      	subs	r2, r2, r3
 80006d4:	4613      	mov	r3, r2
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	4413      	add	r3, r2
 80006da:	1aca      	subs	r2, r1, r3
 80006dc:	00d3      	lsls	r3, r2, #3
 80006de:	3360      	adds	r3, #96	@ 0x60
 80006e0:	f107 0220 	add.w	r2, r7, #32
 80006e4:	4413      	add	r3, r2
 80006e6:	3b30      	subs	r3, #48	@ 0x30
 80006e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	1c5c      	adds	r4, r3, #1
 80006f0:	4b32      	ldr	r3, [pc, #200]	@ (80007bc <theta+0x1b8>)
 80006f2:	fb83 2304 	smull	r2, r3, r3, r4
 80006f6:	105a      	asrs	r2, r3, #1
 80006f8:	17e3      	asrs	r3, r4, #31
 80006fa:	1ad2      	subs	r2, r2, r3
 80006fc:	4613      	mov	r3, r2
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	1ae2      	subs	r2, r4, r3
 8000704:	00d3      	lsls	r3, r2, #3
 8000706:	3360      	adds	r3, #96	@ 0x60
 8000708:	f107 0220 	add.w	r2, r7, #32
 800070c:	4413      	add	r3, r2
 800070e:	3b30      	subs	r3, #48	@ 0x30
 8000710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000714:	0fd5      	lsrs	r5, r2, #31
 8000716:	005c      	lsls	r4, r3, #1
 8000718:	ea45 0904 	orr.w	r9, r5, r4
 800071c:	0fdc      	lsrs	r4, r3, #31
 800071e:	0053      	lsls	r3, r2, #1
 8000720:	ea44 0803 	orr.w	r8, r4, r3
 8000724:	ea80 0308 	eor.w	r3, r0, r8
 8000728:	60bb      	str	r3, [r7, #8]
 800072a:	ea81 0309 	eor.w	r3, r1, r9
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000732:	00db      	lsls	r3, r3, #3
 8000734:	3360      	adds	r3, #96	@ 0x60
 8000736:	f107 0220 	add.w	r2, r7, #32
 800073a:	4413      	add	r3, r2
 800073c:	3b58      	subs	r3, #88	@ 0x58
 800073e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000742:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 8000746:	2300      	movs	r3, #0
 8000748:	67bb      	str	r3, [r7, #120]	@ 0x78
 800074a:	e028      	b.n	800079e <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 800074c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	441a      	add	r2, r3
 8000754:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000756:	4413      	add	r3, r2
 8000758:	00db      	lsls	r3, r3, #3
 800075a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800075c:	4413      	add	r3, r2
 800075e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000762:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000764:	00db      	lsls	r3, r3, #3
 8000766:	3360      	adds	r3, #96	@ 0x60
 8000768:	f107 0220 	add.w	r2, r7, #32
 800076c:	4413      	add	r3, r2
 800076e:	3b58      	subs	r3, #88	@ 0x58
 8000770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000774:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 8000776:	462c      	mov	r4, r5
 8000778:	00a4      	lsls	r4, r4, #2
 800077a:	4425      	add	r5, r4
 800077c:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 800077e:	442c      	add	r4, r5
 8000780:	00e4      	lsls	r4, r4, #3
 8000782:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 8000784:	442c      	add	r4, r5
 8000786:	ea80 0502 	eor.w	r5, r0, r2
 800078a:	603d      	str	r5, [r7, #0]
 800078c:	404b      	eors	r3, r1
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000794:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000798:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800079a:	3301      	adds	r3, #1
 800079c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800079e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80007a0:	2b04      	cmp	r3, #4
 80007a2:	ddd3      	ble.n	800074c <theta+0x148>
  for (x = 0; x < 5; ++x) {
 80007a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007a6:	3301      	adds	r3, #1
 80007a8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80007aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80007ac:	2b04      	cmp	r3, #4
 80007ae:	dd89      	ble.n	80006c4 <theta+0xc0>
    }
  }
}
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	3780      	adds	r7, #128	@ 0x80
 80007b6:	46bd      	mov	sp, r7
 80007b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007bc:	66666667 	.word	0x66666667

080007c0 <rho>:

void rho(uint64_t* state)
{
 80007c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007c4:	b086      	sub	sp, #24
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 80007ca:	2100      	movs	r1, #0
 80007cc:	6139      	str	r1, [r7, #16]
 80007ce:	e062      	b.n	8000896 <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 80007d0:	2100      	movs	r1, #0
 80007d2:	6179      	str	r1, [r7, #20]
 80007d4:	e059      	b.n	800088a <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 80007d6:	6938      	ldr	r0, [r7, #16]
 80007d8:	4601      	mov	r1, r0
 80007da:	0089      	lsls	r1, r1, #2
 80007dc:	4408      	add	r0, r1
 80007de:	6979      	ldr	r1, [r7, #20]
 80007e0:	4401      	add	r1, r0
 80007e2:	00c9      	lsls	r1, r1, #3
 80007e4:	68f8      	ldr	r0, [r7, #12]
 80007e6:	4401      	add	r1, r0
 80007e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80007ec:	693e      	ldr	r6, [r7, #16]
 80007ee:	4634      	mov	r4, r6
 80007f0:	4626      	mov	r6, r4
 80007f2:	00b6      	lsls	r6, r6, #2
 80007f4:	eb06 0c04 	add.w	ip, r6, r4
 80007f8:	697e      	ldr	r6, [r7, #20]
 80007fa:	4466      	add	r6, ip
 80007fc:	4c2a      	ldr	r4, [pc, #168]	@ (80008a8 <rho+0xe8>)
 80007fe:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 8000802:	693c      	ldr	r4, [r7, #16]
 8000804:	46a4      	mov	ip, r4
 8000806:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 800080a:	44a4      	add	ip, r4
 800080c:	697c      	ldr	r4, [r7, #20]
 800080e:	44a4      	add	ip, r4
 8000810:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8000814:	68fc      	ldr	r4, [r7, #12]
 8000816:	eb04 0a0c 	add.w	sl, r4, ip
 800081a:	f1a6 0e20 	sub.w	lr, r6, #32
 800081e:	f1c6 0c20 	rsb	ip, r6, #32
 8000822:	fa01 f406 	lsl.w	r4, r1, r6
 8000826:	607c      	str	r4, [r7, #4]
 8000828:	fa00 fe0e 	lsl.w	lr, r0, lr
 800082c:	687c      	ldr	r4, [r7, #4]
 800082e:	ea44 040e 	orr.w	r4, r4, lr
 8000832:	607c      	str	r4, [r7, #4]
 8000834:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000838:	687c      	ldr	r4, [r7, #4]
 800083a:	ea44 040c 	orr.w	r4, r4, ip
 800083e:	607c      	str	r4, [r7, #4]
 8000840:	fa00 f406 	lsl.w	r4, r0, r6
 8000844:	603c      	str	r4, [r7, #0]
 8000846:	4276      	negs	r6, r6
 8000848:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 800084c:	f1c6 0e20 	rsb	lr, r6, #32
 8000850:	f1a6 0c20 	sub.w	ip, r6, #32
 8000854:	fa20 f206 	lsr.w	r2, r0, r6
 8000858:	fa01 fe0e 	lsl.w	lr, r1, lr
 800085c:	ea42 020e 	orr.w	r2, r2, lr
 8000860:	fa21 fc0c 	lsr.w	ip, r1, ip
 8000864:	ea42 020c 	orr.w	r2, r2, ip
 8000868:	fa21 f306 	lsr.w	r3, r1, r6
 800086c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000870:	4621      	mov	r1, r4
 8000872:	ea41 0802 	orr.w	r8, r1, r2
 8000876:	4629      	mov	r1, r5
 8000878:	ea41 0903 	orr.w	r9, r1, r3
 800087c:	4642      	mov	r2, r8
 800087e:	464b      	mov	r3, r9
 8000880:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 8000884:	6979      	ldr	r1, [r7, #20]
 8000886:	3101      	adds	r1, #1
 8000888:	6179      	str	r1, [r7, #20]
 800088a:	6979      	ldr	r1, [r7, #20]
 800088c:	2904      	cmp	r1, #4
 800088e:	dda2      	ble.n	80007d6 <rho+0x16>
  for (y = 0; y < 5; ++y) {
 8000890:	6939      	ldr	r1, [r7, #16]
 8000892:	3101      	adds	r1, #1
 8000894:	6139      	str	r1, [r7, #16]
 8000896:	6939      	ldr	r1, [r7, #16]
 8000898:	2904      	cmp	r1, #4
 800089a:	dd99      	ble.n	80007d0 <rho+0x10>
    }
  }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008a8:	0800bbbc 	.word	0x0800bbbc

080008ac <pi>:

void pi(uint64_t* state)
{
 80008ac:	b480      	push	{r7}
 80008ae:	b0b9      	sub	sp, #228	@ 0xe4
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008ba:	e02c      	b.n	8000916 <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 80008bc:	2300      	movs	r3, #0
 80008be:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008c2:	e01f      	b.n	8000904 <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 80008c4:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008c8:	4613      	mov	r3, r2
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	441a      	add	r2, r3
 80008ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008d2:	4413      	add	r3, r2
 80008d4:	00db      	lsls	r3, r3, #3
 80008d6:	687a      	ldr	r2, [r7, #4]
 80008d8:	18d0      	adds	r0, r2, r3
 80008da:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	441a      	add	r2, r3
 80008e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008e8:	18d1      	adds	r1, r2, r3
 80008ea:	e9d0 2300 	ldrd	r2, r3, [r0]
 80008ee:	00c9      	lsls	r1, r1, #3
 80008f0:	31e0      	adds	r1, #224	@ 0xe0
 80008f2:	4439      	add	r1, r7
 80008f4:	39d8      	subs	r1, #216	@ 0xd8
 80008f6:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 80008fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008fe:	3301      	adds	r3, #1
 8000900:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8000904:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000908:	2b04      	cmp	r3, #4
 800090a:	dddb      	ble.n	80008c4 <pi+0x18>
  for (y = 0; y < 5; ++y) {
 800090c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000910:	3301      	adds	r3, #1
 8000912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800091a:	2b04      	cmp	r3, #4
 800091c:	ddce      	ble.n	80008bc <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 800091e:	2300      	movs	r3, #0
 8000920:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000924:	e04f      	b.n	80009c6 <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 8000926:	2300      	movs	r3, #0
 8000928:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800092c:	e042      	b.n	80009b4 <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 800092e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000932:	4b2a      	ldr	r3, [pc, #168]	@ (80009dc <pi+0x130>)
 8000934:	fb83 1302 	smull	r1, r3, r3, r2
 8000938:	1059      	asrs	r1, r3, #1
 800093a:	17d3      	asrs	r3, r2, #31
 800093c:	1ac9      	subs	r1, r1, r3
 800093e:	460b      	mov	r3, r1
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	440b      	add	r3, r1
 8000944:	1ad3      	subs	r3, r2, r3
 8000946:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 800094a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800094e:	0059      	lsls	r1, r3, #1
 8000950:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000954:	4613      	mov	r3, r2
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	4413      	add	r3, r2
 800095a:	18ca      	adds	r2, r1, r3
 800095c:	4b1f      	ldr	r3, [pc, #124]	@ (80009dc <pi+0x130>)
 800095e:	fb83 1302 	smull	r1, r3, r3, r2
 8000962:	1059      	asrs	r1, r3, #1
 8000964:	17d3      	asrs	r3, r2, #31
 8000966:	1ac9      	subs	r1, r1, r3
 8000968:	460b      	mov	r3, r1
 800096a:	009b      	lsls	r3, r3, #2
 800096c:	440b      	add	r3, r1
 800096e:	1ad3      	subs	r3, r2, r3
 8000970:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 8000974:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	441a      	add	r2, r3
 800097e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000982:	18d0      	adds	r0, r2, r3
 8000984:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000988:	4613      	mov	r3, r2
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	441a      	add	r2, r3
 800098e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000992:	4413      	add	r3, r2
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	18d1      	adds	r1, r2, r3
 800099a:	00c3      	lsls	r3, r0, #3
 800099c:	33e0      	adds	r3, #224	@ 0xe0
 800099e:	443b      	add	r3, r7
 80009a0:	3bd8      	subs	r3, #216	@ 0xd8
 80009a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009a6:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 80009aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009ae:	3301      	adds	r3, #1
 80009b0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80009b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	ddb8      	ble.n	800092e <pi+0x82>
  for (y = 0; y < 5; ++y) {
 80009bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009c0:	3301      	adds	r3, #1
 80009c2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80009c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80009ca:	2b04      	cmp	r3, #4
 80009cc:	ddab      	ble.n	8000926 <pi+0x7a>
    }
  }
}
 80009ce:	bf00      	nop
 80009d0:	bf00      	nop
 80009d2:	37e4      	adds	r7, #228	@ 0xe4
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	66666667 	.word	0x66666667

080009e0 <chi>:

void chi(uint64_t* state)
{
 80009e0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80009e4:	b08e      	sub	sp, #56	@ 0x38
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 80009ea:	2100      	movs	r1, #0
 80009ec:	6339      	str	r1, [r7, #48]	@ 0x30
 80009ee:	e072      	b.n	8000ad6 <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 80009f0:	2100      	movs	r1, #0
 80009f2:	6379      	str	r1, [r7, #52]	@ 0x34
 80009f4:	e04e      	b.n	8000a94 <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 80009f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009f8:	4601      	mov	r1, r0
 80009fa:	0089      	lsls	r1, r1, #2
 80009fc:	4408      	add	r0, r1
 80009fe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a00:	4401      	add	r1, r0
 8000a02:	00c9      	lsls	r1, r1, #3
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	4401      	add	r1, r0
 8000a08:	e9d1 ab00 	ldrd	sl, fp, [r1]
 8000a0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a0e:	4601      	mov	r1, r0
 8000a10:	0089      	lsls	r1, r1, #2
 8000a12:	eb01 0c00 	add.w	ip, r1, r0
 8000a16:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a18:	1c4e      	adds	r6, r1, #1
 8000a1a:	4934      	ldr	r1, [pc, #208]	@ (8000aec <chi+0x10c>)
 8000a1c:	fb81 0106 	smull	r0, r1, r1, r6
 8000a20:	1048      	asrs	r0, r1, #1
 8000a22:	17f1      	asrs	r1, r6, #31
 8000a24:	1a40      	subs	r0, r0, r1
 8000a26:	4601      	mov	r1, r0
 8000a28:	0089      	lsls	r1, r1, #2
 8000a2a:	4401      	add	r1, r0
 8000a2c:	1a70      	subs	r0, r6, r1
 8000a2e:	eb0c 0100 	add.w	r1, ip, r0
 8000a32:	00c9      	lsls	r1, r1, #3
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	4401      	add	r1, r0
 8000a38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a3c:	43c2      	mvns	r2, r0
 8000a3e:	43cb      	mvns	r3, r1
 8000a40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a42:	4601      	mov	r1, r0
 8000a44:	0089      	lsls	r1, r1, #2
 8000a46:	eb01 0c00 	add.w	ip, r1, r0
 8000a4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a4c:	1c8e      	adds	r6, r1, #2
 8000a4e:	4927      	ldr	r1, [pc, #156]	@ (8000aec <chi+0x10c>)
 8000a50:	fb81 0106 	smull	r0, r1, r1, r6
 8000a54:	1048      	asrs	r0, r1, #1
 8000a56:	17f1      	asrs	r1, r6, #31
 8000a58:	1a40      	subs	r0, r0, r1
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	0089      	lsls	r1, r1, #2
 8000a5e:	4401      	add	r1, r0
 8000a60:	1a70      	subs	r0, r6, r1
 8000a62:	eb0c 0100 	add.w	r1, ip, r0
 8000a66:	00c9      	lsls	r1, r1, #3
 8000a68:	6878      	ldr	r0, [r7, #4]
 8000a6a:	4401      	add	r1, r0
 8000a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a70:	ea02 0400 	and.w	r4, r2, r0
 8000a74:	ea03 0501 	and.w	r5, r3, r1
 8000a78:	ea8a 0804 	eor.w	r8, sl, r4
 8000a7c:	ea8b 0905 	eor.w	r9, fp, r5
 8000a80:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a82:	00c9      	lsls	r1, r1, #3
 8000a84:	3138      	adds	r1, #56	@ 0x38
 8000a86:	4439      	add	r1, r7
 8000a88:	3930      	subs	r1, #48	@ 0x30
 8000a8a:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 8000a8e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a90:	3101      	adds	r1, #1
 8000a92:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a94:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a96:	2904      	cmp	r1, #4
 8000a98:	ddad      	ble.n	80009f6 <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a9e:	e014      	b.n	8000aca <chi+0xea>
      state[y * 5 + x] = C[x];
 8000aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000aa2:	4601      	mov	r1, r0
 8000aa4:	0089      	lsls	r1, r1, #2
 8000aa6:	4408      	add	r0, r1
 8000aa8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000aaa:	4401      	add	r1, r0
 8000aac:	00c9      	lsls	r1, r1, #3
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	1846      	adds	r6, r0, r1
 8000ab2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ab4:	00c9      	lsls	r1, r1, #3
 8000ab6:	3138      	adds	r1, #56	@ 0x38
 8000ab8:	4439      	add	r1, r7
 8000aba:	3930      	subs	r1, #48	@ 0x30
 8000abc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ac0:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000ac4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000ac6:	3101      	adds	r1, #1
 8000ac8:	6379      	str	r1, [r7, #52]	@ 0x34
 8000aca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000acc:	2904      	cmp	r1, #4
 8000ace:	dde7      	ble.n	8000aa0 <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 8000ad0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ad2:	3101      	adds	r1, #1
 8000ad4:	6339      	str	r1, [r7, #48]	@ 0x30
 8000ad6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000ad8:	2904      	cmp	r1, #4
 8000ada:	dd89      	ble.n	80009f0 <chi+0x10>
    }
  }
}
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3738      	adds	r7, #56	@ 0x38
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	66666667 	.word	0x66666667

08000af0 <iota>:

void iota(uint64_t* state, int i)
{
 8000af0:	b4b0      	push	{r4, r5, r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
  /* Iota */
  /* XXX: truncate RC[i] if w < 64 */
  state[0] = state[0] ^ RC[i];
 8000afa:	6879      	ldr	r1, [r7, #4]
 8000afc:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000b00:	4808      	ldr	r0, [pc, #32]	@ (8000b24 <iota+0x34>)
 8000b02:	6839      	ldr	r1, [r7, #0]
 8000b04:	00c9      	lsls	r1, r1, #3
 8000b06:	4401      	add	r1, r0
 8000b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b0c:	ea84 0200 	eor.w	r2, r4, r0
 8000b10:	ea85 0301 	eor.w	r3, r5, r1
 8000b14:	6879      	ldr	r1, [r7, #4]
 8000b16:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bcb0      	pop	{r4, r5, r7}
 8000b22:	4770      	bx	lr
 8000b24:	0800bc20 	.word	0x0800bc20

08000b28 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	b29a      	uxth	r2, r3
 8000b38:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	4804      	ldr	r0, [pc, #16]	@ (8000b50 <_write+0x28>)
 8000b40:	f005 fe29 	bl	8006796 <HAL_UART_Transmit>
    return len;
 8000b44:	687b      	ldr	r3, [r7, #4]
}
 8000b46:	4618      	mov	r0, r3
 8000b48:	3710      	adds	r7, #16
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	200001a8 	.word	0x200001a8

08000b54 <fill_masked_state_arithmetic>:
            dst[x][y].share[0] = t;
        }
    }
}

void fill_masked_state_arithmetic(masked_uint64_t dst[5][5], const uint64_t src[25]) {
 8000b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b56:	b089      	sub	sp, #36	@ 0x24
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y) {
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
 8000b62:	e05d      	b.n	8000c20 <fill_masked_state_arithmetic+0xcc>
        for (int x = 0; x < 5; ++x) {
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
 8000b68:	e054      	b.n	8000c14 <fill_masked_state_arithmetic+0xc0>
            uint64_t acc = src[y * 5 + x];
 8000b6a:	69fa      	ldr	r2, [r7, #28]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	441a      	add	r2, r3
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	4413      	add	r3, r2
 8000b76:	00db      	lsls	r3, r3, #3
 8000b78:	683a      	ldr	r2, [r7, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b80:	e9c7 2304 	strd	r2, r3, [r7, #16]

            // Generate MASKING_N - 1 random shares
            for (int i = 0; i < MASKING_N - 1; ++i) {
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	e02d      	b.n	8000be6 <fill_masked_state_arithmetic+0x92>
                dst[x][y].share[i] = get_random64();
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	4413      	add	r3, r2
 8000b92:	015b      	lsls	r3, r3, #5
 8000b94:	461a      	mov	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	189e      	adds	r6, r3, r2
 8000b9a:	f7ff fcff 	bl	800059c <get_random64>
 8000b9e:	4602      	mov	r2, r0
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	69f9      	ldr	r1, [r7, #28]
 8000ba4:	0088      	lsls	r0, r1, #2
 8000ba6:	68f9      	ldr	r1, [r7, #12]
 8000ba8:	4401      	add	r1, r0
 8000baa:	00c9      	lsls	r1, r1, #3
 8000bac:	4431      	add	r1, r6
 8000bae:	e9c1 2300 	strd	r2, r3, [r1]
                acc -= dst[x][y].share[i];
 8000bb2:	69ba      	ldr	r2, [r7, #24]
 8000bb4:	4613      	mov	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	4413      	add	r3, r2
 8000bba:	015b      	lsls	r3, r3, #5
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	441a      	add	r2, r3
 8000bc2:	69fb      	ldr	r3, [r7, #28]
 8000bc4:	0099      	lsls	r1, r3, #2
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	440b      	add	r3, r1
 8000bca:	00db      	lsls	r3, r3, #3
 8000bcc:	4413      	add	r3, r2
 8000bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bd2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000bd6:	1a84      	subs	r4, r0, r2
 8000bd8:	eb61 0503 	sbc.w	r5, r1, r3
 8000bdc:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N - 1; ++i) {
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	ddce      	ble.n	8000b8a <fill_masked_state_arithmetic+0x36>
            }

            // Last share ensures additive sum equals original value
            dst[x][y].share[MASKING_N - 1] = acc;
 8000bec:	69ba      	ldr	r2, [r7, #24]
 8000bee:	4613      	mov	r3, r2
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	4413      	add	r3, r2
 8000bf4:	015b      	lsls	r3, r3, #5
 8000bf6:	461a      	mov	r2, r3
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	441a      	add	r2, r3
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	015b      	lsls	r3, r3, #5
 8000c00:	4413      	add	r3, r2
 8000c02:	f103 0118 	add.w	r1, r3, #24
 8000c06:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c0a:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	3301      	adds	r3, #1
 8000c12:	61bb      	str	r3, [r7, #24]
 8000c14:	69bb      	ldr	r3, [r7, #24]
 8000c16:	2b04      	cmp	r3, #4
 8000c18:	dda7      	ble.n	8000b6a <fill_masked_state_arithmetic+0x16>
    for (int y = 0; y < 5; ++y) {
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	61fb      	str	r3, [r7, #28]
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	dd9e      	ble.n	8000b64 <fill_masked_state_arithmetic+0x10>
        }
    }
}
 8000c26:	bf00      	nop
 8000c28:	bf00      	nop
 8000c2a:	3724      	adds	r7, #36	@ 0x24
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c30 <recombine_masked_state_arithmetic>:
                val ^= src[x][y].share[i];
            dst[y * 5 + x] = val;
        }
}

void recombine_masked_state_arithmetic(uint64_t dst[25], const masked_uint64_t src[5][5]) {
 8000c30:	b4b0      	push	{r4, r5, r7}
 8000c32:	b089      	sub	sp, #36	@ 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y)
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61fb      	str	r3, [r7, #28]
 8000c3e:	e03e      	b.n	8000cbe <recombine_masked_state_arithmetic+0x8e>
        for (int x = 0; x < 5; ++x) {
 8000c40:	2300      	movs	r3, #0
 8000c42:	61bb      	str	r3, [r7, #24]
 8000c44:	e035      	b.n	8000cb2 <recombine_masked_state_arithmetic+0x82>
            uint64_t val = 0;
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000c52:	2300      	movs	r3, #0
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	e019      	b.n	8000c8c <recombine_masked_state_arithmetic+0x5c>
                val += src[x][y].share[i];  // arithmetic recombination
 8000c58:	69ba      	ldr	r2, [r7, #24]
 8000c5a:	4613      	mov	r3, r2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	015b      	lsls	r3, r3, #5
 8000c62:	461a      	mov	r2, r3
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	441a      	add	r2, r3
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	0099      	lsls	r1, r3, #2
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	440b      	add	r3, r1
 8000c70:	00db      	lsls	r3, r3, #3
 8000c72:	4413      	add	r3, r2
 8000c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c78:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c7c:	1884      	adds	r4, r0, r2
 8000c7e:	eb41 0503 	adc.w	r5, r1, r3
 8000c82:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2b03      	cmp	r3, #3
 8000c90:	dde2      	ble.n	8000c58 <recombine_masked_state_arithmetic+0x28>
            dst[y * 5 + x] = val;
 8000c92:	69fa      	ldr	r2, [r7, #28]
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	441a      	add	r2, r3
 8000c9a:	69bb      	ldr	r3, [r7, #24]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	00db      	lsls	r3, r3, #3
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	18d1      	adds	r1, r2, r3
 8000ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000ca8:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000cac:	69bb      	ldr	r3, [r7, #24]
 8000cae:	3301      	adds	r3, #1
 8000cb0:	61bb      	str	r3, [r7, #24]
 8000cb2:	69bb      	ldr	r3, [r7, #24]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	ddc6      	ble.n	8000c46 <recombine_masked_state_arithmetic+0x16>
    for (int y = 0; y < 5; ++y)
 8000cb8:	69fb      	ldr	r3, [r7, #28]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	61fb      	str	r3, [r7, #28]
 8000cbe:	69fb      	ldr	r3, [r7, #28]
 8000cc0:	2b04      	cmp	r3, #4
 8000cc2:	ddbd      	ble.n	8000c40 <recombine_masked_state_arithmetic+0x10>
        }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3724      	adds	r7, #36	@ 0x24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bcb0      	pop	{r4, r5, r7}
 8000cce:	4770      	bx	lr

08000cd0 <print_diff>:

void print_diff(const char *label, const uint64_t *ref, const uint64_t *masked) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	@ 0x38
 8000cd4:	af04      	add	r7, sp, #16
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
    int fail = 0;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
 8000ce4:	e04d      	b.n	8000d82 <print_diff+0xb2>
        if (ref[i] != masked[i]) {
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	00db      	lsls	r3, r3, #3
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	4413      	add	r3, r2
 8000cee:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	00db      	lsls	r3, r3, #3
 8000cf6:	687a      	ldr	r2, [r7, #4]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfe:	4299      	cmp	r1, r3
 8000d00:	bf08      	it	eq
 8000d02:	4290      	cmpeq	r0, r2
 8000d04:	d03a      	beq.n	8000d7c <print_diff+0xac>
            uint32_t rh = ref[i] >> 32, rl = ref[i] & 0xFFFFFFFF;
 8000d06:	6a3b      	ldr	r3, [r7, #32]
 8000d08:	00db      	lsls	r3, r3, #3
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d12:	f04f 0200 	mov.w	r2, #0
 8000d16:	f04f 0300 	mov.w	r3, #0
 8000d1a:	000a      	movs	r2, r1
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4613      	mov	r3, r2
 8000d20:	61fb      	str	r3, [r7, #28]
 8000d22:	6a3b      	ldr	r3, [r7, #32]
 8000d24:	00db      	lsls	r3, r3, #3
 8000d26:	68ba      	ldr	r2, [r7, #8]
 8000d28:	4413      	add	r3, r2
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
            uint32_t mh = masked[i] >> 32, ml = masked[i] & 0xFFFFFFFF;
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d3e:	f04f 0200 	mov.w	r2, #0
 8000d42:	f04f 0300 	mov.w	r3, #0
 8000d46:	000a      	movs	r2, r1
 8000d48:	2300      	movs	r3, #0
 8000d4a:	4613      	mov	r3, r2
 8000d4c:	617b      	str	r3, [r7, #20]
 8000d4e:	6a3b      	ldr	r3, [r7, #32]
 8000d50:	00db      	lsls	r3, r3, #3
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	613b      	str	r3, [r7, #16]
            printf("Mismatch %s[%d]: ref = %08lX%08lX, masked = %08lX%08lX\n",
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	9302      	str	r3, [sp, #8]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	9301      	str	r3, [sp, #4]
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	6a3a      	ldr	r2, [r7, #32]
 8000d6e:	68f9      	ldr	r1, [r7, #12]
 8000d70:	480b      	ldr	r0, [pc, #44]	@ (8000da0 <print_diff+0xd0>)
 8000d72:	f009 ff43 	bl	800abfc <iprintf>
                   label, i,
                   (unsigned long)rh, (unsigned long)rl,
                   (unsigned long)mh, (unsigned long)ml);
            fail++;
 8000d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d78:	3301      	adds	r3, #1
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000d7c:	6a3b      	ldr	r3, [r7, #32]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	623b      	str	r3, [r7, #32]
 8000d82:	6a3b      	ldr	r3, [r7, #32]
 8000d84:	2b18      	cmp	r3, #24
 8000d86:	ddae      	ble.n	8000ce6 <print_diff+0x16>
        }
    }
    if (fail == 0) {
 8000d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <print_diff+0xc6>
        printf("SUCCESS: %s output matched reference.\n", label);
 8000d8e:	68f9      	ldr	r1, [r7, #12]
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <print_diff+0xd4>)
 8000d92:	f009 ff33 	bl	800abfc <iprintf>
    }
}
 8000d96:	bf00      	nop
 8000d98:	3728      	adds	r7, #40	@ 0x28
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	0800b928 	.word	0x0800b928
 8000da4:	0800b960 	.word	0x0800b960

08000da8 <test_masked_vs_reference_step_by_step_arithmetic>:



}

void test_masked_vs_reference_step_by_step_arithmetic(void) {
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	f5ad 5da9 	sub.w	sp, sp, #5408	@ 0x1520
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
    // === 1. Initial state setup ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 8000db2:	2400      	movs	r4, #0
 8000db4:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 8000db8:	f105 0504 	add.w	r5, r5, #4
 8000dbc:	602c      	str	r4, [r5, #0]
 8000dbe:	e02f      	b.n	8000e20 <test_masked_vs_reference_step_by_step_arithmetic+0x78>
        ref_state[i] = i * 0x0F0F0F0F0F0F0F0FULL;
 8000dc0:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000dc4:	f104 0404 	add.w	r4, r4, #4
 8000dc8:	6824      	ldr	r4, [r4, #0]
 8000dca:	17e5      	asrs	r5, r4, #31
 8000dcc:	4620      	mov	r0, r4
 8000dce:	4629      	mov	r1, r5
 8000dd0:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8000dd4:	fb04 f501 	mul.w	r5, r4, r1
 8000dd8:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8000ddc:	fb00 f404 	mul.w	r4, r0, r4
 8000de0:	442c      	add	r4, r5
 8000de2:	f04f 350f 	mov.w	r5, #252645135	@ 0xf0f0f0f
 8000de6:	fba0 2305 	umull	r2, r3, r0, r5
 8000dea:	441c      	add	r4, r3
 8000dec:	4623      	mov	r3, r4
 8000dee:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000df2:	f104 0404 	add.w	r4, r4, #4
 8000df6:	6824      	ldr	r4, [r4, #0]
 8000df8:	00e4      	lsls	r4, r4, #3
 8000dfa:	f504 54a9 	add.w	r4, r4, #5408	@ 0x1520
 8000dfe:	f104 0408 	add.w	r4, r4, #8
 8000e02:	443c      	add	r4, r7
 8000e04:	3cd8      	subs	r4, #216	@ 0xd8
 8000e06:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < 25; i++)
 8000e0a:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000e0e:	f104 0404 	add.w	r4, r4, #4
 8000e12:	6824      	ldr	r4, [r4, #0]
 8000e14:	3401      	adds	r4, #1
 8000e16:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 8000e1a:	f105 0504 	add.w	r5, r5, #4
 8000e1e:	602c      	str	r4, [r5, #0]
 8000e20:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000e24:	f104 0404 	add.w	r4, r4, #4
 8000e28:	6824      	ldr	r4, [r4, #0]
 8000e2a:	2c18      	cmp	r4, #24
 8000e2c:	ddc8      	ble.n	8000dc0 <test_masked_vs_reference_step_by_step_arithmetic+0x18>

    masked_uint64_t masked_state[5][5];
    fill_masked_state_arithmetic(masked_state, ref_state);
 8000e2e:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8000e32:	f102 0210 	add.w	r2, r2, #16
 8000e36:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000e3a:	f103 0310 	add.w	r3, r3, #16
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff fe87 	bl	8000b54 <fill_masked_state_arithmetic>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. THETA ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 8000e46:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000e4a:	f103 0308 	add.w	r3, r3, #8
 8000e4e:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8000e58:	f103 0310 	add.w	r3, r3, #16
 8000e5c:	22c8      	movs	r2, #200	@ 0xc8
 8000e5e:	4619      	mov	r1, r3
 8000e60:	f00a f8f5 	bl	800b04e <memcpy>
    theta(tmp_ref);
 8000e64:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e68:	f103 0308 	add.w	r3, r3, #8
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f7ff fbc9 	bl	8000604 <theta>

    masked_theta_arithmetic(masked_state);
 8000e72:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000e76:	f103 0310 	add.w	r3, r3, #16
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 fcfa 	bl	8001874 <masked_theta_arithmetic>
    recombine_masked_state_arithmetic(tmp_masked, masked_state);
 8000e80:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000e84:	f102 0210 	add.w	r2, r2, #16
 8000e88:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000e8c:	4611      	mov	r1, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff fece 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("THETA-ARITH", tmp_ref, tmp_masked);
 8000e94:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000e98:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e9c:	f103 0308 	add.w	r3, r3, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	4885      	ldr	r0, [pc, #532]	@ (80010b8 <test_masked_vs_reference_step_by_step_arithmetic+0x310>)
 8000ea4:	f7ff ff14 	bl	8000cd0 <print_diff>

    // === 3. RHO ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000ea8:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000eac:	f103 0308 	add.w	r3, r3, #8
 8000eb0:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000eb4:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000eb8:	f103 0308 	add.w	r3, r3, #8
 8000ebc:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	23c8      	movs	r3, #200	@ 0xc8
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	f00a f8c1 	bl	800b04e <memcpy>
    rho(tmp_ref);
 8000ecc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000ed0:	f103 0308 	add.w	r3, r3, #8
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fc73 	bl	80007c0 <rho>

    masked_rho_arithmetic(masked_state);
 8000eda:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000ede:	f103 0310 	add.w	r3, r3, #16
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f000 fdf6 	bl	8001ad4 <masked_rho_arithmetic>
    recombine_masked_state_arithmetic(tmp_masked, masked_state);
 8000ee8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000eec:	f102 0210 	add.w	r2, r2, #16
 8000ef0:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fe9a 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("RHO-ARITH", tmp_ref, tmp_masked);
 8000efc:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000f00:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f04:	f103 0308 	add.w	r3, r3, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	486c      	ldr	r0, [pc, #432]	@ (80010bc <test_masked_vs_reference_step_by_step_arithmetic+0x314>)
 8000f0c:	f7ff fee0 	bl	8000cd0 <print_diff>

    // === 4. PI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000f10:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f14:	f103 0308 	add.w	r3, r3, #8
 8000f18:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000f1c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f20:	f103 0308 	add.w	r3, r3, #8
 8000f24:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000f28:	4610      	mov	r0, r2
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	23c8      	movs	r3, #200	@ 0xc8
 8000f2e:	461a      	mov	r2, r3
 8000f30:	f00a f88d 	bl	800b04e <memcpy>
    pi(tmp_ref);
 8000f34:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f38:	f103 0308 	add.w	r3, r3, #8
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f7ff fcb5 	bl	80008ac <pi>

    masked_pi_arithmetic(masked_state);
 8000f42:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000f46:	f103 0310 	add.w	r3, r3, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 fe4c 	bl	8001be8 <masked_pi_arithmetic>
    recombine_masked_state_arithmetic(tmp_masked, masked_state);
 8000f50:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000f54:	f102 0210 	add.w	r2, r2, #16
 8000f58:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000f5c:	4611      	mov	r1, r2
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff fe66 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("PI-ARITH", tmp_ref, tmp_masked);
 8000f64:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000f68:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f6c:	f103 0308 	add.w	r3, r3, #8
 8000f70:	4619      	mov	r1, r3
 8000f72:	4853      	ldr	r0, [pc, #332]	@ (80010c0 <test_masked_vs_reference_step_by_step_arithmetic+0x318>)
 8000f74:	f7ff feac 	bl	8000cd0 <print_diff>

    int round_idx = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000f7e:	f102 0218 	add.w	r2, r2, #24
 8000f82:	6013      	str	r3, [r2, #0]

    // === 5. CHI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000f84:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f88:	f103 0308 	add.w	r3, r3, #8
 8000f8c:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000f90:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f94:	f103 0308 	add.w	r3, r3, #8
 8000f98:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	23c8      	movs	r3, #200	@ 0xc8
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	f00a f853 	bl	800b04e <memcpy>
    chi(tmp_ref);
 8000fa8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000fac:	f103 0308 	add.w	r3, r3, #8
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff fd15 	bl	80009e0 <chi>

    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8000fbc:	6013      	str	r3, [r2, #0]
 8000fbe:	e033      	b.n	8001028 <test_masked_vs_reference_step_by_step_arithmetic+0x280>
        for (int x = 0; x < 5; ++x)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000fc6:	f102 021c 	add.w	r2, r2, #28
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	e01e      	b.n	800100c <test_masked_vs_reference_step_by_step_arithmetic+0x264>
            fill_random_matrix(r_chi[x][y]);
 8000fce:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8000fd2:	3a08      	subs	r2, #8
 8000fd4:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000fd8:	f103 031c 	add.w	r3, r3, #28
 8000fdc:	6819      	ldr	r1, [r3, #0]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	440b      	add	r3, r1
 8000fe4:	f507 51a9 	add.w	r1, r7, #5408	@ 0x1520
 8000fe8:	6809      	ldr	r1, [r1, #0]
 8000fea:	440b      	add	r3, r1
 8000fec:	01db      	lsls	r3, r3, #7
 8000fee:	4413      	add	r3, r2
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fae5 	bl	80015c0 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 8000ff6:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000ffa:	f103 031c 	add.w	r3, r3, #28
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8001006:	f102 021c 	add.w	r2, r2, #28
 800100a:	6013      	str	r3, [r2, #0]
 800100c:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8001010:	f103 031c 	add.w	r3, r3, #28
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b04      	cmp	r3, #4
 8001018:	ddd9      	ble.n	8000fce <test_masked_vs_reference_step_by_step_arithmetic+0x226>
    for (int y = 0; y < 5; ++y)
 800101a:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	3301      	adds	r3, #1
 8001022:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	2b04      	cmp	r3, #4
 8001030:	ddc6      	ble.n	8000fc0 <test_masked_vs_reference_step_by_step_arithmetic+0x218>

    masked_uint64_t chi_out[5][5];
    masked_chi_arithmetic(chi_out, masked_state, r_chi);
 8001032:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8001036:	3a08      	subs	r2, #8
 8001038:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 800103c:	f101 0110 	add.w	r1, r1, #16
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	3b08      	subs	r3, #8
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fe7c 	bl	8001d44 <masked_chi_arithmetic>

    // === 6. IOTA ===
    iota(tmp_ref, round_idx);
 800104c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001050:	f103 0308 	add.w	r3, r3, #8
 8001054:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8001058:	f102 0218 	add.w	r2, r2, #24
 800105c:	6811      	ldr	r1, [r2, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f7ff fd46 	bl	8000af0 <iota>
    masked_iota_arithmetic(chi_out, RC[round_idx]);
 8001064:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <test_masked_vs_reference_step_by_step_arithmetic+0x31c>)
 8001066:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 800106a:	f103 0318 	add.w	r3, r3, #24
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	00db      	lsls	r3, r3, #3
 8001072:	4413      	add	r3, r2
 8001074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001078:	f107 0108 	add.w	r1, r7, #8
 800107c:	3908      	subs	r1, #8
 800107e:	4608      	mov	r0, r1
 8001080:	f000 fee4 	bl	8001e4c <masked_iota_arithmetic>

    recombine_masked_state_arithmetic(tmp_masked, chi_out);
 8001084:	f107 0308 	add.w	r3, r7, #8
 8001088:	3b08      	subs	r3, #8
 800108a:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 800108e:	4619      	mov	r1, r3
 8001090:	4610      	mov	r0, r2
 8001092:	f7ff fdcd 	bl	8000c30 <recombine_masked_state_arithmetic>
    print_diff("IOTA-ARITH", tmp_ref, tmp_masked);
 8001096:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 800109a:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 800109e:	f103 0308 	add.w	r3, r3, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	4808      	ldr	r0, [pc, #32]	@ (80010c8 <test_masked_vs_reference_step_by_step_arithmetic+0x320>)
 80010a6:	f7ff fe13 	bl	8000cd0 <print_diff>
}
 80010aa:	bf00      	nop
 80010ac:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bdb0      	pop	{r4, r5, r7, pc}
 80010b6:	bf00      	nop
 80010b8:	0800b9a0 	.word	0x0800b9a0
 80010bc:	0800b9ac 	.word	0x0800b9ac
 80010c0:	0800b9b8 	.word	0x0800b9b8
 80010c4:	0800bc20 	.word	0x0800bc20
 80010c8:	0800b9c4 	.word	0x0800b9c4

080010cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010d2:	f001 f9b7 	bl	8002444 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010d6:	f000 f833 	bl	8001140 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010da:	f000 f96d 	bl	80013b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80010de:	f000 f899 	bl	8001214 <MX_I2C1_Init>
  MX_I2S3_Init();
 80010e2:	f000 f8c5 	bl	8001270 <MX_I2S3_Init>
  MX_SPI1_Init();
 80010e6:	f000 f907 	bl	80012f8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80010ea:	f009 f8fd 	bl	800a2e8 <MX_USB_HOST_Init>
  MX_RNG_Init();
 80010ee:	f000 f8ef 	bl	80012d0 <MX_RNG_Init>
  MX_USART2_UART_Init();
 80010f2:	f000 f937 	bl	8001364 <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	607b      	str	r3, [r7, #4]
 80010fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001134 <main+0x68>)
 80010fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010fe:	4a0d      	ldr	r2, [pc, #52]	@ (8001134 <main+0x68>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001104:	6353      	str	r3, [r2, #52]	@ 0x34
 8001106:	4b0b      	ldr	r3, [pc, #44]	@ (8001134 <main+0x68>)
 8001108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800110a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800110e:	607b      	str	r3, [r7, #4]
 8001110:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 8001112:	4809      	ldr	r0, [pc, #36]	@ (8001138 <main+0x6c>)
 8001114:	f005 f9e6 	bl	80064e4 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <main+0x70>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	6898      	ldr	r0, [r3, #8]
 800111e:	2300      	movs	r3, #0
 8001120:	2202      	movs	r2, #2
 8001122:	2100      	movs	r1, #0
 8001124:	f009 fd7c 	bl	800ac20 <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_vs_reference_step_by_step_arithmetic();
 8001128:	f7ff fe3e 	bl	8000da8 <test_masked_vs_reference_step_by_step_arithmetic>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800112c:	f009 f902 	bl	800a334 <MX_USB_HOST_Process>
	  test_masked_vs_reference_step_by_step_arithmetic();
 8001130:	bf00      	nop
 8001132:	e7f9      	b.n	8001128 <main+0x5c>
 8001134:	40023800 	.word	0x40023800
 8001138:	20000140 	.word	0x20000140
 800113c:	20000038 	.word	0x20000038

08001140 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b094      	sub	sp, #80	@ 0x50
 8001144:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001146:	f107 0320 	add.w	r3, r7, #32
 800114a:	2230      	movs	r2, #48	@ 0x30
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f009 fef2 	bl	800af38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001154:	f107 030c 	add.w	r3, r7, #12
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001164:	2300      	movs	r3, #0
 8001166:	60bb      	str	r3, [r7, #8]
 8001168:	4b28      	ldr	r3, [pc, #160]	@ (800120c <SystemClock_Config+0xcc>)
 800116a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116c:	4a27      	ldr	r2, [pc, #156]	@ (800120c <SystemClock_Config+0xcc>)
 800116e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001172:	6413      	str	r3, [r2, #64]	@ 0x40
 8001174:	4b25      	ldr	r3, [pc, #148]	@ (800120c <SystemClock_Config+0xcc>)
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800117c:	60bb      	str	r3, [r7, #8]
 800117e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001180:	2300      	movs	r3, #0
 8001182:	607b      	str	r3, [r7, #4]
 8001184:	4b22      	ldr	r3, [pc, #136]	@ (8001210 <SystemClock_Config+0xd0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <SystemClock_Config+0xd0>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118e:	6013      	str	r3, [r2, #0]
 8001190:	4b1f      	ldr	r3, [pc, #124]	@ (8001210 <SystemClock_Config+0xd0>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001198:	607b      	str	r3, [r7, #4]
 800119a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800119c:	2301      	movs	r3, #1
 800119e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011a6:	2302      	movs	r3, #2
 80011a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80011ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011b0:	2308      	movs	r3, #8
 80011b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80011b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ba:	2302      	movs	r3, #2
 80011bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011be:	2307      	movs	r3, #7
 80011c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011c2:	f107 0320 	add.w	r3, r7, #32
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 fbb2 	bl	8005930 <HAL_RCC_OscConfig>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011d2:	f000 f9ef 	bl	80015b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011d6:	230f      	movs	r3, #15
 80011d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011da:	2302      	movs	r3, #2
 80011dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011e2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80011e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	2105      	movs	r1, #5
 80011f4:	4618      	mov	r0, r3
 80011f6:	f004 fe13 	bl	8005e20 <HAL_RCC_ClockConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001200:	f000 f9d8 	bl	80015b4 <Error_Handler>
  }
}
 8001204:	bf00      	nop
 8001206:	3750      	adds	r7, #80	@ 0x50
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40023800 	.word	0x40023800
 8001210:	40007000 	.word	0x40007000

08001214 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001218:	4b12      	ldr	r3, [pc, #72]	@ (8001264 <MX_I2C1_Init+0x50>)
 800121a:	4a13      	ldr	r2, [pc, #76]	@ (8001268 <MX_I2C1_Init+0x54>)
 800121c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001220:	4a12      	ldr	r2, [pc, #72]	@ (800126c <MX_I2C1_Init+0x58>)
 8001222:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001224:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800122a:	4b0e      	ldr	r3, [pc, #56]	@ (8001264 <MX_I2C1_Init+0x50>)
 800122c:	2200      	movs	r2, #0
 800122e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001230:	4b0c      	ldr	r3, [pc, #48]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001232:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001236:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001238:	4b0a      	ldr	r3, [pc, #40]	@ (8001264 <MX_I2C1_Init+0x50>)
 800123a:	2200      	movs	r2, #0
 800123c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123e:	4b09      	ldr	r3, [pc, #36]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001244:	4b07      	ldr	r3, [pc, #28]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <MX_I2C1_Init+0x50>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001250:	4804      	ldr	r0, [pc, #16]	@ (8001264 <MX_I2C1_Init+0x50>)
 8001252:	f003 fd89 	bl	8004d68 <HAL_I2C_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800125c:	f000 f9aa 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}
 8001264:	200000a4 	.word	0x200000a4
 8001268:	40005400 	.word	0x40005400
 800126c:	000186a0 	.word	0x000186a0

08001270 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <MX_I2S3_Init+0x54>)
 8001276:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <MX_I2S3_Init+0x58>)
 8001278:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <MX_I2S3_Init+0x54>)
 800127c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001280:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <MX_I2S3_Init+0x54>)
 8001284:	2200      	movs	r2, #0
 8001286:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001288:	4b0e      	ldr	r3, [pc, #56]	@ (80012c4 <MX_I2S3_Init+0x54>)
 800128a:	2200      	movs	r2, #0
 800128c:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <MX_I2S3_Init+0x54>)
 8001290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001294:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001296:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <MX_I2S3_Init+0x54>)
 8001298:	4a0c      	ldr	r2, [pc, #48]	@ (80012cc <MX_I2S3_Init+0x5c>)
 800129a:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 800129c:	4b09      	ldr	r3, [pc, #36]	@ (80012c4 <MX_I2S3_Init+0x54>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80012a2:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <MX_I2S3_Init+0x54>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80012a8:	4b06      	ldr	r3, [pc, #24]	@ (80012c4 <MX_I2S3_Init+0x54>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	@ (80012c4 <MX_I2S3_Init+0x54>)
 80012b0:	f003 fe9e 	bl	8004ff0 <HAL_I2S_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80012ba:	f000 f97b 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	200000f8 	.word	0x200000f8
 80012c8:	40003c00 	.word	0x40003c00
 80012cc:	00017700 	.word	0x00017700

080012d0 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80012d4:	4b06      	ldr	r3, [pc, #24]	@ (80012f0 <MX_RNG_Init+0x20>)
 80012d6:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <MX_RNG_Init+0x24>)
 80012d8:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80012da:	4805      	ldr	r0, [pc, #20]	@ (80012f0 <MX_RNG_Init+0x20>)
 80012dc:	f005 f902 	bl	80064e4 <HAL_RNG_Init>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80012e6:	f000 f965 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000140 	.word	0x20000140
 80012f4:	50060800 	.word	0x50060800

080012f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012fc:	4b17      	ldr	r3, [pc, #92]	@ (800135c <MX_SPI1_Init+0x64>)
 80012fe:	4a18      	ldr	r2, [pc, #96]	@ (8001360 <MX_SPI1_Init+0x68>)
 8001300:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001302:	4b16      	ldr	r3, [pc, #88]	@ (800135c <MX_SPI1_Init+0x64>)
 8001304:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001308:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800130a:	4b14      	ldr	r3, [pc, #80]	@ (800135c <MX_SPI1_Init+0x64>)
 800130c:	2200      	movs	r2, #0
 800130e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001310:	4b12      	ldr	r3, [pc, #72]	@ (800135c <MX_SPI1_Init+0x64>)
 8001312:	2200      	movs	r2, #0
 8001314:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001316:	4b11      	ldr	r3, [pc, #68]	@ (800135c <MX_SPI1_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <MX_SPI1_Init+0x64>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <MX_SPI1_Init+0x64>)
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800132a:	4b0c      	ldr	r3, [pc, #48]	@ (800135c <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001330:	4b0a      	ldr	r3, [pc, #40]	@ (800135c <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001336:	4b09      	ldr	r3, [pc, #36]	@ (800135c <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133c:	4b07      	ldr	r3, [pc, #28]	@ (800135c <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001342:	4b06      	ldr	r3, [pc, #24]	@ (800135c <MX_SPI1_Init+0x64>)
 8001344:	220a      	movs	r2, #10
 8001346:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001348:	4804      	ldr	r0, [pc, #16]	@ (800135c <MX_SPI1_Init+0x64>)
 800134a:	f005 f94b 	bl	80065e4 <HAL_SPI_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001354:	f000 f92e 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001358:	bf00      	nop
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000150 	.word	0x20000150
 8001360:	40013000 	.word	0x40013000

08001364 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001368:	4b11      	ldr	r3, [pc, #68]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	@ (80013b4 <MX_USART2_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136e:	4b10      	ldr	r3, [pc, #64]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001370:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001374:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	@ (80013b0 <MX_USART2_UART_Init+0x4c>)
 800139c:	f005 f9ab 	bl	80066f6 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f905 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200001a8 	.word	0x200001a8
 80013b4:	40004400 	.word	0x40004400

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b08c      	sub	sp, #48	@ 0x30
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	61bb      	str	r3, [r7, #24]
 80013d2:	4b72      	ldr	r3, [pc, #456]	@ (800159c <MX_GPIO_Init+0x1e4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a71      	ldr	r2, [pc, #452]	@ (800159c <MX_GPIO_Init+0x1e4>)
 80013d8:	f043 0310 	orr.w	r3, r3, #16
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b6f      	ldr	r3, [pc, #444]	@ (800159c <MX_GPIO_Init+0x1e4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 0310 	and.w	r3, r3, #16
 80013e6:	61bb      	str	r3, [r7, #24]
 80013e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	4b6b      	ldr	r3, [pc, #428]	@ (800159c <MX_GPIO_Init+0x1e4>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	4a6a      	ldr	r2, [pc, #424]	@ (800159c <MX_GPIO_Init+0x1e4>)
 80013f4:	f043 0304 	orr.w	r3, r3, #4
 80013f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013fa:	4b68      	ldr	r3, [pc, #416]	@ (800159c <MX_GPIO_Init+0x1e4>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	f003 0304 	and.w	r3, r3, #4
 8001402:	617b      	str	r3, [r7, #20]
 8001404:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	613b      	str	r3, [r7, #16]
 800140a:	4b64      	ldr	r3, [pc, #400]	@ (800159c <MX_GPIO_Init+0x1e4>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140e:	4a63      	ldr	r2, [pc, #396]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001410:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001414:	6313      	str	r3, [r2, #48]	@ 0x30
 8001416:	4b61      	ldr	r3, [pc, #388]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800141e:	613b      	str	r3, [r7, #16]
 8001420:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b5d      	ldr	r3, [pc, #372]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800142a:	4a5c      	ldr	r2, [pc, #368]	@ (800159c <MX_GPIO_Init+0x1e4>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6313      	str	r3, [r2, #48]	@ 0x30
 8001432:	4b5a      	ldr	r3, [pc, #360]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	60bb      	str	r3, [r7, #8]
 8001442:	4b56      	ldr	r3, [pc, #344]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a55      	ldr	r2, [pc, #340]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001448:	f043 0302 	orr.w	r3, r3, #2
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b53      	ldr	r3, [pc, #332]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	607b      	str	r3, [r7, #4]
 800145e:	4b4f      	ldr	r3, [pc, #316]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a4e      	ldr	r2, [pc, #312]	@ (800159c <MX_GPIO_Init+0x1e4>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b4c      	ldr	r3, [pc, #304]	@ (800159c <MX_GPIO_Init+0x1e4>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	607b      	str	r3, [r7, #4]
 8001474:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001476:	2200      	movs	r2, #0
 8001478:	2108      	movs	r1, #8
 800147a:	4849      	ldr	r0, [pc, #292]	@ (80015a0 <MX_GPIO_Init+0x1e8>)
 800147c:	f001 fb26 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001480:	2201      	movs	r2, #1
 8001482:	2101      	movs	r1, #1
 8001484:	4847      	ldr	r0, [pc, #284]	@ (80015a4 <MX_GPIO_Init+0x1ec>)
 8001486:	f001 fb21 	bl	8002acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800148a:	2200      	movs	r2, #0
 800148c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001490:	4845      	ldr	r0, [pc, #276]	@ (80015a8 <MX_GPIO_Init+0x1f0>)
 8001492:	f001 fb1b 	bl	8002acc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001496:	2308      	movs	r3, #8
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149a:	2301      	movs	r3, #1
 800149c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80014a6:	f107 031c 	add.w	r3, r7, #28
 80014aa:	4619      	mov	r1, r3
 80014ac:	483c      	ldr	r0, [pc, #240]	@ (80015a0 <MX_GPIO_Init+0x1e8>)
 80014ae:	f001 f971 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80014b2:	2301      	movs	r3, #1
 80014b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b6:	2301      	movs	r3, #1
 80014b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ba:	2300      	movs	r3, #0
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014be:	2300      	movs	r3, #0
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014c2:	f107 031c 	add.w	r3, r7, #28
 80014c6:	4619      	mov	r1, r3
 80014c8:	4836      	ldr	r0, [pc, #216]	@ (80015a4 <MX_GPIO_Init+0x1ec>)
 80014ca:	f001 f963 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80014ce:	2308      	movs	r3, #8
 80014d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014de:	2305      	movs	r3, #5
 80014e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 031c 	add.w	r3, r7, #28
 80014e6:	4619      	mov	r1, r3
 80014e8:	482e      	ldr	r0, [pc, #184]	@ (80015a4 <MX_GPIO_Init+0x1ec>)
 80014ea:	f001 f953 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80014f2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80014f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	482a      	ldr	r0, [pc, #168]	@ (80015ac <MX_GPIO_Init+0x1f4>)
 8001504:	f001 f946 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001508:	2304      	movs	r3, #4
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	4825      	ldr	r0, [pc, #148]	@ (80015b0 <MX_GPIO_Init+0x1f8>)
 800151c:	f001 f93a 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001520:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001524:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001526:	2302      	movs	r3, #2
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001532:	2305      	movs	r3, #5
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001536:	f107 031c 	add.w	r3, r7, #28
 800153a:	4619      	mov	r1, r3
 800153c:	481c      	ldr	r0, [pc, #112]	@ (80015b0 <MX_GPIO_Init+0x1f8>)
 800153e:	f001 f929 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001542:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8001546:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001548:	2301      	movs	r3, #1
 800154a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001554:	f107 031c 	add.w	r3, r7, #28
 8001558:	4619      	mov	r1, r3
 800155a:	4813      	ldr	r0, [pc, #76]	@ (80015a8 <MX_GPIO_Init+0x1f0>)
 800155c:	f001 f91a 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001560:	2320      	movs	r3, #32
 8001562:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001564:	2300      	movs	r3, #0
 8001566:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	480d      	ldr	r0, [pc, #52]	@ (80015a8 <MX_GPIO_Init+0x1f0>)
 8001574:	f001 f90e 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001578:	2302      	movs	r3, #2
 800157a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800157c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 031c 	add.w	r3, r7, #28
 800158a:	4619      	mov	r1, r3
 800158c:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <MX_GPIO_Init+0x1e8>)
 800158e:	f001 f901 	bl	8002794 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001592:	bf00      	nop
 8001594:	3730      	adds	r7, #48	@ 0x30
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40021000 	.word	0x40021000
 80015a4:	40020800 	.word	0x40020800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	40020000 	.word	0x40020000
 80015b0:	40020400 	.word	0x40020400

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <Error_Handler+0x8>

080015c0 <fill_random_matrix>:
#include <stdint.h>
#include <stdio.h>
#include "masked_gadgets.h"
#include "global_rng.h"

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
 80015cc:	e033      	b.n	8001636 <fill_random_matrix+0x76>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	3301      	adds	r3, #1
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	e01c      	b.n	8001610 <fill_random_matrix+0x50>
            uint64_t val = get_random64();
 80015d6:	f7fe ffe1 	bl	800059c <get_random64>
 80015da:	e9c7 0102 	strd	r0, r1, [r7, #8]
            r[i][j] = val;
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	015b      	lsls	r3, r3, #5
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	441a      	add	r2, r3
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	00db      	lsls	r3, r3, #3
 80015ea:	18d1      	adds	r1, r2, r3
 80015ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015f0:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	015b      	lsls	r3, r3, #5
 80015f8:	687a      	ldr	r2, [r7, #4]
 80015fa:	441a      	add	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	18d1      	adds	r1, r2, r3
 8001602:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001606:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	3301      	adds	r3, #1
 800160e:	613b      	str	r3, [r7, #16]
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d9df      	bls.n	80015d6 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	015b      	lsls	r3, r3, #5
 800161a:	687a      	ldr	r2, [r7, #4]
 800161c:	441a      	add	r2, r3
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	18d1      	adds	r1, r2, r3
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	f04f 0300 	mov.w	r3, #0
 800162c:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	2b03      	cmp	r3, #3
 800163a:	d9c8      	bls.n	80015ce <fill_random_matrix+0xe>
    }
}
 800163c:	bf00      	nop
 800163e:	bf00      	nop
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <masked_add_arithmetic>:
// ~~~ARITHMETIC IMPLEMENTATIONS ~~~


void masked_add_arithmetic(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 8001646:	b4b0      	push	{r4, r5, r7}
 8001648:	b087      	sub	sp, #28
 800164a:	af00      	add	r7, sp, #0
 800164c:	60f8      	str	r0, [r7, #12]
 800164e:	60b9      	str	r1, [r7, #8]
 8001650:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	e017      	b.n	8001688 <masked_add_arithmetic+0x42>
        out->share[i] = a->share[i] + b->share[i];
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	00db      	lsls	r3, r3, #3
 800165e:	4413      	add	r3, r2
 8001660:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	00db      	lsls	r3, r3, #3
 800166a:	4413      	add	r3, r2
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	1884      	adds	r4, r0, r2
 8001672:	eb41 0503 	adc.w	r5, r1, r3
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	00db      	lsls	r3, r3, #3
 800167c:	4413      	add	r3, r2
 800167e:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	3301      	adds	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d9e4      	bls.n	8001658 <masked_add_arithmetic+0x12>
    }
}
 800168e:	bf00      	nop
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	bcb0      	pop	{r4, r5, r7}
 8001698:	4770      	bx	lr

0800169a <masked_mul_arithmetic>:
}

void masked_mul_arithmetic(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 800169a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800169e:	b094      	sub	sp, #80	@ 0x50
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80016a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80016a6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80016a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Step 1: Diagonal products
    for (size_t i = 0; i < MASKING_N; i++) {
 80016aa:	2300      	movs	r3, #0
 80016ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016ae:	e01e      	b.n	80016ee <masked_mul_arithmetic+0x54>
        out->share[i] = a->share[i] * b->share[i];
 80016b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80016be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016c0:	00db      	lsls	r3, r3, #3
 80016c2:	4413      	add	r3, r2
 80016c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c8:	fb02 f005 	mul.w	r0, r2, r5
 80016cc:	fb04 f103 	mul.w	r1, r4, r3
 80016d0:	4401      	add	r1, r0
 80016d2:	fba4 8902 	umull	r8, r9, r4, r2
 80016d6:	eb01 0309 	add.w	r3, r1, r9
 80016da:	4699      	mov	r9, r3
 80016dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80016de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	4413      	add	r3, r2
 80016e4:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 80016e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016ea:	3301      	adds	r3, #1
 80016ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80016ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016f0:	2b03      	cmp	r3, #3
 80016f2:	d9dd      	bls.n	80016b0 <masked_mul_arithmetic+0x16>
    }

    // Step 2: Cross-terms + randomness (ISW-style)
    for (size_t i = 0; i < MASKING_N; i++) {
 80016f4:	2300      	movs	r3, #0
 80016f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016f8:	e08d      	b.n	8001816 <masked_mul_arithmetic+0x17c>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 80016fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80016fc:	3301      	adds	r3, #1
 80016fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8001700:	e082      	b.n	8001808 <masked_mul_arithmetic+0x16e>
            uint64_t t = a->share[i] * b->share[j] + a->share[j] * b->share[i];
 8001702:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001704:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	4413      	add	r3, r2
 800170a:	e9d3 4500 	ldrd	r4, r5, [r3]
 800170e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001710:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	4413      	add	r3, r2
 8001716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171a:	fb02 f005 	mul.w	r0, r2, r5
 800171e:	fb04 f103 	mul.w	r1, r4, r3
 8001722:	4401      	add	r1, r0
 8001724:	fba4 ab02 	umull	sl, fp, r4, r2
 8001728:	eb01 030b 	add.w	r3, r1, fp
 800172c:	469b      	mov	fp, r3
 800172e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	4413      	add	r3, r2
 8001736:	e9d3 4500 	ldrd	r4, r5, [r3]
 800173a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800173c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800173e:	00db      	lsls	r3, r3, #3
 8001740:	4413      	add	r3, r2
 8001742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001746:	fb02 f005 	mul.w	r0, r2, r5
 800174a:	fb04 f103 	mul.w	r1, r4, r3
 800174e:	4401      	add	r1, r0
 8001750:	fba4 2302 	umull	r2, r3, r4, r2
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
 8001756:	4613      	mov	r3, r2
 8001758:	623b      	str	r3, [r7, #32]
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	18cb      	adds	r3, r1, r3
 800175e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001760:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001764:	460b      	mov	r3, r1
 8001766:	eb1a 0303 	adds.w	r3, sl, r3
 800176a:	603b      	str	r3, [r7, #0]
 800176c:	4613      	mov	r3, r2
 800176e:	eb4b 0303 	adc.w	r3, fp, r3
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001778:	e9c7 340e 	strd	r3, r4, [r7, #56]	@ 0x38
            out->share[i] += r[i][j];
 800177c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800177e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	4413      	add	r3, r2
 8001784:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001788:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800178a:	015a      	lsls	r2, r3, #5
 800178c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800178e:	441a      	add	r2, r3
 8001790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	4413      	add	r3, r2
 8001796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179a:	1884      	adds	r4, r0, r2
 800179c:	61bc      	str	r4, [r7, #24]
 800179e:	eb41 0303 	adc.w	r3, r1, r3
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017a8:	00db      	lsls	r3, r3, #3
 80017aa:	4413      	add	r3, r2
 80017ac:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80017b0:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] += t - r[i][j];
 80017b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c6:	441a      	add	r2, r3
 80017c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017ca:	00db      	lsls	r3, r3, #3
 80017cc:	4413      	add	r3, r2
 80017ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017d6:	1a16      	subs	r6, r2, r0
 80017d8:	613e      	str	r6, [r7, #16]
 80017da:	eb63 0301 	sbc.w	r3, r3, r1
 80017de:	617b      	str	r3, [r7, #20]
 80017e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80017e4:	460b      	mov	r3, r1
 80017e6:	18e3      	adds	r3, r4, r3
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	4613      	mov	r3, r2
 80017ec:	eb45 0303 	adc.w	r3, r5, r3
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80017f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	4413      	add	r3, r2
 80017fa:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80017fe:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001802:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001804:	3301      	adds	r3, #1
 8001806:	647b      	str	r3, [r7, #68]	@ 0x44
 8001808:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800180a:	2b03      	cmp	r3, #3
 800180c:	f67f af79 	bls.w	8001702 <masked_mul_arithmetic+0x68>
    for (size_t i = 0; i < MASKING_N; i++) {
 8001810:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001812:	3301      	adds	r3, #1
 8001814:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001816:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001818:	2b03      	cmp	r3, #3
 800181a:	f67f af6e 	bls.w	80016fa <masked_mul_arithmetic+0x60>
        }
    }
}
 800181e:	bf00      	nop
 8001820:	bf00      	nop
 8001822:	3750      	adds	r7, #80	@ 0x50
 8001824:	46bd      	mov	sp, r7
 8001826:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800182a:	4770      	bx	lr

0800182c <masked_neg_arithmetic>:

void masked_neg_arithmetic(masked_uint64_t *out,
                const masked_uint64_t *a) {
 800182c:	b4b0      	push	{r4, r5, r7}
 800182e:	b085      	sub	sp, #20
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	e012      	b.n	8001862 <masked_neg_arithmetic+0x36>
        out->share[i] = -a->share[i];
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	4413      	add	r3, r2
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	2100      	movs	r1, #0
 800184a:	4254      	negs	r4, r2
 800184c:	eb61 0503 	sbc.w	r5, r1, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	4413      	add	r3, r2
 8001858:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b03      	cmp	r3, #3
 8001866:	d9e9      	bls.n	800183c <masked_neg_arithmetic+0x10>
    }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3714      	adds	r7, #20
 800186e:	46bd      	mov	sp, r7
 8001870:	bcb0      	pop	{r4, r5, r7}
 8001872:	4770      	bx	lr

08001874 <masked_theta_arithmetic>:
}


// ~~~ ARITHMETIC IMPLEMENTATION ~~~

void masked_theta_arithmetic(masked_uint64_t state[5][5]) {
 8001874:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001878:	b0dc      	sub	sp, #368	@ 0x170
 800187a:	af00      	add	r7, sp, #0
 800187c:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001880:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001884:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};
 8001886:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800188a:	22a0      	movs	r2, #160	@ 0xa0
 800188c:	2100      	movs	r1, #0
 800188e:	4618      	mov	r0, r3
 8001890:	f009 fb52 	bl	800af38 <memset>
    masked_uint64_t D[5] = {0};
 8001894:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001898:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800189c:	4618      	mov	r0, r3
 800189e:	23a0      	movs	r3, #160	@ 0xa0
 80018a0:	461a      	mov	r2, r3
 80018a2:	2100      	movs	r1, #0
 80018a4:	f009 fb48 	bl	800af38 <memset>

    for (int x = 0; x < 5; x++) {
 80018a8:	2300      	movs	r3, #0
 80018aa:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 80018ae:	e04d      	b.n	800194c <masked_theta_arithmetic+0xd8>
        C[x] = state[x][0];
 80018b0:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	015b      	lsls	r3, r3, #5
 80018bc:	461a      	mov	r2, r3
 80018be:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80018c2:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	441a      	add	r2, r3
 80018ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80018ce:	015b      	lsls	r3, r3, #5
 80018d0:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80018d4:	443b      	add	r3, r7
 80018d6:	3bc8      	subs	r3, #200	@ 0xc8
 80018d8:	461c      	mov	r4, r3
 80018da:	4615      	mov	r5, r2
 80018dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80018de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80018e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80018e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 80018e8:	2301      	movs	r3, #1
 80018ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 80018ee:	e024      	b.n	800193a <masked_theta_arithmetic+0xc6>
            masked_add_arithmetic(&C[x], &C[x], &state[x][y]);
 80018f0:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 80018f4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80018f8:	015b      	lsls	r3, r3, #5
 80018fa:	18d0      	adds	r0, r2, r3
 80018fc:	f107 02a8 	add.w	r2, r7, #168	@ 0xa8
 8001900:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	18d1      	adds	r1, r2, r3
 8001908:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	015b      	lsls	r3, r3, #5
 8001914:	461a      	mov	r2, r3
 8001916:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 800191a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	441a      	add	r2, r3
 8001922:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001926:	015b      	lsls	r3, r3, #5
 8001928:	4413      	add	r3, r2
 800192a:	461a      	mov	r2, r3
 800192c:	f7ff fe8b 	bl	8001646 <masked_add_arithmetic>
        for (int y = 1; y < 5; y++) {
 8001930:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001934:	3301      	adds	r3, #1
 8001936:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800193a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800193e:	2b04      	cmp	r3, #4
 8001940:	ddd6      	ble.n	80018f0 <masked_theta_arithmetic+0x7c>
    for (int x = 0; x < 5; x++) {
 8001942:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001946:	3301      	adds	r3, #1
 8001948:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 800194c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001950:	2b04      	cmp	r3, #4
 8001952:	ddad      	ble.n	80018b0 <masked_theta_arithmetic+0x3c>
        }
    }

    for (int x = 0; x < 5; x++) {
 8001954:	2300      	movs	r3, #0
 8001956:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 800195a:	e069      	b.n	8001a30 <masked_theta_arithmetic+0x1bc>
        for (int i = 0; i < MASKING_N; i++) {
 800195c:	2300      	movs	r3, #0
 800195e:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001962:	e05c      	b.n	8001a1e <masked_theta_arithmetic+0x1aa>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 8001964:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001968:	1c59      	adds	r1, r3, #1
 800196a:	4b59      	ldr	r3, [pc, #356]	@ (8001ad0 <masked_theta_arithmetic+0x25c>)
 800196c:	fb83 2301 	smull	r2, r3, r3, r1
 8001970:	105a      	asrs	r2, r3, #1
 8001972:	17cb      	asrs	r3, r1, #31
 8001974:	1ad2      	subs	r2, r2, r3
 8001976:	4613      	mov	r3, r2
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	4413      	add	r3, r2
 800197c:	1aca      	subs	r2, r1, r3
 800197e:	0092      	lsls	r2, r2, #2
 8001980:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 800198c:	443b      	add	r3, r7
 800198e:	3bc8      	subs	r3, #200	@ 0xc8
 8001990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001994:	e9c7 2354 	strd	r2, r3, [r7, #336]	@ 0x150
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> 63);
 8001998:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800199c:	0fda      	lsrs	r2, r3, #31
 800199e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	ea42 0b03 	orr.w	fp, r2, r3
 80019a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80019ac:	0fda      	lsrs	r2, r3, #31
 80019ae:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	ea42 0a03 	orr.w	sl, r2, r3
 80019b8:	e9c7 ab52 	strd	sl, fp, [r7, #328]	@ 0x148
            D[x].share[i] = C[(x + 4) % 5].share[i] + rot; // additive domain
 80019bc:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80019c0:	1d19      	adds	r1, r3, #4
 80019c2:	4b43      	ldr	r3, [pc, #268]	@ (8001ad0 <masked_theta_arithmetic+0x25c>)
 80019c4:	fb83 2301 	smull	r2, r3, r3, r1
 80019c8:	105a      	asrs	r2, r3, #1
 80019ca:	17cb      	asrs	r3, r1, #31
 80019cc:	1ad2      	subs	r2, r2, r3
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	1aca      	subs	r2, r1, r3
 80019d6:	0092      	lsls	r2, r2, #2
 80019d8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 80019dc:	4413      	add	r3, r2
 80019de:	00db      	lsls	r3, r3, #3
 80019e0:	f503 73b8 	add.w	r3, r3, #368	@ 0x170
 80019e4:	443b      	add	r3, r7
 80019e6:	3bc8      	subs	r3, #200	@ 0xc8
 80019e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80019ec:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	@ 0x148
 80019f0:	eb10 0802 	adds.w	r8, r0, r2
 80019f4:	eb41 0903 	adc.w	r9, r1, r3
 80019f8:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 80019fc:	f5a3 72b4 	sub.w	r2, r3, #360	@ 0x168
 8001a00:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a04:	0099      	lsls	r1, r3, #2
 8001a06:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a0a:	440b      	add	r3, r1
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	4413      	add	r3, r2
 8001a10:	e9c3 8900 	strd	r8, r9, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 8001a14:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
 8001a1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	dd9e      	ble.n	8001964 <masked_theta_arithmetic+0xf0>
    for (int x = 0; x < 5; x++) {
 8001a26:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001a30:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	dd91      	ble.n	800195c <masked_theta_arithmetic+0xe8>
        }
    }

    for (int x = 0; x < 5; x++) {
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001a3e:	e03c      	b.n	8001aba <masked_theta_arithmetic+0x246>
        for (int y = 0; y < 5; y++) {
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001a46:	e02f      	b.n	8001aa8 <masked_theta_arithmetic+0x234>
            masked_add_arithmetic(&state[x][y], &state[x][y], &D[x]);
 8001a48:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4413      	add	r3, r2
 8001a52:	015b      	lsls	r3, r3, #5
 8001a54:	461a      	mov	r2, r3
 8001a56:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a5a:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	441a      	add	r2, r3
 8001a62:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001a66:	015b      	lsls	r3, r3, #5
 8001a68:	18d0      	adds	r0, r2, r3
 8001a6a:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	015b      	lsls	r3, r3, #5
 8001a76:	461a      	mov	r2, r3
 8001a78:	f507 73b8 	add.w	r3, r7, #368	@ 0x170
 8001a7c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	441a      	add	r2, r3
 8001a84:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001a88:	015b      	lsls	r3, r3, #5
 8001a8a:	18d1      	adds	r1, r2, r3
 8001a8c:	f107 0208 	add.w	r2, r7, #8
 8001a90:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001a94:	015b      	lsls	r3, r3, #5
 8001a96:	4413      	add	r3, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	f7ff fdd4 	bl	8001646 <masked_add_arithmetic>
        for (int y = 0; y < 5; y++) {
 8001a9e:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001aa8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001aac:	2b04      	cmp	r3, #4
 8001aae:	ddcb      	ble.n	8001a48 <masked_theta_arithmetic+0x1d4>
    for (int x = 0; x < 5; x++) {
 8001ab0:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001aba:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	ddbe      	ble.n	8001a40 <masked_theta_arithmetic+0x1cc>
        }
    }
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	f507 77b8 	add.w	r7, r7, #368	@ 0x170
 8001aca:	46bd      	mov	sp, r7
 8001acc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ad0:	66666667 	.word	0x66666667

08001ad4 <masked_rho_arithmetic>:

void masked_rho_arithmetic(masked_uint64_t state[5][5]) {
 8001ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001ad8:	b088      	sub	sp, #32
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	60f8      	str	r0, [r7, #12]
    for (int x = 0; x < 5; x++) {
 8001ade:	2100      	movs	r1, #0
 8001ae0:	61f9      	str	r1, [r7, #28]
 8001ae2:	e075      	b.n	8001bd0 <masked_rho_arithmetic+0xfc>
        for (int y = 0; y < 5; y++) {
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	61b9      	str	r1, [r7, #24]
 8001ae8:	e06c      	b.n	8001bc4 <masked_rho_arithmetic+0xf0>
            uint8_t r = keccak_rho_offsets[x][y];
 8001aea:	4e3e      	ldr	r6, [pc, #248]	@ (8001be4 <masked_rho_arithmetic+0x110>)
 8001aec:	69f8      	ldr	r0, [r7, #28]
 8001aee:	4601      	mov	r1, r0
 8001af0:	0089      	lsls	r1, r1, #2
 8001af2:	4401      	add	r1, r0
 8001af4:	1870      	adds	r0, r6, r1
 8001af6:	69b9      	ldr	r1, [r7, #24]
 8001af8:	4401      	add	r1, r0
 8001afa:	7809      	ldrb	r1, [r1, #0]
 8001afc:	74f9      	strb	r1, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 8001afe:	2100      	movs	r1, #0
 8001b00:	6179      	str	r1, [r7, #20]
 8001b02:	e059      	b.n	8001bb8 <masked_rho_arithmetic+0xe4>
                state[x][y].share[i] = ROL64(state[x][y].share[i], r);
 8001b04:	69f8      	ldr	r0, [r7, #28]
 8001b06:	4601      	mov	r1, r0
 8001b08:	0089      	lsls	r1, r1, #2
 8001b0a:	4401      	add	r1, r0
 8001b0c:	0149      	lsls	r1, r1, #5
 8001b0e:	4608      	mov	r0, r1
 8001b10:	68f9      	ldr	r1, [r7, #12]
 8001b12:	4408      	add	r0, r1
 8001b14:	69b9      	ldr	r1, [r7, #24]
 8001b16:	008e      	lsls	r6, r1, #2
 8001b18:	6979      	ldr	r1, [r7, #20]
 8001b1a:	4431      	add	r1, r6
 8001b1c:	00c9      	lsls	r1, r1, #3
 8001b1e:	4401      	add	r1, r0
 8001b20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b24:	f897 c013 	ldrb.w	ip, [r7, #19]
 8001b28:	69fe      	ldr	r6, [r7, #28]
 8001b2a:	4634      	mov	r4, r6
 8001b2c:	4626      	mov	r6, r4
 8001b2e:	00b6      	lsls	r6, r6, #2
 8001b30:	4426      	add	r6, r4
 8001b32:	0176      	lsls	r6, r6, #5
 8001b34:	46b6      	mov	lr, r6
 8001b36:	68fe      	ldr	r6, [r7, #12]
 8001b38:	eb06 0a0e 	add.w	sl, r6, lr
 8001b3c:	f1ac 0e20 	sub.w	lr, ip, #32
 8001b40:	f1cc 0620 	rsb	r6, ip, #32
 8001b44:	fa01 f40c 	lsl.w	r4, r1, ip
 8001b48:	607c      	str	r4, [r7, #4]
 8001b4a:	fa00 fe0e 	lsl.w	lr, r0, lr
 8001b4e:	687c      	ldr	r4, [r7, #4]
 8001b50:	ea44 040e 	orr.w	r4, r4, lr
 8001b54:	607c      	str	r4, [r7, #4]
 8001b56:	fa20 f606 	lsr.w	r6, r0, r6
 8001b5a:	687c      	ldr	r4, [r7, #4]
 8001b5c:	4334      	orrs	r4, r6
 8001b5e:	607c      	str	r4, [r7, #4]
 8001b60:	fa00 f40c 	lsl.w	r4, r0, ip
 8001b64:	603c      	str	r4, [r7, #0]
 8001b66:	f1cc 0600 	rsb	r6, ip, #0
 8001b6a:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 8001b6e:	f1c6 0e20 	rsb	lr, r6, #32
 8001b72:	f1a6 0c20 	sub.w	ip, r6, #32
 8001b76:	fa20 f206 	lsr.w	r2, r0, r6
 8001b7a:	fa01 fe0e 	lsl.w	lr, r1, lr
 8001b7e:	ea42 020e 	orr.w	r2, r2, lr
 8001b82:	fa21 fc0c 	lsr.w	ip, r1, ip
 8001b86:	ea42 020c 	orr.w	r2, r2, ip
 8001b8a:	fa21 f306 	lsr.w	r3, r1, r6
 8001b8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b92:	4621      	mov	r1, r4
 8001b94:	ea41 0802 	orr.w	r8, r1, r2
 8001b98:	4629      	mov	r1, r5
 8001b9a:	ea41 0903 	orr.w	r9, r1, r3
 8001b9e:	4642      	mov	r2, r8
 8001ba0:	464b      	mov	r3, r9
 8001ba2:	69b9      	ldr	r1, [r7, #24]
 8001ba4:	0088      	lsls	r0, r1, #2
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	4401      	add	r1, r0
 8001baa:	00c9      	lsls	r1, r1, #3
 8001bac:	4451      	add	r1, sl
 8001bae:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001bb2:	6979      	ldr	r1, [r7, #20]
 8001bb4:	3101      	adds	r1, #1
 8001bb6:	6179      	str	r1, [r7, #20]
 8001bb8:	6979      	ldr	r1, [r7, #20]
 8001bba:	2903      	cmp	r1, #3
 8001bbc:	dda2      	ble.n	8001b04 <masked_rho_arithmetic+0x30>
        for (int y = 0; y < 5; y++) {
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	3101      	adds	r1, #1
 8001bc2:	61b9      	str	r1, [r7, #24]
 8001bc4:	69b9      	ldr	r1, [r7, #24]
 8001bc6:	2904      	cmp	r1, #4
 8001bc8:	dd8f      	ble.n	8001aea <masked_rho_arithmetic+0x16>
    for (int x = 0; x < 5; x++) {
 8001bca:	69f9      	ldr	r1, [r7, #28]
 8001bcc:	3101      	adds	r1, #1
 8001bce:	61f9      	str	r1, [r7, #28]
 8001bd0:	69f9      	ldr	r1, [r7, #28]
 8001bd2:	2904      	cmp	r1, #4
 8001bd4:	dd86      	ble.n	8001ae4 <masked_rho_arithmetic+0x10>
            }
        }
    }
}
 8001bd6:	bf00      	nop
 8001bd8:	bf00      	nop
 8001bda:	3720      	adds	r7, #32
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001be2:	bf00      	nop
 8001be4:	0800bce0 	.word	0x0800bce0

08001be8 <masked_pi_arithmetic>:

void masked_pi_arithmetic(masked_uint64_t state[5][5]) {
 8001be8:	b4b0      	push	{r4, r5, r7}
 8001bea:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 8001bee:	af00      	add	r7, sp, #0
 8001bf0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001bf4:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001bf8:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];
    for (int x = 0; x < 5; ++x)
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001c00:	e038      	b.n	8001c74 <masked_pi_arithmetic+0x8c>
        for (int y = 0; y < 5; ++y)
 8001c02:	2300      	movs	r3, #0
 8001c04:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001c08:	e02b      	b.n	8001c62 <masked_pi_arithmetic+0x7a>
            tmp[x][y] = state[x][y];
 8001c0a:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	015b      	lsls	r3, r3, #5
 8001c16:	461a      	mov	r2, r3
 8001c18:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001c1c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1899      	adds	r1, r3, r2
 8001c24:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001c28:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 8001c2c:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 8001c3a:	4413      	add	r3, r2
 8001c3c:	015b      	lsls	r3, r3, #5
 8001c3e:	18c2      	adds	r2, r0, r3
 8001c40:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001c44:	015b      	lsls	r3, r3, #5
 8001c46:	440b      	add	r3, r1
 8001c48:	4614      	mov	r4, r2
 8001c4a:	461d      	mov	r5, r3
 8001c4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001c54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8001c58:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001c62:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	ddcf      	ble.n	8001c0a <masked_pi_arithmetic+0x22>
    for (int x = 0; x < 5; ++x)
 8001c6a:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c6e:	3301      	adds	r3, #1
 8001c70:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001c74:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001c78:	2b04      	cmp	r3, #4
 8001c7a:	ddc2      	ble.n	8001c02 <masked_pi_arithmetic+0x1a>

    for (int x = 0; x < 5; ++x)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001c82:	e051      	b.n	8001d28 <masked_pi_arithmetic+0x140>
        for (int y = 0; y < 5; ++y) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001c8a:	e044      	b.n	8001d16 <masked_pi_arithmetic+0x12e>
            int new_x = y;
 8001c8c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001c90:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;
 8001c94:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001c98:	0059      	lsls	r1, r3, #1
 8001c9a:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	4413      	add	r3, r2
 8001ca4:	18ca      	adds	r2, r1, r3
 8001ca6:	4b26      	ldr	r3, [pc, #152]	@ (8001d40 <masked_pi_arithmetic+0x158>)
 8001ca8:	fb83 1302 	smull	r1, r3, r3, r2
 8001cac:	1059      	asrs	r1, r3, #1
 8001cae:	17d3      	asrs	r3, r2, #31
 8001cb0:	1ac9      	subs	r1, r1, r3
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];
 8001cbe:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	015b      	lsls	r3, r3, #5
 8001cca:	461a      	mov	r2, r3
 8001ccc:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001cd0:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	441a      	add	r2, r3
 8001cd8:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001cdc:	015b      	lsls	r3, r3, #5
 8001cde:	18d0      	adds	r0, r2, r3
 8001ce0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001ce4:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001ce8:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001cec:	4613      	mov	r3, r2
 8001cee:	009b      	lsls	r3, r3, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001cf6:	4413      	add	r3, r2
 8001cf8:	015b      	lsls	r3, r3, #5
 8001cfa:	440b      	add	r3, r1
 8001cfc:	4604      	mov	r4, r0
 8001cfe:	461d      	mov	r5, r3
 8001d00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d04:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001d08:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8001d0c:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d10:	3301      	adds	r3, #1
 8001d12:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001d16:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001d1a:	2b04      	cmp	r3, #4
 8001d1c:	ddb6      	ble.n	8001c8c <masked_pi_arithmetic+0xa4>
    for (int x = 0; x < 5; ++x)
 8001d1e:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001d22:	3301      	adds	r3, #1
 8001d24:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001d28:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	dda9      	ble.n	8001c84 <masked_pi_arithmetic+0x9c>
        }
}
 8001d30:	bf00      	nop
 8001d32:	bf00      	nop
 8001d34:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bcb0      	pop	{r4, r5, r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	66666667 	.word	0x66666667

08001d44 <masked_chi_arithmetic>:

void masked_chi_arithmetic(masked_uint64_t out[5][5], const masked_uint64_t in[5][5],
                           const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b09a      	sub	sp, #104	@ 0x68
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
    for (int y = 0; y < 5; y++) {
 8001d50:	2300      	movs	r3, #0
 8001d52:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d54:	e070      	b.n	8001e38 <masked_chi_arithmetic+0xf4>
        for (int x = 0; x < 5; x++) {
 8001d56:	2300      	movs	r3, #0
 8001d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8001d5a:	e067      	b.n	8001e2c <masked_chi_arithmetic+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8001d5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d5e:	4613      	mov	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	4413      	add	r3, r2
 8001d64:	015b      	lsls	r3, r3, #5
 8001d66:	461a      	mov	r2, r3
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	441a      	add	r2, r3
 8001d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d6e:	015b      	lsls	r3, r3, #5
 8001d70:	4413      	add	r3, r2
 8001d72:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8001d74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001d76:	1c5a      	adds	r2, r3, #1
 8001d78:	4b33      	ldr	r3, [pc, #204]	@ (8001e48 <masked_chi_arithmetic+0x104>)
 8001d7a:	fb83 1302 	smull	r1, r3, r3, r2
 8001d7e:	1059      	asrs	r1, r3, #1
 8001d80:	17d3      	asrs	r3, r2, #31
 8001d82:	1ac9      	subs	r1, r1, r3
 8001d84:	460b      	mov	r3, r1
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	440b      	add	r3, r1
 8001d8a:	1ad1      	subs	r1, r2, r3
 8001d8c:	460a      	mov	r2, r1
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	015b      	lsls	r3, r3, #5
 8001d96:	461a      	mov	r2, r3
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	441a      	add	r2, r3
 8001d9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001d9e:	015b      	lsls	r3, r3, #5
 8001da0:	4413      	add	r3, r2
 8001da2:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8001da4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001da6:	1c9a      	adds	r2, r3, #2
 8001da8:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <masked_chi_arithmetic+0x104>)
 8001daa:	fb83 1302 	smull	r1, r3, r3, r2
 8001dae:	1059      	asrs	r1, r3, #1
 8001db0:	17d3      	asrs	r3, r2, #31
 8001db2:	1ac9      	subs	r1, r1, r3
 8001db4:	460b      	mov	r3, r1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	440b      	add	r3, r1
 8001dba:	1ad1      	subs	r1, r2, r3
 8001dbc:	460a      	mov	r2, r1
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	4413      	add	r3, r2
 8001dc4:	015b      	lsls	r3, r3, #5
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	441a      	add	r2, r3
 8001dcc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001dce:	015b      	lsls	r3, r3, #5
 8001dd0:	4413      	add	r3, r2
 8001dd2:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_neg_arithmetic(&t1, b);
 8001dd4:	f107 0310 	add.w	r3, r7, #16
 8001dd8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff fd26 	bl	800182c <masked_neg_arithmetic>
            masked_mul_arithmetic(&t2, &t1, c, r[x][y]);
 8001de0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	01db      	lsls	r3, r3, #7
 8001dea:	461a      	mov	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	441a      	add	r2, r3
 8001df0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001df2:	01db      	lsls	r3, r3, #7
 8001df4:	4413      	add	r3, r2
 8001df6:	f107 0110 	add.w	r1, r7, #16
 8001dfa:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001dfe:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001e00:	f7ff fc4b 	bl	800169a <masked_mul_arithmetic>
            masked_add_arithmetic(&out[x][y], a, &t2);
 8001e04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001e06:	4613      	mov	r3, r2
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	015b      	lsls	r3, r3, #5
 8001e0e:	461a      	mov	r2, r3
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	441a      	add	r2, r3
 8001e14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e16:	015b      	lsls	r3, r3, #5
 8001e18:	4413      	add	r3, r2
 8001e1a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001e1e:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7ff fc10 	bl	8001646 <masked_add_arithmetic>
        for (int x = 0; x < 5; x++) {
 8001e26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e28:	3301      	adds	r3, #1
 8001e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8001e2c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e2e:	2b04      	cmp	r3, #4
 8001e30:	dd94      	ble.n	8001d5c <masked_chi_arithmetic+0x18>
    for (int y = 0; y < 5; y++) {
 8001e32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e34:	3301      	adds	r3, #1
 8001e36:	667b      	str	r3, [r7, #100]	@ 0x64
 8001e38:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001e3a:	2b04      	cmp	r3, #4
 8001e3c:	dd8b      	ble.n	8001d56 <masked_chi_arithmetic+0x12>
        }
    }
}
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
 8001e42:	3768      	adds	r7, #104	@ 0x68
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	66666667 	.word	0x66666667

08001e4c <masked_iota_arithmetic>:

void masked_iota_arithmetic(masked_uint64_t state[5][5], uint64_t rc) {
 8001e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e50:	b08c      	sub	sp, #48	@ 0x30
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	60f8      	str	r0, [r7, #12]
 8001e56:	e9c7 2300 	strd	r2, r3, [r7]
    uint64_t value = 0;
 8001e5a:	f04f 0200 	mov.w	r2, #0
 8001e5e:	f04f 0300 	mov.w	r3, #0
 8001e62:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8001e66:	2300      	movs	r3, #0
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e6a:	e010      	b.n	8001e8e <masked_iota_arithmetic+0x42>
        value += state[0][0].share[i];
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	00db      	lsls	r3, r3, #3
 8001e72:	4413      	add	r3, r2
 8001e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e78:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e7c:	eb10 0a02 	adds.w	sl, r0, r2
 8001e80:	eb41 0b03 	adc.w	fp, r1, r3
 8001e84:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	2b03      	cmp	r3, #3
 8001e92:	ddeb      	ble.n	8001e6c <masked_iota_arithmetic+0x20>
    value += rc;
 8001e94:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001e98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e9c:	eb10 0802 	adds.w	r8, r0, r2
 8001ea0:	eb41 0903 	adc.w	r9, r1, r3
 8001ea4:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    uint64_t acc = value;
 8001ea8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001eac:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	e019      	b.n	8001eea <masked_iota_arithmetic+0x9e>
        state[0][0].share[i] = get_random64();
 8001eb6:	f7fe fb71 	bl	800059c <get_random64>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	00c9      	lsls	r1, r1, #3
 8001ec4:	4401      	add	r1, r0
 8001ec6:	e9c1 2300 	strd	r2, r3, [r1]
        acc -= state[0][0].share[i];
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4413      	add	r3, r2
 8001ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ed6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001eda:	1a84      	subs	r4, r0, r2
 8001edc:	eb61 0503 	sbc.w	r5, r1, r3
 8001ee0:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	617b      	str	r3, [r7, #20]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	dde2      	ble.n	8001eb6 <masked_iota_arithmetic+0x6a>
    }
    state[0][0].share[0] = acc;
 8001ef0:	68f9      	ldr	r1, [r7, #12]
 8001ef2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ef6:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001efa:	bf00      	nop
 8001efc:	3730      	adds	r7, #48	@ 0x30
 8001efe:	46bd      	mov	sp, r7
 8001f00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001f04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	607b      	str	r3, [r7, #4]
 8001f0e:	4b10      	ldr	r3, [pc, #64]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f12:	4a0f      	ldr	r2, [pc, #60]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f18:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f22:	607b      	str	r3, [r7, #4]
 8001f24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	603b      	str	r3, [r7, #0]
 8001f2a:	4b09      	ldr	r3, [pc, #36]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2e:	4a08      	ldr	r2, [pc, #32]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f36:	4b06      	ldr	r3, [pc, #24]	@ (8001f50 <HAL_MspInit+0x4c>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	603b      	str	r3, [r7, #0]
 8001f40:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001f42:	2007      	movs	r0, #7
 8001f44:	f000 fbe4 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	40023800 	.word	0x40023800

08001f54 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08a      	sub	sp, #40	@ 0x28
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0314 	add.w	r3, r7, #20
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	@ (8001fd8 <HAL_I2C_MspInit+0x84>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d12c      	bne.n	8001fd0 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
 8001f7a:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <HAL_I2C_MspInit+0x88>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f7e:	4a17      	ldr	r2, [pc, #92]	@ (8001fdc <HAL_I2C_MspInit+0x88>)
 8001f80:	f043 0302 	orr.w	r3, r3, #2
 8001f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f86:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <HAL_I2C_MspInit+0x88>)
 8001f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8a:	f003 0302 	and.w	r3, r3, #2
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001f92:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8001f96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f98:	2312      	movs	r3, #18
 8001f9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001fa4:	2304      	movs	r3, #4
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fa8:	f107 0314 	add.w	r3, r7, #20
 8001fac:	4619      	mov	r1, r3
 8001fae:	480c      	ldr	r0, [pc, #48]	@ (8001fe0 <HAL_I2C_MspInit+0x8c>)
 8001fb0:	f000 fbf0 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b08      	ldr	r3, [pc, #32]	@ (8001fdc <HAL_I2C_MspInit+0x88>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fbc:	4a07      	ldr	r2, [pc, #28]	@ (8001fdc <HAL_I2C_MspInit+0x88>)
 8001fbe:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fc4:	4b05      	ldr	r3, [pc, #20]	@ (8001fdc <HAL_I2C_MspInit+0x88>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001fd0:	bf00      	nop
 8001fd2:	3728      	adds	r7, #40	@ 0x28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40005400 	.word	0x40005400
 8001fdc:	40023800 	.word	0x40023800
 8001fe0:	40020400 	.word	0x40020400

08001fe4 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08e      	sub	sp, #56	@ 0x38
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	605a      	str	r2, [r3, #4]
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	60da      	str	r2, [r3, #12]
 8001ffa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001ffc:	f107 0314 	add.w	r3, r7, #20
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	605a      	str	r2, [r3, #4]
 8002006:	609a      	str	r2, [r3, #8]
 8002008:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a31      	ldr	r2, [pc, #196]	@ (80020d4 <HAL_I2S_MspInit+0xf0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d15a      	bne.n	80020ca <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002014:	2301      	movs	r3, #1
 8002016:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002018:	23c0      	movs	r3, #192	@ 0xc0
 800201a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800201c:	2302      	movs	r3, #2
 800201e:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4618      	mov	r0, r3
 8002026:	f004 f91b 	bl	8006260 <HAL_RCCEx_PeriphCLKConfig>
 800202a:	4603      	mov	r3, r0
 800202c:	2b00      	cmp	r3, #0
 800202e:	d001      	beq.n	8002034 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8002030:	f7ff fac0 	bl	80015b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	4b27      	ldr	r3, [pc, #156]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 800203a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203c:	4a26      	ldr	r2, [pc, #152]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 800203e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002042:	6413      	str	r3, [r2, #64]	@ 0x40
 8002044:	4b24      	ldr	r3, [pc, #144]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 8002046:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002048:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	4b20      	ldr	r3, [pc, #128]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 8002056:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002058:	4a1f      	ldr	r2, [pc, #124]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 800205a:	f043 0301 	orr.w	r3, r3, #1
 800205e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002060:	4b1d      	ldr	r3, [pc, #116]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 8002062:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002064:	f003 0301 	and.w	r3, r3, #1
 8002068:	60fb      	str	r3, [r7, #12]
 800206a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206c:	2300      	movs	r3, #0
 800206e:	60bb      	str	r3, [r7, #8]
 8002070:	4b19      	ldr	r3, [pc, #100]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a18      	ldr	r2, [pc, #96]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 8002076:	f043 0304 	orr.w	r3, r3, #4
 800207a:	6313      	str	r3, [r2, #48]	@ 0x30
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_I2S_MspInit+0xf4>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	60bb      	str	r3, [r7, #8]
 8002086:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002088:	2310      	movs	r3, #16
 800208a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002094:	2300      	movs	r3, #0
 8002096:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002098:	2306      	movs	r3, #6
 800209a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800209c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020a0:	4619      	mov	r1, r3
 80020a2:	480e      	ldr	r0, [pc, #56]	@ (80020dc <HAL_I2S_MspInit+0xf8>)
 80020a4:	f000 fb76 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80020a8:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020ae:	2302      	movs	r3, #2
 80020b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80020ba:	2306      	movs	r3, #6
 80020bc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020c2:	4619      	mov	r1, r3
 80020c4:	4806      	ldr	r0, [pc, #24]	@ (80020e0 <HAL_I2S_MspInit+0xfc>)
 80020c6:	f000 fb65 	bl	8002794 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80020ca:	bf00      	nop
 80020cc:	3738      	adds	r7, #56	@ 0x38
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40003c00 	.word	0x40003c00
 80020d8:	40023800 	.word	0x40023800
 80020dc:	40020000 	.word	0x40020000
 80020e0:	40020800 	.word	0x40020800

080020e4 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002120 <HAL_RNG_MspInit+0x3c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d10d      	bne.n	8002112 <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_RNG_MspInit+0x40>)
 80020fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020fe:	4a09      	ldr	r2, [pc, #36]	@ (8002124 <HAL_RNG_MspInit+0x40>)
 8002100:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002104:	6353      	str	r3, [r2, #52]	@ 0x34
 8002106:	4b07      	ldr	r3, [pc, #28]	@ (8002124 <HAL_RNG_MspInit+0x40>)
 8002108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 8002112:	bf00      	nop
 8002114:	3714      	adds	r7, #20
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	50060800 	.word	0x50060800
 8002124:	40023800 	.word	0x40023800

08002128 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	@ 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002130:	f107 0314 	add.w	r3, r7, #20
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	605a      	str	r2, [r3, #4]
 800213a:	609a      	str	r2, [r3, #8]
 800213c:	60da      	str	r2, [r3, #12]
 800213e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a19      	ldr	r2, [pc, #100]	@ (80021ac <HAL_SPI_MspInit+0x84>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12b      	bne.n	80021a2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	613b      	str	r3, [r7, #16]
 800214e:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <HAL_SPI_MspInit+0x88>)
 8002150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002152:	4a17      	ldr	r2, [pc, #92]	@ (80021b0 <HAL_SPI_MspInit+0x88>)
 8002154:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002158:	6453      	str	r3, [r2, #68]	@ 0x44
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <HAL_SPI_MspInit+0x88>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800215e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002162:	613b      	str	r3, [r7, #16]
 8002164:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	4b11      	ldr	r3, [pc, #68]	@ (80021b0 <HAL_SPI_MspInit+0x88>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216e:	4a10      	ldr	r2, [pc, #64]	@ (80021b0 <HAL_SPI_MspInit+0x88>)
 8002170:	f043 0301 	orr.w	r3, r3, #1
 8002174:	6313      	str	r3, [r2, #48]	@ 0x30
 8002176:	4b0e      	ldr	r3, [pc, #56]	@ (80021b0 <HAL_SPI_MspInit+0x88>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	f003 0301 	and.w	r3, r3, #1
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002182:	23e0      	movs	r3, #224	@ 0xe0
 8002184:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002186:	2302      	movs	r3, #2
 8002188:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218a:	2300      	movs	r3, #0
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218e:	2300      	movs	r3, #0
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002192:	2305      	movs	r3, #5
 8002194:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4805      	ldr	r0, [pc, #20]	@ (80021b4 <HAL_SPI_MspInit+0x8c>)
 800219e:	f000 faf9 	bl	8002794 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80021a2:	bf00      	nop
 80021a4:	3728      	adds	r7, #40	@ 0x28
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40013000 	.word	0x40013000
 80021b0:	40023800 	.word	0x40023800
 80021b4:	40020000 	.word	0x40020000

080021b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	@ 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_UART_MspInit+0x84>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d12b      	bne.n	8002232 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b18      	ldr	r3, [pc, #96]	@ (8002240 <HAL_UART_MspInit+0x88>)
 80021e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e2:	4a17      	ldr	r2, [pc, #92]	@ (8002240 <HAL_UART_MspInit+0x88>)
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80021ea:	4b15      	ldr	r3, [pc, #84]	@ (8002240 <HAL_UART_MspInit+0x88>)
 80021ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
 80021fa:	4b11      	ldr	r3, [pc, #68]	@ (8002240 <HAL_UART_MspInit+0x88>)
 80021fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fe:	4a10      	ldr	r2, [pc, #64]	@ (8002240 <HAL_UART_MspInit+0x88>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	6313      	str	r3, [r2, #48]	@ 0x30
 8002206:	4b0e      	ldr	r3, [pc, #56]	@ (8002240 <HAL_UART_MspInit+0x88>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	f003 0301 	and.w	r3, r3, #1
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002212:	230c      	movs	r3, #12
 8002214:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800221e:	2303      	movs	r3, #3
 8002220:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002222:	2307      	movs	r3, #7
 8002224:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0314 	add.w	r3, r7, #20
 800222a:	4619      	mov	r1, r3
 800222c:	4805      	ldr	r0, [pc, #20]	@ (8002244 <HAL_UART_MspInit+0x8c>)
 800222e:	f000 fab1 	bl	8002794 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	@ 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40004400 	.word	0x40004400
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000

08002248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002248:	b480      	push	{r7}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <NMI_Handler+0x4>

08002250 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002254:	bf00      	nop
 8002256:	e7fd      	b.n	8002254 <HardFault_Handler+0x4>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800225c:	bf00      	nop
 800225e:	e7fd      	b.n	800225c <MemManage_Handler+0x4>

08002260 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002260:	b480      	push	{r7}
 8002262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002264:	bf00      	nop
 8002266:	e7fd      	b.n	8002264 <BusFault_Handler+0x4>

08002268 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <UsageFault_Handler+0x4>

08002270 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002274:	bf00      	nop
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800227e:	b480      	push	{r7}
 8002280:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr

0800228c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002290:	bf00      	nop
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800229e:	f000 f923 	bl	80024e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022a2:	bf00      	nop
 80022a4:	bd80      	pop	{r7, pc}
	...

080022a8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80022ac:	4802      	ldr	r0, [pc, #8]	@ (80022b8 <OTG_FS_IRQHandler+0x10>)
 80022ae:	f000 ff07 	bl	80030c0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200005d4 	.word	0x200005d4

080022bc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b086      	sub	sp, #24
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	e00a      	b.n	80022e4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022ce:	f3af 8000 	nop.w
 80022d2:	4601      	mov	r1, r0
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	60ba      	str	r2, [r7, #8]
 80022da:	b2ca      	uxtb	r2, r1
 80022dc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	3301      	adds	r3, #1
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	697a      	ldr	r2, [r7, #20]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	dbf0      	blt.n	80022ce <_read+0x12>
  }

  return len;
 80022ec:	687b      	ldr	r3, [r7, #4]
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002302:	4618      	mov	r0, r3
 8002304:	370c      	adds	r7, #12
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr

0800230e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
 8002316:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800231e:	605a      	str	r2, [r3, #4]
  return 0;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <_isatty>:

int _isatty(int file)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002336:	2301      	movs	r3, #1
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002350:	2300      	movs	r3, #0
}
 8002352:	4618      	mov	r0, r3
 8002354:	3714      	adds	r7, #20
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
	...

08002360 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002368:	4a14      	ldr	r2, [pc, #80]	@ (80023bc <_sbrk+0x5c>)
 800236a:	4b15      	ldr	r3, [pc, #84]	@ (80023c0 <_sbrk+0x60>)
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002374:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <_sbrk+0x64>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d102      	bne.n	8002382 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800237c:	4b11      	ldr	r3, [pc, #68]	@ (80023c4 <_sbrk+0x64>)
 800237e:	4a12      	ldr	r2, [pc, #72]	@ (80023c8 <_sbrk+0x68>)
 8002380:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <_sbrk+0x64>)
 8002384:	681a      	ldr	r2, [r3, #0]
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4413      	add	r3, r2
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	429a      	cmp	r2, r3
 800238e:	d207      	bcs.n	80023a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002390:	f008 fe30 	bl	800aff4 <__errno>
 8002394:	4603      	mov	r3, r0
 8002396:	220c      	movs	r2, #12
 8002398:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800239a:	f04f 33ff 	mov.w	r3, #4294967295
 800239e:	e009      	b.n	80023b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023a0:	4b08      	ldr	r3, [pc, #32]	@ (80023c4 <_sbrk+0x64>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023a6:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <_sbrk+0x64>)
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4413      	add	r3, r2
 80023ae:	4a05      	ldr	r2, [pc, #20]	@ (80023c4 <_sbrk+0x64>)
 80023b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023b2:	68fb      	ldr	r3, [r7, #12]
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3718      	adds	r7, #24
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20020000 	.word	0x20020000
 80023c0:	00000400 	.word	0x00000400
 80023c4:	200001f0 	.word	0x200001f0
 80023c8:	20000b00 	.word	0x20000b00

080023cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023d0:	4b06      	ldr	r3, [pc, #24]	@ (80023ec <SystemInit+0x20>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023d6:	4a05      	ldr	r2, [pc, #20]	@ (80023ec <SystemInit+0x20>)
 80023d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002428 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023f4:	f7ff ffea 	bl	80023cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023f8:	480c      	ldr	r0, [pc, #48]	@ (800242c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023fa:	490d      	ldr	r1, [pc, #52]	@ (8002430 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002434 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002400:	e002      	b.n	8002408 <LoopCopyDataInit>

08002402 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002402:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002404:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002406:	3304      	adds	r3, #4

08002408 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002408:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800240a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800240c:	d3f9      	bcc.n	8002402 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800240e:	4a0a      	ldr	r2, [pc, #40]	@ (8002438 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002410:	4c0a      	ldr	r4, [pc, #40]	@ (800243c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002412:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002414:	e001      	b.n	800241a <LoopFillZerobss>

08002416 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002416:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002418:	3204      	adds	r2, #4

0800241a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800241a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800241c:	d3fb      	bcc.n	8002416 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800241e:	f008 fdef 	bl	800b000 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002422:	f7fe fe53 	bl	80010cc <main>
  bx  lr    
 8002426:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002428:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800242c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002430:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002434:	0800bd58 	.word	0x0800bd58
  ldr r2, =_sbss
 8002438:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 800243c:	20000b00 	.word	0x20000b00

08002440 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002440:	e7fe      	b.n	8002440 <ADC_IRQHandler>
	...

08002444 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002448:	4b0e      	ldr	r3, [pc, #56]	@ (8002484 <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0d      	ldr	r2, [pc, #52]	@ (8002484 <HAL_Init+0x40>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002452:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_Init+0x40>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a0a      	ldr	r2, [pc, #40]	@ (8002484 <HAL_Init+0x40>)
 800245a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800245e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002460:	4b08      	ldr	r3, [pc, #32]	@ (8002484 <HAL_Init+0x40>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a07      	ldr	r2, [pc, #28]	@ (8002484 <HAL_Init+0x40>)
 8002466:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800246a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800246c:	2003      	movs	r0, #3
 800246e:	f000 f94f 	bl	8002710 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002472:	2000      	movs	r0, #0
 8002474:	f000 f808 	bl	8002488 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002478:	f7ff fd44 	bl	8001f04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800247c:	2300      	movs	r3, #0
}
 800247e:	4618      	mov	r0, r3
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	40023c00 	.word	0x40023c00

08002488 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002490:	4b12      	ldr	r3, [pc, #72]	@ (80024dc <HAL_InitTick+0x54>)
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	4b12      	ldr	r3, [pc, #72]	@ (80024e0 <HAL_InitTick+0x58>)
 8002496:	781b      	ldrb	r3, [r3, #0]
 8002498:	4619      	mov	r1, r3
 800249a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800249e:	fbb3 f3f1 	udiv	r3, r3, r1
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4618      	mov	r0, r3
 80024a8:	f000 f967 	bl	800277a <HAL_SYSTICK_Config>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e00e      	b.n	80024d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b0f      	cmp	r3, #15
 80024ba:	d80a      	bhi.n	80024d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024bc:	2200      	movs	r2, #0
 80024be:	6879      	ldr	r1, [r7, #4]
 80024c0:	f04f 30ff 	mov.w	r0, #4294967295
 80024c4:	f000 f92f 	bl	8002726 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024c8:	4a06      	ldr	r2, [pc, #24]	@ (80024e4 <HAL_InitTick+0x5c>)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
 80024d0:	e000      	b.n	80024d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3708      	adds	r7, #8
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	20000000 	.word	0x20000000
 80024e0:	20000008 	.word	0x20000008
 80024e4:	20000004 	.word	0x20000004

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008
 800250c:	200001f4 	.word	0x200001f4

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	200001f4 	.word	0x200001f4

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	@ (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr
	...

080026cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026dc:	d301      	bcc.n	80026e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026de:	2301      	movs	r3, #1
 80026e0:	e00f      	b.n	8002702 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026e2:	4a0a      	ldr	r2, [pc, #40]	@ (800270c <SysTick_Config+0x40>)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026ea:	210f      	movs	r1, #15
 80026ec:	f04f 30ff 	mov.w	r0, #4294967295
 80026f0:	f7ff ff8e 	bl	8002610 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026f4:	4b05      	ldr	r3, [pc, #20]	@ (800270c <SysTick_Config+0x40>)
 80026f6:	2200      	movs	r2, #0
 80026f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026fa:	4b04      	ldr	r3, [pc, #16]	@ (800270c <SysTick_Config+0x40>)
 80026fc:	2207      	movs	r2, #7
 80026fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3708      	adds	r7, #8
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	e000e010 	.word	0xe000e010

08002710 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7ff ff29 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002726:	b580      	push	{r7, lr}
 8002728:	b086      	sub	sp, #24
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
 8002732:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002734:	2300      	movs	r3, #0
 8002736:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002738:	f7ff ff3e 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 800273c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68b9      	ldr	r1, [r7, #8]
 8002742:	6978      	ldr	r0, [r7, #20]
 8002744:	f7ff ff8e 	bl	8002664 <NVIC_EncodePriority>
 8002748:	4602      	mov	r2, r0
 800274a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800274e:	4611      	mov	r1, r2
 8002750:	4618      	mov	r0, r3
 8002752:	f7ff ff5d 	bl	8002610 <__NVIC_SetPriority>
}
 8002756:	bf00      	nop
 8002758:	3718      	adds	r7, #24
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}

0800275e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800275e:	b580      	push	{r7, lr}
 8002760:	b082      	sub	sp, #8
 8002762:	af00      	add	r7, sp, #0
 8002764:	4603      	mov	r3, r0
 8002766:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276c:	4618      	mov	r0, r3
 800276e:	f7ff ff31 	bl	80025d4 <__NVIC_EnableIRQ>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002782:	6878      	ldr	r0, [r7, #4]
 8002784:	f7ff ffa2 	bl	80026cc <SysTick_Config>
 8002788:	4603      	mov	r3, r0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
	...

08002794 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	@ 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e16b      	b.n	8002a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 815a 	bne.w	8002a82 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d005      	beq.n	80027e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d130      	bne.n	8002848 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68da      	ldr	r2, [r3, #12]
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800281c:	2201      	movs	r2, #1
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	43db      	mvns	r3, r3
 8002826:	69ba      	ldr	r2, [r7, #24]
 8002828:	4013      	ands	r3, r2
 800282a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	091b      	lsrs	r3, r3, #4
 8002832:	f003 0201 	and.w	r2, r3, #1
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	fa02 f303 	lsl.w	r3, r2, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4313      	orrs	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b03      	cmp	r3, #3
 8002852:	d017      	beq.n	8002884 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	2203      	movs	r2, #3
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	43db      	mvns	r3, r3
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	689a      	ldr	r2, [r3, #8]
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	4313      	orrs	r3, r2
 800287c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002884:	683b      	ldr	r3, [r7, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80b4 	beq.w	8002a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b60      	ldr	r3, [pc, #384]	@ (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	4a5f      	ldr	r2, [pc, #380]	@ (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002928:	6453      	str	r3, [r2, #68]	@ 0x44
 800292a:	4b5d      	ldr	r3, [pc, #372]	@ (8002aa0 <HAL_GPIO_Init+0x30c>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a5b      	ldr	r2, [pc, #364]	@ (8002aa4 <HAL_GPIO_Init+0x310>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a52      	ldr	r2, [pc, #328]	@ (8002aa8 <HAL_GPIO_Init+0x314>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <HAL_GPIO_Init+0x226>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a51      	ldr	r2, [pc, #324]	@ (8002aac <HAL_GPIO_Init+0x318>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x222>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a50      	ldr	r2, [pc, #320]	@ (8002ab0 <HAL_GPIO_Init+0x31c>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x21e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4f      	ldr	r2, [pc, #316]	@ (8002ab4 <HAL_GPIO_Init+0x320>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x21a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ab8 <HAL_GPIO_Init+0x324>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x216>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4d      	ldr	r2, [pc, #308]	@ (8002abc <HAL_GPIO_Init+0x328>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x212>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4c      	ldr	r2, [pc, #304]	@ (8002ac0 <HAL_GPIO_Init+0x32c>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4b      	ldr	r2, [pc, #300]	@ (8002ac4 <HAL_GPIO_Init+0x330>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x20a>
 800299a:	2307      	movs	r3, #7
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x228>
 800299e:	2308      	movs	r3, #8
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4935      	ldr	r1, [pc, #212]	@ (8002aa4 <HAL_GPIO_Init+0x310>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029da:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029fe:	4a32      	ldr	r2, [pc, #200]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a04:	4b30      	ldr	r3, [pc, #192]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a28:	4a27      	ldr	r2, [pc, #156]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002a2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002a58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ac8 <HAL_GPIO_Init+0x334>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae90 	bls.w	80027b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a90:	bf00      	nop
 8002a92:	bf00      	nop
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40013800 	.word	0x40013800
 8002aa8:	40020000 	.word	0x40020000
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	40020800 	.word	0x40020800
 8002ab4:	40020c00 	.word	0x40020c00
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40021400 	.word	0x40021400
 8002ac0:	40021800 	.word	0x40021800
 8002ac4:	40021c00 	.word	0x40021c00
 8002ac8:	40013c00 	.word	0x40013c00

08002acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	807b      	strh	r3, [r7, #2]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002adc:	787b      	ldrb	r3, [r7, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ae2:	887a      	ldrh	r2, [r7, #2]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ae8:	e003      	b.n	8002af2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002aea:	887b      	ldrh	r3, [r7, #2]
 8002aec:	041a      	lsls	r2, r3, #16
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	619a      	str	r2, [r3, #24]
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b086      	sub	sp, #24
 8002b02:	af02      	add	r7, sp, #8
 8002b04:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e059      	b.n	8002bc4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f007 fc3a 	bl	800a3a4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2203      	movs	r2, #3
 8002b34:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002b3e:	d102      	bne.n	8002b46 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 fa53 	bl	8006ff6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6818      	ldr	r0, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	7c1a      	ldrb	r2, [r3, #16]
 8002b58:	f88d 2000 	strb.w	r2, [sp]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b60:	f004 f9d4 	bl	8006f0c <USB_CoreInit>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d005      	beq.n	8002b76 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e026      	b.n	8002bc4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f004 fa4b 	bl	8007018 <USB_SetCurrentMode>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2202      	movs	r2, #2
 8002b8c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e017      	b.n	8002bc4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6818      	ldr	r0, [r3, #0]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7c1a      	ldrb	r2, [r3, #16]
 8002b9c:	f88d 2000 	strb.w	r2, [sp]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ba4:	f004 fbee 	bl	8007384 <USB_HostInit>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d005      	beq.n	8002bba <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e004      	b.n	8002bc4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002bcc:	b590      	push	{r4, r7, lr}
 8002bce:	b08b      	sub	sp, #44	@ 0x2c
 8002bd0:	af04      	add	r7, sp, #16
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	4608      	mov	r0, r1
 8002bd6:	4611      	mov	r1, r2
 8002bd8:	461a      	mov	r2, r3
 8002bda:	4603      	mov	r3, r0
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	460b      	mov	r3, r1
 8002be0:	70bb      	strb	r3, [r7, #2]
 8002be2:	4613      	mov	r3, r2
 8002be4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002be6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002be8:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d101      	bne.n	8002bf8 <HAL_HCD_HC_Init+0x2c>
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	e09d      	b.n	8002d34 <HAL_HCD_HC_Init+0x168>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002c00:	78fa      	ldrb	r2, [r7, #3]
 8002c02:	6879      	ldr	r1, [r7, #4]
 8002c04:	4613      	mov	r3, r2
 8002c06:	011b      	lsls	r3, r3, #4
 8002c08:	1a9b      	subs	r3, r3, r2
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	440b      	add	r3, r1
 8002c0e:	3319      	adds	r3, #25
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3314      	adds	r3, #20
 8002c24:	787a      	ldrb	r2, [r7, #1]
 8002c26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002c28:	78fa      	ldrb	r2, [r7, #3]
 8002c2a:	6879      	ldr	r1, [r7, #4]
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	011b      	lsls	r3, r3, #4
 8002c30:	1a9b      	subs	r3, r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	440b      	add	r3, r1
 8002c36:	3315      	adds	r3, #21
 8002c38:	78fa      	ldrb	r2, [r7, #3]
 8002c3a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002c3c:	78fa      	ldrb	r2, [r7, #3]
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	4613      	mov	r3, r2
 8002c42:	011b      	lsls	r3, r3, #4
 8002c44:	1a9b      	subs	r3, r3, r2
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	440b      	add	r3, r1
 8002c4a:	3326      	adds	r3, #38	@ 0x26
 8002c4c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002c50:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	78bb      	ldrb	r3, [r7, #2]
 8002c56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c5a:	b2d8      	uxtb	r0, r3
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3316      	adds	r3, #22
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	4619      	mov	r1, r3
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f000 fbc8 	bl	8003408 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002c78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da0a      	bge.n	8002c96 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3317      	adds	r3, #23
 8002c90:	2201      	movs	r2, #1
 8002c92:	701a      	strb	r2, [r3, #0]
 8002c94:	e009      	b.n	8002caa <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3317      	adds	r3, #23
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f004 fccc 	bl	800764c <USB_GetHostSpeed>
 8002cb4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002cb6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10b      	bne.n	8002cd6 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002cbe:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_HCD_HC_Init+0x10a>
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d104      	bne.n	8002cd6 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2bbc      	cmp	r3, #188	@ 0xbc
 8002cd0:	d901      	bls.n	8002cd6 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002cd2:	23bc      	movs	r3, #188	@ 0xbc
 8002cd4:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002cd6:	78fa      	ldrb	r2, [r7, #3]
 8002cd8:	6879      	ldr	r1, [r7, #4]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	011b      	lsls	r3, r3, #4
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	3318      	adds	r3, #24
 8002ce6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002cea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	b298      	uxth	r0, r3
 8002cf2:	6879      	ldr	r1, [r7, #4]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	011b      	lsls	r3, r3, #4
 8002cf8:	1a9b      	subs	r3, r3, r2
 8002cfa:	009b      	lsls	r3, r3, #2
 8002cfc:	440b      	add	r3, r1
 8002cfe:	3328      	adds	r3, #40	@ 0x28
 8002d00:	4602      	mov	r2, r0
 8002d02:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	787c      	ldrb	r4, [r7, #1]
 8002d0e:	78ba      	ldrb	r2, [r7, #2]
 8002d10:	78f9      	ldrb	r1, [r7, #3]
 8002d12:	9302      	str	r3, [sp, #8]
 8002d14:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002d18:	9301      	str	r3, [sp, #4]
 8002d1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002d1e:	9300      	str	r3, [sp, #0]
 8002d20:	4623      	mov	r3, r4
 8002d22:	f004 fcbb 	bl	800769c <USB_HC_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	371c      	adds	r7, #28
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd90      	pop	{r4, r7, pc}

08002d3c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
 8002d44:	460b      	mov	r3, r1
 8002d46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d101      	bne.n	8002d5a <HAL_HCD_HC_Halt+0x1e>
 8002d56:	2302      	movs	r3, #2
 8002d58:	e00f      	b.n	8002d7a <HAL_HCD_HC_Halt+0x3e>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	78fa      	ldrb	r2, [r7, #3]
 8002d68:	4611      	mov	r1, r2
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f005 f84d 	bl	8007e0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	4608      	mov	r0, r1
 8002d8e:	4611      	mov	r1, r2
 8002d90:	461a      	mov	r2, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	70fb      	strb	r3, [r7, #3]
 8002d96:	460b      	mov	r3, r1
 8002d98:	70bb      	strb	r3, [r7, #2]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	3317      	adds	r3, #23
 8002dae:	78ba      	ldrb	r2, [r7, #2]
 8002db0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	3326      	adds	r3, #38	@ 0x26
 8002dc2:	787a      	ldrb	r2, [r7, #1]
 8002dc4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002dc6:	7c3b      	ldrb	r3, [r7, #16]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d114      	bne.n	8002df6 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	332a      	adds	r3, #42	@ 0x2a
 8002ddc:	2203      	movs	r2, #3
 8002dde:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3319      	adds	r3, #25
 8002df0:	7f3a      	ldrb	r2, [r7, #28]
 8002df2:	701a      	strb	r2, [r3, #0]
 8002df4:	e009      	b.n	8002e0a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	332a      	adds	r3, #42	@ 0x2a
 8002e06:	2202      	movs	r2, #2
 8002e08:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002e0a:	787b      	ldrb	r3, [r7, #1]
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	f200 8102 	bhi.w	8003016 <HAL_HCD_HC_SubmitRequest+0x292>
 8002e12:	a201      	add	r2, pc, #4	@ (adr r2, 8002e18 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e18:	08002e29 	.word	0x08002e29
 8002e1c:	08003001 	.word	0x08003001
 8002e20:	08002eed 	.word	0x08002eed
 8002e24:	08002f77 	.word	0x08002f77
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002e28:	7c3b      	ldrb	r3, [r7, #16]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	f040 80f5 	bne.w	800301a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002e30:	78bb      	ldrb	r3, [r7, #2]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d12d      	bne.n	8002e92 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002e36:	8b3b      	ldrh	r3, [r7, #24]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	333d      	adds	r3, #61	@ 0x3d
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	333d      	adds	r3, #61	@ 0x3d
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d10a      	bne.n	8002e7c <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002e66:	78fa      	ldrb	r2, [r7, #3]
 8002e68:	6879      	ldr	r1, [r7, #4]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	1a9b      	subs	r3, r3, r2
 8002e70:	009b      	lsls	r3, r3, #2
 8002e72:	440b      	add	r3, r1
 8002e74:	332a      	adds	r3, #42	@ 0x2a
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002e7a:	e0ce      	b.n	800301a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	332a      	adds	r3, #42	@ 0x2a
 8002e8c:	2202      	movs	r2, #2
 8002e8e:	701a      	strb	r2, [r3, #0]
      break;
 8002e90:	e0c3      	b.n	800301a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002e92:	78fa      	ldrb	r2, [r7, #3]
 8002e94:	6879      	ldr	r1, [r7, #4]
 8002e96:	4613      	mov	r3, r2
 8002e98:	011b      	lsls	r3, r3, #4
 8002e9a:	1a9b      	subs	r3, r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	440b      	add	r3, r1
 8002ea0:	331a      	adds	r3, #26
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b01      	cmp	r3, #1
 8002ea6:	f040 80b8 	bne.w	800301a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	011b      	lsls	r3, r3, #4
 8002eb2:	1a9b      	subs	r3, r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	440b      	add	r3, r1
 8002eb8:	333c      	adds	r3, #60	@ 0x3c
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	332a      	adds	r3, #42	@ 0x2a
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
      break;
 8002ed4:	e0a1      	b.n	800301a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	332a      	adds	r3, #42	@ 0x2a
 8002ee6:	2202      	movs	r2, #2
 8002ee8:	701a      	strb	r2, [r3, #0]
      break;
 8002eea:	e096      	b.n	800301a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002eec:	78bb      	ldrb	r3, [r7, #2]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d120      	bne.n	8002f34 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ef2:	78fa      	ldrb	r2, [r7, #3]
 8002ef4:	6879      	ldr	r1, [r7, #4]
 8002ef6:	4613      	mov	r3, r2
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	1a9b      	subs	r3, r3, r2
 8002efc:	009b      	lsls	r3, r3, #2
 8002efe:	440b      	add	r3, r1
 8002f00:	333d      	adds	r3, #61	@ 0x3d
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f08:	78fa      	ldrb	r2, [r7, #3]
 8002f0a:	6879      	ldr	r1, [r7, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	011b      	lsls	r3, r3, #4
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	332a      	adds	r3, #42	@ 0x2a
 8002f18:	2200      	movs	r2, #0
 8002f1a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002f1c:	e07e      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f1e:	78fa      	ldrb	r2, [r7, #3]
 8002f20:	6879      	ldr	r1, [r7, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	1a9b      	subs	r3, r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	440b      	add	r3, r1
 8002f2c:	332a      	adds	r3, #42	@ 0x2a
 8002f2e:	2202      	movs	r2, #2
 8002f30:	701a      	strb	r2, [r3, #0]
      break;
 8002f32:	e073      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f34:	78fa      	ldrb	r2, [r7, #3]
 8002f36:	6879      	ldr	r1, [r7, #4]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	011b      	lsls	r3, r3, #4
 8002f3c:	1a9b      	subs	r3, r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	333c      	adds	r3, #60	@ 0x3c
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10a      	bne.n	8002f60 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	332a      	adds	r3, #42	@ 0x2a
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	701a      	strb	r2, [r3, #0]
      break;
 8002f5e:	e05d      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f60:	78fa      	ldrb	r2, [r7, #3]
 8002f62:	6879      	ldr	r1, [r7, #4]
 8002f64:	4613      	mov	r3, r2
 8002f66:	011b      	lsls	r3, r3, #4
 8002f68:	1a9b      	subs	r3, r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	440b      	add	r3, r1
 8002f6e:	332a      	adds	r3, #42	@ 0x2a
 8002f70:	2202      	movs	r2, #2
 8002f72:	701a      	strb	r2, [r3, #0]
      break;
 8002f74:	e052      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002f76:	78bb      	ldrb	r3, [r7, #2]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d120      	bne.n	8002fbe <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f7c:	78fa      	ldrb	r2, [r7, #3]
 8002f7e:	6879      	ldr	r1, [r7, #4]
 8002f80:	4613      	mov	r3, r2
 8002f82:	011b      	lsls	r3, r3, #4
 8002f84:	1a9b      	subs	r3, r3, r2
 8002f86:	009b      	lsls	r3, r3, #2
 8002f88:	440b      	add	r3, r1
 8002f8a:	333d      	adds	r3, #61	@ 0x3d
 8002f8c:	781b      	ldrb	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f92:	78fa      	ldrb	r2, [r7, #3]
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	332a      	adds	r3, #42	@ 0x2a
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002fa6:	e039      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fa8:	78fa      	ldrb	r2, [r7, #3]
 8002faa:	6879      	ldr	r1, [r7, #4]
 8002fac:	4613      	mov	r3, r2
 8002fae:	011b      	lsls	r3, r3, #4
 8002fb0:	1a9b      	subs	r3, r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	440b      	add	r3, r1
 8002fb6:	332a      	adds	r3, #42	@ 0x2a
 8002fb8:	2202      	movs	r2, #2
 8002fba:	701a      	strb	r2, [r3, #0]
      break;
 8002fbc:	e02e      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	333c      	adds	r3, #60	@ 0x3c
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10a      	bne.n	8002fea <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	332a      	adds	r3, #42	@ 0x2a
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
      break;
 8002fe8:	e018      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fea:	78fa      	ldrb	r2, [r7, #3]
 8002fec:	6879      	ldr	r1, [r7, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	011b      	lsls	r3, r3, #4
 8002ff2:	1a9b      	subs	r3, r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	332a      	adds	r3, #42	@ 0x2a
 8002ffa:	2202      	movs	r2, #2
 8002ffc:	701a      	strb	r2, [r3, #0]
      break;
 8002ffe:	e00d      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	332a      	adds	r3, #42	@ 0x2a
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
      break;
 8003014:	e002      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003016:	bf00      	nop
 8003018:	e000      	b.n	800301c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800301a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	6879      	ldr	r1, [r7, #4]
 8003020:	4613      	mov	r3, r2
 8003022:	011b      	lsls	r3, r3, #4
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	332c      	adds	r3, #44	@ 0x2c
 800302c:	697a      	ldr	r2, [r7, #20]
 800302e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	8b39      	ldrh	r1, [r7, #24]
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	4613      	mov	r3, r2
 8003038:	011b      	lsls	r3, r3, #4
 800303a:	1a9b      	subs	r3, r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4403      	add	r3, r0
 8003040:	3334      	adds	r3, #52	@ 0x34
 8003042:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	334c      	adds	r3, #76	@ 0x4c
 8003054:	2200      	movs	r2, #0
 8003056:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	1a9b      	subs	r3, r3, r2
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	3338      	adds	r3, #56	@ 0x38
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	6879      	ldr	r1, [r7, #4]
 8003070:	4613      	mov	r3, r2
 8003072:	011b      	lsls	r3, r3, #4
 8003074:	1a9b      	subs	r3, r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	440b      	add	r3, r1
 800307a:	3315      	adds	r3, #21
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	011b      	lsls	r3, r3, #4
 8003088:	1a9b      	subs	r3, r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	440b      	add	r3, r1
 800308e:	334d      	adds	r3, #77	@ 0x4d
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6818      	ldr	r0, [r3, #0]
 8003098:	78fa      	ldrb	r2, [r7, #3]
 800309a:	4613      	mov	r3, r2
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	1a9b      	subs	r3, r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	3310      	adds	r3, #16
 80030a4:	687a      	ldr	r2, [r7, #4]
 80030a6:	4413      	add	r3, r2
 80030a8:	1d19      	adds	r1, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	799b      	ldrb	r3, [r3, #6]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f004 fc20 	bl	80078f4 <USB_HC_StartXfer>
 80030b4:	4603      	mov	r3, r0
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3708      	adds	r7, #8
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop

080030c0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b086      	sub	sp, #24
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f004 f914 	bl	8007304 <USB_GetMode>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b01      	cmp	r3, #1
 80030e0:	f040 80fb 	bne.w	80032da <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f004 f8d7 	bl	800729c <USB_ReadInterrupts>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 80f1 	beq.w	80032d8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f004 f8ce 	bl	800729c <USB_ReadInterrupts>
 8003100:	4603      	mov	r3, r0
 8003102:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003106:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800310a:	d104      	bne.n	8003116 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003114:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f004 f8be 	bl	800729c <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003126:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800312a:	d104      	bne.n	8003136 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003134:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4618      	mov	r0, r3
 800313c:	f004 f8ae 	bl	800729c <USB_ReadInterrupts>
 8003140:	4603      	mov	r3, r0
 8003142:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003146:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800314a:	d104      	bne.n	8003156 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003154:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f004 f89e 	bl	800729c <USB_ReadInterrupts>
 8003160:	4603      	mov	r3, r0
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b02      	cmp	r3, #2
 8003168:	d103      	bne.n	8003172 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2202      	movs	r2, #2
 8003170:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f004 f890 	bl	800729c <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003182:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003186:	d120      	bne.n	80031ca <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003190:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d113      	bne.n	80031ca <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80031a2:	2110      	movs	r1, #16
 80031a4:	6938      	ldr	r0, [r7, #16]
 80031a6:	f003 ff83 	bl	80070b0 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80031aa:	6938      	ldr	r0, [r7, #16]
 80031ac:	f003 ffb2 	bl	8007114 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7a5b      	ldrb	r3, [r3, #9]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d105      	bne.n	80031c4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f004 f9a4 	bl	800750c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f007 f96b 	bl	800a4a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f004 f864 	bl	800729c <USB_ReadInterrupts>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80031da:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031de:	d102      	bne.n	80031e6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f001 fd4d 	bl	8004c80 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4618      	mov	r0, r3
 80031ec:	f004 f856 	bl	800729c <USB_ReadInterrupts>
 80031f0:	4603      	mov	r3, r0
 80031f2:	f003 0308 	and.w	r3, r3, #8
 80031f6:	2b08      	cmp	r3, #8
 80031f8:	d106      	bne.n	8003208 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f007 f934 	bl	800a468 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2208      	movs	r2, #8
 8003206:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f004 f845 	bl	800729c <USB_ReadInterrupts>
 8003212:	4603      	mov	r3, r0
 8003214:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003218:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800321c:	d139      	bne.n	8003292 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f004 fde0 	bl	8007de8 <USB_HC_ReadInterrupt>
 8003228:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800322a:	2300      	movs	r3, #0
 800322c:	617b      	str	r3, [r7, #20]
 800322e:	e025      	b.n	800327c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	f003 030f 	and.w	r3, r3, #15
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	fa22 f303 	lsr.w	r3, r2, r3
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	015a      	lsls	r2, r3, #5
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003256:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800325a:	d106      	bne.n	800326a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	b2db      	uxtb	r3, r3
 8003260:	4619      	mov	r1, r3
 8003262:	6878      	ldr	r0, [r7, #4]
 8003264:	f000 f905 	bl	8003472 <HCD_HC_IN_IRQHandler>
 8003268:	e005      	b.n	8003276 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	b2db      	uxtb	r3, r3
 800326e:	4619      	mov	r1, r3
 8003270:	6878      	ldr	r0, [r7, #4]
 8003272:	f000 ff67 	bl	8004144 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	3301      	adds	r3, #1
 800327a:	617b      	str	r3, [r7, #20]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	795b      	ldrb	r3, [r3, #5]
 8003280:	461a      	mov	r2, r3
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	4293      	cmp	r3, r2
 8003286:	d3d3      	bcc.n	8003230 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f004 f800 	bl	800729c <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 0310 	and.w	r3, r3, #16
 80032a2:	2b10      	cmp	r3, #16
 80032a4:	d101      	bne.n	80032aa <HAL_HCD_IRQHandler+0x1ea>
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_HCD_IRQHandler+0x1ec>
 80032aa:	2300      	movs	r3, #0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d014      	beq.n	80032da <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	699a      	ldr	r2, [r3, #24]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0210 	bic.w	r2, r2, #16
 80032be:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f001 fbfe 	bl	8004ac2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	699a      	ldr	r2, [r3, #24]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f042 0210 	orr.w	r2, r2, #16
 80032d4:	619a      	str	r2, [r3, #24]
 80032d6:	e000      	b.n	80032da <HAL_HCD_IRQHandler+0x21a>
      return;
 80032d8:	bf00      	nop
    }
  }
}
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_HCD_Start+0x16>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e013      	b.n	800331e <HAL_HCD_Start+0x3e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2101      	movs	r1, #1
 8003304:	4618      	mov	r0, r3
 8003306:	f004 f968 	bl	80075da <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f003 fe60 	bl	8006fd4 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}

08003326 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003326:	b580      	push	{r7, lr}
 8003328:	b082      	sub	sp, #8
 800332a:	af00      	add	r7, sp, #0
 800332c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_HCD_Stop+0x16>
 8003338:	2302      	movs	r3, #2
 800333a:	e00d      	b.n	8003358 <HAL_HCD_Stop+0x32>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4618      	mov	r0, r3
 800334a:	f004 febb 	bl	80080c4 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003356:	2300      	movs	r3, #0
}
 8003358:	4618      	mov	r0, r3
 800335a:	3708      	adds	r7, #8
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4618      	mov	r0, r3
 800336e:	f004 f90a 	bl	8007586 <USB_ResetPort>
 8003372:	4603      	mov	r3, r0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	460b      	mov	r3, r1
 8003386:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	@ 0x4c
 8003398:	781b      	ldrb	r3, [r3, #0]
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
 80033ae:	460b      	mov	r3, r1
 80033b0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3338      	adds	r3, #56	@ 0x38
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4618      	mov	r0, r3
 80033de:	f004 f94c 	bl	800767a <USB_GetCurrentFrame>
 80033e2:	4603      	mov	r3, r0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f004 f927 	bl	800764c <USB_GetHostSpeed>
 80033fe:	4603      	mov	r3, r0
}
 8003400:	4618      	mov	r0, r3
 8003402:	3708      	adds	r7, #8
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003414:	78fa      	ldrb	r2, [r7, #3]
 8003416:	6879      	ldr	r1, [r7, #4]
 8003418:	4613      	mov	r3, r2
 800341a:	011b      	lsls	r3, r3, #4
 800341c:	1a9b      	subs	r3, r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	331a      	adds	r3, #26
 8003424:	2200      	movs	r2, #0
 8003426:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003428:	78fa      	ldrb	r2, [r7, #3]
 800342a:	6879      	ldr	r1, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	011b      	lsls	r3, r3, #4
 8003430:	1a9b      	subs	r3, r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	331b      	adds	r3, #27
 8003438:	2200      	movs	r2, #0
 800343a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800343c:	78fa      	ldrb	r2, [r7, #3]
 800343e:	6879      	ldr	r1, [r7, #4]
 8003440:	4613      	mov	r3, r2
 8003442:	011b      	lsls	r3, r3, #4
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	009b      	lsls	r3, r3, #2
 8003448:	440b      	add	r3, r1
 800344a:	3325      	adds	r3, #37	@ 0x25
 800344c:	2200      	movs	r2, #0
 800344e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8003450:	78fa      	ldrb	r2, [r7, #3]
 8003452:	6879      	ldr	r1, [r7, #4]
 8003454:	4613      	mov	r3, r2
 8003456:	011b      	lsls	r3, r3, #4
 8003458:	1a9b      	subs	r3, r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	440b      	add	r3, r1
 800345e:	3324      	adds	r3, #36	@ 0x24
 8003460:	2200      	movs	r2, #0
 8003462:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b086      	sub	sp, #24
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	4611      	mov	r1, r2
 8003490:	4618      	mov	r0, r3
 8003492:	f003 ff16 	bl	80072c2 <USB_ReadChInterrupts>
 8003496:	4603      	mov	r3, r0
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b04      	cmp	r3, #4
 800349e:	d11a      	bne.n	80034d6 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ac:	461a      	mov	r2, r3
 80034ae:	2304      	movs	r3, #4
 80034b0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	334d      	adds	r3, #77	@ 0x4d
 80034c2:	2207      	movs	r2, #7
 80034c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f004 fc9b 	bl	8007e0a <USB_HC_Halt>
 80034d4:	e09e      	b.n	8003614 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	78fa      	ldrb	r2, [r7, #3]
 80034dc:	4611      	mov	r1, r2
 80034de:	4618      	mov	r0, r3
 80034e0:	f003 feef 	bl	80072c2 <USB_ReadChInterrupts>
 80034e4:	4603      	mov	r3, r0
 80034e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034ee:	d11b      	bne.n	8003528 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	015a      	lsls	r2, r3, #5
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	4413      	add	r3, r2
 80034f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034fc:	461a      	mov	r2, r3
 80034fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003502:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8003504:	78fa      	ldrb	r2, [r7, #3]
 8003506:	6879      	ldr	r1, [r7, #4]
 8003508:	4613      	mov	r3, r2
 800350a:	011b      	lsls	r3, r3, #4
 800350c:	1a9b      	subs	r3, r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	334d      	adds	r3, #77	@ 0x4d
 8003514:	2208      	movs	r2, #8
 8003516:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f004 fc72 	bl	8007e0a <USB_HC_Halt>
 8003526:	e075      	b.n	8003614 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	4611      	mov	r1, r2
 8003530:	4618      	mov	r0, r3
 8003532:	f003 fec6 	bl	80072c2 <USB_ReadChInterrupts>
 8003536:	4603      	mov	r3, r0
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b08      	cmp	r3, #8
 800353e:	d11a      	bne.n	8003576 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4413      	add	r3, r2
 8003548:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800354c:	461a      	mov	r2, r3
 800354e:	2308      	movs	r3, #8
 8003550:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	334d      	adds	r3, #77	@ 0x4d
 8003562:	2206      	movs	r2, #6
 8003564:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	4611      	mov	r1, r2
 800356e:	4618      	mov	r0, r3
 8003570:	f004 fc4b 	bl	8007e0a <USB_HC_Halt>
 8003574:	e04e      	b.n	8003614 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	4611      	mov	r1, r2
 800357e:	4618      	mov	r0, r3
 8003580:	f003 fe9f 	bl	80072c2 <USB_ReadChInterrupts>
 8003584:	4603      	mov	r3, r0
 8003586:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800358e:	d11b      	bne.n	80035c8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003590:	78fb      	ldrb	r3, [r7, #3]
 8003592:	015a      	lsls	r2, r3, #5
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	4413      	add	r3, r2
 8003598:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800359c:	461a      	mov	r2, r3
 800359e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80035a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	6879      	ldr	r1, [r7, #4]
 80035a8:	4613      	mov	r3, r2
 80035aa:	011b      	lsls	r3, r3, #4
 80035ac:	1a9b      	subs	r3, r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	334d      	adds	r3, #77	@ 0x4d
 80035b4:	2209      	movs	r2, #9
 80035b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	78fa      	ldrb	r2, [r7, #3]
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f004 fc22 	bl	8007e0a <USB_HC_Halt>
 80035c6:	e025      	b.n	8003614 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	78fa      	ldrb	r2, [r7, #3]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f003 fe76 	bl	80072c2 <USB_ReadChInterrupts>
 80035d6:	4603      	mov	r3, r0
 80035d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035dc:	2b80      	cmp	r3, #128	@ 0x80
 80035de:	d119      	bne.n	8003614 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	2380      	movs	r3, #128	@ 0x80
 80035f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	334d      	adds	r3, #77	@ 0x4d
 8003602:	2207      	movs	r2, #7
 8003604:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f004 fbfb 	bl	8007e0a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fe50 	bl	80072c2 <USB_ReadChInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003628:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800362c:	d112      	bne.n	8003654 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	4611      	mov	r1, r2
 8003636:	4618      	mov	r0, r3
 8003638:	f004 fbe7 	bl	8007e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800364e:	6093      	str	r3, [r2, #8]
 8003650:	f000 bd75 	b.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	4611      	mov	r1, r2
 800365c:	4618      	mov	r0, r3
 800365e:	f003 fe30 	bl	80072c2 <USB_ReadChInterrupts>
 8003662:	4603      	mov	r3, r0
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b01      	cmp	r3, #1
 800366a:	f040 8128 	bne.w	80038be <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800366e:	78fb      	ldrb	r3, [r7, #3]
 8003670:	015a      	lsls	r2, r3, #5
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	4413      	add	r3, r2
 8003676:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800367a:	461a      	mov	r2, r3
 800367c:	2320      	movs	r3, #32
 800367e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	6879      	ldr	r1, [r7, #4]
 8003684:	4613      	mov	r3, r2
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	1a9b      	subs	r3, r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	440b      	add	r3, r1
 800368e:	331b      	adds	r3, #27
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d119      	bne.n	80036ca <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003696:	78fa      	ldrb	r2, [r7, #3]
 8003698:	6879      	ldr	r1, [r7, #4]
 800369a:	4613      	mov	r3, r2
 800369c:	011b      	lsls	r3, r3, #4
 800369e:	1a9b      	subs	r3, r3, r2
 80036a0:	009b      	lsls	r3, r3, #2
 80036a2:	440b      	add	r3, r1
 80036a4:	331b      	adds	r3, #27
 80036a6:	2200      	movs	r2, #0
 80036a8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	693a      	ldr	r2, [r7, #16]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036c8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	799b      	ldrb	r3, [r3, #6]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d01b      	beq.n	800370a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80036d2:	78fa      	ldrb	r2, [r7, #3]
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	4613      	mov	r3, r2
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	1a9b      	subs	r3, r3, r2
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	440b      	add	r3, r1
 80036e0:	3330      	adds	r3, #48	@ 0x30
 80036e2:	6819      	ldr	r1, [r3, #0]
 80036e4:	78fb      	ldrb	r3, [r7, #3]
 80036e6:	015a      	lsls	r2, r3, #5
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4413      	add	r3, r2
 80036ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	1ac9      	subs	r1, r1, r3
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	011b      	lsls	r3, r3, #4
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4403      	add	r3, r0
 8003706:	3338      	adds	r3, #56	@ 0x38
 8003708:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800370a:	78fa      	ldrb	r2, [r7, #3]
 800370c:	6879      	ldr	r1, [r7, #4]
 800370e:	4613      	mov	r3, r2
 8003710:	011b      	lsls	r3, r3, #4
 8003712:	1a9b      	subs	r3, r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	440b      	add	r3, r1
 8003718:	334d      	adds	r3, #77	@ 0x4d
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	6879      	ldr	r1, [r7, #4]
 8003722:	4613      	mov	r3, r2
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	1a9b      	subs	r3, r3, r2
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	440b      	add	r3, r1
 800372c:	3344      	adds	r3, #68	@ 0x44
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003732:	78fb      	ldrb	r3, [r7, #3]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800373e:	461a      	mov	r2, r3
 8003740:	2301      	movs	r3, #1
 8003742:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	6879      	ldr	r1, [r7, #4]
 8003748:	4613      	mov	r3, r2
 800374a:	011b      	lsls	r3, r3, #4
 800374c:	1a9b      	subs	r3, r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	440b      	add	r3, r1
 8003752:	3326      	adds	r3, #38	@ 0x26
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d00a      	beq.n	8003770 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800375a:	78fa      	ldrb	r2, [r7, #3]
 800375c:	6879      	ldr	r1, [r7, #4]
 800375e:	4613      	mov	r3, r2
 8003760:	011b      	lsls	r3, r3, #4
 8003762:	1a9b      	subs	r3, r3, r2
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	440b      	add	r3, r1
 8003768:	3326      	adds	r3, #38	@ 0x26
 800376a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800376c:	2b02      	cmp	r3, #2
 800376e:	d110      	bne.n	8003792 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f004 fb46 	bl	8007e0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378a:	461a      	mov	r2, r3
 800378c:	2310      	movs	r3, #16
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e03d      	b.n	800380e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3326      	adds	r3, #38	@ 0x26
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d00a      	beq.n	80037be <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80037a8:	78fa      	ldrb	r2, [r7, #3]
 80037aa:	6879      	ldr	r1, [r7, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	1a9b      	subs	r3, r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	3326      	adds	r3, #38	@ 0x26
 80037b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d127      	bne.n	800380e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037be:	78fb      	ldrb	r3, [r7, #3]
 80037c0:	015a      	lsls	r2, r3, #5
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4413      	add	r3, r2
 80037c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	0151      	lsls	r1, r2, #5
 80037d0:	693a      	ldr	r2, [r7, #16]
 80037d2:	440a      	add	r2, r1
 80037d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80037dc:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	334c      	adds	r3, #76	@ 0x4c
 80037ee:	2201      	movs	r2, #1
 80037f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037f2:	78fa      	ldrb	r2, [r7, #3]
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4613      	mov	r3, r2
 80037f8:	011b      	lsls	r3, r3, #4
 80037fa:	1a9b      	subs	r3, r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	440b      	add	r3, r1
 8003800:	334c      	adds	r3, #76	@ 0x4c
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	78fb      	ldrb	r3, [r7, #3]
 8003806:	4619      	mov	r1, r3
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f006 fe57 	bl	800a4bc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	799b      	ldrb	r3, [r3, #6]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d13b      	bne.n	800388e <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003816:	78fa      	ldrb	r2, [r7, #3]
 8003818:	6879      	ldr	r1, [r7, #4]
 800381a:	4613      	mov	r3, r2
 800381c:	011b      	lsls	r3, r3, #4
 800381e:	1a9b      	subs	r3, r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	440b      	add	r3, r1
 8003824:	3338      	adds	r3, #56	@ 0x38
 8003826:	6819      	ldr	r1, [r3, #0]
 8003828:	78fa      	ldrb	r2, [r7, #3]
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	4613      	mov	r3, r2
 800382e:	011b      	lsls	r3, r3, #4
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	4403      	add	r3, r0
 8003836:	3328      	adds	r3, #40	@ 0x28
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	440b      	add	r3, r1
 800383c:	1e59      	subs	r1, r3, #1
 800383e:	78fa      	ldrb	r2, [r7, #3]
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	4613      	mov	r3, r2
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	1a9b      	subs	r3, r3, r2
 8003848:	009b      	lsls	r3, r3, #2
 800384a:	4403      	add	r3, r0
 800384c:	3328      	adds	r3, #40	@ 0x28
 800384e:	881b      	ldrh	r3, [r3, #0]
 8003850:	fbb1 f3f3 	udiv	r3, r1, r3
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 8470 	beq.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	6879      	ldr	r1, [r7, #4]
 8003862:	4613      	mov	r3, r2
 8003864:	011b      	lsls	r3, r3, #4
 8003866:	1a9b      	subs	r3, r3, r2
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	440b      	add	r3, r1
 800386c:	333c      	adds	r3, #60	@ 0x3c
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	f083 0301 	eor.w	r3, r3, #1
 8003876:	b2d8      	uxtb	r0, r3
 8003878:	6879      	ldr	r1, [r7, #4]
 800387a:	4613      	mov	r3, r2
 800387c:	011b      	lsls	r3, r3, #4
 800387e:	1a9b      	subs	r3, r3, r2
 8003880:	009b      	lsls	r3, r3, #2
 8003882:	440b      	add	r3, r1
 8003884:	333c      	adds	r3, #60	@ 0x3c
 8003886:	4602      	mov	r2, r0
 8003888:	701a      	strb	r2, [r3, #0]
 800388a:	f000 bc58 	b.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800388e:	78fa      	ldrb	r2, [r7, #3]
 8003890:	6879      	ldr	r1, [r7, #4]
 8003892:	4613      	mov	r3, r2
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	333c      	adds	r3, #60	@ 0x3c
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2d8      	uxtb	r0, r3
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	333c      	adds	r3, #60	@ 0x3c
 80038b6:	4602      	mov	r2, r0
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	f000 bc40 	b.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	4611      	mov	r1, r2
 80038c6:	4618      	mov	r0, r3
 80038c8:	f003 fcfb 	bl	80072c2 <USB_ReadChInterrupts>
 80038cc:	4603      	mov	r3, r0
 80038ce:	f003 0320 	and.w	r3, r3, #32
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d131      	bne.n	800393a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e2:	461a      	mov	r2, r3
 80038e4:	2320      	movs	r3, #32
 80038e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80038e8:	78fa      	ldrb	r2, [r7, #3]
 80038ea:	6879      	ldr	r1, [r7, #4]
 80038ec:	4613      	mov	r3, r2
 80038ee:	011b      	lsls	r3, r3, #4
 80038f0:	1a9b      	subs	r3, r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	331a      	adds	r3, #26
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	f040 841f 	bne.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	331b      	adds	r3, #27
 8003910:	2201      	movs	r2, #1
 8003912:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	334d      	adds	r3, #77	@ 0x4d
 8003924:	2203      	movs	r2, #3
 8003926:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f004 fa6a 	bl	8007e0a <USB_HC_Halt>
 8003936:	f000 bc02 	b.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	78fa      	ldrb	r2, [r7, #3]
 8003940:	4611      	mov	r1, r2
 8003942:	4618      	mov	r0, r3
 8003944:	f003 fcbd 	bl	80072c2 <USB_ReadChInterrupts>
 8003948:	4603      	mov	r3, r0
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b02      	cmp	r3, #2
 8003950:	f040 8305 	bne.w	8003f5e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2302      	movs	r3, #2
 8003964:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003966:	78fa      	ldrb	r2, [r7, #3]
 8003968:	6879      	ldr	r1, [r7, #4]
 800396a:	4613      	mov	r3, r2
 800396c:	011b      	lsls	r3, r3, #4
 800396e:	1a9b      	subs	r3, r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	440b      	add	r3, r1
 8003974:	334d      	adds	r3, #77	@ 0x4d
 8003976:	781b      	ldrb	r3, [r3, #0]
 8003978:	2b01      	cmp	r3, #1
 800397a:	d114      	bne.n	80039a6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	2202      	movs	r2, #2
 800398e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334c      	adds	r3, #76	@ 0x4c
 80039a0:	2201      	movs	r2, #1
 80039a2:	701a      	strb	r2, [r3, #0]
 80039a4:	e2cc      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	334d      	adds	r3, #77	@ 0x4d
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	2b06      	cmp	r3, #6
 80039ba:	d114      	bne.n	80039e6 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	4613      	mov	r3, r2
 80039c2:	011b      	lsls	r3, r3, #4
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	334d      	adds	r3, #77	@ 0x4d
 80039cc:	2202      	movs	r2, #2
 80039ce:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80039d0:	78fa      	ldrb	r2, [r7, #3]
 80039d2:	6879      	ldr	r1, [r7, #4]
 80039d4:	4613      	mov	r3, r2
 80039d6:	011b      	lsls	r3, r3, #4
 80039d8:	1a9b      	subs	r3, r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	334c      	adds	r3, #76	@ 0x4c
 80039e0:	2205      	movs	r2, #5
 80039e2:	701a      	strb	r2, [r3, #0]
 80039e4:	e2ac      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	4613      	mov	r3, r2
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	1a9b      	subs	r3, r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	334d      	adds	r3, #77	@ 0x4d
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b07      	cmp	r3, #7
 80039fa:	d00b      	beq.n	8003a14 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80039fc:	78fa      	ldrb	r2, [r7, #3]
 80039fe:	6879      	ldr	r1, [r7, #4]
 8003a00:	4613      	mov	r3, r2
 8003a02:	011b      	lsls	r3, r3, #4
 8003a04:	1a9b      	subs	r3, r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	440b      	add	r3, r1
 8003a0a:	334d      	adds	r3, #77	@ 0x4d
 8003a0c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003a0e:	2b09      	cmp	r3, #9
 8003a10:	f040 80a6 	bne.w	8003b60 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a14:	78fa      	ldrb	r2, [r7, #3]
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	4613      	mov	r3, r2
 8003a1a:	011b      	lsls	r3, r3, #4
 8003a1c:	1a9b      	subs	r3, r3, r2
 8003a1e:	009b      	lsls	r3, r3, #2
 8003a20:	440b      	add	r3, r1
 8003a22:	334d      	adds	r3, #77	@ 0x4d
 8003a24:	2202      	movs	r2, #2
 8003a26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003a28:	78fa      	ldrb	r2, [r7, #3]
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	011b      	lsls	r3, r3, #4
 8003a30:	1a9b      	subs	r3, r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3344      	adds	r3, #68	@ 0x44
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	1c59      	adds	r1, r3, #1
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4613      	mov	r3, r2
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	1a9b      	subs	r3, r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4403      	add	r3, r0
 8003a48:	3344      	adds	r3, #68	@ 0x44
 8003a4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a4c:	78fa      	ldrb	r2, [r7, #3]
 8003a4e:	6879      	ldr	r1, [r7, #4]
 8003a50:	4613      	mov	r3, r2
 8003a52:	011b      	lsls	r3, r3, #4
 8003a54:	1a9b      	subs	r3, r3, r2
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	3344      	adds	r3, #68	@ 0x44
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d943      	bls.n	8003aea <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	3344      	adds	r3, #68	@ 0x44
 8003a72:	2200      	movs	r2, #0
 8003a74:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	011b      	lsls	r3, r3, #4
 8003a7e:	1a9b      	subs	r3, r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	331a      	adds	r3, #26
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d123      	bne.n	8003ad4 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	331b      	adds	r3, #27
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	331c      	adds	r3, #28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ab4:	78fb      	ldrb	r3, [r7, #3]
 8003ab6:	015a      	lsls	r2, r3, #5
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	4413      	add	r3, r2
 8003abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	78fa      	ldrb	r2, [r7, #3]
 8003ac4:	0151      	lsls	r1, r2, #5
 8003ac6:	693a      	ldr	r2, [r7, #16]
 8003ac8:	440a      	add	r2, r1
 8003aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ace:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ad2:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	6879      	ldr	r1, [r7, #4]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	009b      	lsls	r3, r3, #2
 8003ae0:	440b      	add	r3, r1
 8003ae2:	334c      	adds	r3, #76	@ 0x4c
 8003ae4:	2204      	movs	r2, #4
 8003ae6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ae8:	e229      	b.n	8003f3e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	6879      	ldr	r1, [r7, #4]
 8003aee:	4613      	mov	r3, r2
 8003af0:	011b      	lsls	r3, r3, #4
 8003af2:	1a9b      	subs	r3, r3, r2
 8003af4:	009b      	lsls	r3, r3, #2
 8003af6:	440b      	add	r3, r1
 8003af8:	334c      	adds	r3, #76	@ 0x4c
 8003afa:	2202      	movs	r2, #2
 8003afc:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003afe:	78fa      	ldrb	r2, [r7, #3]
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	4613      	mov	r3, r2
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	1a9b      	subs	r3, r3, r2
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	440b      	add	r3, r1
 8003b0c:	3326      	adds	r3, #38	@ 0x26
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00b      	beq.n	8003b2c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3326      	adds	r3, #38	@ 0x26
 8003b24:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	f040 8209 	bne.w	8003f3e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b2c:	78fb      	ldrb	r3, [r7, #3]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	693b      	ldr	r3, [r7, #16]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b42:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003b4a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003b4c:	78fb      	ldrb	r3, [r7, #3]
 8003b4e:	015a      	lsls	r2, r3, #5
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	4413      	add	r3, r2
 8003b54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b58:	461a      	mov	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b5e:	e1ee      	b.n	8003f3e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b60:	78fa      	ldrb	r2, [r7, #3]
 8003b62:	6879      	ldr	r1, [r7, #4]
 8003b64:	4613      	mov	r3, r2
 8003b66:	011b      	lsls	r3, r3, #4
 8003b68:	1a9b      	subs	r3, r3, r2
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	440b      	add	r3, r1
 8003b6e:	334d      	adds	r3, #77	@ 0x4d
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	2b05      	cmp	r3, #5
 8003b74:	f040 80c8 	bne.w	8003d08 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	334d      	adds	r3, #77	@ 0x4d
 8003b88:	2202      	movs	r2, #2
 8003b8a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	331b      	adds	r3, #27
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	2b01      	cmp	r3, #1
 8003ba0:	f040 81ce 	bne.w	8003f40 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ba4:	78fa      	ldrb	r2, [r7, #3]
 8003ba6:	6879      	ldr	r1, [r7, #4]
 8003ba8:	4613      	mov	r3, r2
 8003baa:	011b      	lsls	r3, r3, #4
 8003bac:	1a9b      	subs	r3, r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	440b      	add	r3, r1
 8003bb2:	3326      	adds	r3, #38	@ 0x26
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b03      	cmp	r3, #3
 8003bb8:	d16b      	bne.n	8003c92 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	6879      	ldr	r1, [r7, #4]
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	011b      	lsls	r3, r3, #4
 8003bc2:	1a9b      	subs	r3, r3, r2
 8003bc4:	009b      	lsls	r3, r3, #2
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3348      	adds	r3, #72	@ 0x48
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	1c59      	adds	r1, r3, #1
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	1a9b      	subs	r3, r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	4403      	add	r3, r0
 8003bda:	3348      	adds	r3, #72	@ 0x48
 8003bdc:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	3348      	adds	r3, #72	@ 0x48
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d943      	bls.n	8003c7c <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	3348      	adds	r3, #72	@ 0x48
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003c08:	78fa      	ldrb	r2, [r7, #3]
 8003c0a:	6879      	ldr	r1, [r7, #4]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	011b      	lsls	r3, r3, #4
 8003c10:	1a9b      	subs	r3, r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	331b      	adds	r3, #27
 8003c18:	2200      	movs	r2, #0
 8003c1a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003c1c:	78fa      	ldrb	r2, [r7, #3]
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	4613      	mov	r3, r2
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	1a9b      	subs	r3, r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	440b      	add	r3, r1
 8003c2a:	3344      	adds	r3, #68	@ 0x44
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	d809      	bhi.n	8003c46 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003c32:	78fa      	ldrb	r2, [r7, #3]
 8003c34:	6879      	ldr	r1, [r7, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	011b      	lsls	r3, r3, #4
 8003c3a:	1a9b      	subs	r3, r3, r2
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	440b      	add	r3, r1
 8003c40:	331c      	adds	r3, #28
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003c46:	78fb      	ldrb	r3, [r7, #3]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	0151      	lsls	r1, r2, #5
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	440a      	add	r2, r1
 8003c5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c64:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c66:	78fa      	ldrb	r2, [r7, #3]
 8003c68:	6879      	ldr	r1, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	011b      	lsls	r3, r3, #4
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	440b      	add	r3, r1
 8003c74:	334c      	adds	r3, #76	@ 0x4c
 8003c76:	2204      	movs	r2, #4
 8003c78:	701a      	strb	r2, [r3, #0]
 8003c7a:	e014      	b.n	8003ca6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c7c:	78fa      	ldrb	r2, [r7, #3]
 8003c7e:	6879      	ldr	r1, [r7, #4]
 8003c80:	4613      	mov	r3, r2
 8003c82:	011b      	lsls	r3, r3, #4
 8003c84:	1a9b      	subs	r3, r3, r2
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	440b      	add	r3, r1
 8003c8a:	334c      	adds	r3, #76	@ 0x4c
 8003c8c:	2202      	movs	r2, #2
 8003c8e:	701a      	strb	r2, [r3, #0]
 8003c90:	e009      	b.n	8003ca6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	6879      	ldr	r1, [r7, #4]
 8003c96:	4613      	mov	r3, r2
 8003c98:	011b      	lsls	r3, r3, #4
 8003c9a:	1a9b      	subs	r3, r3, r2
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	440b      	add	r3, r1
 8003ca0:	334c      	adds	r3, #76	@ 0x4c
 8003ca2:	2202      	movs	r2, #2
 8003ca4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3326      	adds	r3, #38	@ 0x26
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	3326      	adds	r3, #38	@ 0x26
 8003ccc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f040 8136 	bne.w	8003f40 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	015a      	lsls	r2, r3, #5
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	4413      	add	r3, r2
 8003cdc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003cea:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cf2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cf4:	78fb      	ldrb	r3, [r7, #3]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6013      	str	r3, [r2, #0]
 8003d06:	e11b      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	334d      	adds	r3, #77	@ 0x4d
 8003d18:	781b      	ldrb	r3, [r3, #0]
 8003d1a:	2b03      	cmp	r3, #3
 8003d1c:	f040 8081 	bne.w	8003e22 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d20:	78fa      	ldrb	r2, [r7, #3]
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	4613      	mov	r3, r2
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	1a9b      	subs	r3, r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	440b      	add	r3, r1
 8003d2e:	334d      	adds	r3, #77	@ 0x4d
 8003d30:	2202      	movs	r2, #2
 8003d32:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d34:	78fa      	ldrb	r2, [r7, #3]
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	011b      	lsls	r3, r3, #4
 8003d3c:	1a9b      	subs	r3, r3, r2
 8003d3e:	009b      	lsls	r3, r3, #2
 8003d40:	440b      	add	r3, r1
 8003d42:	331b      	adds	r3, #27
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	f040 80fa 	bne.w	8003f40 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	334c      	adds	r3, #76	@ 0x4c
 8003d5c:	2202      	movs	r2, #2
 8003d5e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003d60:	78fb      	ldrb	r3, [r7, #3]
 8003d62:	015a      	lsls	r2, r3, #5
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4413      	add	r3, r2
 8003d68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	78fa      	ldrb	r2, [r7, #3]
 8003d70:	0151      	lsls	r1, r2, #5
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	440a      	add	r2, r1
 8003d76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d7a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7e:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003d80:	78fb      	ldrb	r3, [r7, #3]
 8003d82:	015a      	lsls	r2, r3, #5
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	4413      	add	r3, r2
 8003d88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	78fa      	ldrb	r2, [r7, #3]
 8003d90:	0151      	lsls	r1, r2, #5
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	440a      	add	r2, r1
 8003d96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003d9e:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	015a      	lsls	r2, r3, #5
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	4413      	add	r3, r2
 8003da8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	0151      	lsls	r1, r2, #5
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	440a      	add	r2, r1
 8003db6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003dba:	f023 0320 	bic.w	r3, r3, #32
 8003dbe:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dc0:	78fa      	ldrb	r2, [r7, #3]
 8003dc2:	6879      	ldr	r1, [r7, #4]
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	1a9b      	subs	r3, r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	3326      	adds	r3, #38	@ 0x26
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00b      	beq.n	8003dee <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003dd6:	78fa      	ldrb	r2, [r7, #3]
 8003dd8:	6879      	ldr	r1, [r7, #4]
 8003dda:	4613      	mov	r3, r2
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	1a9b      	subs	r3, r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	440b      	add	r3, r1
 8003de4:	3326      	adds	r3, #38	@ 0x26
 8003de6:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	f040 80a9 	bne.w	8003f40 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dee:	78fb      	ldrb	r3, [r7, #3]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e04:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e0c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e0e:	78fb      	ldrb	r3, [r7, #3]
 8003e10:	015a      	lsls	r2, r3, #5
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	4413      	add	r3, r2
 8003e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	e08e      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334d      	adds	r3, #77	@ 0x4d
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d143      	bne.n	8003ec0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	334d      	adds	r3, #77	@ 0x4d
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	334c      	adds	r3, #76	@ 0x4c
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3326      	adds	r3, #38	@ 0x26
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003e76:	78fa      	ldrb	r2, [r7, #3]
 8003e78:	6879      	ldr	r1, [r7, #4]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	1a9b      	subs	r3, r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	440b      	add	r3, r1
 8003e84:	3326      	adds	r3, #38	@ 0x26
 8003e86:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d159      	bne.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ea2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003eaa:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eac:	78fb      	ldrb	r3, [r7, #3]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb8:	461a      	mov	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6013      	str	r3, [r2, #0]
 8003ebe:	e03f      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003ec0:	78fa      	ldrb	r2, [r7, #3]
 8003ec2:	6879      	ldr	r1, [r7, #4]
 8003ec4:	4613      	mov	r3, r2
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	1a9b      	subs	r3, r3, r2
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	440b      	add	r3, r1
 8003ece:	334d      	adds	r3, #77	@ 0x4d
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d126      	bne.n	8003f24 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ed6:	78fa      	ldrb	r2, [r7, #3]
 8003ed8:	6879      	ldr	r1, [r7, #4]
 8003eda:	4613      	mov	r3, r2
 8003edc:	011b      	lsls	r3, r3, #4
 8003ede:	1a9b      	subs	r3, r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	440b      	add	r3, r1
 8003ee4:	334d      	adds	r3, #77	@ 0x4d
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	011b      	lsls	r3, r3, #4
 8003ef2:	1a9b      	subs	r3, r3, r2
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	440b      	add	r3, r1
 8003ef8:	3344      	adds	r3, #68	@ 0x44
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1c59      	adds	r1, r3, #1
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	4613      	mov	r3, r2
 8003f02:	011b      	lsls	r3, r3, #4
 8003f04:	1a9b      	subs	r3, r3, r2
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	4403      	add	r3, r0
 8003f0a:	3344      	adds	r3, #68	@ 0x44
 8003f0c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334c      	adds	r3, #76	@ 0x4c
 8003f1e:	2204      	movs	r2, #4
 8003f20:	701a      	strb	r2, [r3, #0]
 8003f22:	e00d      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	2b02      	cmp	r3, #2
 8003f38:	f000 8100 	beq.w	800413c <HCD_HC_IN_IRQHandler+0xcca>
 8003f3c:	e000      	b.n	8003f40 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f3e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f40:	78fa      	ldrb	r2, [r7, #3]
 8003f42:	6879      	ldr	r1, [r7, #4]
 8003f44:	4613      	mov	r3, r2
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	334c      	adds	r3, #76	@ 0x4c
 8003f50:	781a      	ldrb	r2, [r3, #0]
 8003f52:	78fb      	ldrb	r3, [r7, #3]
 8003f54:	4619      	mov	r1, r3
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f006 fab0 	bl	800a4bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f5c:	e0ef      	b.n	800413e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	4611      	mov	r1, r2
 8003f66:	4618      	mov	r0, r3
 8003f68:	f003 f9ab 	bl	80072c2 <USB_ReadChInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f72:	2b40      	cmp	r3, #64	@ 0x40
 8003f74:	d12f      	bne.n	8003fd6 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003f76:	78fb      	ldrb	r3, [r7, #3]
 8003f78:	015a      	lsls	r2, r3, #5
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f82:	461a      	mov	r2, r3
 8003f84:	2340      	movs	r3, #64	@ 0x40
 8003f86:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003f88:	78fa      	ldrb	r2, [r7, #3]
 8003f8a:	6879      	ldr	r1, [r7, #4]
 8003f8c:	4613      	mov	r3, r2
 8003f8e:	011b      	lsls	r3, r3, #4
 8003f90:	1a9b      	subs	r3, r3, r2
 8003f92:	009b      	lsls	r3, r3, #2
 8003f94:	440b      	add	r3, r1
 8003f96:	334d      	adds	r3, #77	@ 0x4d
 8003f98:	2205      	movs	r2, #5
 8003f9a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003f9c:	78fa      	ldrb	r2, [r7, #3]
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	331a      	adds	r3, #26
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d109      	bne.n	8003fc6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003fb2:	78fa      	ldrb	r2, [r7, #3]
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	3344      	adds	r3, #68	@ 0x44
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f003 ff1b 	bl	8007e0a <USB_HC_Halt>
 8003fd4:	e0b3      	b.n	800413e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	78fa      	ldrb	r2, [r7, #3]
 8003fdc:	4611      	mov	r1, r2
 8003fde:	4618      	mov	r0, r3
 8003fe0:	f003 f96f 	bl	80072c2 <USB_ReadChInterrupts>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b10      	cmp	r3, #16
 8003fec:	f040 80a7 	bne.w	800413e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003ff0:	78fa      	ldrb	r2, [r7, #3]
 8003ff2:	6879      	ldr	r1, [r7, #4]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	1a9b      	subs	r3, r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	3326      	adds	r3, #38	@ 0x26
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b03      	cmp	r3, #3
 8004004:	d11b      	bne.n	800403e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004006:	78fa      	ldrb	r2, [r7, #3]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	1a9b      	subs	r3, r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3344      	adds	r3, #68	@ 0x44
 8004016:	2200      	movs	r2, #0
 8004018:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800401a:	78fa      	ldrb	r2, [r7, #3]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	1a9b      	subs	r3, r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	334d      	adds	r3, #77	@ 0x4d
 800402a:	2204      	movs	r2, #4
 800402c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	78fa      	ldrb	r2, [r7, #3]
 8004034:	4611      	mov	r1, r2
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fee7 	bl	8007e0a <USB_HC_Halt>
 800403c:	e03f      	b.n	80040be <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800403e:	78fa      	ldrb	r2, [r7, #3]
 8004040:	6879      	ldr	r1, [r7, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	011b      	lsls	r3, r3, #4
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	440b      	add	r3, r1
 800404c:	3326      	adds	r3, #38	@ 0x26
 800404e:	781b      	ldrb	r3, [r3, #0]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004054:	78fa      	ldrb	r2, [r7, #3]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	011b      	lsls	r3, r3, #4
 800405c:	1a9b      	subs	r3, r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3326      	adds	r3, #38	@ 0x26
 8004064:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004066:	2b02      	cmp	r3, #2
 8004068:	d129      	bne.n	80040be <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800406a:	78fa      	ldrb	r2, [r7, #3]
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	4613      	mov	r3, r2
 8004070:	011b      	lsls	r3, r3, #4
 8004072:	1a9b      	subs	r3, r3, r2
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	440b      	add	r3, r1
 8004078:	3344      	adds	r3, #68	@ 0x44
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	799b      	ldrb	r3, [r3, #6]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00a      	beq.n	800409c <HCD_HC_IN_IRQHandler+0xc2a>
 8004086:	78fa      	ldrb	r2, [r7, #3]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	011b      	lsls	r3, r3, #4
 800408e:	1a9b      	subs	r3, r3, r2
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	440b      	add	r3, r1
 8004094:	331b      	adds	r3, #27
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d110      	bne.n	80040be <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800409c:	78fa      	ldrb	r2, [r7, #3]
 800409e:	6879      	ldr	r1, [r7, #4]
 80040a0:	4613      	mov	r3, r2
 80040a2:	011b      	lsls	r3, r3, #4
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	440b      	add	r3, r1
 80040aa:	334d      	adds	r3, #77	@ 0x4d
 80040ac:	2204      	movs	r2, #4
 80040ae:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	78fa      	ldrb	r2, [r7, #3]
 80040b6:	4611      	mov	r1, r2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f003 fea6 	bl	8007e0a <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80040be:	78fa      	ldrb	r2, [r7, #3]
 80040c0:	6879      	ldr	r1, [r7, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	011b      	lsls	r3, r3, #4
 80040c6:	1a9b      	subs	r3, r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	331b      	adds	r3, #27
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d129      	bne.n	8004128 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80040d4:	78fa      	ldrb	r2, [r7, #3]
 80040d6:	6879      	ldr	r1, [r7, #4]
 80040d8:	4613      	mov	r3, r2
 80040da:	011b      	lsls	r3, r3, #4
 80040dc:	1a9b      	subs	r3, r3, r2
 80040de:	009b      	lsls	r3, r3, #2
 80040e0:	440b      	add	r3, r1
 80040e2:	331b      	adds	r3, #27
 80040e4:	2200      	movs	r2, #0
 80040e6:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80040e8:	78fb      	ldrb	r3, [r7, #3]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	0151      	lsls	r1, r2, #5
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	440a      	add	r2, r1
 80040fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004102:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004106:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004108:	78fb      	ldrb	r3, [r7, #3]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	78fa      	ldrb	r2, [r7, #3]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	440a      	add	r2, r1
 800411e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004122:	f043 0320 	orr.w	r3, r3, #32
 8004126:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004128:	78fb      	ldrb	r3, [r7, #3]
 800412a:	015a      	lsls	r2, r3, #5
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4413      	add	r3, r2
 8004130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004134:	461a      	mov	r2, r3
 8004136:	2310      	movs	r3, #16
 8004138:	6093      	str	r3, [r2, #8]
 800413a:	e000      	b.n	800413e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 800413c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	460b      	mov	r3, r1
 800414e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	78fa      	ldrb	r2, [r7, #3]
 8004160:	4611      	mov	r1, r2
 8004162:	4618      	mov	r0, r3
 8004164:	f003 f8ad 	bl	80072c2 <USB_ReadChInterrupts>
 8004168:	4603      	mov	r3, r0
 800416a:	f003 0304 	and.w	r3, r3, #4
 800416e:	2b04      	cmp	r3, #4
 8004170:	d11b      	bne.n	80041aa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004172:	78fb      	ldrb	r3, [r7, #3]
 8004174:	015a      	lsls	r2, r3, #5
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	4413      	add	r3, r2
 800417a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417e:	461a      	mov	r2, r3
 8004180:	2304      	movs	r3, #4
 8004182:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334d      	adds	r3, #77	@ 0x4d
 8004194:	2207      	movs	r2, #7
 8004196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	78fa      	ldrb	r2, [r7, #3]
 800419e:	4611      	mov	r1, r2
 80041a0:	4618      	mov	r0, r3
 80041a2:	f003 fe32 	bl	8007e0a <USB_HC_Halt>
 80041a6:	f000 bc89 	b.w	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	4611      	mov	r1, r2
 80041b2:	4618      	mov	r0, r3
 80041b4:	f003 f885 	bl	80072c2 <USB_ReadChInterrupts>
 80041b8:	4603      	mov	r3, r0
 80041ba:	f003 0320 	and.w	r3, r3, #32
 80041be:	2b20      	cmp	r3, #32
 80041c0:	f040 8082 	bne.w	80042c8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80041c4:	78fb      	ldrb	r3, [r7, #3]
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041d0:	461a      	mov	r2, r3
 80041d2:	2320      	movs	r3, #32
 80041d4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80041d6:	78fa      	ldrb	r2, [r7, #3]
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	4613      	mov	r3, r2
 80041dc:	011b      	lsls	r3, r3, #4
 80041de:	1a9b      	subs	r3, r3, r2
 80041e0:	009b      	lsls	r3, r3, #2
 80041e2:	440b      	add	r3, r1
 80041e4:	3319      	adds	r3, #25
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d124      	bne.n	8004236 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80041ec:	78fa      	ldrb	r2, [r7, #3]
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	4613      	mov	r3, r2
 80041f2:	011b      	lsls	r3, r3, #4
 80041f4:	1a9b      	subs	r3, r3, r2
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	440b      	add	r3, r1
 80041fa:	3319      	adds	r3, #25
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004200:	78fa      	ldrb	r2, [r7, #3]
 8004202:	6879      	ldr	r1, [r7, #4]
 8004204:	4613      	mov	r3, r2
 8004206:	011b      	lsls	r3, r3, #4
 8004208:	1a9b      	subs	r3, r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	440b      	add	r3, r1
 800420e:	334c      	adds	r3, #76	@ 0x4c
 8004210:	2202      	movs	r2, #2
 8004212:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004214:	78fa      	ldrb	r2, [r7, #3]
 8004216:	6879      	ldr	r1, [r7, #4]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	334d      	adds	r3, #77	@ 0x4d
 8004224:	2203      	movs	r2, #3
 8004226:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	78fa      	ldrb	r2, [r7, #3]
 800422e:	4611      	mov	r1, r2
 8004230:	4618      	mov	r0, r3
 8004232:	f003 fdea 	bl	8007e0a <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004236:	78fa      	ldrb	r2, [r7, #3]
 8004238:	6879      	ldr	r1, [r7, #4]
 800423a:	4613      	mov	r3, r2
 800423c:	011b      	lsls	r3, r3, #4
 800423e:	1a9b      	subs	r3, r3, r2
 8004240:	009b      	lsls	r3, r3, #2
 8004242:	440b      	add	r3, r1
 8004244:	331a      	adds	r3, #26
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	f040 8437 	bne.w	8004abc <HCD_HC_OUT_IRQHandler+0x978>
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	6879      	ldr	r1, [r7, #4]
 8004252:	4613      	mov	r3, r2
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	440b      	add	r3, r1
 800425c:	331b      	adds	r3, #27
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b00      	cmp	r3, #0
 8004262:	f040 842b 	bne.w	8004abc <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	3326      	adds	r3, #38	@ 0x26
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d009      	beq.n	8004290 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	331b      	adds	r3, #27
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004290:	78fa      	ldrb	r2, [r7, #3]
 8004292:	6879      	ldr	r1, [r7, #4]
 8004294:	4613      	mov	r3, r2
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	1a9b      	subs	r3, r3, r2
 800429a:	009b      	lsls	r3, r3, #2
 800429c:	440b      	add	r3, r1
 800429e:	334d      	adds	r3, #77	@ 0x4d
 80042a0:	2203      	movs	r2, #3
 80042a2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	78fa      	ldrb	r2, [r7, #3]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f003 fdac 	bl	8007e0a <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80042b2:	78fa      	ldrb	r2, [r7, #3]
 80042b4:	6879      	ldr	r1, [r7, #4]
 80042b6:	4613      	mov	r3, r2
 80042b8:	011b      	lsls	r3, r3, #4
 80042ba:	1a9b      	subs	r3, r3, r2
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	440b      	add	r3, r1
 80042c0:	3344      	adds	r3, #68	@ 0x44
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	e3f9      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	78fa      	ldrb	r2, [r7, #3]
 80042ce:	4611      	mov	r1, r2
 80042d0:	4618      	mov	r0, r3
 80042d2:	f002 fff6 	bl	80072c2 <USB_ReadChInterrupts>
 80042d6:	4603      	mov	r3, r0
 80042d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042e0:	d111      	bne.n	8004306 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ee:	461a      	mov	r2, r3
 80042f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80042f4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	78fa      	ldrb	r2, [r7, #3]
 80042fc:	4611      	mov	r1, r2
 80042fe:	4618      	mov	r0, r3
 8004300:	f003 fd83 	bl	8007e0a <USB_HC_Halt>
 8004304:	e3da      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	78fa      	ldrb	r2, [r7, #3]
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f002 ffd7 	bl	80072c2 <USB_ReadChInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b01      	cmp	r3, #1
 800431c:	d168      	bne.n	80043f0 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800431e:	78fa      	ldrb	r2, [r7, #3]
 8004320:	6879      	ldr	r1, [r7, #4]
 8004322:	4613      	mov	r3, r2
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	1a9b      	subs	r3, r3, r2
 8004328:	009b      	lsls	r3, r3, #2
 800432a:	440b      	add	r3, r1
 800432c:	3344      	adds	r3, #68	@ 0x44
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f002 ffc1 	bl	80072c2 <USB_ReadChInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004346:	2b40      	cmp	r3, #64	@ 0x40
 8004348:	d112      	bne.n	8004370 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800434a:	78fa      	ldrb	r2, [r7, #3]
 800434c:	6879      	ldr	r1, [r7, #4]
 800434e:	4613      	mov	r3, r2
 8004350:	011b      	lsls	r3, r3, #4
 8004352:	1a9b      	subs	r3, r3, r2
 8004354:	009b      	lsls	r3, r3, #2
 8004356:	440b      	add	r3, r1
 8004358:	3319      	adds	r3, #25
 800435a:	2201      	movs	r2, #1
 800435c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	4413      	add	r3, r2
 8004366:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800436a:	461a      	mov	r2, r3
 800436c:	2340      	movs	r3, #64	@ 0x40
 800436e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8004370:	78fa      	ldrb	r2, [r7, #3]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	331b      	adds	r3, #27
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d019      	beq.n	80043ba <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004386:	78fa      	ldrb	r2, [r7, #3]
 8004388:	6879      	ldr	r1, [r7, #4]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	331b      	adds	r3, #27
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	015a      	lsls	r2, r3, #5
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	4413      	add	r3, r2
 80043a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	78fa      	ldrb	r2, [r7, #3]
 80043aa:	0151      	lsls	r1, r2, #5
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	440a      	add	r2, r1
 80043b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80043ba:	78fb      	ldrb	r3, [r7, #3]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043c6:	461a      	mov	r2, r3
 80043c8:	2301      	movs	r3, #1
 80043ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80043cc:	78fa      	ldrb	r2, [r7, #3]
 80043ce:	6879      	ldr	r1, [r7, #4]
 80043d0:	4613      	mov	r3, r2
 80043d2:	011b      	lsls	r3, r3, #4
 80043d4:	1a9b      	subs	r3, r3, r2
 80043d6:	009b      	lsls	r3, r3, #2
 80043d8:	440b      	add	r3, r1
 80043da:	334d      	adds	r3, #77	@ 0x4d
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	78fa      	ldrb	r2, [r7, #3]
 80043e6:	4611      	mov	r1, r2
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fd0e 	bl	8007e0a <USB_HC_Halt>
 80043ee:	e365      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	78fa      	ldrb	r2, [r7, #3]
 80043f6:	4611      	mov	r1, r2
 80043f8:	4618      	mov	r0, r3
 80043fa:	f002 ff62 	bl	80072c2 <USB_ReadChInterrupts>
 80043fe:	4603      	mov	r3, r0
 8004400:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004404:	2b40      	cmp	r3, #64	@ 0x40
 8004406:	d139      	bne.n	800447c <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8004408:	78fa      	ldrb	r2, [r7, #3]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	334d      	adds	r3, #77	@ 0x4d
 8004418:	2205      	movs	r2, #5
 800441a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800441c:	78fa      	ldrb	r2, [r7, #3]
 800441e:	6879      	ldr	r1, [r7, #4]
 8004420:	4613      	mov	r3, r2
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	440b      	add	r3, r1
 800442a:	331a      	adds	r3, #26
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d109      	bne.n	8004446 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004432:	78fa      	ldrb	r2, [r7, #3]
 8004434:	6879      	ldr	r1, [r7, #4]
 8004436:	4613      	mov	r3, r2
 8004438:	011b      	lsls	r3, r3, #4
 800443a:	1a9b      	subs	r3, r3, r2
 800443c:	009b      	lsls	r3, r3, #2
 800443e:	440b      	add	r3, r1
 8004440:	3319      	adds	r3, #25
 8004442:	2201      	movs	r2, #1
 8004444:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004446:	78fa      	ldrb	r2, [r7, #3]
 8004448:	6879      	ldr	r1, [r7, #4]
 800444a:	4613      	mov	r3, r2
 800444c:	011b      	lsls	r3, r3, #4
 800444e:	1a9b      	subs	r3, r3, r2
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	440b      	add	r3, r1
 8004454:	3344      	adds	r3, #68	@ 0x44
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	78fa      	ldrb	r2, [r7, #3]
 8004460:	4611      	mov	r1, r2
 8004462:	4618      	mov	r0, r3
 8004464:	f003 fcd1 	bl	8007e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004468:	78fb      	ldrb	r3, [r7, #3]
 800446a:	015a      	lsls	r2, r3, #5
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	4413      	add	r3, r2
 8004470:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004474:	461a      	mov	r2, r3
 8004476:	2340      	movs	r3, #64	@ 0x40
 8004478:	6093      	str	r3, [r2, #8]
 800447a:	e31f      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	78fa      	ldrb	r2, [r7, #3]
 8004482:	4611      	mov	r1, r2
 8004484:	4618      	mov	r0, r3
 8004486:	f002 ff1c 	bl	80072c2 <USB_ReadChInterrupts>
 800448a:	4603      	mov	r3, r0
 800448c:	f003 0308 	and.w	r3, r3, #8
 8004490:	2b08      	cmp	r3, #8
 8004492:	d11a      	bne.n	80044ca <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004494:	78fb      	ldrb	r3, [r7, #3]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	4413      	add	r3, r2
 800449c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a0:	461a      	mov	r2, r3
 80044a2:	2308      	movs	r3, #8
 80044a4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80044a6:	78fa      	ldrb	r2, [r7, #3]
 80044a8:	6879      	ldr	r1, [r7, #4]
 80044aa:	4613      	mov	r3, r2
 80044ac:	011b      	lsls	r3, r3, #4
 80044ae:	1a9b      	subs	r3, r3, r2
 80044b0:	009b      	lsls	r3, r3, #2
 80044b2:	440b      	add	r3, r1
 80044b4:	334d      	adds	r3, #77	@ 0x4d
 80044b6:	2206      	movs	r2, #6
 80044b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	78fa      	ldrb	r2, [r7, #3]
 80044c0:	4611      	mov	r1, r2
 80044c2:	4618      	mov	r0, r3
 80044c4:	f003 fca1 	bl	8007e0a <USB_HC_Halt>
 80044c8:	e2f8      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	78fa      	ldrb	r2, [r7, #3]
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f002 fef5 	bl	80072c2 <USB_ReadChInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 0310 	and.w	r3, r3, #16
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d144      	bne.n	800456c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80044e2:	78fa      	ldrb	r2, [r7, #3]
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	4613      	mov	r3, r2
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	440b      	add	r3, r1
 80044f0:	3344      	adds	r3, #68	@ 0x44
 80044f2:	2200      	movs	r2, #0
 80044f4:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80044f6:	78fa      	ldrb	r2, [r7, #3]
 80044f8:	6879      	ldr	r1, [r7, #4]
 80044fa:	4613      	mov	r3, r2
 80044fc:	011b      	lsls	r3, r3, #4
 80044fe:	1a9b      	subs	r3, r3, r2
 8004500:	009b      	lsls	r3, r3, #2
 8004502:	440b      	add	r3, r1
 8004504:	334d      	adds	r3, #77	@ 0x4d
 8004506:	2204      	movs	r2, #4
 8004508:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800450a:	78fa      	ldrb	r2, [r7, #3]
 800450c:	6879      	ldr	r1, [r7, #4]
 800450e:	4613      	mov	r3, r2
 8004510:	011b      	lsls	r3, r3, #4
 8004512:	1a9b      	subs	r3, r3, r2
 8004514:	009b      	lsls	r3, r3, #2
 8004516:	440b      	add	r3, r1
 8004518:	3319      	adds	r3, #25
 800451a:	781b      	ldrb	r3, [r3, #0]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d114      	bne.n	800454a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8004520:	78fa      	ldrb	r2, [r7, #3]
 8004522:	6879      	ldr	r1, [r7, #4]
 8004524:	4613      	mov	r3, r2
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	1a9b      	subs	r3, r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	440b      	add	r3, r1
 800452e:	3318      	adds	r3, #24
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d109      	bne.n	800454a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004536:	78fa      	ldrb	r2, [r7, #3]
 8004538:	6879      	ldr	r1, [r7, #4]
 800453a:	4613      	mov	r3, r2
 800453c:	011b      	lsls	r3, r3, #4
 800453e:	1a9b      	subs	r3, r3, r2
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	440b      	add	r3, r1
 8004544:	3319      	adds	r3, #25
 8004546:	2201      	movs	r2, #1
 8004548:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	4611      	mov	r1, r2
 8004552:	4618      	mov	r0, r3
 8004554:	f003 fc59 	bl	8007e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004558:	78fb      	ldrb	r3, [r7, #3]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2310      	movs	r3, #16
 8004568:	6093      	str	r3, [r2, #8]
 800456a:	e2a7      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	78fa      	ldrb	r2, [r7, #3]
 8004572:	4611      	mov	r1, r2
 8004574:	4618      	mov	r0, r3
 8004576:	f002 fea4 	bl	80072c2 <USB_ReadChInterrupts>
 800457a:	4603      	mov	r3, r0
 800457c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004580:	2b80      	cmp	r3, #128	@ 0x80
 8004582:	f040 8083 	bne.w	800468c <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	799b      	ldrb	r3, [r3, #6]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d111      	bne.n	80045b2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800458e:	78fa      	ldrb	r2, [r7, #3]
 8004590:	6879      	ldr	r1, [r7, #4]
 8004592:	4613      	mov	r3, r2
 8004594:	011b      	lsls	r3, r3, #4
 8004596:	1a9b      	subs	r3, r3, r2
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	440b      	add	r3, r1
 800459c:	334d      	adds	r3, #77	@ 0x4d
 800459e:	2207      	movs	r2, #7
 80045a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	78fa      	ldrb	r2, [r7, #3]
 80045a8:	4611      	mov	r1, r2
 80045aa:	4618      	mov	r0, r3
 80045ac:	f003 fc2d 	bl	8007e0a <USB_HC_Halt>
 80045b0:	e062      	b.n	8004678 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80045b2:	78fa      	ldrb	r2, [r7, #3]
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	4613      	mov	r3, r2
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	1a9b      	subs	r3, r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	440b      	add	r3, r1
 80045c0:	3344      	adds	r3, #68	@ 0x44
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	1c59      	adds	r1, r3, #1
 80045c6:	6878      	ldr	r0, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	011b      	lsls	r3, r3, #4
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	4403      	add	r3, r0
 80045d2:	3344      	adds	r3, #68	@ 0x44
 80045d4:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80045d6:	78fa      	ldrb	r2, [r7, #3]
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	4613      	mov	r3, r2
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	1a9b      	subs	r3, r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	440b      	add	r3, r1
 80045e4:	3344      	adds	r3, #68	@ 0x44
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d922      	bls.n	8004632 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80045ec:	78fa      	ldrb	r2, [r7, #3]
 80045ee:	6879      	ldr	r1, [r7, #4]
 80045f0:	4613      	mov	r3, r2
 80045f2:	011b      	lsls	r3, r3, #4
 80045f4:	1a9b      	subs	r3, r3, r2
 80045f6:	009b      	lsls	r3, r3, #2
 80045f8:	440b      	add	r3, r1
 80045fa:	3344      	adds	r3, #68	@ 0x44
 80045fc:	2200      	movs	r2, #0
 80045fe:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004600:	78fa      	ldrb	r2, [r7, #3]
 8004602:	6879      	ldr	r1, [r7, #4]
 8004604:	4613      	mov	r3, r2
 8004606:	011b      	lsls	r3, r3, #4
 8004608:	1a9b      	subs	r3, r3, r2
 800460a:	009b      	lsls	r3, r3, #2
 800460c:	440b      	add	r3, r1
 800460e:	334c      	adds	r3, #76	@ 0x4c
 8004610:	2204      	movs	r2, #4
 8004612:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004614:	78fa      	ldrb	r2, [r7, #3]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	1a9b      	subs	r3, r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	334c      	adds	r3, #76	@ 0x4c
 8004624:	781a      	ldrb	r2, [r3, #0]
 8004626:	78fb      	ldrb	r3, [r7, #3]
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f005 ff46 	bl	800a4bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004630:	e022      	b.n	8004678 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004632:	78fa      	ldrb	r2, [r7, #3]
 8004634:	6879      	ldr	r1, [r7, #4]
 8004636:	4613      	mov	r3, r2
 8004638:	011b      	lsls	r3, r3, #4
 800463a:	1a9b      	subs	r3, r3, r2
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	440b      	add	r3, r1
 8004640:	334c      	adds	r3, #76	@ 0x4c
 8004642:	2202      	movs	r2, #2
 8004644:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004646:	78fb      	ldrb	r3, [r7, #3]
 8004648:	015a      	lsls	r2, r3, #5
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	4413      	add	r3, r2
 800464e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800465c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004664:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004666:	78fb      	ldrb	r3, [r7, #3]
 8004668:	015a      	lsls	r2, r3, #5
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	4413      	add	r3, r2
 800466e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004672:	461a      	mov	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004678:	78fb      	ldrb	r3, [r7, #3]
 800467a:	015a      	lsls	r2, r3, #5
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	4413      	add	r3, r2
 8004680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004684:	461a      	mov	r2, r3
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	6093      	str	r3, [r2, #8]
 800468a:	e217      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	78fa      	ldrb	r2, [r7, #3]
 8004692:	4611      	mov	r1, r2
 8004694:	4618      	mov	r0, r3
 8004696:	f002 fe14 	bl	80072c2 <USB_ReadChInterrupts>
 800469a:	4603      	mov	r3, r0
 800469c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046a4:	d11b      	bne.n	80046de <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80046a6:	78fa      	ldrb	r2, [r7, #3]
 80046a8:	6879      	ldr	r1, [r7, #4]
 80046aa:	4613      	mov	r3, r2
 80046ac:	011b      	lsls	r3, r3, #4
 80046ae:	1a9b      	subs	r3, r3, r2
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	440b      	add	r3, r1
 80046b4:	334d      	adds	r3, #77	@ 0x4d
 80046b6:	2209      	movs	r2, #9
 80046b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	78fa      	ldrb	r2, [r7, #3]
 80046c0:	4611      	mov	r1, r2
 80046c2:	4618      	mov	r0, r3
 80046c4:	f003 fba1 	bl	8007e0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80046c8:	78fb      	ldrb	r3, [r7, #3]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80046d4:	461a      	mov	r2, r3
 80046d6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046da:	6093      	str	r3, [r2, #8]
 80046dc:	e1ee      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	78fa      	ldrb	r2, [r7, #3]
 80046e4:	4611      	mov	r1, r2
 80046e6:	4618      	mov	r0, r3
 80046e8:	f002 fdeb 	bl	80072c2 <USB_ReadChInterrupts>
 80046ec:	4603      	mov	r3, r0
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	f040 81df 	bne.w	8004ab6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80046f8:	78fb      	ldrb	r3, [r7, #3]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004704:	461a      	mov	r2, r3
 8004706:	2302      	movs	r3, #2
 8004708:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800470a:	78fa      	ldrb	r2, [r7, #3]
 800470c:	6879      	ldr	r1, [r7, #4]
 800470e:	4613      	mov	r3, r2
 8004710:	011b      	lsls	r3, r3, #4
 8004712:	1a9b      	subs	r3, r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	440b      	add	r3, r1
 8004718:	334d      	adds	r3, #77	@ 0x4d
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b01      	cmp	r3, #1
 800471e:	f040 8093 	bne.w	8004848 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004722:	78fa      	ldrb	r2, [r7, #3]
 8004724:	6879      	ldr	r1, [r7, #4]
 8004726:	4613      	mov	r3, r2
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	1a9b      	subs	r3, r3, r2
 800472c:	009b      	lsls	r3, r3, #2
 800472e:	440b      	add	r3, r1
 8004730:	334d      	adds	r3, #77	@ 0x4d
 8004732:	2202      	movs	r2, #2
 8004734:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004736:	78fa      	ldrb	r2, [r7, #3]
 8004738:	6879      	ldr	r1, [r7, #4]
 800473a:	4613      	mov	r3, r2
 800473c:	011b      	lsls	r3, r3, #4
 800473e:	1a9b      	subs	r3, r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	440b      	add	r3, r1
 8004744:	334c      	adds	r3, #76	@ 0x4c
 8004746:	2201      	movs	r2, #1
 8004748:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800474a:	78fa      	ldrb	r2, [r7, #3]
 800474c:	6879      	ldr	r1, [r7, #4]
 800474e:	4613      	mov	r3, r2
 8004750:	011b      	lsls	r3, r3, #4
 8004752:	1a9b      	subs	r3, r3, r2
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	440b      	add	r3, r1
 8004758:	3326      	adds	r3, #38	@ 0x26
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	2b02      	cmp	r3, #2
 800475e:	d00b      	beq.n	8004778 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8004760:	78fa      	ldrb	r2, [r7, #3]
 8004762:	6879      	ldr	r1, [r7, #4]
 8004764:	4613      	mov	r3, r2
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	440b      	add	r3, r1
 800476e:	3326      	adds	r3, #38	@ 0x26
 8004770:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004772:	2b03      	cmp	r3, #3
 8004774:	f040 8190 	bne.w	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	799b      	ldrb	r3, [r3, #6]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8004780:	78fa      	ldrb	r2, [r7, #3]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	011b      	lsls	r3, r3, #4
 8004788:	1a9b      	subs	r3, r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	333d      	adds	r3, #61	@ 0x3d
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	f083 0301 	eor.w	r3, r3, #1
 8004798:	b2d8      	uxtb	r0, r3
 800479a:	6879      	ldr	r1, [r7, #4]
 800479c:	4613      	mov	r3, r2
 800479e:	011b      	lsls	r3, r3, #4
 80047a0:	1a9b      	subs	r3, r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	440b      	add	r3, r1
 80047a6:	333d      	adds	r3, #61	@ 0x3d
 80047a8:	4602      	mov	r2, r0
 80047aa:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	799b      	ldrb	r3, [r3, #6]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	f040 8171 	bne.w	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
 80047b6:	78fa      	ldrb	r2, [r7, #3]
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	011b      	lsls	r3, r3, #4
 80047be:	1a9b      	subs	r3, r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3334      	adds	r3, #52	@ 0x34
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8165 	beq.w	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	6879      	ldr	r1, [r7, #4]
 80047d2:	4613      	mov	r3, r2
 80047d4:	011b      	lsls	r3, r3, #4
 80047d6:	1a9b      	subs	r3, r3, r2
 80047d8:	009b      	lsls	r3, r3, #2
 80047da:	440b      	add	r3, r1
 80047dc:	3334      	adds	r3, #52	@ 0x34
 80047de:	6819      	ldr	r1, [r3, #0]
 80047e0:	78fa      	ldrb	r2, [r7, #3]
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	4613      	mov	r3, r2
 80047e6:	011b      	lsls	r3, r3, #4
 80047e8:	1a9b      	subs	r3, r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4403      	add	r3, r0
 80047ee:	3328      	adds	r3, #40	@ 0x28
 80047f0:	881b      	ldrh	r3, [r3, #0]
 80047f2:	440b      	add	r3, r1
 80047f4:	1e59      	subs	r1, r3, #1
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4403      	add	r3, r0
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	fbb1 f3f3 	udiv	r3, r1, r3
 800480c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800480e:	68bb      	ldr	r3, [r7, #8]
 8004810:	f003 0301 	and.w	r3, r3, #1
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 813f 	beq.w	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800481a:	78fa      	ldrb	r2, [r7, #3]
 800481c:	6879      	ldr	r1, [r7, #4]
 800481e:	4613      	mov	r3, r2
 8004820:	011b      	lsls	r3, r3, #4
 8004822:	1a9b      	subs	r3, r3, r2
 8004824:	009b      	lsls	r3, r3, #2
 8004826:	440b      	add	r3, r1
 8004828:	333d      	adds	r3, #61	@ 0x3d
 800482a:	781b      	ldrb	r3, [r3, #0]
 800482c:	78fa      	ldrb	r2, [r7, #3]
 800482e:	f083 0301 	eor.w	r3, r3, #1
 8004832:	b2d8      	uxtb	r0, r3
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	4613      	mov	r3, r2
 8004838:	011b      	lsls	r3, r3, #4
 800483a:	1a9b      	subs	r3, r3, r2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	333d      	adds	r3, #61	@ 0x3d
 8004842:	4602      	mov	r2, r0
 8004844:	701a      	strb	r2, [r3, #0]
 8004846:	e127      	b.n	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004848:	78fa      	ldrb	r2, [r7, #3]
 800484a:	6879      	ldr	r1, [r7, #4]
 800484c:	4613      	mov	r3, r2
 800484e:	011b      	lsls	r3, r3, #4
 8004850:	1a9b      	subs	r3, r3, r2
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	440b      	add	r3, r1
 8004856:	334d      	adds	r3, #77	@ 0x4d
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	2b03      	cmp	r3, #3
 800485c:	d120      	bne.n	80048a0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800485e:	78fa      	ldrb	r2, [r7, #3]
 8004860:	6879      	ldr	r1, [r7, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	011b      	lsls	r3, r3, #4
 8004866:	1a9b      	subs	r3, r3, r2
 8004868:	009b      	lsls	r3, r3, #2
 800486a:	440b      	add	r3, r1
 800486c:	334d      	adds	r3, #77	@ 0x4d
 800486e:	2202      	movs	r2, #2
 8004870:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004872:	78fa      	ldrb	r2, [r7, #3]
 8004874:	6879      	ldr	r1, [r7, #4]
 8004876:	4613      	mov	r3, r2
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	1a9b      	subs	r3, r3, r2
 800487c:	009b      	lsls	r3, r3, #2
 800487e:	440b      	add	r3, r1
 8004880:	331b      	adds	r3, #27
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b01      	cmp	r3, #1
 8004886:	f040 8107 	bne.w	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800488a:	78fa      	ldrb	r2, [r7, #3]
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	4613      	mov	r3, r2
 8004890:	011b      	lsls	r3, r3, #4
 8004892:	1a9b      	subs	r3, r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	440b      	add	r3, r1
 8004898:	334c      	adds	r3, #76	@ 0x4c
 800489a:	2202      	movs	r2, #2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e0fb      	b.n	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80048a0:	78fa      	ldrb	r2, [r7, #3]
 80048a2:	6879      	ldr	r1, [r7, #4]
 80048a4:	4613      	mov	r3, r2
 80048a6:	011b      	lsls	r3, r3, #4
 80048a8:	1a9b      	subs	r3, r3, r2
 80048aa:	009b      	lsls	r3, r3, #2
 80048ac:	440b      	add	r3, r1
 80048ae:	334d      	adds	r3, #77	@ 0x4d
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d13a      	bne.n	800492c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80048b6:	78fa      	ldrb	r2, [r7, #3]
 80048b8:	6879      	ldr	r1, [r7, #4]
 80048ba:	4613      	mov	r3, r2
 80048bc:	011b      	lsls	r3, r3, #4
 80048be:	1a9b      	subs	r3, r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	334d      	adds	r3, #77	@ 0x4d
 80048c6:	2202      	movs	r2, #2
 80048c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80048ca:	78fa      	ldrb	r2, [r7, #3]
 80048cc:	6879      	ldr	r1, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	011b      	lsls	r3, r3, #4
 80048d2:	1a9b      	subs	r3, r3, r2
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	440b      	add	r3, r1
 80048d8:	334c      	adds	r3, #76	@ 0x4c
 80048da:	2202      	movs	r2, #2
 80048dc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80048de:	78fa      	ldrb	r2, [r7, #3]
 80048e0:	6879      	ldr	r1, [r7, #4]
 80048e2:	4613      	mov	r3, r2
 80048e4:	011b      	lsls	r3, r3, #4
 80048e6:	1a9b      	subs	r3, r3, r2
 80048e8:	009b      	lsls	r3, r3, #2
 80048ea:	440b      	add	r3, r1
 80048ec:	331b      	adds	r3, #27
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	f040 80d1 	bne.w	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80048f6:	78fa      	ldrb	r2, [r7, #3]
 80048f8:	6879      	ldr	r1, [r7, #4]
 80048fa:	4613      	mov	r3, r2
 80048fc:	011b      	lsls	r3, r3, #4
 80048fe:	1a9b      	subs	r3, r3, r2
 8004900:	009b      	lsls	r3, r3, #2
 8004902:	440b      	add	r3, r1
 8004904:	331b      	adds	r3, #27
 8004906:	2200      	movs	r2, #0
 8004908:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	0151      	lsls	r1, r2, #5
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	440a      	add	r2, r1
 8004920:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004924:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004928:	6053      	str	r3, [r2, #4]
 800492a:	e0b5      	b.n	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800492c:	78fa      	ldrb	r2, [r7, #3]
 800492e:	6879      	ldr	r1, [r7, #4]
 8004930:	4613      	mov	r3, r2
 8004932:	011b      	lsls	r3, r3, #4
 8004934:	1a9b      	subs	r3, r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	440b      	add	r3, r1
 800493a:	334d      	adds	r3, #77	@ 0x4d
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b05      	cmp	r3, #5
 8004940:	d114      	bne.n	800496c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004942:	78fa      	ldrb	r2, [r7, #3]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	1a9b      	subs	r3, r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	334d      	adds	r3, #77	@ 0x4d
 8004952:	2202      	movs	r2, #2
 8004954:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004956:	78fa      	ldrb	r2, [r7, #3]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	011b      	lsls	r3, r3, #4
 800495e:	1a9b      	subs	r3, r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	334c      	adds	r3, #76	@ 0x4c
 8004966:	2202      	movs	r2, #2
 8004968:	701a      	strb	r2, [r3, #0]
 800496a:	e095      	b.n	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800496c:	78fa      	ldrb	r2, [r7, #3]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	1a9b      	subs	r3, r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	334d      	adds	r3, #77	@ 0x4d
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b06      	cmp	r3, #6
 8004980:	d114      	bne.n	80049ac <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004982:	78fa      	ldrb	r2, [r7, #3]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	011b      	lsls	r3, r3, #4
 800498a:	1a9b      	subs	r3, r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	334d      	adds	r3, #77	@ 0x4d
 8004992:	2202      	movs	r2, #2
 8004994:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004996:	78fa      	ldrb	r2, [r7, #3]
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	4613      	mov	r3, r2
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	1a9b      	subs	r3, r3, r2
 80049a0:	009b      	lsls	r3, r3, #2
 80049a2:	440b      	add	r3, r1
 80049a4:	334c      	adds	r3, #76	@ 0x4c
 80049a6:	2205      	movs	r2, #5
 80049a8:	701a      	strb	r2, [r3, #0]
 80049aa:	e075      	b.n	8004a98 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049ac:	78fa      	ldrb	r2, [r7, #3]
 80049ae:	6879      	ldr	r1, [r7, #4]
 80049b0:	4613      	mov	r3, r2
 80049b2:	011b      	lsls	r3, r3, #4
 80049b4:	1a9b      	subs	r3, r3, r2
 80049b6:	009b      	lsls	r3, r3, #2
 80049b8:	440b      	add	r3, r1
 80049ba:	334d      	adds	r3, #77	@ 0x4d
 80049bc:	781b      	ldrb	r3, [r3, #0]
 80049be:	2b07      	cmp	r3, #7
 80049c0:	d00a      	beq.n	80049d8 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80049c2:	78fa      	ldrb	r2, [r7, #3]
 80049c4:	6879      	ldr	r1, [r7, #4]
 80049c6:	4613      	mov	r3, r2
 80049c8:	011b      	lsls	r3, r3, #4
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	440b      	add	r3, r1
 80049d0:	334d      	adds	r3, #77	@ 0x4d
 80049d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80049d4:	2b09      	cmp	r3, #9
 80049d6:	d170      	bne.n	8004aba <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049d8:	78fa      	ldrb	r2, [r7, #3]
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	4613      	mov	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	1a9b      	subs	r3, r3, r2
 80049e2:	009b      	lsls	r3, r3, #2
 80049e4:	440b      	add	r3, r1
 80049e6:	334d      	adds	r3, #77	@ 0x4d
 80049e8:	2202      	movs	r2, #2
 80049ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80049ec:	78fa      	ldrb	r2, [r7, #3]
 80049ee:	6879      	ldr	r1, [r7, #4]
 80049f0:	4613      	mov	r3, r2
 80049f2:	011b      	lsls	r3, r3, #4
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	009b      	lsls	r3, r3, #2
 80049f8:	440b      	add	r3, r1
 80049fa:	3344      	adds	r3, #68	@ 0x44
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4403      	add	r3, r0
 8004a0c:	3344      	adds	r3, #68	@ 0x44
 8004a0e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a10:	78fa      	ldrb	r2, [r7, #3]
 8004a12:	6879      	ldr	r1, [r7, #4]
 8004a14:	4613      	mov	r3, r2
 8004a16:	011b      	lsls	r3, r3, #4
 8004a18:	1a9b      	subs	r3, r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	440b      	add	r3, r1
 8004a1e:	3344      	adds	r3, #68	@ 0x44
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d914      	bls.n	8004a50 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004a26:	78fa      	ldrb	r2, [r7, #3]
 8004a28:	6879      	ldr	r1, [r7, #4]
 8004a2a:	4613      	mov	r3, r2
 8004a2c:	011b      	lsls	r3, r3, #4
 8004a2e:	1a9b      	subs	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	440b      	add	r3, r1
 8004a34:	3344      	adds	r3, #68	@ 0x44
 8004a36:	2200      	movs	r2, #0
 8004a38:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004a3a:	78fa      	ldrb	r2, [r7, #3]
 8004a3c:	6879      	ldr	r1, [r7, #4]
 8004a3e:	4613      	mov	r3, r2
 8004a40:	011b      	lsls	r3, r3, #4
 8004a42:	1a9b      	subs	r3, r3, r2
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	440b      	add	r3, r1
 8004a48:	334c      	adds	r3, #76	@ 0x4c
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a4e:	e022      	b.n	8004a96 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a50:	78fa      	ldrb	r2, [r7, #3]
 8004a52:	6879      	ldr	r1, [r7, #4]
 8004a54:	4613      	mov	r3, r2
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	1a9b      	subs	r3, r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	334c      	adds	r3, #76	@ 0x4c
 8004a60:	2202      	movs	r2, #2
 8004a62:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004a7a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004a82:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004a84:	78fb      	ldrb	r3, [r7, #3]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004a96:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334c      	adds	r3, #76	@ 0x4c
 8004aa8:	781a      	ldrb	r2, [r3, #0]
 8004aaa:	78fb      	ldrb	r3, [r7, #3]
 8004aac:	4619      	mov	r1, r3
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f005 fd04 	bl	800a4bc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ab4:	e002      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004ab6:	bf00      	nop
 8004ab8:	e000      	b.n	8004abc <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004aba:	bf00      	nop
  }
}
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004ac2:	b580      	push	{r7, lr}
 8004ac4:	b08a      	sub	sp, #40	@ 0x28
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	6a1b      	ldr	r3, [r3, #32]
 8004ada:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f003 030f 	and.w	r3, r3, #15
 8004ae2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	0c5b      	lsrs	r3, r3, #17
 8004ae8:	f003 030f 	and.w	r3, r3, #15
 8004aec:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	091b      	lsrs	r3, r3, #4
 8004af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004af6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	2b02      	cmp	r3, #2
 8004afc:	d004      	beq.n	8004b08 <HCD_RXQLVL_IRQHandler+0x46>
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	2b05      	cmp	r3, #5
 8004b02:	f000 80b6 	beq.w	8004c72 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004b06:	e0b7      	b.n	8004c78 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f000 80b3 	beq.w	8004c76 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004b10:	6879      	ldr	r1, [r7, #4]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	4613      	mov	r3, r2
 8004b16:	011b      	lsls	r3, r3, #4
 8004b18:	1a9b      	subs	r3, r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	332c      	adds	r3, #44	@ 0x2c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f000 80a7 	beq.w	8004c76 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	011b      	lsls	r3, r3, #4
 8004b30:	1a9b      	subs	r3, r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	3338      	adds	r3, #56	@ 0x38
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	18d1      	adds	r1, r2, r3
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	4403      	add	r3, r0
 8004b4c:	3334      	adds	r3, #52	@ 0x34
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4299      	cmp	r1, r3
 8004b52:	f200 8083 	bhi.w	8004c5c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6818      	ldr	r0, [r3, #0]
 8004b5a:	6879      	ldr	r1, [r7, #4]
 8004b5c:	69ba      	ldr	r2, [r7, #24]
 8004b5e:	4613      	mov	r3, r2
 8004b60:	011b      	lsls	r3, r3, #4
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	009b      	lsls	r3, r3, #2
 8004b66:	440b      	add	r3, r1
 8004b68:	332c      	adds	r3, #44	@ 0x2c
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	693a      	ldr	r2, [r7, #16]
 8004b6e:	b292      	uxth	r2, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	f002 fb3b 	bl	80071ec <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	69ba      	ldr	r2, [r7, #24]
 8004b7a:	4613      	mov	r3, r2
 8004b7c:	011b      	lsls	r3, r3, #4
 8004b7e:	1a9b      	subs	r3, r3, r2
 8004b80:	009b      	lsls	r3, r3, #2
 8004b82:	440b      	add	r3, r1
 8004b84:	332c      	adds	r3, #44	@ 0x2c
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	18d1      	adds	r1, r2, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	69ba      	ldr	r2, [r7, #24]
 8004b90:	4613      	mov	r3, r2
 8004b92:	011b      	lsls	r3, r3, #4
 8004b94:	1a9b      	subs	r3, r3, r2
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4403      	add	r3, r0
 8004b9a:	332c      	adds	r3, #44	@ 0x2c
 8004b9c:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	69ba      	ldr	r2, [r7, #24]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	3338      	adds	r3, #56	@ 0x38
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	18d1      	adds	r1, r2, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	69ba      	ldr	r2, [r7, #24]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4403      	add	r3, r0
 8004bc2:	3338      	adds	r3, #56	@ 0x38
 8004bc4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	015a      	lsls	r2, r3, #5
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	4413      	add	r3, r2
 8004bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004bd2:	691b      	ldr	r3, [r3, #16]
 8004bd4:	0cdb      	lsrs	r3, r3, #19
 8004bd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004bda:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004bdc:	6879      	ldr	r1, [r7, #4]
 8004bde:	69ba      	ldr	r2, [r7, #24]
 8004be0:	4613      	mov	r3, r2
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	440b      	add	r3, r1
 8004bea:	3328      	adds	r3, #40	@ 0x28
 8004bec:	881b      	ldrh	r3, [r3, #0]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d13f      	bne.n	8004c76 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d03c      	beq.n	8004c76 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004bfc:	69bb      	ldr	r3, [r7, #24]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c12:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004c1a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004c1c:	69bb      	ldr	r3, [r7, #24]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	6a3b      	ldr	r3, [r7, #32]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c28:	461a      	mov	r2, r3
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004c2e:	6879      	ldr	r1, [r7, #4]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	4613      	mov	r3, r2
 8004c34:	011b      	lsls	r3, r3, #4
 8004c36:	1a9b      	subs	r3, r3, r2
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	440b      	add	r3, r1
 8004c3c:	333c      	adds	r3, #60	@ 0x3c
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	f083 0301 	eor.w	r3, r3, #1
 8004c44:	b2d8      	uxtb	r0, r3
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	333c      	adds	r3, #60	@ 0x3c
 8004c56:	4602      	mov	r2, r0
 8004c58:	701a      	strb	r2, [r3, #0]
      break;
 8004c5a:	e00c      	b.n	8004c76 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004c5c:	6879      	ldr	r1, [r7, #4]
 8004c5e:	69ba      	ldr	r2, [r7, #24]
 8004c60:	4613      	mov	r3, r2
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	440b      	add	r3, r1
 8004c6a:	334c      	adds	r3, #76	@ 0x4c
 8004c6c:	2204      	movs	r2, #4
 8004c6e:	701a      	strb	r2, [r3, #0]
      break;
 8004c70:	e001      	b.n	8004c76 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004c72:	bf00      	nop
 8004c74:	e000      	b.n	8004c78 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004c76:	bf00      	nop
  }
}
 8004c78:	bf00      	nop
 8004c7a:	3728      	adds	r7, #40	@ 0x28
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	bd80      	pop	{r7, pc}

08004c80 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004cac:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	f003 0302 	and.w	r3, r3, #2
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d10b      	bne.n	8004cd0 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d102      	bne.n	8004cc8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f005 fbde 	bl	800a484 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f043 0302 	orr.w	r3, r3, #2
 8004cce:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f003 0308 	and.w	r3, r3, #8
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d132      	bne.n	8004d40 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f043 0308 	orr.w	r3, r3, #8
 8004ce0:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f003 0304 	and.w	r3, r3, #4
 8004ce8:	2b04      	cmp	r3, #4
 8004cea:	d126      	bne.n	8004d3a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	7a5b      	ldrb	r3, [r3, #9]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d113      	bne.n	8004d1c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004cfa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004cfe:	d106      	bne.n	8004d0e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2102      	movs	r1, #2
 8004d06:	4618      	mov	r0, r3
 8004d08:	f002 fc00 	bl	800750c <USB_InitFSLSPClkSel>
 8004d0c:	e011      	b.n	8004d32 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2101      	movs	r1, #1
 8004d14:	4618      	mov	r0, r3
 8004d16:	f002 fbf9 	bl	800750c <USB_InitFSLSPClkSel>
 8004d1a:	e00a      	b.n	8004d32 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	79db      	ldrb	r3, [r3, #7]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d106      	bne.n	8004d32 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004d30:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f005 fbd0 	bl	800a4d8 <HAL_HCD_PortEnabled_Callback>
 8004d38:	e002      	b.n	8004d40 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f005 fbda 	bl	800a4f4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f003 0320 	and.w	r3, r3, #32
 8004d46:	2b20      	cmp	r3, #32
 8004d48:	d103      	bne.n	8004d52 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	f043 0320 	orr.w	r3, r3, #32
 8004d50:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004d52:	693b      	ldr	r3, [r7, #16]
 8004d54:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d58:	461a      	mov	r2, r3
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6013      	str	r3, [r2, #0]
}
 8004d5e:	bf00      	nop
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
	...

08004d68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d101      	bne.n	8004d7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e12b      	b.n	8004fd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f7fd f8e0 	bl	8001f54 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2224      	movs	r2, #36	@ 0x24
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f022 0201 	bic.w	r2, r2, #1
 8004daa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004dba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004dca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004dcc:	f001 fa20 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8004dd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	4a81      	ldr	r2, [pc, #516]	@ (8004fdc <HAL_I2C_Init+0x274>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d807      	bhi.n	8004dec <HAL_I2C_Init+0x84>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	4a80      	ldr	r2, [pc, #512]	@ (8004fe0 <HAL_I2C_Init+0x278>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	bf94      	ite	ls
 8004de4:	2301      	movls	r3, #1
 8004de6:	2300      	movhi	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	e006      	b.n	8004dfa <HAL_I2C_Init+0x92>
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	4a7d      	ldr	r2, [pc, #500]	@ (8004fe4 <HAL_I2C_Init+0x27c>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	bf94      	ite	ls
 8004df4:	2301      	movls	r3, #1
 8004df6:	2300      	movhi	r3, #0
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e0e7      	b.n	8004fd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	4a78      	ldr	r2, [pc, #480]	@ (8004fe8 <HAL_I2C_Init+0x280>)
 8004e06:	fba2 2303 	umull	r2, r3, r2, r3
 8004e0a:	0c9b      	lsrs	r3, r3, #18
 8004e0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	4a6a      	ldr	r2, [pc, #424]	@ (8004fdc <HAL_I2C_Init+0x274>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d802      	bhi.n	8004e3c <HAL_I2C_Init+0xd4>
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	e009      	b.n	8004e50 <HAL_I2C_Init+0xe8>
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004e42:	fb02 f303 	mul.w	r3, r2, r3
 8004e46:	4a69      	ldr	r2, [pc, #420]	@ (8004fec <HAL_I2C_Init+0x284>)
 8004e48:	fba2 2303 	umull	r2, r3, r2, r3
 8004e4c:	099b      	lsrs	r3, r3, #6
 8004e4e:	3301      	adds	r3, #1
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6812      	ldr	r2, [r2, #0]
 8004e54:	430b      	orrs	r3, r1
 8004e56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	69db      	ldr	r3, [r3, #28]
 8004e5e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004e62:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	495c      	ldr	r1, [pc, #368]	@ (8004fdc <HAL_I2C_Init+0x274>)
 8004e6c:	428b      	cmp	r3, r1
 8004e6e:	d819      	bhi.n	8004ea4 <HAL_I2C_Init+0x13c>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	1e59      	subs	r1, r3, #1
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	005b      	lsls	r3, r3, #1
 8004e7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e7e:	1c59      	adds	r1, r3, #1
 8004e80:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004e84:	400b      	ands	r3, r1
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d00a      	beq.n	8004ea0 <HAL_I2C_Init+0x138>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	1e59      	subs	r1, r3, #1
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e98:	3301      	adds	r3, #1
 8004e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9e:	e051      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	e04f      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d111      	bne.n	8004ed0 <HAL_I2C_Init+0x168>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	1e58      	subs	r0, r3, #1
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6859      	ldr	r1, [r3, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	440b      	add	r3, r1
 8004eba:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	bf0c      	ite	eq
 8004ec8:	2301      	moveq	r3, #1
 8004eca:	2300      	movne	r3, #0
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	e012      	b.n	8004ef6 <HAL_I2C_Init+0x18e>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	1e58      	subs	r0, r3, #1
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6859      	ldr	r1, [r3, #4]
 8004ed8:	460b      	mov	r3, r1
 8004eda:	009b      	lsls	r3, r3, #2
 8004edc:	440b      	add	r3, r1
 8004ede:	0099      	lsls	r1, r3, #2
 8004ee0:	440b      	add	r3, r1
 8004ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf0c      	ite	eq
 8004ef0:	2301      	moveq	r3, #1
 8004ef2:	2300      	movne	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Init+0x196>
 8004efa:	2301      	movs	r3, #1
 8004efc:	e022      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d10e      	bne.n	8004f24 <HAL_I2C_Init+0x1bc>
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	1e58      	subs	r0, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6859      	ldr	r1, [r3, #4]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	440b      	add	r3, r1
 8004f14:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f18:	3301      	adds	r3, #1
 8004f1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004f22:	e00f      	b.n	8004f44 <HAL_I2C_Init+0x1dc>
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	1e58      	subs	r0, r3, #1
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6859      	ldr	r1, [r3, #4]
 8004f2c:	460b      	mov	r3, r1
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	0099      	lsls	r1, r3, #2
 8004f34:	440b      	add	r3, r1
 8004f36:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	6809      	ldr	r1, [r1, #0]
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	69da      	ldr	r2, [r3, #28]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a1b      	ldr	r3, [r3, #32]
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	430a      	orrs	r2, r1
 8004f66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004f72:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	6911      	ldr	r1, [r2, #16]
 8004f7a:	687a      	ldr	r2, [r7, #4]
 8004f7c:	68d2      	ldr	r2, [r2, #12]
 8004f7e:	4311      	orrs	r1, r2
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	6812      	ldr	r2, [r2, #0]
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	695a      	ldr	r2, [r3, #20]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	431a      	orrs	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	430a      	orrs	r2, r1
 8004fa2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681a      	ldr	r2, [r3, #0]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f042 0201 	orr.w	r2, r2, #1
 8004fb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2220      	movs	r2, #32
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3710      	adds	r7, #16
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	bd80      	pop	{r7, pc}
 8004fda:	bf00      	nop
 8004fdc:	000186a0 	.word	0x000186a0
 8004fe0:	001e847f 	.word	0x001e847f
 8004fe4:	003d08ff 	.word	0x003d08ff
 8004fe8:	431bde83 	.word	0x431bde83
 8004fec:	10624dd3 	.word	0x10624dd3

08004ff0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e128      	b.n	8005254 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d109      	bne.n	8005022 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a90      	ldr	r2, [pc, #576]	@ (800525c <HAL_I2S_Init+0x26c>)
 800501a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f7fc ffe1 	bl	8001fe4 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2202      	movs	r2, #2
 8005026:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	69db      	ldr	r3, [r3, #28]
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6812      	ldr	r2, [r2, #0]
 8005034:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005038:	f023 030f 	bic.w	r3, r3, #15
 800503c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	2202      	movs	r2, #2
 8005044:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	695b      	ldr	r3, [r3, #20]
 800504a:	2b02      	cmp	r3, #2
 800504c:	d060      	beq.n	8005110 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d102      	bne.n	800505c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005056:	2310      	movs	r3, #16
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	e001      	b.n	8005060 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800505c:	2320      	movs	r3, #32
 800505e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	2b20      	cmp	r3, #32
 8005066:	d802      	bhi.n	800506e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800506e:	2001      	movs	r0, #1
 8005070:	f001 f9d8 	bl	8006424 <HAL_RCCEx_GetPeriphCLKFreq>
 8005074:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800507e:	d125      	bne.n	80050cc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d010      	beq.n	80050aa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	461a      	mov	r2, r3
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	695b      	ldr	r3, [r3, #20]
 80050a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80050a4:	3305      	adds	r3, #5
 80050a6:	613b      	str	r3, [r7, #16]
 80050a8:	e01f      	b.n	80050ea <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	00db      	lsls	r3, r3, #3
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	005b      	lsls	r3, r3, #1
 80050bc:	461a      	mov	r2, r3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	3305      	adds	r3, #5
 80050c8:	613b      	str	r3, [r7, #16]
 80050ca:	e00e      	b.n	80050ea <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80050d4:	4613      	mov	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	4413      	add	r3, r2
 80050da:	005b      	lsls	r3, r3, #1
 80050dc:	461a      	mov	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050e6:	3305      	adds	r3, #5
 80050e8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005260 <HAL_I2S_Init+0x270>)
 80050ee:	fba2 2303 	umull	r2, r3, r2, r3
 80050f2:	08db      	lsrs	r3, r3, #3
 80050f4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	61bb      	str	r3, [r7, #24]
 800510e:	e003      	b.n	8005118 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005110:	2302      	movs	r3, #2
 8005112:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005114:	2300      	movs	r3, #0
 8005116:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b01      	cmp	r3, #1
 800511c:	d902      	bls.n	8005124 <HAL_I2S_Init+0x134>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	2bff      	cmp	r3, #255	@ 0xff
 8005122:	d907      	bls.n	8005134 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005128:	f043 0210 	orr.w	r2, r3, #16
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8005130:	2301      	movs	r3, #1
 8005132:	e08f      	b.n	8005254 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691a      	ldr	r2, [r3, #16]
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	ea42 0103 	orr.w	r1, r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69fa      	ldr	r2, [r7, #28]
 8005144:	430a      	orrs	r2, r1
 8005146:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005152:	f023 030f 	bic.w	r3, r3, #15
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	6851      	ldr	r1, [r2, #4]
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6892      	ldr	r2, [r2, #8]
 800515e:	4311      	orrs	r1, r2
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	68d2      	ldr	r2, [r2, #12]
 8005164:	4311      	orrs	r1, r2
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	6992      	ldr	r2, [r2, #24]
 800516a:	430a      	orrs	r2, r1
 800516c:	431a      	orrs	r2, r3
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005176:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d161      	bne.n	8005244 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	4a38      	ldr	r2, [pc, #224]	@ (8005264 <HAL_I2S_Init+0x274>)
 8005184:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a37      	ldr	r2, [pc, #220]	@ (8005268 <HAL_I2S_Init+0x278>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d101      	bne.n	8005194 <HAL_I2S_Init+0x1a4>
 8005190:	4b36      	ldr	r3, [pc, #216]	@ (800526c <HAL_I2S_Init+0x27c>)
 8005192:	e001      	b.n	8005198 <HAL_I2S_Init+0x1a8>
 8005194:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005198:	69db      	ldr	r3, [r3, #28]
 800519a:	687a      	ldr	r2, [r7, #4]
 800519c:	6812      	ldr	r2, [r2, #0]
 800519e:	4932      	ldr	r1, [pc, #200]	@ (8005268 <HAL_I2S_Init+0x278>)
 80051a0:	428a      	cmp	r2, r1
 80051a2:	d101      	bne.n	80051a8 <HAL_I2S_Init+0x1b8>
 80051a4:	4a31      	ldr	r2, [pc, #196]	@ (800526c <HAL_I2S_Init+0x27c>)
 80051a6:	e001      	b.n	80051ac <HAL_I2S_Init+0x1bc>
 80051a8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80051ac:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80051b0:	f023 030f 	bic.w	r3, r3, #15
 80051b4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a2b      	ldr	r2, [pc, #172]	@ (8005268 <HAL_I2S_Init+0x278>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d101      	bne.n	80051c4 <HAL_I2S_Init+0x1d4>
 80051c0:	4b2a      	ldr	r3, [pc, #168]	@ (800526c <HAL_I2S_Init+0x27c>)
 80051c2:	e001      	b.n	80051c8 <HAL_I2S_Init+0x1d8>
 80051c4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051c8:	2202      	movs	r2, #2
 80051ca:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a25      	ldr	r2, [pc, #148]	@ (8005268 <HAL_I2S_Init+0x278>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d101      	bne.n	80051da <HAL_I2S_Init+0x1ea>
 80051d6:	4b25      	ldr	r3, [pc, #148]	@ (800526c <HAL_I2S_Init+0x27c>)
 80051d8:	e001      	b.n	80051de <HAL_I2S_Init+0x1ee>
 80051da:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051ea:	d003      	beq.n	80051f4 <HAL_I2S_Init+0x204>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80051f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80051f8:	613b      	str	r3, [r7, #16]
 80051fa:	e001      	b.n	8005200 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80051fc:	2300      	movs	r3, #0
 80051fe:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800520a:	4313      	orrs	r3, r2
 800520c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005214:	4313      	orrs	r3, r2
 8005216:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800521e:	4313      	orrs	r3, r2
 8005220:	b29a      	uxth	r2, r3
 8005222:	897b      	ldrh	r3, [r7, #10]
 8005224:	4313      	orrs	r3, r2
 8005226:	b29b      	uxth	r3, r3
 8005228:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800522c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a0d      	ldr	r2, [pc, #52]	@ (8005268 <HAL_I2S_Init+0x278>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d101      	bne.n	800523c <HAL_I2S_Init+0x24c>
 8005238:	4b0c      	ldr	r3, [pc, #48]	@ (800526c <HAL_I2S_Init+0x27c>)
 800523a:	e001      	b.n	8005240 <HAL_I2S_Init+0x250>
 800523c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005240:	897a      	ldrh	r2, [r7, #10]
 8005242:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8005252:	2300      	movs	r3, #0
}
 8005254:	4618      	mov	r0, r3
 8005256:	3720      	adds	r7, #32
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}
 800525c:	08005367 	.word	0x08005367
 8005260:	cccccccd 	.word	0xcccccccd
 8005264:	0800547d 	.word	0x0800547d
 8005268:	40003800 	.word	0x40003800
 800526c:	40003400 	.word	0x40003400

08005270 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b082      	sub	sp, #8
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b8:	881a      	ldrh	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052c4:	1c9a      	adds	r2, r3, #2
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	3b01      	subs	r3, #1
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10e      	bne.n	8005300 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	685a      	ldr	r2, [r3, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80052f0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2201      	movs	r2, #1
 80052f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff ffb8 	bl	8005270 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005300:	bf00      	nop
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	b292      	uxth	r2, r2
 800531c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	1c9a      	adds	r2, r3, #2
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800532c:	b29b      	uxth	r3, r3
 800532e:	3b01      	subs	r3, #1
 8005330:	b29a      	uxth	r2, r3
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800533a:	b29b      	uxth	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d10e      	bne.n	800535e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800534e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f7ff ff93 	bl	8005284 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800535e:	bf00      	nop
 8005360:	3708      	adds	r7, #8
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005366:	b580      	push	{r7, lr}
 8005368:	b086      	sub	sp, #24
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800537c:	b2db      	uxtb	r3, r3
 800537e:	2b04      	cmp	r3, #4
 8005380:	d13a      	bne.n	80053f8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b01      	cmp	r3, #1
 800538a:	d109      	bne.n	80053a0 <I2S_IRQHandler+0x3a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005396:	2b40      	cmp	r3, #64	@ 0x40
 8005398:	d102      	bne.n	80053a0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f7ff ffb4 	bl	8005308 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d126      	bne.n	80053f8 <I2S_IRQHandler+0x92>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	f003 0320 	and.w	r3, r3, #32
 80053b4:	2b20      	cmp	r3, #32
 80053b6:	d11f      	bne.n	80053f8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80053c6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	613b      	str	r3, [r7, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	f043 0202 	orr.w	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff ff50 	bl	8005298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b03      	cmp	r3, #3
 8005402:	d136      	bne.n	8005472 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	f003 0302 	and.w	r3, r3, #2
 800540a:	2b02      	cmp	r3, #2
 800540c:	d109      	bne.n	8005422 <I2S_IRQHandler+0xbc>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005418:	2b80      	cmp	r3, #128	@ 0x80
 800541a:	d102      	bne.n	8005422 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f7ff ff45 	bl	80052ac <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	f003 0308 	and.w	r3, r3, #8
 8005428:	2b08      	cmp	r3, #8
 800542a:	d122      	bne.n	8005472 <I2S_IRQHandler+0x10c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	f003 0320 	and.w	r3, r3, #32
 8005436:	2b20      	cmp	r3, #32
 8005438:	d11b      	bne.n	8005472 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005448:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800544a:	2300      	movs	r3, #0
 800544c:	60fb      	str	r3, [r7, #12]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2201      	movs	r2, #1
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005464:	f043 0204 	orr.w	r2, r3, #4
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f7ff ff13 	bl	8005298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005472:	bf00      	nop
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b088      	sub	sp, #32
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a92      	ldr	r2, [pc, #584]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d101      	bne.n	800549a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005496:	4b92      	ldr	r3, [pc, #584]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005498:	e001      	b.n	800549e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800549a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a8b      	ldr	r2, [pc, #556]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d101      	bne.n	80054b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80054b4:	4b8a      	ldr	r3, [pc, #552]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80054b6:	e001      	b.n	80054bc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80054b8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80054bc:	685b      	ldr	r3, [r3, #4]
 80054be:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80054c8:	d004      	beq.n	80054d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	f040 8099 	bne.w	8005606 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	f003 0302 	and.w	r3, r3, #2
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d107      	bne.n	80054ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 f925 	bl	8005738 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f003 0301 	and.w	r3, r3, #1
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d107      	bne.n	8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005502:	6878      	ldr	r0, [r7, #4]
 8005504:	f000 f9c8 	bl	8005898 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b40      	cmp	r3, #64	@ 0x40
 8005510:	d13a      	bne.n	8005588 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f003 0320 	and.w	r3, r3, #32
 8005518:	2b00      	cmp	r3, #0
 800551a:	d035      	beq.n	8005588 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a6e      	ldr	r2, [pc, #440]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d101      	bne.n	800552a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005526:	4b6e      	ldr	r3, [pc, #440]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005528:	e001      	b.n	800552e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800552a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4969      	ldr	r1, [pc, #420]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005536:	428b      	cmp	r3, r1
 8005538:	d101      	bne.n	800553e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800553a:	4b69      	ldr	r3, [pc, #420]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800553c:	e001      	b.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800553e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005542:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005546:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005556:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68db      	ldr	r3, [r3, #12]
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60fb      	str	r3, [r7, #12]
 800556c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800557a:	f043 0202 	orr.w	r2, r3, #2
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fe88 	bl	8005298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005588:	69fb      	ldr	r3, [r7, #28]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b08      	cmp	r3, #8
 8005590:	f040 80c3 	bne.w	800571a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	f003 0320 	and.w	r3, r3, #32
 800559a:	2b00      	cmp	r3, #0
 800559c:	f000 80bd 	beq.w	800571a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80055ae:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4a49      	ldr	r2, [pc, #292]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d101      	bne.n	80055be <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80055ba:	4b49      	ldr	r3, [pc, #292]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055bc:	e001      	b.n	80055c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80055be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055c2:	685a      	ldr	r2, [r3, #4]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	4944      	ldr	r1, [pc, #272]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80055ca:	428b      	cmp	r3, r1
 80055cc:	d101      	bne.n	80055d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80055ce:	4b44      	ldr	r3, [pc, #272]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055d0:	e001      	b.n	80055d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80055d2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055d6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80055da:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	60bb      	str	r3, [r7, #8]
 80055e8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2201      	movs	r2, #1
 80055ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f6:	f043 0204 	orr.w	r2, r3, #4
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fe4a 	bl	8005298 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005604:	e089      	b.n	800571a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b02      	cmp	r3, #2
 800560e:	d107      	bne.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005616:	2b00      	cmp	r3, #0
 8005618:	d002      	beq.n	8005620 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f000 f8be 	bl	800579c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	f003 0301 	and.w	r3, r3, #1
 8005626:	2b01      	cmp	r3, #1
 8005628:	d107      	bne.n	800563a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800562a:	697b      	ldr	r3, [r7, #20]
 800562c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 f8fd 	bl	8005834 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005640:	2b40      	cmp	r3, #64	@ 0x40
 8005642:	d12f      	bne.n	80056a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 0320 	and.w	r3, r3, #32
 800564a:	2b00      	cmp	r3, #0
 800564c:	d02a      	beq.n	80056a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800565c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a1e      	ldr	r2, [pc, #120]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d101      	bne.n	800566c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005668:	4b1d      	ldr	r3, [pc, #116]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800566a:	e001      	b.n	8005670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800566c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005670:	685a      	ldr	r2, [r3, #4]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4919      	ldr	r1, [pc, #100]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005678:	428b      	cmp	r3, r1
 800567a:	d101      	bne.n	8005680 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800567c:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800567e:	e001      	b.n	8005684 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005680:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005684:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005688:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005696:	f043 0202 	orr.w	r2, r3, #2
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff fdfa 	bl	8005298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80056a4:	69bb      	ldr	r3, [r7, #24]
 80056a6:	f003 0308 	and.w	r3, r3, #8
 80056aa:	2b08      	cmp	r3, #8
 80056ac:	d136      	bne.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d031      	beq.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a07      	ldr	r2, [pc, #28]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d101      	bne.n	80056c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80056c2:	4b07      	ldr	r3, [pc, #28]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056c4:	e001      	b.n	80056ca <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80056c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056ca:	685a      	ldr	r2, [r3, #4]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4902      	ldr	r1, [pc, #8]	@ (80056dc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056d2:	428b      	cmp	r3, r1
 80056d4:	d106      	bne.n	80056e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80056d6:	4b02      	ldr	r3, [pc, #8]	@ (80056e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056d8:	e006      	b.n	80056e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80056da:	bf00      	nop
 80056dc:	40003800 	.word	0x40003800
 80056e0:	40003400 	.word	0x40003400
 80056e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056e8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80056ec:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	685a      	ldr	r2, [r3, #4]
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056fc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2201      	movs	r2, #1
 8005702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800570a:	f043 0204 	orr.w	r2, r3, #4
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff fdc0 	bl	8005298 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005718:	e000      	b.n	800571c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800571a:	bf00      	nop
}
 800571c:	bf00      	nop
 800571e:	3720      	adds	r7, #32
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005744:	1c99      	adds	r1, r3, #2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6251      	str	r1, [r2, #36]	@ 0x24
 800574a:	881a      	ldrh	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005764:	b29b      	uxth	r3, r3
 8005766:	2b00      	cmp	r3, #0
 8005768:	d113      	bne.n	8005792 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	685a      	ldr	r2, [r3, #4]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005778:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d106      	bne.n	8005792 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ffc9 	bl	8005724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005792:	bf00      	nop
 8005794:	3708      	adds	r7, #8
 8005796:	46bd      	mov	sp, r7
 8005798:	bd80      	pop	{r7, pc}
	...

0800579c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a8:	1c99      	adds	r1, r3, #2
 80057aa:	687a      	ldr	r2, [r7, #4]
 80057ac:	6251      	str	r1, [r2, #36]	@ 0x24
 80057ae:	8819      	ldrh	r1, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a1d      	ldr	r2, [pc, #116]	@ (800582c <I2SEx_TxISR_I2SExt+0x90>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d101      	bne.n	80057be <I2SEx_TxISR_I2SExt+0x22>
 80057ba:	4b1d      	ldr	r3, [pc, #116]	@ (8005830 <I2SEx_TxISR_I2SExt+0x94>)
 80057bc:	e001      	b.n	80057c2 <I2SEx_TxISR_I2SExt+0x26>
 80057be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057c2:	460a      	mov	r2, r1
 80057c4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057d8:	b29b      	uxth	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d121      	bne.n	8005822 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a12      	ldr	r2, [pc, #72]	@ (800582c <I2SEx_TxISR_I2SExt+0x90>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d101      	bne.n	80057ec <I2SEx_TxISR_I2SExt+0x50>
 80057e8:	4b11      	ldr	r3, [pc, #68]	@ (8005830 <I2SEx_TxISR_I2SExt+0x94>)
 80057ea:	e001      	b.n	80057f0 <I2SEx_TxISR_I2SExt+0x54>
 80057ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	490d      	ldr	r1, [pc, #52]	@ (800582c <I2SEx_TxISR_I2SExt+0x90>)
 80057f8:	428b      	cmp	r3, r1
 80057fa:	d101      	bne.n	8005800 <I2SEx_TxISR_I2SExt+0x64>
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <I2SEx_TxISR_I2SExt+0x94>)
 80057fe:	e001      	b.n	8005804 <I2SEx_TxISR_I2SExt+0x68>
 8005800:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005804:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005808:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d106      	bne.n	8005822 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f7ff ff81 	bl	8005724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	40003800 	.word	0x40003800
 8005830:	40003400 	.word	0x40003400

08005834 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68d8      	ldr	r0, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005846:	1c99      	adds	r1, r3, #2
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800584c:	b282      	uxth	r2, r0
 800584e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005854:	b29b      	uxth	r3, r3
 8005856:	3b01      	subs	r3, #1
 8005858:	b29a      	uxth	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005862:	b29b      	uxth	r3, r3
 8005864:	2b00      	cmp	r3, #0
 8005866:	d113      	bne.n	8005890 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005876:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800587c:	b29b      	uxth	r3, r3
 800587e:	2b00      	cmp	r3, #0
 8005880:	d106      	bne.n	8005890 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2201      	movs	r2, #1
 8005886:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800588a:	6878      	ldr	r0, [r7, #4]
 800588c:	f7ff ff4a 	bl	8005724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a20      	ldr	r2, [pc, #128]	@ (8005928 <I2SEx_RxISR_I2SExt+0x90>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d101      	bne.n	80058ae <I2SEx_RxISR_I2SExt+0x16>
 80058aa:	4b20      	ldr	r3, [pc, #128]	@ (800592c <I2SEx_RxISR_I2SExt+0x94>)
 80058ac:	e001      	b.n	80058b2 <I2SEx_RxISR_I2SExt+0x1a>
 80058ae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058b2:	68d8      	ldr	r0, [r3, #12]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b8:	1c99      	adds	r1, r3, #2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80058be:	b282      	uxth	r2, r0
 80058c0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d121      	bne.n	800591e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a12      	ldr	r2, [pc, #72]	@ (8005928 <I2SEx_RxISR_I2SExt+0x90>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d101      	bne.n	80058e8 <I2SEx_RxISR_I2SExt+0x50>
 80058e4:	4b11      	ldr	r3, [pc, #68]	@ (800592c <I2SEx_RxISR_I2SExt+0x94>)
 80058e6:	e001      	b.n	80058ec <I2SEx_RxISR_I2SExt+0x54>
 80058e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	490d      	ldr	r1, [pc, #52]	@ (8005928 <I2SEx_RxISR_I2SExt+0x90>)
 80058f4:	428b      	cmp	r3, r1
 80058f6:	d101      	bne.n	80058fc <I2SEx_RxISR_I2SExt+0x64>
 80058f8:	4b0c      	ldr	r3, [pc, #48]	@ (800592c <I2SEx_RxISR_I2SExt+0x94>)
 80058fa:	e001      	b.n	8005900 <I2SEx_RxISR_I2SExt+0x68>
 80058fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005900:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005904:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800590a:	b29b      	uxth	r3, r3
 800590c:	2b00      	cmp	r3, #0
 800590e:	d106      	bne.n	800591e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f7ff ff03 	bl	8005724 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	40003800 	.word	0x40003800
 800592c:	40003400 	.word	0x40003400

08005930 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b086      	sub	sp, #24
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e267      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d075      	beq.n	8005a3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800594e:	4b88      	ldr	r3, [pc, #544]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f003 030c 	and.w	r3, r3, #12
 8005956:	2b04      	cmp	r3, #4
 8005958:	d00c      	beq.n	8005974 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800595a:	4b85      	ldr	r3, [pc, #532]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005962:	2b08      	cmp	r3, #8
 8005964:	d112      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005966:	4b82      	ldr	r3, [pc, #520]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800596e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005972:	d10b      	bne.n	800598c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005974:	4b7e      	ldr	r3, [pc, #504]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d05b      	beq.n	8005a38 <HAL_RCC_OscConfig+0x108>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d157      	bne.n	8005a38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e242      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005994:	d106      	bne.n	80059a4 <HAL_RCC_OscConfig+0x74>
 8005996:	4b76      	ldr	r3, [pc, #472]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a75      	ldr	r2, [pc, #468]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 800599c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059a0:	6013      	str	r3, [r2, #0]
 80059a2:	e01d      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80059ac:	d10c      	bne.n	80059c8 <HAL_RCC_OscConfig+0x98>
 80059ae:	4b70      	ldr	r3, [pc, #448]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a6f      	ldr	r2, [pc, #444]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	4b6d      	ldr	r3, [pc, #436]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a6c      	ldr	r2, [pc, #432]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80059c4:	6013      	str	r3, [r2, #0]
 80059c6:	e00b      	b.n	80059e0 <HAL_RCC_OscConfig+0xb0>
 80059c8:	4b69      	ldr	r3, [pc, #420]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a68      	ldr	r2, [pc, #416]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80059d2:	6013      	str	r3, [r2, #0]
 80059d4:	4b66      	ldr	r3, [pc, #408]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a65      	ldr	r2, [pc, #404]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 80059da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80059de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d013      	beq.n	8005a10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80059e8:	f7fc fd92 	bl	8002510 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059f0:	f7fc fd8e 	bl	8002510 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b64      	cmp	r3, #100	@ 0x64
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e207      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a02:	4b5b      	ldr	r3, [pc, #364]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d0f0      	beq.n	80059f0 <HAL_RCC_OscConfig+0xc0>
 8005a0e:	e014      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005a10:	f7fc fd7e 	bl	8002510 <HAL_GetTick>
 8005a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a16:	e008      	b.n	8005a2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a18:	f7fc fd7a 	bl	8002510 <HAL_GetTick>
 8005a1c:	4602      	mov	r2, r0
 8005a1e:	693b      	ldr	r3, [r7, #16]
 8005a20:	1ad3      	subs	r3, r2, r3
 8005a22:	2b64      	cmp	r3, #100	@ 0x64
 8005a24:	d901      	bls.n	8005a2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005a26:	2303      	movs	r3, #3
 8005a28:	e1f3      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005a2a:	4b51      	ldr	r3, [pc, #324]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1f0      	bne.n	8005a18 <HAL_RCC_OscConfig+0xe8>
 8005a36:	e000      	b.n	8005a3a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d063      	beq.n	8005b0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a46:	4b4a      	ldr	r3, [pc, #296]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a52:	4b47      	ldr	r3, [pc, #284]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005a5a:	2b08      	cmp	r3, #8
 8005a5c:	d11c      	bne.n	8005a98 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005a5e:	4b44      	ldr	r3, [pc, #272]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a60:	685b      	ldr	r3, [r3, #4]
 8005a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d116      	bne.n	8005a98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a6a:	4b41      	ldr	r3, [pc, #260]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d005      	beq.n	8005a82 <HAL_RCC_OscConfig+0x152>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d001      	beq.n	8005a82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e1c7      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005a82:	4b3b      	ldr	r3, [pc, #236]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	691b      	ldr	r3, [r3, #16]
 8005a8e:	00db      	lsls	r3, r3, #3
 8005a90:	4937      	ldr	r1, [pc, #220]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005a96:	e03a      	b.n	8005b0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	68db      	ldr	r3, [r3, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d020      	beq.n	8005ae2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005aa0:	4b34      	ldr	r3, [pc, #208]	@ (8005b74 <HAL_RCC_OscConfig+0x244>)
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aa6:	f7fc fd33 	bl	8002510 <HAL_GetTick>
 8005aaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005aac:	e008      	b.n	8005ac0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aae:	f7fc fd2f 	bl	8002510 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	693b      	ldr	r3, [r7, #16]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	2b02      	cmp	r3, #2
 8005aba:	d901      	bls.n	8005ac0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e1a8      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac0:	4b2b      	ldr	r3, [pc, #172]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d0f0      	beq.n	8005aae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005acc:	4b28      	ldr	r3, [pc, #160]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	4925      	ldr	r1, [pc, #148]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	600b      	str	r3, [r1, #0]
 8005ae0:	e015      	b.n	8005b0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ae2:	4b24      	ldr	r3, [pc, #144]	@ (8005b74 <HAL_RCC_OscConfig+0x244>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae8:	f7fc fd12 	bl	8002510 <HAL_GetTick>
 8005aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005aee:	e008      	b.n	8005b02 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005af0:	f7fc fd0e 	bl	8002510 <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b02      	cmp	r3, #2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e187      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005b02:	4b1b      	ldr	r3, [pc, #108]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0302 	and.w	r3, r3, #2
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1f0      	bne.n	8005af0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f003 0308 	and.w	r3, r3, #8
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d036      	beq.n	8005b88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d016      	beq.n	8005b50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b22:	4b15      	ldr	r3, [pc, #84]	@ (8005b78 <HAL_RCC_OscConfig+0x248>)
 8005b24:	2201      	movs	r2, #1
 8005b26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b28:	f7fc fcf2 	bl	8002510 <HAL_GetTick>
 8005b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b2e:	e008      	b.n	8005b42 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b30:	f7fc fcee 	bl	8002510 <HAL_GetTick>
 8005b34:	4602      	mov	r2, r0
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	1ad3      	subs	r3, r2, r3
 8005b3a:	2b02      	cmp	r3, #2
 8005b3c:	d901      	bls.n	8005b42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e167      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005b42:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <HAL_RCC_OscConfig+0x240>)
 8005b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d0f0      	beq.n	8005b30 <HAL_RCC_OscConfig+0x200>
 8005b4e:	e01b      	b.n	8005b88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005b50:	4b09      	ldr	r3, [pc, #36]	@ (8005b78 <HAL_RCC_OscConfig+0x248>)
 8005b52:	2200      	movs	r2, #0
 8005b54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b56:	f7fc fcdb 	bl	8002510 <HAL_GetTick>
 8005b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b5c:	e00e      	b.n	8005b7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b5e:	f7fc fcd7 	bl	8002510 <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d907      	bls.n	8005b7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e150      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
 8005b70:	40023800 	.word	0x40023800
 8005b74:	42470000 	.word	0x42470000
 8005b78:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005b7c:	4b88      	ldr	r3, [pc, #544]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005b7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005b80:	f003 0302 	and.w	r3, r3, #2
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1ea      	bne.n	8005b5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0304 	and.w	r3, r3, #4
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	f000 8097 	beq.w	8005cc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b96:	2300      	movs	r3, #0
 8005b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b9a:	4b81      	ldr	r3, [pc, #516]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d10f      	bne.n	8005bc6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	60bb      	str	r3, [r7, #8]
 8005baa:	4b7d      	ldr	r3, [pc, #500]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bae:	4a7c      	ldr	r2, [pc, #496]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bb6:	4b7a      	ldr	r3, [pc, #488]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bbe:	60bb      	str	r3, [r7, #8]
 8005bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bc6:	4b77      	ldr	r3, [pc, #476]	@ (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d118      	bne.n	8005c04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005bd2:	4b74      	ldr	r3, [pc, #464]	@ (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a73      	ldr	r2, [pc, #460]	@ (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005bde:	f7fc fc97 	bl	8002510 <HAL_GetTick>
 8005be2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005be4:	e008      	b.n	8005bf8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005be6:	f7fc fc93 	bl	8002510 <HAL_GetTick>
 8005bea:	4602      	mov	r2, r0
 8005bec:	693b      	ldr	r3, [r7, #16]
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	2b02      	cmp	r3, #2
 8005bf2:	d901      	bls.n	8005bf8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005bf4:	2303      	movs	r3, #3
 8005bf6:	e10c      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005bf8:	4b6a      	ldr	r3, [pc, #424]	@ (8005da4 <HAL_RCC_OscConfig+0x474>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d0f0      	beq.n	8005be6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d106      	bne.n	8005c1a <HAL_RCC_OscConfig+0x2ea>
 8005c0c:	4b64      	ldr	r3, [pc, #400]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c10:	4a63      	ldr	r2, [pc, #396]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c12:	f043 0301 	orr.w	r3, r3, #1
 8005c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c18:	e01c      	b.n	8005c54 <HAL_RCC_OscConfig+0x324>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b05      	cmp	r3, #5
 8005c20:	d10c      	bne.n	8005c3c <HAL_RCC_OscConfig+0x30c>
 8005c22:	4b5f      	ldr	r3, [pc, #380]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c26:	4a5e      	ldr	r2, [pc, #376]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c28:	f043 0304 	orr.w	r3, r3, #4
 8005c2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c2e:	4b5c      	ldr	r3, [pc, #368]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	4a5b      	ldr	r2, [pc, #364]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c34:	f043 0301 	orr.w	r3, r3, #1
 8005c38:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c3a:	e00b      	b.n	8005c54 <HAL_RCC_OscConfig+0x324>
 8005c3c:	4b58      	ldr	r3, [pc, #352]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c40:	4a57      	ldr	r2, [pc, #348]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c48:	4b55      	ldr	r3, [pc, #340]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4c:	4a54      	ldr	r2, [pc, #336]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c4e:	f023 0304 	bic.w	r3, r3, #4
 8005c52:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	689b      	ldr	r3, [r3, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d015      	beq.n	8005c88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c5c:	f7fc fc58 	bl	8002510 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c62:	e00a      	b.n	8005c7a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c64:	f7fc fc54 	bl	8002510 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d901      	bls.n	8005c7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e0cb      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005c7a:	4b49      	ldr	r3, [pc, #292]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c7e:	f003 0302 	and.w	r3, r3, #2
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d0ee      	beq.n	8005c64 <HAL_RCC_OscConfig+0x334>
 8005c86:	e014      	b.n	8005cb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c88:	f7fc fc42 	bl	8002510 <HAL_GetTick>
 8005c8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005c8e:	e00a      	b.n	8005ca6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c90:	f7fc fc3e 	bl	8002510 <HAL_GetTick>
 8005c94:	4602      	mov	r2, r0
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	1ad3      	subs	r3, r2, r3
 8005c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d901      	bls.n	8005ca6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e0b5      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ca6:	4b3e      	ldr	r3, [pc, #248]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005caa:	f003 0302 	and.w	r3, r3, #2
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1ee      	bne.n	8005c90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005cb2:	7dfb      	ldrb	r3, [r7, #23]
 8005cb4:	2b01      	cmp	r3, #1
 8005cb6:	d105      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cb8:	4b39      	ldr	r3, [pc, #228]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cbc:	4a38      	ldr	r2, [pc, #224]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005cbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005cc2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 80a1 	beq.w	8005e10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005cce:	4b34      	ldr	r3, [pc, #208]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b08      	cmp	r3, #8
 8005cd8:	d05c      	beq.n	8005d94 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	699b      	ldr	r3, [r3, #24]
 8005cde:	2b02      	cmp	r3, #2
 8005ce0:	d141      	bne.n	8005d66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ce2:	4b31      	ldr	r3, [pc, #196]	@ (8005da8 <HAL_RCC_OscConfig+0x478>)
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ce8:	f7fc fc12 	bl	8002510 <HAL_GetTick>
 8005cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005cee:	e008      	b.n	8005d02 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf0:	f7fc fc0e 	bl	8002510 <HAL_GetTick>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	1ad3      	subs	r3, r2, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d901      	bls.n	8005d02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e087      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d02:	4b27      	ldr	r3, [pc, #156]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d1f0      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69da      	ldr	r2, [r3, #28]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a1b      	ldr	r3, [r3, #32]
 8005d16:	431a      	orrs	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	431a      	orrs	r2, r3
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d24:	085b      	lsrs	r3, r3, #1
 8005d26:	3b01      	subs	r3, #1
 8005d28:	041b      	lsls	r3, r3, #16
 8005d2a:	431a      	orrs	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d30:	061b      	lsls	r3, r3, #24
 8005d32:	491b      	ldr	r1, [pc, #108]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d38:	4b1b      	ldr	r3, [pc, #108]	@ (8005da8 <HAL_RCC_OscConfig+0x478>)
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d3e:	f7fc fbe7 	bl	8002510 <HAL_GetTick>
 8005d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d44:	e008      	b.n	8005d58 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d46:	f7fc fbe3 	bl	8002510 <HAL_GetTick>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	1ad3      	subs	r3, r2, r3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d901      	bls.n	8005d58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005d54:	2303      	movs	r3, #3
 8005d56:	e05c      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005d58:	4b11      	ldr	r3, [pc, #68]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0f0      	beq.n	8005d46 <HAL_RCC_OscConfig+0x416>
 8005d64:	e054      	b.n	8005e10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d66:	4b10      	ldr	r3, [pc, #64]	@ (8005da8 <HAL_RCC_OscConfig+0x478>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6c:	f7fc fbd0 	bl	8002510 <HAL_GetTick>
 8005d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d72:	e008      	b.n	8005d86 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d74:	f7fc fbcc 	bl	8002510 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d901      	bls.n	8005d86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005d82:	2303      	movs	r3, #3
 8005d84:	e045      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005d86:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <HAL_RCC_OscConfig+0x470>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1f0      	bne.n	8005d74 <HAL_RCC_OscConfig+0x444>
 8005d92:	e03d      	b.n	8005e10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d107      	bne.n	8005dac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	e038      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
 8005da0:	40023800 	.word	0x40023800
 8005da4:	40007000 	.word	0x40007000
 8005da8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005dac:	4b1b      	ldr	r3, [pc, #108]	@ (8005e1c <HAL_RCC_OscConfig+0x4ec>)
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	2b01      	cmp	r3, #1
 8005db8:	d028      	beq.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d121      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d11a      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ddc:	4013      	ands	r3, r2
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005de2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005de4:	4293      	cmp	r3, r2
 8005de6:	d111      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	3b01      	subs	r3, #1
 8005df6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d107      	bne.n	8005e0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d001      	beq.n	8005e10 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	e000      	b.n	8005e12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3718      	adds	r7, #24
 8005e16:	46bd      	mov	sp, r7
 8005e18:	bd80      	pop	{r7, pc}
 8005e1a:	bf00      	nop
 8005e1c:	40023800 	.word	0x40023800

08005e20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e0cc      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e34:	4b68      	ldr	r3, [pc, #416]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	d90c      	bls.n	8005e5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e42:	4b65      	ldr	r3, [pc, #404]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e44:	683a      	ldr	r2, [r7, #0]
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e4a:	4b63      	ldr	r3, [pc, #396]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f003 0307 	and.w	r3, r3, #7
 8005e52:	683a      	ldr	r2, [r7, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d001      	beq.n	8005e5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e0b8      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f003 0302 	and.w	r3, r3, #2
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d020      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d005      	beq.n	8005e80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005e74:	4b59      	ldr	r3, [pc, #356]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	4a58      	ldr	r2, [pc, #352]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e7a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005e7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0308 	and.w	r3, r3, #8
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d005      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005e8c:	4b53      	ldr	r3, [pc, #332]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	4a52      	ldr	r2, [pc, #328]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e92:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005e96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e98:	4b50      	ldr	r3, [pc, #320]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	494d      	ldr	r1, [pc, #308]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f003 0301 	and.w	r3, r3, #1
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d044      	beq.n	8005f40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d107      	bne.n	8005ece <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ebe:	4b47      	ldr	r3, [pc, #284]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d119      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eca:	2301      	movs	r3, #1
 8005ecc:	e07f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	685b      	ldr	r3, [r3, #4]
 8005ed2:	2b02      	cmp	r3, #2
 8005ed4:	d003      	beq.n	8005ede <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	d107      	bne.n	8005eee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ede:	4b3f      	ldr	r3, [pc, #252]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d109      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e06f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005eee:	4b3b      	ldr	r3, [pc, #236]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 0302 	and.w	r3, r3, #2
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d101      	bne.n	8005efe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	e067      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005efe:	4b37      	ldr	r3, [pc, #220]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	f023 0203 	bic.w	r2, r3, #3
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	4934      	ldr	r1, [pc, #208]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005f10:	f7fc fafe 	bl	8002510 <HAL_GetTick>
 8005f14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f16:	e00a      	b.n	8005f2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005f18:	f7fc fafa 	bl	8002510 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f26:	4293      	cmp	r3, r2
 8005f28:	d901      	bls.n	8005f2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005f2a:	2303      	movs	r3, #3
 8005f2c:	e04f      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005f2e:	4b2b      	ldr	r3, [pc, #172]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f30:	689b      	ldr	r3, [r3, #8]
 8005f32:	f003 020c 	and.w	r2, r3, #12
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d1eb      	bne.n	8005f18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f40:	4b25      	ldr	r3, [pc, #148]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0307 	and.w	r3, r3, #7
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d20c      	bcs.n	8005f68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4e:	4b22      	ldr	r3, [pc, #136]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f50:	683a      	ldr	r2, [r7, #0]
 8005f52:	b2d2      	uxtb	r2, r2
 8005f54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f56:	4b20      	ldr	r3, [pc, #128]	@ (8005fd8 <HAL_RCC_ClockConfig+0x1b8>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	683a      	ldr	r2, [r7, #0]
 8005f60:	429a      	cmp	r2, r3
 8005f62:	d001      	beq.n	8005f68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005f64:	2301      	movs	r3, #1
 8005f66:	e032      	b.n	8005fce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d008      	beq.n	8005f86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f74:	4b19      	ldr	r3, [pc, #100]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	68db      	ldr	r3, [r3, #12]
 8005f80:	4916      	ldr	r1, [pc, #88]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 0308 	and.w	r3, r3, #8
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d009      	beq.n	8005fa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f92:	4b12      	ldr	r3, [pc, #72]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	00db      	lsls	r3, r3, #3
 8005fa0:	490e      	ldr	r1, [pc, #56]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005fa6:	f000 f821 	bl	8005fec <HAL_RCC_GetSysClockFreq>
 8005faa:	4602      	mov	r2, r0
 8005fac:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	091b      	lsrs	r3, r3, #4
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	490a      	ldr	r1, [pc, #40]	@ (8005fe0 <HAL_RCC_ClockConfig+0x1c0>)
 8005fb8:	5ccb      	ldrb	r3, [r1, r3]
 8005fba:	fa22 f303 	lsr.w	r3, r2, r3
 8005fbe:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <HAL_RCC_ClockConfig+0x1c4>)
 8005fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005fc2:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <HAL_RCC_ClockConfig+0x1c8>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7fc fa5e 	bl	8002488 <HAL_InitTick>

  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	40023c00 	.word	0x40023c00
 8005fdc:	40023800 	.word	0x40023800
 8005fe0:	0800bcfc 	.word	0x0800bcfc
 8005fe4:	20000000 	.word	0x20000000
 8005fe8:	20000004 	.word	0x20000004

08005fec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005fec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ff0:	b094      	sub	sp, #80	@ 0x50
 8005ff2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006000:	2300      	movs	r3, #0
 8006002:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006004:	4b79      	ldr	r3, [pc, #484]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006006:	689b      	ldr	r3, [r3, #8]
 8006008:	f003 030c 	and.w	r3, r3, #12
 800600c:	2b08      	cmp	r3, #8
 800600e:	d00d      	beq.n	800602c <HAL_RCC_GetSysClockFreq+0x40>
 8006010:	2b08      	cmp	r3, #8
 8006012:	f200 80e1 	bhi.w	80061d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006016:	2b00      	cmp	r3, #0
 8006018:	d002      	beq.n	8006020 <HAL_RCC_GetSysClockFreq+0x34>
 800601a:	2b04      	cmp	r3, #4
 800601c:	d003      	beq.n	8006026 <HAL_RCC_GetSysClockFreq+0x3a>
 800601e:	e0db      	b.n	80061d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006020:	4b73      	ldr	r3, [pc, #460]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006022:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006024:	e0db      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006026:	4b73      	ldr	r3, [pc, #460]	@ (80061f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006028:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800602a:	e0d8      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800602c:	4b6f      	ldr	r3, [pc, #444]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006034:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006036:	4b6d      	ldr	r3, [pc, #436]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603e:	2b00      	cmp	r3, #0
 8006040:	d063      	beq.n	800610a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006042:	4b6a      	ldr	r3, [pc, #424]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	099b      	lsrs	r3, r3, #6
 8006048:	2200      	movs	r2, #0
 800604a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800604c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006054:	633b      	str	r3, [r7, #48]	@ 0x30
 8006056:	2300      	movs	r3, #0
 8006058:	637b      	str	r3, [r7, #52]	@ 0x34
 800605a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800605e:	4622      	mov	r2, r4
 8006060:	462b      	mov	r3, r5
 8006062:	f04f 0000 	mov.w	r0, #0
 8006066:	f04f 0100 	mov.w	r1, #0
 800606a:	0159      	lsls	r1, r3, #5
 800606c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006070:	0150      	lsls	r0, r2, #5
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4621      	mov	r1, r4
 8006078:	1a51      	subs	r1, r2, r1
 800607a:	6139      	str	r1, [r7, #16]
 800607c:	4629      	mov	r1, r5
 800607e:	eb63 0301 	sbc.w	r3, r3, r1
 8006082:	617b      	str	r3, [r7, #20]
 8006084:	f04f 0200 	mov.w	r2, #0
 8006088:	f04f 0300 	mov.w	r3, #0
 800608c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006090:	4659      	mov	r1, fp
 8006092:	018b      	lsls	r3, r1, #6
 8006094:	4651      	mov	r1, sl
 8006096:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800609a:	4651      	mov	r1, sl
 800609c:	018a      	lsls	r2, r1, #6
 800609e:	4651      	mov	r1, sl
 80060a0:	ebb2 0801 	subs.w	r8, r2, r1
 80060a4:	4659      	mov	r1, fp
 80060a6:	eb63 0901 	sbc.w	r9, r3, r1
 80060aa:	f04f 0200 	mov.w	r2, #0
 80060ae:	f04f 0300 	mov.w	r3, #0
 80060b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060be:	4690      	mov	r8, r2
 80060c0:	4699      	mov	r9, r3
 80060c2:	4623      	mov	r3, r4
 80060c4:	eb18 0303 	adds.w	r3, r8, r3
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	462b      	mov	r3, r5
 80060cc:	eb49 0303 	adc.w	r3, r9, r3
 80060d0:	60fb      	str	r3, [r7, #12]
 80060d2:	f04f 0200 	mov.w	r2, #0
 80060d6:	f04f 0300 	mov.w	r3, #0
 80060da:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80060de:	4629      	mov	r1, r5
 80060e0:	024b      	lsls	r3, r1, #9
 80060e2:	4621      	mov	r1, r4
 80060e4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80060e8:	4621      	mov	r1, r4
 80060ea:	024a      	lsls	r2, r1, #9
 80060ec:	4610      	mov	r0, r2
 80060ee:	4619      	mov	r1, r3
 80060f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80060f2:	2200      	movs	r2, #0
 80060f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060f8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80060fc:	f7fa f8b8 	bl	8000270 <__aeabi_uldivmod>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4613      	mov	r3, r2
 8006106:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006108:	e058      	b.n	80061bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800610a:	4b38      	ldr	r3, [pc, #224]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	099b      	lsrs	r3, r3, #6
 8006110:	2200      	movs	r2, #0
 8006112:	4618      	mov	r0, r3
 8006114:	4611      	mov	r1, r2
 8006116:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800611a:	623b      	str	r3, [r7, #32]
 800611c:	2300      	movs	r3, #0
 800611e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006120:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	f04f 0000 	mov.w	r0, #0
 800612c:	f04f 0100 	mov.w	r1, #0
 8006130:	0159      	lsls	r1, r3, #5
 8006132:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006136:	0150      	lsls	r0, r2, #5
 8006138:	4602      	mov	r2, r0
 800613a:	460b      	mov	r3, r1
 800613c:	4641      	mov	r1, r8
 800613e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006142:	4649      	mov	r1, r9
 8006144:	eb63 0b01 	sbc.w	fp, r3, r1
 8006148:	f04f 0200 	mov.w	r2, #0
 800614c:	f04f 0300 	mov.w	r3, #0
 8006150:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006154:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006158:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800615c:	ebb2 040a 	subs.w	r4, r2, sl
 8006160:	eb63 050b 	sbc.w	r5, r3, fp
 8006164:	f04f 0200 	mov.w	r2, #0
 8006168:	f04f 0300 	mov.w	r3, #0
 800616c:	00eb      	lsls	r3, r5, #3
 800616e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006172:	00e2      	lsls	r2, r4, #3
 8006174:	4614      	mov	r4, r2
 8006176:	461d      	mov	r5, r3
 8006178:	4643      	mov	r3, r8
 800617a:	18e3      	adds	r3, r4, r3
 800617c:	603b      	str	r3, [r7, #0]
 800617e:	464b      	mov	r3, r9
 8006180:	eb45 0303 	adc.w	r3, r5, r3
 8006184:	607b      	str	r3, [r7, #4]
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006192:	4629      	mov	r1, r5
 8006194:	028b      	lsls	r3, r1, #10
 8006196:	4621      	mov	r1, r4
 8006198:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800619c:	4621      	mov	r1, r4
 800619e:	028a      	lsls	r2, r1, #10
 80061a0:	4610      	mov	r0, r2
 80061a2:	4619      	mov	r1, r3
 80061a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061a6:	2200      	movs	r2, #0
 80061a8:	61bb      	str	r3, [r7, #24]
 80061aa:	61fa      	str	r2, [r7, #28]
 80061ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061b0:	f7fa f85e 	bl	8000270 <__aeabi_uldivmod>
 80061b4:	4602      	mov	r2, r0
 80061b6:	460b      	mov	r3, r1
 80061b8:	4613      	mov	r3, r2
 80061ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80061bc:	4b0b      	ldr	r3, [pc, #44]	@ (80061ec <HAL_RCC_GetSysClockFreq+0x200>)
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	0c1b      	lsrs	r3, r3, #16
 80061c2:	f003 0303 	and.w	r3, r3, #3
 80061c6:	3301      	adds	r3, #1
 80061c8:	005b      	lsls	r3, r3, #1
 80061ca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80061cc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80061ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80061d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80061d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061d6:	e002      	b.n	80061de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80061d8:	4b05      	ldr	r3, [pc, #20]	@ (80061f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80061da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80061dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80061de:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3750      	adds	r7, #80	@ 0x50
 80061e4:	46bd      	mov	sp, r7
 80061e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061ea:	bf00      	nop
 80061ec:	40023800 	.word	0x40023800
 80061f0:	00f42400 	.word	0x00f42400
 80061f4:	007a1200 	.word	0x007a1200

080061f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f8:	b480      	push	{r7}
 80061fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80061fc:	4b03      	ldr	r3, [pc, #12]	@ (800620c <HAL_RCC_GetHCLKFreq+0x14>)
 80061fe:	681b      	ldr	r3, [r3, #0]
}
 8006200:	4618      	mov	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	20000000 	.word	0x20000000

08006210 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006214:	f7ff fff0 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006218:	4602      	mov	r2, r0
 800621a:	4b05      	ldr	r3, [pc, #20]	@ (8006230 <HAL_RCC_GetPCLK1Freq+0x20>)
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	0a9b      	lsrs	r3, r3, #10
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	4903      	ldr	r1, [pc, #12]	@ (8006234 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006226:	5ccb      	ldrb	r3, [r1, r3]
 8006228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800622c:	4618      	mov	r0, r3
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40023800 	.word	0x40023800
 8006234:	0800bd0c 	.word	0x0800bd0c

08006238 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800623c:	f7ff ffdc 	bl	80061f8 <HAL_RCC_GetHCLKFreq>
 8006240:	4602      	mov	r2, r0
 8006242:	4b05      	ldr	r3, [pc, #20]	@ (8006258 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	0b5b      	lsrs	r3, r3, #13
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	4903      	ldr	r1, [pc, #12]	@ (800625c <HAL_RCC_GetPCLK2Freq+0x24>)
 800624e:	5ccb      	ldrb	r3, [r1, r3]
 8006250:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006254:	4618      	mov	r0, r3
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40023800 	.word	0x40023800
 800625c:	0800bd0c 	.word	0x0800bd0c

08006260 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800626c:	2300      	movs	r3, #0
 800626e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f003 0301 	and.w	r3, r3, #1
 8006278:	2b00      	cmp	r3, #0
 800627a:	d105      	bne.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006284:	2b00      	cmp	r3, #0
 8006286:	d035      	beq.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006288:	4b62      	ldr	r3, [pc, #392]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800628a:	2200      	movs	r2, #0
 800628c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800628e:	f7fc f93f 	bl	8002510 <HAL_GetTick>
 8006292:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006294:	e008      	b.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006296:	f7fc f93b 	bl	8002510 <HAL_GetTick>
 800629a:	4602      	mov	r2, r0
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	1ad3      	subs	r3, r2, r3
 80062a0:	2b02      	cmp	r3, #2
 80062a2:	d901      	bls.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062a4:	2303      	movs	r3, #3
 80062a6:	e0b0      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80062a8:	4b5b      	ldr	r3, [pc, #364]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1f0      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	019a      	lsls	r2, r3, #6
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	071b      	lsls	r3, r3, #28
 80062c0:	4955      	ldr	r1, [pc, #340]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062c2:	4313      	orrs	r3, r2
 80062c4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062c8:	4b52      	ldr	r3, [pc, #328]	@ (8006414 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80062ca:	2201      	movs	r2, #1
 80062cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80062ce:	f7fc f91f 	bl	8002510 <HAL_GetTick>
 80062d2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062d4:	e008      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062d6:	f7fc f91b 	bl	8002510 <HAL_GetTick>
 80062da:	4602      	mov	r2, r0
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	1ad3      	subs	r3, r2, r3
 80062e0:	2b02      	cmp	r3, #2
 80062e2:	d901      	bls.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062e4:	2303      	movs	r3, #3
 80062e6:	e090      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062e8:	4b4b      	ldr	r3, [pc, #300]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d0f0      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0302 	and.w	r3, r3, #2
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8083 	beq.w	8006408 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006302:	2300      	movs	r3, #0
 8006304:	60fb      	str	r3, [r7, #12]
 8006306:	4b44      	ldr	r3, [pc, #272]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800630a:	4a43      	ldr	r2, [pc, #268]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800630c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006310:	6413      	str	r3, [r2, #64]	@ 0x40
 8006312:	4b41      	ldr	r3, [pc, #260]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800631a:	60fb      	str	r3, [r7, #12]
 800631c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800631e:	4b3f      	ldr	r3, [pc, #252]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a3e      	ldr	r2, [pc, #248]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006328:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800632a:	f7fc f8f1 	bl	8002510 <HAL_GetTick>
 800632e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006330:	e008      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006332:	f7fc f8ed 	bl	8002510 <HAL_GetTick>
 8006336:	4602      	mov	r2, r0
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	1ad3      	subs	r3, r2, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d901      	bls.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e062      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006344:	4b35      	ldr	r3, [pc, #212]	@ (800641c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0f0      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006350:	4b31      	ldr	r3, [pc, #196]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006352:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006354:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006358:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d02f      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	429a      	cmp	r2, r3
 800636c:	d028      	beq.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800636e:	4b2a      	ldr	r3, [pc, #168]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006370:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006376:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006378:	4b29      	ldr	r3, [pc, #164]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800637a:	2201      	movs	r2, #1
 800637c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800637e:	4b28      	ldr	r3, [pc, #160]	@ (8006420 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006380:	2200      	movs	r2, #0
 8006382:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006384:	4a24      	ldr	r2, [pc, #144]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800638a:	4b23      	ldr	r3, [pc, #140]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800638c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800638e:	f003 0301 	and.w	r3, r3, #1
 8006392:	2b01      	cmp	r3, #1
 8006394:	d114      	bne.n	80063c0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006396:	f7fc f8bb 	bl	8002510 <HAL_GetTick>
 800639a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800639c:	e00a      	b.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800639e:	f7fc f8b7 	bl	8002510 <HAL_GetTick>
 80063a2:	4602      	mov	r2, r0
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	1ad3      	subs	r3, r2, r3
 80063a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d901      	bls.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e02a      	b.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063b4:	4b18      	ldr	r3, [pc, #96]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80063b8:	f003 0302 	and.w	r3, r3, #2
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d0ee      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	68db      	ldr	r3, [r3, #12]
 80063c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80063c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80063cc:	d10d      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80063ce:	4b12      	ldr	r3, [pc, #72]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80063de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063e2:	490d      	ldr	r1, [pc, #52]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063e4:	4313      	orrs	r3, r2
 80063e6:	608b      	str	r3, [r1, #8]
 80063e8:	e005      	b.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	4a0a      	ldr	r2, [pc, #40]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80063f4:	6093      	str	r3, [r2, #8]
 80063f6:	4b08      	ldr	r3, [pc, #32]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006402:	4905      	ldr	r1, [pc, #20]	@ (8006418 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006404:	4313      	orrs	r3, r2
 8006406:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3718      	adds	r7, #24
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}
 8006412:	bf00      	nop
 8006414:	42470068 	.word	0x42470068
 8006418:	40023800 	.word	0x40023800
 800641c:	40007000 	.word	0x40007000
 8006420:	42470e40 	.word	0x42470e40

08006424 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006424:	b480      	push	{r7}
 8006426:	b087      	sub	sp, #28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800642c:	2300      	movs	r3, #0
 800642e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006434:	2300      	movs	r3, #0
 8006436:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d13f      	bne.n	80064c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006442:	4b24      	ldr	r3, [pc, #144]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800644a:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006458:	d12f      	bne.n	80064ba <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800645a:	4b1f      	ldr	r3, [pc, #124]	@ (80064d8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800645c:	617b      	str	r3, [r7, #20]
          break;
 800645e:	e02f      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006460:	4b1c      	ldr	r3, [pc, #112]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800646c:	d108      	bne.n	8006480 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800646e:	4b19      	ldr	r3, [pc, #100]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006476:	4a19      	ldr	r2, [pc, #100]	@ (80064dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006478:	fbb2 f3f3 	udiv	r3, r2, r3
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	e007      	b.n	8006490 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006480:	4b14      	ldr	r3, [pc, #80]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006488:	4a15      	ldr	r2, [pc, #84]	@ (80064e0 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800648a:	fbb2 f3f3 	udiv	r3, r2, r3
 800648e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006490:	4b10      	ldr	r3, [pc, #64]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006492:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006496:	099b      	lsrs	r3, r3, #6
 8006498:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	fb02 f303 	mul.w	r3, r2, r3
 80064a2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80064a4:	4b0b      	ldr	r3, [pc, #44]	@ (80064d4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80064a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064aa:	0f1b      	lsrs	r3, r3, #28
 80064ac:	f003 0307 	and.w	r3, r3, #7
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b6:	617b      	str	r3, [r7, #20]
          break;
 80064b8:	e002      	b.n	80064c0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	617b      	str	r3, [r7, #20]
          break;
 80064be:	bf00      	nop
        }
      }
      break;
 80064c0:	e000      	b.n	80064c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80064c2:	bf00      	nop
    }
  }
  return frequency;
 80064c4:	697b      	ldr	r3, [r7, #20]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	371c      	adds	r7, #28
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	00bb8000 	.word	0x00bb8000
 80064dc:	007a1200 	.word	0x007a1200
 80064e0:	00f42400 	.word	0x00f42400

080064e4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b082      	sub	sp, #8
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e01c      	b.n	8006530 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	795b      	ldrb	r3, [r3, #5]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d105      	bne.n	800650c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2200      	movs	r2, #0
 8006504:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fb fdec 	bl	80020e4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681a      	ldr	r2, [r3, #0]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	f042 0204 	orr.w	r2, r2, #4
 8006520:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2201      	movs	r2, #1
 8006526:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3708      	adds	r7, #8
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}

08006538 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b084      	sub	sp, #16
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006542:	2300      	movs	r3, #0
 8006544:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	791b      	ldrb	r3, [r3, #4]
 800654a:	2b01      	cmp	r3, #1
 800654c:	d101      	bne.n	8006552 <HAL_RNG_GenerateRandomNumber+0x1a>
 800654e:	2302      	movs	r3, #2
 8006550:	e044      	b.n	80065dc <HAL_RNG_GenerateRandomNumber+0xa4>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	2201      	movs	r2, #1
 8006556:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	795b      	ldrb	r3, [r3, #5]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b01      	cmp	r3, #1
 8006560:	d133      	bne.n	80065ca <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2202      	movs	r2, #2
 8006566:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006568:	f7fb ffd2 	bl	8002510 <HAL_GetTick>
 800656c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800656e:	e018      	b.n	80065a2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8006570:	f7fb ffce 	bl	8002510 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d911      	bls.n	80065a2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 0301 	and.w	r3, r3, #1
 8006588:	2b01      	cmp	r3, #1
 800658a:	d00a      	beq.n	80065a2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2202      	movs	r2, #2
 8006596:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e01c      	b.n	80065dc <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d1df      	bne.n	8006570 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	689a      	ldr	r2, [r3, #8]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68da      	ldr	r2, [r3, #12]
 80065be:	683b      	ldr	r3, [r7, #0]
 80065c0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	715a      	strb	r2, [r3, #5]
 80065c8:	e004      	b.n	80065d4 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2204      	movs	r2, #4
 80065ce:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	711a      	strb	r2, [r3, #4]

  return status;
 80065da:	7bfb      	ldrb	r3, [r7, #15]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3710      	adds	r7, #16
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e07b      	b.n	80066ee <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d108      	bne.n	8006610 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006606:	d009      	beq.n	800661c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2200      	movs	r2, #0
 800660c:	61da      	str	r2, [r3, #28]
 800660e:	e005      	b.n	800661c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f7fb fd76 	bl	8002128 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006652:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689b      	ldr	r3, [r3, #8]
 8006660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006664:	431a      	orrs	r2, r3
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68db      	ldr	r3, [r3, #12]
 800666a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800666e:	431a      	orrs	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	431a      	orrs	r2, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	431a      	orrs	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	699b      	ldr	r3, [r3, #24]
 8006688:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800668c:	431a      	orrs	r2, r3
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006696:	431a      	orrs	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6a1b      	ldr	r3, [r3, #32]
 800669c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066a0:	ea42 0103 	orr.w	r1, r2, r3
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	430a      	orrs	r2, r1
 80066b2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	699b      	ldr	r3, [r3, #24]
 80066b8:	0c1b      	lsrs	r3, r3, #16
 80066ba:	f003 0104 	and.w	r1, r3, #4
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	f003 0210 	and.w	r2, r3, #16
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80066dc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2200      	movs	r2, #0
 80066e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3708      	adds	r7, #8
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b082      	sub	sp, #8
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	e042      	b.n	800678e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b00      	cmp	r3, #0
 8006712:	d106      	bne.n	8006722 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f7fb fd4b 	bl	80021b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2224      	movs	r2, #36	@ 0x24
 8006726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68da      	ldr	r2, [r3, #12]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006738:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f000 f972 	bl	8006a24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	691a      	ldr	r2, [r3, #16]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800674e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	695a      	ldr	r2, [r3, #20]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800675e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800676e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2220      	movs	r2, #32
 800677a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2220      	movs	r2, #32
 8006782:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b08a      	sub	sp, #40	@ 0x28
 800679a:	af02      	add	r7, sp, #8
 800679c:	60f8      	str	r0, [r7, #12]
 800679e:	60b9      	str	r1, [r7, #8]
 80067a0:	603b      	str	r3, [r7, #0]
 80067a2:	4613      	mov	r3, r2
 80067a4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	d175      	bne.n	80068a2 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <HAL_UART_Transmit+0x2c>
 80067bc:	88fb      	ldrh	r3, [r7, #6]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d101      	bne.n	80067c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e06e      	b.n	80068a4 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2200      	movs	r2, #0
 80067ca:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2221      	movs	r2, #33	@ 0x21
 80067d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067d4:	f7fb fe9c 	bl	8002510 <HAL_GetTick>
 80067d8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	88fa      	ldrh	r2, [r7, #6]
 80067de:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	88fa      	ldrh	r2, [r7, #6]
 80067e4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	689b      	ldr	r3, [r3, #8]
 80067ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067ee:	d108      	bne.n	8006802 <HAL_UART_Transmit+0x6c>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	691b      	ldr	r3, [r3, #16]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d104      	bne.n	8006802 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067f8:	2300      	movs	r3, #0
 80067fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	61bb      	str	r3, [r7, #24]
 8006800:	e003      	b.n	800680a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006806:	2300      	movs	r3, #0
 8006808:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800680a:	e02e      	b.n	800686a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	697b      	ldr	r3, [r7, #20]
 8006812:	2200      	movs	r2, #0
 8006814:	2180      	movs	r1, #128	@ 0x80
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 f848 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d005      	beq.n	800682e <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2220      	movs	r2, #32
 8006826:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800682a:	2303      	movs	r3, #3
 800682c:	e03a      	b.n	80068a4 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d10b      	bne.n	800684c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	461a      	mov	r2, r3
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006842:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006844:	69bb      	ldr	r3, [r7, #24]
 8006846:	3302      	adds	r3, #2
 8006848:	61bb      	str	r3, [r7, #24]
 800684a:	e007      	b.n	800685c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	781a      	ldrb	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006856:	69fb      	ldr	r3, [r7, #28]
 8006858:	3301      	adds	r3, #1
 800685a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006860:	b29b      	uxth	r3, r3
 8006862:	3b01      	subs	r3, #1
 8006864:	b29a      	uxth	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800686e:	b29b      	uxth	r3, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	d1cb      	bne.n	800680c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	9300      	str	r3, [sp, #0]
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	2200      	movs	r2, #0
 800687c:	2140      	movs	r1, #64	@ 0x40
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 f814 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d005      	beq.n	8006896 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2220      	movs	r2, #32
 800688e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e006      	b.n	80068a4 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2220      	movs	r2, #32
 800689a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800689e:	2300      	movs	r3, #0
 80068a0:	e000      	b.n	80068a4 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80068a2:	2302      	movs	r3, #2
  }
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3720      	adds	r7, #32
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	e03b      	b.n	8006936 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	6a3b      	ldr	r3, [r7, #32]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d037      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068c6:	f7fb fe23 	bl	8002510 <HAL_GetTick>
 80068ca:	4602      	mov	r2, r0
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	1ad3      	subs	r3, r2, r3
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	429a      	cmp	r2, r3
 80068d4:	d302      	bcc.n	80068dc <UART_WaitOnFlagUntilTimeout+0x30>
 80068d6:	6a3b      	ldr	r3, [r7, #32]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d101      	bne.n	80068e0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e03a      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	f003 0304 	and.w	r3, r3, #4
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d023      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	2b80      	cmp	r3, #128	@ 0x80
 80068f2:	d020      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0x8a>
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b40      	cmp	r3, #64	@ 0x40
 80068f8:	d01d      	beq.n	8006936 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0308 	and.w	r3, r3, #8
 8006904:	2b08      	cmp	r3, #8
 8006906:	d116      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006908:	2300      	movs	r3, #0
 800690a:	617b      	str	r3, [r7, #20]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	617b      	str	r3, [r7, #20]
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	617b      	str	r3, [r7, #20]
 800691c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800691e:	68f8      	ldr	r0, [r7, #12]
 8006920:	f000 f81d 	bl	800695e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2208      	movs	r2, #8
 8006928:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e00f      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681a      	ldr	r2, [r3, #0]
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	4013      	ands	r3, r2
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	429a      	cmp	r2, r3
 8006944:	bf0c      	ite	eq
 8006946:	2301      	moveq	r3, #1
 8006948:	2300      	movne	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	461a      	mov	r2, r3
 800694e:	79fb      	ldrb	r3, [r7, #7]
 8006950:	429a      	cmp	r2, r3
 8006952:	d0b4      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}

0800695e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800695e:	b480      	push	{r7}
 8006960:	b095      	sub	sp, #84	@ 0x54
 8006962:	af00      	add	r7, sp, #0
 8006964:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	330c      	adds	r3, #12
 800696c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006970:	e853 3f00 	ldrex	r3, [r3]
 8006974:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006978:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800697c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	330c      	adds	r3, #12
 8006984:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006986:	643a      	str	r2, [r7, #64]	@ 0x40
 8006988:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800698c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e5      	bne.n	8006966 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	3314      	adds	r3, #20
 80069a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a2:	6a3b      	ldr	r3, [r7, #32]
 80069a4:	e853 3f00 	ldrex	r3, [r3]
 80069a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	f023 0301 	bic.w	r3, r3, #1
 80069b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	3314      	adds	r3, #20
 80069b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80069ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80069bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80069c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069c2:	e841 2300 	strex	r3, r2, [r1]
 80069c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d1e5      	bne.n	800699a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d119      	bne.n	8006a0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	e853 3f00 	ldrex	r3, [r3]
 80069e4:	60bb      	str	r3, [r7, #8]
   return(result);
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f023 0310 	bic.w	r3, r3, #16
 80069ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	330c      	adds	r3, #12
 80069f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069f6:	61ba      	str	r2, [r7, #24]
 80069f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fa:	6979      	ldr	r1, [r7, #20]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	613b      	str	r3, [r7, #16]
   return(result);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1e5      	bne.n	80069d6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2220      	movs	r2, #32
 8006a0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006a18:	bf00      	nop
 8006a1a:	3754      	adds	r7, #84	@ 0x54
 8006a1c:	46bd      	mov	sp, r7
 8006a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a22:	4770      	bx	lr

08006a24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a28:	b0c0      	sub	sp, #256	@ 0x100
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	691b      	ldr	r3, [r3, #16]
 8006a38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a40:	68d9      	ldr	r1, [r3, #12]
 8006a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a46:	681a      	ldr	r2, [r3, #0]
 8006a48:	ea40 0301 	orr.w	r3, r0, r1
 8006a4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006a4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a52:	689a      	ldr	r2, [r3, #8]
 8006a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a60:	695b      	ldr	r3, [r3, #20]
 8006a62:	431a      	orrs	r2, r3
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a7c:	f021 010c 	bic.w	r1, r1, #12
 8006a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a8a:	430b      	orrs	r3, r1
 8006a8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	695b      	ldr	r3, [r3, #20]
 8006a96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a9e:	6999      	ldr	r1, [r3, #24]
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa4:	681a      	ldr	r2, [r3, #0]
 8006aa6:	ea40 0301 	orr.w	r3, r0, r1
 8006aaa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006aac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b8f      	ldr	r3, [pc, #572]	@ (8006cf0 <UART_SetConfig+0x2cc>)
 8006ab4:	429a      	cmp	r2, r3
 8006ab6:	d005      	beq.n	8006ac4 <UART_SetConfig+0xa0>
 8006ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4b8d      	ldr	r3, [pc, #564]	@ (8006cf4 <UART_SetConfig+0x2d0>)
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d104      	bne.n	8006ace <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ac4:	f7ff fbb8 	bl	8006238 <HAL_RCC_GetPCLK2Freq>
 8006ac8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006acc:	e003      	b.n	8006ad6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006ace:	f7ff fb9f 	bl	8006210 <HAL_RCC_GetPCLK1Freq>
 8006ad2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ada:	69db      	ldr	r3, [r3, #28]
 8006adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ae0:	f040 810c 	bne.w	8006cfc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006aee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006af2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006af6:	4622      	mov	r2, r4
 8006af8:	462b      	mov	r3, r5
 8006afa:	1891      	adds	r1, r2, r2
 8006afc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006afe:	415b      	adcs	r3, r3
 8006b00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006b06:	4621      	mov	r1, r4
 8006b08:	eb12 0801 	adds.w	r8, r2, r1
 8006b0c:	4629      	mov	r1, r5
 8006b0e:	eb43 0901 	adc.w	r9, r3, r1
 8006b12:	f04f 0200 	mov.w	r2, #0
 8006b16:	f04f 0300 	mov.w	r3, #0
 8006b1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006b1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006b22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006b26:	4690      	mov	r8, r2
 8006b28:	4699      	mov	r9, r3
 8006b2a:	4623      	mov	r3, r4
 8006b2c:	eb18 0303 	adds.w	r3, r8, r3
 8006b30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006b34:	462b      	mov	r3, r5
 8006b36:	eb49 0303 	adc.w	r3, r9, r3
 8006b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006b4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006b4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006b52:	460b      	mov	r3, r1
 8006b54:	18db      	adds	r3, r3, r3
 8006b56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b58:	4613      	mov	r3, r2
 8006b5a:	eb42 0303 	adc.w	r3, r2, r3
 8006b5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006b64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006b68:	f7f9 fb82 	bl	8000270 <__aeabi_uldivmod>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	460b      	mov	r3, r1
 8006b70:	4b61      	ldr	r3, [pc, #388]	@ (8006cf8 <UART_SetConfig+0x2d4>)
 8006b72:	fba3 2302 	umull	r2, r3, r3, r2
 8006b76:	095b      	lsrs	r3, r3, #5
 8006b78:	011c      	lsls	r4, r3, #4
 8006b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b8c:	4642      	mov	r2, r8
 8006b8e:	464b      	mov	r3, r9
 8006b90:	1891      	adds	r1, r2, r2
 8006b92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b94:	415b      	adcs	r3, r3
 8006b96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b9c:	4641      	mov	r1, r8
 8006b9e:	eb12 0a01 	adds.w	sl, r2, r1
 8006ba2:	4649      	mov	r1, r9
 8006ba4:	eb43 0b01 	adc.w	fp, r3, r1
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006bb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006bb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006bbc:	4692      	mov	sl, r2
 8006bbe:	469b      	mov	fp, r3
 8006bc0:	4643      	mov	r3, r8
 8006bc2:	eb1a 0303 	adds.w	r3, sl, r3
 8006bc6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006bca:	464b      	mov	r3, r9
 8006bcc:	eb4b 0303 	adc.w	r3, fp, r3
 8006bd0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006be0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006be4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006be8:	460b      	mov	r3, r1
 8006bea:	18db      	adds	r3, r3, r3
 8006bec:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bee:	4613      	mov	r3, r2
 8006bf0:	eb42 0303 	adc.w	r3, r2, r3
 8006bf4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006bf6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006bfa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006bfe:	f7f9 fb37 	bl	8000270 <__aeabi_uldivmod>
 8006c02:	4602      	mov	r2, r0
 8006c04:	460b      	mov	r3, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	4b3b      	ldr	r3, [pc, #236]	@ (8006cf8 <UART_SetConfig+0x2d4>)
 8006c0a:	fba3 2301 	umull	r2, r3, r3, r1
 8006c0e:	095b      	lsrs	r3, r3, #5
 8006c10:	2264      	movs	r2, #100	@ 0x64
 8006c12:	fb02 f303 	mul.w	r3, r2, r3
 8006c16:	1acb      	subs	r3, r1, r3
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006c1e:	4b36      	ldr	r3, [pc, #216]	@ (8006cf8 <UART_SetConfig+0x2d4>)
 8006c20:	fba3 2302 	umull	r2, r3, r3, r2
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006c2c:	441c      	add	r4, r3
 8006c2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c32:	2200      	movs	r2, #0
 8006c34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006c3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006c40:	4642      	mov	r2, r8
 8006c42:	464b      	mov	r3, r9
 8006c44:	1891      	adds	r1, r2, r2
 8006c46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006c48:	415b      	adcs	r3, r3
 8006c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006c4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006c50:	4641      	mov	r1, r8
 8006c52:	1851      	adds	r1, r2, r1
 8006c54:	6339      	str	r1, [r7, #48]	@ 0x30
 8006c56:	4649      	mov	r1, r9
 8006c58:	414b      	adcs	r3, r1
 8006c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c5c:	f04f 0200 	mov.w	r2, #0
 8006c60:	f04f 0300 	mov.w	r3, #0
 8006c64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006c68:	4659      	mov	r1, fp
 8006c6a:	00cb      	lsls	r3, r1, #3
 8006c6c:	4651      	mov	r1, sl
 8006c6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c72:	4651      	mov	r1, sl
 8006c74:	00ca      	lsls	r2, r1, #3
 8006c76:	4610      	mov	r0, r2
 8006c78:	4619      	mov	r1, r3
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	4642      	mov	r2, r8
 8006c7e:	189b      	adds	r3, r3, r2
 8006c80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c84:	464b      	mov	r3, r9
 8006c86:	460a      	mov	r2, r1
 8006c88:	eb42 0303 	adc.w	r3, r2, r3
 8006c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ca0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	18db      	adds	r3, r3, r3
 8006ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006caa:	4613      	mov	r3, r2
 8006cac:	eb42 0303 	adc.w	r3, r2, r3
 8006cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006cba:	f7f9 fad9 	bl	8000270 <__aeabi_uldivmod>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	460b      	mov	r3, r1
 8006cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006cf8 <UART_SetConfig+0x2d4>)
 8006cc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	2164      	movs	r1, #100	@ 0x64
 8006ccc:	fb01 f303 	mul.w	r3, r1, r3
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	3332      	adds	r3, #50	@ 0x32
 8006cd6:	4a08      	ldr	r2, [pc, #32]	@ (8006cf8 <UART_SetConfig+0x2d4>)
 8006cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006cdc:	095b      	lsrs	r3, r3, #5
 8006cde:	f003 0207 	and.w	r2, r3, #7
 8006ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4422      	add	r2, r4
 8006cea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006cec:	e106      	b.n	8006efc <UART_SetConfig+0x4d8>
 8006cee:	bf00      	nop
 8006cf0:	40011000 	.word	0x40011000
 8006cf4:	40011400 	.word	0x40011400
 8006cf8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006cfc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d00:	2200      	movs	r2, #0
 8006d02:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006d06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006d0a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006d0e:	4642      	mov	r2, r8
 8006d10:	464b      	mov	r3, r9
 8006d12:	1891      	adds	r1, r2, r2
 8006d14:	6239      	str	r1, [r7, #32]
 8006d16:	415b      	adcs	r3, r3
 8006d18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006d1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006d1e:	4641      	mov	r1, r8
 8006d20:	1854      	adds	r4, r2, r1
 8006d22:	4649      	mov	r1, r9
 8006d24:	eb43 0501 	adc.w	r5, r3, r1
 8006d28:	f04f 0200 	mov.w	r2, #0
 8006d2c:	f04f 0300 	mov.w	r3, #0
 8006d30:	00eb      	lsls	r3, r5, #3
 8006d32:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d36:	00e2      	lsls	r2, r4, #3
 8006d38:	4614      	mov	r4, r2
 8006d3a:	461d      	mov	r5, r3
 8006d3c:	4643      	mov	r3, r8
 8006d3e:	18e3      	adds	r3, r4, r3
 8006d40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006d44:	464b      	mov	r3, r9
 8006d46:	eb45 0303 	adc.w	r3, r5, r3
 8006d4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006d5a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006d6a:	4629      	mov	r1, r5
 8006d6c:	008b      	lsls	r3, r1, #2
 8006d6e:	4621      	mov	r1, r4
 8006d70:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d74:	4621      	mov	r1, r4
 8006d76:	008a      	lsls	r2, r1, #2
 8006d78:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d7c:	f7f9 fa78 	bl	8000270 <__aeabi_uldivmod>
 8006d80:	4602      	mov	r2, r0
 8006d82:	460b      	mov	r3, r1
 8006d84:	4b60      	ldr	r3, [pc, #384]	@ (8006f08 <UART_SetConfig+0x4e4>)
 8006d86:	fba3 2302 	umull	r2, r3, r3, r2
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	011c      	lsls	r4, r3, #4
 8006d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d92:	2200      	movs	r2, #0
 8006d94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d98:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d9c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006da0:	4642      	mov	r2, r8
 8006da2:	464b      	mov	r3, r9
 8006da4:	1891      	adds	r1, r2, r2
 8006da6:	61b9      	str	r1, [r7, #24]
 8006da8:	415b      	adcs	r3, r3
 8006daa:	61fb      	str	r3, [r7, #28]
 8006dac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006db0:	4641      	mov	r1, r8
 8006db2:	1851      	adds	r1, r2, r1
 8006db4:	6139      	str	r1, [r7, #16]
 8006db6:	4649      	mov	r1, r9
 8006db8:	414b      	adcs	r3, r1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	f04f 0200 	mov.w	r2, #0
 8006dc0:	f04f 0300 	mov.w	r3, #0
 8006dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006dc8:	4659      	mov	r1, fp
 8006dca:	00cb      	lsls	r3, r1, #3
 8006dcc:	4651      	mov	r1, sl
 8006dce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006dd2:	4651      	mov	r1, sl
 8006dd4:	00ca      	lsls	r2, r1, #3
 8006dd6:	4610      	mov	r0, r2
 8006dd8:	4619      	mov	r1, r3
 8006dda:	4603      	mov	r3, r0
 8006ddc:	4642      	mov	r2, r8
 8006dde:	189b      	adds	r3, r3, r2
 8006de0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006de4:	464b      	mov	r3, r9
 8006de6:	460a      	mov	r2, r1
 8006de8:	eb42 0303 	adc.w	r3, r2, r3
 8006dec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006dfa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006e08:	4649      	mov	r1, r9
 8006e0a:	008b      	lsls	r3, r1, #2
 8006e0c:	4641      	mov	r1, r8
 8006e0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e12:	4641      	mov	r1, r8
 8006e14:	008a      	lsls	r2, r1, #2
 8006e16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006e1a:	f7f9 fa29 	bl	8000270 <__aeabi_uldivmod>
 8006e1e:	4602      	mov	r2, r0
 8006e20:	460b      	mov	r3, r1
 8006e22:	4611      	mov	r1, r2
 8006e24:	4b38      	ldr	r3, [pc, #224]	@ (8006f08 <UART_SetConfig+0x4e4>)
 8006e26:	fba3 2301 	umull	r2, r3, r3, r1
 8006e2a:	095b      	lsrs	r3, r3, #5
 8006e2c:	2264      	movs	r2, #100	@ 0x64
 8006e2e:	fb02 f303 	mul.w	r3, r2, r3
 8006e32:	1acb      	subs	r3, r1, r3
 8006e34:	011b      	lsls	r3, r3, #4
 8006e36:	3332      	adds	r3, #50	@ 0x32
 8006e38:	4a33      	ldr	r2, [pc, #204]	@ (8006f08 <UART_SetConfig+0x4e4>)
 8006e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006e44:	441c      	add	r4, r3
 8006e46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006e50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006e54:	4642      	mov	r2, r8
 8006e56:	464b      	mov	r3, r9
 8006e58:	1891      	adds	r1, r2, r2
 8006e5a:	60b9      	str	r1, [r7, #8]
 8006e5c:	415b      	adcs	r3, r3
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e64:	4641      	mov	r1, r8
 8006e66:	1851      	adds	r1, r2, r1
 8006e68:	6039      	str	r1, [r7, #0]
 8006e6a:	4649      	mov	r1, r9
 8006e6c:	414b      	adcs	r3, r1
 8006e6e:	607b      	str	r3, [r7, #4]
 8006e70:	f04f 0200 	mov.w	r2, #0
 8006e74:	f04f 0300 	mov.w	r3, #0
 8006e78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e7c:	4659      	mov	r1, fp
 8006e7e:	00cb      	lsls	r3, r1, #3
 8006e80:	4651      	mov	r1, sl
 8006e82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e86:	4651      	mov	r1, sl
 8006e88:	00ca      	lsls	r2, r1, #3
 8006e8a:	4610      	mov	r0, r2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4642      	mov	r2, r8
 8006e92:	189b      	adds	r3, r3, r2
 8006e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e96:	464b      	mov	r3, r9
 8006e98:	460a      	mov	r2, r1
 8006e9a:	eb42 0303 	adc.w	r3, r2, r3
 8006e9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006eaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8006eac:	f04f 0200 	mov.w	r2, #0
 8006eb0:	f04f 0300 	mov.w	r3, #0
 8006eb4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006eb8:	4649      	mov	r1, r9
 8006eba:	008b      	lsls	r3, r1, #2
 8006ebc:	4641      	mov	r1, r8
 8006ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ec2:	4641      	mov	r1, r8
 8006ec4:	008a      	lsls	r2, r1, #2
 8006ec6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006eca:	f7f9 f9d1 	bl	8000270 <__aeabi_uldivmod>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f08 <UART_SetConfig+0x4e4>)
 8006ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed8:	095b      	lsrs	r3, r3, #5
 8006eda:	2164      	movs	r1, #100	@ 0x64
 8006edc:	fb01 f303 	mul.w	r3, r1, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	011b      	lsls	r3, r3, #4
 8006ee4:	3332      	adds	r3, #50	@ 0x32
 8006ee6:	4a08      	ldr	r2, [pc, #32]	@ (8006f08 <UART_SetConfig+0x4e4>)
 8006ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eec:	095b      	lsrs	r3, r3, #5
 8006eee:	f003 020f 	and.w	r2, r3, #15
 8006ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	4422      	add	r2, r4
 8006efa:	609a      	str	r2, [r3, #8]
}
 8006efc:	bf00      	nop
 8006efe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006f02:	46bd      	mov	sp, r7
 8006f04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f08:	51eb851f 	.word	0x51eb851f

08006f0c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006f0c:	b084      	sub	sp, #16
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	f107 001c 	add.w	r0, r7, #28
 8006f1a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d123      	bne.n	8006f6e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f2a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	68db      	ldr	r3, [r3, #12]
 8006f36:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006f3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006f4e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d105      	bne.n	8006f62 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	68db      	ldr	r3, [r3, #12]
 8006f5a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 f9dc 	bl	8007320 <USB_CoreReset>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e01b      	b.n	8006fa6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	68db      	ldr	r3, [r3, #12]
 8006f72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f9d0 	bl	8007320 <USB_CoreReset>
 8006f80:	4603      	mov	r3, r0
 8006f82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006f84:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d106      	bne.n	8006f9a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f90:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	639a      	str	r2, [r3, #56]	@ 0x38
 8006f98:	e005      	b.n	8006fa6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006fa6:	7fbb      	ldrb	r3, [r7, #30]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d10b      	bne.n	8006fc4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	f043 0206 	orr.w	r2, r3, #6
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f043 0220 	orr.w	r2, r3, #32
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006fd0:	b004      	add	sp, #16
 8006fd2:	4770      	bx	lr

08006fd4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	f043 0201 	orr.w	r2, r3, #1
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	370c      	adds	r7, #12
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr

08006ff6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	b083      	sub	sp, #12
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	689b      	ldr	r3, [r3, #8]
 8007002:	f023 0201 	bic.w	r2, r3, #1
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800700a:	2300      	movs	r3, #0
}
 800700c:	4618      	mov	r0, r3
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	460b      	mov	r3, r1
 8007022:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007024:	2300      	movs	r3, #0
 8007026:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	68db      	ldr	r3, [r3, #12]
 800702c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007034:	78fb      	ldrb	r3, [r7, #3]
 8007036:	2b01      	cmp	r3, #1
 8007038:	d115      	bne.n	8007066 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007046:	200a      	movs	r0, #10
 8007048:	f7fb fa6e 	bl	8002528 <HAL_Delay>
      ms += 10U;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	330a      	adds	r3, #10
 8007050:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 f956 	bl	8007304 <USB_GetMode>
 8007058:	4603      	mov	r3, r0
 800705a:	2b01      	cmp	r3, #1
 800705c:	d01e      	beq.n	800709c <USB_SetCurrentMode+0x84>
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2bc7      	cmp	r3, #199	@ 0xc7
 8007062:	d9f0      	bls.n	8007046 <USB_SetCurrentMode+0x2e>
 8007064:	e01a      	b.n	800709c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007066:	78fb      	ldrb	r3, [r7, #3]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d115      	bne.n	8007098 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	68db      	ldr	r3, [r3, #12]
 8007070:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007078:	200a      	movs	r0, #10
 800707a:	f7fb fa55 	bl	8002528 <HAL_Delay>
      ms += 10U;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	330a      	adds	r3, #10
 8007082:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007084:	6878      	ldr	r0, [r7, #4]
 8007086:	f000 f93d 	bl	8007304 <USB_GetMode>
 800708a:	4603      	mov	r3, r0
 800708c:	2b00      	cmp	r3, #0
 800708e:	d005      	beq.n	800709c <USB_SetCurrentMode+0x84>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2bc7      	cmp	r3, #199	@ 0xc7
 8007094:	d9f0      	bls.n	8007078 <USB_SetCurrentMode+0x60>
 8007096:	e001      	b.n	800709c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007098:	2301      	movs	r3, #1
 800709a:	e005      	b.n	80070a8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2bc8      	cmp	r3, #200	@ 0xc8
 80070a0:	d101      	bne.n	80070a6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e000      	b.n	80070a8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80070a6:	2300      	movs	r3, #0
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	3710      	adds	r7, #16
 80070ac:	46bd      	mov	sp, r7
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b085      	sub	sp, #20
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80070ba:	2300      	movs	r3, #0
 80070bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	3301      	adds	r3, #1
 80070c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070ca:	d901      	bls.n	80070d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e01b      	b.n	8007108 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	daf2      	bge.n	80070be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80070d8:	2300      	movs	r3, #0
 80070da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	019b      	lsls	r3, r3, #6
 80070e0:	f043 0220 	orr.w	r2, r3, #32
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	3301      	adds	r3, #1
 80070ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80070f4:	d901      	bls.n	80070fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e006      	b.n	8007108 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	691b      	ldr	r3, [r3, #16]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b20      	cmp	r3, #32
 8007104:	d0f0      	beq.n	80070e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	3301      	adds	r3, #1
 8007124:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800712c:	d901      	bls.n	8007132 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e018      	b.n	8007164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	2b00      	cmp	r3, #0
 8007138:	daf2      	bge.n	8007120 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800713a:	2300      	movs	r3, #0
 800713c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2210      	movs	r2, #16
 8007142:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3301      	adds	r3, #1
 8007148:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007150:	d901      	bls.n	8007156 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007152:	2303      	movs	r3, #3
 8007154:	e006      	b.n	8007164 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	691b      	ldr	r3, [r3, #16]
 800715a:	f003 0310 	and.w	r3, r3, #16
 800715e:	2b10      	cmp	r3, #16
 8007160:	d0f0      	beq.n	8007144 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007170:	b480      	push	{r7}
 8007172:	b089      	sub	sp, #36	@ 0x24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	4611      	mov	r1, r2
 800717c:	461a      	mov	r2, r3
 800717e:	460b      	mov	r3, r1
 8007180:	71fb      	strb	r3, [r7, #7]
 8007182:	4613      	mov	r3, r2
 8007184:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800718e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007192:	2b00      	cmp	r3, #0
 8007194:	d123      	bne.n	80071de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007196:	88bb      	ldrh	r3, [r7, #4]
 8007198:	3303      	adds	r3, #3
 800719a:	089b      	lsrs	r3, r3, #2
 800719c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	61bb      	str	r3, [r7, #24]
 80071a2:	e018      	b.n	80071d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80071a4:	79fb      	ldrb	r3, [r7, #7]
 80071a6:	031a      	lsls	r2, r3, #12
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80071b0:	461a      	mov	r2, r3
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	3301      	adds	r3, #1
 80071bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	3301      	adds	r3, #1
 80071c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	3301      	adds	r3, #1
 80071c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80071ca:	69fb      	ldr	r3, [r7, #28]
 80071cc:	3301      	adds	r3, #1
 80071ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	3301      	adds	r3, #1
 80071d4:	61bb      	str	r3, [r7, #24]
 80071d6:	69ba      	ldr	r2, [r7, #24]
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d3e2      	bcc.n	80071a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3724      	adds	r7, #36	@ 0x24
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b08b      	sub	sp, #44	@ 0x2c
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	4613      	mov	r3, r2
 80071f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007202:	88fb      	ldrh	r3, [r7, #6]
 8007204:	089b      	lsrs	r3, r3, #2
 8007206:	b29b      	uxth	r3, r3
 8007208:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800720a:	88fb      	ldrh	r3, [r7, #6]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007212:	2300      	movs	r3, #0
 8007214:	623b      	str	r3, [r7, #32]
 8007216:	e014      	b.n	8007242 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007218:	69bb      	ldr	r3, [r7, #24]
 800721a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	601a      	str	r2, [r3, #0]
    pDest++;
 8007224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007226:	3301      	adds	r3, #1
 8007228:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800722a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722c:	3301      	adds	r3, #1
 800722e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	3301      	adds	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007238:	3301      	adds	r3, #1
 800723a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	3301      	adds	r3, #1
 8007240:	623b      	str	r3, [r7, #32]
 8007242:	6a3a      	ldr	r2, [r7, #32]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	429a      	cmp	r2, r3
 8007248:	d3e6      	bcc.n	8007218 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800724a:	8bfb      	ldrh	r3, [r7, #30]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d01e      	beq.n	800728e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007250:	2300      	movs	r3, #0
 8007252:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007254:	69bb      	ldr	r3, [r7, #24]
 8007256:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800725a:	461a      	mov	r2, r3
 800725c:	f107 0310 	add.w	r3, r7, #16
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007264:	693a      	ldr	r2, [r7, #16]
 8007266:	6a3b      	ldr	r3, [r7, #32]
 8007268:	b2db      	uxtb	r3, r3
 800726a:	00db      	lsls	r3, r3, #3
 800726c:	fa22 f303 	lsr.w	r3, r2, r3
 8007270:	b2da      	uxtb	r2, r3
 8007272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007274:	701a      	strb	r2, [r3, #0]
      i++;
 8007276:	6a3b      	ldr	r3, [r7, #32]
 8007278:	3301      	adds	r3, #1
 800727a:	623b      	str	r3, [r7, #32]
      pDest++;
 800727c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800727e:	3301      	adds	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8007282:	8bfb      	ldrh	r3, [r7, #30]
 8007284:	3b01      	subs	r3, #1
 8007286:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007288:	8bfb      	ldrh	r3, [r7, #30]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1ea      	bne.n	8007264 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007290:	4618      	mov	r0, r3
 8007292:	372c      	adds	r7, #44	@ 0x2c
 8007294:	46bd      	mov	sp, r7
 8007296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729a:	4770      	bx	lr

0800729c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800729c:	b480      	push	{r7}
 800729e:	b085      	sub	sp, #20
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	695b      	ldr	r3, [r3, #20]
 80072a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4013      	ands	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80072b4:	68fb      	ldr	r3, [r7, #12]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3714      	adds	r7, #20
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	460b      	mov	r3, r1
 80072cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80072d2:	78fb      	ldrb	r3, [r7, #3]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80072e2:	78fb      	ldrb	r3, [r7, #3]
 80072e4:	015a      	lsls	r2, r3, #5
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	4413      	add	r3, r2
 80072ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80072ee:	68db      	ldr	r3, [r3, #12]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80072f6:	68bb      	ldr	r3, [r7, #8]
}
 80072f8:	4618      	mov	r0, r3
 80072fa:	3714      	adds	r7, #20
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	695b      	ldr	r3, [r3, #20]
 8007310:	f003 0301 	and.w	r3, r3, #1
}
 8007314:	4618      	mov	r0, r3
 8007316:	370c      	adds	r7, #12
 8007318:	46bd      	mov	sp, r7
 800731a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731e:	4770      	bx	lr

08007320 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007320:	b480      	push	{r7}
 8007322:	b085      	sub	sp, #20
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007328:	2300      	movs	r3, #0
 800732a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	3301      	adds	r3, #1
 8007330:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007338:	d901      	bls.n	800733e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800733a:	2303      	movs	r3, #3
 800733c:	e01b      	b.n	8007376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	2b00      	cmp	r3, #0
 8007344:	daf2      	bge.n	800732c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007346:	2300      	movs	r3, #0
 8007348:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	f043 0201 	orr.w	r2, r3, #1
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	3301      	adds	r3, #1
 800735a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007362:	d901      	bls.n	8007368 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007364:	2303      	movs	r3, #3
 8007366:	e006      	b.n	8007376 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	691b      	ldr	r3, [r3, #16]
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b01      	cmp	r3, #1
 8007372:	d0f0      	beq.n	8007356 <USB_CoreReset+0x36>

  return HAL_OK;
 8007374:	2300      	movs	r3, #0
}
 8007376:	4618      	mov	r0, r3
 8007378:	3714      	adds	r7, #20
 800737a:	46bd      	mov	sp, r7
 800737c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007380:	4770      	bx	lr
	...

08007384 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007384:	b084      	sub	sp, #16
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007392:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007396:	2300      	movs	r3, #0
 8007398:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80073a4:	461a      	mov	r2, r3
 80073a6:	2300      	movs	r3, #0
 80073a8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ae:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ba:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68db      	ldr	r3, [r3, #12]
 80073d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d119      	bne.n	800740e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80073da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d10a      	bne.n	80073f8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	68fa      	ldr	r2, [r7, #12]
 80073ec:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80073f0:	f043 0304 	orr.w	r3, r3, #4
 80073f4:	6013      	str	r3, [r2, #0]
 80073f6:	e014      	b.n	8007422 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007406:	f023 0304 	bic.w	r3, r3, #4
 800740a:	6013      	str	r3, [r2, #0]
 800740c:	e009      	b.n	8007422 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800741c:	f023 0304 	bic.w	r3, r3, #4
 8007420:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007422:	2110      	movs	r1, #16
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f7ff fe43 	bl	80070b0 <USB_FlushTxFifo>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d001      	beq.n	8007434 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007434:	6878      	ldr	r0, [r7, #4]
 8007436:	f7ff fe6d 	bl	8007114 <USB_FlushRxFifo>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007444:	2300      	movs	r3, #0
 8007446:	613b      	str	r3, [r7, #16]
 8007448:	e015      	b.n	8007476 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007456:	461a      	mov	r2, r3
 8007458:	f04f 33ff 	mov.w	r3, #4294967295
 800745c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	015a      	lsls	r2, r3, #5
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	4413      	add	r3, r2
 8007466:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800746a:	461a      	mov	r2, r3
 800746c:	2300      	movs	r3, #0
 800746e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	3301      	adds	r3, #1
 8007474:	613b      	str	r3, [r7, #16]
 8007476:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800747a:	461a      	mov	r2, r3
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	4293      	cmp	r3, r2
 8007480:	d3e3      	bcc.n	800744a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2200      	movs	r2, #0
 8007486:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	f04f 32ff 	mov.w	r2, #4294967295
 800748e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	4a18      	ldr	r2, [pc, #96]	@ (80074f4 <USB_HostInit+0x170>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d10b      	bne.n	80074b0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800749e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	4a15      	ldr	r2, [pc, #84]	@ (80074f8 <USB_HostInit+0x174>)
 80074a4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	4a14      	ldr	r2, [pc, #80]	@ (80074fc <USB_HostInit+0x178>)
 80074aa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80074ae:	e009      	b.n	80074c4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2280      	movs	r2, #128	@ 0x80
 80074b4:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	4a11      	ldr	r2, [pc, #68]	@ (8007500 <USB_HostInit+0x17c>)
 80074ba:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a11      	ldr	r2, [pc, #68]	@ (8007504 <USB_HostInit+0x180>)
 80074c0:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80074c4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	f043 0210 	orr.w	r2, r3, #16
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	699a      	ldr	r2, [r3, #24]
 80074dc:	4b0a      	ldr	r3, [pc, #40]	@ (8007508 <USB_HostInit+0x184>)
 80074de:	4313      	orrs	r3, r2
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80074e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80074f0:	b004      	add	sp, #16
 80074f2:	4770      	bx	lr
 80074f4:	40040000 	.word	0x40040000
 80074f8:	01000200 	.word	0x01000200
 80074fc:	00e00300 	.word	0x00e00300
 8007500:	00600080 	.word	0x00600080
 8007504:	004000e0 	.word	0x004000e0
 8007508:	a3200008 	.word	0xa3200008

0800750c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800752a:	f023 0303 	bic.w	r3, r3, #3
 800752e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	78fb      	ldrb	r3, [r7, #3]
 800753a:	f003 0303 	and.w	r3, r3, #3
 800753e:	68f9      	ldr	r1, [r7, #12]
 8007540:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007544:	4313      	orrs	r3, r2
 8007546:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007548:	78fb      	ldrb	r3, [r7, #3]
 800754a:	2b01      	cmp	r3, #1
 800754c:	d107      	bne.n	800755e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007554:	461a      	mov	r2, r3
 8007556:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800755a:	6053      	str	r3, [r2, #4]
 800755c:	e00c      	b.n	8007578 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800755e:	78fb      	ldrb	r3, [r7, #3]
 8007560:	2b02      	cmp	r3, #2
 8007562:	d107      	bne.n	8007574 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800756a:	461a      	mov	r2, r3
 800756c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007570:	6053      	str	r3, [r2, #4]
 8007572:	e001      	b.n	8007578 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e000      	b.n	800757a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007592:	2300      	movs	r3, #0
 8007594:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075a6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80075b6:	2064      	movs	r0, #100	@ 0x64
 80075b8:	f7fa ffb6 	bl	8002528 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	68fa      	ldr	r2, [r7, #12]
 80075c0:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80075c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075c8:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80075ca:	200a      	movs	r0, #10
 80075cc:	f7fa ffac 	bl	8002528 <HAL_Delay>

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80075da:	b480      	push	{r7}
 80075dc:	b085      	sub	sp, #20
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80075fe:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007606:	2b00      	cmp	r3, #0
 8007608:	d109      	bne.n	800761e <USB_DriveVbus+0x44>
 800760a:	78fb      	ldrb	r3, [r7, #3]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d106      	bne.n	800761e <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	68fa      	ldr	r2, [r7, #12]
 8007614:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800761c:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007624:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007628:	d109      	bne.n	800763e <USB_DriveVbus+0x64>
 800762a:	78fb      	ldrb	r3, [r7, #3]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	68fa      	ldr	r2, [r7, #12]
 8007634:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007638:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800763c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800763e:	2300      	movs	r3, #0
}
 8007640:	4618      	mov	r0, r3
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007658:	2300      	movs	r3, #0
 800765a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	0c5b      	lsrs	r3, r3, #17
 800766a:	f003 0303 	and.w	r3, r3, #3
}
 800766e:	4618      	mov	r0, r3
 8007670:	3714      	adds	r7, #20
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	b29b      	uxth	r3, r3
}
 8007690:	4618      	mov	r0, r3
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b088      	sub	sp, #32
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
 80076a4:	4608      	mov	r0, r1
 80076a6:	4611      	mov	r1, r2
 80076a8:	461a      	mov	r2, r3
 80076aa:	4603      	mov	r3, r0
 80076ac:	70fb      	strb	r3, [r7, #3]
 80076ae:	460b      	mov	r3, r1
 80076b0:	70bb      	strb	r3, [r7, #2]
 80076b2:	4613      	mov	r3, r2
 80076b4:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80076b6:	2300      	movs	r3, #0
 80076b8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80076be:	78fb      	ldrb	r3, [r7, #3]
 80076c0:	015a      	lsls	r2, r3, #5
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	4413      	add	r3, r2
 80076c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076ca:	461a      	mov	r2, r3
 80076cc:	f04f 33ff 	mov.w	r3, #4294967295
 80076d0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80076d2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d87c      	bhi.n	80077d4 <USB_HC_Init+0x138>
 80076da:	a201      	add	r2, pc, #4	@ (adr r2, 80076e0 <USB_HC_Init+0x44>)
 80076dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	08007797 	.word	0x08007797
 80076e8:	080076f1 	.word	0x080076f1
 80076ec:	08007759 	.word	0x08007759
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80076f0:	78fb      	ldrb	r3, [r7, #3]
 80076f2:	015a      	lsls	r2, r3, #5
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	4413      	add	r3, r2
 80076f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80076fc:	461a      	mov	r2, r3
 80076fe:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007702:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007704:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007708:	2b00      	cmp	r3, #0
 800770a:	da10      	bge.n	800772e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800770c:	78fb      	ldrb	r3, [r7, #3]
 800770e:	015a      	lsls	r2, r3, #5
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	4413      	add	r3, r2
 8007714:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007718:	68db      	ldr	r3, [r3, #12]
 800771a:	78fa      	ldrb	r2, [r7, #3]
 800771c:	0151      	lsls	r1, r2, #5
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	440a      	add	r2, r1
 8007722:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007726:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800772a:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800772c:	e055      	b.n	80077da <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a6f      	ldr	r2, [pc, #444]	@ (80078f0 <USB_HC_Init+0x254>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d151      	bne.n	80077da <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007736:	78fb      	ldrb	r3, [r7, #3]
 8007738:	015a      	lsls	r2, r3, #5
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	4413      	add	r3, r2
 800773e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007742:	68db      	ldr	r3, [r3, #12]
 8007744:	78fa      	ldrb	r2, [r7, #3]
 8007746:	0151      	lsls	r1, r2, #5
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	440a      	add	r2, r1
 800774c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007750:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007754:	60d3      	str	r3, [r2, #12]
      break;
 8007756:	e040      	b.n	80077da <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	015a      	lsls	r2, r3, #5
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	4413      	add	r3, r2
 8007760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007764:	461a      	mov	r2, r3
 8007766:	f240 639d 	movw	r3, #1693	@ 0x69d
 800776a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800776c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007770:	2b00      	cmp	r3, #0
 8007772:	da34      	bge.n	80077de <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007774:	78fb      	ldrb	r3, [r7, #3]
 8007776:	015a      	lsls	r2, r3, #5
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	4413      	add	r3, r2
 800777c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	78fa      	ldrb	r2, [r7, #3]
 8007784:	0151      	lsls	r1, r2, #5
 8007786:	693a      	ldr	r2, [r7, #16]
 8007788:	440a      	add	r2, r1
 800778a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800778e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007792:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007794:	e023      	b.n	80077de <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007796:	78fb      	ldrb	r3, [r7, #3]
 8007798:	015a      	lsls	r2, r3, #5
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	4413      	add	r3, r2
 800779e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a2:	461a      	mov	r2, r3
 80077a4:	f240 2325 	movw	r3, #549	@ 0x225
 80077a8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80077aa:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	da17      	bge.n	80077e2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80077b2:	78fb      	ldrb	r3, [r7, #3]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077be:	68db      	ldr	r3, [r3, #12]
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077cc:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80077d0:	60d3      	str	r3, [r2, #12]
      }
      break;
 80077d2:	e006      	b.n	80077e2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	77fb      	strb	r3, [r7, #31]
      break;
 80077d8:	e004      	b.n	80077e4 <USB_HC_Init+0x148>
      break;
 80077da:	bf00      	nop
 80077dc:	e002      	b.n	80077e4 <USB_HC_Init+0x148>
      break;
 80077de:	bf00      	nop
 80077e0:	e000      	b.n	80077e4 <USB_HC_Init+0x148>
      break;
 80077e2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80077e4:	78fb      	ldrb	r3, [r7, #3]
 80077e6:	015a      	lsls	r2, r3, #5
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	4413      	add	r3, r2
 80077ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f0:	461a      	mov	r2, r3
 80077f2:	2300      	movs	r3, #0
 80077f4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80077f6:	78fb      	ldrb	r3, [r7, #3]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	78fa      	ldrb	r2, [r7, #3]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007810:	f043 0302 	orr.w	r3, r3, #2
 8007814:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800781c:	699a      	ldr	r2, [r3, #24]
 800781e:	78fb      	ldrb	r3, [r7, #3]
 8007820:	f003 030f 	and.w	r3, r3, #15
 8007824:	2101      	movs	r1, #1
 8007826:	fa01 f303 	lsl.w	r3, r1, r3
 800782a:	6939      	ldr	r1, [r7, #16]
 800782c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007830:	4313      	orrs	r3, r2
 8007832:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007840:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007844:	2b00      	cmp	r3, #0
 8007846:	da03      	bge.n	8007850 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007848:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800784c:	61bb      	str	r3, [r7, #24]
 800784e:	e001      	b.n	8007854 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007850:	2300      	movs	r3, #0
 8007852:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f7ff fef9 	bl	800764c <USB_GetHostSpeed>
 800785a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800785c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007860:	2b02      	cmp	r3, #2
 8007862:	d106      	bne.n	8007872 <USB_HC_Init+0x1d6>
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2b02      	cmp	r3, #2
 8007868:	d003      	beq.n	8007872 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800786a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800786e:	617b      	str	r3, [r7, #20]
 8007870:	e001      	b.n	8007876 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007876:	787b      	ldrb	r3, [r7, #1]
 8007878:	059b      	lsls	r3, r3, #22
 800787a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800787e:	78bb      	ldrb	r3, [r7, #2]
 8007880:	02db      	lsls	r3, r3, #11
 8007882:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007886:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007888:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800788c:	049b      	lsls	r3, r3, #18
 800788e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007892:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007894:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007896:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800789a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800789c:	69bb      	ldr	r3, [r7, #24]
 800789e:	431a      	orrs	r2, r3
 80078a0:	697b      	ldr	r3, [r7, #20]
 80078a2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078a4:	78fa      	ldrb	r2, [r7, #3]
 80078a6:	0151      	lsls	r1, r2, #5
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	440a      	add	r2, r1
 80078ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80078b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80078b4:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80078b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078ba:	2b03      	cmp	r3, #3
 80078bc:	d003      	beq.n	80078c6 <USB_HC_Init+0x22a>
 80078be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	d10f      	bne.n	80078e6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80078c6:	78fb      	ldrb	r3, [r7, #3]
 80078c8:	015a      	lsls	r2, r3, #5
 80078ca:	693b      	ldr	r3, [r7, #16]
 80078cc:	4413      	add	r3, r2
 80078ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	78fa      	ldrb	r2, [r7, #3]
 80078d6:	0151      	lsls	r1, r2, #5
 80078d8:	693a      	ldr	r2, [r7, #16]
 80078da:	440a      	add	r2, r1
 80078dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80078e4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80078e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3720      	adds	r7, #32
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	40040000 	.word	0x40040000

080078f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b08c      	sub	sp, #48	@ 0x30
 80078f8:	af02      	add	r7, sp, #8
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	4613      	mov	r3, r2
 8007900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	785b      	ldrb	r3, [r3, #1]
 800790a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800790c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007910:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	4a5d      	ldr	r2, [pc, #372]	@ (8007a8c <USB_HC_StartXfer+0x198>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d12f      	bne.n	800797a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800791a:	79fb      	ldrb	r3, [r7, #7]
 800791c:	2b01      	cmp	r3, #1
 800791e:	d11c      	bne.n	800795a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	7c9b      	ldrb	r3, [r3, #18]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d003      	beq.n	8007930 <USB_HC_StartXfer+0x3c>
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	7c9b      	ldrb	r3, [r3, #18]
 800792c:	2b02      	cmp	r3, #2
 800792e:	d124      	bne.n	800797a <USB_HC_StartXfer+0x86>
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	799b      	ldrb	r3, [r3, #6]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d120      	bne.n	800797a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007938:	69fb      	ldr	r3, [r7, #28]
 800793a:	015a      	lsls	r2, r3, #5
 800793c:	6a3b      	ldr	r3, [r7, #32]
 800793e:	4413      	add	r3, r2
 8007940:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007944:	68db      	ldr	r3, [r3, #12]
 8007946:	69fa      	ldr	r2, [r7, #28]
 8007948:	0151      	lsls	r1, r2, #5
 800794a:	6a3a      	ldr	r2, [r7, #32]
 800794c:	440a      	add	r2, r1
 800794e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007952:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007956:	60d3      	str	r3, [r2, #12]
 8007958:	e00f      	b.n	800797a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	791b      	ldrb	r3, [r3, #4]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d10b      	bne.n	800797a <USB_HC_StartXfer+0x86>
 8007962:	68bb      	ldr	r3, [r7, #8]
 8007964:	795b      	ldrb	r3, [r3, #5]
 8007966:	2b01      	cmp	r3, #1
 8007968:	d107      	bne.n	800797a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	785b      	ldrb	r3, [r3, #1]
 800796e:	4619      	mov	r1, r3
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f000 fb6b 	bl	800804c <USB_DoPing>
        return HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	e232      	b.n	8007de0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	799b      	ldrb	r3, [r3, #6]
 800797e:	2b01      	cmp	r3, #1
 8007980:	d158      	bne.n	8007a34 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007982:	2301      	movs	r3, #1
 8007984:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	78db      	ldrb	r3, [r3, #3]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d007      	beq.n	800799e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800798e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007990:	68ba      	ldr	r2, [r7, #8]
 8007992:	8a92      	ldrh	r2, [r2, #20]
 8007994:	fb03 f202 	mul.w	r2, r3, r2
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	61da      	str	r2, [r3, #28]
 800799c:	e07c      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	7c9b      	ldrb	r3, [r3, #18]
 80079a2:	2b01      	cmp	r3, #1
 80079a4:	d130      	bne.n	8007a08 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	6a1b      	ldr	r3, [r3, #32]
 80079aa:	2bbc      	cmp	r3, #188	@ 0xbc
 80079ac:	d918      	bls.n	80079e0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	8a9b      	ldrh	r3, [r3, #20]
 80079b2:	461a      	mov	r2, r3
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	69da      	ldr	r2, [r3, #28]
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d003      	beq.n	80079d0 <USB_HC_StartXfer+0xdc>
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d103      	bne.n	80079d8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	2202      	movs	r2, #2
 80079d4:	60da      	str	r2, [r3, #12]
 80079d6:	e05f      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	2201      	movs	r2, #1
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	e05b      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6a1a      	ldr	r2, [r3, #32]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	68db      	ldr	r3, [r3, #12]
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	d007      	beq.n	8007a00 <USB_HC_StartXfer+0x10c>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	68db      	ldr	r3, [r3, #12]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d003      	beq.n	8007a00 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2204      	movs	r2, #4
 80079fc:	60da      	str	r2, [r3, #12]
 80079fe:	e04b      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2203      	movs	r2, #3
 8007a04:	60da      	str	r2, [r3, #12]
 8007a06:	e047      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007a08:	79fb      	ldrb	r3, [r7, #7]
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d10d      	bne.n	8007a2a <USB_HC_StartXfer+0x136>
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	6a1b      	ldr	r3, [r3, #32]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	8a92      	ldrh	r2, [r2, #20]
 8007a16:	4293      	cmp	r3, r2
 8007a18:	d907      	bls.n	8007a2a <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a1a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	8a92      	ldrh	r2, [r2, #20]
 8007a20:	fb03 f202 	mul.w	r2, r3, r2
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	61da      	str	r2, [r3, #28]
 8007a28:	e036      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	6a1a      	ldr	r2, [r3, #32]
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	61da      	str	r2, [r3, #28]
 8007a32:	e031      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6a1b      	ldr	r3, [r3, #32]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d018      	beq.n	8007a6e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	8a92      	ldrh	r2, [r2, #20]
 8007a44:	4413      	add	r3, r2
 8007a46:	3b01      	subs	r3, #1
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	8a92      	ldrh	r2, [r2, #20]
 8007a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007a50:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007a52:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007a54:	8b7b      	ldrh	r3, [r7, #26]
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d90b      	bls.n	8007a72 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007a5a:	8b7b      	ldrh	r3, [r7, #26]
 8007a5c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a5e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a60:	68ba      	ldr	r2, [r7, #8]
 8007a62:	8a92      	ldrh	r2, [r2, #20]
 8007a64:	fb03 f202 	mul.w	r2, r3, r2
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	61da      	str	r2, [r3, #28]
 8007a6c:	e001      	b.n	8007a72 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	78db      	ldrb	r3, [r3, #3]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	8a92      	ldrh	r2, [r2, #20]
 8007a80:	fb03 f202 	mul.w	r2, r3, r2
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	61da      	str	r2, [r3, #28]
 8007a88:	e006      	b.n	8007a98 <USB_HC_StartXfer+0x1a4>
 8007a8a:	bf00      	nop
 8007a8c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	6a1a      	ldr	r2, [r3, #32]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	69db      	ldr	r3, [r3, #28]
 8007a9c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007aa0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007aa2:	04d9      	lsls	r1, r3, #19
 8007aa4:	4ba3      	ldr	r3, [pc, #652]	@ (8007d34 <USB_HC_StartXfer+0x440>)
 8007aa6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007aa8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	7d9b      	ldrb	r3, [r3, #22]
 8007aae:	075b      	lsls	r3, r3, #29
 8007ab0:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ab4:	69f9      	ldr	r1, [r7, #28]
 8007ab6:	0148      	lsls	r0, r1, #5
 8007ab8:	6a39      	ldr	r1, [r7, #32]
 8007aba:	4401      	add	r1, r0
 8007abc:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007ac0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ac2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007ac4:	79fb      	ldrb	r3, [r7, #7]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d009      	beq.n	8007ade <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	6999      	ldr	r1, [r3, #24]
 8007ace:	69fb      	ldr	r3, [r7, #28]
 8007ad0:	015a      	lsls	r2, r3, #5
 8007ad2:	6a3b      	ldr	r3, [r7, #32]
 8007ad4:	4413      	add	r3, r2
 8007ad6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ada:	460a      	mov	r2, r1
 8007adc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	bf0c      	ite	eq
 8007aee:	2301      	moveq	r3, #1
 8007af0:	2300      	movne	r3, #0
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007af6:	69fb      	ldr	r3, [r7, #28]
 8007af8:	015a      	lsls	r2, r3, #5
 8007afa:	6a3b      	ldr	r3, [r7, #32]
 8007afc:	4413      	add	r3, r2
 8007afe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	69fa      	ldr	r2, [r7, #28]
 8007b06:	0151      	lsls	r1, r2, #5
 8007b08:	6a3a      	ldr	r2, [r7, #32]
 8007b0a:	440a      	add	r2, r1
 8007b0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b10:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007b14:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007b16:	69fb      	ldr	r3, [r7, #28]
 8007b18:	015a      	lsls	r2, r3, #5
 8007b1a:	6a3b      	ldr	r3, [r7, #32]
 8007b1c:	4413      	add	r3, r2
 8007b1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	7e7b      	ldrb	r3, [r7, #25]
 8007b26:	075b      	lsls	r3, r3, #29
 8007b28:	69f9      	ldr	r1, [r7, #28]
 8007b2a:	0148      	lsls	r0, r1, #5
 8007b2c:	6a39      	ldr	r1, [r7, #32]
 8007b2e:	4401      	add	r1, r0
 8007b30:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007b34:	4313      	orrs	r3, r2
 8007b36:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007b38:	68bb      	ldr	r3, [r7, #8]
 8007b3a:	799b      	ldrb	r3, [r3, #6]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	f040 80c3 	bne.w	8007cc8 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b42:	68bb      	ldr	r3, [r7, #8]
 8007b44:	7c5b      	ldrb	r3, [r3, #17]
 8007b46:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b48:	68ba      	ldr	r2, [r7, #8]
 8007b4a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	0151      	lsls	r1, r2, #5
 8007b52:	6a3a      	ldr	r2, [r7, #32]
 8007b54:	440a      	add	r2, r1
 8007b56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007b5a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007b5e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	6a3b      	ldr	r3, [r7, #32]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b6c:	68db      	ldr	r3, [r3, #12]
 8007b6e:	69fa      	ldr	r2, [r7, #28]
 8007b70:	0151      	lsls	r1, r2, #5
 8007b72:	6a3a      	ldr	r2, [r7, #32]
 8007b74:	440a      	add	r2, r1
 8007b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b7a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007b7e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	79db      	ldrb	r3, [r3, #7]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d123      	bne.n	8007bd0 <USB_HC_StartXfer+0x2dc>
 8007b88:	68bb      	ldr	r3, [r7, #8]
 8007b8a:	78db      	ldrb	r3, [r3, #3]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d11f      	bne.n	8007bd0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007b90:	69fb      	ldr	r3, [r7, #28]
 8007b92:	015a      	lsls	r2, r3, #5
 8007b94:	6a3b      	ldr	r3, [r7, #32]
 8007b96:	4413      	add	r3, r2
 8007b98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b9c:	685b      	ldr	r3, [r3, #4]
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	0151      	lsls	r1, r2, #5
 8007ba2:	6a3a      	ldr	r2, [r7, #32]
 8007ba4:	440a      	add	r2, r1
 8007ba6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007baa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bae:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	015a      	lsls	r2, r3, #5
 8007bb4:	6a3b      	ldr	r3, [r7, #32]
 8007bb6:	4413      	add	r3, r2
 8007bb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bbc:	68db      	ldr	r3, [r3, #12]
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	0151      	lsls	r1, r2, #5
 8007bc2:	6a3a      	ldr	r2, [r7, #32]
 8007bc4:	440a      	add	r2, r1
 8007bc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bce:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	7c9b      	ldrb	r3, [r3, #18]
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d003      	beq.n	8007be0 <USB_HC_StartXfer+0x2ec>
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	7c9b      	ldrb	r3, [r3, #18]
 8007bdc:	2b03      	cmp	r3, #3
 8007bde:	d117      	bne.n	8007c10 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007be4:	2b01      	cmp	r3, #1
 8007be6:	d113      	bne.n	8007c10 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	78db      	ldrb	r3, [r3, #3]
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d10f      	bne.n	8007c10 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007bf0:	69fb      	ldr	r3, [r7, #28]
 8007bf2:	015a      	lsls	r2, r3, #5
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	4413      	add	r3, r2
 8007bf8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bfc:	685b      	ldr	r3, [r3, #4]
 8007bfe:	69fa      	ldr	r2, [r7, #28]
 8007c00:	0151      	lsls	r1, r2, #5
 8007c02:	6a3a      	ldr	r2, [r7, #32]
 8007c04:	440a      	add	r2, r1
 8007c06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c0e:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	7c9b      	ldrb	r3, [r3, #18]
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d162      	bne.n	8007cde <USB_HC_StartXfer+0x3ea>
 8007c18:	68bb      	ldr	r3, [r7, #8]
 8007c1a:	78db      	ldrb	r3, [r3, #3]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d15e      	bne.n	8007cde <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	68db      	ldr	r3, [r3, #12]
 8007c24:	3b01      	subs	r3, #1
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d858      	bhi.n	8007cdc <USB_HC_StartXfer+0x3e8>
 8007c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007c30 <USB_HC_StartXfer+0x33c>)
 8007c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c30:	08007c41 	.word	0x08007c41
 8007c34:	08007c63 	.word	0x08007c63
 8007c38:	08007c85 	.word	0x08007c85
 8007c3c:	08007ca7 	.word	0x08007ca7
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007c40:	69fb      	ldr	r3, [r7, #28]
 8007c42:	015a      	lsls	r2, r3, #5
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	4413      	add	r3, r2
 8007c48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	69fa      	ldr	r2, [r7, #28]
 8007c50:	0151      	lsls	r1, r2, #5
 8007c52:	6a3a      	ldr	r2, [r7, #32]
 8007c54:	440a      	add	r2, r1
 8007c56:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007c5e:	6053      	str	r3, [r2, #4]
          break;
 8007c60:	e03d      	b.n	8007cde <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007c62:	69fb      	ldr	r3, [r7, #28]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	6a3b      	ldr	r3, [r7, #32]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	0151      	lsls	r1, r2, #5
 8007c74:	6a3a      	ldr	r2, [r7, #32]
 8007c76:	440a      	add	r2, r1
 8007c78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c7c:	f043 030e 	orr.w	r3, r3, #14
 8007c80:	6053      	str	r3, [r2, #4]
          break;
 8007c82:	e02c      	b.n	8007cde <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007c84:	69fb      	ldr	r3, [r7, #28]
 8007c86:	015a      	lsls	r2, r3, #5
 8007c88:	6a3b      	ldr	r3, [r7, #32]
 8007c8a:	4413      	add	r3, r2
 8007c8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c90:	685b      	ldr	r3, [r3, #4]
 8007c92:	69fa      	ldr	r2, [r7, #28]
 8007c94:	0151      	lsls	r1, r2, #5
 8007c96:	6a3a      	ldr	r2, [r7, #32]
 8007c98:	440a      	add	r2, r1
 8007c9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007ca2:	6053      	str	r3, [r2, #4]
          break;
 8007ca4:	e01b      	b.n	8007cde <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	6a3b      	ldr	r3, [r7, #32]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	69fa      	ldr	r2, [r7, #28]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	6a3a      	ldr	r2, [r7, #32]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cc0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007cc4:	6053      	str	r3, [r2, #4]
          break;
 8007cc6:	e00a      	b.n	8007cde <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	6a3b      	ldr	r3, [r7, #32]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	6053      	str	r3, [r2, #4]
 8007cda:	e000      	b.n	8007cde <USB_HC_StartXfer+0x3ea>
          break;
 8007cdc:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007cde:	69fb      	ldr	r3, [r7, #28]
 8007ce0:	015a      	lsls	r2, r3, #5
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cee:	693b      	ldr	r3, [r7, #16]
 8007cf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007cf4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	78db      	ldrb	r3, [r3, #3]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d004      	beq.n	8007d08 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d04:	613b      	str	r3, [r7, #16]
 8007d06:	e003      	b.n	8007d10 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d0e:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d16:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007d18:	69fb      	ldr	r3, [r7, #28]
 8007d1a:	015a      	lsls	r2, r3, #5
 8007d1c:	6a3b      	ldr	r3, [r7, #32]
 8007d1e:	4413      	add	r3, r2
 8007d20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d24:	461a      	mov	r2, r3
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007d2a:	79fb      	ldrb	r3, [r7, #7]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d003      	beq.n	8007d38 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e055      	b.n	8007de0 <USB_HC_StartXfer+0x4ec>
 8007d34:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007d38:	68bb      	ldr	r3, [r7, #8]
 8007d3a:	78db      	ldrb	r3, [r3, #3]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d14e      	bne.n	8007dde <USB_HC_StartXfer+0x4ea>
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6a1b      	ldr	r3, [r3, #32]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d04a      	beq.n	8007dde <USB_HC_StartXfer+0x4ea>
 8007d48:	68bb      	ldr	r3, [r7, #8]
 8007d4a:	79db      	ldrb	r3, [r3, #7]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d146      	bne.n	8007dde <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	7c9b      	ldrb	r3, [r3, #18]
 8007d54:	2b03      	cmp	r3, #3
 8007d56:	d831      	bhi.n	8007dbc <USB_HC_StartXfer+0x4c8>
 8007d58:	a201      	add	r2, pc, #4	@ (adr r2, 8007d60 <USB_HC_StartXfer+0x46c>)
 8007d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d5e:	bf00      	nop
 8007d60:	08007d71 	.word	0x08007d71
 8007d64:	08007d95 	.word	0x08007d95
 8007d68:	08007d71 	.word	0x08007d71
 8007d6c:	08007d95 	.word	0x08007d95
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6a1b      	ldr	r3, [r3, #32]
 8007d74:	3303      	adds	r3, #3
 8007d76:	089b      	lsrs	r3, r3, #2
 8007d78:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007d7a:	8afa      	ldrh	r2, [r7, #22]
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d91c      	bls.n	8007dc0 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	f043 0220 	orr.w	r2, r3, #32
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	619a      	str	r2, [r3, #24]
        }
        break;
 8007d92:	e015      	b.n	8007dc0 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	6a1b      	ldr	r3, [r3, #32]
 8007d98:	3303      	adds	r3, #3
 8007d9a:	089b      	lsrs	r3, r3, #2
 8007d9c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007d9e:	8afa      	ldrh	r2, [r7, #22]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	b29b      	uxth	r3, r3
 8007daa:	429a      	cmp	r2, r3
 8007dac:	d90a      	bls.n	8007dc4 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	699b      	ldr	r3, [r3, #24]
 8007db2:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	619a      	str	r2, [r3, #24]
        }
        break;
 8007dba:	e003      	b.n	8007dc4 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007dbc:	bf00      	nop
 8007dbe:	e002      	b.n	8007dc6 <USB_HC_StartXfer+0x4d2>
        break;
 8007dc0:	bf00      	nop
 8007dc2:	e000      	b.n	8007dc6 <USB_HC_StartXfer+0x4d2>
        break;
 8007dc4:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007dc6:	68bb      	ldr	r3, [r7, #8]
 8007dc8:	6999      	ldr	r1, [r3, #24]
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	785a      	ldrb	r2, [r3, #1]
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	6a1b      	ldr	r3, [r3, #32]
 8007dd2:	b29b      	uxth	r3, r3
 8007dd4:	2000      	movs	r0, #0
 8007dd6:	9000      	str	r0, [sp, #0]
 8007dd8:	68f8      	ldr	r0, [r7, #12]
 8007dda:	f7ff f9c9 	bl	8007170 <USB_WritePacket>
  }

  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3728      	adds	r7, #40	@ 0x28
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}

08007de8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b085      	sub	sp, #20
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dfa:	695b      	ldr	r3, [r3, #20]
 8007dfc:	b29b      	uxth	r3, r3
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007e0a:	b480      	push	{r7}
 8007e0c:	b089      	sub	sp, #36	@ 0x24
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007e22:	69bb      	ldr	r3, [r7, #24]
 8007e24:	015a      	lsls	r2, r3, #5
 8007e26:	69fb      	ldr	r3, [r7, #28]
 8007e28:	4413      	add	r3, r2
 8007e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	0c9b      	lsrs	r3, r3, #18
 8007e32:	f003 0303 	and.w	r3, r3, #3
 8007e36:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	015a      	lsls	r2, r3, #5
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	4413      	add	r3, r2
 8007e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	0fdb      	lsrs	r3, r3, #31
 8007e48:	f003 0301 	and.w	r3, r3, #1
 8007e4c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007e4e:	69bb      	ldr	r3, [r7, #24]
 8007e50:	015a      	lsls	r2, r3, #5
 8007e52:	69fb      	ldr	r3, [r7, #28]
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	0fdb      	lsrs	r3, r3, #31
 8007e5e:	f003 0301 	and.w	r3, r3, #1
 8007e62:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	689b      	ldr	r3, [r3, #8]
 8007e68:	f003 0320 	and.w	r3, r3, #32
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d10d      	bne.n	8007e8c <USB_HC_Halt+0x82>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d10a      	bne.n	8007e8c <USB_HC_Halt+0x82>
 8007e76:	693b      	ldr	r3, [r7, #16]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d005      	beq.n	8007e88 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d002      	beq.n	8007e88 <USB_HC_Halt+0x7e>
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	2b03      	cmp	r3, #3
 8007e86:	d101      	bne.n	8007e8c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007e88:	2300      	movs	r3, #0
 8007e8a:	e0d8      	b.n	800803e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d002      	beq.n	8007e98 <USB_HC_Halt+0x8e>
 8007e92:	697b      	ldr	r3, [r7, #20]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d173      	bne.n	8007f80 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007e98:	69bb      	ldr	r3, [r7, #24]
 8007e9a:	015a      	lsls	r2, r3, #5
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	4413      	add	r3, r2
 8007ea0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	69ba      	ldr	r2, [r7, #24]
 8007ea8:	0151      	lsls	r1, r2, #5
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	440a      	add	r2, r1
 8007eae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007eb6:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	f003 0320 	and.w	r3, r3, #32
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d14a      	bne.n	8007f5a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ec8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d133      	bne.n	8007f38 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	015a      	lsls	r2, r3, #5
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	4413      	add	r3, r2
 8007ed8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69ba      	ldr	r2, [r7, #24]
 8007ee0:	0151      	lsls	r1, r2, #5
 8007ee2:	69fa      	ldr	r2, [r7, #28]
 8007ee4:	440a      	add	r2, r1
 8007ee6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007eea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007eee:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	015a      	lsls	r2, r3, #5
 8007ef4:	69fb      	ldr	r3, [r7, #28]
 8007ef6:	4413      	add	r3, r2
 8007ef8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	69ba      	ldr	r2, [r7, #24]
 8007f00:	0151      	lsls	r1, r2, #5
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	440a      	add	r2, r1
 8007f06:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f0a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f0e:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	3301      	adds	r3, #1
 8007f14:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007f1c:	d82e      	bhi.n	8007f7c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007f30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f34:	d0ec      	beq.n	8007f10 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f36:	e081      	b.n	800803c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f38:	69bb      	ldr	r3, [r7, #24]
 8007f3a:	015a      	lsls	r2, r3, #5
 8007f3c:	69fb      	ldr	r3, [r7, #28]
 8007f3e:	4413      	add	r3, r2
 8007f40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69ba      	ldr	r2, [r7, #24]
 8007f48:	0151      	lsls	r1, r2, #5
 8007f4a:	69fa      	ldr	r2, [r7, #28]
 8007f4c:	440a      	add	r2, r1
 8007f4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f56:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f58:	e070      	b.n	800803c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007f5a:	69bb      	ldr	r3, [r7, #24]
 8007f5c:	015a      	lsls	r2, r3, #5
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	4413      	add	r3, r2
 8007f62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	0151      	lsls	r1, r2, #5
 8007f6c:	69fa      	ldr	r2, [r7, #28]
 8007f6e:	440a      	add	r2, r1
 8007f70:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f74:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007f78:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f7a:	e05f      	b.n	800803c <USB_HC_Halt+0x232>
            break;
 8007f7c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f7e:	e05d      	b.n	800803c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f80:	69bb      	ldr	r3, [r7, #24]
 8007f82:	015a      	lsls	r2, r3, #5
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	4413      	add	r3, r2
 8007f88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	69ba      	ldr	r2, [r7, #24]
 8007f90:	0151      	lsls	r1, r2, #5
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	440a      	add	r2, r1
 8007f96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f9a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f9e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007fa0:	69fb      	ldr	r3, [r7, #28]
 8007fa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007fa6:	691b      	ldr	r3, [r3, #16]
 8007fa8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d133      	bne.n	8008018 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	015a      	lsls	r2, r3, #5
 8007fb4:	69fb      	ldr	r3, [r7, #28]
 8007fb6:	4413      	add	r3, r2
 8007fb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	69ba      	ldr	r2, [r7, #24]
 8007fc0:	0151      	lsls	r1, r2, #5
 8007fc2:	69fa      	ldr	r2, [r7, #28]
 8007fc4:	440a      	add	r2, r1
 8007fc6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fca:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fce:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fd0:	69bb      	ldr	r3, [r7, #24]
 8007fd2:	015a      	lsls	r2, r3, #5
 8007fd4:	69fb      	ldr	r3, [r7, #28]
 8007fd6:	4413      	add	r3, r2
 8007fd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69ba      	ldr	r2, [r7, #24]
 8007fe0:	0151      	lsls	r1, r2, #5
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	440a      	add	r2, r1
 8007fe6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fee:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007ffc:	d81d      	bhi.n	800803a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	015a      	lsls	r2, r3, #5
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	4413      	add	r3, r2
 8008006:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008010:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008014:	d0ec      	beq.n	8007ff0 <USB_HC_Halt+0x1e6>
 8008016:	e011      	b.n	800803c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008018:	69bb      	ldr	r3, [r7, #24]
 800801a:	015a      	lsls	r2, r3, #5
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	4413      	add	r3, r2
 8008020:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	69ba      	ldr	r2, [r7, #24]
 8008028:	0151      	lsls	r1, r2, #5
 800802a:	69fa      	ldr	r2, [r7, #28]
 800802c:	440a      	add	r2, r1
 800802e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008032:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008036:	6013      	str	r3, [r2, #0]
 8008038:	e000      	b.n	800803c <USB_HC_Halt+0x232>
          break;
 800803a:	bf00      	nop
    }
  }

  return HAL_OK;
 800803c:	2300      	movs	r3, #0
}
 800803e:	4618      	mov	r0, r3
 8008040:	3724      	adds	r7, #36	@ 0x24
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
	...

0800804c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800804c:	b480      	push	{r7}
 800804e:	b087      	sub	sp, #28
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800805c:	78fb      	ldrb	r3, [r7, #3]
 800805e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008060:	2301      	movs	r3, #1
 8008062:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	04da      	lsls	r2, r3, #19
 8008068:	4b15      	ldr	r3, [pc, #84]	@ (80080c0 <USB_DoPing+0x74>)
 800806a:	4013      	ands	r3, r2
 800806c:	693a      	ldr	r2, [r7, #16]
 800806e:	0151      	lsls	r1, r2, #5
 8008070:	697a      	ldr	r2, [r7, #20]
 8008072:	440a      	add	r2, r1
 8008074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008078:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800807c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	015a      	lsls	r2, r3, #5
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	4413      	add	r3, r2
 8008086:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008094:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008096:	68bb      	ldr	r3, [r7, #8]
 8008098:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800809c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080aa:	461a      	mov	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	371c      	adds	r7, #28
 80080b6:	46bd      	mov	sp, r7
 80080b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080bc:	4770      	bx	lr
 80080be:	bf00      	nop
 80080c0:	1ff80000 	.word	0x1ff80000

080080c4 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f7fe ff8c 	bl	8006ff6 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080de:	2110      	movs	r1, #16
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f7fe ffe5 	bl	80070b0 <USB_FlushTxFifo>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80080ec:	2301      	movs	r3, #1
 80080ee:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff f80f 	bl	8007114 <USB_FlushRxFifo>
 80080f6:	4603      	mov	r3, r0
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d001      	beq.n	8008100 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008100:	2300      	movs	r3, #0
 8008102:	61bb      	str	r3, [r7, #24]
 8008104:	e01f      	b.n	8008146 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008106:	69bb      	ldr	r3, [r7, #24]
 8008108:	015a      	lsls	r2, r3, #5
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	4413      	add	r3, r2
 800810e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008116:	693b      	ldr	r3, [r7, #16]
 8008118:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800811c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008124:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800812c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800812e:	69bb      	ldr	r3, [r7, #24]
 8008130:	015a      	lsls	r2, r3, #5
 8008132:	697b      	ldr	r3, [r7, #20]
 8008134:	4413      	add	r3, r2
 8008136:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800813a:	461a      	mov	r2, r3
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008140:	69bb      	ldr	r3, [r7, #24]
 8008142:	3301      	adds	r3, #1
 8008144:	61bb      	str	r3, [r7, #24]
 8008146:	69bb      	ldr	r3, [r7, #24]
 8008148:	2b0f      	cmp	r3, #15
 800814a:	d9dc      	bls.n	8008106 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800814c:	2300      	movs	r3, #0
 800814e:	61bb      	str	r3, [r7, #24]
 8008150:	e034      	b.n	80081bc <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008152:	69bb      	ldr	r3, [r7, #24]
 8008154:	015a      	lsls	r2, r3, #5
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	4413      	add	r3, r2
 800815a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008162:	693b      	ldr	r3, [r7, #16]
 8008164:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008168:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008170:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008172:	693b      	ldr	r3, [r7, #16]
 8008174:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008178:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800817a:	69bb      	ldr	r3, [r7, #24]
 800817c:	015a      	lsls	r2, r3, #5
 800817e:	697b      	ldr	r3, [r7, #20]
 8008180:	4413      	add	r3, r2
 8008182:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008186:	461a      	mov	r2, r3
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	3301      	adds	r3, #1
 8008190:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008198:	d80c      	bhi.n	80081b4 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800819a:	69bb      	ldr	r3, [r7, #24]
 800819c:	015a      	lsls	r2, r3, #5
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	4413      	add	r3, r2
 80081a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081b0:	d0ec      	beq.n	800818c <USB_StopHost+0xc8>
 80081b2:	e000      	b.n	80081b6 <USB_StopHost+0xf2>
        break;
 80081b4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	3301      	adds	r3, #1
 80081ba:	61bb      	str	r3, [r7, #24]
 80081bc:	69bb      	ldr	r3, [r7, #24]
 80081be:	2b0f      	cmp	r3, #15
 80081c0:	d9c7      	bls.n	8008152 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081c8:	461a      	mov	r2, r3
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295
 80081ce:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f04f 32ff 	mov.w	r2, #4294967295
 80081d6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7fe fefb 	bl	8006fd4 <USB_EnableGlobalInt>

  return ret;
 80081de:	7ffb      	ldrb	r3, [r7, #31]
}
 80081e0:	4618      	mov	r0, r3
 80081e2:	3720      	adds	r7, #32
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}

080081e8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80081e8:	b590      	push	{r4, r7, lr}
 80081ea:	b089      	sub	sp, #36	@ 0x24
 80081ec:	af04      	add	r7, sp, #16
 80081ee:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80081f0:	2301      	movs	r3, #1
 80081f2:	2202      	movs	r2, #2
 80081f4:	2102      	movs	r1, #2
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fc85 	bl	8008b06 <USBH_FindInterface>
 80081fc:	4603      	mov	r3, r0
 80081fe:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008200:	7bfb      	ldrb	r3, [r7, #15]
 8008202:	2bff      	cmp	r3, #255	@ 0xff
 8008204:	d002      	beq.n	800820c <USBH_CDC_InterfaceInit+0x24>
 8008206:	7bfb      	ldrb	r3, [r7, #15]
 8008208:	2b01      	cmp	r3, #1
 800820a:	d901      	bls.n	8008210 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800820c:	2302      	movs	r3, #2
 800820e:	e13d      	b.n	800848c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008210:	7bfb      	ldrb	r3, [r7, #15]
 8008212:	4619      	mov	r1, r3
 8008214:	6878      	ldr	r0, [r7, #4]
 8008216:	f000 fc5a 	bl	8008ace <USBH_SelectInterface>
 800821a:	4603      	mov	r3, r0
 800821c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800821e:	7bbb      	ldrb	r3, [r7, #14]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008224:	2302      	movs	r3, #2
 8008226:	e131      	b.n	800848c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800822e:	2050      	movs	r0, #80	@ 0x50
 8008230:	f002 fb64 	bl	800a8fc <malloc>
 8008234:	4603      	mov	r3, r0
 8008236:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800823e:	69db      	ldr	r3, [r3, #28]
 8008240:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d101      	bne.n	800824c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008248:	2302      	movs	r3, #2
 800824a:	e11f      	b.n	800848c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800824c:	2250      	movs	r2, #80	@ 0x50
 800824e:	2100      	movs	r1, #0
 8008250:	68b8      	ldr	r0, [r7, #8]
 8008252:	f002 fe71 	bl	800af38 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008256:	7bfb      	ldrb	r3, [r7, #15]
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	211a      	movs	r1, #26
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008266:	781b      	ldrb	r3, [r3, #0]
 8008268:	b25b      	sxtb	r3, r3
 800826a:	2b00      	cmp	r3, #0
 800826c:	da15      	bge.n	800829a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800826e:	7bfb      	ldrb	r3, [r7, #15]
 8008270:	687a      	ldr	r2, [r7, #4]
 8008272:	211a      	movs	r1, #26
 8008274:	fb01 f303 	mul.w	r3, r1, r3
 8008278:	4413      	add	r3, r2
 800827a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800827e:	781a      	ldrb	r2, [r3, #0]
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008284:	7bfb      	ldrb	r3, [r7, #15]
 8008286:	687a      	ldr	r2, [r7, #4]
 8008288:	211a      	movs	r1, #26
 800828a:	fb01 f303 	mul.w	r3, r1, r3
 800828e:	4413      	add	r3, r2
 8008290:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008294:	881a      	ldrh	r2, [r3, #0]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	785b      	ldrb	r3, [r3, #1]
 800829e:	4619      	mov	r1, r3
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f001 ffbe 	bl	800a222 <USBH_AllocPipe>
 80082a6:	4603      	mov	r3, r0
 80082a8:	461a      	mov	r2, r3
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	7819      	ldrb	r1, [r3, #0]
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	7858      	ldrb	r0, [r3, #1]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	8952      	ldrh	r2, [r2, #10]
 80082c6:	9202      	str	r2, [sp, #8]
 80082c8:	2203      	movs	r2, #3
 80082ca:	9201      	str	r2, [sp, #4]
 80082cc:	9300      	str	r3, [sp, #0]
 80082ce:	4623      	mov	r3, r4
 80082d0:	4602      	mov	r2, r0
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 ff76 	bl	800a1c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2200      	movs	r2, #0
 80082de:	4619      	mov	r1, r3
 80082e0:	6878      	ldr	r0, [r7, #4]
 80082e2:	f002 fa85 	bl	800a7f0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80082e6:	2300      	movs	r3, #0
 80082e8:	2200      	movs	r2, #0
 80082ea:	210a      	movs	r1, #10
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fc0a 	bl	8008b06 <USBH_FindInterface>
 80082f2:	4603      	mov	r3, r0
 80082f4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	2bff      	cmp	r3, #255	@ 0xff
 80082fa:	d002      	beq.n	8008302 <USBH_CDC_InterfaceInit+0x11a>
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d901      	bls.n	8008306 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008302:	2302      	movs	r3, #2
 8008304:	e0c2      	b.n	800848c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008306:	7bfb      	ldrb	r3, [r7, #15]
 8008308:	687a      	ldr	r2, [r7, #4]
 800830a:	211a      	movs	r1, #26
 800830c:	fb01 f303 	mul.w	r3, r1, r3
 8008310:	4413      	add	r3, r2
 8008312:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	b25b      	sxtb	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	da16      	bge.n	800834c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	211a      	movs	r1, #26
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	4413      	add	r3, r2
 800832a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	68bb      	ldr	r3, [r7, #8]
 8008332:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008334:	7bfb      	ldrb	r3, [r7, #15]
 8008336:	687a      	ldr	r2, [r7, #4]
 8008338:	211a      	movs	r1, #26
 800833a:	fb01 f303 	mul.w	r3, r1, r3
 800833e:	4413      	add	r3, r2
 8008340:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008344:	881a      	ldrh	r2, [r3, #0]
 8008346:	68bb      	ldr	r3, [r7, #8]
 8008348:	835a      	strh	r2, [r3, #26]
 800834a:	e015      	b.n	8008378 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	211a      	movs	r1, #26
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800835c:	781a      	ldrb	r2, [r3, #0]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	211a      	movs	r1, #26
 8008368:	fb01 f303 	mul.w	r3, r1, r3
 800836c:	4413      	add	r3, r2
 800836e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008372:	881a      	ldrh	r2, [r3, #0]
 8008374:	68bb      	ldr	r3, [r7, #8]
 8008376:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008378:	7bfb      	ldrb	r3, [r7, #15]
 800837a:	687a      	ldr	r2, [r7, #4]
 800837c:	211a      	movs	r1, #26
 800837e:	fb01 f303 	mul.w	r3, r1, r3
 8008382:	4413      	add	r3, r2
 8008384:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	b25b      	sxtb	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	da16      	bge.n	80083be <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008390:	7bfb      	ldrb	r3, [r7, #15]
 8008392:	687a      	ldr	r2, [r7, #4]
 8008394:	211a      	movs	r1, #26
 8008396:	fb01 f303 	mul.w	r3, r1, r3
 800839a:	4413      	add	r3, r2
 800839c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083a0:	781a      	ldrb	r2, [r3, #0]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083a6:	7bfb      	ldrb	r3, [r7, #15]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	211a      	movs	r1, #26
 80083ac:	fb01 f303 	mul.w	r3, r1, r3
 80083b0:	4413      	add	r3, r2
 80083b2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80083b6:	881a      	ldrh	r2, [r3, #0]
 80083b8:	68bb      	ldr	r3, [r7, #8]
 80083ba:	835a      	strh	r2, [r3, #26]
 80083bc:	e015      	b.n	80083ea <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	211a      	movs	r1, #26
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	4413      	add	r3, r2
 80083ca:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80083ce:	781a      	ldrb	r2, [r3, #0]
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80083d4:	7bfb      	ldrb	r3, [r7, #15]
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	211a      	movs	r1, #26
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	4413      	add	r3, r2
 80083e0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80083e4:	881a      	ldrh	r2, [r3, #0]
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	7b9b      	ldrb	r3, [r3, #14]
 80083ee:	4619      	mov	r1, r3
 80083f0:	6878      	ldr	r0, [r7, #4]
 80083f2:	f001 ff16 	bl	800a222 <USBH_AllocPipe>
 80083f6:	4603      	mov	r3, r0
 80083f8:	461a      	mov	r2, r3
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	7bdb      	ldrb	r3, [r3, #15]
 8008402:	4619      	mov	r1, r3
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 ff0c 	bl	800a222 <USBH_AllocPipe>
 800840a:	4603      	mov	r3, r0
 800840c:	461a      	mov	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	7b59      	ldrb	r1, [r3, #13]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	7b98      	ldrb	r0, [r3, #14]
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	8b12      	ldrh	r2, [r2, #24]
 800842a:	9202      	str	r2, [sp, #8]
 800842c:	2202      	movs	r2, #2
 800842e:	9201      	str	r2, [sp, #4]
 8008430:	9300      	str	r3, [sp, #0]
 8008432:	4623      	mov	r3, r4
 8008434:	4602      	mov	r2, r0
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f001 fec4 	bl	800a1c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	7b19      	ldrb	r1, [r3, #12]
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	7bd8      	ldrb	r0, [r3, #15]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008450:	68ba      	ldr	r2, [r7, #8]
 8008452:	8b52      	ldrh	r2, [r2, #26]
 8008454:	9202      	str	r2, [sp, #8]
 8008456:	2202      	movs	r2, #2
 8008458:	9201      	str	r2, [sp, #4]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	4623      	mov	r3, r4
 800845e:	4602      	mov	r2, r0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f001 feaf 	bl	800a1c4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	2200      	movs	r2, #0
 800846a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	7b5b      	ldrb	r3, [r3, #13]
 8008472:	2200      	movs	r2, #0
 8008474:	4619      	mov	r1, r3
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f002 f9ba 	bl	800a7f0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	7b1b      	ldrb	r3, [r3, #12]
 8008480:	2200      	movs	r2, #0
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f002 f9b3 	bl	800a7f0 <USBH_LL_SetToggle>

  return USBH_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3714      	adds	r7, #20
 8008490:	46bd      	mov	sp, r7
 8008492:	bd90      	pop	{r4, r7, pc}

08008494 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084a2:	69db      	ldr	r3, [r3, #28]
 80084a4:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d00e      	beq.n	80084cc <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	4619      	mov	r1, r3
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fea4 	bl	800a202 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	781b      	ldrb	r3, [r3, #0]
 80084be:	4619      	mov	r1, r3
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	f001 fecf 	bl	800a264 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2200      	movs	r2, #0
 80084ca:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	7b1b      	ldrb	r3, [r3, #12]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00e      	beq.n	80084f2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	7b1b      	ldrb	r3, [r3, #12]
 80084d8:	4619      	mov	r1, r3
 80084da:	6878      	ldr	r0, [r7, #4]
 80084dc:	f001 fe91 	bl	800a202 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	7b1b      	ldrb	r3, [r3, #12]
 80084e4:	4619      	mov	r1, r3
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f001 febc 	bl	800a264 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2200      	movs	r2, #0
 80084f0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	7b5b      	ldrb	r3, [r3, #13]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00e      	beq.n	8008518 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	7b5b      	ldrb	r3, [r3, #13]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 fe7e 	bl	800a202 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	7b5b      	ldrb	r3, [r3, #13]
 800850a:	4619      	mov	r1, r3
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f001 fea9 	bl	800a264 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800851e:	69db      	ldr	r3, [r3, #28]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d00b      	beq.n	800853c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	4618      	mov	r0, r3
 800852e:	f002 f9ed 	bl	800a90c <free>
    phost->pActiveClass->pData = 0U;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008538:	2200      	movs	r2, #0
 800853a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	4618      	mov	r0, r3
 8008540:	3710      	adds	r7, #16
 8008542:	46bd      	mov	sp, r7
 8008544:	bd80      	pop	{r7, pc}

08008546 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008546:	b580      	push	{r7, lr}
 8008548:	b084      	sub	sp, #16
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	3340      	adds	r3, #64	@ 0x40
 800855c:	4619      	mov	r1, r3
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 f8b1 	bl	80086c6 <GetLineCoding>
 8008564:	4603      	mov	r3, r0
 8008566:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008568:	7afb      	ldrb	r3, [r7, #11]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d105      	bne.n	800857a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008574:	2102      	movs	r1, #2
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800857a:	7afb      	ldrb	r3, [r7, #11]
}
 800857c:	4618      	mov	r0, r3
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}

08008584 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800858c:	2301      	movs	r3, #1
 800858e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008590:	2300      	movs	r3, #0
 8008592:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	d877      	bhi.n	8008698 <USBH_CDC_Process+0x114>
 80085a8:	a201      	add	r2, pc, #4	@ (adr r2, 80085b0 <USBH_CDC_Process+0x2c>)
 80085aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085ae:	bf00      	nop
 80085b0:	080085c5 	.word	0x080085c5
 80085b4:	080085cb 	.word	0x080085cb
 80085b8:	080085fb 	.word	0x080085fb
 80085bc:	0800866f 	.word	0x0800866f
 80085c0:	0800867d 	.word	0x0800867d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80085c4:	2300      	movs	r3, #0
 80085c6:	73fb      	strb	r3, [r7, #15]
      break;
 80085c8:	e06d      	b.n	80086a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80085ce:	4619      	mov	r1, r3
 80085d0:	6878      	ldr	r0, [r7, #4]
 80085d2:	f000 f897 	bl	8008704 <SetLineCoding>
 80085d6:	4603      	mov	r3, r0
 80085d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80085da:	7bbb      	ldrb	r3, [r7, #14]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d104      	bne.n	80085ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	2202      	movs	r2, #2
 80085e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80085e8:	e058      	b.n	800869c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80085ea:	7bbb      	ldrb	r3, [r7, #14]
 80085ec:	2b01      	cmp	r3, #1
 80085ee:	d055      	beq.n	800869c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	2204      	movs	r2, #4
 80085f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80085f8:	e050      	b.n	800869c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	3340      	adds	r3, #64	@ 0x40
 80085fe:	4619      	mov	r1, r3
 8008600:	6878      	ldr	r0, [r7, #4]
 8008602:	f000 f860 	bl	80086c6 <GetLineCoding>
 8008606:	4603      	mov	r3, r0
 8008608:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800860a:	7bbb      	ldrb	r3, [r7, #14]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d126      	bne.n	800865e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	2200      	movs	r2, #0
 8008614:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008622:	791b      	ldrb	r3, [r3, #4]
 8008624:	429a      	cmp	r2, r3
 8008626:	d13b      	bne.n	80086a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008632:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008634:	429a      	cmp	r2, r3
 8008636:	d133      	bne.n	80086a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008638:	68bb      	ldr	r3, [r7, #8]
 800863a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008642:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008644:	429a      	cmp	r2, r3
 8008646:	d12b      	bne.n	80086a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008650:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008652:	429a      	cmp	r2, r3
 8008654:	d124      	bne.n	80086a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f000 f958 	bl	800890c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800865c:	e020      	b.n	80086a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800865e:	7bbb      	ldrb	r3, [r7, #14]
 8008660:	2b01      	cmp	r3, #1
 8008662:	d01d      	beq.n	80086a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2204      	movs	r2, #4
 8008668:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800866c:	e018      	b.n	80086a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800866e:	6878      	ldr	r0, [r7, #4]
 8008670:	f000 f867 	bl	8008742 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 f8da 	bl	800882e <CDC_ProcessReception>
      break;
 800867a:	e014      	b.n	80086a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800867c:	2100      	movs	r1, #0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f001 f81a 	bl	80096b8 <USBH_ClrFeature>
 8008684:	4603      	mov	r3, r0
 8008686:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008688:	7bbb      	ldrb	r3, [r7, #14]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d10a      	bne.n	80086a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2200      	movs	r2, #0
 8008692:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008696:	e005      	b.n	80086a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008698:	bf00      	nop
 800869a:	e004      	b.n	80086a6 <USBH_CDC_Process+0x122>
      break;
 800869c:	bf00      	nop
 800869e:	e002      	b.n	80086a6 <USBH_CDC_Process+0x122>
      break;
 80086a0:	bf00      	nop
 80086a2:	e000      	b.n	80086a6 <USBH_CDC_Process+0x122>
      break;
 80086a4:	bf00      	nop

  }

  return status;
 80086a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a8:	4618      	mov	r0, r3
 80086aa:	3710      	adds	r7, #16
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}

080086b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b083      	sub	sp, #12
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	370c      	adds	r7, #12
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b082      	sub	sp, #8
 80086ca:	af00      	add	r7, sp, #0
 80086cc:	6078      	str	r0, [r7, #4]
 80086ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	22a1      	movs	r2, #161	@ 0xa1
 80086d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2221      	movs	r2, #33	@ 0x21
 80086da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2207      	movs	r2, #7
 80086ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2207      	movs	r2, #7
 80086f2:	4619      	mov	r1, r3
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f001 fb14 	bl	8009d22 <USBH_CtlReq>
 80086fa:	4603      	mov	r3, r0
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3708      	adds	r7, #8
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b082      	sub	sp, #8
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2221      	movs	r2, #33	@ 0x21
 8008712:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2207      	movs	r2, #7
 800872a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800872c:	683b      	ldr	r3, [r7, #0]
 800872e:	2207      	movs	r2, #7
 8008730:	4619      	mov	r1, r3
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f001 faf5 	bl	8009d22 <USBH_CtlReq>
 8008738:	4603      	mov	r3, r0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}

08008742 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008742:	b580      	push	{r7, lr}
 8008744:	b086      	sub	sp, #24
 8008746:	af02      	add	r7, sp, #8
 8008748:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008754:	2300      	movs	r3, #0
 8008756:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800875e:	2b01      	cmp	r3, #1
 8008760:	d002      	beq.n	8008768 <CDC_ProcessTransmission+0x26>
 8008762:	2b02      	cmp	r3, #2
 8008764:	d023      	beq.n	80087ae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008766:	e05e      	b.n	8008826 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800876c:	68fa      	ldr	r2, [r7, #12]
 800876e:	8b12      	ldrh	r2, [r2, #24]
 8008770:	4293      	cmp	r3, r2
 8008772:	d90b      	bls.n	800878c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	69d9      	ldr	r1, [r3, #28]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	8b1a      	ldrh	r2, [r3, #24]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	7b5b      	ldrb	r3, [r3, #13]
 8008780:	2001      	movs	r0, #1
 8008782:	9000      	str	r0, [sp, #0]
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f001 fcda 	bl	800a13e <USBH_BulkSendData>
 800878a:	e00b      	b.n	80087a4 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	7b5b      	ldrb	r3, [r3, #13]
 800879a:	2001      	movs	r0, #1
 800879c:	9000      	str	r0, [sp, #0]
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f001 fccd 	bl	800a13e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2202      	movs	r2, #2
 80087a8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80087ac:	e03b      	b.n	8008826 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	7b5b      	ldrb	r3, [r3, #13]
 80087b2:	4619      	mov	r1, r3
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f001 fff1 	bl	800a79c <USBH_LL_GetURBState>
 80087ba:	4603      	mov	r3, r0
 80087bc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80087be:	7afb      	ldrb	r3, [r7, #11]
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d128      	bne.n	8008816 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	8b12      	ldrh	r2, [r2, #24]
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d90e      	bls.n	80087ee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087d4:	68fa      	ldr	r2, [r7, #12]
 80087d6:	8b12      	ldrh	r2, [r2, #24]
 80087d8:	1a9a      	subs	r2, r3, r2
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	8b12      	ldrh	r2, [r2, #24]
 80087e6:	441a      	add	r2, r3
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	61da      	str	r2, [r3, #28]
 80087ec:	e002      	b.n	80087f4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	2200      	movs	r2, #0
 80087f2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d004      	beq.n	8008806 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008804:	e00e      	b.n	8008824 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	2200      	movs	r2, #0
 800880a:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 f868 	bl	80088e4 <USBH_CDC_TransmitCallback>
      break;
 8008814:	e006      	b.n	8008824 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008816:	7afb      	ldrb	r3, [r7, #11]
 8008818:	2b02      	cmp	r3, #2
 800881a:	d103      	bne.n	8008824 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2201      	movs	r2, #1
 8008820:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008824:	bf00      	nop
  }
}
 8008826:	bf00      	nop
 8008828:	3710      	adds	r7, #16
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af00      	add	r7, sp, #0
 8008834:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008840:	2300      	movs	r3, #0
 8008842:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800884a:	2b03      	cmp	r3, #3
 800884c:	d002      	beq.n	8008854 <CDC_ProcessReception+0x26>
 800884e:	2b04      	cmp	r3, #4
 8008850:	d00e      	beq.n	8008870 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008852:	e043      	b.n	80088dc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	6a19      	ldr	r1, [r3, #32]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	8b5a      	ldrh	r2, [r3, #26]
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	7b1b      	ldrb	r3, [r3, #12]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f001 fc91 	bl	800a188 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008866:	697b      	ldr	r3, [r7, #20]
 8008868:	2204      	movs	r2, #4
 800886a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800886e:	e035      	b.n	80088dc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008870:	697b      	ldr	r3, [r7, #20]
 8008872:	7b1b      	ldrb	r3, [r3, #12]
 8008874:	4619      	mov	r1, r3
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f001 ff90 	bl	800a79c <USBH_LL_GetURBState>
 800887c:	4603      	mov	r3, r0
 800887e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008880:	7cfb      	ldrb	r3, [r7, #19]
 8008882:	2b01      	cmp	r3, #1
 8008884:	d129      	bne.n	80088da <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	7b1b      	ldrb	r3, [r3, #12]
 800888a:	4619      	mov	r1, r3
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f001 fef3 	bl	800a678 <USBH_LL_GetLastXferSize>
 8008892:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	429a      	cmp	r2, r3
 800889c:	d016      	beq.n	80088cc <CDC_ProcessReception+0x9e>
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	8b5b      	ldrh	r3, [r3, #26]
 80088a2:	461a      	mov	r2, r3
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d110      	bne.n	80088cc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	1ad2      	subs	r2, r2, r3
 80088b2:	697b      	ldr	r3, [r7, #20]
 80088b4:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6a1a      	ldr	r2, [r3, #32]
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	441a      	add	r2, r3
 80088be:	697b      	ldr	r3, [r7, #20]
 80088c0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	2203      	movs	r2, #3
 80088c6:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80088ca:	e006      	b.n	80088da <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2200      	movs	r2, #0
 80088d0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	f000 f80f 	bl	80088f8 <USBH_CDC_ReceiveCallback>
      break;
 80088da:	bf00      	nop
  }
}
 80088dc:	bf00      	nop
 80088de:	3718      	adds	r7, #24
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80088ec:	bf00      	nop
 80088ee:	370c      	adds	r7, #12
 80088f0:	46bd      	mov	sp, r7
 80088f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f6:	4770      	bx	lr

080088f8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b083      	sub	sp, #12
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008900:	bf00      	nop
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008920:	b580      	push	{r7, lr}
 8008922:	b084      	sub	sp, #16
 8008924:	af00      	add	r7, sp, #0
 8008926:	60f8      	str	r0, [r7, #12]
 8008928:	60b9      	str	r1, [r7, #8]
 800892a:	4613      	mov	r3, r2
 800892c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008934:	2302      	movs	r3, #2
 8008936:	e029      	b.n	800898c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	79fa      	ldrb	r2, [r7, #7]
 800893c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2200      	movs	r2, #0
 8008944:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008950:	68f8      	ldr	r0, [r7, #12]
 8008952:	f000 f81f 	bl	8008994 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	2200      	movs	r2, #0
 800895a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2200      	movs	r2, #0
 8008962:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	2200      	movs	r2, #0
 800896a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f001 fdc3 	bl	800a510 <USBH_LL_Init>

  return USBH_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800899c:	2300      	movs	r3, #0
 800899e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089a0:	2300      	movs	r3, #0
 80089a2:	60fb      	str	r3, [r7, #12]
 80089a4:	e009      	b.n	80089ba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	33e0      	adds	r3, #224	@ 0xe0
 80089ac:	009b      	lsls	r3, r3, #2
 80089ae:	4413      	add	r3, r2
 80089b0:	2200      	movs	r2, #0
 80089b2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	3301      	adds	r3, #1
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	2b0f      	cmp	r3, #15
 80089be:	d9f2      	bls.n	80089a6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089c0:	2300      	movs	r3, #0
 80089c2:	60fb      	str	r3, [r7, #12]
 80089c4:	e009      	b.n	80089da <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	4413      	add	r3, r2
 80089cc:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80089d0:	2200      	movs	r2, #0
 80089d2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	60fb      	str	r3, [r7, #12]
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80089e0:	d3f1      	bcc.n	80089c6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2200      	movs	r2, #0
 80089e6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2240      	movs	r2, #64	@ 0x40
 8008a06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2201      	movs	r2, #1
 8008a1a:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	331c      	adds	r3, #28
 8008a32:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008a36:	2100      	movs	r1, #0
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f002 fa7d 	bl	800af38 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008a48:	2100      	movs	r1, #0
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f002 fa74 	bl	800af38 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008a56:	2212      	movs	r2, #18
 8008a58:	2100      	movs	r1, #0
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f002 fa6c 	bl	800af38 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008a66:	223e      	movs	r2, #62	@ 0x3e
 8008a68:	2100      	movs	r1, #0
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f002 fa64 	bl	800af38 <memset>

  return USBH_OK;
 8008a70:	2300      	movs	r3, #0
}
 8008a72:	4618      	mov	r0, r3
 8008a74:	3710      	adds	r7, #16
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bd80      	pop	{r7, pc}

08008a7a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008a7a:	b480      	push	{r7}
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	af00      	add	r7, sp, #0
 8008a80:	6078      	str	r0, [r7, #4]
 8008a82:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008a84:	2300      	movs	r3, #0
 8008a86:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d016      	beq.n	8008abc <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10e      	bne.n	8008ab6 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a9e:	1c59      	adds	r1, r3, #1
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	33de      	adds	r3, #222	@ 0xde
 8008aaa:	6839      	ldr	r1, [r7, #0]
 8008aac:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	73fb      	strb	r3, [r7, #15]
 8008ab4:	e004      	b.n	8008ac0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ab6:	2302      	movs	r3, #2
 8008ab8:	73fb      	strb	r3, [r7, #15]
 8008aba:	e001      	b.n	8008ac0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008abc:	2302      	movs	r3, #2
 8008abe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3714      	adds	r7, #20
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b085      	sub	sp, #20
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
 8008ad6:	460b      	mov	r3, r1
 8008ad8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008ada:	2300      	movs	r3, #0
 8008adc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008ae4:	78fa      	ldrb	r2, [r7, #3]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d204      	bcs.n	8008af4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008af2:	e001      	b.n	8008af8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008af4:	2302      	movs	r3, #2
 8008af6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008afa:	4618      	mov	r0, r3
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr

08008b06 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008b06:	b480      	push	{r7}
 8008b08:	b087      	sub	sp, #28
 8008b0a:	af00      	add	r7, sp, #0
 8008b0c:	6078      	str	r0, [r7, #4]
 8008b0e:	4608      	mov	r0, r1
 8008b10:	4611      	mov	r1, r2
 8008b12:	461a      	mov	r2, r3
 8008b14:	4603      	mov	r3, r0
 8008b16:	70fb      	strb	r3, [r7, #3]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70bb      	strb	r3, [r7, #2]
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008b20:	2300      	movs	r3, #0
 8008b22:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008b24:	2300      	movs	r3, #0
 8008b26:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b2e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b30:	e025      	b.n	8008b7e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008b32:	7dfb      	ldrb	r3, [r7, #23]
 8008b34:	221a      	movs	r2, #26
 8008b36:	fb02 f303 	mul.w	r3, r2, r3
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	68fa      	ldr	r2, [r7, #12]
 8008b3e:	4413      	add	r3, r2
 8008b40:	3302      	adds	r3, #2
 8008b42:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	795b      	ldrb	r3, [r3, #5]
 8008b48:	78fa      	ldrb	r2, [r7, #3]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d002      	beq.n	8008b54 <USBH_FindInterface+0x4e>
 8008b4e:	78fb      	ldrb	r3, [r7, #3]
 8008b50:	2bff      	cmp	r3, #255	@ 0xff
 8008b52:	d111      	bne.n	8008b78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b54:	693b      	ldr	r3, [r7, #16]
 8008b56:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008b58:	78ba      	ldrb	r2, [r7, #2]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d002      	beq.n	8008b64 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b5e:	78bb      	ldrb	r3, [r7, #2]
 8008b60:	2bff      	cmp	r3, #255	@ 0xff
 8008b62:	d109      	bne.n	8008b78 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008b68:	787a      	ldrb	r2, [r7, #1]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d002      	beq.n	8008b74 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008b6e:	787b      	ldrb	r3, [r7, #1]
 8008b70:	2bff      	cmp	r3, #255	@ 0xff
 8008b72:	d101      	bne.n	8008b78 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008b74:	7dfb      	ldrb	r3, [r7, #23]
 8008b76:	e006      	b.n	8008b86 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008b78:	7dfb      	ldrb	r3, [r7, #23]
 8008b7a:	3301      	adds	r3, #1
 8008b7c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d9d6      	bls.n	8008b32 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008b84:	23ff      	movs	r3, #255	@ 0xff
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	371c      	adds	r7, #28
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b082      	sub	sp, #8
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 fcf4 	bl	800a588 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f001 fe0d 	bl	800a7c2 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008ba8:	2300      	movs	r3, #0
}
 8008baa:	4618      	mov	r0, r3
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b088      	sub	sp, #32
 8008bb8:	af04      	add	r7, sp, #16
 8008bba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008bc0:	2300      	movs	r3, #0
 8008bc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008bca:	b2db      	uxtb	r3, r3
 8008bcc:	2b01      	cmp	r3, #1
 8008bce:	d102      	bne.n	8008bd6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2203      	movs	r2, #3
 8008bd4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	781b      	ldrb	r3, [r3, #0]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	2b0b      	cmp	r3, #11
 8008bde:	f200 81bb 	bhi.w	8008f58 <USBH_Process+0x3a4>
 8008be2:	a201      	add	r2, pc, #4	@ (adr r2, 8008be8 <USBH_Process+0x34>)
 8008be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008be8:	08008c19 	.word	0x08008c19
 8008bec:	08008c4b 	.word	0x08008c4b
 8008bf0:	08008cb3 	.word	0x08008cb3
 8008bf4:	08008ef3 	.word	0x08008ef3
 8008bf8:	08008f59 	.word	0x08008f59
 8008bfc:	08008d53 	.word	0x08008d53
 8008c00:	08008e99 	.word	0x08008e99
 8008c04:	08008d89 	.word	0x08008d89
 8008c08:	08008da9 	.word	0x08008da9
 8008c0c:	08008dc7 	.word	0x08008dc7
 8008c10:	08008e0b 	.word	0x08008e0b
 8008c14:	08008edb 	.word	0x08008edb
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008c1e:	b2db      	uxtb	r3, r3
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	f000 819b 	beq.w	8008f5c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	2201      	movs	r2, #1
 8008c2a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008c2c:	20c8      	movs	r0, #200	@ 0xc8
 8008c2e:	f001 fe12 	bl	800a856 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f001 fd05 	bl	800a642 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008c48:	e188      	b.n	8008f5c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008c50:	2b01      	cmp	r3, #1
 8008c52:	d107      	bne.n	8008c64 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2200      	movs	r2, #0
 8008c58:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2202      	movs	r2, #2
 8008c60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008c62:	e18a      	b.n	8008f7a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008c6a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008c6e:	d914      	bls.n	8008c9a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c76:	3301      	adds	r3, #1
 8008c78:	b2da      	uxtb	r2, r3
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008c86:	2b03      	cmp	r3, #3
 8008c88:	d903      	bls.n	8008c92 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	220d      	movs	r2, #13
 8008c8e:	701a      	strb	r2, [r3, #0]
      break;
 8008c90:	e173      	b.n	8008f7a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	701a      	strb	r2, [r3, #0]
      break;
 8008c98:	e16f      	b.n	8008f7a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008ca0:	f103 020a 	add.w	r2, r3, #10
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008caa:	200a      	movs	r0, #10
 8008cac:	f001 fdd3 	bl	800a856 <USBH_Delay>
      break;
 8008cb0:	e163      	b.n	8008f7a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d005      	beq.n	8008cc8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008cc2:	2104      	movs	r1, #4
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008cc8:	2064      	movs	r0, #100	@ 0x64
 8008cca:	f001 fdc4 	bl	800a856 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f001 fc90 	bl	800a5f4 <USBH_LL_GetSpeed>
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	461a      	mov	r2, r3
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2205      	movs	r2, #5
 8008ce2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008ce4:	2100      	movs	r1, #0
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f001 fa9b 	bl	800a222 <USBH_AllocPipe>
 8008cec:	4603      	mov	r3, r0
 8008cee:	461a      	mov	r2, r3
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008cf4:	2180      	movs	r1, #128	@ 0x80
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f001 fa93 	bl	800a222 <USBH_AllocPipe>
 8008cfc:	4603      	mov	r3, r0
 8008cfe:	461a      	mov	r2, r3
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	7919      	ldrb	r1, [r3, #4]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008d18:	9202      	str	r2, [sp, #8]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	9201      	str	r2, [sp, #4]
 8008d1e:	9300      	str	r3, [sp, #0]
 8008d20:	4603      	mov	r3, r0
 8008d22:	2280      	movs	r2, #128	@ 0x80
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f001 fa4d 	bl	800a1c4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	7959      	ldrb	r1, [r3, #5]
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008d3e:	9202      	str	r2, [sp, #8]
 8008d40:	2200      	movs	r2, #0
 8008d42:	9201      	str	r2, [sp, #4]
 8008d44:	9300      	str	r3, [sp, #0]
 8008d46:	4603      	mov	r3, r0
 8008d48:	2200      	movs	r2, #0
 8008d4a:	6878      	ldr	r0, [r7, #4]
 8008d4c:	f001 fa3a 	bl	800a1c4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d50:	e113      	b.n	8008f7a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f916 	bl	8008f84 <USBH_HandleEnum>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008d5c:	7bbb      	ldrb	r3, [r7, #14]
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f040 80fd 	bne.w	8008f60 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008d74:	2b01      	cmp	r3, #1
 8008d76:	d103      	bne.n	8008d80 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2208      	movs	r2, #8
 8008d7c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d7e:	e0ef      	b.n	8008f60 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	2207      	movs	r2, #7
 8008d84:	701a      	strb	r2, [r3, #0]
      break;
 8008d86:	e0eb      	b.n	8008f60 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	f000 80e8 	beq.w	8008f64 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d9a:	2101      	movs	r1, #1
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2208      	movs	r2, #8
 8008da4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008da6:	e0dd      	b.n	8008f64 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008dae:	4619      	mov	r1, r3
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 fc3a 	bl	800962a <USBH_SetCfg>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f040 80d5 	bne.w	8008f68 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2209      	movs	r2, #9
 8008dc2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dc4:	e0d0      	b.n	8008f68 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008dcc:	f003 0320 	and.w	r3, r3, #32
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d016      	beq.n	8008e02 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008dd4:	2101      	movs	r1, #1
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 fc4a 	bl	8009670 <USBH_SetFeature>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008de0:	7bbb      	ldrb	r3, [r7, #14]
 8008de2:	b2db      	uxtb	r3, r3
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d103      	bne.n	8008df0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	220a      	movs	r2, #10
 8008dec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008dee:	e0bd      	b.n	8008f6c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008df0:	7bbb      	ldrb	r3, [r7, #14]
 8008df2:	b2db      	uxtb	r3, r3
 8008df4:	2b03      	cmp	r3, #3
 8008df6:	f040 80b9 	bne.w	8008f6c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	701a      	strb	r2, [r3, #0]
      break;
 8008e00:	e0b4      	b.n	8008f6c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	220a      	movs	r2, #10
 8008e06:	701a      	strb	r2, [r3, #0]
      break;
 8008e08:	e0b0      	b.n	8008f6c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	f000 80ad 	beq.w	8008f70 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e1e:	2300      	movs	r3, #0
 8008e20:	73fb      	strb	r3, [r7, #15]
 8008e22:	e016      	b.n	8008e52 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008e24:	7bfa      	ldrb	r2, [r7, #15]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	32de      	adds	r2, #222	@ 0xde
 8008e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e2e:	791a      	ldrb	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d108      	bne.n	8008e4c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008e3a:	7bfa      	ldrb	r2, [r7, #15]
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	32de      	adds	r2, #222	@ 0xde
 8008e40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008e4a:	e005      	b.n	8008e58 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d0e5      	beq.n	8008e24 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d016      	beq.n	8008e90 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	4798      	blx	r3
 8008e6e:	4603      	mov	r3, r0
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d109      	bne.n	8008e88 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2206      	movs	r2, #6
 8008e78:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e80:	2103      	movs	r1, #3
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e86:	e073      	b.n	8008f70 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	220d      	movs	r2, #13
 8008e8c:	701a      	strb	r2, [r3, #0]
      break;
 8008e8e:	e06f      	b.n	8008f70 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	220d      	movs	r2, #13
 8008e94:	701a      	strb	r2, [r3, #0]
      break;
 8008e96:	e06b      	b.n	8008f70 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d017      	beq.n	8008ed2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ea8:	691b      	ldr	r3, [r3, #16]
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	4798      	blx	r3
 8008eae:	4603      	mov	r3, r0
 8008eb0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008eb2:	7bbb      	ldrb	r3, [r7, #14]
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d103      	bne.n	8008ec2 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	220b      	movs	r2, #11
 8008ebe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008ec0:	e058      	b.n	8008f74 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008ec2:	7bbb      	ldrb	r3, [r7, #14]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	d154      	bne.n	8008f74 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	220d      	movs	r2, #13
 8008ece:	701a      	strb	r2, [r3, #0]
      break;
 8008ed0:	e050      	b.n	8008f74 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	220d      	movs	r2, #13
 8008ed6:	701a      	strb	r2, [r3, #0]
      break;
 8008ed8:	e04c      	b.n	8008f74 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d049      	beq.n	8008f78 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	4798      	blx	r3
      }
      break;
 8008ef0:	e042      	b.n	8008f78 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f7ff fd4a 	bl	8008994 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d009      	beq.n	8008f1e <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f10:	68db      	ldr	r3, [r3, #12]
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2200      	movs	r2, #0
 8008f1a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d005      	beq.n	8008f34 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f2e:	2105      	movs	r1, #5
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d107      	bne.n	8008f50 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008f48:	6878      	ldr	r0, [r7, #4]
 8008f4a:	f7ff fe22 	bl	8008b92 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f4e:	e014      	b.n	8008f7a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f001 fb19 	bl	800a588 <USBH_LL_Start>
      break;
 8008f56:	e010      	b.n	8008f7a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008f58:	bf00      	nop
 8008f5a:	e00e      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e00c      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f60:	bf00      	nop
 8008f62:	e00a      	b.n	8008f7a <USBH_Process+0x3c6>
    break;
 8008f64:	bf00      	nop
 8008f66:	e008      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e006      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e004      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f70:	bf00      	nop
 8008f72:	e002      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f74:	bf00      	nop
 8008f76:	e000      	b.n	8008f7a <USBH_Process+0x3c6>
      break;
 8008f78:	bf00      	nop
  }
  return USBH_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3710      	adds	r7, #16
 8008f80:	46bd      	mov	sp, r7
 8008f82:	bd80      	pop	{r7, pc}

08008f84 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b088      	sub	sp, #32
 8008f88:	af04      	add	r7, sp, #16
 8008f8a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008f90:	2301      	movs	r3, #1
 8008f92:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	2b07      	cmp	r3, #7
 8008f9a:	f200 81bd 	bhi.w	8009318 <USBH_HandleEnum+0x394>
 8008f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8008fa4 <USBH_HandleEnum+0x20>)
 8008fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fa4:	08008fc5 	.word	0x08008fc5
 8008fa8:	0800907f 	.word	0x0800907f
 8008fac:	080090e9 	.word	0x080090e9
 8008fb0:	08009173 	.word	0x08009173
 8008fb4:	080091dd 	.word	0x080091dd
 8008fb8:	0800924d 	.word	0x0800924d
 8008fbc:	08009293 	.word	0x08009293
 8008fc0:	080092d9 	.word	0x080092d9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008fc4:	2108      	movs	r1, #8
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 fa4c 	bl	8009464 <USBH_Get_DevDesc>
 8008fcc:	4603      	mov	r3, r0
 8008fce:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008fd0:	7bbb      	ldrb	r3, [r7, #14]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d12e      	bne.n	8009034 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2201      	movs	r2, #1
 8008fe4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	7919      	ldrb	r1, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008ffa:	9202      	str	r2, [sp, #8]
 8008ffc:	2200      	movs	r2, #0
 8008ffe:	9201      	str	r2, [sp, #4]
 8009000:	9300      	str	r3, [sp, #0]
 8009002:	4603      	mov	r3, r0
 8009004:	2280      	movs	r2, #128	@ 0x80
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f001 f8dc 	bl	800a1c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	7959      	ldrb	r1, [r3, #5]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009020:	9202      	str	r2, [sp, #8]
 8009022:	2200      	movs	r2, #0
 8009024:	9201      	str	r2, [sp, #4]
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	4603      	mov	r3, r0
 800902a:	2200      	movs	r2, #0
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f001 f8c9 	bl	800a1c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009032:	e173      	b.n	800931c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009034:	7bbb      	ldrb	r3, [r7, #14]
 8009036:	2b03      	cmp	r3, #3
 8009038:	f040 8170 	bne.w	800931c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009042:	3301      	adds	r3, #1
 8009044:	b2da      	uxtb	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009052:	2b03      	cmp	r3, #3
 8009054:	d903      	bls.n	800905e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	220d      	movs	r2, #13
 800905a:	701a      	strb	r2, [r3, #0]
      break;
 800905c:	e15e      	b.n	800931c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	795b      	ldrb	r3, [r3, #5]
 8009062:	4619      	mov	r1, r3
 8009064:	6878      	ldr	r0, [r7, #4]
 8009066:	f001 f8fd 	bl	800a264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	791b      	ldrb	r3, [r3, #4]
 800906e:	4619      	mov	r1, r3
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f001 f8f7 	bl	800a264 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	701a      	strb	r2, [r3, #0]
      break;
 800907c:	e14e      	b.n	800931c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800907e:	2112      	movs	r1, #18
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 f9ef 	bl	8009464 <USBH_Get_DevDesc>
 8009086:	4603      	mov	r3, r0
 8009088:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800908a:	7bbb      	ldrb	r3, [r7, #14]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d103      	bne.n	8009098 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	2202      	movs	r2, #2
 8009094:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009096:	e143      	b.n	8009320 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	2b03      	cmp	r3, #3
 800909c:	f040 8140 	bne.w	8009320 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090a6:	3301      	adds	r3, #1
 80090a8:	b2da      	uxtb	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d903      	bls.n	80090c2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	220d      	movs	r2, #13
 80090be:	701a      	strb	r2, [r3, #0]
      break;
 80090c0:	e12e      	b.n	8009320 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	795b      	ldrb	r3, [r3, #5]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f001 f8cb 	bl	800a264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	791b      	ldrb	r3, [r3, #4]
 80090d2:	4619      	mov	r1, r3
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f001 f8c5 	bl	800a264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	701a      	strb	r2, [r3, #0]
      break;
 80090e6:	e11b      	b.n	8009320 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80090e8:	2101      	movs	r1, #1
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f000 fa79 	bl	80095e2 <USBH_SetAddress>
 80090f0:	4603      	mov	r3, r0
 80090f2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090f4:	7bbb      	ldrb	r3, [r7, #14]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d130      	bne.n	800915c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80090fa:	2002      	movs	r0, #2
 80090fc:	f001 fbab 	bl	800a856 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2203      	movs	r2, #3
 800910c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7919      	ldrb	r1, [r3, #4]
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009122:	9202      	str	r2, [sp, #8]
 8009124:	2200      	movs	r2, #0
 8009126:	9201      	str	r2, [sp, #4]
 8009128:	9300      	str	r3, [sp, #0]
 800912a:	4603      	mov	r3, r0
 800912c:	2280      	movs	r2, #128	@ 0x80
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 f848 	bl	800a1c4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	7959      	ldrb	r1, [r3, #5]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009144:	687a      	ldr	r2, [r7, #4]
 8009146:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009148:	9202      	str	r2, [sp, #8]
 800914a:	2200      	movs	r2, #0
 800914c:	9201      	str	r2, [sp, #4]
 800914e:	9300      	str	r3, [sp, #0]
 8009150:	4603      	mov	r3, r0
 8009152:	2200      	movs	r2, #0
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f001 f835 	bl	800a1c4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800915a:	e0e3      	b.n	8009324 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800915c:	7bbb      	ldrb	r3, [r7, #14]
 800915e:	2b03      	cmp	r3, #3
 8009160:	f040 80e0 	bne.w	8009324 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	220d      	movs	r2, #13
 8009168:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2200      	movs	r2, #0
 800916e:	705a      	strb	r2, [r3, #1]
      break;
 8009170:	e0d8      	b.n	8009324 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009172:	2109      	movs	r1, #9
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f000 f9a1 	bl	80094bc <USBH_Get_CfgDesc>
 800917a:	4603      	mov	r3, r0
 800917c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800917e:	7bbb      	ldrb	r3, [r7, #14]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d103      	bne.n	800918c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2204      	movs	r2, #4
 8009188:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800918a:	e0cd      	b.n	8009328 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800918c:	7bbb      	ldrb	r3, [r7, #14]
 800918e:	2b03      	cmp	r3, #3
 8009190:	f040 80ca 	bne.w	8009328 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800919a:	3301      	adds	r3, #1
 800919c:	b2da      	uxtb	r2, r3
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091aa:	2b03      	cmp	r3, #3
 80091ac:	d903      	bls.n	80091b6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	220d      	movs	r2, #13
 80091b2:	701a      	strb	r2, [r3, #0]
      break;
 80091b4:	e0b8      	b.n	8009328 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	795b      	ldrb	r3, [r3, #5]
 80091ba:	4619      	mov	r1, r3
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f001 f851 	bl	800a264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	791b      	ldrb	r3, [r3, #4]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f001 f84b 	bl	800a264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	701a      	strb	r2, [r3, #0]
      break;
 80091da:	e0a5      	b.n	8009328 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80091e2:	4619      	mov	r1, r3
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	f000 f969 	bl	80094bc <USBH_Get_CfgDesc>
 80091ea:	4603      	mov	r3, r0
 80091ec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091ee:	7bbb      	ldrb	r3, [r7, #14]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d103      	bne.n	80091fc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2205      	movs	r2, #5
 80091f8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80091fa:	e097      	b.n	800932c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80091fc:	7bbb      	ldrb	r3, [r7, #14]
 80091fe:	2b03      	cmp	r3, #3
 8009200:	f040 8094 	bne.w	800932c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800920a:	3301      	adds	r3, #1
 800920c:	b2da      	uxtb	r2, r3
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800921a:	2b03      	cmp	r3, #3
 800921c:	d903      	bls.n	8009226 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	220d      	movs	r2, #13
 8009222:	701a      	strb	r2, [r3, #0]
      break;
 8009224:	e082      	b.n	800932c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	795b      	ldrb	r3, [r3, #5]
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f001 f819 	bl	800a264 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	791b      	ldrb	r3, [r3, #4]
 8009236:	4619      	mov	r1, r3
 8009238:	6878      	ldr	r0, [r7, #4]
 800923a:	f001 f813 	bl	800a264 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2200      	movs	r2, #0
 8009242:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	701a      	strb	r2, [r3, #0]
      break;
 800924a:	e06f      	b.n	800932c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009252:	2b00      	cmp	r3, #0
 8009254:	d019      	beq.n	800928a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009262:	23ff      	movs	r3, #255	@ 0xff
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f953 	bl	8009510 <USBH_Get_StringDesc>
 800926a:	4603      	mov	r3, r0
 800926c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800926e:	7bbb      	ldrb	r3, [r7, #14]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d103      	bne.n	800927c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2206      	movs	r2, #6
 8009278:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800927a:	e059      	b.n	8009330 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800927c:	7bbb      	ldrb	r3, [r7, #14]
 800927e:	2b03      	cmp	r3, #3
 8009280:	d156      	bne.n	8009330 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2206      	movs	r2, #6
 8009286:	705a      	strb	r2, [r3, #1]
      break;
 8009288:	e052      	b.n	8009330 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2206      	movs	r2, #6
 800928e:	705a      	strb	r2, [r3, #1]
      break;
 8009290:	e04e      	b.n	8009330 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009298:	2b00      	cmp	r3, #0
 800929a:	d019      	beq.n	80092d0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80092a8:	23ff      	movs	r3, #255	@ 0xff
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 f930 	bl	8009510 <USBH_Get_StringDesc>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092b4:	7bbb      	ldrb	r3, [r7, #14]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d103      	bne.n	80092c2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2207      	movs	r2, #7
 80092be:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80092c0:	e038      	b.n	8009334 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092c2:	7bbb      	ldrb	r3, [r7, #14]
 80092c4:	2b03      	cmp	r3, #3
 80092c6:	d135      	bne.n	8009334 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	2207      	movs	r2, #7
 80092cc:	705a      	strb	r2, [r3, #1]
      break;
 80092ce:	e031      	b.n	8009334 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2207      	movs	r2, #7
 80092d4:	705a      	strb	r2, [r3, #1]
      break;
 80092d6:	e02d      	b.n	8009334 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d017      	beq.n	8009312 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80092ee:	23ff      	movs	r3, #255	@ 0xff
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f000 f90d 	bl	8009510 <USBH_Get_StringDesc>
 80092f6:	4603      	mov	r3, r0
 80092f8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80092fa:	7bbb      	ldrb	r3, [r7, #14]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d102      	bne.n	8009306 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009300:	2300      	movs	r3, #0
 8009302:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009304:	e018      	b.n	8009338 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b03      	cmp	r3, #3
 800930a:	d115      	bne.n	8009338 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
      break;
 8009310:	e012      	b.n	8009338 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009312:	2300      	movs	r3, #0
 8009314:	73fb      	strb	r3, [r7, #15]
      break;
 8009316:	e00f      	b.n	8009338 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009318:	bf00      	nop
 800931a:	e00e      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 800931c:	bf00      	nop
 800931e:	e00c      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 8009320:	bf00      	nop
 8009322:	e00a      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 8009324:	bf00      	nop
 8009326:	e008      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 8009328:	bf00      	nop
 800932a:	e006      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 800932c:	bf00      	nop
 800932e:	e004      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 8009330:	bf00      	nop
 8009332:	e002      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 8009334:	bf00      	nop
 8009336:	e000      	b.n	800933a <USBH_HandleEnum+0x3b6>
      break;
 8009338:	bf00      	nop
  }
  return Status;
 800933a:	7bfb      	ldrb	r3, [r7, #15]
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009344:	b480      	push	{r7}
 8009346:	b083      	sub	sp, #12
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009356:	bf00      	nop
 8009358:	370c      	adds	r7, #12
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr

08009362 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009362:	b580      	push	{r7, lr}
 8009364:	b082      	sub	sp, #8
 8009366:	af00      	add	r7, sp, #0
 8009368:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009370:	1c5a      	adds	r2, r3, #1
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 f804 	bl	8009386 <USBH_HandleSof>
}
 800937e:	bf00      	nop
 8009380:	3708      	adds	r7, #8
 8009382:	46bd      	mov	sp, r7
 8009384:	bd80      	pop	{r7, pc}

08009386 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009386:	b580      	push	{r7, lr}
 8009388:	b082      	sub	sp, #8
 800938a:	af00      	add	r7, sp, #0
 800938c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	781b      	ldrb	r3, [r3, #0]
 8009392:	b2db      	uxtb	r3, r3
 8009394:	2b0b      	cmp	r3, #11
 8009396:	d10a      	bne.n	80093ae <USBH_HandleSof+0x28>
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d005      	beq.n	80093ae <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093a8:	699b      	ldr	r3, [r3, #24]
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	4798      	blx	r3
  }
}
 80093ae:	bf00      	nop
 80093b0:	3708      	adds	r7, #8
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}

080093b6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80093b6:	b480      	push	{r7}
 80093b8:	b083      	sub	sp, #12
 80093ba:	af00      	add	r7, sp, #0
 80093bc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80093c6:	bf00      	nop
}
 80093c8:	370c      	adds	r7, #12
 80093ca:	46bd      	mov	sp, r7
 80093cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093d0:	4770      	bx	lr

080093d2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80093d2:	b480      	push	{r7}
 80093d4:	b083      	sub	sp, #12
 80093d6:	af00      	add	r7, sp, #0
 80093d8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80093e2:	bf00      	nop
}
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2201      	movs	r2, #1
 80093fa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800940e:	2300      	movs	r3, #0
}
 8009410:	4618      	mov	r0, r3
 8009412:	370c      	adds	r7, #12
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b082      	sub	sp, #8
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2201      	movs	r2, #1
 8009428:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2200      	movs	r2, #0
 8009430:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800943c:	6878      	ldr	r0, [r7, #4]
 800943e:	f001 f8be 	bl	800a5be <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	791b      	ldrb	r3, [r3, #4]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f000 ff0b 	bl	800a264 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	795b      	ldrb	r3, [r3, #5]
 8009452:	4619      	mov	r1, r3
 8009454:	6878      	ldr	r0, [r7, #4]
 8009456:	f000 ff05 	bl	800a264 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800945a:	2300      	movs	r3, #0
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af02      	add	r7, sp, #8
 800946a:	6078      	str	r0, [r7, #4]
 800946c:	460b      	mov	r3, r1
 800946e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009470:	887b      	ldrh	r3, [r7, #2]
 8009472:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009476:	d901      	bls.n	800947c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009478:	2303      	movs	r3, #3
 800947a:	e01b      	b.n	80094b4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009482:	887b      	ldrh	r3, [r7, #2]
 8009484:	9300      	str	r3, [sp, #0]
 8009486:	4613      	mov	r3, r2
 8009488:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800948c:	2100      	movs	r1, #0
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	f000 f872 	bl	8009578 <USBH_GetDescriptor>
 8009494:	4603      	mov	r3, r0
 8009496:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009498:	7bfb      	ldrb	r3, [r7, #15]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d109      	bne.n	80094b2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80094a4:	887a      	ldrh	r2, [r7, #2]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f929 	bl	8009700 <USBH_ParseDevDesc>
 80094ae:	4603      	mov	r3, r0
 80094b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80094b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3710      	adds	r7, #16
 80094b8:	46bd      	mov	sp, r7
 80094ba:	bd80      	pop	{r7, pc}

080094bc <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80094bc:	b580      	push	{r7, lr}
 80094be:	b086      	sub	sp, #24
 80094c0:	af02      	add	r7, sp, #8
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	460b      	mov	r3, r1
 80094c6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	331c      	adds	r3, #28
 80094cc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80094ce:	887b      	ldrh	r3, [r7, #2]
 80094d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80094d4:	d901      	bls.n	80094da <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80094d6:	2303      	movs	r3, #3
 80094d8:	e016      	b.n	8009508 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80094da:	887b      	ldrh	r3, [r7, #2]
 80094dc:	9300      	str	r3, [sp, #0]
 80094de:	68bb      	ldr	r3, [r7, #8]
 80094e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80094e4:	2100      	movs	r1, #0
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 f846 	bl	8009578 <USBH_GetDescriptor>
 80094ec:	4603      	mov	r3, r0
 80094ee:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80094f0:	7bfb      	ldrb	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d107      	bne.n	8009506 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80094f6:	887b      	ldrh	r3, [r7, #2]
 80094f8:	461a      	mov	r2, r3
 80094fa:	68b9      	ldr	r1, [r7, #8]
 80094fc:	6878      	ldr	r0, [r7, #4]
 80094fe:	f000 f9af 	bl	8009860 <USBH_ParseCfgDesc>
 8009502:	4603      	mov	r3, r0
 8009504:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009506:	7bfb      	ldrb	r3, [r7, #15]
}
 8009508:	4618      	mov	r0, r3
 800950a:	3710      	adds	r7, #16
 800950c:	46bd      	mov	sp, r7
 800950e:	bd80      	pop	{r7, pc}

08009510 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b088      	sub	sp, #32
 8009514:	af02      	add	r7, sp, #8
 8009516:	60f8      	str	r0, [r7, #12]
 8009518:	607a      	str	r2, [r7, #4]
 800951a:	461a      	mov	r2, r3
 800951c:	460b      	mov	r3, r1
 800951e:	72fb      	strb	r3, [r7, #11]
 8009520:	4613      	mov	r3, r2
 8009522:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009524:	893b      	ldrh	r3, [r7, #8]
 8009526:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800952a:	d802      	bhi.n	8009532 <USBH_Get_StringDesc+0x22>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d101      	bne.n	8009536 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009532:	2303      	movs	r3, #3
 8009534:	e01c      	b.n	8009570 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009536:	7afb      	ldrb	r3, [r7, #11]
 8009538:	b29b      	uxth	r3, r3
 800953a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800953e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009546:	893b      	ldrh	r3, [r7, #8]
 8009548:	9300      	str	r3, [sp, #0]
 800954a:	460b      	mov	r3, r1
 800954c:	2100      	movs	r1, #0
 800954e:	68f8      	ldr	r0, [r7, #12]
 8009550:	f000 f812 	bl	8009578 <USBH_GetDescriptor>
 8009554:	4603      	mov	r3, r0
 8009556:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009558:	7dfb      	ldrb	r3, [r7, #23]
 800955a:	2b00      	cmp	r3, #0
 800955c:	d107      	bne.n	800956e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009564:	893a      	ldrh	r2, [r7, #8]
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	4618      	mov	r0, r3
 800956a:	f000 fb8d 	bl	8009c88 <USBH_ParseStringDesc>
  }

  return status;
 800956e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009570:	4618      	mov	r0, r3
 8009572:	3718      	adds	r7, #24
 8009574:	46bd      	mov	sp, r7
 8009576:	bd80      	pop	{r7, pc}

08009578 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b084      	sub	sp, #16
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	607b      	str	r3, [r7, #4]
 8009582:	460b      	mov	r3, r1
 8009584:	72fb      	strb	r3, [r7, #11]
 8009586:	4613      	mov	r3, r2
 8009588:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	789b      	ldrb	r3, [r3, #2]
 800958e:	2b01      	cmp	r3, #1
 8009590:	d11c      	bne.n	80095cc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009592:	7afb      	ldrb	r3, [r7, #11]
 8009594:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009598:	b2da      	uxtb	r2, r3
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2206      	movs	r2, #6
 80095a2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	893a      	ldrh	r2, [r7, #8]
 80095a8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80095aa:	893b      	ldrh	r3, [r7, #8]
 80095ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80095b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80095b4:	d104      	bne.n	80095c0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	f240 4209 	movw	r2, #1033	@ 0x409
 80095bc:	829a      	strh	r2, [r3, #20]
 80095be:	e002      	b.n	80095c6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	2200      	movs	r2, #0
 80095c4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	8b3a      	ldrh	r2, [r7, #24]
 80095ca:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80095cc:	8b3b      	ldrh	r3, [r7, #24]
 80095ce:	461a      	mov	r2, r3
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	68f8      	ldr	r0, [r7, #12]
 80095d4:	f000 fba5 	bl	8009d22 <USBH_CtlReq>
 80095d8:	4603      	mov	r3, r0
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	789b      	ldrb	r3, [r3, #2]
 80095f2:	2b01      	cmp	r3, #1
 80095f4:	d10f      	bne.n	8009616 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	2200      	movs	r2, #0
 80095fa:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2205      	movs	r2, #5
 8009600:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	b29a      	uxth	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2200      	movs	r2, #0
 8009614:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009616:	2200      	movs	r2, #0
 8009618:	2100      	movs	r1, #0
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 fb81 	bl	8009d22 <USBH_CtlReq>
 8009620:	4603      	mov	r3, r0
}
 8009622:	4618      	mov	r0, r3
 8009624:	3708      	adds	r7, #8
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	460b      	mov	r3, r1
 8009634:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	789b      	ldrb	r3, [r3, #2]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d10e      	bne.n	800965c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	2209      	movs	r2, #9
 8009648:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	887a      	ldrh	r2, [r7, #2]
 800964e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2200      	movs	r2, #0
 8009654:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800965c:	2200      	movs	r2, #0
 800965e:	2100      	movs	r1, #0
 8009660:	6878      	ldr	r0, [r7, #4]
 8009662:	f000 fb5e 	bl	8009d22 <USBH_CtlReq>
 8009666:	4603      	mov	r3, r0
}
 8009668:	4618      	mov	r0, r3
 800966a:	3708      	adds	r7, #8
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b082      	sub	sp, #8
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
 8009678:	460b      	mov	r3, r1
 800967a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	789b      	ldrb	r3, [r3, #2]
 8009680:	2b01      	cmp	r3, #1
 8009682:	d10f      	bne.n	80096a4 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	2203      	movs	r2, #3
 800968e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009690:	78fb      	ldrb	r3, [r7, #3]
 8009692:	b29a      	uxth	r2, r3
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2200      	movs	r2, #0
 800969c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2200      	movs	r2, #0
 80096a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096a4:	2200      	movs	r2, #0
 80096a6:	2100      	movs	r1, #0
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fb3a 	bl	8009d22 <USBH_CtlReq>
 80096ae:	4603      	mov	r3, r0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3708      	adds	r7, #8
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80096b8:	b580      	push	{r7, lr}
 80096ba:	b082      	sub	sp, #8
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
 80096c0:	460b      	mov	r3, r1
 80096c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	789b      	ldrb	r3, [r3, #2]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d10f      	bne.n	80096ec <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2202      	movs	r2, #2
 80096d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2201      	movs	r2, #1
 80096d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80096de:	78fb      	ldrb	r3, [r7, #3]
 80096e0:	b29a      	uxth	r2, r3
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	2200      	movs	r2, #0
 80096ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096ec:	2200      	movs	r2, #0
 80096ee:	2100      	movs	r1, #0
 80096f0:	6878      	ldr	r0, [r7, #4]
 80096f2:	f000 fb16 	bl	8009d22 <USBH_CtlReq>
 80096f6:	4603      	mov	r3, r0
}
 80096f8:	4618      	mov	r0, r3
 80096fa:	3708      	adds	r7, #8
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009700:	b480      	push	{r7}
 8009702:	b087      	sub	sp, #28
 8009704:	af00      	add	r7, sp, #0
 8009706:	60f8      	str	r0, [r7, #12]
 8009708:	60b9      	str	r1, [r7, #8]
 800970a:	4613      	mov	r3, r2
 800970c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009714:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d101      	bne.n	8009724 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009720:	2302      	movs	r3, #2
 8009722:	e094      	b.n	800984e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009724:	68bb      	ldr	r3, [r7, #8]
 8009726:	781a      	ldrb	r2, [r3, #0]
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800972c:	68bb      	ldr	r3, [r7, #8]
 800972e:	785a      	ldrb	r2, [r3, #1]
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	3302      	adds	r3, #2
 8009738:	781b      	ldrb	r3, [r3, #0]
 800973a:	461a      	mov	r2, r3
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	3303      	adds	r3, #3
 8009740:	781b      	ldrb	r3, [r3, #0]
 8009742:	021b      	lsls	r3, r3, #8
 8009744:	b29b      	uxth	r3, r3
 8009746:	4313      	orrs	r3, r2
 8009748:	b29a      	uxth	r2, r3
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800974e:	68bb      	ldr	r3, [r7, #8]
 8009750:	791a      	ldrb	r2, [r3, #4]
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	795a      	ldrb	r2, [r3, #5]
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	799a      	ldrb	r2, [r3, #6]
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	79da      	ldrb	r2, [r3, #7]
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800977e:	2b01      	cmp	r3, #1
 8009780:	d11b      	bne.n	80097ba <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 8009782:	693b      	ldr	r3, [r7, #16]
 8009784:	79db      	ldrb	r3, [r3, #7]
 8009786:	2b20      	cmp	r3, #32
 8009788:	dc0f      	bgt.n	80097aa <USBH_ParseDevDesc+0xaa>
 800978a:	2b08      	cmp	r3, #8
 800978c:	db0f      	blt.n	80097ae <USBH_ParseDevDesc+0xae>
 800978e:	3b08      	subs	r3, #8
 8009790:	4a32      	ldr	r2, [pc, #200]	@ (800985c <USBH_ParseDevDesc+0x15c>)
 8009792:	fa22 f303 	lsr.w	r3, r2, r3
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	bf14      	ite	ne
 800979e:	2301      	movne	r3, #1
 80097a0:	2300      	moveq	r3, #0
 80097a2:	b2db      	uxtb	r3, r3
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d106      	bne.n	80097b6 <USBH_ParseDevDesc+0xb6>
 80097a8:	e001      	b.n	80097ae <USBH_ParseDevDesc+0xae>
 80097aa:	2b40      	cmp	r3, #64	@ 0x40
 80097ac:	d003      	beq.n	80097b6 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	2208      	movs	r2, #8
 80097b2:	71da      	strb	r2, [r3, #7]
        break;
 80097b4:	e000      	b.n	80097b8 <USBH_ParseDevDesc+0xb8>
        break;
 80097b6:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80097b8:	e00e      	b.n	80097d8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d107      	bne.n	80097d4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80097c4:	693b      	ldr	r3, [r7, #16]
 80097c6:	79db      	ldrb	r3, [r3, #7]
 80097c8:	2b08      	cmp	r3, #8
 80097ca:	d005      	beq.n	80097d8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2208      	movs	r2, #8
 80097d0:	71da      	strb	r2, [r3, #7]
 80097d2:	e001      	b.n	80097d8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80097d4:	2303      	movs	r3, #3
 80097d6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80097d8:	88fb      	ldrh	r3, [r7, #6]
 80097da:	2b08      	cmp	r3, #8
 80097dc:	d936      	bls.n	800984c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	3308      	adds	r3, #8
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	461a      	mov	r2, r3
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	3309      	adds	r3, #9
 80097ea:	781b      	ldrb	r3, [r3, #0]
 80097ec:	021b      	lsls	r3, r3, #8
 80097ee:	b29b      	uxth	r3, r3
 80097f0:	4313      	orrs	r3, r2
 80097f2:	b29a      	uxth	r2, r3
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	330a      	adds	r3, #10
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	68bb      	ldr	r3, [r7, #8]
 8009802:	330b      	adds	r3, #11
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	021b      	lsls	r3, r3, #8
 8009808:	b29b      	uxth	r3, r3
 800980a:	4313      	orrs	r3, r2
 800980c:	b29a      	uxth	r2, r3
 800980e:	693b      	ldr	r3, [r7, #16]
 8009810:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	330c      	adds	r3, #12
 8009816:	781b      	ldrb	r3, [r3, #0]
 8009818:	461a      	mov	r2, r3
 800981a:	68bb      	ldr	r3, [r7, #8]
 800981c:	330d      	adds	r3, #13
 800981e:	781b      	ldrb	r3, [r3, #0]
 8009820:	021b      	lsls	r3, r3, #8
 8009822:	b29b      	uxth	r3, r3
 8009824:	4313      	orrs	r3, r2
 8009826:	b29a      	uxth	r2, r3
 8009828:	693b      	ldr	r3, [r7, #16]
 800982a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	7b9a      	ldrb	r2, [r3, #14]
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	7bda      	ldrb	r2, [r3, #15]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	7c1a      	ldrb	r2, [r3, #16]
 8009840:	693b      	ldr	r3, [r7, #16]
 8009842:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009844:	68bb      	ldr	r3, [r7, #8]
 8009846:	7c5a      	ldrb	r2, [r3, #17]
 8009848:	693b      	ldr	r3, [r7, #16]
 800984a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800984c:	7dfb      	ldrb	r3, [r7, #23]
}
 800984e:	4618      	mov	r0, r3
 8009850:	371c      	adds	r7, #28
 8009852:	46bd      	mov	sp, r7
 8009854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009858:	4770      	bx	lr
 800985a:	bf00      	nop
 800985c:	01000101 	.word	0x01000101

08009860 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009860:	b580      	push	{r7, lr}
 8009862:	b08c      	sub	sp, #48	@ 0x30
 8009864:	af00      	add	r7, sp, #0
 8009866:	60f8      	str	r0, [r7, #12]
 8009868:	60b9      	str	r1, [r7, #8]
 800986a:	4613      	mov	r3, r2
 800986c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009874:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009876:	2300      	movs	r3, #0
 8009878:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800987c:	2300      	movs	r3, #0
 800987e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 8009882:	2300      	movs	r3, #0
 8009884:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d101      	bne.n	8009892 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800988e:	2302      	movs	r3, #2
 8009890:	e0da      	b.n	8009a48 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	2b09      	cmp	r3, #9
 800989c:	d002      	beq.n	80098a4 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800989e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80098a0:	2209      	movs	r2, #9
 80098a2:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	781a      	ldrb	r2, [r3, #0]
 80098a8:	6a3b      	ldr	r3, [r7, #32]
 80098aa:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	785a      	ldrb	r2, [r3, #1]
 80098b0:	6a3b      	ldr	r3, [r7, #32]
 80098b2:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	3302      	adds	r3, #2
 80098b8:	781b      	ldrb	r3, [r3, #0]
 80098ba:	461a      	mov	r2, r3
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	3303      	adds	r3, #3
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	021b      	lsls	r3, r3, #8
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	4313      	orrs	r3, r2
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80098ce:	bf28      	it	cs
 80098d0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	6a3b      	ldr	r3, [r7, #32]
 80098d8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	791a      	ldrb	r2, [r3, #4]
 80098de:	6a3b      	ldr	r3, [r7, #32]
 80098e0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	795a      	ldrb	r2, [r3, #5]
 80098e6:	6a3b      	ldr	r3, [r7, #32]
 80098e8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80098ea:	68bb      	ldr	r3, [r7, #8]
 80098ec:	799a      	ldrb	r2, [r3, #6]
 80098ee:	6a3b      	ldr	r3, [r7, #32]
 80098f0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	79da      	ldrb	r2, [r3, #7]
 80098f6:	6a3b      	ldr	r3, [r7, #32]
 80098f8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80098fa:	68bb      	ldr	r3, [r7, #8]
 80098fc:	7a1a      	ldrb	r2, [r3, #8]
 80098fe:	6a3b      	ldr	r3, [r7, #32]
 8009900:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009902:	88fb      	ldrh	r3, [r7, #6]
 8009904:	2b09      	cmp	r3, #9
 8009906:	f240 809d 	bls.w	8009a44 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800990a:	2309      	movs	r3, #9
 800990c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009912:	e081      	b.n	8009a18 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009914:	f107 0316 	add.w	r3, r7, #22
 8009918:	4619      	mov	r1, r3
 800991a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800991c:	f000 f9e7 	bl	8009cee <USBH_GetNextDesc>
 8009920:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009922:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009924:	785b      	ldrb	r3, [r3, #1]
 8009926:	2b04      	cmp	r3, #4
 8009928:	d176      	bne.n	8009a18 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800992a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b09      	cmp	r3, #9
 8009930:	d002      	beq.n	8009938 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009934:	2209      	movs	r2, #9
 8009936:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800993c:	221a      	movs	r2, #26
 800993e:	fb02 f303 	mul.w	r3, r2, r3
 8009942:	3308      	adds	r3, #8
 8009944:	6a3a      	ldr	r2, [r7, #32]
 8009946:	4413      	add	r3, r2
 8009948:	3302      	adds	r3, #2
 800994a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800994c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800994e:	69f8      	ldr	r0, [r7, #28]
 8009950:	f000 f87e 	bl	8009a50 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800995a:	2300      	movs	r3, #0
 800995c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800995e:	e043      	b.n	80099e8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009960:	f107 0316 	add.w	r3, r7, #22
 8009964:	4619      	mov	r1, r3
 8009966:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009968:	f000 f9c1 	bl	8009cee <USBH_GetNextDesc>
 800996c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800996e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009970:	785b      	ldrb	r3, [r3, #1]
 8009972:	2b05      	cmp	r3, #5
 8009974:	d138      	bne.n	80099e8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009976:	69fb      	ldr	r3, [r7, #28]
 8009978:	795b      	ldrb	r3, [r3, #5]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d113      	bne.n	80099a6 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800997e:	69fb      	ldr	r3, [r7, #28]
 8009980:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009982:	2b02      	cmp	r3, #2
 8009984:	d003      	beq.n	800998e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	799b      	ldrb	r3, [r3, #6]
 800998a:	2b03      	cmp	r3, #3
 800998c:	d10b      	bne.n	80099a6 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	79db      	ldrb	r3, [r3, #7]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d10b      	bne.n	80099ae <USBH_ParseCfgDesc+0x14e>
 8009996:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	2b09      	cmp	r3, #9
 800999c:	d007      	beq.n	80099ae <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800999e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a0:	2209      	movs	r2, #9
 80099a2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099a4:	e003      	b.n	80099ae <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80099a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099a8:	2207      	movs	r2, #7
 80099aa:	701a      	strb	r2, [r3, #0]
 80099ac:	e000      	b.n	80099b0 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80099ae:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80099b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80099b4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099b8:	3201      	adds	r2, #1
 80099ba:	00d2      	lsls	r2, r2, #3
 80099bc:	211a      	movs	r1, #26
 80099be:	fb01 f303 	mul.w	r3, r1, r3
 80099c2:	4413      	add	r3, r2
 80099c4:	3308      	adds	r3, #8
 80099c6:	6a3a      	ldr	r2, [r7, #32]
 80099c8:	4413      	add	r3, r2
 80099ca:	3304      	adds	r3, #4
 80099cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80099ce:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80099d0:	69b9      	ldr	r1, [r7, #24]
 80099d2:	68f8      	ldr	r0, [r7, #12]
 80099d4:	f000 f870 	bl	8009ab8 <USBH_ParseEPDesc>
 80099d8:	4603      	mov	r3, r0
 80099da:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 80099de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80099e2:	3301      	adds	r3, #1
 80099e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80099e8:	69fb      	ldr	r3, [r7, #28]
 80099ea:	791b      	ldrb	r3, [r3, #4]
 80099ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099f0:	429a      	cmp	r2, r3
 80099f2:	d204      	bcs.n	80099fe <USBH_ParseCfgDesc+0x19e>
 80099f4:	6a3b      	ldr	r3, [r7, #32]
 80099f6:	885a      	ldrh	r2, [r3, #2]
 80099f8:	8afb      	ldrh	r3, [r7, #22]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d8b0      	bhi.n	8009960 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	791b      	ldrb	r3, [r3, #4]
 8009a02:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a06:	429a      	cmp	r2, r3
 8009a08:	d201      	bcs.n	8009a0e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009a0a:	2303      	movs	r3, #3
 8009a0c:	e01c      	b.n	8009a48 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009a0e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a12:	3301      	adds	r3, #1
 8009a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009a18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a1c:	2b01      	cmp	r3, #1
 8009a1e:	d805      	bhi.n	8009a2c <USBH_ParseCfgDesc+0x1cc>
 8009a20:	6a3b      	ldr	r3, [r7, #32]
 8009a22:	885a      	ldrh	r2, [r3, #2]
 8009a24:	8afb      	ldrh	r3, [r7, #22]
 8009a26:	429a      	cmp	r2, r3
 8009a28:	f63f af74 	bhi.w	8009914 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009a2c:	6a3b      	ldr	r3, [r7, #32]
 8009a2e:	791b      	ldrb	r3, [r3, #4]
 8009a30:	2b02      	cmp	r3, #2
 8009a32:	bf28      	it	cs
 8009a34:	2302      	movcs	r3, #2
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d201      	bcs.n	8009a44 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009a40:	2303      	movs	r3, #3
 8009a42:	e001      	b.n	8009a48 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009a44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3730      	adds	r7, #48	@ 0x30
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}

08009a50 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b083      	sub	sp, #12
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
 8009a58:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009a5a:	683b      	ldr	r3, [r7, #0]
 8009a5c:	781a      	ldrb	r2, [r3, #0]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	785a      	ldrb	r2, [r3, #1]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	789a      	ldrb	r2, [r3, #2]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009a72:	683b      	ldr	r3, [r7, #0]
 8009a74:	78da      	ldrb	r2, [r3, #3]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	3304      	adds	r3, #4
 8009a7e:	781b      	ldrb	r3, [r3, #0]
 8009a80:	2b02      	cmp	r3, #2
 8009a82:	bf28      	it	cs
 8009a84:	2302      	movcs	r3, #2
 8009a86:	b2da      	uxtb	r2, r3
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009a8c:	683b      	ldr	r3, [r7, #0]
 8009a8e:	795a      	ldrb	r2, [r3, #5]
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	799a      	ldrb	r2, [r3, #6]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009a9c:	683b      	ldr	r3, [r7, #0]
 8009a9e:	79da      	ldrb	r2, [r3, #7]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	7a1a      	ldrb	r2, [r3, #8]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	721a      	strb	r2, [r3, #8]
}
 8009aac:	bf00      	nop
 8009aae:	370c      	adds	r7, #12
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr

08009ab8 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009ab8:	b480      	push	{r7}
 8009aba:	b087      	sub	sp, #28
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	60f8      	str	r0, [r7, #12]
 8009ac0:	60b9      	str	r1, [r7, #8]
 8009ac2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	781a      	ldrb	r2, [r3, #0]
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	785a      	ldrb	r2, [r3, #1]
 8009ad4:	68bb      	ldr	r3, [r7, #8]
 8009ad6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	789a      	ldrb	r2, [r3, #2]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	78da      	ldrb	r2, [r3, #3]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	3304      	adds	r3, #4
 8009aec:	781b      	ldrb	r3, [r3, #0]
 8009aee:	461a      	mov	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	3305      	adds	r3, #5
 8009af4:	781b      	ldrb	r3, [r3, #0]
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	b29b      	uxth	r3, r3
 8009afa:	4313      	orrs	r3, r2
 8009afc:	b29a      	uxth	r2, r3
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	799a      	ldrb	r2, [r3, #6]
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	889b      	ldrh	r3, [r3, #4]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d009      	beq.n	8009b26 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009b1a:	d804      	bhi.n	8009b26 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009b20:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b24:	d901      	bls.n	8009b2a <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009b26:	2303      	movs	r3, #3
 8009b28:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d136      	bne.n	8009ba2 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	78db      	ldrb	r3, [r3, #3]
 8009b38:	f003 0303 	and.w	r3, r3, #3
 8009b3c:	2b02      	cmp	r3, #2
 8009b3e:	d108      	bne.n	8009b52 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	889b      	ldrh	r3, [r3, #4]
 8009b44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b48:	f240 8097 	bls.w	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b4c:	2303      	movs	r3, #3
 8009b4e:	75fb      	strb	r3, [r7, #23]
 8009b50:	e093      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	78db      	ldrb	r3, [r3, #3]
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d107      	bne.n	8009b6e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009b5e:	68bb      	ldr	r3, [r7, #8]
 8009b60:	889b      	ldrh	r3, [r3, #4]
 8009b62:	2b40      	cmp	r3, #64	@ 0x40
 8009b64:	f240 8089 	bls.w	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009b68:	2303      	movs	r3, #3
 8009b6a:	75fb      	strb	r3, [r7, #23]
 8009b6c:	e085      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b6e:	68bb      	ldr	r3, [r7, #8]
 8009b70:	78db      	ldrb	r3, [r3, #3]
 8009b72:	f003 0303 	and.w	r3, r3, #3
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	d005      	beq.n	8009b86 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	78db      	ldrb	r3, [r3, #3]
 8009b7e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009b82:	2b03      	cmp	r3, #3
 8009b84:	d10a      	bne.n	8009b9c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	799b      	ldrb	r3, [r3, #6]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d003      	beq.n	8009b96 <USBH_ParseEPDesc+0xde>
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	799b      	ldrb	r3, [r3, #6]
 8009b92:	2b10      	cmp	r3, #16
 8009b94:	d970      	bls.n	8009c78 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009b96:	2303      	movs	r3, #3
 8009b98:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009b9a:	e06d      	b.n	8009c78 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	75fb      	strb	r3, [r7, #23]
 8009ba0:	e06b      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d13c      	bne.n	8009c26 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	78db      	ldrb	r3, [r3, #3]
 8009bb0:	f003 0303 	and.w	r3, r3, #3
 8009bb4:	2b02      	cmp	r3, #2
 8009bb6:	d005      	beq.n	8009bc4 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	78db      	ldrb	r3, [r3, #3]
 8009bbc:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d106      	bne.n	8009bd2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	889b      	ldrh	r3, [r3, #4]
 8009bc8:	2b40      	cmp	r3, #64	@ 0x40
 8009bca:	d956      	bls.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bcc:	2303      	movs	r3, #3
 8009bce:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009bd0:	e053      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	78db      	ldrb	r3, [r3, #3]
 8009bd6:	f003 0303 	and.w	r3, r3, #3
 8009bda:	2b01      	cmp	r3, #1
 8009bdc:	d10e      	bne.n	8009bfc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	799b      	ldrb	r3, [r3, #6]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d007      	beq.n	8009bf6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009bea:	2b10      	cmp	r3, #16
 8009bec:	d803      	bhi.n	8009bf6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009bf2:	2b40      	cmp	r3, #64	@ 0x40
 8009bf4:	d941      	bls.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009bf6:	2303      	movs	r3, #3
 8009bf8:	75fb      	strb	r3, [r7, #23]
 8009bfa:	e03e      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	78db      	ldrb	r3, [r3, #3]
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	2b03      	cmp	r3, #3
 8009c06:	d10b      	bne.n	8009c20 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	799b      	ldrb	r3, [r3, #6]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d004      	beq.n	8009c1a <USBH_ParseEPDesc+0x162>
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	889b      	ldrh	r3, [r3, #4]
 8009c14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c18:	d32f      	bcc.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c1a:	2303      	movs	r3, #3
 8009c1c:	75fb      	strb	r3, [r7, #23]
 8009c1e:	e02c      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c20:	2303      	movs	r3, #3
 8009c22:	75fb      	strb	r3, [r7, #23]
 8009c24:	e029      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c2c:	2b02      	cmp	r3, #2
 8009c2e:	d120      	bne.n	8009c72 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c30:	68bb      	ldr	r3, [r7, #8]
 8009c32:	78db      	ldrb	r3, [r3, #3]
 8009c34:	f003 0303 	and.w	r3, r3, #3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d106      	bne.n	8009c4a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009c3c:	68bb      	ldr	r3, [r7, #8]
 8009c3e:	889b      	ldrh	r3, [r3, #4]
 8009c40:	2b08      	cmp	r3, #8
 8009c42:	d01a      	beq.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c44:	2303      	movs	r3, #3
 8009c46:	75fb      	strb	r3, [r7, #23]
 8009c48:	e017      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	78db      	ldrb	r3, [r3, #3]
 8009c4e:	f003 0303 	and.w	r3, r3, #3
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d10a      	bne.n	8009c6c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	799b      	ldrb	r3, [r3, #6]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d003      	beq.n	8009c66 <USBH_ParseEPDesc+0x1ae>
 8009c5e:	68bb      	ldr	r3, [r7, #8]
 8009c60:	889b      	ldrh	r3, [r3, #4]
 8009c62:	2b08      	cmp	r3, #8
 8009c64:	d909      	bls.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c66:	2303      	movs	r3, #3
 8009c68:	75fb      	strb	r3, [r7, #23]
 8009c6a:	e006      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	75fb      	strb	r3, [r7, #23]
 8009c70:	e003      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009c72:	2303      	movs	r3, #3
 8009c74:	75fb      	strb	r3, [r7, #23]
 8009c76:	e000      	b.n	8009c7a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c78:	bf00      	nop
  }

  return status;
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	371c      	adds	r7, #28
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b087      	sub	sp, #28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	4613      	mov	r3, r2
 8009c94:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	781b      	ldrb	r3, [r3, #0]
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d120      	bne.n	8009ce2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	1e9a      	subs	r2, r3, #2
 8009ca6:	88fb      	ldrh	r3, [r7, #6]
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	bf28      	it	cs
 8009cac:	4613      	movcs	r3, r2
 8009cae:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	3302      	adds	r3, #2
 8009cb4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	82fb      	strh	r3, [r7, #22]
 8009cba:	e00b      	b.n	8009cd4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009cbc:	8afb      	ldrh	r3, [r7, #22]
 8009cbe:	68fa      	ldr	r2, [r7, #12]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	781a      	ldrb	r2, [r3, #0]
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	3301      	adds	r3, #1
 8009ccc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009cce:	8afb      	ldrh	r3, [r7, #22]
 8009cd0:	3302      	adds	r3, #2
 8009cd2:	82fb      	strh	r3, [r7, #22]
 8009cd4:	8afa      	ldrh	r2, [r7, #22]
 8009cd6:	8abb      	ldrh	r3, [r7, #20]
 8009cd8:	429a      	cmp	r2, r3
 8009cda:	d3ef      	bcc.n	8009cbc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	701a      	strb	r2, [r3, #0]
  }
}
 8009ce2:	bf00      	nop
 8009ce4:	371c      	adds	r7, #28
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	881b      	ldrh	r3, [r3, #0]
 8009cfc:	687a      	ldr	r2, [r7, #4]
 8009cfe:	7812      	ldrb	r2, [r2, #0]
 8009d00:	4413      	add	r3, r2
 8009d02:	b29a      	uxth	r2, r3
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4413      	add	r3, r2
 8009d12:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009d14:	68fb      	ldr	r3, [r7, #12]
}
 8009d16:	4618      	mov	r0, r3
 8009d18:	3714      	adds	r7, #20
 8009d1a:	46bd      	mov	sp, r7
 8009d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d20:	4770      	bx	lr

08009d22 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009d22:	b580      	push	{r7, lr}
 8009d24:	b086      	sub	sp, #24
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	60f8      	str	r0, [r7, #12]
 8009d2a:	60b9      	str	r1, [r7, #8]
 8009d2c:	4613      	mov	r3, r2
 8009d2e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009d30:	2301      	movs	r3, #1
 8009d32:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	789b      	ldrb	r3, [r3, #2]
 8009d38:	2b01      	cmp	r3, #1
 8009d3a:	d002      	beq.n	8009d42 <USBH_CtlReq+0x20>
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d00f      	beq.n	8009d60 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009d40:	e027      	b.n	8009d92 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	88fa      	ldrh	r2, [r7, #6]
 8009d4c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	2201      	movs	r2, #1
 8009d52:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2202      	movs	r2, #2
 8009d58:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	75fb      	strb	r3, [r7, #23]
      break;
 8009d5e:	e018      	b.n	8009d92 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009d60:	68f8      	ldr	r0, [r7, #12]
 8009d62:	f000 f81b 	bl	8009d9c <USBH_HandleControl>
 8009d66:	4603      	mov	r3, r0
 8009d68:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009d6a:	7dfb      	ldrb	r3, [r7, #23]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d002      	beq.n	8009d76 <USBH_CtlReq+0x54>
 8009d70:	7dfb      	ldrb	r3, [r7, #23]
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d106      	bne.n	8009d84 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	2200      	movs	r2, #0
 8009d80:	761a      	strb	r2, [r3, #24]
      break;
 8009d82:	e005      	b.n	8009d90 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009d84:	7dfb      	ldrb	r3, [r7, #23]
 8009d86:	2b02      	cmp	r3, #2
 8009d88:	d102      	bne.n	8009d90 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	2201      	movs	r2, #1
 8009d8e:	709a      	strb	r2, [r3, #2]
      break;
 8009d90:	bf00      	nop
  }
  return status;
 8009d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d94:	4618      	mov	r0, r3
 8009d96:	3718      	adds	r7, #24
 8009d98:	46bd      	mov	sp, r7
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af02      	add	r7, sp, #8
 8009da2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009da4:	2301      	movs	r3, #1
 8009da6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009da8:	2300      	movs	r3, #0
 8009daa:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	7e1b      	ldrb	r3, [r3, #24]
 8009db0:	3b01      	subs	r3, #1
 8009db2:	2b0a      	cmp	r3, #10
 8009db4:	f200 8156 	bhi.w	800a064 <USBH_HandleControl+0x2c8>
 8009db8:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc0 <USBH_HandleControl+0x24>)
 8009dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dbe:	bf00      	nop
 8009dc0:	08009ded 	.word	0x08009ded
 8009dc4:	08009e07 	.word	0x08009e07
 8009dc8:	08009e71 	.word	0x08009e71
 8009dcc:	08009e97 	.word	0x08009e97
 8009dd0:	08009ecf 	.word	0x08009ecf
 8009dd4:	08009ef9 	.word	0x08009ef9
 8009dd8:	08009f4b 	.word	0x08009f4b
 8009ddc:	08009f6d 	.word	0x08009f6d
 8009de0:	08009fa9 	.word	0x08009fa9
 8009de4:	08009fcf 	.word	0x08009fcf
 8009de8:	0800a00d 	.word	0x0800a00d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f103 0110 	add.w	r1, r3, #16
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	795b      	ldrb	r3, [r3, #5]
 8009df6:	461a      	mov	r2, r3
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f943 	bl	800a084 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2202      	movs	r2, #2
 8009e02:	761a      	strb	r2, [r3, #24]
      break;
 8009e04:	e139      	b.n	800a07a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	795b      	ldrb	r3, [r3, #5]
 8009e0a:	4619      	mov	r1, r3
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 fcc5 	bl	800a79c <USBH_LL_GetURBState>
 8009e12:	4603      	mov	r3, r0
 8009e14:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009e16:	7bbb      	ldrb	r3, [r7, #14]
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d11e      	bne.n	8009e5a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	7c1b      	ldrb	r3, [r3, #16]
 8009e20:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009e24:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	8adb      	ldrh	r3, [r3, #22]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d00a      	beq.n	8009e44 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009e2e:	7b7b      	ldrb	r3, [r7, #13]
 8009e30:	2b80      	cmp	r3, #128	@ 0x80
 8009e32:	d103      	bne.n	8009e3c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2203      	movs	r2, #3
 8009e38:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009e3a:	e115      	b.n	800a068 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	2205      	movs	r2, #5
 8009e40:	761a      	strb	r2, [r3, #24]
      break;
 8009e42:	e111      	b.n	800a068 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009e44:	7b7b      	ldrb	r3, [r7, #13]
 8009e46:	2b80      	cmp	r3, #128	@ 0x80
 8009e48:	d103      	bne.n	8009e52 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2209      	movs	r2, #9
 8009e4e:	761a      	strb	r2, [r3, #24]
      break;
 8009e50:	e10a      	b.n	800a068 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	2207      	movs	r2, #7
 8009e56:	761a      	strb	r2, [r3, #24]
      break;
 8009e58:	e106      	b.n	800a068 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009e5a:	7bbb      	ldrb	r3, [r7, #14]
 8009e5c:	2b04      	cmp	r3, #4
 8009e5e:	d003      	beq.n	8009e68 <USBH_HandleControl+0xcc>
 8009e60:	7bbb      	ldrb	r3, [r7, #14]
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	f040 8100 	bne.w	800a068 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	220b      	movs	r2, #11
 8009e6c:	761a      	strb	r2, [r3, #24]
      break;
 8009e6e:	e0fb      	b.n	800a068 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009e76:	b29a      	uxth	r2, r3
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6899      	ldr	r1, [r3, #8]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	899a      	ldrh	r2, [r3, #12]
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	791b      	ldrb	r3, [r3, #4]
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f93a 	bl	800a102 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2204      	movs	r2, #4
 8009e92:	761a      	strb	r2, [r3, #24]
      break;
 8009e94:	e0f1      	b.n	800a07a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	791b      	ldrb	r3, [r3, #4]
 8009e9a:	4619      	mov	r1, r3
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 fc7d 	bl	800a79c <USBH_LL_GetURBState>
 8009ea2:	4603      	mov	r3, r0
 8009ea4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ea6:	7bbb      	ldrb	r3, [r7, #14]
 8009ea8:	2b01      	cmp	r3, #1
 8009eaa:	d102      	bne.n	8009eb2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2209      	movs	r2, #9
 8009eb0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009eb2:	7bbb      	ldrb	r3, [r7, #14]
 8009eb4:	2b05      	cmp	r3, #5
 8009eb6:	d102      	bne.n	8009ebe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009ebc:	e0d6      	b.n	800a06c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009ebe:	7bbb      	ldrb	r3, [r7, #14]
 8009ec0:	2b04      	cmp	r3, #4
 8009ec2:	f040 80d3 	bne.w	800a06c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	220b      	movs	r2, #11
 8009eca:	761a      	strb	r2, [r3, #24]
      break;
 8009ecc:	e0ce      	b.n	800a06c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6899      	ldr	r1, [r3, #8]
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	899a      	ldrh	r2, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	795b      	ldrb	r3, [r3, #5]
 8009eda:	2001      	movs	r0, #1
 8009edc:	9000      	str	r0, [sp, #0]
 8009ede:	6878      	ldr	r0, [r7, #4]
 8009ee0:	f000 f8ea 	bl	800a0b8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009eea:	b29a      	uxth	r2, r3
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2206      	movs	r2, #6
 8009ef4:	761a      	strb	r2, [r3, #24]
      break;
 8009ef6:	e0c0      	b.n	800a07a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	795b      	ldrb	r3, [r3, #5]
 8009efc:	4619      	mov	r1, r3
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f000 fc4c 	bl	800a79c <USBH_LL_GetURBState>
 8009f04:	4603      	mov	r3, r0
 8009f06:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f08:	7bbb      	ldrb	r3, [r7, #14]
 8009f0a:	2b01      	cmp	r3, #1
 8009f0c:	d103      	bne.n	8009f16 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2207      	movs	r2, #7
 8009f12:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f14:	e0ac      	b.n	800a070 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b05      	cmp	r3, #5
 8009f1a:	d105      	bne.n	8009f28 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	220c      	movs	r2, #12
 8009f20:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009f22:	2303      	movs	r3, #3
 8009f24:	73fb      	strb	r3, [r7, #15]
      break;
 8009f26:	e0a3      	b.n	800a070 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d103      	bne.n	8009f36 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	2205      	movs	r2, #5
 8009f32:	761a      	strb	r2, [r3, #24]
      break;
 8009f34:	e09c      	b.n	800a070 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009f36:	7bbb      	ldrb	r3, [r7, #14]
 8009f38:	2b04      	cmp	r3, #4
 8009f3a:	f040 8099 	bne.w	800a070 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	220b      	movs	r2, #11
 8009f42:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009f44:	2302      	movs	r3, #2
 8009f46:	73fb      	strb	r3, [r7, #15]
      break;
 8009f48:	e092      	b.n	800a070 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	791b      	ldrb	r3, [r3, #4]
 8009f4e:	2200      	movs	r2, #0
 8009f50:	2100      	movs	r1, #0
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 f8d5 	bl	800a102 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2208      	movs	r2, #8
 8009f68:	761a      	strb	r2, [r3, #24]

      break;
 8009f6a:	e086      	b.n	800a07a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	791b      	ldrb	r3, [r3, #4]
 8009f70:	4619      	mov	r1, r3
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	f000 fc12 	bl	800a79c <USBH_LL_GetURBState>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009f7c:	7bbb      	ldrb	r3, [r7, #14]
 8009f7e:	2b01      	cmp	r3, #1
 8009f80:	d105      	bne.n	8009f8e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	220d      	movs	r2, #13
 8009f86:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f8c:	e072      	b.n	800a074 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009f8e:	7bbb      	ldrb	r3, [r7, #14]
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d103      	bne.n	8009f9c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	220b      	movs	r2, #11
 8009f98:	761a      	strb	r2, [r3, #24]
      break;
 8009f9a:	e06b      	b.n	800a074 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009f9c:	7bbb      	ldrb	r3, [r7, #14]
 8009f9e:	2b05      	cmp	r3, #5
 8009fa0:	d168      	bne.n	800a074 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009fa2:	2303      	movs	r3, #3
 8009fa4:	73fb      	strb	r3, [r7, #15]
      break;
 8009fa6:	e065      	b.n	800a074 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	795b      	ldrb	r3, [r3, #5]
 8009fac:	2201      	movs	r2, #1
 8009fae:	9200      	str	r2, [sp, #0]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 f87f 	bl	800a0b8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fc0:	b29a      	uxth	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	220a      	movs	r2, #10
 8009fca:	761a      	strb	r2, [r3, #24]
      break;
 8009fcc:	e055      	b.n	800a07a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	795b      	ldrb	r3, [r3, #5]
 8009fd2:	4619      	mov	r1, r3
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fbe1 	bl	800a79c <USBH_LL_GetURBState>
 8009fda:	4603      	mov	r3, r0
 8009fdc:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	d105      	bne.n	8009ff0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	220d      	movs	r2, #13
 8009fec:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fee:	e043      	b.n	800a078 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d103      	bne.n	8009ffe <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2209      	movs	r2, #9
 8009ffa:	761a      	strb	r2, [r3, #24]
      break;
 8009ffc:	e03c      	b.n	800a078 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	2b04      	cmp	r3, #4
 800a002:	d139      	bne.n	800a078 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	220b      	movs	r2, #11
 800a008:	761a      	strb	r2, [r3, #24]
      break;
 800a00a:	e035      	b.n	800a078 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	7e5b      	ldrb	r3, [r3, #25]
 800a010:	3301      	adds	r3, #1
 800a012:	b2da      	uxtb	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	765a      	strb	r2, [r3, #25]
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	7e5b      	ldrb	r3, [r3, #25]
 800a01c:	2b02      	cmp	r3, #2
 800a01e:	d806      	bhi.n	800a02e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	2201      	movs	r2, #1
 800a024:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a02c:	e025      	b.n	800a07a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a034:	2106      	movs	r1, #6
 800a036:	6878      	ldr	r0, [r7, #4]
 800a038:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	795b      	ldrb	r3, [r3, #5]
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f000 f90c 	bl	800a264 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	791b      	ldrb	r3, [r3, #4]
 800a050:	4619      	mov	r1, r3
 800a052:	6878      	ldr	r0, [r7, #4]
 800a054:	f000 f906 	bl	800a264 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	2200      	movs	r2, #0
 800a05c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a05e:	2302      	movs	r3, #2
 800a060:	73fb      	strb	r3, [r7, #15]
      break;
 800a062:	e00a      	b.n	800a07a <USBH_HandleControl+0x2de>

    default:
      break;
 800a064:	bf00      	nop
 800a066:	e008      	b.n	800a07a <USBH_HandleControl+0x2de>
      break;
 800a068:	bf00      	nop
 800a06a:	e006      	b.n	800a07a <USBH_HandleControl+0x2de>
      break;
 800a06c:	bf00      	nop
 800a06e:	e004      	b.n	800a07a <USBH_HandleControl+0x2de>
      break;
 800a070:	bf00      	nop
 800a072:	e002      	b.n	800a07a <USBH_HandleControl+0x2de>
      break;
 800a074:	bf00      	nop
 800a076:	e000      	b.n	800a07a <USBH_HandleControl+0x2de>
      break;
 800a078:	bf00      	nop
  }

  return status;
 800a07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07c:	4618      	mov	r0, r3
 800a07e:	3710      	adds	r7, #16
 800a080:	46bd      	mov	sp, r7
 800a082:	bd80      	pop	{r7, pc}

0800a084 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b088      	sub	sp, #32
 800a088:	af04      	add	r7, sp, #16
 800a08a:	60f8      	str	r0, [r7, #12]
 800a08c:	60b9      	str	r1, [r7, #8]
 800a08e:	4613      	mov	r3, r2
 800a090:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a092:	79f9      	ldrb	r1, [r7, #7]
 800a094:	2300      	movs	r3, #0
 800a096:	9303      	str	r3, [sp, #12]
 800a098:	2308      	movs	r3, #8
 800a09a:	9302      	str	r3, [sp, #8]
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f000 fb46 	bl	800a73a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a0ae:	2300      	movs	r3, #0
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af04      	add	r7, sp, #16
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	4611      	mov	r1, r2
 800a0c4:	461a      	mov	r2, r3
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	80fb      	strh	r3, [r7, #6]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a0d8:	2300      	movs	r3, #0
 800a0da:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a0dc:	7979      	ldrb	r1, [r7, #5]
 800a0de:	7e3b      	ldrb	r3, [r7, #24]
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	88fb      	ldrh	r3, [r7, #6]
 800a0e4:	9302      	str	r3, [sp, #8]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	9300      	str	r3, [sp, #0]
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fb21 	bl	800a73a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a0f8:	2300      	movs	r3, #0
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3710      	adds	r7, #16
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}

0800a102 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a102:	b580      	push	{r7, lr}
 800a104:	b088      	sub	sp, #32
 800a106:	af04      	add	r7, sp, #16
 800a108:	60f8      	str	r0, [r7, #12]
 800a10a:	60b9      	str	r1, [r7, #8]
 800a10c:	4611      	mov	r1, r2
 800a10e:	461a      	mov	r2, r3
 800a110:	460b      	mov	r3, r1
 800a112:	80fb      	strh	r3, [r7, #6]
 800a114:	4613      	mov	r3, r2
 800a116:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a118:	7979      	ldrb	r1, [r7, #5]
 800a11a:	2300      	movs	r3, #0
 800a11c:	9303      	str	r3, [sp, #12]
 800a11e:	88fb      	ldrh	r3, [r7, #6]
 800a120:	9302      	str	r3, [sp, #8]
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	9301      	str	r3, [sp, #4]
 800a126:	2301      	movs	r3, #1
 800a128:	9300      	str	r3, [sp, #0]
 800a12a:	2300      	movs	r3, #0
 800a12c:	2201      	movs	r2, #1
 800a12e:	68f8      	ldr	r0, [r7, #12]
 800a130:	f000 fb03 	bl	800a73a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a134:	2300      	movs	r3, #0

}
 800a136:	4618      	mov	r0, r3
 800a138:	3710      	adds	r7, #16
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	af04      	add	r7, sp, #16
 800a144:	60f8      	str	r0, [r7, #12]
 800a146:	60b9      	str	r1, [r7, #8]
 800a148:	4611      	mov	r1, r2
 800a14a:	461a      	mov	r2, r3
 800a14c:	460b      	mov	r3, r1
 800a14e:	80fb      	strh	r3, [r7, #6]
 800a150:	4613      	mov	r3, r2
 800a152:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a15e:	2300      	movs	r3, #0
 800a160:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a162:	7979      	ldrb	r1, [r7, #5]
 800a164:	7e3b      	ldrb	r3, [r7, #24]
 800a166:	9303      	str	r3, [sp, #12]
 800a168:	88fb      	ldrh	r3, [r7, #6]
 800a16a:	9302      	str	r3, [sp, #8]
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	9301      	str	r3, [sp, #4]
 800a170:	2301      	movs	r3, #1
 800a172:	9300      	str	r3, [sp, #0]
 800a174:	2302      	movs	r3, #2
 800a176:	2200      	movs	r2, #0
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 fade 	bl	800a73a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b088      	sub	sp, #32
 800a18c:	af04      	add	r7, sp, #16
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	4611      	mov	r1, r2
 800a194:	461a      	mov	r2, r3
 800a196:	460b      	mov	r3, r1
 800a198:	80fb      	strh	r3, [r7, #6]
 800a19a:	4613      	mov	r3, r2
 800a19c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a19e:	7979      	ldrb	r1, [r7, #5]
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	9303      	str	r3, [sp, #12]
 800a1a4:	88fb      	ldrh	r3, [r7, #6]
 800a1a6:	9302      	str	r3, [sp, #8]
 800a1a8:	68bb      	ldr	r3, [r7, #8]
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	9300      	str	r3, [sp, #0]
 800a1b0:	2302      	movs	r3, #2
 800a1b2:	2201      	movs	r2, #1
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 fac0 	bl	800a73a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3710      	adds	r7, #16
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}

0800a1c4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b086      	sub	sp, #24
 800a1c8:	af04      	add	r7, sp, #16
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	4608      	mov	r0, r1
 800a1ce:	4611      	mov	r1, r2
 800a1d0:	461a      	mov	r2, r3
 800a1d2:	4603      	mov	r3, r0
 800a1d4:	70fb      	strb	r3, [r7, #3]
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	70bb      	strb	r3, [r7, #2]
 800a1da:	4613      	mov	r3, r2
 800a1dc:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a1de:	7878      	ldrb	r0, [r7, #1]
 800a1e0:	78ba      	ldrb	r2, [r7, #2]
 800a1e2:	78f9      	ldrb	r1, [r7, #3]
 800a1e4:	8b3b      	ldrh	r3, [r7, #24]
 800a1e6:	9302      	str	r3, [sp, #8]
 800a1e8:	7d3b      	ldrb	r3, [r7, #20]
 800a1ea:	9301      	str	r3, [sp, #4]
 800a1ec:	7c3b      	ldrb	r3, [r7, #16]
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f000 fa53 	bl	800a69e <USBH_LL_OpenPipe>

  return USBH_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b082      	sub	sp, #8
 800a206:	af00      	add	r7, sp, #0
 800a208:	6078      	str	r0, [r7, #4]
 800a20a:	460b      	mov	r3, r1
 800a20c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a20e:	78fb      	ldrb	r3, [r7, #3]
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f000 fa72 	bl	800a6fc <USBH_LL_ClosePipe>

  return USBH_OK;
 800a218:	2300      	movs	r3, #0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}

0800a222 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a222:	b580      	push	{r7, lr}
 800a224:	b084      	sub	sp, #16
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	460b      	mov	r3, r1
 800a22c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 f836 	bl	800a2a0 <USBH_GetFreePipe>
 800a234:	4603      	mov	r3, r0
 800a236:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a238:	89fb      	ldrh	r3, [r7, #14]
 800a23a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a23e:	4293      	cmp	r3, r2
 800a240:	d00a      	beq.n	800a258 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a242:	78fa      	ldrb	r2, [r7, #3]
 800a244:	89fb      	ldrh	r3, [r7, #14]
 800a246:	f003 030f 	and.w	r3, r3, #15
 800a24a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a24e:	6879      	ldr	r1, [r7, #4]
 800a250:	33e0      	adds	r3, #224	@ 0xe0
 800a252:	009b      	lsls	r3, r3, #2
 800a254:	440b      	add	r3, r1
 800a256:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a258:	89fb      	ldrh	r3, [r7, #14]
 800a25a:	b2db      	uxtb	r3, r3
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a264:	b480      	push	{r7}
 800a266:	b083      	sub	sp, #12
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	460b      	mov	r3, r1
 800a26e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a270:	78fb      	ldrb	r3, [r7, #3]
 800a272:	2b0f      	cmp	r3, #15
 800a274:	d80d      	bhi.n	800a292 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a276:	78fb      	ldrb	r3, [r7, #3]
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	33e0      	adds	r3, #224	@ 0xe0
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	4413      	add	r3, r2
 800a280:	685a      	ldr	r2, [r3, #4]
 800a282:	78fb      	ldrb	r3, [r7, #3]
 800a284:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a288:	6879      	ldr	r1, [r7, #4]
 800a28a:	33e0      	adds	r3, #224	@ 0xe0
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	440b      	add	r3, r1
 800a290:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b085      	sub	sp, #20
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	73fb      	strb	r3, [r7, #15]
 800a2b0:	e00f      	b.n	800a2d2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
 800a2b4:	687a      	ldr	r2, [r7, #4]
 800a2b6:	33e0      	adds	r3, #224	@ 0xe0
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	4413      	add	r3, r2
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a2c6:	7bfb      	ldrb	r3, [r7, #15]
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	e007      	b.n	800a2dc <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
 800a2ce:	3301      	adds	r3, #1
 800a2d0:	73fb      	strb	r3, [r7, #15]
 800a2d2:	7bfb      	ldrb	r3, [r7, #15]
 800a2d4:	2b0f      	cmp	r3, #15
 800a2d6:	d9ec      	bls.n	800a2b2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a2d8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a2ec:	2201      	movs	r2, #1
 800a2ee:	490e      	ldr	r1, [pc, #56]	@ (800a328 <MX_USB_HOST_Init+0x40>)
 800a2f0:	480e      	ldr	r0, [pc, #56]	@ (800a32c <MX_USB_HOST_Init+0x44>)
 800a2f2:	f7fe fb15 	bl	8008920 <USBH_Init>
 800a2f6:	4603      	mov	r3, r0
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d001      	beq.n	800a300 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a2fc:	f7f7 f95a 	bl	80015b4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a300:	490b      	ldr	r1, [pc, #44]	@ (800a330 <MX_USB_HOST_Init+0x48>)
 800a302:	480a      	ldr	r0, [pc, #40]	@ (800a32c <MX_USB_HOST_Init+0x44>)
 800a304:	f7fe fbb9 	bl	8008a7a <USBH_RegisterClass>
 800a308:	4603      	mov	r3, r0
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d001      	beq.n	800a312 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a30e:	f7f7 f951 	bl	80015b4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a312:	4806      	ldr	r0, [pc, #24]	@ (800a32c <MX_USB_HOST_Init+0x44>)
 800a314:	f7fe fc3d 	bl	8008b92 <USBH_Start>
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d001      	beq.n	800a322 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a31e:	f7f7 f949 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a322:	bf00      	nop
 800a324:	bd80      	pop	{r7, pc}
 800a326:	bf00      	nop
 800a328:	0800a349 	.word	0x0800a349
 800a32c:	200001f8 	.word	0x200001f8
 800a330:	2000000c 	.word	0x2000000c

0800a334 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a338:	4802      	ldr	r0, [pc, #8]	@ (800a344 <MX_USB_HOST_Process+0x10>)
 800a33a:	f7fe fc3b 	bl	8008bb4 <USBH_Process>
}
 800a33e:	bf00      	nop
 800a340:	bd80      	pop	{r7, pc}
 800a342:	bf00      	nop
 800a344:	200001f8 	.word	0x200001f8

0800a348 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	460b      	mov	r3, r1
 800a352:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a354:	78fb      	ldrb	r3, [r7, #3]
 800a356:	3b01      	subs	r3, #1
 800a358:	2b04      	cmp	r3, #4
 800a35a:	d819      	bhi.n	800a390 <USBH_UserProcess+0x48>
 800a35c:	a201      	add	r2, pc, #4	@ (adr r2, 800a364 <USBH_UserProcess+0x1c>)
 800a35e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a362:	bf00      	nop
 800a364:	0800a391 	.word	0x0800a391
 800a368:	0800a381 	.word	0x0800a381
 800a36c:	0800a391 	.word	0x0800a391
 800a370:	0800a389 	.word	0x0800a389
 800a374:	0800a379 	.word	0x0800a379
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a378:	4b09      	ldr	r3, [pc, #36]	@ (800a3a0 <USBH_UserProcess+0x58>)
 800a37a:	2203      	movs	r2, #3
 800a37c:	701a      	strb	r2, [r3, #0]
  break;
 800a37e:	e008      	b.n	800a392 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a380:	4b07      	ldr	r3, [pc, #28]	@ (800a3a0 <USBH_UserProcess+0x58>)
 800a382:	2202      	movs	r2, #2
 800a384:	701a      	strb	r2, [r3, #0]
  break;
 800a386:	e004      	b.n	800a392 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a388:	4b05      	ldr	r3, [pc, #20]	@ (800a3a0 <USBH_UserProcess+0x58>)
 800a38a:	2201      	movs	r2, #1
 800a38c:	701a      	strb	r2, [r3, #0]
  break;
 800a38e:	e000      	b.n	800a392 <USBH_UserProcess+0x4a>

  default:
  break;
 800a390:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a392:	bf00      	nop
 800a394:	370c      	adds	r7, #12
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	200005d0 	.word	0x200005d0

0800a3a4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b08a      	sub	sp, #40	@ 0x28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ac:	f107 0314 	add.w	r3, r7, #20
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	601a      	str	r2, [r3, #0]
 800a3b4:	605a      	str	r2, [r3, #4]
 800a3b6:	609a      	str	r2, [r3, #8]
 800a3b8:	60da      	str	r2, [r3, #12]
 800a3ba:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a3c4:	d147      	bne.n	800a456 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	613b      	str	r3, [r7, #16]
 800a3ca:	4b25      	ldr	r3, [pc, #148]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a3cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3ce:	4a24      	ldr	r2, [pc, #144]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a3d0:	f043 0301 	orr.w	r3, r3, #1
 800a3d4:	6313      	str	r3, [r2, #48]	@ 0x30
 800a3d6:	4b22      	ldr	r3, [pc, #136]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a3d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a3da:	f003 0301 	and.w	r3, r3, #1
 800a3de:	613b      	str	r3, [r7, #16]
 800a3e0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a3e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a3e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a3e8:	2300      	movs	r3, #0
 800a3ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a3f0:	f107 0314 	add.w	r3, r7, #20
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	481b      	ldr	r0, [pc, #108]	@ (800a464 <HAL_HCD_MspInit+0xc0>)
 800a3f8:	f7f8 f9cc 	bl	8002794 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a3fc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a400:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a402:	2302      	movs	r3, #2
 800a404:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a406:	2300      	movs	r3, #0
 800a408:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a40a:	2300      	movs	r3, #0
 800a40c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a40e:	230a      	movs	r3, #10
 800a410:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a412:	f107 0314 	add.w	r3, r7, #20
 800a416:	4619      	mov	r1, r3
 800a418:	4812      	ldr	r0, [pc, #72]	@ (800a464 <HAL_HCD_MspInit+0xc0>)
 800a41a:	f7f8 f9bb 	bl	8002794 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a41e:	4b10      	ldr	r3, [pc, #64]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a422:	4a0f      	ldr	r2, [pc, #60]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a424:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a428:	6353      	str	r3, [r2, #52]	@ 0x34
 800a42a:	2300      	movs	r3, #0
 800a42c:	60fb      	str	r3, [r7, #12]
 800a42e:	4b0c      	ldr	r3, [pc, #48]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a432:	4a0b      	ldr	r2, [pc, #44]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a434:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a438:	6453      	str	r3, [r2, #68]	@ 0x44
 800a43a:	4b09      	ldr	r3, [pc, #36]	@ (800a460 <HAL_HCD_MspInit+0xbc>)
 800a43c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a43e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a442:	60fb      	str	r3, [r7, #12]
 800a444:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a446:	2200      	movs	r2, #0
 800a448:	2100      	movs	r1, #0
 800a44a:	2043      	movs	r0, #67	@ 0x43
 800a44c:	f7f8 f96b 	bl	8002726 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a450:	2043      	movs	r0, #67	@ 0x43
 800a452:	f7f8 f984 	bl	800275e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a456:	bf00      	nop
 800a458:	3728      	adds	r7, #40	@ 0x28
 800a45a:	46bd      	mov	sp, r7
 800a45c:	bd80      	pop	{r7, pc}
 800a45e:	bf00      	nop
 800a460:	40023800 	.word	0x40023800
 800a464:	40020000 	.word	0x40020000

0800a468 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b082      	sub	sp, #8
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a476:	4618      	mov	r0, r3
 800a478:	f7fe ff73 	bl	8009362 <USBH_LL_IncTimer>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}

0800a484 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a484:	b580      	push	{r7, lr}
 800a486:	b082      	sub	sp, #8
 800a488:	af00      	add	r7, sp, #0
 800a48a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a492:	4618      	mov	r0, r3
 800a494:	f7fe ffab 	bl	80093ee <USBH_LL_Connect>
}
 800a498:	bf00      	nop
 800a49a:	3708      	adds	r7, #8
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe ffb4 	bl	800941c <USBH_LL_Disconnect>
}
 800a4b4:	bf00      	nop
 800a4b6:	3708      	adds	r7, #8
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b083      	sub	sp, #12
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	460b      	mov	r3, r1
 800a4c6:	70fb      	strb	r3, [r7, #3]
 800a4c8:	4613      	mov	r3, r2
 800a4ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr

0800a4d8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b082      	sub	sp, #8
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	f7fe ff65 	bl	80093b6 <USBH_LL_PortEnabled>
}
 800a4ec:	bf00      	nop
 800a4ee:	3708      	adds	r7, #8
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b082      	sub	sp, #8
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a502:	4618      	mov	r0, r3
 800a504:	f7fe ff65 	bl	80093d2 <USBH_LL_PortDisabled>
}
 800a508:	bf00      	nop
 800a50a:	3708      	adds	r7, #8
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}

0800a510 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a510:	b580      	push	{r7, lr}
 800a512:	b082      	sub	sp, #8
 800a514:	af00      	add	r7, sp, #0
 800a516:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d12a      	bne.n	800a578 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a522:	4a18      	ldr	r2, [pc, #96]	@ (800a584 <USBH_LL_Init+0x74>)
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	4a15      	ldr	r2, [pc, #84]	@ (800a584 <USBH_LL_Init+0x74>)
 800a52e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a532:	4b14      	ldr	r3, [pc, #80]	@ (800a584 <USBH_LL_Init+0x74>)
 800a534:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a538:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a53a:	4b12      	ldr	r3, [pc, #72]	@ (800a584 <USBH_LL_Init+0x74>)
 800a53c:	2208      	movs	r2, #8
 800a53e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a540:	4b10      	ldr	r3, [pc, #64]	@ (800a584 <USBH_LL_Init+0x74>)
 800a542:	2201      	movs	r2, #1
 800a544:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a546:	4b0f      	ldr	r3, [pc, #60]	@ (800a584 <USBH_LL_Init+0x74>)
 800a548:	2200      	movs	r2, #0
 800a54a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a54c:	4b0d      	ldr	r3, [pc, #52]	@ (800a584 <USBH_LL_Init+0x74>)
 800a54e:	2202      	movs	r2, #2
 800a550:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a552:	4b0c      	ldr	r3, [pc, #48]	@ (800a584 <USBH_LL_Init+0x74>)
 800a554:	2200      	movs	r2, #0
 800a556:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a558:	480a      	ldr	r0, [pc, #40]	@ (800a584 <USBH_LL_Init+0x74>)
 800a55a:	f7f8 fad0 	bl	8002afe <HAL_HCD_Init>
 800a55e:	4603      	mov	r3, r0
 800a560:	2b00      	cmp	r3, #0
 800a562:	d001      	beq.n	800a568 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a564:	f7f7 f826 	bl	80015b4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a568:	4806      	ldr	r0, [pc, #24]	@ (800a584 <USBH_LL_Init+0x74>)
 800a56a:	f7f8 ff31 	bl	80033d0 <HAL_HCD_GetCurrentFrame>
 800a56e:	4603      	mov	r3, r0
 800a570:	4619      	mov	r1, r3
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f7fe fee6 	bl	8009344 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a578:	2300      	movs	r3, #0
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	200005d4 	.word	0x200005d4

0800a588 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a590:	2300      	movs	r3, #0
 800a592:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a594:	2300      	movs	r3, #0
 800a596:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7f8 fe9e 	bl	80032e0 <HAL_HCD_Start>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5a8:	7bfb      	ldrb	r3, [r7, #15]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 f95e 	bl	800a86c <USBH_Get_USB_Status>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	3710      	adds	r7, #16
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	bd80      	pop	{r7, pc}

0800a5be <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a5be:	b580      	push	{r7, lr}
 800a5c0:	b084      	sub	sp, #16
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a5ca:	2300      	movs	r3, #0
 800a5cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f7f8 fea6 	bl	8003326 <HAL_HCD_Stop>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a5de:	7bfb      	ldrb	r3, [r7, #15]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f000 f943 	bl	800a86c <USBH_Get_USB_Status>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5ea:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	3710      	adds	r7, #16
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	bd80      	pop	{r7, pc}

0800a5f4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	b084      	sub	sp, #16
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a5fc:	2301      	movs	r3, #1
 800a5fe:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a606:	4618      	mov	r0, r3
 800a608:	f7f8 fef0 	bl	80033ec <HAL_HCD_GetCurrentSpeed>
 800a60c:	4603      	mov	r3, r0
 800a60e:	2b02      	cmp	r3, #2
 800a610:	d00c      	beq.n	800a62c <USBH_LL_GetSpeed+0x38>
 800a612:	2b02      	cmp	r3, #2
 800a614:	d80d      	bhi.n	800a632 <USBH_LL_GetSpeed+0x3e>
 800a616:	2b00      	cmp	r3, #0
 800a618:	d002      	beq.n	800a620 <USBH_LL_GetSpeed+0x2c>
 800a61a:	2b01      	cmp	r3, #1
 800a61c:	d003      	beq.n	800a626 <USBH_LL_GetSpeed+0x32>
 800a61e:	e008      	b.n	800a632 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a620:	2300      	movs	r3, #0
 800a622:	73fb      	strb	r3, [r7, #15]
    break;
 800a624:	e008      	b.n	800a638 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a626:	2301      	movs	r3, #1
 800a628:	73fb      	strb	r3, [r7, #15]
    break;
 800a62a:	e005      	b.n	800a638 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a62c:	2302      	movs	r3, #2
 800a62e:	73fb      	strb	r3, [r7, #15]
    break;
 800a630:	e002      	b.n	800a638 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a632:	2301      	movs	r3, #1
 800a634:	73fb      	strb	r3, [r7, #15]
    break;
 800a636:	bf00      	nop
  }
  return  speed;
 800a638:	7bfb      	ldrb	r3, [r7, #15]
}
 800a63a:	4618      	mov	r0, r3
 800a63c:	3710      	adds	r7, #16
 800a63e:	46bd      	mov	sp, r7
 800a640:	bd80      	pop	{r7, pc}

0800a642 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a642:	b580      	push	{r7, lr}
 800a644:	b084      	sub	sp, #16
 800a646:	af00      	add	r7, sp, #0
 800a648:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a64a:	2300      	movs	r3, #0
 800a64c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a64e:	2300      	movs	r3, #0
 800a650:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a658:	4618      	mov	r0, r3
 800a65a:	f7f8 fe81 	bl	8003360 <HAL_HCD_ResetPort>
 800a65e:	4603      	mov	r3, r0
 800a660:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a662:	7bfb      	ldrb	r3, [r7, #15]
 800a664:	4618      	mov	r0, r3
 800a666:	f000 f901 	bl	800a86c <USBH_Get_USB_Status>
 800a66a:	4603      	mov	r3, r0
 800a66c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a670:	4618      	mov	r0, r3
 800a672:	3710      	adds	r7, #16
 800a674:	46bd      	mov	sp, r7
 800a676:	bd80      	pop	{r7, pc}

0800a678 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a678:	b580      	push	{r7, lr}
 800a67a:	b082      	sub	sp, #8
 800a67c:	af00      	add	r7, sp, #0
 800a67e:	6078      	str	r0, [r7, #4]
 800a680:	460b      	mov	r3, r1
 800a682:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a68a:	78fa      	ldrb	r2, [r7, #3]
 800a68c:	4611      	mov	r1, r2
 800a68e:	4618      	mov	r0, r3
 800a690:	f7f8 fe89 	bl	80033a6 <HAL_HCD_HC_GetXferCount>
 800a694:	4603      	mov	r3, r0
}
 800a696:	4618      	mov	r0, r3
 800a698:	3708      	adds	r7, #8
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a69e:	b590      	push	{r4, r7, lr}
 800a6a0:	b089      	sub	sp, #36	@ 0x24
 800a6a2:	af04      	add	r7, sp, #16
 800a6a4:	6078      	str	r0, [r7, #4]
 800a6a6:	4608      	mov	r0, r1
 800a6a8:	4611      	mov	r1, r2
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	70fb      	strb	r3, [r7, #3]
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	70bb      	strb	r3, [r7, #2]
 800a6b4:	4613      	mov	r3, r2
 800a6b6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b8:	2300      	movs	r3, #0
 800a6ba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a6c6:	787c      	ldrb	r4, [r7, #1]
 800a6c8:	78ba      	ldrb	r2, [r7, #2]
 800a6ca:	78f9      	ldrb	r1, [r7, #3]
 800a6cc:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a6ce:	9302      	str	r3, [sp, #8]
 800a6d0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a6d4:	9301      	str	r3, [sp, #4]
 800a6d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	4623      	mov	r3, r4
 800a6de:	f7f8 fa75 	bl	8002bcc <HAL_HCD_HC_Init>
 800a6e2:	4603      	mov	r3, r0
 800a6e4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6e6:	7bfb      	ldrb	r3, [r7, #15]
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	f000 f8bf 	bl	800a86c <USBH_Get_USB_Status>
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6f4:	4618      	mov	r0, r3
 800a6f6:	3714      	adds	r7, #20
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	bd90      	pop	{r4, r7, pc}

0800a6fc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
 800a704:	460b      	mov	r3, r1
 800a706:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a716:	78fa      	ldrb	r2, [r7, #3]
 800a718:	4611      	mov	r1, r2
 800a71a:	4618      	mov	r0, r3
 800a71c:	f7f8 fb0e 	bl	8002d3c <HAL_HCD_HC_Halt>
 800a720:	4603      	mov	r3, r0
 800a722:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a724:	7bfb      	ldrb	r3, [r7, #15]
 800a726:	4618      	mov	r0, r3
 800a728:	f000 f8a0 	bl	800a86c <USBH_Get_USB_Status>
 800a72c:	4603      	mov	r3, r0
 800a72e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a730:	7bbb      	ldrb	r3, [r7, #14]
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}

0800a73a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a73a:	b590      	push	{r4, r7, lr}
 800a73c:	b089      	sub	sp, #36	@ 0x24
 800a73e:	af04      	add	r7, sp, #16
 800a740:	6078      	str	r0, [r7, #4]
 800a742:	4608      	mov	r0, r1
 800a744:	4611      	mov	r1, r2
 800a746:	461a      	mov	r2, r3
 800a748:	4603      	mov	r3, r0
 800a74a:	70fb      	strb	r3, [r7, #3]
 800a74c:	460b      	mov	r3, r1
 800a74e:	70bb      	strb	r3, [r7, #2]
 800a750:	4613      	mov	r3, r2
 800a752:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a762:	787c      	ldrb	r4, [r7, #1]
 800a764:	78ba      	ldrb	r2, [r7, #2]
 800a766:	78f9      	ldrb	r1, [r7, #3]
 800a768:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a76c:	9303      	str	r3, [sp, #12]
 800a76e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a770:	9302      	str	r3, [sp, #8]
 800a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a774:	9301      	str	r3, [sp, #4]
 800a776:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a77a:	9300      	str	r3, [sp, #0]
 800a77c:	4623      	mov	r3, r4
 800a77e:	f7f8 fb01 	bl	8002d84 <HAL_HCD_HC_SubmitRequest>
 800a782:	4603      	mov	r3, r0
 800a784:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 f86f 	bl	800a86c <USBH_Get_USB_Status>
 800a78e:	4603      	mov	r3, r0
 800a790:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a792:	7bbb      	ldrb	r3, [r7, #14]
}
 800a794:	4618      	mov	r0, r3
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd90      	pop	{r4, r7, pc}

0800a79c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a79c:	b580      	push	{r7, lr}
 800a79e:	b082      	sub	sp, #8
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	6078      	str	r0, [r7, #4]
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7ae:	78fa      	ldrb	r2, [r7, #3]
 800a7b0:	4611      	mov	r1, r2
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	f7f8 fde2 	bl	800337c <HAL_HCD_HC_GetURBState>
 800a7b8:	4603      	mov	r3, r0
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	3708      	adds	r7, #8
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	bd80      	pop	{r7, pc}

0800a7c2 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a7c2:	b580      	push	{r7, lr}
 800a7c4:	b082      	sub	sp, #8
 800a7c6:	af00      	add	r7, sp, #0
 800a7c8:	6078      	str	r0, [r7, #4]
 800a7ca:	460b      	mov	r3, r1
 800a7cc:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d103      	bne.n	800a7e0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a7d8:	78fb      	ldrb	r3, [r7, #3]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 f872 	bl	800a8c4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a7e0:	20c8      	movs	r0, #200	@ 0xc8
 800a7e2:	f7f7 fea1 	bl	8002528 <HAL_Delay>
  return USBH_OK;
 800a7e6:	2300      	movs	r3, #0
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3708      	adds	r7, #8
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b085      	sub	sp, #20
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
 800a7f8:	460b      	mov	r3, r1
 800a7fa:	70fb      	strb	r3, [r7, #3]
 800a7fc:	4613      	mov	r3, r2
 800a7fe:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a806:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a808:	78fa      	ldrb	r2, [r7, #3]
 800a80a:	68f9      	ldr	r1, [r7, #12]
 800a80c:	4613      	mov	r3, r2
 800a80e:	011b      	lsls	r3, r3, #4
 800a810:	1a9b      	subs	r3, r3, r2
 800a812:	009b      	lsls	r3, r3, #2
 800a814:	440b      	add	r3, r1
 800a816:	3317      	adds	r3, #23
 800a818:	781b      	ldrb	r3, [r3, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d00a      	beq.n	800a834 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a81e:	78fa      	ldrb	r2, [r7, #3]
 800a820:	68f9      	ldr	r1, [r7, #12]
 800a822:	4613      	mov	r3, r2
 800a824:	011b      	lsls	r3, r3, #4
 800a826:	1a9b      	subs	r3, r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	440b      	add	r3, r1
 800a82c:	333c      	adds	r3, #60	@ 0x3c
 800a82e:	78ba      	ldrb	r2, [r7, #2]
 800a830:	701a      	strb	r2, [r3, #0]
 800a832:	e009      	b.n	800a848 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a834:	78fa      	ldrb	r2, [r7, #3]
 800a836:	68f9      	ldr	r1, [r7, #12]
 800a838:	4613      	mov	r3, r2
 800a83a:	011b      	lsls	r3, r3, #4
 800a83c:	1a9b      	subs	r3, r3, r2
 800a83e:	009b      	lsls	r3, r3, #2
 800a840:	440b      	add	r3, r1
 800a842:	333d      	adds	r3, #61	@ 0x3d
 800a844:	78ba      	ldrb	r2, [r7, #2]
 800a846:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a848:	2300      	movs	r3, #0
}
 800a84a:	4618      	mov	r0, r3
 800a84c:	3714      	adds	r7, #20
 800a84e:	46bd      	mov	sp, r7
 800a850:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a854:	4770      	bx	lr

0800a856 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a856:	b580      	push	{r7, lr}
 800a858:	b082      	sub	sp, #8
 800a85a:	af00      	add	r7, sp, #0
 800a85c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a85e:	6878      	ldr	r0, [r7, #4]
 800a860:	f7f7 fe62 	bl	8002528 <HAL_Delay>
}
 800a864:	bf00      	nop
 800a866:	3708      	adds	r7, #8
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	4603      	mov	r3, r0
 800a874:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d817      	bhi.n	800a8b0 <USBH_Get_USB_Status+0x44>
 800a880:	a201      	add	r2, pc, #4	@ (adr r2, 800a888 <USBH_Get_USB_Status+0x1c>)
 800a882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a886:	bf00      	nop
 800a888:	0800a899 	.word	0x0800a899
 800a88c:	0800a89f 	.word	0x0800a89f
 800a890:	0800a8a5 	.word	0x0800a8a5
 800a894:	0800a8ab 	.word	0x0800a8ab
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]
    break;
 800a89c:	e00b      	b.n	800a8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a89e:	2302      	movs	r3, #2
 800a8a0:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a2:	e008      	b.n	800a8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a8:	e005      	b.n	800a8b6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ae:	e002      	b.n	800a8b6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a8b0:	2302      	movs	r3, #2
 800a8b2:	73fb      	strb	r3, [r7, #15]
    break;
 800a8b4:	bf00      	nop
  }
  return usb_status;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a8ce:	79fb      	ldrb	r3, [r7, #7]
 800a8d0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a8d2:	79fb      	ldrb	r3, [r7, #7]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d102      	bne.n	800a8de <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a8d8:	2300      	movs	r3, #0
 800a8da:	73fb      	strb	r3, [r7, #15]
 800a8dc:	e001      	b.n	800a8e2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	2101      	movs	r1, #1
 800a8e8:	4803      	ldr	r0, [pc, #12]	@ (800a8f8 <MX_DriverVbusFS+0x34>)
 800a8ea:	f7f8 f8ef 	bl	8002acc <HAL_GPIO_WritePin>
}
 800a8ee:	bf00      	nop
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	40020800 	.word	0x40020800

0800a8fc <malloc>:
 800a8fc:	4b02      	ldr	r3, [pc, #8]	@ (800a908 <malloc+0xc>)
 800a8fe:	4601      	mov	r1, r0
 800a900:	6818      	ldr	r0, [r3, #0]
 800a902:	f000 b82d 	b.w	800a960 <_malloc_r>
 800a906:	bf00      	nop
 800a908:	20000038 	.word	0x20000038

0800a90c <free>:
 800a90c:	4b02      	ldr	r3, [pc, #8]	@ (800a918 <free+0xc>)
 800a90e:	4601      	mov	r1, r0
 800a910:	6818      	ldr	r0, [r3, #0]
 800a912:	f000 bbab 	b.w	800b06c <_free_r>
 800a916:	bf00      	nop
 800a918:	20000038 	.word	0x20000038

0800a91c <sbrk_aligned>:
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	4e0f      	ldr	r6, [pc, #60]	@ (800a95c <sbrk_aligned+0x40>)
 800a920:	460c      	mov	r4, r1
 800a922:	6831      	ldr	r1, [r6, #0]
 800a924:	4605      	mov	r5, r0
 800a926:	b911      	cbnz	r1, 800a92e <sbrk_aligned+0x12>
 800a928:	f000 fb42 	bl	800afb0 <_sbrk_r>
 800a92c:	6030      	str	r0, [r6, #0]
 800a92e:	4621      	mov	r1, r4
 800a930:	4628      	mov	r0, r5
 800a932:	f000 fb3d 	bl	800afb0 <_sbrk_r>
 800a936:	1c43      	adds	r3, r0, #1
 800a938:	d103      	bne.n	800a942 <sbrk_aligned+0x26>
 800a93a:	f04f 34ff 	mov.w	r4, #4294967295
 800a93e:	4620      	mov	r0, r4
 800a940:	bd70      	pop	{r4, r5, r6, pc}
 800a942:	1cc4      	adds	r4, r0, #3
 800a944:	f024 0403 	bic.w	r4, r4, #3
 800a948:	42a0      	cmp	r0, r4
 800a94a:	d0f8      	beq.n	800a93e <sbrk_aligned+0x22>
 800a94c:	1a21      	subs	r1, r4, r0
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 fb2e 	bl	800afb0 <_sbrk_r>
 800a954:	3001      	adds	r0, #1
 800a956:	d1f2      	bne.n	800a93e <sbrk_aligned+0x22>
 800a958:	e7ef      	b.n	800a93a <sbrk_aligned+0x1e>
 800a95a:	bf00      	nop
 800a95c:	200009b4 	.word	0x200009b4

0800a960 <_malloc_r>:
 800a960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a964:	1ccd      	adds	r5, r1, #3
 800a966:	f025 0503 	bic.w	r5, r5, #3
 800a96a:	3508      	adds	r5, #8
 800a96c:	2d0c      	cmp	r5, #12
 800a96e:	bf38      	it	cc
 800a970:	250c      	movcc	r5, #12
 800a972:	2d00      	cmp	r5, #0
 800a974:	4606      	mov	r6, r0
 800a976:	db01      	blt.n	800a97c <_malloc_r+0x1c>
 800a978:	42a9      	cmp	r1, r5
 800a97a:	d904      	bls.n	800a986 <_malloc_r+0x26>
 800a97c:	230c      	movs	r3, #12
 800a97e:	6033      	str	r3, [r6, #0]
 800a980:	2000      	movs	r0, #0
 800a982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a986:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800aa5c <_malloc_r+0xfc>
 800a98a:	f000 f869 	bl	800aa60 <__malloc_lock>
 800a98e:	f8d8 3000 	ldr.w	r3, [r8]
 800a992:	461c      	mov	r4, r3
 800a994:	bb44      	cbnz	r4, 800a9e8 <_malloc_r+0x88>
 800a996:	4629      	mov	r1, r5
 800a998:	4630      	mov	r0, r6
 800a99a:	f7ff ffbf 	bl	800a91c <sbrk_aligned>
 800a99e:	1c43      	adds	r3, r0, #1
 800a9a0:	4604      	mov	r4, r0
 800a9a2:	d158      	bne.n	800aa56 <_malloc_r+0xf6>
 800a9a4:	f8d8 4000 	ldr.w	r4, [r8]
 800a9a8:	4627      	mov	r7, r4
 800a9aa:	2f00      	cmp	r7, #0
 800a9ac:	d143      	bne.n	800aa36 <_malloc_r+0xd6>
 800a9ae:	2c00      	cmp	r4, #0
 800a9b0:	d04b      	beq.n	800aa4a <_malloc_r+0xea>
 800a9b2:	6823      	ldr	r3, [r4, #0]
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	4630      	mov	r0, r6
 800a9b8:	eb04 0903 	add.w	r9, r4, r3
 800a9bc:	f000 faf8 	bl	800afb0 <_sbrk_r>
 800a9c0:	4581      	cmp	r9, r0
 800a9c2:	d142      	bne.n	800aa4a <_malloc_r+0xea>
 800a9c4:	6821      	ldr	r1, [r4, #0]
 800a9c6:	1a6d      	subs	r5, r5, r1
 800a9c8:	4629      	mov	r1, r5
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f7ff ffa6 	bl	800a91c <sbrk_aligned>
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d03a      	beq.n	800aa4a <_malloc_r+0xea>
 800a9d4:	6823      	ldr	r3, [r4, #0]
 800a9d6:	442b      	add	r3, r5
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	f8d8 3000 	ldr.w	r3, [r8]
 800a9de:	685a      	ldr	r2, [r3, #4]
 800a9e0:	bb62      	cbnz	r2, 800aa3c <_malloc_r+0xdc>
 800a9e2:	f8c8 7000 	str.w	r7, [r8]
 800a9e6:	e00f      	b.n	800aa08 <_malloc_r+0xa8>
 800a9e8:	6822      	ldr	r2, [r4, #0]
 800a9ea:	1b52      	subs	r2, r2, r5
 800a9ec:	d420      	bmi.n	800aa30 <_malloc_r+0xd0>
 800a9ee:	2a0b      	cmp	r2, #11
 800a9f0:	d917      	bls.n	800aa22 <_malloc_r+0xc2>
 800a9f2:	1961      	adds	r1, r4, r5
 800a9f4:	42a3      	cmp	r3, r4
 800a9f6:	6025      	str	r5, [r4, #0]
 800a9f8:	bf18      	it	ne
 800a9fa:	6059      	strne	r1, [r3, #4]
 800a9fc:	6863      	ldr	r3, [r4, #4]
 800a9fe:	bf08      	it	eq
 800aa00:	f8c8 1000 	streq.w	r1, [r8]
 800aa04:	5162      	str	r2, [r4, r5]
 800aa06:	604b      	str	r3, [r1, #4]
 800aa08:	4630      	mov	r0, r6
 800aa0a:	f000 f82f 	bl	800aa6c <__malloc_unlock>
 800aa0e:	f104 000b 	add.w	r0, r4, #11
 800aa12:	1d23      	adds	r3, r4, #4
 800aa14:	f020 0007 	bic.w	r0, r0, #7
 800aa18:	1ac2      	subs	r2, r0, r3
 800aa1a:	bf1c      	itt	ne
 800aa1c:	1a1b      	subne	r3, r3, r0
 800aa1e:	50a3      	strne	r3, [r4, r2]
 800aa20:	e7af      	b.n	800a982 <_malloc_r+0x22>
 800aa22:	6862      	ldr	r2, [r4, #4]
 800aa24:	42a3      	cmp	r3, r4
 800aa26:	bf0c      	ite	eq
 800aa28:	f8c8 2000 	streq.w	r2, [r8]
 800aa2c:	605a      	strne	r2, [r3, #4]
 800aa2e:	e7eb      	b.n	800aa08 <_malloc_r+0xa8>
 800aa30:	4623      	mov	r3, r4
 800aa32:	6864      	ldr	r4, [r4, #4]
 800aa34:	e7ae      	b.n	800a994 <_malloc_r+0x34>
 800aa36:	463c      	mov	r4, r7
 800aa38:	687f      	ldr	r7, [r7, #4]
 800aa3a:	e7b6      	b.n	800a9aa <_malloc_r+0x4a>
 800aa3c:	461a      	mov	r2, r3
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	42a3      	cmp	r3, r4
 800aa42:	d1fb      	bne.n	800aa3c <_malloc_r+0xdc>
 800aa44:	2300      	movs	r3, #0
 800aa46:	6053      	str	r3, [r2, #4]
 800aa48:	e7de      	b.n	800aa08 <_malloc_r+0xa8>
 800aa4a:	230c      	movs	r3, #12
 800aa4c:	6033      	str	r3, [r6, #0]
 800aa4e:	4630      	mov	r0, r6
 800aa50:	f000 f80c 	bl	800aa6c <__malloc_unlock>
 800aa54:	e794      	b.n	800a980 <_malloc_r+0x20>
 800aa56:	6005      	str	r5, [r0, #0]
 800aa58:	e7d6      	b.n	800aa08 <_malloc_r+0xa8>
 800aa5a:	bf00      	nop
 800aa5c:	200009b8 	.word	0x200009b8

0800aa60 <__malloc_lock>:
 800aa60:	4801      	ldr	r0, [pc, #4]	@ (800aa68 <__malloc_lock+0x8>)
 800aa62:	f000 baf2 	b.w	800b04a <__retarget_lock_acquire_recursive>
 800aa66:	bf00      	nop
 800aa68:	20000afc 	.word	0x20000afc

0800aa6c <__malloc_unlock>:
 800aa6c:	4801      	ldr	r0, [pc, #4]	@ (800aa74 <__malloc_unlock+0x8>)
 800aa6e:	f000 baed 	b.w	800b04c <__retarget_lock_release_recursive>
 800aa72:	bf00      	nop
 800aa74:	20000afc 	.word	0x20000afc

0800aa78 <std>:
 800aa78:	2300      	movs	r3, #0
 800aa7a:	b510      	push	{r4, lr}
 800aa7c:	4604      	mov	r4, r0
 800aa7e:	e9c0 3300 	strd	r3, r3, [r0]
 800aa82:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800aa86:	6083      	str	r3, [r0, #8]
 800aa88:	8181      	strh	r1, [r0, #12]
 800aa8a:	6643      	str	r3, [r0, #100]	@ 0x64
 800aa8c:	81c2      	strh	r2, [r0, #14]
 800aa8e:	6183      	str	r3, [r0, #24]
 800aa90:	4619      	mov	r1, r3
 800aa92:	2208      	movs	r2, #8
 800aa94:	305c      	adds	r0, #92	@ 0x5c
 800aa96:	f000 fa4f 	bl	800af38 <memset>
 800aa9a:	4b0d      	ldr	r3, [pc, #52]	@ (800aad0 <std+0x58>)
 800aa9c:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa9e:	4b0d      	ldr	r3, [pc, #52]	@ (800aad4 <std+0x5c>)
 800aaa0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800aaa2:	4b0d      	ldr	r3, [pc, #52]	@ (800aad8 <std+0x60>)
 800aaa4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800aaa6:	4b0d      	ldr	r3, [pc, #52]	@ (800aadc <std+0x64>)
 800aaa8:	6323      	str	r3, [r4, #48]	@ 0x30
 800aaaa:	4b0d      	ldr	r3, [pc, #52]	@ (800aae0 <std+0x68>)
 800aaac:	6224      	str	r4, [r4, #32]
 800aaae:	429c      	cmp	r4, r3
 800aab0:	d006      	beq.n	800aac0 <std+0x48>
 800aab2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aab6:	4294      	cmp	r4, r2
 800aab8:	d002      	beq.n	800aac0 <std+0x48>
 800aaba:	33d0      	adds	r3, #208	@ 0xd0
 800aabc:	429c      	cmp	r4, r3
 800aabe:	d105      	bne.n	800aacc <std+0x54>
 800aac0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800aac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aac8:	f000 babe 	b.w	800b048 <__retarget_lock_init_recursive>
 800aacc:	bd10      	pop	{r4, pc}
 800aace:	bf00      	nop
 800aad0:	0800ad89 	.word	0x0800ad89
 800aad4:	0800adab 	.word	0x0800adab
 800aad8:	0800ade3 	.word	0x0800ade3
 800aadc:	0800ae07 	.word	0x0800ae07
 800aae0:	200009bc 	.word	0x200009bc

0800aae4 <stdio_exit_handler>:
 800aae4:	4a02      	ldr	r2, [pc, #8]	@ (800aaf0 <stdio_exit_handler+0xc>)
 800aae6:	4903      	ldr	r1, [pc, #12]	@ (800aaf4 <stdio_exit_handler+0x10>)
 800aae8:	4803      	ldr	r0, [pc, #12]	@ (800aaf8 <stdio_exit_handler+0x14>)
 800aaea:	f000 b869 	b.w	800abc0 <_fwalk_sglue>
 800aaee:	bf00      	nop
 800aaf0:	2000002c 	.word	0x2000002c
 800aaf4:	0800b7a5 	.word	0x0800b7a5
 800aaf8:	2000003c 	.word	0x2000003c

0800aafc <cleanup_stdio>:
 800aafc:	6841      	ldr	r1, [r0, #4]
 800aafe:	4b0c      	ldr	r3, [pc, #48]	@ (800ab30 <cleanup_stdio+0x34>)
 800ab00:	4299      	cmp	r1, r3
 800ab02:	b510      	push	{r4, lr}
 800ab04:	4604      	mov	r4, r0
 800ab06:	d001      	beq.n	800ab0c <cleanup_stdio+0x10>
 800ab08:	f000 fe4c 	bl	800b7a4 <_fflush_r>
 800ab0c:	68a1      	ldr	r1, [r4, #8]
 800ab0e:	4b09      	ldr	r3, [pc, #36]	@ (800ab34 <cleanup_stdio+0x38>)
 800ab10:	4299      	cmp	r1, r3
 800ab12:	d002      	beq.n	800ab1a <cleanup_stdio+0x1e>
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fe45 	bl	800b7a4 <_fflush_r>
 800ab1a:	68e1      	ldr	r1, [r4, #12]
 800ab1c:	4b06      	ldr	r3, [pc, #24]	@ (800ab38 <cleanup_stdio+0x3c>)
 800ab1e:	4299      	cmp	r1, r3
 800ab20:	d004      	beq.n	800ab2c <cleanup_stdio+0x30>
 800ab22:	4620      	mov	r0, r4
 800ab24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab28:	f000 be3c 	b.w	800b7a4 <_fflush_r>
 800ab2c:	bd10      	pop	{r4, pc}
 800ab2e:	bf00      	nop
 800ab30:	200009bc 	.word	0x200009bc
 800ab34:	20000a24 	.word	0x20000a24
 800ab38:	20000a8c 	.word	0x20000a8c

0800ab3c <global_stdio_init.part.0>:
 800ab3c:	b510      	push	{r4, lr}
 800ab3e:	4b0b      	ldr	r3, [pc, #44]	@ (800ab6c <global_stdio_init.part.0+0x30>)
 800ab40:	4c0b      	ldr	r4, [pc, #44]	@ (800ab70 <global_stdio_init.part.0+0x34>)
 800ab42:	4a0c      	ldr	r2, [pc, #48]	@ (800ab74 <global_stdio_init.part.0+0x38>)
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	4620      	mov	r0, r4
 800ab48:	2200      	movs	r2, #0
 800ab4a:	2104      	movs	r1, #4
 800ab4c:	f7ff ff94 	bl	800aa78 <std>
 800ab50:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ab54:	2201      	movs	r2, #1
 800ab56:	2109      	movs	r1, #9
 800ab58:	f7ff ff8e 	bl	800aa78 <std>
 800ab5c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ab60:	2202      	movs	r2, #2
 800ab62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab66:	2112      	movs	r1, #18
 800ab68:	f7ff bf86 	b.w	800aa78 <std>
 800ab6c:	20000af4 	.word	0x20000af4
 800ab70:	200009bc 	.word	0x200009bc
 800ab74:	0800aae5 	.word	0x0800aae5

0800ab78 <__sfp_lock_acquire>:
 800ab78:	4801      	ldr	r0, [pc, #4]	@ (800ab80 <__sfp_lock_acquire+0x8>)
 800ab7a:	f000 ba66 	b.w	800b04a <__retarget_lock_acquire_recursive>
 800ab7e:	bf00      	nop
 800ab80:	20000afd 	.word	0x20000afd

0800ab84 <__sfp_lock_release>:
 800ab84:	4801      	ldr	r0, [pc, #4]	@ (800ab8c <__sfp_lock_release+0x8>)
 800ab86:	f000 ba61 	b.w	800b04c <__retarget_lock_release_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20000afd 	.word	0x20000afd

0800ab90 <__sinit>:
 800ab90:	b510      	push	{r4, lr}
 800ab92:	4604      	mov	r4, r0
 800ab94:	f7ff fff0 	bl	800ab78 <__sfp_lock_acquire>
 800ab98:	6a23      	ldr	r3, [r4, #32]
 800ab9a:	b11b      	cbz	r3, 800aba4 <__sinit+0x14>
 800ab9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aba0:	f7ff bff0 	b.w	800ab84 <__sfp_lock_release>
 800aba4:	4b04      	ldr	r3, [pc, #16]	@ (800abb8 <__sinit+0x28>)
 800aba6:	6223      	str	r3, [r4, #32]
 800aba8:	4b04      	ldr	r3, [pc, #16]	@ (800abbc <__sinit+0x2c>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d1f5      	bne.n	800ab9c <__sinit+0xc>
 800abb0:	f7ff ffc4 	bl	800ab3c <global_stdio_init.part.0>
 800abb4:	e7f2      	b.n	800ab9c <__sinit+0xc>
 800abb6:	bf00      	nop
 800abb8:	0800aafd 	.word	0x0800aafd
 800abbc:	20000af4 	.word	0x20000af4

0800abc0 <_fwalk_sglue>:
 800abc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abc4:	4607      	mov	r7, r0
 800abc6:	4688      	mov	r8, r1
 800abc8:	4614      	mov	r4, r2
 800abca:	2600      	movs	r6, #0
 800abcc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800abd0:	f1b9 0901 	subs.w	r9, r9, #1
 800abd4:	d505      	bpl.n	800abe2 <_fwalk_sglue+0x22>
 800abd6:	6824      	ldr	r4, [r4, #0]
 800abd8:	2c00      	cmp	r4, #0
 800abda:	d1f7      	bne.n	800abcc <_fwalk_sglue+0xc>
 800abdc:	4630      	mov	r0, r6
 800abde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	2b01      	cmp	r3, #1
 800abe6:	d907      	bls.n	800abf8 <_fwalk_sglue+0x38>
 800abe8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800abec:	3301      	adds	r3, #1
 800abee:	d003      	beq.n	800abf8 <_fwalk_sglue+0x38>
 800abf0:	4629      	mov	r1, r5
 800abf2:	4638      	mov	r0, r7
 800abf4:	47c0      	blx	r8
 800abf6:	4306      	orrs	r6, r0
 800abf8:	3568      	adds	r5, #104	@ 0x68
 800abfa:	e7e9      	b.n	800abd0 <_fwalk_sglue+0x10>

0800abfc <iprintf>:
 800abfc:	b40f      	push	{r0, r1, r2, r3}
 800abfe:	b507      	push	{r0, r1, r2, lr}
 800ac00:	4906      	ldr	r1, [pc, #24]	@ (800ac1c <iprintf+0x20>)
 800ac02:	ab04      	add	r3, sp, #16
 800ac04:	6808      	ldr	r0, [r1, #0]
 800ac06:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac0a:	6881      	ldr	r1, [r0, #8]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	f000 faa1 	bl	800b154 <_vfiprintf_r>
 800ac12:	b003      	add	sp, #12
 800ac14:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac18:	b004      	add	sp, #16
 800ac1a:	4770      	bx	lr
 800ac1c:	20000038 	.word	0x20000038

0800ac20 <setvbuf>:
 800ac20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac24:	461d      	mov	r5, r3
 800ac26:	4b57      	ldr	r3, [pc, #348]	@ (800ad84 <setvbuf+0x164>)
 800ac28:	681f      	ldr	r7, [r3, #0]
 800ac2a:	4604      	mov	r4, r0
 800ac2c:	460e      	mov	r6, r1
 800ac2e:	4690      	mov	r8, r2
 800ac30:	b127      	cbz	r7, 800ac3c <setvbuf+0x1c>
 800ac32:	6a3b      	ldr	r3, [r7, #32]
 800ac34:	b913      	cbnz	r3, 800ac3c <setvbuf+0x1c>
 800ac36:	4638      	mov	r0, r7
 800ac38:	f7ff ffaa 	bl	800ab90 <__sinit>
 800ac3c:	f1b8 0f02 	cmp.w	r8, #2
 800ac40:	d006      	beq.n	800ac50 <setvbuf+0x30>
 800ac42:	f1b8 0f01 	cmp.w	r8, #1
 800ac46:	f200 809a 	bhi.w	800ad7e <setvbuf+0x15e>
 800ac4a:	2d00      	cmp	r5, #0
 800ac4c:	f2c0 8097 	blt.w	800ad7e <setvbuf+0x15e>
 800ac50:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ac52:	07d9      	lsls	r1, r3, #31
 800ac54:	d405      	bmi.n	800ac62 <setvbuf+0x42>
 800ac56:	89a3      	ldrh	r3, [r4, #12]
 800ac58:	059a      	lsls	r2, r3, #22
 800ac5a:	d402      	bmi.n	800ac62 <setvbuf+0x42>
 800ac5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ac5e:	f000 f9f4 	bl	800b04a <__retarget_lock_acquire_recursive>
 800ac62:	4621      	mov	r1, r4
 800ac64:	4638      	mov	r0, r7
 800ac66:	f000 fd9d 	bl	800b7a4 <_fflush_r>
 800ac6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ac6c:	b141      	cbz	r1, 800ac80 <setvbuf+0x60>
 800ac6e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ac72:	4299      	cmp	r1, r3
 800ac74:	d002      	beq.n	800ac7c <setvbuf+0x5c>
 800ac76:	4638      	mov	r0, r7
 800ac78:	f000 f9f8 	bl	800b06c <_free_r>
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6363      	str	r3, [r4, #52]	@ 0x34
 800ac80:	2300      	movs	r3, #0
 800ac82:	61a3      	str	r3, [r4, #24]
 800ac84:	6063      	str	r3, [r4, #4]
 800ac86:	89a3      	ldrh	r3, [r4, #12]
 800ac88:	061b      	lsls	r3, r3, #24
 800ac8a:	d503      	bpl.n	800ac94 <setvbuf+0x74>
 800ac8c:	6921      	ldr	r1, [r4, #16]
 800ac8e:	4638      	mov	r0, r7
 800ac90:	f000 f9ec 	bl	800b06c <_free_r>
 800ac94:	89a3      	ldrh	r3, [r4, #12]
 800ac96:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ac9a:	f023 0303 	bic.w	r3, r3, #3
 800ac9e:	f1b8 0f02 	cmp.w	r8, #2
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	d061      	beq.n	800ad6a <setvbuf+0x14a>
 800aca6:	ab01      	add	r3, sp, #4
 800aca8:	466a      	mov	r2, sp
 800acaa:	4621      	mov	r1, r4
 800acac:	4638      	mov	r0, r7
 800acae:	f000 fda1 	bl	800b7f4 <__swhatbuf_r>
 800acb2:	89a3      	ldrh	r3, [r4, #12]
 800acb4:	4318      	orrs	r0, r3
 800acb6:	81a0      	strh	r0, [r4, #12]
 800acb8:	bb2d      	cbnz	r5, 800ad06 <setvbuf+0xe6>
 800acba:	9d00      	ldr	r5, [sp, #0]
 800acbc:	4628      	mov	r0, r5
 800acbe:	f7ff fe1d 	bl	800a8fc <malloc>
 800acc2:	4606      	mov	r6, r0
 800acc4:	2800      	cmp	r0, #0
 800acc6:	d152      	bne.n	800ad6e <setvbuf+0x14e>
 800acc8:	f8dd 9000 	ldr.w	r9, [sp]
 800accc:	45a9      	cmp	r9, r5
 800acce:	d140      	bne.n	800ad52 <setvbuf+0x132>
 800acd0:	f04f 35ff 	mov.w	r5, #4294967295
 800acd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acd8:	f043 0202 	orr.w	r2, r3, #2
 800acdc:	81a2      	strh	r2, [r4, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	60a2      	str	r2, [r4, #8]
 800ace2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800ace6:	6022      	str	r2, [r4, #0]
 800ace8:	6122      	str	r2, [r4, #16]
 800acea:	2201      	movs	r2, #1
 800acec:	6162      	str	r2, [r4, #20]
 800acee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800acf0:	07d6      	lsls	r6, r2, #31
 800acf2:	d404      	bmi.n	800acfe <setvbuf+0xde>
 800acf4:	0598      	lsls	r0, r3, #22
 800acf6:	d402      	bmi.n	800acfe <setvbuf+0xde>
 800acf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800acfa:	f000 f9a7 	bl	800b04c <__retarget_lock_release_recursive>
 800acfe:	4628      	mov	r0, r5
 800ad00:	b003      	add	sp, #12
 800ad02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad06:	2e00      	cmp	r6, #0
 800ad08:	d0d8      	beq.n	800acbc <setvbuf+0x9c>
 800ad0a:	6a3b      	ldr	r3, [r7, #32]
 800ad0c:	b913      	cbnz	r3, 800ad14 <setvbuf+0xf4>
 800ad0e:	4638      	mov	r0, r7
 800ad10:	f7ff ff3e 	bl	800ab90 <__sinit>
 800ad14:	f1b8 0f01 	cmp.w	r8, #1
 800ad18:	bf08      	it	eq
 800ad1a:	89a3      	ldrheq	r3, [r4, #12]
 800ad1c:	6026      	str	r6, [r4, #0]
 800ad1e:	bf04      	itt	eq
 800ad20:	f043 0301 	orreq.w	r3, r3, #1
 800ad24:	81a3      	strheq	r3, [r4, #12]
 800ad26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad2a:	f013 0208 	ands.w	r2, r3, #8
 800ad2e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ad32:	d01e      	beq.n	800ad72 <setvbuf+0x152>
 800ad34:	07d9      	lsls	r1, r3, #31
 800ad36:	bf41      	itttt	mi
 800ad38:	2200      	movmi	r2, #0
 800ad3a:	426d      	negmi	r5, r5
 800ad3c:	60a2      	strmi	r2, [r4, #8]
 800ad3e:	61a5      	strmi	r5, [r4, #24]
 800ad40:	bf58      	it	pl
 800ad42:	60a5      	strpl	r5, [r4, #8]
 800ad44:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ad46:	07d2      	lsls	r2, r2, #31
 800ad48:	d401      	bmi.n	800ad4e <setvbuf+0x12e>
 800ad4a:	059b      	lsls	r3, r3, #22
 800ad4c:	d513      	bpl.n	800ad76 <setvbuf+0x156>
 800ad4e:	2500      	movs	r5, #0
 800ad50:	e7d5      	b.n	800acfe <setvbuf+0xde>
 800ad52:	4648      	mov	r0, r9
 800ad54:	f7ff fdd2 	bl	800a8fc <malloc>
 800ad58:	4606      	mov	r6, r0
 800ad5a:	2800      	cmp	r0, #0
 800ad5c:	d0b8      	beq.n	800acd0 <setvbuf+0xb0>
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	464d      	mov	r5, r9
 800ad68:	e7cf      	b.n	800ad0a <setvbuf+0xea>
 800ad6a:	2500      	movs	r5, #0
 800ad6c:	e7b2      	b.n	800acd4 <setvbuf+0xb4>
 800ad6e:	46a9      	mov	r9, r5
 800ad70:	e7f5      	b.n	800ad5e <setvbuf+0x13e>
 800ad72:	60a2      	str	r2, [r4, #8]
 800ad74:	e7e6      	b.n	800ad44 <setvbuf+0x124>
 800ad76:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad78:	f000 f968 	bl	800b04c <__retarget_lock_release_recursive>
 800ad7c:	e7e7      	b.n	800ad4e <setvbuf+0x12e>
 800ad7e:	f04f 35ff 	mov.w	r5, #4294967295
 800ad82:	e7bc      	b.n	800acfe <setvbuf+0xde>
 800ad84:	20000038 	.word	0x20000038

0800ad88 <__sread>:
 800ad88:	b510      	push	{r4, lr}
 800ad8a:	460c      	mov	r4, r1
 800ad8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad90:	f000 f8fc 	bl	800af8c <_read_r>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	bfab      	itete	ge
 800ad98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ad9c:	181b      	addge	r3, r3, r0
 800ad9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ada2:	bfac      	ite	ge
 800ada4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ada6:	81a3      	strhlt	r3, [r4, #12]
 800ada8:	bd10      	pop	{r4, pc}

0800adaa <__swrite>:
 800adaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800adae:	461f      	mov	r7, r3
 800adb0:	898b      	ldrh	r3, [r1, #12]
 800adb2:	05db      	lsls	r3, r3, #23
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	4616      	mov	r6, r2
 800adba:	d505      	bpl.n	800adc8 <__swrite+0x1e>
 800adbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adc0:	2302      	movs	r3, #2
 800adc2:	2200      	movs	r2, #0
 800adc4:	f000 f8d0 	bl	800af68 <_lseek_r>
 800adc8:	89a3      	ldrh	r3, [r4, #12]
 800adca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800add2:	81a3      	strh	r3, [r4, #12]
 800add4:	4632      	mov	r2, r6
 800add6:	463b      	mov	r3, r7
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800adde:	f000 b8f7 	b.w	800afd0 <_write_r>

0800ade2 <__sseek>:
 800ade2:	b510      	push	{r4, lr}
 800ade4:	460c      	mov	r4, r1
 800ade6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800adea:	f000 f8bd 	bl	800af68 <_lseek_r>
 800adee:	1c43      	adds	r3, r0, #1
 800adf0:	89a3      	ldrh	r3, [r4, #12]
 800adf2:	bf15      	itete	ne
 800adf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 800adf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800adfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800adfe:	81a3      	strheq	r3, [r4, #12]
 800ae00:	bf18      	it	ne
 800ae02:	81a3      	strhne	r3, [r4, #12]
 800ae04:	bd10      	pop	{r4, pc}

0800ae06 <__sclose>:
 800ae06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae0a:	f000 b89d 	b.w	800af48 <_close_r>

0800ae0e <__swbuf_r>:
 800ae0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae10:	460e      	mov	r6, r1
 800ae12:	4614      	mov	r4, r2
 800ae14:	4605      	mov	r5, r0
 800ae16:	b118      	cbz	r0, 800ae20 <__swbuf_r+0x12>
 800ae18:	6a03      	ldr	r3, [r0, #32]
 800ae1a:	b90b      	cbnz	r3, 800ae20 <__swbuf_r+0x12>
 800ae1c:	f7ff feb8 	bl	800ab90 <__sinit>
 800ae20:	69a3      	ldr	r3, [r4, #24]
 800ae22:	60a3      	str	r3, [r4, #8]
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	071a      	lsls	r2, r3, #28
 800ae28:	d501      	bpl.n	800ae2e <__swbuf_r+0x20>
 800ae2a:	6923      	ldr	r3, [r4, #16]
 800ae2c:	b943      	cbnz	r3, 800ae40 <__swbuf_r+0x32>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f000 f82b 	bl	800ae8c <__swsetup_r>
 800ae36:	b118      	cbz	r0, 800ae40 <__swbuf_r+0x32>
 800ae38:	f04f 37ff 	mov.w	r7, #4294967295
 800ae3c:	4638      	mov	r0, r7
 800ae3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae40:	6823      	ldr	r3, [r4, #0]
 800ae42:	6922      	ldr	r2, [r4, #16]
 800ae44:	1a98      	subs	r0, r3, r2
 800ae46:	6963      	ldr	r3, [r4, #20]
 800ae48:	b2f6      	uxtb	r6, r6
 800ae4a:	4283      	cmp	r3, r0
 800ae4c:	4637      	mov	r7, r6
 800ae4e:	dc05      	bgt.n	800ae5c <__swbuf_r+0x4e>
 800ae50:	4621      	mov	r1, r4
 800ae52:	4628      	mov	r0, r5
 800ae54:	f000 fca6 	bl	800b7a4 <_fflush_r>
 800ae58:	2800      	cmp	r0, #0
 800ae5a:	d1ed      	bne.n	800ae38 <__swbuf_r+0x2a>
 800ae5c:	68a3      	ldr	r3, [r4, #8]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	60a3      	str	r3, [r4, #8]
 800ae62:	6823      	ldr	r3, [r4, #0]
 800ae64:	1c5a      	adds	r2, r3, #1
 800ae66:	6022      	str	r2, [r4, #0]
 800ae68:	701e      	strb	r6, [r3, #0]
 800ae6a:	6962      	ldr	r2, [r4, #20]
 800ae6c:	1c43      	adds	r3, r0, #1
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d004      	beq.n	800ae7c <__swbuf_r+0x6e>
 800ae72:	89a3      	ldrh	r3, [r4, #12]
 800ae74:	07db      	lsls	r3, r3, #31
 800ae76:	d5e1      	bpl.n	800ae3c <__swbuf_r+0x2e>
 800ae78:	2e0a      	cmp	r6, #10
 800ae7a:	d1df      	bne.n	800ae3c <__swbuf_r+0x2e>
 800ae7c:	4621      	mov	r1, r4
 800ae7e:	4628      	mov	r0, r5
 800ae80:	f000 fc90 	bl	800b7a4 <_fflush_r>
 800ae84:	2800      	cmp	r0, #0
 800ae86:	d0d9      	beq.n	800ae3c <__swbuf_r+0x2e>
 800ae88:	e7d6      	b.n	800ae38 <__swbuf_r+0x2a>
	...

0800ae8c <__swsetup_r>:
 800ae8c:	b538      	push	{r3, r4, r5, lr}
 800ae8e:	4b29      	ldr	r3, [pc, #164]	@ (800af34 <__swsetup_r+0xa8>)
 800ae90:	4605      	mov	r5, r0
 800ae92:	6818      	ldr	r0, [r3, #0]
 800ae94:	460c      	mov	r4, r1
 800ae96:	b118      	cbz	r0, 800aea0 <__swsetup_r+0x14>
 800ae98:	6a03      	ldr	r3, [r0, #32]
 800ae9a:	b90b      	cbnz	r3, 800aea0 <__swsetup_r+0x14>
 800ae9c:	f7ff fe78 	bl	800ab90 <__sinit>
 800aea0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aea4:	0719      	lsls	r1, r3, #28
 800aea6:	d422      	bmi.n	800aeee <__swsetup_r+0x62>
 800aea8:	06da      	lsls	r2, r3, #27
 800aeaa:	d407      	bmi.n	800aebc <__swsetup_r+0x30>
 800aeac:	2209      	movs	r2, #9
 800aeae:	602a      	str	r2, [r5, #0]
 800aeb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aeb4:	81a3      	strh	r3, [r4, #12]
 800aeb6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeba:	e033      	b.n	800af24 <__swsetup_r+0x98>
 800aebc:	0758      	lsls	r0, r3, #29
 800aebe:	d512      	bpl.n	800aee6 <__swsetup_r+0x5a>
 800aec0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aec2:	b141      	cbz	r1, 800aed6 <__swsetup_r+0x4a>
 800aec4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aec8:	4299      	cmp	r1, r3
 800aeca:	d002      	beq.n	800aed2 <__swsetup_r+0x46>
 800aecc:	4628      	mov	r0, r5
 800aece:	f000 f8cd 	bl	800b06c <_free_r>
 800aed2:	2300      	movs	r3, #0
 800aed4:	6363      	str	r3, [r4, #52]	@ 0x34
 800aed6:	89a3      	ldrh	r3, [r4, #12]
 800aed8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800aedc:	81a3      	strh	r3, [r4, #12]
 800aede:	2300      	movs	r3, #0
 800aee0:	6063      	str	r3, [r4, #4]
 800aee2:	6923      	ldr	r3, [r4, #16]
 800aee4:	6023      	str	r3, [r4, #0]
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f043 0308 	orr.w	r3, r3, #8
 800aeec:	81a3      	strh	r3, [r4, #12]
 800aeee:	6923      	ldr	r3, [r4, #16]
 800aef0:	b94b      	cbnz	r3, 800af06 <__swsetup_r+0x7a>
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aef8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aefc:	d003      	beq.n	800af06 <__swsetup_r+0x7a>
 800aefe:	4621      	mov	r1, r4
 800af00:	4628      	mov	r0, r5
 800af02:	f000 fc9d 	bl	800b840 <__smakebuf_r>
 800af06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af0a:	f013 0201 	ands.w	r2, r3, #1
 800af0e:	d00a      	beq.n	800af26 <__swsetup_r+0x9a>
 800af10:	2200      	movs	r2, #0
 800af12:	60a2      	str	r2, [r4, #8]
 800af14:	6962      	ldr	r2, [r4, #20]
 800af16:	4252      	negs	r2, r2
 800af18:	61a2      	str	r2, [r4, #24]
 800af1a:	6922      	ldr	r2, [r4, #16]
 800af1c:	b942      	cbnz	r2, 800af30 <__swsetup_r+0xa4>
 800af1e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800af22:	d1c5      	bne.n	800aeb0 <__swsetup_r+0x24>
 800af24:	bd38      	pop	{r3, r4, r5, pc}
 800af26:	0799      	lsls	r1, r3, #30
 800af28:	bf58      	it	pl
 800af2a:	6962      	ldrpl	r2, [r4, #20]
 800af2c:	60a2      	str	r2, [r4, #8]
 800af2e:	e7f4      	b.n	800af1a <__swsetup_r+0x8e>
 800af30:	2000      	movs	r0, #0
 800af32:	e7f7      	b.n	800af24 <__swsetup_r+0x98>
 800af34:	20000038 	.word	0x20000038

0800af38 <memset>:
 800af38:	4402      	add	r2, r0
 800af3a:	4603      	mov	r3, r0
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d100      	bne.n	800af42 <memset+0xa>
 800af40:	4770      	bx	lr
 800af42:	f803 1b01 	strb.w	r1, [r3], #1
 800af46:	e7f9      	b.n	800af3c <memset+0x4>

0800af48 <_close_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	4d06      	ldr	r5, [pc, #24]	@ (800af64 <_close_r+0x1c>)
 800af4c:	2300      	movs	r3, #0
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	602b      	str	r3, [r5, #0]
 800af54:	f7f7 f9cf 	bl	80022f6 <_close>
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	d102      	bne.n	800af62 <_close_r+0x1a>
 800af5c:	682b      	ldr	r3, [r5, #0]
 800af5e:	b103      	cbz	r3, 800af62 <_close_r+0x1a>
 800af60:	6023      	str	r3, [r4, #0]
 800af62:	bd38      	pop	{r3, r4, r5, pc}
 800af64:	20000af8 	.word	0x20000af8

0800af68 <_lseek_r>:
 800af68:	b538      	push	{r3, r4, r5, lr}
 800af6a:	4d07      	ldr	r5, [pc, #28]	@ (800af88 <_lseek_r+0x20>)
 800af6c:	4604      	mov	r4, r0
 800af6e:	4608      	mov	r0, r1
 800af70:	4611      	mov	r1, r2
 800af72:	2200      	movs	r2, #0
 800af74:	602a      	str	r2, [r5, #0]
 800af76:	461a      	mov	r2, r3
 800af78:	f7f7 f9e4 	bl	8002344 <_lseek>
 800af7c:	1c43      	adds	r3, r0, #1
 800af7e:	d102      	bne.n	800af86 <_lseek_r+0x1e>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	b103      	cbz	r3, 800af86 <_lseek_r+0x1e>
 800af84:	6023      	str	r3, [r4, #0]
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	20000af8 	.word	0x20000af8

0800af8c <_read_r>:
 800af8c:	b538      	push	{r3, r4, r5, lr}
 800af8e:	4d07      	ldr	r5, [pc, #28]	@ (800afac <_read_r+0x20>)
 800af90:	4604      	mov	r4, r0
 800af92:	4608      	mov	r0, r1
 800af94:	4611      	mov	r1, r2
 800af96:	2200      	movs	r2, #0
 800af98:	602a      	str	r2, [r5, #0]
 800af9a:	461a      	mov	r2, r3
 800af9c:	f7f7 f98e 	bl	80022bc <_read>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d102      	bne.n	800afaa <_read_r+0x1e>
 800afa4:	682b      	ldr	r3, [r5, #0]
 800afa6:	b103      	cbz	r3, 800afaa <_read_r+0x1e>
 800afa8:	6023      	str	r3, [r4, #0]
 800afaa:	bd38      	pop	{r3, r4, r5, pc}
 800afac:	20000af8 	.word	0x20000af8

0800afb0 <_sbrk_r>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	4d06      	ldr	r5, [pc, #24]	@ (800afcc <_sbrk_r+0x1c>)
 800afb4:	2300      	movs	r3, #0
 800afb6:	4604      	mov	r4, r0
 800afb8:	4608      	mov	r0, r1
 800afba:	602b      	str	r3, [r5, #0]
 800afbc:	f7f7 f9d0 	bl	8002360 <_sbrk>
 800afc0:	1c43      	adds	r3, r0, #1
 800afc2:	d102      	bne.n	800afca <_sbrk_r+0x1a>
 800afc4:	682b      	ldr	r3, [r5, #0]
 800afc6:	b103      	cbz	r3, 800afca <_sbrk_r+0x1a>
 800afc8:	6023      	str	r3, [r4, #0]
 800afca:	bd38      	pop	{r3, r4, r5, pc}
 800afcc:	20000af8 	.word	0x20000af8

0800afd0 <_write_r>:
 800afd0:	b538      	push	{r3, r4, r5, lr}
 800afd2:	4d07      	ldr	r5, [pc, #28]	@ (800aff0 <_write_r+0x20>)
 800afd4:	4604      	mov	r4, r0
 800afd6:	4608      	mov	r0, r1
 800afd8:	4611      	mov	r1, r2
 800afda:	2200      	movs	r2, #0
 800afdc:	602a      	str	r2, [r5, #0]
 800afde:	461a      	mov	r2, r3
 800afe0:	f7f5 fda2 	bl	8000b28 <_write>
 800afe4:	1c43      	adds	r3, r0, #1
 800afe6:	d102      	bne.n	800afee <_write_r+0x1e>
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	b103      	cbz	r3, 800afee <_write_r+0x1e>
 800afec:	6023      	str	r3, [r4, #0]
 800afee:	bd38      	pop	{r3, r4, r5, pc}
 800aff0:	20000af8 	.word	0x20000af8

0800aff4 <__errno>:
 800aff4:	4b01      	ldr	r3, [pc, #4]	@ (800affc <__errno+0x8>)
 800aff6:	6818      	ldr	r0, [r3, #0]
 800aff8:	4770      	bx	lr
 800affa:	bf00      	nop
 800affc:	20000038 	.word	0x20000038

0800b000 <__libc_init_array>:
 800b000:	b570      	push	{r4, r5, r6, lr}
 800b002:	4d0d      	ldr	r5, [pc, #52]	@ (800b038 <__libc_init_array+0x38>)
 800b004:	4c0d      	ldr	r4, [pc, #52]	@ (800b03c <__libc_init_array+0x3c>)
 800b006:	1b64      	subs	r4, r4, r5
 800b008:	10a4      	asrs	r4, r4, #2
 800b00a:	2600      	movs	r6, #0
 800b00c:	42a6      	cmp	r6, r4
 800b00e:	d109      	bne.n	800b024 <__libc_init_array+0x24>
 800b010:	4d0b      	ldr	r5, [pc, #44]	@ (800b040 <__libc_init_array+0x40>)
 800b012:	4c0c      	ldr	r4, [pc, #48]	@ (800b044 <__libc_init_array+0x44>)
 800b014:	f000 fc72 	bl	800b8fc <_init>
 800b018:	1b64      	subs	r4, r4, r5
 800b01a:	10a4      	asrs	r4, r4, #2
 800b01c:	2600      	movs	r6, #0
 800b01e:	42a6      	cmp	r6, r4
 800b020:	d105      	bne.n	800b02e <__libc_init_array+0x2e>
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	f855 3b04 	ldr.w	r3, [r5], #4
 800b028:	4798      	blx	r3
 800b02a:	3601      	adds	r6, #1
 800b02c:	e7ee      	b.n	800b00c <__libc_init_array+0xc>
 800b02e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b032:	4798      	blx	r3
 800b034:	3601      	adds	r6, #1
 800b036:	e7f2      	b.n	800b01e <__libc_init_array+0x1e>
 800b038:	0800bd50 	.word	0x0800bd50
 800b03c:	0800bd50 	.word	0x0800bd50
 800b040:	0800bd50 	.word	0x0800bd50
 800b044:	0800bd54 	.word	0x0800bd54

0800b048 <__retarget_lock_init_recursive>:
 800b048:	4770      	bx	lr

0800b04a <__retarget_lock_acquire_recursive>:
 800b04a:	4770      	bx	lr

0800b04c <__retarget_lock_release_recursive>:
 800b04c:	4770      	bx	lr

0800b04e <memcpy>:
 800b04e:	440a      	add	r2, r1
 800b050:	4291      	cmp	r1, r2
 800b052:	f100 33ff 	add.w	r3, r0, #4294967295
 800b056:	d100      	bne.n	800b05a <memcpy+0xc>
 800b058:	4770      	bx	lr
 800b05a:	b510      	push	{r4, lr}
 800b05c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b060:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b064:	4291      	cmp	r1, r2
 800b066:	d1f9      	bne.n	800b05c <memcpy+0xe>
 800b068:	bd10      	pop	{r4, pc}
	...

0800b06c <_free_r>:
 800b06c:	b538      	push	{r3, r4, r5, lr}
 800b06e:	4605      	mov	r5, r0
 800b070:	2900      	cmp	r1, #0
 800b072:	d041      	beq.n	800b0f8 <_free_r+0x8c>
 800b074:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b078:	1f0c      	subs	r4, r1, #4
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	bfb8      	it	lt
 800b07e:	18e4      	addlt	r4, r4, r3
 800b080:	f7ff fcee 	bl	800aa60 <__malloc_lock>
 800b084:	4a1d      	ldr	r2, [pc, #116]	@ (800b0fc <_free_r+0x90>)
 800b086:	6813      	ldr	r3, [r2, #0]
 800b088:	b933      	cbnz	r3, 800b098 <_free_r+0x2c>
 800b08a:	6063      	str	r3, [r4, #4]
 800b08c:	6014      	str	r4, [r2, #0]
 800b08e:	4628      	mov	r0, r5
 800b090:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b094:	f7ff bcea 	b.w	800aa6c <__malloc_unlock>
 800b098:	42a3      	cmp	r3, r4
 800b09a:	d908      	bls.n	800b0ae <_free_r+0x42>
 800b09c:	6820      	ldr	r0, [r4, #0]
 800b09e:	1821      	adds	r1, r4, r0
 800b0a0:	428b      	cmp	r3, r1
 800b0a2:	bf01      	itttt	eq
 800b0a4:	6819      	ldreq	r1, [r3, #0]
 800b0a6:	685b      	ldreq	r3, [r3, #4]
 800b0a8:	1809      	addeq	r1, r1, r0
 800b0aa:	6021      	streq	r1, [r4, #0]
 800b0ac:	e7ed      	b.n	800b08a <_free_r+0x1e>
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	b10b      	cbz	r3, 800b0b8 <_free_r+0x4c>
 800b0b4:	42a3      	cmp	r3, r4
 800b0b6:	d9fa      	bls.n	800b0ae <_free_r+0x42>
 800b0b8:	6811      	ldr	r1, [r2, #0]
 800b0ba:	1850      	adds	r0, r2, r1
 800b0bc:	42a0      	cmp	r0, r4
 800b0be:	d10b      	bne.n	800b0d8 <_free_r+0x6c>
 800b0c0:	6820      	ldr	r0, [r4, #0]
 800b0c2:	4401      	add	r1, r0
 800b0c4:	1850      	adds	r0, r2, r1
 800b0c6:	4283      	cmp	r3, r0
 800b0c8:	6011      	str	r1, [r2, #0]
 800b0ca:	d1e0      	bne.n	800b08e <_free_r+0x22>
 800b0cc:	6818      	ldr	r0, [r3, #0]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	6053      	str	r3, [r2, #4]
 800b0d2:	4408      	add	r0, r1
 800b0d4:	6010      	str	r0, [r2, #0]
 800b0d6:	e7da      	b.n	800b08e <_free_r+0x22>
 800b0d8:	d902      	bls.n	800b0e0 <_free_r+0x74>
 800b0da:	230c      	movs	r3, #12
 800b0dc:	602b      	str	r3, [r5, #0]
 800b0de:	e7d6      	b.n	800b08e <_free_r+0x22>
 800b0e0:	6820      	ldr	r0, [r4, #0]
 800b0e2:	1821      	adds	r1, r4, r0
 800b0e4:	428b      	cmp	r3, r1
 800b0e6:	bf04      	itt	eq
 800b0e8:	6819      	ldreq	r1, [r3, #0]
 800b0ea:	685b      	ldreq	r3, [r3, #4]
 800b0ec:	6063      	str	r3, [r4, #4]
 800b0ee:	bf04      	itt	eq
 800b0f0:	1809      	addeq	r1, r1, r0
 800b0f2:	6021      	streq	r1, [r4, #0]
 800b0f4:	6054      	str	r4, [r2, #4]
 800b0f6:	e7ca      	b.n	800b08e <_free_r+0x22>
 800b0f8:	bd38      	pop	{r3, r4, r5, pc}
 800b0fa:	bf00      	nop
 800b0fc:	200009b8 	.word	0x200009b8

0800b100 <__sfputc_r>:
 800b100:	6893      	ldr	r3, [r2, #8]
 800b102:	3b01      	subs	r3, #1
 800b104:	2b00      	cmp	r3, #0
 800b106:	b410      	push	{r4}
 800b108:	6093      	str	r3, [r2, #8]
 800b10a:	da08      	bge.n	800b11e <__sfputc_r+0x1e>
 800b10c:	6994      	ldr	r4, [r2, #24]
 800b10e:	42a3      	cmp	r3, r4
 800b110:	db01      	blt.n	800b116 <__sfputc_r+0x16>
 800b112:	290a      	cmp	r1, #10
 800b114:	d103      	bne.n	800b11e <__sfputc_r+0x1e>
 800b116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b11a:	f7ff be78 	b.w	800ae0e <__swbuf_r>
 800b11e:	6813      	ldr	r3, [r2, #0]
 800b120:	1c58      	adds	r0, r3, #1
 800b122:	6010      	str	r0, [r2, #0]
 800b124:	7019      	strb	r1, [r3, #0]
 800b126:	4608      	mov	r0, r1
 800b128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12c:	4770      	bx	lr

0800b12e <__sfputs_r>:
 800b12e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b130:	4606      	mov	r6, r0
 800b132:	460f      	mov	r7, r1
 800b134:	4614      	mov	r4, r2
 800b136:	18d5      	adds	r5, r2, r3
 800b138:	42ac      	cmp	r4, r5
 800b13a:	d101      	bne.n	800b140 <__sfputs_r+0x12>
 800b13c:	2000      	movs	r0, #0
 800b13e:	e007      	b.n	800b150 <__sfputs_r+0x22>
 800b140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b144:	463a      	mov	r2, r7
 800b146:	4630      	mov	r0, r6
 800b148:	f7ff ffda 	bl	800b100 <__sfputc_r>
 800b14c:	1c43      	adds	r3, r0, #1
 800b14e:	d1f3      	bne.n	800b138 <__sfputs_r+0xa>
 800b150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b154 <_vfiprintf_r>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	460d      	mov	r5, r1
 800b15a:	b09d      	sub	sp, #116	@ 0x74
 800b15c:	4614      	mov	r4, r2
 800b15e:	4698      	mov	r8, r3
 800b160:	4606      	mov	r6, r0
 800b162:	b118      	cbz	r0, 800b16c <_vfiprintf_r+0x18>
 800b164:	6a03      	ldr	r3, [r0, #32]
 800b166:	b90b      	cbnz	r3, 800b16c <_vfiprintf_r+0x18>
 800b168:	f7ff fd12 	bl	800ab90 <__sinit>
 800b16c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b16e:	07d9      	lsls	r1, r3, #31
 800b170:	d405      	bmi.n	800b17e <_vfiprintf_r+0x2a>
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	059a      	lsls	r2, r3, #22
 800b176:	d402      	bmi.n	800b17e <_vfiprintf_r+0x2a>
 800b178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b17a:	f7ff ff66 	bl	800b04a <__retarget_lock_acquire_recursive>
 800b17e:	89ab      	ldrh	r3, [r5, #12]
 800b180:	071b      	lsls	r3, r3, #28
 800b182:	d501      	bpl.n	800b188 <_vfiprintf_r+0x34>
 800b184:	692b      	ldr	r3, [r5, #16]
 800b186:	b99b      	cbnz	r3, 800b1b0 <_vfiprintf_r+0x5c>
 800b188:	4629      	mov	r1, r5
 800b18a:	4630      	mov	r0, r6
 800b18c:	f7ff fe7e 	bl	800ae8c <__swsetup_r>
 800b190:	b170      	cbz	r0, 800b1b0 <_vfiprintf_r+0x5c>
 800b192:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b194:	07dc      	lsls	r4, r3, #31
 800b196:	d504      	bpl.n	800b1a2 <_vfiprintf_r+0x4e>
 800b198:	f04f 30ff 	mov.w	r0, #4294967295
 800b19c:	b01d      	add	sp, #116	@ 0x74
 800b19e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1a2:	89ab      	ldrh	r3, [r5, #12]
 800b1a4:	0598      	lsls	r0, r3, #22
 800b1a6:	d4f7      	bmi.n	800b198 <_vfiprintf_r+0x44>
 800b1a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b1aa:	f7ff ff4f 	bl	800b04c <__retarget_lock_release_recursive>
 800b1ae:	e7f3      	b.n	800b198 <_vfiprintf_r+0x44>
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b1b4:	2320      	movs	r3, #32
 800b1b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b1ba:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1be:	2330      	movs	r3, #48	@ 0x30
 800b1c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b370 <_vfiprintf_r+0x21c>
 800b1c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b1c8:	f04f 0901 	mov.w	r9, #1
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	469a      	mov	sl, r3
 800b1d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1d4:	b10a      	cbz	r2, 800b1da <_vfiprintf_r+0x86>
 800b1d6:	2a25      	cmp	r2, #37	@ 0x25
 800b1d8:	d1f9      	bne.n	800b1ce <_vfiprintf_r+0x7a>
 800b1da:	ebba 0b04 	subs.w	fp, sl, r4
 800b1de:	d00b      	beq.n	800b1f8 <_vfiprintf_r+0xa4>
 800b1e0:	465b      	mov	r3, fp
 800b1e2:	4622      	mov	r2, r4
 800b1e4:	4629      	mov	r1, r5
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f7ff ffa1 	bl	800b12e <__sfputs_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	f000 80a7 	beq.w	800b340 <_vfiprintf_r+0x1ec>
 800b1f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f4:	445a      	add	r2, fp
 800b1f6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1f8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f000 809f 	beq.w	800b340 <_vfiprintf_r+0x1ec>
 800b202:	2300      	movs	r3, #0
 800b204:	f04f 32ff 	mov.w	r2, #4294967295
 800b208:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b20c:	f10a 0a01 	add.w	sl, sl, #1
 800b210:	9304      	str	r3, [sp, #16]
 800b212:	9307      	str	r3, [sp, #28]
 800b214:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b218:	931a      	str	r3, [sp, #104]	@ 0x68
 800b21a:	4654      	mov	r4, sl
 800b21c:	2205      	movs	r2, #5
 800b21e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b222:	4853      	ldr	r0, [pc, #332]	@ (800b370 <_vfiprintf_r+0x21c>)
 800b224:	f7f4 ffd4 	bl	80001d0 <memchr>
 800b228:	9a04      	ldr	r2, [sp, #16]
 800b22a:	b9d8      	cbnz	r0, 800b264 <_vfiprintf_r+0x110>
 800b22c:	06d1      	lsls	r1, r2, #27
 800b22e:	bf44      	itt	mi
 800b230:	2320      	movmi	r3, #32
 800b232:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b236:	0713      	lsls	r3, r2, #28
 800b238:	bf44      	itt	mi
 800b23a:	232b      	movmi	r3, #43	@ 0x2b
 800b23c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b240:	f89a 3000 	ldrb.w	r3, [sl]
 800b244:	2b2a      	cmp	r3, #42	@ 0x2a
 800b246:	d015      	beq.n	800b274 <_vfiprintf_r+0x120>
 800b248:	9a07      	ldr	r2, [sp, #28]
 800b24a:	4654      	mov	r4, sl
 800b24c:	2000      	movs	r0, #0
 800b24e:	f04f 0c0a 	mov.w	ip, #10
 800b252:	4621      	mov	r1, r4
 800b254:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b258:	3b30      	subs	r3, #48	@ 0x30
 800b25a:	2b09      	cmp	r3, #9
 800b25c:	d94b      	bls.n	800b2f6 <_vfiprintf_r+0x1a2>
 800b25e:	b1b0      	cbz	r0, 800b28e <_vfiprintf_r+0x13a>
 800b260:	9207      	str	r2, [sp, #28]
 800b262:	e014      	b.n	800b28e <_vfiprintf_r+0x13a>
 800b264:	eba0 0308 	sub.w	r3, r0, r8
 800b268:	fa09 f303 	lsl.w	r3, r9, r3
 800b26c:	4313      	orrs	r3, r2
 800b26e:	9304      	str	r3, [sp, #16]
 800b270:	46a2      	mov	sl, r4
 800b272:	e7d2      	b.n	800b21a <_vfiprintf_r+0xc6>
 800b274:	9b03      	ldr	r3, [sp, #12]
 800b276:	1d19      	adds	r1, r3, #4
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	9103      	str	r1, [sp, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	bfbb      	ittet	lt
 800b280:	425b      	neglt	r3, r3
 800b282:	f042 0202 	orrlt.w	r2, r2, #2
 800b286:	9307      	strge	r3, [sp, #28]
 800b288:	9307      	strlt	r3, [sp, #28]
 800b28a:	bfb8      	it	lt
 800b28c:	9204      	strlt	r2, [sp, #16]
 800b28e:	7823      	ldrb	r3, [r4, #0]
 800b290:	2b2e      	cmp	r3, #46	@ 0x2e
 800b292:	d10a      	bne.n	800b2aa <_vfiprintf_r+0x156>
 800b294:	7863      	ldrb	r3, [r4, #1]
 800b296:	2b2a      	cmp	r3, #42	@ 0x2a
 800b298:	d132      	bne.n	800b300 <_vfiprintf_r+0x1ac>
 800b29a:	9b03      	ldr	r3, [sp, #12]
 800b29c:	1d1a      	adds	r2, r3, #4
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	9203      	str	r2, [sp, #12]
 800b2a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b2a6:	3402      	adds	r4, #2
 800b2a8:	9305      	str	r3, [sp, #20]
 800b2aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b380 <_vfiprintf_r+0x22c>
 800b2ae:	7821      	ldrb	r1, [r4, #0]
 800b2b0:	2203      	movs	r2, #3
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	f7f4 ff8c 	bl	80001d0 <memchr>
 800b2b8:	b138      	cbz	r0, 800b2ca <_vfiprintf_r+0x176>
 800b2ba:	9b04      	ldr	r3, [sp, #16]
 800b2bc:	eba0 000a 	sub.w	r0, r0, sl
 800b2c0:	2240      	movs	r2, #64	@ 0x40
 800b2c2:	4082      	lsls	r2, r0
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	3401      	adds	r4, #1
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b2ce:	4829      	ldr	r0, [pc, #164]	@ (800b374 <_vfiprintf_r+0x220>)
 800b2d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2d4:	2206      	movs	r2, #6
 800b2d6:	f7f4 ff7b 	bl	80001d0 <memchr>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d03f      	beq.n	800b35e <_vfiprintf_r+0x20a>
 800b2de:	4b26      	ldr	r3, [pc, #152]	@ (800b378 <_vfiprintf_r+0x224>)
 800b2e0:	bb1b      	cbnz	r3, 800b32a <_vfiprintf_r+0x1d6>
 800b2e2:	9b03      	ldr	r3, [sp, #12]
 800b2e4:	3307      	adds	r3, #7
 800b2e6:	f023 0307 	bic.w	r3, r3, #7
 800b2ea:	3308      	adds	r3, #8
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2f0:	443b      	add	r3, r7
 800b2f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2f4:	e76a      	b.n	800b1cc <_vfiprintf_r+0x78>
 800b2f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2fa:	460c      	mov	r4, r1
 800b2fc:	2001      	movs	r0, #1
 800b2fe:	e7a8      	b.n	800b252 <_vfiprintf_r+0xfe>
 800b300:	2300      	movs	r3, #0
 800b302:	3401      	adds	r4, #1
 800b304:	9305      	str	r3, [sp, #20]
 800b306:	4619      	mov	r1, r3
 800b308:	f04f 0c0a 	mov.w	ip, #10
 800b30c:	4620      	mov	r0, r4
 800b30e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b312:	3a30      	subs	r2, #48	@ 0x30
 800b314:	2a09      	cmp	r2, #9
 800b316:	d903      	bls.n	800b320 <_vfiprintf_r+0x1cc>
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0c6      	beq.n	800b2aa <_vfiprintf_r+0x156>
 800b31c:	9105      	str	r1, [sp, #20]
 800b31e:	e7c4      	b.n	800b2aa <_vfiprintf_r+0x156>
 800b320:	fb0c 2101 	mla	r1, ip, r1, r2
 800b324:	4604      	mov	r4, r0
 800b326:	2301      	movs	r3, #1
 800b328:	e7f0      	b.n	800b30c <_vfiprintf_r+0x1b8>
 800b32a:	ab03      	add	r3, sp, #12
 800b32c:	9300      	str	r3, [sp, #0]
 800b32e:	462a      	mov	r2, r5
 800b330:	4b12      	ldr	r3, [pc, #72]	@ (800b37c <_vfiprintf_r+0x228>)
 800b332:	a904      	add	r1, sp, #16
 800b334:	4630      	mov	r0, r6
 800b336:	f3af 8000 	nop.w
 800b33a:	4607      	mov	r7, r0
 800b33c:	1c78      	adds	r0, r7, #1
 800b33e:	d1d6      	bne.n	800b2ee <_vfiprintf_r+0x19a>
 800b340:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b342:	07d9      	lsls	r1, r3, #31
 800b344:	d405      	bmi.n	800b352 <_vfiprintf_r+0x1fe>
 800b346:	89ab      	ldrh	r3, [r5, #12]
 800b348:	059a      	lsls	r2, r3, #22
 800b34a:	d402      	bmi.n	800b352 <_vfiprintf_r+0x1fe>
 800b34c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b34e:	f7ff fe7d 	bl	800b04c <__retarget_lock_release_recursive>
 800b352:	89ab      	ldrh	r3, [r5, #12]
 800b354:	065b      	lsls	r3, r3, #25
 800b356:	f53f af1f 	bmi.w	800b198 <_vfiprintf_r+0x44>
 800b35a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b35c:	e71e      	b.n	800b19c <_vfiprintf_r+0x48>
 800b35e:	ab03      	add	r3, sp, #12
 800b360:	9300      	str	r3, [sp, #0]
 800b362:	462a      	mov	r2, r5
 800b364:	4b05      	ldr	r3, [pc, #20]	@ (800b37c <_vfiprintf_r+0x228>)
 800b366:	a904      	add	r1, sp, #16
 800b368:	4630      	mov	r0, r6
 800b36a:	f000 f879 	bl	800b460 <_printf_i>
 800b36e:	e7e4      	b.n	800b33a <_vfiprintf_r+0x1e6>
 800b370:	0800bd14 	.word	0x0800bd14
 800b374:	0800bd1e 	.word	0x0800bd1e
 800b378:	00000000 	.word	0x00000000
 800b37c:	0800b12f 	.word	0x0800b12f
 800b380:	0800bd1a 	.word	0x0800bd1a

0800b384 <_printf_common>:
 800b384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b388:	4616      	mov	r6, r2
 800b38a:	4698      	mov	r8, r3
 800b38c:	688a      	ldr	r2, [r1, #8]
 800b38e:	690b      	ldr	r3, [r1, #16]
 800b390:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b394:	4293      	cmp	r3, r2
 800b396:	bfb8      	it	lt
 800b398:	4613      	movlt	r3, r2
 800b39a:	6033      	str	r3, [r6, #0]
 800b39c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b3a0:	4607      	mov	r7, r0
 800b3a2:	460c      	mov	r4, r1
 800b3a4:	b10a      	cbz	r2, 800b3aa <_printf_common+0x26>
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	6033      	str	r3, [r6, #0]
 800b3aa:	6823      	ldr	r3, [r4, #0]
 800b3ac:	0699      	lsls	r1, r3, #26
 800b3ae:	bf42      	ittt	mi
 800b3b0:	6833      	ldrmi	r3, [r6, #0]
 800b3b2:	3302      	addmi	r3, #2
 800b3b4:	6033      	strmi	r3, [r6, #0]
 800b3b6:	6825      	ldr	r5, [r4, #0]
 800b3b8:	f015 0506 	ands.w	r5, r5, #6
 800b3bc:	d106      	bne.n	800b3cc <_printf_common+0x48>
 800b3be:	f104 0a19 	add.w	sl, r4, #25
 800b3c2:	68e3      	ldr	r3, [r4, #12]
 800b3c4:	6832      	ldr	r2, [r6, #0]
 800b3c6:	1a9b      	subs	r3, r3, r2
 800b3c8:	42ab      	cmp	r3, r5
 800b3ca:	dc26      	bgt.n	800b41a <_printf_common+0x96>
 800b3cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b3d0:	6822      	ldr	r2, [r4, #0]
 800b3d2:	3b00      	subs	r3, #0
 800b3d4:	bf18      	it	ne
 800b3d6:	2301      	movne	r3, #1
 800b3d8:	0692      	lsls	r2, r2, #26
 800b3da:	d42b      	bmi.n	800b434 <_printf_common+0xb0>
 800b3dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b3e0:	4641      	mov	r1, r8
 800b3e2:	4638      	mov	r0, r7
 800b3e4:	47c8      	blx	r9
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	d01e      	beq.n	800b428 <_printf_common+0xa4>
 800b3ea:	6823      	ldr	r3, [r4, #0]
 800b3ec:	6922      	ldr	r2, [r4, #16]
 800b3ee:	f003 0306 	and.w	r3, r3, #6
 800b3f2:	2b04      	cmp	r3, #4
 800b3f4:	bf02      	ittt	eq
 800b3f6:	68e5      	ldreq	r5, [r4, #12]
 800b3f8:	6833      	ldreq	r3, [r6, #0]
 800b3fa:	1aed      	subeq	r5, r5, r3
 800b3fc:	68a3      	ldr	r3, [r4, #8]
 800b3fe:	bf0c      	ite	eq
 800b400:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b404:	2500      	movne	r5, #0
 800b406:	4293      	cmp	r3, r2
 800b408:	bfc4      	itt	gt
 800b40a:	1a9b      	subgt	r3, r3, r2
 800b40c:	18ed      	addgt	r5, r5, r3
 800b40e:	2600      	movs	r6, #0
 800b410:	341a      	adds	r4, #26
 800b412:	42b5      	cmp	r5, r6
 800b414:	d11a      	bne.n	800b44c <_printf_common+0xc8>
 800b416:	2000      	movs	r0, #0
 800b418:	e008      	b.n	800b42c <_printf_common+0xa8>
 800b41a:	2301      	movs	r3, #1
 800b41c:	4652      	mov	r2, sl
 800b41e:	4641      	mov	r1, r8
 800b420:	4638      	mov	r0, r7
 800b422:	47c8      	blx	r9
 800b424:	3001      	adds	r0, #1
 800b426:	d103      	bne.n	800b430 <_printf_common+0xac>
 800b428:	f04f 30ff 	mov.w	r0, #4294967295
 800b42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b430:	3501      	adds	r5, #1
 800b432:	e7c6      	b.n	800b3c2 <_printf_common+0x3e>
 800b434:	18e1      	adds	r1, r4, r3
 800b436:	1c5a      	adds	r2, r3, #1
 800b438:	2030      	movs	r0, #48	@ 0x30
 800b43a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b43e:	4422      	add	r2, r4
 800b440:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b444:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b448:	3302      	adds	r3, #2
 800b44a:	e7c7      	b.n	800b3dc <_printf_common+0x58>
 800b44c:	2301      	movs	r3, #1
 800b44e:	4622      	mov	r2, r4
 800b450:	4641      	mov	r1, r8
 800b452:	4638      	mov	r0, r7
 800b454:	47c8      	blx	r9
 800b456:	3001      	adds	r0, #1
 800b458:	d0e6      	beq.n	800b428 <_printf_common+0xa4>
 800b45a:	3601      	adds	r6, #1
 800b45c:	e7d9      	b.n	800b412 <_printf_common+0x8e>
	...

0800b460 <_printf_i>:
 800b460:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b464:	7e0f      	ldrb	r7, [r1, #24]
 800b466:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b468:	2f78      	cmp	r7, #120	@ 0x78
 800b46a:	4691      	mov	r9, r2
 800b46c:	4680      	mov	r8, r0
 800b46e:	460c      	mov	r4, r1
 800b470:	469a      	mov	sl, r3
 800b472:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b476:	d807      	bhi.n	800b488 <_printf_i+0x28>
 800b478:	2f62      	cmp	r7, #98	@ 0x62
 800b47a:	d80a      	bhi.n	800b492 <_printf_i+0x32>
 800b47c:	2f00      	cmp	r7, #0
 800b47e:	f000 80d1 	beq.w	800b624 <_printf_i+0x1c4>
 800b482:	2f58      	cmp	r7, #88	@ 0x58
 800b484:	f000 80b8 	beq.w	800b5f8 <_printf_i+0x198>
 800b488:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b48c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b490:	e03a      	b.n	800b508 <_printf_i+0xa8>
 800b492:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b496:	2b15      	cmp	r3, #21
 800b498:	d8f6      	bhi.n	800b488 <_printf_i+0x28>
 800b49a:	a101      	add	r1, pc, #4	@ (adr r1, 800b4a0 <_printf_i+0x40>)
 800b49c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b4a0:	0800b4f9 	.word	0x0800b4f9
 800b4a4:	0800b50d 	.word	0x0800b50d
 800b4a8:	0800b489 	.word	0x0800b489
 800b4ac:	0800b489 	.word	0x0800b489
 800b4b0:	0800b489 	.word	0x0800b489
 800b4b4:	0800b489 	.word	0x0800b489
 800b4b8:	0800b50d 	.word	0x0800b50d
 800b4bc:	0800b489 	.word	0x0800b489
 800b4c0:	0800b489 	.word	0x0800b489
 800b4c4:	0800b489 	.word	0x0800b489
 800b4c8:	0800b489 	.word	0x0800b489
 800b4cc:	0800b60b 	.word	0x0800b60b
 800b4d0:	0800b537 	.word	0x0800b537
 800b4d4:	0800b5c5 	.word	0x0800b5c5
 800b4d8:	0800b489 	.word	0x0800b489
 800b4dc:	0800b489 	.word	0x0800b489
 800b4e0:	0800b62d 	.word	0x0800b62d
 800b4e4:	0800b489 	.word	0x0800b489
 800b4e8:	0800b537 	.word	0x0800b537
 800b4ec:	0800b489 	.word	0x0800b489
 800b4f0:	0800b489 	.word	0x0800b489
 800b4f4:	0800b5cd 	.word	0x0800b5cd
 800b4f8:	6833      	ldr	r3, [r6, #0]
 800b4fa:	1d1a      	adds	r2, r3, #4
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	6032      	str	r2, [r6, #0]
 800b500:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b504:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b508:	2301      	movs	r3, #1
 800b50a:	e09c      	b.n	800b646 <_printf_i+0x1e6>
 800b50c:	6833      	ldr	r3, [r6, #0]
 800b50e:	6820      	ldr	r0, [r4, #0]
 800b510:	1d19      	adds	r1, r3, #4
 800b512:	6031      	str	r1, [r6, #0]
 800b514:	0606      	lsls	r6, r0, #24
 800b516:	d501      	bpl.n	800b51c <_printf_i+0xbc>
 800b518:	681d      	ldr	r5, [r3, #0]
 800b51a:	e003      	b.n	800b524 <_printf_i+0xc4>
 800b51c:	0645      	lsls	r5, r0, #25
 800b51e:	d5fb      	bpl.n	800b518 <_printf_i+0xb8>
 800b520:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b524:	2d00      	cmp	r5, #0
 800b526:	da03      	bge.n	800b530 <_printf_i+0xd0>
 800b528:	232d      	movs	r3, #45	@ 0x2d
 800b52a:	426d      	negs	r5, r5
 800b52c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b530:	4858      	ldr	r0, [pc, #352]	@ (800b694 <_printf_i+0x234>)
 800b532:	230a      	movs	r3, #10
 800b534:	e011      	b.n	800b55a <_printf_i+0xfa>
 800b536:	6821      	ldr	r1, [r4, #0]
 800b538:	6833      	ldr	r3, [r6, #0]
 800b53a:	0608      	lsls	r0, r1, #24
 800b53c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b540:	d402      	bmi.n	800b548 <_printf_i+0xe8>
 800b542:	0649      	lsls	r1, r1, #25
 800b544:	bf48      	it	mi
 800b546:	b2ad      	uxthmi	r5, r5
 800b548:	2f6f      	cmp	r7, #111	@ 0x6f
 800b54a:	4852      	ldr	r0, [pc, #328]	@ (800b694 <_printf_i+0x234>)
 800b54c:	6033      	str	r3, [r6, #0]
 800b54e:	bf14      	ite	ne
 800b550:	230a      	movne	r3, #10
 800b552:	2308      	moveq	r3, #8
 800b554:	2100      	movs	r1, #0
 800b556:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b55a:	6866      	ldr	r6, [r4, #4]
 800b55c:	60a6      	str	r6, [r4, #8]
 800b55e:	2e00      	cmp	r6, #0
 800b560:	db05      	blt.n	800b56e <_printf_i+0x10e>
 800b562:	6821      	ldr	r1, [r4, #0]
 800b564:	432e      	orrs	r6, r5
 800b566:	f021 0104 	bic.w	r1, r1, #4
 800b56a:	6021      	str	r1, [r4, #0]
 800b56c:	d04b      	beq.n	800b606 <_printf_i+0x1a6>
 800b56e:	4616      	mov	r6, r2
 800b570:	fbb5 f1f3 	udiv	r1, r5, r3
 800b574:	fb03 5711 	mls	r7, r3, r1, r5
 800b578:	5dc7      	ldrb	r7, [r0, r7]
 800b57a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b57e:	462f      	mov	r7, r5
 800b580:	42bb      	cmp	r3, r7
 800b582:	460d      	mov	r5, r1
 800b584:	d9f4      	bls.n	800b570 <_printf_i+0x110>
 800b586:	2b08      	cmp	r3, #8
 800b588:	d10b      	bne.n	800b5a2 <_printf_i+0x142>
 800b58a:	6823      	ldr	r3, [r4, #0]
 800b58c:	07df      	lsls	r7, r3, #31
 800b58e:	d508      	bpl.n	800b5a2 <_printf_i+0x142>
 800b590:	6923      	ldr	r3, [r4, #16]
 800b592:	6861      	ldr	r1, [r4, #4]
 800b594:	4299      	cmp	r1, r3
 800b596:	bfde      	ittt	le
 800b598:	2330      	movle	r3, #48	@ 0x30
 800b59a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b59e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b5a2:	1b92      	subs	r2, r2, r6
 800b5a4:	6122      	str	r2, [r4, #16]
 800b5a6:	f8cd a000 	str.w	sl, [sp]
 800b5aa:	464b      	mov	r3, r9
 800b5ac:	aa03      	add	r2, sp, #12
 800b5ae:	4621      	mov	r1, r4
 800b5b0:	4640      	mov	r0, r8
 800b5b2:	f7ff fee7 	bl	800b384 <_printf_common>
 800b5b6:	3001      	adds	r0, #1
 800b5b8:	d14a      	bne.n	800b650 <_printf_i+0x1f0>
 800b5ba:	f04f 30ff 	mov.w	r0, #4294967295
 800b5be:	b004      	add	sp, #16
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	6823      	ldr	r3, [r4, #0]
 800b5c6:	f043 0320 	orr.w	r3, r3, #32
 800b5ca:	6023      	str	r3, [r4, #0]
 800b5cc:	4832      	ldr	r0, [pc, #200]	@ (800b698 <_printf_i+0x238>)
 800b5ce:	2778      	movs	r7, #120	@ 0x78
 800b5d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b5d4:	6823      	ldr	r3, [r4, #0]
 800b5d6:	6831      	ldr	r1, [r6, #0]
 800b5d8:	061f      	lsls	r7, r3, #24
 800b5da:	f851 5b04 	ldr.w	r5, [r1], #4
 800b5de:	d402      	bmi.n	800b5e6 <_printf_i+0x186>
 800b5e0:	065f      	lsls	r7, r3, #25
 800b5e2:	bf48      	it	mi
 800b5e4:	b2ad      	uxthmi	r5, r5
 800b5e6:	6031      	str	r1, [r6, #0]
 800b5e8:	07d9      	lsls	r1, r3, #31
 800b5ea:	bf44      	itt	mi
 800b5ec:	f043 0320 	orrmi.w	r3, r3, #32
 800b5f0:	6023      	strmi	r3, [r4, #0]
 800b5f2:	b11d      	cbz	r5, 800b5fc <_printf_i+0x19c>
 800b5f4:	2310      	movs	r3, #16
 800b5f6:	e7ad      	b.n	800b554 <_printf_i+0xf4>
 800b5f8:	4826      	ldr	r0, [pc, #152]	@ (800b694 <_printf_i+0x234>)
 800b5fa:	e7e9      	b.n	800b5d0 <_printf_i+0x170>
 800b5fc:	6823      	ldr	r3, [r4, #0]
 800b5fe:	f023 0320 	bic.w	r3, r3, #32
 800b602:	6023      	str	r3, [r4, #0]
 800b604:	e7f6      	b.n	800b5f4 <_printf_i+0x194>
 800b606:	4616      	mov	r6, r2
 800b608:	e7bd      	b.n	800b586 <_printf_i+0x126>
 800b60a:	6833      	ldr	r3, [r6, #0]
 800b60c:	6825      	ldr	r5, [r4, #0]
 800b60e:	6961      	ldr	r1, [r4, #20]
 800b610:	1d18      	adds	r0, r3, #4
 800b612:	6030      	str	r0, [r6, #0]
 800b614:	062e      	lsls	r6, r5, #24
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	d501      	bpl.n	800b61e <_printf_i+0x1be>
 800b61a:	6019      	str	r1, [r3, #0]
 800b61c:	e002      	b.n	800b624 <_printf_i+0x1c4>
 800b61e:	0668      	lsls	r0, r5, #25
 800b620:	d5fb      	bpl.n	800b61a <_printf_i+0x1ba>
 800b622:	8019      	strh	r1, [r3, #0]
 800b624:	2300      	movs	r3, #0
 800b626:	6123      	str	r3, [r4, #16]
 800b628:	4616      	mov	r6, r2
 800b62a:	e7bc      	b.n	800b5a6 <_printf_i+0x146>
 800b62c:	6833      	ldr	r3, [r6, #0]
 800b62e:	1d1a      	adds	r2, r3, #4
 800b630:	6032      	str	r2, [r6, #0]
 800b632:	681e      	ldr	r6, [r3, #0]
 800b634:	6862      	ldr	r2, [r4, #4]
 800b636:	2100      	movs	r1, #0
 800b638:	4630      	mov	r0, r6
 800b63a:	f7f4 fdc9 	bl	80001d0 <memchr>
 800b63e:	b108      	cbz	r0, 800b644 <_printf_i+0x1e4>
 800b640:	1b80      	subs	r0, r0, r6
 800b642:	6060      	str	r0, [r4, #4]
 800b644:	6863      	ldr	r3, [r4, #4]
 800b646:	6123      	str	r3, [r4, #16]
 800b648:	2300      	movs	r3, #0
 800b64a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b64e:	e7aa      	b.n	800b5a6 <_printf_i+0x146>
 800b650:	6923      	ldr	r3, [r4, #16]
 800b652:	4632      	mov	r2, r6
 800b654:	4649      	mov	r1, r9
 800b656:	4640      	mov	r0, r8
 800b658:	47d0      	blx	sl
 800b65a:	3001      	adds	r0, #1
 800b65c:	d0ad      	beq.n	800b5ba <_printf_i+0x15a>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	079b      	lsls	r3, r3, #30
 800b662:	d413      	bmi.n	800b68c <_printf_i+0x22c>
 800b664:	68e0      	ldr	r0, [r4, #12]
 800b666:	9b03      	ldr	r3, [sp, #12]
 800b668:	4298      	cmp	r0, r3
 800b66a:	bfb8      	it	lt
 800b66c:	4618      	movlt	r0, r3
 800b66e:	e7a6      	b.n	800b5be <_printf_i+0x15e>
 800b670:	2301      	movs	r3, #1
 800b672:	4632      	mov	r2, r6
 800b674:	4649      	mov	r1, r9
 800b676:	4640      	mov	r0, r8
 800b678:	47d0      	blx	sl
 800b67a:	3001      	adds	r0, #1
 800b67c:	d09d      	beq.n	800b5ba <_printf_i+0x15a>
 800b67e:	3501      	adds	r5, #1
 800b680:	68e3      	ldr	r3, [r4, #12]
 800b682:	9903      	ldr	r1, [sp, #12]
 800b684:	1a5b      	subs	r3, r3, r1
 800b686:	42ab      	cmp	r3, r5
 800b688:	dcf2      	bgt.n	800b670 <_printf_i+0x210>
 800b68a:	e7eb      	b.n	800b664 <_printf_i+0x204>
 800b68c:	2500      	movs	r5, #0
 800b68e:	f104 0619 	add.w	r6, r4, #25
 800b692:	e7f5      	b.n	800b680 <_printf_i+0x220>
 800b694:	0800bd25 	.word	0x0800bd25
 800b698:	0800bd36 	.word	0x0800bd36

0800b69c <__sflush_r>:
 800b69c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b6a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a4:	0716      	lsls	r6, r2, #28
 800b6a6:	4605      	mov	r5, r0
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	d454      	bmi.n	800b756 <__sflush_r+0xba>
 800b6ac:	684b      	ldr	r3, [r1, #4]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	dc02      	bgt.n	800b6b8 <__sflush_r+0x1c>
 800b6b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	dd48      	ble.n	800b74a <__sflush_r+0xae>
 800b6b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6ba:	2e00      	cmp	r6, #0
 800b6bc:	d045      	beq.n	800b74a <__sflush_r+0xae>
 800b6be:	2300      	movs	r3, #0
 800b6c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b6c4:	682f      	ldr	r7, [r5, #0]
 800b6c6:	6a21      	ldr	r1, [r4, #32]
 800b6c8:	602b      	str	r3, [r5, #0]
 800b6ca:	d030      	beq.n	800b72e <__sflush_r+0x92>
 800b6cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b6ce:	89a3      	ldrh	r3, [r4, #12]
 800b6d0:	0759      	lsls	r1, r3, #29
 800b6d2:	d505      	bpl.n	800b6e0 <__sflush_r+0x44>
 800b6d4:	6863      	ldr	r3, [r4, #4]
 800b6d6:	1ad2      	subs	r2, r2, r3
 800b6d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b6da:	b10b      	cbz	r3, 800b6e0 <__sflush_r+0x44>
 800b6dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b6de:	1ad2      	subs	r2, r2, r3
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b6e4:	6a21      	ldr	r1, [r4, #32]
 800b6e6:	4628      	mov	r0, r5
 800b6e8:	47b0      	blx	r6
 800b6ea:	1c43      	adds	r3, r0, #1
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	d106      	bne.n	800b6fe <__sflush_r+0x62>
 800b6f0:	6829      	ldr	r1, [r5, #0]
 800b6f2:	291d      	cmp	r1, #29
 800b6f4:	d82b      	bhi.n	800b74e <__sflush_r+0xb2>
 800b6f6:	4a2a      	ldr	r2, [pc, #168]	@ (800b7a0 <__sflush_r+0x104>)
 800b6f8:	40ca      	lsrs	r2, r1
 800b6fa:	07d6      	lsls	r6, r2, #31
 800b6fc:	d527      	bpl.n	800b74e <__sflush_r+0xb2>
 800b6fe:	2200      	movs	r2, #0
 800b700:	6062      	str	r2, [r4, #4]
 800b702:	04d9      	lsls	r1, r3, #19
 800b704:	6922      	ldr	r2, [r4, #16]
 800b706:	6022      	str	r2, [r4, #0]
 800b708:	d504      	bpl.n	800b714 <__sflush_r+0x78>
 800b70a:	1c42      	adds	r2, r0, #1
 800b70c:	d101      	bne.n	800b712 <__sflush_r+0x76>
 800b70e:	682b      	ldr	r3, [r5, #0]
 800b710:	b903      	cbnz	r3, 800b714 <__sflush_r+0x78>
 800b712:	6560      	str	r0, [r4, #84]	@ 0x54
 800b714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b716:	602f      	str	r7, [r5, #0]
 800b718:	b1b9      	cbz	r1, 800b74a <__sflush_r+0xae>
 800b71a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b71e:	4299      	cmp	r1, r3
 800b720:	d002      	beq.n	800b728 <__sflush_r+0x8c>
 800b722:	4628      	mov	r0, r5
 800b724:	f7ff fca2 	bl	800b06c <_free_r>
 800b728:	2300      	movs	r3, #0
 800b72a:	6363      	str	r3, [r4, #52]	@ 0x34
 800b72c:	e00d      	b.n	800b74a <__sflush_r+0xae>
 800b72e:	2301      	movs	r3, #1
 800b730:	4628      	mov	r0, r5
 800b732:	47b0      	blx	r6
 800b734:	4602      	mov	r2, r0
 800b736:	1c50      	adds	r0, r2, #1
 800b738:	d1c9      	bne.n	800b6ce <__sflush_r+0x32>
 800b73a:	682b      	ldr	r3, [r5, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d0c6      	beq.n	800b6ce <__sflush_r+0x32>
 800b740:	2b1d      	cmp	r3, #29
 800b742:	d001      	beq.n	800b748 <__sflush_r+0xac>
 800b744:	2b16      	cmp	r3, #22
 800b746:	d11e      	bne.n	800b786 <__sflush_r+0xea>
 800b748:	602f      	str	r7, [r5, #0]
 800b74a:	2000      	movs	r0, #0
 800b74c:	e022      	b.n	800b794 <__sflush_r+0xf8>
 800b74e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b752:	b21b      	sxth	r3, r3
 800b754:	e01b      	b.n	800b78e <__sflush_r+0xf2>
 800b756:	690f      	ldr	r7, [r1, #16]
 800b758:	2f00      	cmp	r7, #0
 800b75a:	d0f6      	beq.n	800b74a <__sflush_r+0xae>
 800b75c:	0793      	lsls	r3, r2, #30
 800b75e:	680e      	ldr	r6, [r1, #0]
 800b760:	bf08      	it	eq
 800b762:	694b      	ldreq	r3, [r1, #20]
 800b764:	600f      	str	r7, [r1, #0]
 800b766:	bf18      	it	ne
 800b768:	2300      	movne	r3, #0
 800b76a:	eba6 0807 	sub.w	r8, r6, r7
 800b76e:	608b      	str	r3, [r1, #8]
 800b770:	f1b8 0f00 	cmp.w	r8, #0
 800b774:	dde9      	ble.n	800b74a <__sflush_r+0xae>
 800b776:	6a21      	ldr	r1, [r4, #32]
 800b778:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b77a:	4643      	mov	r3, r8
 800b77c:	463a      	mov	r2, r7
 800b77e:	4628      	mov	r0, r5
 800b780:	47b0      	blx	r6
 800b782:	2800      	cmp	r0, #0
 800b784:	dc08      	bgt.n	800b798 <__sflush_r+0xfc>
 800b786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b78a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b78e:	81a3      	strh	r3, [r4, #12]
 800b790:	f04f 30ff 	mov.w	r0, #4294967295
 800b794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b798:	4407      	add	r7, r0
 800b79a:	eba8 0800 	sub.w	r8, r8, r0
 800b79e:	e7e7      	b.n	800b770 <__sflush_r+0xd4>
 800b7a0:	20400001 	.word	0x20400001

0800b7a4 <_fflush_r>:
 800b7a4:	b538      	push	{r3, r4, r5, lr}
 800b7a6:	690b      	ldr	r3, [r1, #16]
 800b7a8:	4605      	mov	r5, r0
 800b7aa:	460c      	mov	r4, r1
 800b7ac:	b913      	cbnz	r3, 800b7b4 <_fflush_r+0x10>
 800b7ae:	2500      	movs	r5, #0
 800b7b0:	4628      	mov	r0, r5
 800b7b2:	bd38      	pop	{r3, r4, r5, pc}
 800b7b4:	b118      	cbz	r0, 800b7be <_fflush_r+0x1a>
 800b7b6:	6a03      	ldr	r3, [r0, #32]
 800b7b8:	b90b      	cbnz	r3, 800b7be <_fflush_r+0x1a>
 800b7ba:	f7ff f9e9 	bl	800ab90 <__sinit>
 800b7be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d0f3      	beq.n	800b7ae <_fflush_r+0xa>
 800b7c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b7c8:	07d0      	lsls	r0, r2, #31
 800b7ca:	d404      	bmi.n	800b7d6 <_fflush_r+0x32>
 800b7cc:	0599      	lsls	r1, r3, #22
 800b7ce:	d402      	bmi.n	800b7d6 <_fflush_r+0x32>
 800b7d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7d2:	f7ff fc3a 	bl	800b04a <__retarget_lock_acquire_recursive>
 800b7d6:	4628      	mov	r0, r5
 800b7d8:	4621      	mov	r1, r4
 800b7da:	f7ff ff5f 	bl	800b69c <__sflush_r>
 800b7de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b7e0:	07da      	lsls	r2, r3, #31
 800b7e2:	4605      	mov	r5, r0
 800b7e4:	d4e4      	bmi.n	800b7b0 <_fflush_r+0xc>
 800b7e6:	89a3      	ldrh	r3, [r4, #12]
 800b7e8:	059b      	lsls	r3, r3, #22
 800b7ea:	d4e1      	bmi.n	800b7b0 <_fflush_r+0xc>
 800b7ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b7ee:	f7ff fc2d 	bl	800b04c <__retarget_lock_release_recursive>
 800b7f2:	e7dd      	b.n	800b7b0 <_fflush_r+0xc>

0800b7f4 <__swhatbuf_r>:
 800b7f4:	b570      	push	{r4, r5, r6, lr}
 800b7f6:	460c      	mov	r4, r1
 800b7f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	b096      	sub	sp, #88	@ 0x58
 800b800:	4615      	mov	r5, r2
 800b802:	461e      	mov	r6, r3
 800b804:	da0d      	bge.n	800b822 <__swhatbuf_r+0x2e>
 800b806:	89a3      	ldrh	r3, [r4, #12]
 800b808:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b80c:	f04f 0100 	mov.w	r1, #0
 800b810:	bf14      	ite	ne
 800b812:	2340      	movne	r3, #64	@ 0x40
 800b814:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b818:	2000      	movs	r0, #0
 800b81a:	6031      	str	r1, [r6, #0]
 800b81c:	602b      	str	r3, [r5, #0]
 800b81e:	b016      	add	sp, #88	@ 0x58
 800b820:	bd70      	pop	{r4, r5, r6, pc}
 800b822:	466a      	mov	r2, sp
 800b824:	f000 f848 	bl	800b8b8 <_fstat_r>
 800b828:	2800      	cmp	r0, #0
 800b82a:	dbec      	blt.n	800b806 <__swhatbuf_r+0x12>
 800b82c:	9901      	ldr	r1, [sp, #4]
 800b82e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b832:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b836:	4259      	negs	r1, r3
 800b838:	4159      	adcs	r1, r3
 800b83a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b83e:	e7eb      	b.n	800b818 <__swhatbuf_r+0x24>

0800b840 <__smakebuf_r>:
 800b840:	898b      	ldrh	r3, [r1, #12]
 800b842:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b844:	079d      	lsls	r5, r3, #30
 800b846:	4606      	mov	r6, r0
 800b848:	460c      	mov	r4, r1
 800b84a:	d507      	bpl.n	800b85c <__smakebuf_r+0x1c>
 800b84c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b850:	6023      	str	r3, [r4, #0]
 800b852:	6123      	str	r3, [r4, #16]
 800b854:	2301      	movs	r3, #1
 800b856:	6163      	str	r3, [r4, #20]
 800b858:	b003      	add	sp, #12
 800b85a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b85c:	ab01      	add	r3, sp, #4
 800b85e:	466a      	mov	r2, sp
 800b860:	f7ff ffc8 	bl	800b7f4 <__swhatbuf_r>
 800b864:	9f00      	ldr	r7, [sp, #0]
 800b866:	4605      	mov	r5, r0
 800b868:	4639      	mov	r1, r7
 800b86a:	4630      	mov	r0, r6
 800b86c:	f7ff f878 	bl	800a960 <_malloc_r>
 800b870:	b948      	cbnz	r0, 800b886 <__smakebuf_r+0x46>
 800b872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b876:	059a      	lsls	r2, r3, #22
 800b878:	d4ee      	bmi.n	800b858 <__smakebuf_r+0x18>
 800b87a:	f023 0303 	bic.w	r3, r3, #3
 800b87e:	f043 0302 	orr.w	r3, r3, #2
 800b882:	81a3      	strh	r3, [r4, #12]
 800b884:	e7e2      	b.n	800b84c <__smakebuf_r+0xc>
 800b886:	89a3      	ldrh	r3, [r4, #12]
 800b888:	6020      	str	r0, [r4, #0]
 800b88a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b88e:	81a3      	strh	r3, [r4, #12]
 800b890:	9b01      	ldr	r3, [sp, #4]
 800b892:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b896:	b15b      	cbz	r3, 800b8b0 <__smakebuf_r+0x70>
 800b898:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b89c:	4630      	mov	r0, r6
 800b89e:	f000 f81d 	bl	800b8dc <_isatty_r>
 800b8a2:	b128      	cbz	r0, 800b8b0 <__smakebuf_r+0x70>
 800b8a4:	89a3      	ldrh	r3, [r4, #12]
 800b8a6:	f023 0303 	bic.w	r3, r3, #3
 800b8aa:	f043 0301 	orr.w	r3, r3, #1
 800b8ae:	81a3      	strh	r3, [r4, #12]
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	431d      	orrs	r5, r3
 800b8b4:	81a5      	strh	r5, [r4, #12]
 800b8b6:	e7cf      	b.n	800b858 <__smakebuf_r+0x18>

0800b8b8 <_fstat_r>:
 800b8b8:	b538      	push	{r3, r4, r5, lr}
 800b8ba:	4d07      	ldr	r5, [pc, #28]	@ (800b8d8 <_fstat_r+0x20>)
 800b8bc:	2300      	movs	r3, #0
 800b8be:	4604      	mov	r4, r0
 800b8c0:	4608      	mov	r0, r1
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	602b      	str	r3, [r5, #0]
 800b8c6:	f7f6 fd22 	bl	800230e <_fstat>
 800b8ca:	1c43      	adds	r3, r0, #1
 800b8cc:	d102      	bne.n	800b8d4 <_fstat_r+0x1c>
 800b8ce:	682b      	ldr	r3, [r5, #0]
 800b8d0:	b103      	cbz	r3, 800b8d4 <_fstat_r+0x1c>
 800b8d2:	6023      	str	r3, [r4, #0]
 800b8d4:	bd38      	pop	{r3, r4, r5, pc}
 800b8d6:	bf00      	nop
 800b8d8:	20000af8 	.word	0x20000af8

0800b8dc <_isatty_r>:
 800b8dc:	b538      	push	{r3, r4, r5, lr}
 800b8de:	4d06      	ldr	r5, [pc, #24]	@ (800b8f8 <_isatty_r+0x1c>)
 800b8e0:	2300      	movs	r3, #0
 800b8e2:	4604      	mov	r4, r0
 800b8e4:	4608      	mov	r0, r1
 800b8e6:	602b      	str	r3, [r5, #0]
 800b8e8:	f7f6 fd21 	bl	800232e <_isatty>
 800b8ec:	1c43      	adds	r3, r0, #1
 800b8ee:	d102      	bne.n	800b8f6 <_isatty_r+0x1a>
 800b8f0:	682b      	ldr	r3, [r5, #0]
 800b8f2:	b103      	cbz	r3, 800b8f6 <_isatty_r+0x1a>
 800b8f4:	6023      	str	r3, [r4, #0]
 800b8f6:	bd38      	pop	{r3, r4, r5, pc}
 800b8f8:	20000af8 	.word	0x20000af8

0800b8fc <_init>:
 800b8fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b8fe:	bf00      	nop
 800b900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b902:	bc08      	pop	{r3}
 800b904:	469e      	mov	lr, r3
 800b906:	4770      	bx	lr

0800b908 <_fini>:
 800b908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b90a:	bf00      	nop
 800b90c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b90e:	bc08      	pop	{r3}
 800b910:	469e      	mov	lr, r3
 800b912:	4770      	bx	lr
