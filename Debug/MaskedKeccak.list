
MaskedKeccak.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b870  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800ba00  0800ba00  0000ca00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc18  0800bc18  0000d088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bc18  0800bc18  0000cc18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc20  0800bc20  0000d088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc20  0800bc20  0000cc20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bc24  0800bc24  0000cc24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800bc28  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d088  2**0
                  CONTENTS
 10 .bss          00000a78  20000088  20000088  0000d088  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000b00  20000b00  0000d088  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b044  00000000  00000000  0000d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000461a  00000000  00000000  000280fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0002c718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001106  00000000  00000000  0002dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000662d  00000000  00000000  0002ee46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e71d  00000000  00000000  00035473  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1dbc  00000000  00000000  00053b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012594c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006578  00000000  00000000  00125990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0012bf08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9e8 	.word	0x0800b9e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800b9e8 	.word	0x0800b9e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <theta>:
    x = z;
  }
}

void theta(uint64_t* state)
{
 800059c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80005a0:	b0a0      	sub	sp, #128	@ 0x80
 80005a2:	af00      	add	r7, sp, #0
 80005a4:	6278      	str	r0, [r7, #36]	@ 0x24
  /* Theta */

  uint64_t C[5] = {0, 0, 0, 0, 0};
 80005a6:	f107 0050 	add.w	r0, r7, #80	@ 0x50
 80005aa:	2328      	movs	r3, #40	@ 0x28
 80005ac:	461a      	mov	r2, r3
 80005ae:	2100      	movs	r1, #0
 80005b0:	f00a fd38 	bl	800b024 <memset>
  uint64_t D[5] = {0, 0, 0, 0, 0};
 80005b4:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80005b8:	2328      	movs	r3, #40	@ 0x28
 80005ba:	461a      	mov	r2, r3
 80005bc:	2100      	movs	r1, #0
 80005be:	f00a fd31 	bl	800b024 <memset>

  int x, y;
  for (x = 0; x < 5; ++x) {
 80005c2:	2300      	movs	r3, #0
 80005c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80005c6:	e043      	b.n	8000650 <theta+0xb4>
    C[x] = state[x] ^ state[5 + x] ^ state[10 + x] ^ state[15 + x] ^ state[20 + x];
 80005c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ca:	00da      	lsls	r2, r3, #3
 80005cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005ce:	4413      	add	r3, r2
 80005d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80005d4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005d6:	3305      	adds	r3, #5
 80005d8:	00da      	lsls	r2, r3, #3
 80005da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005dc:	4413      	add	r3, r2
 80005de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005e2:	ea80 0402 	eor.w	r4, r0, r2
 80005e6:	ea81 0503 	eor.w	r5, r1, r3
 80005ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80005ec:	330a      	adds	r3, #10
 80005ee:	00da      	lsls	r2, r3, #3
 80005f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80005f2:	4413      	add	r3, r2
 80005f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005f8:	ea84 0a02 	eor.w	sl, r4, r2
 80005fc:	ea85 0b03 	eor.w	fp, r5, r3
 8000600:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000602:	330f      	adds	r3, #15
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000608:	4413      	add	r3, r2
 800060a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800060e:	ea8a 0102 	eor.w	r1, sl, r2
 8000612:	61b9      	str	r1, [r7, #24]
 8000614:	ea8b 0303 	eor.w	r3, fp, r3
 8000618:	61fb      	str	r3, [r7, #28]
 800061a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800061c:	3314      	adds	r3, #20
 800061e:	00da      	lsls	r2, r3, #3
 8000620:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000622:	4413      	add	r3, r2
 8000624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000628:	69b9      	ldr	r1, [r7, #24]
 800062a:	4051      	eors	r1, r2
 800062c:	6139      	str	r1, [r7, #16]
 800062e:	69f9      	ldr	r1, [r7, #28]
 8000630:	404b      	eors	r3, r1
 8000632:	617b      	str	r3, [r7, #20]
 8000634:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000636:	00db      	lsls	r3, r3, #3
 8000638:	3360      	adds	r3, #96	@ 0x60
 800063a:	f107 0220 	add.w	r2, r7, #32
 800063e:	4413      	add	r3, r2
 8000640:	3b30      	subs	r3, #48	@ 0x30
 8000642:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000646:	e9c3 1200 	strd	r1, r2, [r3]
  for (x = 0; x < 5; ++x) {
 800064a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800064c:	3301      	adds	r3, #1
 800064e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000650:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000652:	2b04      	cmp	r3, #4
 8000654:	ddb8      	ble.n	80005c8 <theta+0x2c>
  }

  for (x = 0; x < 5; ++x) {
 8000656:	2300      	movs	r3, #0
 8000658:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800065a:	e072      	b.n	8000742 <theta+0x1a6>
    /* in order to avoid negative mod values,
      we've replaced "(x - 1) % 5" with "(x + 4) % 5" */
    D[x] = C[(x + 4) % 5] ^ ROTL64(C[(x + 1) % 5], 1);
 800065c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800065e:	1d19      	adds	r1, r3, #4
 8000660:	4b3c      	ldr	r3, [pc, #240]	@ (8000754 <theta+0x1b8>)
 8000662:	fb83 2301 	smull	r2, r3, r3, r1
 8000666:	105a      	asrs	r2, r3, #1
 8000668:	17cb      	asrs	r3, r1, #31
 800066a:	1ad2      	subs	r2, r2, r3
 800066c:	4613      	mov	r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	4413      	add	r3, r2
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	00d3      	lsls	r3, r2, #3
 8000676:	3360      	adds	r3, #96	@ 0x60
 8000678:	f107 0220 	add.w	r2, r7, #32
 800067c:	4413      	add	r3, r2
 800067e:	3b30      	subs	r3, #48	@ 0x30
 8000680:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000684:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000686:	1c5c      	adds	r4, r3, #1
 8000688:	4b32      	ldr	r3, [pc, #200]	@ (8000754 <theta+0x1b8>)
 800068a:	fb83 2304 	smull	r2, r3, r3, r4
 800068e:	105a      	asrs	r2, r3, #1
 8000690:	17e3      	asrs	r3, r4, #31
 8000692:	1ad2      	subs	r2, r2, r3
 8000694:	4613      	mov	r3, r2
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	4413      	add	r3, r2
 800069a:	1ae2      	subs	r2, r4, r3
 800069c:	00d3      	lsls	r3, r2, #3
 800069e:	3360      	adds	r3, #96	@ 0x60
 80006a0:	f107 0220 	add.w	r2, r7, #32
 80006a4:	4413      	add	r3, r2
 80006a6:	3b30      	subs	r3, #48	@ 0x30
 80006a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006ac:	0fd5      	lsrs	r5, r2, #31
 80006ae:	005c      	lsls	r4, r3, #1
 80006b0:	ea45 0904 	orr.w	r9, r5, r4
 80006b4:	0fdc      	lsrs	r4, r3, #31
 80006b6:	0053      	lsls	r3, r2, #1
 80006b8:	ea44 0803 	orr.w	r8, r4, r3
 80006bc:	ea80 0308 	eor.w	r3, r0, r8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	ea81 0309 	eor.w	r3, r1, r9
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ca:	00db      	lsls	r3, r3, #3
 80006cc:	3360      	adds	r3, #96	@ 0x60
 80006ce:	f107 0220 	add.w	r2, r7, #32
 80006d2:	4413      	add	r3, r2
 80006d4:	3b58      	subs	r3, #88	@ 0x58
 80006d6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80006da:	e9c3 1200 	strd	r1, r2, [r3]

    for (y = 0; y < 5; ++y) {
 80006de:	2300      	movs	r3, #0
 80006e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80006e2:	e028      	b.n	8000736 <theta+0x19a>
      state[y * 5 + x] = state[y * 5 + x] ^ D[x];
 80006e4:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 80006e6:	4613      	mov	r3, r2
 80006e8:	009b      	lsls	r3, r3, #2
 80006ea:	441a      	add	r2, r3
 80006ec:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006ee:	4413      	add	r3, r2
 80006f0:	00db      	lsls	r3, r3, #3
 80006f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006f4:	4413      	add	r3, r2
 80006f6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80006fa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80006fc:	00db      	lsls	r3, r3, #3
 80006fe:	3360      	adds	r3, #96	@ 0x60
 8000700:	f107 0220 	add.w	r2, r7, #32
 8000704:	4413      	add	r3, r2
 8000706:	3b58      	subs	r3, #88	@ 0x58
 8000708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800070c:	6fbd      	ldr	r5, [r7, #120]	@ 0x78
 800070e:	462c      	mov	r4, r5
 8000710:	00a4      	lsls	r4, r4, #2
 8000712:	4425      	add	r5, r4
 8000714:	6ffc      	ldr	r4, [r7, #124]	@ 0x7c
 8000716:	442c      	add	r4, r5
 8000718:	00e4      	lsls	r4, r4, #3
 800071a:	6a7d      	ldr	r5, [r7, #36]	@ 0x24
 800071c:	442c      	add	r4, r5
 800071e:	ea80 0502 	eor.w	r5, r0, r2
 8000722:	603d      	str	r5, [r7, #0]
 8000724:	404b      	eors	r3, r1
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	e9d7 2300 	ldrd	r2, r3, [r7]
 800072c:	e9c4 2300 	strd	r2, r3, [r4]
    for (y = 0; y < 5; ++y) {
 8000730:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000732:	3301      	adds	r3, #1
 8000734:	67bb      	str	r3, [r7, #120]	@ 0x78
 8000736:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8000738:	2b04      	cmp	r3, #4
 800073a:	ddd3      	ble.n	80006e4 <theta+0x148>
  for (x = 0; x < 5; ++x) {
 800073c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800073e:	3301      	adds	r3, #1
 8000740:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8000742:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8000744:	2b04      	cmp	r3, #4
 8000746:	dd89      	ble.n	800065c <theta+0xc0>
    }
  }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3780      	adds	r7, #128	@ 0x80
 800074e:	46bd      	mov	sp, r7
 8000750:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000754:	66666667 	.word	0x66666667

08000758 <rho>:

void rho(uint64_t* state)
{
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	b086      	sub	sp, #24
 800075e:	af00      	add	r7, sp, #0
 8000760:	60f8      	str	r0, [r7, #12]
  /* Rho */
  int x, y;
  for (y = 0; y < 5; ++y) {
 8000762:	2100      	movs	r1, #0
 8000764:	6139      	str	r1, [r7, #16]
 8000766:	e062      	b.n	800082e <rho+0xd6>
    for (x = 0; x < 5; ++x) {
 8000768:	2100      	movs	r1, #0
 800076a:	6179      	str	r1, [r7, #20]
 800076c:	e059      	b.n	8000822 <rho+0xca>
      state[y * 5 + x] = ROTL64(state[y * 5 + x], rx[y * 5 + x]);
 800076e:	6938      	ldr	r0, [r7, #16]
 8000770:	4601      	mov	r1, r0
 8000772:	0089      	lsls	r1, r1, #2
 8000774:	4408      	add	r0, r1
 8000776:	6979      	ldr	r1, [r7, #20]
 8000778:	4401      	add	r1, r0
 800077a:	00c9      	lsls	r1, r1, #3
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	4401      	add	r1, r0
 8000780:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000784:	693e      	ldr	r6, [r7, #16]
 8000786:	4634      	mov	r4, r6
 8000788:	4626      	mov	r6, r4
 800078a:	00b6      	lsls	r6, r6, #2
 800078c:	eb06 0c04 	add.w	ip, r6, r4
 8000790:	697e      	ldr	r6, [r7, #20]
 8000792:	4466      	add	r6, ip
 8000794:	4c2a      	ldr	r4, [pc, #168]	@ (8000840 <rho+0xe8>)
 8000796:	f854 6026 	ldr.w	r6, [r4, r6, lsl #2]
 800079a:	693c      	ldr	r4, [r7, #16]
 800079c:	46a4      	mov	ip, r4
 800079e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80007a2:	44a4      	add	ip, r4
 80007a4:	697c      	ldr	r4, [r7, #20]
 80007a6:	44a4      	add	ip, r4
 80007a8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80007ac:	68fc      	ldr	r4, [r7, #12]
 80007ae:	eb04 0a0c 	add.w	sl, r4, ip
 80007b2:	f1a6 0e20 	sub.w	lr, r6, #32
 80007b6:	f1c6 0c20 	rsb	ip, r6, #32
 80007ba:	fa01 f406 	lsl.w	r4, r1, r6
 80007be:	607c      	str	r4, [r7, #4]
 80007c0:	fa00 fe0e 	lsl.w	lr, r0, lr
 80007c4:	687c      	ldr	r4, [r7, #4]
 80007c6:	ea44 040e 	orr.w	r4, r4, lr
 80007ca:	607c      	str	r4, [r7, #4]
 80007cc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80007d0:	687c      	ldr	r4, [r7, #4]
 80007d2:	ea44 040c 	orr.w	r4, r4, ip
 80007d6:	607c      	str	r4, [r7, #4]
 80007d8:	fa00 f406 	lsl.w	r4, r0, r6
 80007dc:	603c      	str	r4, [r7, #0]
 80007de:	4276      	negs	r6, r6
 80007e0:	f006 063f 	and.w	r6, r6, #63	@ 0x3f
 80007e4:	f1c6 0e20 	rsb	lr, r6, #32
 80007e8:	f1a6 0c20 	sub.w	ip, r6, #32
 80007ec:	fa20 f206 	lsr.w	r2, r0, r6
 80007f0:	fa01 fe0e 	lsl.w	lr, r1, lr
 80007f4:	ea42 020e 	orr.w	r2, r2, lr
 80007f8:	fa21 fc0c 	lsr.w	ip, r1, ip
 80007fc:	ea42 020c 	orr.w	r2, r2, ip
 8000800:	fa21 f306 	lsr.w	r3, r1, r6
 8000804:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000808:	4621      	mov	r1, r4
 800080a:	ea41 0802 	orr.w	r8, r1, r2
 800080e:	4629      	mov	r1, r5
 8000810:	ea41 0903 	orr.w	r9, r1, r3
 8000814:	4642      	mov	r2, r8
 8000816:	464b      	mov	r3, r9
 8000818:	e9ca 2300 	strd	r2, r3, [sl]
    for (x = 0; x < 5; ++x) {
 800081c:	6979      	ldr	r1, [r7, #20]
 800081e:	3101      	adds	r1, #1
 8000820:	6179      	str	r1, [r7, #20]
 8000822:	6979      	ldr	r1, [r7, #20]
 8000824:	2904      	cmp	r1, #4
 8000826:	dda2      	ble.n	800076e <rho+0x16>
  for (y = 0; y < 5; ++y) {
 8000828:	6939      	ldr	r1, [r7, #16]
 800082a:	3101      	adds	r1, #1
 800082c:	6139      	str	r1, [r7, #16]
 800082e:	6939      	ldr	r1, [r7, #16]
 8000830:	2904      	cmp	r1, #4
 8000832:	dd99      	ble.n	8000768 <rho+0x10>
    }
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000840:	0800ba8c 	.word	0x0800ba8c

08000844 <pi>:

void pi(uint64_t* state)
{
 8000844:	b480      	push	{r7}
 8000846:	b0b9      	sub	sp, #228	@ 0xe4
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Pi */
  uint64_t B[25];

  int x, y;
  for (y = 0; y < 5; ++y) {
 800084c:	2300      	movs	r3, #0
 800084e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8000852:	e02c      	b.n	80008ae <pi+0x6a>
    for (x = 0; x < 5; ++x) {
 8000854:	2300      	movs	r3, #0
 8000856:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800085a:	e01f      	b.n	800089c <pi+0x58>
      B[y * 5 + x] = state[5 * y + x];
 800085c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000860:	4613      	mov	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	441a      	add	r2, r3
 8000866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800086a:	4413      	add	r3, r2
 800086c:	00db      	lsls	r3, r3, #3
 800086e:	687a      	ldr	r2, [r7, #4]
 8000870:	18d0      	adds	r0, r2, r3
 8000872:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000876:	4613      	mov	r3, r2
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	441a      	add	r2, r3
 800087c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000880:	18d1      	adds	r1, r2, r3
 8000882:	e9d0 2300 	ldrd	r2, r3, [r0]
 8000886:	00c9      	lsls	r1, r1, #3
 8000888:	31e0      	adds	r1, #224	@ 0xe0
 800088a:	4439      	add	r1, r7
 800088c:	39d8      	subs	r1, #216	@ 0xd8
 800088e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000892:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000896:	3301      	adds	r3, #1
 8000898:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800089c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	dddb      	ble.n	800085c <pi+0x18>
  for (y = 0; y < 5; ++y) {
 80008a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008a8:	3301      	adds	r3, #1
 80008aa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008ae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80008b2:	2b04      	cmp	r3, #4
 80008b4:	ddce      	ble.n	8000854 <pi+0x10>
    }
  }
  int u, v;
  for (y = 0; y < 5; ++y) {
 80008b6:	2300      	movs	r3, #0
 80008b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80008bc:	e04f      	b.n	800095e <pi+0x11a>
    for (x = 0; x < 5; ++x) {
 80008be:	2300      	movs	r3, #0
 80008c0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80008c4:	e042      	b.n	800094c <pi+0x108>
      u = (0 * x + 1 * y) % 5;
 80008c6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ca:	4b2a      	ldr	r3, [pc, #168]	@ (8000974 <pi+0x130>)
 80008cc:	fb83 1302 	smull	r1, r3, r3, r2
 80008d0:	1059      	asrs	r1, r3, #1
 80008d2:	17d3      	asrs	r3, r2, #31
 80008d4:	1ac9      	subs	r1, r1, r3
 80008d6:	460b      	mov	r3, r1
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	440b      	add	r3, r1
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      v = (2 * x + 3 * y) % 5;
 80008e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80008e6:	0059      	lsls	r1, r3, #1
 80008e8:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 80008ec:	4613      	mov	r3, r2
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	4413      	add	r3, r2
 80008f2:	18ca      	adds	r2, r1, r3
 80008f4:	4b1f      	ldr	r3, [pc, #124]	@ (8000974 <pi+0x130>)
 80008f6:	fb83 1302 	smull	r1, r3, r3, r2
 80008fa:	1059      	asrs	r1, r3, #1
 80008fc:	17d3      	asrs	r3, r2, #31
 80008fe:	1ac9      	subs	r1, r1, r3
 8000900:	460b      	mov	r3, r1
 8000902:	009b      	lsls	r3, r3, #2
 8000904:	440b      	add	r3, r1
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0

      state[v * 5 + u] = B[5 * y + x];
 800090c:	f8d7 20d8 	ldr.w	r2, [r7, #216]	@ 0xd8
 8000910:	4613      	mov	r3, r2
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	441a      	add	r2, r3
 8000916:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800091a:	18d0      	adds	r0, r2, r3
 800091c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8000920:	4613      	mov	r3, r2
 8000922:	009b      	lsls	r3, r3, #2
 8000924:	441a      	add	r2, r3
 8000926:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800092a:	4413      	add	r3, r2
 800092c:	00db      	lsls	r3, r3, #3
 800092e:	687a      	ldr	r2, [r7, #4]
 8000930:	18d1      	adds	r1, r2, r3
 8000932:	00c3      	lsls	r3, r0, #3
 8000934:	33e0      	adds	r3, #224	@ 0xe0
 8000936:	443b      	add	r3, r7
 8000938:	3bd8      	subs	r3, #216	@ 0xd8
 800093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800093e:	e9c1 2300 	strd	r2, r3, [r1]
    for (x = 0; x < 5; ++x) {
 8000942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000946:	3301      	adds	r3, #1
 8000948:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800094c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000950:	2b04      	cmp	r3, #4
 8000952:	ddb8      	ble.n	80008c6 <pi+0x82>
  for (y = 0; y < 5; ++y) {
 8000954:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000958:	3301      	adds	r3, #1
 800095a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800095e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000962:	2b04      	cmp	r3, #4
 8000964:	ddab      	ble.n	80008be <pi+0x7a>
    }
  }
}
 8000966:	bf00      	nop
 8000968:	bf00      	nop
 800096a:	37e4      	adds	r7, #228	@ 0xe4
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr
 8000974:	66666667 	.word	0x66666667

08000978 <chi>:

void chi(uint64_t* state)
{
 8000978:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800097c:	b08e      	sub	sp, #56	@ 0x38
 800097e:	af00      	add	r7, sp, #0
 8000980:	6078      	str	r0, [r7, #4]
  /* Chi */
  uint64_t C[5];

  int x, y;
  for (y = 0; y < 5; ++y) {
 8000982:	2100      	movs	r1, #0
 8000984:	6339      	str	r1, [r7, #48]	@ 0x30
 8000986:	e072      	b.n	8000a6e <chi+0xf6>
    for (x = 0; x < 5; ++x) {
 8000988:	2100      	movs	r1, #0
 800098a:	6379      	str	r1, [r7, #52]	@ 0x34
 800098c:	e04e      	b.n	8000a2c <chi+0xb4>
      C[x] = state[y * 5 + x] ^ ((~state[y * 5 + ((x + 1) % 5)]) & state[y * 5 + ((x + 2) % 5)]);
 800098e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000990:	4601      	mov	r1, r0
 8000992:	0089      	lsls	r1, r1, #2
 8000994:	4408      	add	r0, r1
 8000996:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000998:	4401      	add	r1, r0
 800099a:	00c9      	lsls	r1, r1, #3
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	4401      	add	r1, r0
 80009a0:	e9d1 ab00 	ldrd	sl, fp, [r1]
 80009a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009a6:	4601      	mov	r1, r0
 80009a8:	0089      	lsls	r1, r1, #2
 80009aa:	eb01 0c00 	add.w	ip, r1, r0
 80009ae:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009b0:	1c4e      	adds	r6, r1, #1
 80009b2:	4934      	ldr	r1, [pc, #208]	@ (8000a84 <chi+0x10c>)
 80009b4:	fb81 0106 	smull	r0, r1, r1, r6
 80009b8:	1048      	asrs	r0, r1, #1
 80009ba:	17f1      	asrs	r1, r6, #31
 80009bc:	1a40      	subs	r0, r0, r1
 80009be:	4601      	mov	r1, r0
 80009c0:	0089      	lsls	r1, r1, #2
 80009c2:	4401      	add	r1, r0
 80009c4:	1a70      	subs	r0, r6, r1
 80009c6:	eb0c 0100 	add.w	r1, ip, r0
 80009ca:	00c9      	lsls	r1, r1, #3
 80009cc:	6878      	ldr	r0, [r7, #4]
 80009ce:	4401      	add	r1, r0
 80009d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80009d4:	43c2      	mvns	r2, r0
 80009d6:	43cb      	mvns	r3, r1
 80009d8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80009da:	4601      	mov	r1, r0
 80009dc:	0089      	lsls	r1, r1, #2
 80009de:	eb01 0c00 	add.w	ip, r1, r0
 80009e2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80009e4:	1c8e      	adds	r6, r1, #2
 80009e6:	4927      	ldr	r1, [pc, #156]	@ (8000a84 <chi+0x10c>)
 80009e8:	fb81 0106 	smull	r0, r1, r1, r6
 80009ec:	1048      	asrs	r0, r1, #1
 80009ee:	17f1      	asrs	r1, r6, #31
 80009f0:	1a40      	subs	r0, r0, r1
 80009f2:	4601      	mov	r1, r0
 80009f4:	0089      	lsls	r1, r1, #2
 80009f6:	4401      	add	r1, r0
 80009f8:	1a70      	subs	r0, r6, r1
 80009fa:	eb0c 0100 	add.w	r1, ip, r0
 80009fe:	00c9      	lsls	r1, r1, #3
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	4401      	add	r1, r0
 8000a04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a08:	ea02 0400 	and.w	r4, r2, r0
 8000a0c:	ea03 0501 	and.w	r5, r3, r1
 8000a10:	ea8a 0804 	eor.w	r8, sl, r4
 8000a14:	ea8b 0905 	eor.w	r9, fp, r5
 8000a18:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a1a:	00c9      	lsls	r1, r1, #3
 8000a1c:	3138      	adds	r1, #56	@ 0x38
 8000a1e:	4439      	add	r1, r7
 8000a20:	3930      	subs	r1, #48	@ 0x30
 8000a22:	e9c1 8900 	strd	r8, r9, [r1]
    for (x = 0; x < 5; ++x) {
 8000a26:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a28:	3101      	adds	r1, #1
 8000a2a:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a2c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a2e:	2904      	cmp	r1, #4
 8000a30:	ddad      	ble.n	800098e <chi+0x16>
    }

    for (x = 0; x < 5; ++x) {
 8000a32:	2100      	movs	r1, #0
 8000a34:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a36:	e014      	b.n	8000a62 <chi+0xea>
      state[y * 5 + x] = C[x];
 8000a38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000a3a:	4601      	mov	r1, r0
 8000a3c:	0089      	lsls	r1, r1, #2
 8000a3e:	4408      	add	r0, r1
 8000a40:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a42:	4401      	add	r1, r0
 8000a44:	00c9      	lsls	r1, r1, #3
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	1846      	adds	r6, r0, r1
 8000a4a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a4c:	00c9      	lsls	r1, r1, #3
 8000a4e:	3138      	adds	r1, #56	@ 0x38
 8000a50:	4439      	add	r1, r7
 8000a52:	3930      	subs	r1, #48	@ 0x30
 8000a54:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a58:	e9c6 0100 	strd	r0, r1, [r6]
    for (x = 0; x < 5; ++x) {
 8000a5c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a5e:	3101      	adds	r1, #1
 8000a60:	6379      	str	r1, [r7, #52]	@ 0x34
 8000a62:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8000a64:	2904      	cmp	r1, #4
 8000a66:	dde7      	ble.n	8000a38 <chi+0xc0>
  for (y = 0; y < 5; ++y) {
 8000a68:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a6a:	3101      	adds	r1, #1
 8000a6c:	6339      	str	r1, [r7, #48]	@ 0x30
 8000a6e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000a70:	2904      	cmp	r1, #4
 8000a72:	dd89      	ble.n	8000988 <chi+0x10>
    }
  }
}
 8000a74:	bf00      	nop
 8000a76:	bf00      	nop
 8000a78:	3738      	adds	r7, #56	@ 0x38
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	66666667 	.word	0x66666667

08000a88 <iota>:

void iota(uint64_t* state, int i)
{
 8000a88:	b4b0      	push	{r4, r5, r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  /* Iota */
  /* XXX: truncate RC[i] if w < 64 */
  state[0] = state[0] ^ RC[i];
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	e9d1 4500 	ldrd	r4, r5, [r1]
 8000a98:	4808      	ldr	r0, [pc, #32]	@ (8000abc <iota+0x34>)
 8000a9a:	6839      	ldr	r1, [r7, #0]
 8000a9c:	00c9      	lsls	r1, r1, #3
 8000a9e:	4401      	add	r1, r0
 8000aa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000aa4:	ea84 0200 	eor.w	r2, r4, r0
 8000aa8:	ea85 0301 	eor.w	r3, r5, r1
 8000aac:	6879      	ldr	r1, [r7, #4]
 8000aae:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bcb0      	pop	{r4, r5, r7}
 8000aba:	4770      	bx	lr
 8000abc:	0800baf0 	.word	0x0800baf0

08000ac0 <_write>:
static void MX_RNG_Init(void);
static void MX_USART2_UART_Init(void);
void MX_USB_HOST_Process(void);

/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b084      	sub	sp, #16
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, HAL_MAX_DELAY);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	b29a      	uxth	r2, r3
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ad4:	68b9      	ldr	r1, [r7, #8]
 8000ad6:	4804      	ldr	r0, [pc, #16]	@ (8000ae8 <_write+0x28>)
 8000ad8:	f005 fed3 	bl	8006882 <HAL_UART_Transmit>
    return len;
 8000adc:	687b      	ldr	r3, [r7, #4]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200001a8 	.word	0x200001a8

08000aec <fill_masked_state>:
    }
    char newline = '\n';
    HAL_UART_Transmit(&huart2, (uint8_t*)&newline, 1, HAL_MAX_DELAY);
}

void fill_masked_state(masked_uint64_t dst[5][5], const uint64_t ref[25]) {
 8000aec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000af0:	b08a      	sub	sp, #40	@ 0x28
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	6078      	str	r0, [r7, #4]
 8000af6:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8000afc:	e062      	b.n	8000bc4 <fill_masked_state+0xd8>
        for (int x = 0; x < 5; ++x) {
 8000afe:	2300      	movs	r3, #0
 8000b00:	623b      	str	r3, [r7, #32]
 8000b02:	e059      	b.n	8000bb8 <fill_masked_state+0xcc>
            uint64_t val = ref[y * 5 + x];
 8000b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b06:	4613      	mov	r3, r2
 8000b08:	009b      	lsls	r3, r3, #2
 8000b0a:	441a      	add	r2, r3
 8000b0c:	6a3b      	ldr	r3, [r7, #32]
 8000b0e:	4413      	add	r3, r2
 8000b10:	00db      	lsls	r3, r3, #3
 8000b12:	683a      	ldr	r2, [r7, #0]
 8000b14:	4413      	add	r3, r2
 8000b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b1a:	e9c7 2302 	strd	r2, r3, [r7, #8]
            uint64_t t = val;
 8000b1e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b22:	e9c7 2306 	strd	r2, r3, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000b26:	2301      	movs	r3, #1
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	e030      	b.n	8000b8e <fill_masked_state+0xa2>
                dst[x][y].share[i] = get_random64();
 8000b2c:	f000 fd1c 	bl	8001568 <get_random64>
 8000b30:	4601      	mov	r1, r0
 8000b32:	6a3a      	ldr	r2, [r7, #32]
 8000b34:	4613      	mov	r3, r2
 8000b36:	009b      	lsls	r3, r3, #2
 8000b38:	4413      	add	r3, r2
 8000b3a:	015b      	lsls	r3, r3, #5
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	441a      	add	r2, r3
 8000b42:	17cb      	asrs	r3, r1, #31
 8000b44:	4688      	mov	r8, r1
 8000b46:	4699      	mov	r9, r3
 8000b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4a:	0099      	lsls	r1, r3, #2
 8000b4c:	697b      	ldr	r3, [r7, #20]
 8000b4e:	440b      	add	r3, r1
 8000b50:	00db      	lsls	r3, r3, #3
 8000b52:	4413      	add	r3, r2
 8000b54:	e9c3 8900 	strd	r8, r9, [r3]
                t ^= dst[x][y].share[i];
 8000b58:	6a3a      	ldr	r2, [r7, #32]
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4413      	add	r3, r2
 8000b60:	015b      	lsls	r3, r3, #5
 8000b62:	461a      	mov	r2, r3
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	441a      	add	r2, r3
 8000b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b6a:	0099      	lsls	r1, r3, #2
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	440b      	add	r3, r1
 8000b70:	00db      	lsls	r3, r3, #3
 8000b72:	4413      	add	r3, r2
 8000b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b78:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000b7c:	ea80 0402 	eor.w	r4, r0, r2
 8000b80:	ea81 0503 	eor.w	r5, r1, r3
 8000b84:	e9c7 4506 	strd	r4, r5, [r7, #24]
            for (int i = 1; i < MASKING_N; ++i) {
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	3301      	adds	r3, #1
 8000b8c:	617b      	str	r3, [r7, #20]
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	2b03      	cmp	r3, #3
 8000b92:	ddcb      	ble.n	8000b2c <fill_masked_state+0x40>
            }
            dst[x][y].share[0] = t;
 8000b94:	6a3a      	ldr	r2, [r7, #32]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	015b      	lsls	r3, r3, #5
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	441a      	add	r2, r3
 8000ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba6:	015b      	lsls	r3, r3, #5
 8000ba8:	18d1      	adds	r1, r2, r3
 8000baa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000bae:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000bb2:	6a3b      	ldr	r3, [r7, #32]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	623b      	str	r3, [r7, #32]
 8000bb8:	6a3b      	ldr	r3, [r7, #32]
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	dda2      	ble.n	8000b04 <fill_masked_state+0x18>
    for (int y = 0; y < 5; ++y) {
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	dd99      	ble.n	8000afe <fill_masked_state+0x12>
        }
    }
}
 8000bca:	bf00      	nop
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	@ 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08000bd6 <recombine_masked_state>:

void recombine_masked_state(uint64_t dst[25], const masked_uint64_t src[5][5]) {
 8000bd6:	b4b0      	push	{r4, r5, r7}
 8000bd8:	b089      	sub	sp, #36	@ 0x24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
 8000bde:	6039      	str	r1, [r7, #0]
    for (int y = 0; y < 5; ++y)
 8000be0:	2300      	movs	r3, #0
 8000be2:	61fb      	str	r3, [r7, #28]
 8000be4:	e03f      	b.n	8000c66 <recombine_masked_state+0x90>
        for (int x = 0; x < 5; ++x) {
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
 8000bea:	e036      	b.n	8000c5a <recombine_masked_state+0x84>
            uint64_t val = 0;
 8000bec:	f04f 0200 	mov.w	r2, #0
 8000bf0:	f04f 0300 	mov.w	r3, #0
 8000bf4:	e9c7 2304 	strd	r2, r3, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e01a      	b.n	8000c34 <recombine_masked_state+0x5e>
                val ^= src[x][y].share[i];
 8000bfe:	69ba      	ldr	r2, [r7, #24]
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	015b      	lsls	r3, r3, #5
 8000c08:	461a      	mov	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	441a      	add	r2, r3
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	0099      	lsls	r1, r3, #2
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	440b      	add	r3, r1
 8000c16:	00db      	lsls	r3, r3, #3
 8000c18:	4413      	add	r3, r2
 8000c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c1e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c22:	ea80 0402 	eor.w	r4, r0, r2
 8000c26:	ea81 0503 	eor.w	r5, r1, r3
 8000c2a:	e9c7 4504 	strd	r4, r5, [r7, #16]
            for (int i = 0; i < MASKING_N; ++i)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2b03      	cmp	r3, #3
 8000c38:	dde1      	ble.n	8000bfe <recombine_masked_state+0x28>
            dst[y * 5 + x] = val;
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	4613      	mov	r3, r2
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	441a      	add	r2, r3
 8000c42:	69bb      	ldr	r3, [r7, #24]
 8000c44:	4413      	add	r3, r2
 8000c46:	00db      	lsls	r3, r3, #3
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	18d1      	adds	r1, r2, r3
 8000c4c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c50:	e9c1 2300 	strd	r2, r3, [r1]
        for (int x = 0; x < 5; ++x) {
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69bb      	ldr	r3, [r7, #24]
 8000c5c:	2b04      	cmp	r3, #4
 8000c5e:	ddc5      	ble.n	8000bec <recombine_masked_state+0x16>
    for (int y = 0; y < 5; ++y)
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	3301      	adds	r3, #1
 8000c64:	61fb      	str	r3, [r7, #28]
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	2b04      	cmp	r3, #4
 8000c6a:	ddbc      	ble.n	8000be6 <recombine_masked_state+0x10>
        }
}
 8000c6c:	bf00      	nop
 8000c6e:	bf00      	nop
 8000c70:	3724      	adds	r7, #36	@ 0x24
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bcb0      	pop	{r4, r5, r7}
 8000c76:	4770      	bx	lr

08000c78 <print_diff>:

void print_diff(const char *label, const uint64_t *ref, const uint64_t *masked) {
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b08e      	sub	sp, #56	@ 0x38
 8000c7c:	af04      	add	r7, sp, #16
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
    int fail = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000c88:	2300      	movs	r3, #0
 8000c8a:	623b      	str	r3, [r7, #32]
 8000c8c:	e04d      	b.n	8000d2a <print_diff+0xb2>
        if (ref[i] != masked[i]) {
 8000c8e:	6a3b      	ldr	r3, [r7, #32]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	4413      	add	r3, r2
 8000c96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	00db      	lsls	r3, r3, #3
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	bf08      	it	eq
 8000caa:	4290      	cmpeq	r0, r2
 8000cac:	d03a      	beq.n	8000d24 <print_diff+0xac>
            uint32_t rh = ref[i] >> 32, rl = ref[i] & 0xFFFFFFFF;
 8000cae:	6a3b      	ldr	r3, [r7, #32]
 8000cb0:	00db      	lsls	r3, r3, #3
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 0300 	mov.w	r3, #0
 8000cc2:	000a      	movs	r2, r1
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	61fb      	str	r3, [r7, #28]
 8000cca:	6a3b      	ldr	r3, [r7, #32]
 8000ccc:	00db      	lsls	r3, r3, #3
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cd6:	4613      	mov	r3, r2
 8000cd8:	61bb      	str	r3, [r7, #24]
            uint32_t mh = masked[i] >> 32, ml = masked[i] & 0xFFFFFFFF;
 8000cda:	6a3b      	ldr	r3, [r7, #32]
 8000cdc:	00db      	lsls	r3, r3, #3
 8000cde:	687a      	ldr	r2, [r7, #4]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ce6:	f04f 0200 	mov.w	r2, #0
 8000cea:	f04f 0300 	mov.w	r3, #0
 8000cee:	000a      	movs	r2, r1
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	617b      	str	r3, [r7, #20]
 8000cf6:	6a3b      	ldr	r3, [r7, #32]
 8000cf8:	00db      	lsls	r3, r3, #3
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d02:	4613      	mov	r3, r2
 8000d04:	613b      	str	r3, [r7, #16]
            printf("Mismatch %s[%d]: ref = %08lX%08lX, masked = %08lX%08lX\n",
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	9302      	str	r3, [sp, #8]
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	9301      	str	r3, [sp, #4]
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	6a3a      	ldr	r2, [r7, #32]
 8000d16:	68f9      	ldr	r1, [r7, #12]
 8000d18:	480b      	ldr	r0, [pc, #44]	@ (8000d48 <print_diff+0xd0>)
 8000d1a:	f009 ffe5 	bl	800ace8 <iprintf>
                   label, i,
                   (unsigned long)rh, (unsigned long)rl,
                   (unsigned long)mh, (unsigned long)ml);
            fail++;
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	3301      	adds	r3, #1
 8000d22:	627b      	str	r3, [r7, #36]	@ 0x24
    for (int i = 0; i < 25; ++i) {
 8000d24:	6a3b      	ldr	r3, [r7, #32]
 8000d26:	3301      	adds	r3, #1
 8000d28:	623b      	str	r3, [r7, #32]
 8000d2a:	6a3b      	ldr	r3, [r7, #32]
 8000d2c:	2b18      	cmp	r3, #24
 8000d2e:	ddae      	ble.n	8000c8e <print_diff+0x16>
        }
    }
    if (fail == 0) {
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d103      	bne.n	8000d3e <print_diff+0xc6>
        printf("SUCCESS: %s output matched reference.\n", label);
 8000d36:	68f9      	ldr	r1, [r7, #12]
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <print_diff+0xd4>)
 8000d3a:	f009 ffd5 	bl	800ace8 <iprintf>
    }
}
 8000d3e:	bf00      	nop
 8000d40:	3728      	adds	r7, #40	@ 0x28
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	0800ba10 	.word	0x0800ba10
 8000d4c:	0800ba48 	.word	0x0800ba48

08000d50 <test_masked_vs_reference_step_by_step>:

void test_masked_vs_reference_step_by_step(void) {
 8000d50:	b5b0      	push	{r4, r5, r7, lr}
 8000d52:	f5ad 5da9 	sub.w	sp, sp, #5408	@ 0x1520
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
    // === 1. Initial state setup ===
    uint64_t ref_state[25];
    for (int i = 0; i < 25; i++)
 8000d5a:	2400      	movs	r4, #0
 8000d5c:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 8000d60:	f105 0504 	add.w	r5, r5, #4
 8000d64:	602c      	str	r4, [r5, #0]
 8000d66:	e02f      	b.n	8000dc8 <test_masked_vs_reference_step_by_step+0x78>
        ref_state[i] = i * 0x0F0F0F0F0F0F0F0FULL;
 8000d68:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000d6c:	f104 0404 	add.w	r4, r4, #4
 8000d70:	6824      	ldr	r4, [r4, #0]
 8000d72:	17e5      	asrs	r5, r4, #31
 8000d74:	4620      	mov	r0, r4
 8000d76:	4629      	mov	r1, r5
 8000d78:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8000d7c:	fb04 f501 	mul.w	r5, r4, r1
 8000d80:	f04f 340f 	mov.w	r4, #252645135	@ 0xf0f0f0f
 8000d84:	fb00 f404 	mul.w	r4, r0, r4
 8000d88:	442c      	add	r4, r5
 8000d8a:	f04f 350f 	mov.w	r5, #252645135	@ 0xf0f0f0f
 8000d8e:	fba0 2305 	umull	r2, r3, r0, r5
 8000d92:	441c      	add	r4, r3
 8000d94:	4623      	mov	r3, r4
 8000d96:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000d9a:	f104 0404 	add.w	r4, r4, #4
 8000d9e:	6824      	ldr	r4, [r4, #0]
 8000da0:	00e4      	lsls	r4, r4, #3
 8000da2:	f504 54a9 	add.w	r4, r4, #5408	@ 0x1520
 8000da6:	f104 0408 	add.w	r4, r4, #8
 8000daa:	443c      	add	r4, r7
 8000dac:	3cd8      	subs	r4, #216	@ 0xd8
 8000dae:	e9c4 2300 	strd	r2, r3, [r4]
    for (int i = 0; i < 25; i++)
 8000db2:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000db6:	f104 0404 	add.w	r4, r4, #4
 8000dba:	6824      	ldr	r4, [r4, #0]
 8000dbc:	3401      	adds	r4, #1
 8000dbe:	f507 55a9 	add.w	r5, r7, #5408	@ 0x1520
 8000dc2:	f105 0504 	add.w	r5, r5, #4
 8000dc6:	602c      	str	r4, [r5, #0]
 8000dc8:	f507 54a9 	add.w	r4, r7, #5408	@ 0x1520
 8000dcc:	f104 0404 	add.w	r4, r4, #4
 8000dd0:	6824      	ldr	r4, [r4, #0]
 8000dd2:	2c18      	cmp	r4, #24
 8000dd4:	ddc8      	ble.n	8000d68 <test_masked_vs_reference_step_by_step+0x18>

    masked_uint64_t masked_state[5][5];
    fill_masked_state(masked_state, ref_state);
 8000dd6:	f507 52a2 	add.w	r2, r7, #5184	@ 0x1440
 8000dda:	f102 0210 	add.w	r2, r2, #16
 8000dde:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000de2:	f103 0310 	add.w	r3, r3, #16
 8000de6:	4611      	mov	r1, r2
 8000de8:	4618      	mov	r0, r3
 8000dea:	f7ff fe7f 	bl	8000aec <fill_masked_state>

    uint64_t tmp_ref[25], tmp_masked[25];

    // === 2. THETA ===
    memcpy(tmp_ref, ref_state, sizeof(ref_state));
 8000dee:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000df2:	f103 0308 	add.w	r3, r3, #8
 8000df6:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f507 53a2 	add.w	r3, r7, #5184	@ 0x1440
 8000e00:	f103 0310 	add.w	r3, r3, #16
 8000e04:	22c8      	movs	r2, #200	@ 0xc8
 8000e06:	4619      	mov	r1, r3
 8000e08:	f00a f997 	bl	800b13a <memcpy>
    theta(tmp_ref);
 8000e0c:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e10:	f103 0308 	add.w	r3, r3, #8
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff fbc1 	bl	800059c <theta>

    masked_theta(masked_state);
 8000e1a:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000e1e:	f103 0310 	add.w	r3, r3, #16
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 fbca 	bl	80015bc <masked_theta>
    recombine_masked_state(tmp_masked, masked_state);
 8000e28:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000e2c:	f102 0210 	add.w	r2, r2, #16
 8000e30:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000e34:	4611      	mov	r1, r2
 8000e36:	4618      	mov	r0, r3
 8000e38:	f7ff fecd 	bl	8000bd6 <recombine_masked_state>
    print_diff("THETA", tmp_ref, tmp_masked);
 8000e3c:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000e40:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e44:	f103 0308 	add.w	r3, r3, #8
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4885      	ldr	r0, [pc, #532]	@ (8001060 <test_masked_vs_reference_step_by_step+0x310>)
 8000e4c:	f7ff ff14 	bl	8000c78 <print_diff>

    // === 3. RHO ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked)); // set ref = masked out
 8000e50:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000e54:	f103 0308 	add.w	r3, r3, #8
 8000e58:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000e5c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000e60:	f103 0308 	add.w	r3, r3, #8
 8000e64:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000e68:	4610      	mov	r0, r2
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	23c8      	movs	r3, #200	@ 0xc8
 8000e6e:	461a      	mov	r2, r3
 8000e70:	f00a f963 	bl	800b13a <memcpy>
    rho(tmp_ref);
 8000e74:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000e78:	f103 0308 	add.w	r3, r3, #8
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff fc6b 	bl	8000758 <rho>

    masked_rho(masked_state);
 8000e82:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000e86:	f103 0310 	add.w	r3, r3, #16
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f000 fd30 	bl	80018f0 <masked_rho>
    recombine_masked_state(tmp_masked, masked_state);
 8000e90:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000e94:	f102 0210 	add.w	r2, r2, #16
 8000e98:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000e9c:	4611      	mov	r1, r2
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fe99 	bl	8000bd6 <recombine_masked_state>
    print_diff("RHO", tmp_ref, tmp_masked);
 8000ea4:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000ea8:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000eac:	f103 0308 	add.w	r3, r3, #8
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	486c      	ldr	r0, [pc, #432]	@ (8001064 <test_masked_vs_reference_step_by_step+0x314>)
 8000eb4:	f7ff fee0 	bl	8000c78 <print_diff>

    // === 4. PI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000eb8:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000ebc:	f103 0308 	add.w	r3, r3, #8
 8000ec0:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000ec4:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000ec8:	f103 0308 	add.w	r3, r3, #8
 8000ecc:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	23c8      	movs	r3, #200	@ 0xc8
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	f00a f92f 	bl	800b13a <memcpy>
    pi(tmp_ref);
 8000edc:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000ee0:	f103 0308 	add.w	r3, r3, #8
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f7ff fcad 	bl	8000844 <pi>

    masked_pi(masked_state);
 8000eea:	f507 5389 	add.w	r3, r7, #4384	@ 0x1120
 8000eee:	f103 0310 	add.w	r3, r3, #16
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f000 fd56 	bl	80019a4 <masked_pi>
    recombine_masked_state(tmp_masked, masked_state);
 8000ef8:	f507 5289 	add.w	r2, r7, #4384	@ 0x1120
 8000efc:	f102 0210 	add.w	r2, r2, #16
 8000f00:	f507 637a 	add.w	r3, r7, #4000	@ 0xfa0
 8000f04:	4611      	mov	r1, r2
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fe65 	bl	8000bd6 <recombine_masked_state>
    print_diff("PI", tmp_ref, tmp_masked);
 8000f0c:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8000f10:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f14:	f103 0308 	add.w	r3, r3, #8
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4853      	ldr	r0, [pc, #332]	@ (8001068 <test_masked_vs_reference_step_by_step+0x318>)
 8000f1c:	f7ff feac 	bl	8000c78 <print_diff>

    int round_idx = 0;
 8000f20:	2300      	movs	r3, #0
 8000f22:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000f26:	f102 0218 	add.w	r2, r2, #24
 8000f2a:	6013      	str	r3, [r2, #0]
    // === 5. CHI ===
    // === 5. CHI ===
    memcpy(tmp_ref, tmp_masked, sizeof(tmp_masked));
 8000f2c:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f30:	f103 0308 	add.w	r3, r3, #8
 8000f34:	f5a3 6298 	sub.w	r2, r3, #1216	@ 0x4c0
 8000f38:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000f3c:	f103 0308 	add.w	r3, r3, #8
 8000f40:	f5a3 63b1 	sub.w	r3, r3, #1416	@ 0x588
 8000f44:	4610      	mov	r0, r2
 8000f46:	4619      	mov	r1, r3
 8000f48:	23c8      	movs	r3, #200	@ 0xc8
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	f00a f8f5 	bl	800b13a <memcpy>
    chi(tmp_ref);
 8000f50:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000f54:	f103 0308 	add.w	r3, r3, #8
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fd0d 	bl	8000978 <chi>

    uint64_t r_chi[5][5][MASKING_N][MASKING_N];
    for (int y = 0; y < 5; ++y)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	e033      	b.n	8000fd0 <test_masked_vs_reference_step_by_step+0x280>
        for (int x = 0; x < 5; ++x)
 8000f68:	2300      	movs	r3, #0
 8000f6a:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000f6e:	f102 021c 	add.w	r2, r2, #28
 8000f72:	6013      	str	r3, [r2, #0]
 8000f74:	e01e      	b.n	8000fb4 <test_masked_vs_reference_step_by_step+0x264>
            fill_random_matrix(r_chi[x][y]);
 8000f76:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8000f7a:	3a08      	subs	r2, #8
 8000f7c:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000f80:	f103 031c 	add.w	r3, r3, #28
 8000f84:	6819      	ldr	r1, [r3, #0]
 8000f86:	460b      	mov	r3, r1
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	f507 51a9 	add.w	r1, r7, #5408	@ 0x1520
 8000f90:	6809      	ldr	r1, [r1, #0]
 8000f92:	440b      	add	r3, r1
 8000f94:	01db      	lsls	r3, r3, #7
 8000f96:	4413      	add	r3, r2
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f000 ff0a 	bl	8001db2 <fill_random_matrix>
        for (int x = 0; x < 5; ++x)
 8000f9e:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000fa2:	f103 031c 	add.w	r3, r3, #28
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8000fae:	f102 021c 	add.w	r2, r2, #28
 8000fb2:	6013      	str	r3, [r2, #0]
 8000fb4:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8000fb8:	f103 031c 	add.w	r3, r3, #28
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	ddd9      	ble.n	8000f76 <test_masked_vs_reference_step_by_step+0x226>
    for (int y = 0; y < 5; ++y)
 8000fc2:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	f507 52a9 	add.w	r2, r7, #5408	@ 0x1520
 8000fce:	6013      	str	r3, [r2, #0]
 8000fd0:	f507 53a9 	add.w	r3, r7, #5408	@ 0x1520
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	ddc6      	ble.n	8000f68 <test_masked_vs_reference_step_by_step+0x218>

    masked_uint64_t chi_out[5][5];
    masked_chi(chi_out, masked_state, r_chi);
 8000fda:	f507 724a 	add.w	r2, r7, #808	@ 0x328
 8000fde:	3a08      	subs	r2, #8
 8000fe0:	f507 5189 	add.w	r1, r7, #4384	@ 0x1120
 8000fe4:	f101 0110 	add.w	r1, r1, #16
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	3b08      	subs	r3, #8
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f000 fdfe 	bl	8001bf0 <masked_chi>

    // === 6. IOTA ===
    // Apply IOTA to both the reference and the masked CHI result
    iota(tmp_ref, round_idx);
 8000ff4:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8000ff8:	f103 0308 	add.w	r3, r3, #8
 8000ffc:	f507 52a8 	add.w	r2, r7, #5376	@ 0x1500
 8001000:	f102 0218 	add.w	r2, r2, #24
 8001004:	6811      	ldr	r1, [r2, #0]
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff fd3e 	bl	8000a88 <iota>
    masked_iota(chi_out, RC[round_idx]);
 800100c:	4a17      	ldr	r2, [pc, #92]	@ (800106c <test_masked_vs_reference_step_by_step+0x31c>)
 800100e:	f507 53a8 	add.w	r3, r7, #5376	@ 0x1500
 8001012:	f103 0318 	add.w	r3, r3, #24
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	00db      	lsls	r3, r3, #3
 800101a:	4413      	add	r3, r2
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f107 0108 	add.w	r1, r7, #8
 8001024:	3908      	subs	r1, #8
 8001026:	4608      	mov	r0, r1
 8001028:	f000 fe66 	bl	8001cf8 <masked_iota>

    // Recombine the masked state AFTER both steps
    recombine_masked_state(tmp_masked, chi_out);
 800102c:	f107 0308 	add.w	r3, r7, #8
 8001030:	3b08      	subs	r3, #8
 8001032:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8001036:	4619      	mov	r1, r3
 8001038:	4610      	mov	r0, r2
 800103a:	f7ff fdcc 	bl	8000bd6 <recombine_masked_state>

    // Compare both sides now that they're at the same stage
    print_diff("IOTA", tmp_ref, tmp_masked);
 800103e:	f507 627a 	add.w	r2, r7, #4000	@ 0xfa0
 8001042:	f507 5383 	add.w	r3, r7, #4192	@ 0x1060
 8001046:	f103 0308 	add.w	r3, r3, #8
 800104a:	4619      	mov	r1, r3
 800104c:	4808      	ldr	r0, [pc, #32]	@ (8001070 <test_masked_vs_reference_step_by_step+0x320>)
 800104e:	f7ff fe13 	bl	8000c78 <print_diff>



}
 8001052:	bf00      	nop
 8001054:	f507 57a9 	add.w	r7, r7, #5408	@ 0x1520
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	0800ba70 	.word	0x0800ba70
 8001064:	0800ba78 	.word	0x0800ba78
 8001068:	0800ba7c 	.word	0x0800ba7c
 800106c:	0800baf0 	.word	0x0800baf0
 8001070:	0800ba80 	.word	0x0800ba80

08001074 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b082      	sub	sp, #8
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107a:	f001 fa59 	bl	8002530 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800107e:	f000 f833 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001082:	f000 f96d 	bl	8001360 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001086:	f000 f899 	bl	80011bc <MX_I2C1_Init>
  MX_I2S3_Init();
 800108a:	f000 f8c5 	bl	8001218 <MX_I2S3_Init>
  MX_SPI1_Init();
 800108e:	f000 f907 	bl	80012a0 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8001092:	f009 f99f 	bl	800a3d4 <MX_USB_HOST_Init>
  MX_RNG_Init();
 8001096:	f000 f8ef 	bl	8001278 <MX_RNG_Init>
  MX_USART2_UART_Init();
 800109a:	f000 f937 	bl	800130c <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  __HAL_RCC_RNG_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	607b      	str	r3, [r7, #4]
 80010a2:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <main+0x68>)
 80010a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010a6:	4a0d      	ldr	r2, [pc, #52]	@ (80010dc <main+0x68>)
 80010a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010ac:	6353      	str	r3, [r2, #52]	@ 0x34
 80010ae:	4b0b      	ldr	r3, [pc, #44]	@ (80010dc <main+0x68>)
 80010b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	687b      	ldr	r3, [r7, #4]
  HAL_RNG_Init(&hrng);
 80010ba:	4809      	ldr	r0, [pc, #36]	@ (80010e0 <main+0x6c>)
 80010bc:	f005 fa88 	bl	80065d0 <HAL_RNG_Init>
  setvbuf(stdout, NULL, _IONBF, 0); // Disable buffering completely
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <main+0x70>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6898      	ldr	r0, [r3, #8]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2202      	movs	r2, #2
 80010ca:	2100      	movs	r1, #0
 80010cc:	f009 fe1e 	bl	800ad0c <setvbuf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  test_masked_vs_reference_step_by_step();
 80010d0:	f7ff fe3e 	bl	8000d50 <test_masked_vs_reference_step_by_step>
	     // Print results
	     print_hex("SHA3-512 (Unmasked)", unmasked_output, 64);
	     print_masked_hex("SHA3-512 (Masked)", masked_output);
	     */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80010d4:	f009 f9a4 	bl	800a420 <MX_USB_HOST_Process>
	  test_masked_vs_reference_step_by_step();
 80010d8:	bf00      	nop
 80010da:	e7f9      	b.n	80010d0 <main+0x5c>
 80010dc:	40023800 	.word	0x40023800
 80010e0:	20000140 	.word	0x20000140
 80010e4:	20000038 	.word	0x20000038

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	@ 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	@ 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f009 ff94 	bl	800b024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <SystemClock_Config+0xcc>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <SystemClock_Config+0xcc>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	@ 0x40
 800111c:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <SystemClock_Config+0xcc>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <SystemClock_Config+0xd0>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a21      	ldr	r2, [pc, #132]	@ (80011b8 <SystemClock_Config+0xd0>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b1f      	ldr	r3, [pc, #124]	@ (80011b8 <SystemClock_Config+0xd0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001144:	2301      	movs	r3, #1
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001148:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114e:	2302      	movs	r3, #2
 8001150:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001152:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001158:	2308      	movs	r3, #8
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800115c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001160:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001162:	2302      	movs	r3, #2
 8001164:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001166:	2307      	movs	r3, #7
 8001168:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800116a:	f107 0320 	add.w	r3, r7, #32
 800116e:	4618      	mov	r0, r3
 8001170:	f004 fc54 	bl	8005a1c <HAL_RCC_OscConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800117a:	f000 f9ef 	bl	800155c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117e:	230f      	movs	r3, #15
 8001180:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001182:	2302      	movs	r3, #2
 8001184:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800118a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001194:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001196:	f107 030c 	add.w	r3, r7, #12
 800119a:	2105      	movs	r1, #5
 800119c:	4618      	mov	r0, r3
 800119e:	f004 feb5 	bl	8005f0c <HAL_RCC_ClockConfig>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011a8:	f000 f9d8 	bl	800155c <Error_Handler>
  }
}
 80011ac:	bf00      	nop
 80011ae:	3750      	adds	r7, #80	@ 0x50
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c0:	4b12      	ldr	r3, [pc, #72]	@ (800120c <MX_I2C1_Init+0x50>)
 80011c2:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <MX_I2C1_Init+0x54>)
 80011c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80011c6:	4b11      	ldr	r3, [pc, #68]	@ (800120c <MX_I2C1_Init+0x50>)
 80011c8:	4a12      	ldr	r2, [pc, #72]	@ (8001214 <MX_I2C1_Init+0x58>)
 80011ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_I2C1_Init+0x50>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_I2C1_Init+0x50>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_I2C1_Init+0x50>)
 80011da:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	@ (800120c <MX_I2C1_Init+0x50>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_I2C1_Init+0x50>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	@ (800120c <MX_I2C1_Init+0x50>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_I2C1_Init+0x50>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_I2C1_Init+0x50>)
 80011fa:	f003 fe2b 	bl	8004e54 <HAL_I2C_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001204:	f000 f9aa 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	200000a4 	.word	0x200000a4
 8001210:	40005400 	.word	0x40005400
 8001214:	000186a0 	.word	0x000186a0

08001218 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800121c:	4b13      	ldr	r3, [pc, #76]	@ (800126c <MX_I2S3_Init+0x54>)
 800121e:	4a14      	ldr	r2, [pc, #80]	@ (8001270 <MX_I2S3_Init+0x58>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001222:	4b12      	ldr	r3, [pc, #72]	@ (800126c <MX_I2S3_Init+0x54>)
 8001224:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001228:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <MX_I2S3_Init+0x54>)
 800122c:	2200      	movs	r2, #0
 800122e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001230:	4b0e      	ldr	r3, [pc, #56]	@ (800126c <MX_I2S3_Init+0x54>)
 8001232:	2200      	movs	r2, #0
 8001234:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001236:	4b0d      	ldr	r3, [pc, #52]	@ (800126c <MX_I2S3_Init+0x54>)
 8001238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800123c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800123e:	4b0b      	ldr	r3, [pc, #44]	@ (800126c <MX_I2S3_Init+0x54>)
 8001240:	4a0c      	ldr	r2, [pc, #48]	@ (8001274 <MX_I2S3_Init+0x5c>)
 8001242:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001244:	4b09      	ldr	r3, [pc, #36]	@ (800126c <MX_I2S3_Init+0x54>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800124a:	4b08      	ldr	r3, [pc, #32]	@ (800126c <MX_I2S3_Init+0x54>)
 800124c:	2200      	movs	r2, #0
 800124e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	@ (800126c <MX_I2S3_Init+0x54>)
 8001252:	2200      	movs	r2, #0
 8001254:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001256:	4805      	ldr	r0, [pc, #20]	@ (800126c <MX_I2S3_Init+0x54>)
 8001258:	f003 ff40 	bl	80050dc <HAL_I2S_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001262:	f000 f97b 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	200000f8 	.word	0x200000f8
 8001270:	40003c00 	.word	0x40003c00
 8001274:	00017700 	.word	0x00017700

08001278 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800127c:	4b06      	ldr	r3, [pc, #24]	@ (8001298 <MX_RNG_Init+0x20>)
 800127e:	4a07      	ldr	r2, [pc, #28]	@ (800129c <MX_RNG_Init+0x24>)
 8001280:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	@ (8001298 <MX_RNG_Init+0x20>)
 8001284:	f005 f9a4 	bl	80065d0 <HAL_RNG_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800128e:	f000 f965 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000140 	.word	0x20000140
 800129c:	50060800 	.word	0x50060800

080012a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012a4:	4b17      	ldr	r3, [pc, #92]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012a6:	4a18      	ldr	r2, [pc, #96]	@ (8001308 <MX_SPI1_Init+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012aa:	4b16      	ldr	r3, [pc, #88]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012b2:	4b14      	ldr	r3, [pc, #80]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012b8:	4b12      	ldr	r3, [pc, #72]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012be:	4b11      	ldr	r3, [pc, #68]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80012d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012da:	2200      	movs	r2, #0
 80012dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80012de:	4b09      	ldr	r3, [pc, #36]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012e4:	4b07      	ldr	r3, [pc, #28]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80012ea:	4b06      	ldr	r3, [pc, #24]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012ec:	220a      	movs	r2, #10
 80012ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	@ (8001304 <MX_SPI1_Init+0x64>)
 80012f2:	f005 f9ed 	bl	80066d0 <HAL_SPI_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80012fc:	f000 f92e 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000150 	.word	0x20000150
 8001308:	40013000 	.word	0x40013000

0800130c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001310:	4b11      	ldr	r3, [pc, #68]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001312:	4a12      	ldr	r2, [pc, #72]	@ (800135c <MX_USART2_UART_Init+0x50>)
 8001314:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001316:	4b10      	ldr	r3, [pc, #64]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b0e      	ldr	r3, [pc, #56]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b0c      	ldr	r3, [pc, #48]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800132a:	4b0b      	ldr	r3, [pc, #44]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b09      	ldr	r3, [pc, #36]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b08      	ldr	r3, [pc, #32]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b06      	ldr	r3, [pc, #24]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001342:	4805      	ldr	r0, [pc, #20]	@ (8001358 <MX_USART2_UART_Init+0x4c>)
 8001344:	f005 fa4d 	bl	80067e2 <HAL_UART_Init>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800134e:	f000 f905 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	200001a8 	.word	0x200001a8
 800135c:	40004400 	.word	0x40004400

08001360 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08c      	sub	sp, #48	@ 0x30
 8001364:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	61bb      	str	r3, [r7, #24]
 800137a:	4b72      	ldr	r3, [pc, #456]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a71      	ldr	r2, [pc, #452]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 8001380:	f043 0310 	orr.w	r3, r3, #16
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	61bb      	str	r3, [r7, #24]
 8001390:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	617b      	str	r3, [r7, #20]
 8001396:	4b6b      	ldr	r3, [pc, #428]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	4a6a      	ldr	r2, [pc, #424]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a2:	4b68      	ldr	r3, [pc, #416]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
 80013b2:	4b64      	ldr	r3, [pc, #400]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a63      	ldr	r2, [pc, #396]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b61      	ldr	r3, [pc, #388]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013c6:	613b      	str	r3, [r7, #16]
 80013c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013da:	4b5a      	ldr	r3, [pc, #360]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
 80013ea:	4b56      	ldr	r3, [pc, #344]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	4a55      	ldr	r2, [pc, #340]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013f6:	4b53      	ldr	r3, [pc, #332]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b4f      	ldr	r3, [pc, #316]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	4a4e      	ldr	r2, [pc, #312]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 800140c:	f043 0308 	orr.w	r3, r3, #8
 8001410:	6313      	str	r3, [r2, #48]	@ 0x30
 8001412:	4b4c      	ldr	r3, [pc, #304]	@ (8001544 <MX_GPIO_Init+0x1e4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	f003 0308 	and.w	r3, r3, #8
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800141e:	2200      	movs	r2, #0
 8001420:	2108      	movs	r1, #8
 8001422:	4849      	ldr	r0, [pc, #292]	@ (8001548 <MX_GPIO_Init+0x1e8>)
 8001424:	f001 fbc8 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001428:	2201      	movs	r2, #1
 800142a:	2101      	movs	r1, #1
 800142c:	4847      	ldr	r0, [pc, #284]	@ (800154c <MX_GPIO_Init+0x1ec>)
 800142e:	f001 fbc3 	bl	8002bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001432:	2200      	movs	r2, #0
 8001434:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8001438:	4845      	ldr	r0, [pc, #276]	@ (8001550 <MX_GPIO_Init+0x1f0>)
 800143a:	f001 fbbd 	bl	8002bb8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800143e:	2308      	movs	r3, #8
 8001440:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2300      	movs	r3, #0
 800144c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800144e:	f107 031c 	add.w	r3, r7, #28
 8001452:	4619      	mov	r1, r3
 8001454:	483c      	ldr	r0, [pc, #240]	@ (8001548 <MX_GPIO_Init+0x1e8>)
 8001456:	f001 fa13 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 031c 	add.w	r3, r7, #28
 800146e:	4619      	mov	r1, r3
 8001470:	4836      	ldr	r0, [pc, #216]	@ (800154c <MX_GPIO_Init+0x1ec>)
 8001472:	f001 fa05 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001476:	2308      	movs	r3, #8
 8001478:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001486:	2305      	movs	r3, #5
 8001488:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	482e      	ldr	r0, [pc, #184]	@ (800154c <MX_GPIO_Init+0x1ec>)
 8001492:	f001 f9f5 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001496:	2301      	movs	r3, #1
 8001498:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800149a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	482a      	ldr	r0, [pc, #168]	@ (8001554 <MX_GPIO_Init+0x1f4>)
 80014ac:	f001 f9e8 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80014b0:	2304      	movs	r3, #4
 80014b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014b4:	2300      	movs	r3, #0
 80014b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80014bc:	f107 031c 	add.w	r3, r7, #28
 80014c0:	4619      	mov	r1, r3
 80014c2:	4825      	ldr	r0, [pc, #148]	@ (8001558 <MX_GPIO_Init+0x1f8>)
 80014c4:	f001 f9dc 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80014c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014da:	2305      	movs	r3, #5
 80014dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	481c      	ldr	r0, [pc, #112]	@ (8001558 <MX_GPIO_Init+0x1f8>)
 80014e6:	f001 f9cb 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014ea:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80014ee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f0:	2301      	movs	r3, #1
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014fc:	f107 031c 	add.w	r3, r7, #28
 8001500:	4619      	mov	r1, r3
 8001502:	4813      	ldr	r0, [pc, #76]	@ (8001550 <MX_GPIO_Init+0x1f0>)
 8001504:	f001 f9bc 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001508:	2320      	movs	r3, #32
 800150a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 031c 	add.w	r3, r7, #28
 8001518:	4619      	mov	r1, r3
 800151a:	480d      	ldr	r0, [pc, #52]	@ (8001550 <MX_GPIO_Init+0x1f0>)
 800151c:	f001 f9b0 	bl	8002880 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001520:	2302      	movs	r3, #2
 8001522:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001524:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8001528:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	4804      	ldr	r0, [pc, #16]	@ (8001548 <MX_GPIO_Init+0x1e8>)
 8001536:	f001 f9a3 	bl	8002880 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800153a:	bf00      	nop
 800153c:	3730      	adds	r7, #48	@ 0x30
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023800 	.word	0x40023800
 8001548:	40021000 	.word	0x40021000
 800154c:	40020800 	.word	0x40020800
 8001550:	40020c00 	.word	0x40020c00
 8001554:	40020000 	.word	0x40020000
 8001558:	40020400 	.word	0x40020400

0800155c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001560:	b672      	cpsid	i
}
 8001562:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001564:	bf00      	nop
 8001566:	e7fd      	b.n	8001564 <Error_Handler+0x8>

08001568 <get_random64>:
    0x000000000000800aULL, 0x800000008000000aULL,
    0x8000000080008081ULL, 0x8000000000008080ULL,
    0x0000000080000001ULL, 0x8000000080008008ULL
};

uint64_t get_random64(void) {
 8001568:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
    uint32_t r1, r2;
    HAL_RNG_GenerateRandomNumber(&hrng, &r1);
 8001570:	1d3b      	adds	r3, r7, #4
 8001572:	4619      	mov	r1, r3
 8001574:	4810      	ldr	r0, [pc, #64]	@ (80015b8 <get_random64+0x50>)
 8001576:	f005 f855 	bl	8006624 <HAL_RNG_GenerateRandomNumber>
    HAL_RNG_GenerateRandomNumber(&hrng, &r2);
 800157a:	463b      	mov	r3, r7
 800157c:	4619      	mov	r1, r3
 800157e:	480e      	ldr	r0, [pc, #56]	@ (80015b8 <get_random64+0x50>)
 8001580:	f005 f850 	bl	8006624 <HAL_RNG_GenerateRandomNumber>
    return ((uint64_t)r1 << 32) | r2;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	469a      	mov	sl, r3
 800158a:	4693      	mov	fp, r2
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	4653      	mov	r3, sl
 8001596:	2200      	movs	r2, #0
 8001598:	6839      	ldr	r1, [r7, #0]
 800159a:	2000      	movs	r0, #0
 800159c:	460c      	mov	r4, r1
 800159e:	4605      	mov	r5, r0
 80015a0:	ea42 0804 	orr.w	r8, r2, r4
 80015a4:	ea43 0905 	orr.w	r9, r3, r5
 80015a8:	4642      	mov	r2, r8
 80015aa:	464b      	mov	r3, r9
}
 80015ac:	4610      	mov	r0, r2
 80015ae:	4619      	mov	r1, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015b8:	20000140 	.word	0x20000140

080015bc <masked_theta>:

// === THETA ===
void masked_theta(masked_uint64_t state[5][5]) {
 80015bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015c0:	b0e0      	sub	sp, #384	@ 0x180
 80015c2:	af00      	add	r7, sp, #0
 80015c4:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015c8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80015cc:	6018      	str	r0, [r3, #0]
    masked_uint64_t C[5] = {0};
 80015ce:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 80015d2:	22a0      	movs	r2, #160	@ 0xa0
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f009 fd24 	bl	800b024 <memset>
    masked_uint64_t D[5] = {0};
 80015dc:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80015e0:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80015e4:	4618      	mov	r0, r3
 80015e6:	23a0      	movs	r3, #160	@ 0xa0
 80015e8:	461a      	mov	r2, r3
 80015ea:	2100      	movs	r1, #0
 80015ec:	f009 fd1a 	bl	800b024 <memset>

    // === Compute C[x] = A[x][0] ^ A[x][1] ^ ... ^ A[x][4] ===
    for (int x = 0; x < 5; x++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80015f6:	e04f      	b.n	8001698 <masked_theta+0xdc>
        C[x] = state[x][0];
 80015f8:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	015b      	lsls	r3, r3, #5
 8001604:	461a      	mov	r2, r3
 8001606:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 800160a:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	441a      	add	r2, r3
 8001612:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001616:	015b      	lsls	r3, r3, #5
 8001618:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 800161c:	f107 0108 	add.w	r1, r7, #8
 8001620:	440b      	add	r3, r1
 8001622:	3bd0      	subs	r3, #208	@ 0xd0
 8001624:	461c      	mov	r4, r3
 8001626:	4615      	mov	r5, r2
 8001628:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800162a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800162c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001630:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 1; y < 5; y++) {
 8001634:	2301      	movs	r3, #1
 8001636:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 800163a:	e024      	b.n	8001686 <masked_theta+0xca>
            masked_xor(&C[x], &C[x], &state[x][y]);
 800163c:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 8001640:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001644:	015b      	lsls	r3, r3, #5
 8001646:	18d0      	adds	r0, r2, r3
 8001648:	f107 02b0 	add.w	r2, r7, #176	@ 0xb0
 800164c:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001650:	015b      	lsls	r3, r3, #5
 8001652:	18d1      	adds	r1, r2, r3
 8001654:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	015b      	lsls	r3, r3, #5
 8001660:	461a      	mov	r2, r3
 8001662:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001666:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	441a      	add	r2, r3
 800166e:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001672:	015b      	lsls	r3, r3, #5
 8001674:	4413      	add	r3, r2
 8001676:	461a      	mov	r2, r3
 8001678:	f000 fbe2 	bl	8001e40 <masked_xor>
        for (int y = 1; y < 5; y++) {
 800167c:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 8001680:	3301      	adds	r3, #1
 8001682:	f8c7 3178 	str.w	r3, [r7, #376]	@ 0x178
 8001686:	f8d7 3178 	ldr.w	r3, [r7, #376]	@ 0x178
 800168a:	2b04      	cmp	r3, #4
 800168c:	ddd6      	ble.n	800163c <masked_theta+0x80>
    for (int x = 0; x < 5; x++) {
 800168e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8001692:	3301      	adds	r3, #1
 8001694:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8001698:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 800169c:	2b04      	cmp	r3, #4
 800169e:	ddab      	ble.n	80015f8 <masked_theta+0x3c>
        }
    }

    // === Compute D[x] = C[x-1] ^ ROTL(C[x+1], 1) ===
    for (int x = 0; x < 5; x++) {
 80016a0:	2300      	movs	r3, #0
 80016a2:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 80016a6:	e06f      	b.n	8001788 <masked_theta+0x1cc>
        for (int i = 0; i < MASKING_N; i++) {
 80016a8:	2300      	movs	r3, #0
 80016aa:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 80016ae:	e062      	b.n	8001776 <masked_theta+0x1ba>
            uint64_t c_plus_1 = C[(x + 1) % 5].share[i];
 80016b0:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 80016b4:	1c59      	adds	r1, r3, #1
 80016b6:	4b6d      	ldr	r3, [pc, #436]	@ (800186c <masked_theta+0x2b0>)
 80016b8:	fb83 2301 	smull	r2, r3, r3, r1
 80016bc:	105a      	asrs	r2, r3, #1
 80016be:	17cb      	asrs	r3, r1, #31
 80016c0:	1ad2      	subs	r2, r2, r3
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	1aca      	subs	r2, r1, r3
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 80016d0:	4413      	add	r3, r2
 80016d2:	00db      	lsls	r3, r3, #3
 80016d4:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 80016d8:	f107 0208 	add.w	r2, r7, #8
 80016dc:	4413      	add	r3, r2
 80016de:	3bd0      	subs	r3, #208	@ 0xd0
 80016e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e4:	e9c7 2356 	strd	r2, r3, [r7, #344]	@ 0x158
            uint64_t rot = (c_plus_1 << 1) | (c_plus_1 >> (64 - 1));
 80016e8:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80016ec:	0fda      	lsrs	r2, r3, #31
 80016ee:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4313      	orrs	r3, r2
 80016f6:	607b      	str	r3, [r7, #4]
 80016f8:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80016fc:	0fda      	lsrs	r2, r3, #31
 80016fe:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	4313      	orrs	r3, r2
 8001706:	603b      	str	r3, [r7, #0]
 8001708:	e9d7 3400 	ldrd	r3, r4, [r7]
 800170c:	e9c7 3454 	strd	r3, r4, [r7, #336]	@ 0x150
            D[x].share[i] = C[(x + 4) % 5].share[i] ^ rot;
 8001710:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001714:	1d19      	adds	r1, r3, #4
 8001716:	4b55      	ldr	r3, [pc, #340]	@ (800186c <masked_theta+0x2b0>)
 8001718:	fb83 2301 	smull	r2, r3, r3, r1
 800171c:	105a      	asrs	r2, r3, #1
 800171e:	17cb      	asrs	r3, r1, #31
 8001720:	1ad2      	subs	r2, r2, r3
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	1aca      	subs	r2, r1, r3
 800172a:	0092      	lsls	r2, r2, #2
 800172c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001730:	4413      	add	r3, r2
 8001732:	00db      	lsls	r3, r3, #3
 8001734:	f503 73bc 	add.w	r3, r3, #376	@ 0x178
 8001738:	f107 0208 	add.w	r2, r7, #8
 800173c:	4413      	add	r3, r2
 800173e:	3bd0      	subs	r3, #208	@ 0xd0
 8001740:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001744:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	@ 0x150
 8001748:	ea80 0a02 	eor.w	sl, r0, r2
 800174c:	ea81 0b03 	eor.w	fp, r1, r3
 8001750:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001754:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 8001758:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800175c:	0099      	lsls	r1, r3, #2
 800175e:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001762:	440b      	add	r3, r1
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	4413      	add	r3, r2
 8001768:	e9c3 ab00 	strd	sl, fp, [r3]
        for (int i = 0; i < MASKING_N; i++) {
 800176c:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 8001770:	3301      	adds	r3, #1
 8001772:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
 8001776:	f8d7 3170 	ldr.w	r3, [r7, #368]	@ 0x170
 800177a:	2b03      	cmp	r3, #3
 800177c:	dd98      	ble.n	80016b0 <masked_theta+0xf4>
    for (int x = 0; x < 5; x++) {
 800177e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8001782:	3301      	adds	r3, #1
 8001784:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
 8001788:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 800178c:	2b04      	cmp	r3, #4
 800178e:	dd8b      	ble.n	80016a8 <masked_theta+0xec>
        }
    }

    // === Apply D[x] to all lanes in column x ===
    for (int x = 0; x < 5; x++) {
 8001790:	2300      	movs	r3, #0
 8001792:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001796:	e05e      	b.n	8001856 <masked_theta+0x29a>
        for (int y = 0; y < 5; y++) {
 8001798:	2300      	movs	r3, #0
 800179a:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 800179e:	e051      	b.n	8001844 <masked_theta+0x288>
            for (int i = 0; i < MASKING_N; i++) {
 80017a0:	2300      	movs	r3, #0
 80017a2:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 80017a6:	e044      	b.n	8001832 <masked_theta+0x276>
                state[x][y].share[i] ^= D[x].share[i];
 80017a8:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80017ac:	4613      	mov	r3, r2
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	4413      	add	r3, r2
 80017b2:	015b      	lsls	r3, r3, #5
 80017b4:	461a      	mov	r2, r3
 80017b6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017ba:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	441a      	add	r2, r3
 80017c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80017c6:	0099      	lsls	r1, r3, #2
 80017c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017cc:	440b      	add	r3, r1
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80017d6:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 80017da:	f5a3 72b8 	sub.w	r2, r3, #368	@ 0x170
 80017de:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80017e2:	0099      	lsls	r1, r3, #2
 80017e4:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80017e8:	440b      	add	r3, r1
 80017ea:	00db      	lsls	r3, r3, #3
 80017ec:	4413      	add	r3, r2
 80017ee:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f2:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	015b      	lsls	r3, r3, #5
 80017fe:	461a      	mov	r2, r3
 8001800:	f507 73c0 	add.w	r3, r7, #384	@ 0x180
 8001804:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	441a      	add	r2, r3
 800180c:	ea84 0800 	eor.w	r8, r4, r0
 8001810:	ea85 0901 	eor.w	r9, r5, r1
 8001814:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001818:	0099      	lsls	r1, r3, #2
 800181a:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800181e:	440b      	add	r3, r1
 8001820:	00db      	lsls	r3, r3, #3
 8001822:	4413      	add	r3, r2
 8001824:	e9c3 8900 	strd	r8, r9, [r3]
            for (int i = 0; i < MASKING_N; i++) {
 8001828:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 800182c:	3301      	adds	r3, #1
 800182e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
 8001832:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8001836:	2b03      	cmp	r3, #3
 8001838:	ddb6      	ble.n	80017a8 <masked_theta+0x1ec>
        for (int y = 0; y < 5; y++) {
 800183a:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 800183e:	3301      	adds	r3, #1
 8001840:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8001844:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001848:	2b04      	cmp	r3, #4
 800184a:	dda9      	ble.n	80017a0 <masked_theta+0x1e4>
    for (int x = 0; x < 5; x++) {
 800184c:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8001850:	3301      	adds	r3, #1
 8001852:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
 8001856:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 800185a:	2b04      	cmp	r3, #4
 800185c:	dd9c      	ble.n	8001798 <masked_theta+0x1dc>
            }
        }
    }
}
 800185e:	bf00      	nop
 8001860:	bf00      	nop
 8001862:	f507 77c0 	add.w	r7, r7, #384	@ 0x180
 8001866:	46bd      	mov	sp, r7
 8001868:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800186c:	66666667 	.word	0x66666667

08001870 <rol64>:
    { 62,  6, 43, 15, 61 },
    { 28, 55, 25, 21, 56 },
    { 27, 20, 39,  8, 14 }
};

static inline uint64_t rol64(uint64_t x, unsigned int n) {
 8001870:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001874:	b084      	sub	sp, #16
 8001876:	af00      	add	r7, sp, #0
 8001878:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800187c:	607a      	str	r2, [r7, #4]
    n %= 64;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001884:	607b      	str	r3, [r7, #4]
    return (x << n) | (x >> ((64 - n) % 64));
 8001886:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	f1a1 0620 	sub.w	r6, r1, #32
 8001890:	f1c1 0020 	rsb	r0, r1, #32
 8001894:	fa03 f901 	lsl.w	r9, r3, r1
 8001898:	fa02 f606 	lsl.w	r6, r2, r6
 800189c:	ea49 0906 	orr.w	r9, r9, r6
 80018a0:	fa22 f000 	lsr.w	r0, r2, r0
 80018a4:	ea49 0900 	orr.w	r9, r9, r0
 80018a8:	fa02 f801 	lsl.w	r8, r2, r1
 80018ac:	6879      	ldr	r1, [r7, #4]
 80018ae:	4249      	negs	r1, r1
 80018b0:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80018b4:	f1c1 0620 	rsb	r6, r1, #32
 80018b8:	f1a1 0020 	sub.w	r0, r1, #32
 80018bc:	fa22 f401 	lsr.w	r4, r2, r1
 80018c0:	fa03 f606 	lsl.w	r6, r3, r6
 80018c4:	4334      	orrs	r4, r6
 80018c6:	fa23 f000 	lsr.w	r0, r3, r0
 80018ca:	4304      	orrs	r4, r0
 80018cc:	fa23 f501 	lsr.w	r5, r3, r1
 80018d0:	ea48 0a04 	orr.w	sl, r8, r4
 80018d4:	ea49 0b05 	orr.w	fp, r9, r5
 80018d8:	4654      	mov	r4, sl
 80018da:	465d      	mov	r5, fp
 80018dc:	4622      	mov	r2, r4
 80018de:	462b      	mov	r3, r5
}
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80018ec:	4770      	bx	lr
	...

080018f0 <masked_rho>:


void masked_rho(masked_uint64_t state[5][5]) {
 80018f0:	b590      	push	{r4, r7, lr}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
    for (int x = 0; x < 5; x++) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	e048      	b.n	8001990 <masked_rho+0xa0>
        for (int y = 0; y < 5; y++) {
 80018fe:	2300      	movs	r3, #0
 8001900:	61bb      	str	r3, [r7, #24]
 8001902:	e03f      	b.n	8001984 <masked_rho+0x94>
            uint8_t r = keccak_rho_offsets[x][y];
 8001904:	4926      	ldr	r1, [pc, #152]	@ (80019a0 <masked_rho+0xb0>)
 8001906:	69fa      	ldr	r2, [r7, #28]
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	18ca      	adds	r2, r1, r3
 8001910:	69bb      	ldr	r3, [r7, #24]
 8001912:	4413      	add	r3, r2
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	74fb      	strb	r3, [r7, #19]
            for (int i = 0; i < MASKING_N; i++) {
 8001918:	2300      	movs	r3, #0
 800191a:	617b      	str	r3, [r7, #20]
 800191c:	e02c      	b.n	8001978 <masked_rho+0x88>
                uint64_t value = state[x][y].share[i];
 800191e:	69fa      	ldr	r2, [r7, #28]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	015b      	lsls	r3, r3, #5
 8001928:	461a      	mov	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	441a      	add	r2, r3
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	0099      	lsls	r1, r3, #2
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	440b      	add	r3, r1
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4413      	add	r3, r2
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	e9c7 2302 	strd	r2, r3, [r7, #8]
                state[x][y].share[i] = rol64(value, r);
 8001942:	7cf9      	ldrb	r1, [r7, #19]
 8001944:	69fa      	ldr	r2, [r7, #28]
 8001946:	4613      	mov	r3, r2
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	4413      	add	r3, r2
 800194c:	015b      	lsls	r3, r3, #5
 800194e:	461a      	mov	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	189c      	adds	r4, r3, r2
 8001954:	460a      	mov	r2, r1
 8001956:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800195a:	f7ff ff89 	bl	8001870 <rol64>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	69b9      	ldr	r1, [r7, #24]
 8001964:	0088      	lsls	r0, r1, #2
 8001966:	6979      	ldr	r1, [r7, #20]
 8001968:	4401      	add	r1, r0
 800196a:	00c9      	lsls	r1, r1, #3
 800196c:	4421      	add	r1, r4
 800196e:	e9c1 2300 	strd	r2, r3, [r1]
            for (int i = 0; i < MASKING_N; i++) {
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	2b03      	cmp	r3, #3
 800197c:	ddcf      	ble.n	800191e <masked_rho+0x2e>
        for (int y = 0; y < 5; y++) {
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	3301      	adds	r3, #1
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b04      	cmp	r3, #4
 8001988:	ddbc      	ble.n	8001904 <masked_rho+0x14>
    for (int x = 0; x < 5; x++) {
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3301      	adds	r3, #1
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b04      	cmp	r3, #4
 8001994:	ddb3      	ble.n	80018fe <masked_rho+0xe>
            }
        }
    }
}
 8001996:	bf00      	nop
 8001998:	bf00      	nop
 800199a:	3724      	adds	r7, #36	@ 0x24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd90      	pop	{r4, r7, pc}
 80019a0:	0800bbb0 	.word	0x0800bbb0

080019a4 <masked_pi>:

// === PI ===
void masked_pi(masked_uint64_t state[5][5])
{
 80019a4:	b4b0      	push	{r4, r5, r7}
 80019a6:	f5ad 7d51 	sub.w	sp, sp, #836	@ 0x344
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80019b0:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80019b4:	6018      	str	r0, [r3, #0]
    masked_uint64_t tmp[5][5];

    /* 1. copy ---------------------------------------------------------- */
    for (int x = 0; x < 5; ++x)
 80019b6:	2300      	movs	r3, #0
 80019b8:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 80019bc:	e038      	b.n	8001a30 <masked_pi+0x8c>
        for (int y = 0; y < 5; ++y)
 80019be:	2300      	movs	r3, #0
 80019c0:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 80019c4:	e02b      	b.n	8001a1e <masked_pi+0x7a>
            tmp[x][y] = state[x][y];
 80019c6:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 80019ca:	4613      	mov	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	015b      	lsls	r3, r3, #5
 80019d2:	461a      	mov	r2, r3
 80019d4:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80019d8:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1899      	adds	r1, r3, r2
 80019e0:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 80019e4:	f5a3 704e 	sub.w	r0, r3, #824	@ 0x338
 80019e8:	f8d7 233c 	ldr.w	r2, [r7, #828]	@ 0x33c
 80019ec:	4613      	mov	r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	f8d7 2338 	ldr.w	r2, [r7, #824]	@ 0x338
 80019f6:	4413      	add	r3, r2
 80019f8:	015b      	lsls	r3, r3, #5
 80019fa:	18c2      	adds	r2, r0, r3
 80019fc:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001a00:	015b      	lsls	r3, r3, #5
 8001a02:	440b      	add	r3, r1
 8001a04:	4614      	mov	r4, r2
 8001a06:	461d      	mov	r5, r3
 8001a08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a0c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y)
 8001a14:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001a18:	3301      	adds	r3, #1
 8001a1a:	f8c7 3338 	str.w	r3, [r7, #824]	@ 0x338
 8001a1e:	f8d7 3338 	ldr.w	r3, [r7, #824]	@ 0x338
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	ddcf      	ble.n	80019c6 <masked_pi+0x22>
    for (int x = 0; x < 5; ++x)
 8001a26:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	f8c7 333c 	str.w	r3, [r7, #828]	@ 0x33c
 8001a30:	f8d7 333c 	ldr.w	r3, [r7, #828]	@ 0x33c
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	ddc2      	ble.n	80019be <masked_pi+0x1a>

    /* 2. π permutation ------------------------------------------------- */
    for (int x = 0; x < 5; ++x)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001a3e:	e051      	b.n	8001ae4 <masked_pi+0x140>
        for (int y = 0; y < 5; ++y) {
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001a46:	e044      	b.n	8001ad2 <masked_pi+0x12e>
            int new_x = y;                       /* u = y                 */
 8001a48:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001a4c:	f8c7 332c 	str.w	r3, [r7, #812]	@ 0x32c
            int new_y = (2 * x + 3 * y) % 5;     /* v = 2x + 3y (mod 5)   */
 8001a50:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001a54:	0059      	lsls	r1, r3, #1
 8001a56:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	4413      	add	r3, r2
 8001a60:	18ca      	adds	r2, r1, r3
 8001a62:	4b26      	ldr	r3, [pc, #152]	@ (8001afc <masked_pi+0x158>)
 8001a64:	fb83 1302 	smull	r1, r3, r3, r2
 8001a68:	1059      	asrs	r1, r3, #1
 8001a6a:	17d3      	asrs	r3, r2, #31
 8001a6c:	1ac9      	subs	r1, r1, r3
 8001a6e:	460b      	mov	r3, r1
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	440b      	add	r3, r1
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	f8c7 3328 	str.w	r3, [r7, #808]	@ 0x328
            state[new_x][new_y] = tmp[x][y];     /* move ALL shares       */
 8001a7a:	f8d7 232c 	ldr.w	r2, [r7, #812]	@ 0x32c
 8001a7e:	4613      	mov	r3, r2
 8001a80:	009b      	lsls	r3, r3, #2
 8001a82:	4413      	add	r3, r2
 8001a84:	015b      	lsls	r3, r3, #5
 8001a86:	461a      	mov	r2, r3
 8001a88:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001a8c:	f5a3 734f 	sub.w	r3, r3, #828	@ 0x33c
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	441a      	add	r2, r3
 8001a94:	f8d7 3328 	ldr.w	r3, [r7, #808]	@ 0x328
 8001a98:	015b      	lsls	r3, r3, #5
 8001a9a:	18d0      	adds	r0, r2, r3
 8001a9c:	f507 7350 	add.w	r3, r7, #832	@ 0x340
 8001aa0:	f5a3 714e 	sub.w	r1, r3, #824	@ 0x338
 8001aa4:	f8d7 2334 	ldr.w	r2, [r7, #820]	@ 0x334
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	f8d7 2330 	ldr.w	r2, [r7, #816]	@ 0x330
 8001ab2:	4413      	add	r3, r2
 8001ab4:	015b      	lsls	r3, r3, #5
 8001ab6:	440b      	add	r3, r1
 8001ab8:	4604      	mov	r4, r0
 8001aba:	461d      	mov	r5, r3
 8001abc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001abe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ac0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        for (int y = 0; y < 5; ++y) {
 8001ac8:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001acc:	3301      	adds	r3, #1
 8001ace:	f8c7 3330 	str.w	r3, [r7, #816]	@ 0x330
 8001ad2:	f8d7 3330 	ldr.w	r3, [r7, #816]	@ 0x330
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	ddb6      	ble.n	8001a48 <masked_pi+0xa4>
    for (int x = 0; x < 5; ++x)
 8001ada:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001ade:	3301      	adds	r3, #1
 8001ae0:	f8c7 3334 	str.w	r3, [r7, #820]	@ 0x334
 8001ae4:	f8d7 3334 	ldr.w	r3, [r7, #820]	@ 0x334
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	dda9      	ble.n	8001a40 <masked_pi+0x9c>
        }
    /* nothing else! */
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	f507 7751 	add.w	r7, r7, #836	@ 0x344
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bcb0      	pop	{r4, r5, r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	66666667 	.word	0x66666667

08001b00 <masked_not>:
/* ─── tiny helper: masked bitwise NOT (Boolean shares) ───────────────── */
/* ─── Boolean-masked bitwise NOT ───────────────────────────────────────
   dst ← ¬src   (while preserving the XOR-mask invariant)              */
void masked_not(masked_uint64_t *dst,
                              const masked_uint64_t *src)
{
 8001b00:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001b04:	b092      	sub	sp, #72	@ 0x48
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	61f8      	str	r0, [r7, #28]
 8001b0a:	61b9      	str	r1, [r7, #24]
    /* 1.  Invert every share ------------------------------------------ */
    for (size_t i = 0; i < MASKING_N; ++i)
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b10:	e012      	b.n	8001b38 <masked_not+0x38>
        dst->share[i] = ~src->share[i];
 8001b12:	69ba      	ldr	r2, [r7, #24]
 8001b14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4413      	add	r3, r2
 8001b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1e:	ea6f 0802 	mvn.w	r8, r2
 8001b22:	ea6f 0903 	mvn.w	r9, r3
 8001b26:	69fa      	ldr	r2, [r7, #28]
 8001b28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b2a:	00db      	lsls	r3, r3, #3
 8001b2c:	4413      	add	r3, r2
 8001b2e:	e9c3 8900 	strd	r8, r9, [r3]
    for (size_t i = 0; i < MASKING_N; ++i)
 8001b32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b34:	3301      	adds	r3, #1
 8001b36:	647b      	str	r3, [r7, #68]	@ 0x44
 8001b38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b3a:	2b03      	cmp	r3, #3
 8001b3c:	d9e9      	bls.n	8001b12 <masked_not+0x12>

    /* 2.  Re-align the mask so that XOR(shares) == ¬XOR(original) ----- */
    uint64_t orig_parity = 0, inv_parity = 0;
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	f04f 0300 	mov.w	r3, #0
 8001b52:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8001b56:	2300      	movs	r3, #0
 8001b58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001b5a:	e024      	b.n	8001ba6 <masked_not+0xa6>
        orig_parity ^= src->share[i];
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001b6c:	ea80 0602 	eor.w	r6, r0, r2
 8001b70:	613e      	str	r6, [r7, #16]
 8001b72:	404b      	eors	r3, r1
 8001b74:	617b      	str	r3, [r7, #20]
 8001b76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b7a:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
        inv_parity  ^= dst->share[i];
 8001b7e:	69fa      	ldr	r2, [r7, #28]
 8001b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001b8e:	ea80 0602 	eor.w	r6, r0, r2
 8001b92:	60be      	str	r6, [r7, #8]
 8001b94:	404b      	eors	r3, r1
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001b9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    for (size_t i = 0; i < MASKING_N; ++i) {
 8001ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ba6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ba8:	2b03      	cmp	r3, #3
 8001baa:	d9d7      	bls.n	8001b5c <masked_not+0x5c>
    }
    /* delta is the amount by which the parity is off */
    uint64_t delta = inv_parity ^ ~orig_parity;
 8001bac:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001bb0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001bb4:	ea80 0402 	eor.w	r4, r0, r2
 8001bb8:	ea81 0503 	eor.w	r5, r1, r3
 8001bbc:	43e3      	mvns	r3, r4
 8001bbe:	603b      	str	r3, [r7, #0]
 8001bc0:	43eb      	mvns	r3, r5
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001bc8:	e9c7 3408 	strd	r3, r4, [r7, #32]

    /* flip ‘delta’ in ONE share (here: share 0) */
    dst->share[0] ^= delta;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001bd2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001bd6:	ea80 0a02 	eor.w	sl, r0, r2
 8001bda:	ea81 0b03 	eor.w	fp, r1, r3
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	e9c3 ab00 	strd	sl, fp, [r3]
}
 8001be4:	bf00      	nop
 8001be6:	3748      	adds	r7, #72	@ 0x48
 8001be8:	46bd      	mov	sp, r7
 8001bea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001bee:	4770      	bx	lr

08001bf0 <masked_chi>:

/* ─── χ step with correct NOT ───────────────────────────────────────── */
void masked_chi(masked_uint64_t out[5][5],
                           const masked_uint64_t in[5][5],
                           const uint64_t r[5][5][MASKING_N][MASKING_N]) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b09a      	sub	sp, #104	@ 0x68
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
    for (int y = 0; y < 5; y++) {
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001c00:	e070      	b.n	8001ce4 <masked_chi+0xf4>
        for (int x = 0; x < 5; x++) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	663b      	str	r3, [r7, #96]	@ 0x60
 8001c06:	e067      	b.n	8001cd8 <masked_chi+0xe8>
            const masked_uint64_t *a = &in[x][y];
 8001c08:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	015b      	lsls	r3, r3, #5
 8001c12:	461a      	mov	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	441a      	add	r2, r3
 8001c18:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c1a:	015b      	lsls	r3, r3, #5
 8001c1c:	4413      	add	r3, r2
 8001c1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
            const masked_uint64_t *b = &in[(x + 1) % 5][y];
 8001c20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	4b33      	ldr	r3, [pc, #204]	@ (8001cf4 <masked_chi+0x104>)
 8001c26:	fb83 1302 	smull	r1, r3, r3, r2
 8001c2a:	1059      	asrs	r1, r3, #1
 8001c2c:	17d3      	asrs	r3, r2, #31
 8001c2e:	1ac9      	subs	r1, r1, r3
 8001c30:	460b      	mov	r3, r1
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	1ad1      	subs	r1, r2, r3
 8001c38:	460a      	mov	r2, r1
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	015b      	lsls	r3, r3, #5
 8001c42:	461a      	mov	r2, r3
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	441a      	add	r2, r3
 8001c48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c4a:	015b      	lsls	r3, r3, #5
 8001c4c:	4413      	add	r3, r2
 8001c4e:	65bb      	str	r3, [r7, #88]	@ 0x58
            const masked_uint64_t *c = &in[(x + 2) % 5][y];
 8001c50:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001c52:	1c9a      	adds	r2, r3, #2
 8001c54:	4b27      	ldr	r3, [pc, #156]	@ (8001cf4 <masked_chi+0x104>)
 8001c56:	fb83 1302 	smull	r1, r3, r3, r2
 8001c5a:	1059      	asrs	r1, r3, #1
 8001c5c:	17d3      	asrs	r3, r2, #31
 8001c5e:	1ac9      	subs	r1, r1, r3
 8001c60:	460b      	mov	r3, r1
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	1ad1      	subs	r1, r2, r3
 8001c68:	460a      	mov	r2, r1
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	015b      	lsls	r3, r3, #5
 8001c72:	461a      	mov	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	441a      	add	r2, r3
 8001c78:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c7a:	015b      	lsls	r3, r3, #5
 8001c7c:	4413      	add	r3, r2
 8001c7e:	657b      	str	r3, [r7, #84]	@ 0x54
            masked_uint64_t t1, t2;

            masked_not(&t1, b);
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff3a 	bl	8001b00 <masked_not>
            masked_and(&t2, &t1, c, r[x][y]);
 8001c8c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001c8e:	4613      	mov	r3, r2
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	4413      	add	r3, r2
 8001c94:	01db      	lsls	r3, r3, #7
 8001c96:	461a      	mov	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	441a      	add	r2, r3
 8001c9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001c9e:	01db      	lsls	r3, r3, #7
 8001ca0:	4413      	add	r3, r2
 8001ca2:	f107 0110 	add.w	r1, r7, #16
 8001ca6:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001caa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001cac:	f000 f8f3 	bl	8001e96 <masked_and>
            masked_xor(&out[x][y], a, &t2);
 8001cb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	015b      	lsls	r3, r3, #5
 8001cba:	461a      	mov	r2, r3
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001cc2:	015b      	lsls	r3, r3, #5
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001cca:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f000 f8b7 	bl	8001e40 <masked_xor>
        for (int x = 0; x < 5; x++) {
 8001cd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8001cd8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	dd94      	ble.n	8001c08 <masked_chi+0x18>
    for (int y = 0; y < 5; y++) {
 8001cde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ce0:	3301      	adds	r3, #1
 8001ce2:	667b      	str	r3, [r7, #100]	@ 0x64
 8001ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001ce6:	2b04      	cmp	r3, #4
 8001ce8:	dd8b      	ble.n	8001c02 <masked_chi+0x12>
        }
    }
}
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
 8001cee:	3768      	adds	r7, #104	@ 0x68
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	66666667 	.word	0x66666667

08001cf8 <masked_iota>:




void masked_iota(masked_uint64_t state[5][5], uint64_t rc) {
 8001cf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cfc:	b08c      	sub	sp, #48	@ 0x30
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	e9c7 2300 	strd	r2, r3, [r7]
    // 1. Recombine the lane value (x = 0, y = 0)
    uint64_t value = 0;
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	f04f 0300 	mov.w	r3, #0
 8001d0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d16:	e010      	b.n	8001d3a <masked_iota+0x42>
        value ^= state[0][0].share[i];
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4413      	add	r3, r2
 8001d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d24:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d28:	ea80 0a02 	eor.w	sl, r0, r2
 8001d2c:	ea81 0b03 	eor.w	fp, r1, r3
 8001d30:	e9c7 ab0a 	strd	sl, fp, [r7, #40]	@ 0x28
    for (int i = 0; i < MASKING_N; ++i)
 8001d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d36:	3301      	adds	r3, #1
 8001d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	ddeb      	ble.n	8001d18 <masked_iota+0x20>

    // 2. Apply round constant
    value ^= rc;
 8001d40:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001d44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001d48:	ea80 0802 	eor.w	r8, r0, r2
 8001d4c:	ea81 0903 	eor.w	r9, r1, r3
 8001d50:	e9c7 890a 	strd	r8, r9, [r7, #40]	@ 0x28

    // 3. Re-mask the new value randomly
    uint64_t acc = value;
 8001d54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001d58:	e9c7 2306 	strd	r2, r3, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	617b      	str	r3, [r7, #20]
 8001d60:	e01a      	b.n	8001d98 <masked_iota+0xa0>
        state[0][0].share[i] = get_random64();
 8001d62:	f7ff fc01 	bl	8001568 <get_random64>
 8001d66:	4602      	mov	r2, r0
 8001d68:	460b      	mov	r3, r1
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	6979      	ldr	r1, [r7, #20]
 8001d6e:	00c9      	lsls	r1, r1, #3
 8001d70:	4401      	add	r1, r0
 8001d72:	e9c1 2300 	strd	r2, r3, [r1]
        acc ^= state[0][0].share[i];
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	00db      	lsls	r3, r3, #3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d86:	ea80 0402 	eor.w	r4, r0, r2
 8001d8a:	ea81 0503 	eor.w	r5, r1, r3
 8001d8e:	e9c7 4506 	strd	r4, r5, [r7, #24]
    for (int i = 1; i < MASKING_N; ++i) {
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	3301      	adds	r3, #1
 8001d96:	617b      	str	r3, [r7, #20]
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	dde1      	ble.n	8001d62 <masked_iota+0x6a>
    }
    state[0][0].share[0] = acc;
 8001d9e:	68f9      	ldr	r1, [r7, #12]
 8001da0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001da4:	e9c1 2300 	strd	r2, r3, [r1]
}
 8001da8:	bf00      	nop
 8001daa:	3730      	adds	r7, #48	@ 0x30
 8001dac:	46bd      	mov	sp, r7
 8001dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001db2 <fill_random_matrix>:
               hi, lo, ehi, elo);
        return 1;
    }
}

void fill_random_matrix(uint64_t r[MASKING_N][MASKING_N]) {
 8001db2:	b5b0      	push	{r4, r5, r7, lr}
 8001db4:	b086      	sub	sp, #24
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
 8001dbe:	e037      	b.n	8001e30 <fill_random_matrix+0x7e>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	e020      	b.n	8001e0a <fill_random_matrix+0x58>
            uint64_t val = get_random64();
 8001dc8:	f7ff fbce 	bl	8001568 <get_random64>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	17da      	asrs	r2, r3, #31
 8001dd0:	461c      	mov	r4, r3
 8001dd2:	4615      	mov	r5, r2
 8001dd4:	e9c7 4502 	strd	r4, r5, [r7, #8]
            r[i][j] = val;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	015b      	lsls	r3, r3, #5
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	441a      	add	r2, r3
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	18d1      	adds	r1, r2, r3
 8001de6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001dea:	e9c1 2300 	strd	r2, r3, [r1]
            r[j][i] = val;  // Fill symmetric entry!
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	015b      	lsls	r3, r3, #5
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	441a      	add	r2, r3
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	18d1      	adds	r1, r2, r3
 8001dfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001e00:	e9c1 2300 	strd	r2, r3, [r1]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	3301      	adds	r3, #1
 8001e08:	613b      	str	r3, [r7, #16]
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	2b03      	cmp	r3, #3
 8001e0e:	d9db      	bls.n	8001dc8 <fill_random_matrix+0x16>
        }
        r[i][i] = 0;  // Diagonal should be zero or ignored
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	015b      	lsls	r3, r3, #5
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	441a      	add	r2, r3
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	18d1      	adds	r1, r2, r3
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	e9c1 2300 	strd	r2, r3, [r1]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d9c4      	bls.n	8001dc0 <fill_random_matrix+0xe>
    }
}
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bdb0      	pop	{r4, r5, r7, pc}

08001e40 <masked_xor>:



void masked_xor(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b) {
 8001e40:	b4b0      	push	{r4, r5, r7}
 8001e42:	b087      	sub	sp, #28
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e018      	b.n	8001e84 <masked_xor+0x44>
        out->share[i] = a->share[i] ^ b->share[i];
 8001e52:	68ba      	ldr	r2, [r7, #8]
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	00db      	lsls	r3, r3, #3
 8001e58:	4413      	add	r3, r2
 8001e5a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4413      	add	r3, r2
 8001e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6a:	ea80 0402 	eor.w	r4, r0, r2
 8001e6e:	ea81 0503 	eor.w	r5, r1, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d9e3      	bls.n	8001e52 <masked_xor+0x12>
    }
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	371c      	adds	r7, #28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bcb0      	pop	{r4, r5, r7}
 8001e94:	4770      	bx	lr

08001e96 <masked_and>:

void masked_and(masked_uint64_t *out,
                const masked_uint64_t *a,
                const masked_uint64_t *b,
                const uint64_t r[MASKING_N][MASKING_N]) {
 8001e96:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001e9a:	b092      	sub	sp, #72	@ 0x48
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001ea0:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ea2:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ea4:	623b      	str	r3, [r7, #32]
    // Step 1: Initialize with diagonal terms
    for (size_t i = 0; i < MASKING_N; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001eaa:	e018      	b.n	8001ede <masked_and+0x48>
        out->share[i] = a->share[i] & b->share[i];
 8001eac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001eae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eb0:	00db      	lsls	r3, r3, #3
 8001eb2:	4413      	add	r3, r2
 8001eb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001eba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ec4:	ea00 0402 	and.w	r4, r0, r2
 8001ec8:	ea01 0503 	and.w	r5, r1, r3
 8001ecc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001ece:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4413      	add	r3, r2
 8001ed4:	e9c3 4500 	strd	r4, r5, [r3]
    for (size_t i = 0; i < MASKING_N; i++) {
 8001ed8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001eda:	3301      	adds	r3, #1
 8001edc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001ede:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d9e3      	bls.n	8001eac <masked_and+0x16>
    }

    // Step 2: Add cross terms with proper masking
    for (size_t i = 0; i < MASKING_N; i++) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001ee8:	e078      	b.n	8001fdc <masked_and+0x146>
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001eea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001eec:	3301      	adds	r3, #1
 8001eee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001ef0:	e06e      	b.n	8001fd0 <masked_and+0x13a>
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8001ef2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ef4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f02:	00db      	lsls	r3, r3, #3
 8001f04:	4413      	add	r3, r2
 8001f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0a:	ea00 0802 	and.w	r8, r0, r2
 8001f0e:	ea01 0903 	and.w	r9, r1, r3
                                 (a->share[j] & b->share[i]);
 8001f12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001f14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	4413      	add	r3, r2
 8001f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2a:	ea00 0a02 	and.w	sl, r0, r2
 8001f2e:	ea01 0b03 	and.w	fp, r1, r3
            uint64_t cross_term = (a->share[i] & b->share[j]) ^
 8001f32:	ea88 030a 	eor.w	r3, r8, sl
 8001f36:	603b      	str	r3, [r7, #0]
 8001f38:	ea89 030b 	eor.w	r3, r9, fp
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f42:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

            // Distribute the random mask correctly
            out->share[i] ^= r[i][j];
 8001f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f4a:	00db      	lsls	r3, r3, #3
 8001f4c:	4413      	add	r3, r2
 8001f4e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	6a3b      	ldr	r3, [r7, #32]
 8001f58:	441a      	add	r2, r3
 8001f5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	4413      	add	r3, r2
 8001f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f64:	ea80 0402 	eor.w	r4, r0, r2
 8001f68:	61bc      	str	r4, [r7, #24]
 8001f6a:	404b      	eors	r3, r1
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f70:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001f7a:	e9c3 1200 	strd	r1, r2, [r3]
            out->share[j] ^= cross_term ^ r[i][j];
 8001f7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001f80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f82:	00db      	lsls	r3, r3, #3
 8001f84:	4413      	add	r3, r2
 8001f86:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001f8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001f8c:	015a      	lsls	r2, r3, #5
 8001f8e:	6a3b      	ldr	r3, [r7, #32]
 8001f90:	441a      	add	r2, r3
 8001f92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f9c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001fa0:	ea80 0602 	eor.w	r6, r0, r2
 8001fa4:	613e      	str	r6, [r7, #16]
 8001fa6:	404b      	eors	r3, r1
 8001fa8:	617b      	str	r3, [r7, #20]
 8001faa:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4063      	eors	r3, r4
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	406b      	eors	r3, r5
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001fbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001fc6:	e9c3 1200 	strd	r1, r2, [r3]
        for (size_t j = i + 1; j < MASKING_N; j++) {
 8001fca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fcc:	3301      	adds	r3, #1
 8001fce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001fd2:	2b03      	cmp	r3, #3
 8001fd4:	d98d      	bls.n	8001ef2 <masked_and+0x5c>
    for (size_t i = 0; i < MASKING_N; i++) {
 8001fd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fd8:	3301      	adds	r3, #1
 8001fda:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001fde:	2b03      	cmp	r3, #3
 8001fe0:	d983      	bls.n	8001eea <masked_and+0x54>
        }
    }
}
 8001fe2:	bf00      	nop
 8001fe4:	bf00      	nop
 8001fe6:	3748      	adds	r7, #72	@ 0x48
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001fee:	4770      	bx	lr

08001ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800202e:	2007      	movs	r0, #7
 8002030:	f000 fbe4 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002034:	bf00      	nop
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	@ 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a19      	ldr	r2, [pc, #100]	@ (80020c4 <HAL_I2C_MspInit+0x84>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d12c      	bne.n	80020bc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b18      	ldr	r3, [pc, #96]	@ (80020c8 <HAL_I2C_MspInit+0x88>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	4a17      	ldr	r2, [pc, #92]	@ (80020c8 <HAL_I2C_MspInit+0x88>)
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	6313      	str	r3, [r2, #48]	@ 0x30
 8002072:	4b15      	ldr	r3, [pc, #84]	@ (80020c8 <HAL_I2C_MspInit+0x88>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800207e:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8002082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002084:	2312      	movs	r3, #18
 8002086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002088:	2301      	movs	r3, #1
 800208a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800208c:	2300      	movs	r3, #0
 800208e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002090:	2304      	movs	r3, #4
 8002092:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002094:	f107 0314 	add.w	r3, r7, #20
 8002098:	4619      	mov	r1, r3
 800209a:	480c      	ldr	r0, [pc, #48]	@ (80020cc <HAL_I2C_MspInit+0x8c>)
 800209c:	f000 fbf0 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <HAL_I2C_MspInit+0x88>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a8:	4a07      	ldr	r2, [pc, #28]	@ (80020c8 <HAL_I2C_MspInit+0x88>)
 80020aa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80020ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80020b0:	4b05      	ldr	r3, [pc, #20]	@ (80020c8 <HAL_I2C_MspInit+0x88>)
 80020b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	@ 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40005400 	.word	0x40005400
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020400 	.word	0x40020400

080020d0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08e      	sub	sp, #56	@ 0x38
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80020e8:	f107 0314 	add.w	r3, r7, #20
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]
 80020f0:	605a      	str	r2, [r3, #4]
 80020f2:	609a      	str	r2, [r3, #8]
 80020f4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a31      	ldr	r2, [pc, #196]	@ (80021c0 <HAL_I2S_MspInit+0xf0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d15a      	bne.n	80021b6 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002100:	2301      	movs	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002104:	23c0      	movs	r3, #192	@ 0xc0
 8002106:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002108:	2302      	movs	r3, #2
 800210a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	4618      	mov	r0, r3
 8002112:	f004 f91b 	bl	800634c <HAL_RCCEx_PeriphCLKConfig>
 8002116:	4603      	mov	r3, r0
 8002118:	2b00      	cmp	r3, #0
 800211a:	d001      	beq.n	8002120 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 800211c:	f7ff fa1e 	bl	800155c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002120:	2300      	movs	r3, #0
 8002122:	613b      	str	r3, [r7, #16]
 8002124:	4b27      	ldr	r3, [pc, #156]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002128:	4a26      	ldr	r2, [pc, #152]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 800212a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800212e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002130:	4b24      	ldr	r3, [pc, #144]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002134:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800213c:	2300      	movs	r3, #0
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	4b20      	ldr	r3, [pc, #128]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 8002142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002144:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 8002146:	f043 0301 	orr.w	r3, r3, #1
 800214a:	6313      	str	r3, [r2, #48]	@ 0x30
 800214c:	4b1d      	ldr	r3, [pc, #116]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 800214e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002158:	2300      	movs	r3, #0
 800215a:	60bb      	str	r3, [r7, #8]
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 800215e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002160:	4a18      	ldr	r2, [pc, #96]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6313      	str	r3, [r2, #48]	@ 0x30
 8002168:	4b16      	ldr	r3, [pc, #88]	@ (80021c4 <HAL_I2S_MspInit+0xf4>)
 800216a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8002174:	2310      	movs	r3, #16
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002184:	2306      	movs	r3, #6
 8002186:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8002188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800218c:	4619      	mov	r1, r3
 800218e:	480e      	ldr	r0, [pc, #56]	@ (80021c8 <HAL_I2S_MspInit+0xf8>)
 8002190:	f000 fb76 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8002194:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219a:	2302      	movs	r3, #2
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80021a6:	2306      	movs	r3, #6
 80021a8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021ae:	4619      	mov	r1, r3
 80021b0:	4806      	ldr	r0, [pc, #24]	@ (80021cc <HAL_I2S_MspInit+0xfc>)
 80021b2:	f000 fb65 	bl	8002880 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 80021b6:	bf00      	nop
 80021b8:	3738      	adds	r7, #56	@ 0x38
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40003c00 	.word	0x40003c00
 80021c4:	40023800 	.word	0x40023800
 80021c8:	40020000 	.word	0x40020000
 80021cc:	40020800 	.word	0x40020800

080021d0 <HAL_RNG_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrng: RNG handle pointer
  * @retval None
  */
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0b      	ldr	r2, [pc, #44]	@ (800220c <HAL_RNG_MspInit+0x3c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d10d      	bne.n	80021fe <HAL_RNG_MspInit+0x2e>
  {
    /* USER CODE BEGIN RNG_MspInit 0 */

    /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_RNG_MspInit+0x40>)
 80021e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ea:	4a09      	ldr	r2, [pc, #36]	@ (8002210 <HAL_RNG_MspInit+0x40>)
 80021ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80021f0:	6353      	str	r3, [r2, #52]	@ 0x34
 80021f2:	4b07      	ldr	r3, [pc, #28]	@ (8002210 <HAL_RNG_MspInit+0x40>)
 80021f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021fa:	60fb      	str	r3, [r7, #12]
 80021fc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END RNG_MspInit 1 */

  }

}
 80021fe:	bf00      	nop
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	50060800 	.word	0x50060800
 8002210:	40023800 	.word	0x40023800

08002214 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b08a      	sub	sp, #40	@ 0x28
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 0314 	add.w	r3, r7, #20
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a19      	ldr	r2, [pc, #100]	@ (8002298 <HAL_SPI_MspInit+0x84>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d12b      	bne.n	800228e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	613b      	str	r3, [r7, #16]
 800223a:	4b18      	ldr	r3, [pc, #96]	@ (800229c <HAL_SPI_MspInit+0x88>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	4a17      	ldr	r2, [pc, #92]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002240:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002244:	6453      	str	r3, [r2, #68]	@ 0x44
 8002246:	4b15      	ldr	r3, [pc, #84]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800224a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	4b11      	ldr	r3, [pc, #68]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a10      	ldr	r2, [pc, #64]	@ (800229c <HAL_SPI_MspInit+0x88>)
 800225c:	f043 0301 	orr.w	r3, r3, #1
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b0e      	ldr	r3, [pc, #56]	@ (800229c <HAL_SPI_MspInit+0x88>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800226e:	23e0      	movs	r3, #224	@ 0xe0
 8002270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002272:	2302      	movs	r3, #2
 8002274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800227a:	2300      	movs	r3, #0
 800227c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800227e:	2305      	movs	r3, #5
 8002280:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002282:	f107 0314 	add.w	r3, r7, #20
 8002286:	4619      	mov	r1, r3
 8002288:	4805      	ldr	r0, [pc, #20]	@ (80022a0 <HAL_SPI_MspInit+0x8c>)
 800228a:	f000 faf9 	bl	8002880 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800228e:	bf00      	nop
 8002290:	3728      	adds	r7, #40	@ 0x28
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	40013000 	.word	0x40013000
 800229c:	40023800 	.word	0x40023800
 80022a0:	40020000 	.word	0x40020000

080022a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b08a      	sub	sp, #40	@ 0x28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ac:	f107 0314 	add.w	r3, r7, #20
 80022b0:	2200      	movs	r2, #0
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	605a      	str	r2, [r3, #4]
 80022b6:	609a      	str	r2, [r3, #8]
 80022b8:	60da      	str	r2, [r3, #12]
 80022ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_UART_MspInit+0x84>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d12b      	bne.n	800231e <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80022c6:	2300      	movs	r3, #0
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	4b18      	ldr	r3, [pc, #96]	@ (800232c <HAL_UART_MspInit+0x88>)
 80022cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ce:	4a17      	ldr	r2, [pc, #92]	@ (800232c <HAL_UART_MspInit+0x88>)
 80022d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80022d6:	4b15      	ldr	r3, [pc, #84]	@ (800232c <HAL_UART_MspInit+0x88>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022de:	613b      	str	r3, [r7, #16]
 80022e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <HAL_UART_MspInit+0x88>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	@ (800232c <HAL_UART_MspInit+0x88>)
 80022ec:	f043 0301 	orr.w	r3, r3, #1
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_UART_MspInit+0x88>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f003 0301 	and.w	r3, r3, #1
 80022fa:	60fb      	str	r3, [r7, #12]
 80022fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022fe:	230c      	movs	r3, #12
 8002300:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230a:	2303      	movs	r3, #3
 800230c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800230e:	2307      	movs	r3, #7
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <HAL_UART_MspInit+0x8c>)
 800231a:	f000 fab1 	bl	8002880 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800231e:	bf00      	nop
 8002320:	3728      	adds	r7, #40	@ 0x28
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40004400 	.word	0x40004400
 800232c:	40023800 	.word	0x40023800
 8002330:	40020000 	.word	0x40020000

08002334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002338:	bf00      	nop
 800233a:	e7fd      	b.n	8002338 <NMI_Handler+0x4>

0800233c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002340:	bf00      	nop
 8002342:	e7fd      	b.n	8002340 <HardFault_Handler+0x4>

08002344 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <MemManage_Handler+0x4>

0800234c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002350:	bf00      	nop
 8002352:	e7fd      	b.n	8002350 <BusFault_Handler+0x4>

08002354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002358:	bf00      	nop
 800235a:	e7fd      	b.n	8002358 <UsageFault_Handler+0x4>

0800235c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800238a:	f000 f923 	bl	80025d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800238e:	bf00      	nop
 8002390:	bd80      	pop	{r7, pc}
	...

08002394 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002398:	4802      	ldr	r0, [pc, #8]	@ (80023a4 <OTG_FS_IRQHandler+0x10>)
 800239a:	f000 ff07 	bl	80031ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800239e:	bf00      	nop
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	200005d4 	.word	0x200005d4

080023a8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e00a      	b.n	80023d0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023ba:	f3af 8000 	nop.w
 80023be:	4601      	mov	r1, r0
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	1c5a      	adds	r2, r3, #1
 80023c4:	60ba      	str	r2, [r7, #8]
 80023c6:	b2ca      	uxtb	r2, r1
 80023c8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	3301      	adds	r3, #1
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	dbf0      	blt.n	80023ba <_read+0x12>
  }

  return len;
 80023d8:	687b      	ldr	r3, [r7, #4]
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <_close>:
  }
  return len;
}

int _close(int file)
{
 80023e2:	b480      	push	{r7}
 80023e4:	b083      	sub	sp, #12
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023fa:	b480      	push	{r7}
 80023fc:	b083      	sub	sp, #12
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800240a:	605a      	str	r2, [r3, #4]
  return 0;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <_isatty>:

int _isatty(int file)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002422:	2301      	movs	r3, #1
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800243c:	2300      	movs	r3, #0
}
 800243e:	4618      	mov	r0, r3
 8002440:	3714      	adds	r7, #20
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
	...

0800244c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002454:	4a14      	ldr	r2, [pc, #80]	@ (80024a8 <_sbrk+0x5c>)
 8002456:	4b15      	ldr	r3, [pc, #84]	@ (80024ac <_sbrk+0x60>)
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002460:	4b13      	ldr	r3, [pc, #76]	@ (80024b0 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d102      	bne.n	800246e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002468:	4b11      	ldr	r3, [pc, #68]	@ (80024b0 <_sbrk+0x64>)
 800246a:	4a12      	ldr	r2, [pc, #72]	@ (80024b4 <_sbrk+0x68>)
 800246c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800246e:	4b10      	ldr	r3, [pc, #64]	@ (80024b0 <_sbrk+0x64>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4413      	add	r3, r2
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	429a      	cmp	r2, r3
 800247a:	d207      	bcs.n	800248c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800247c:	f008 fe30 	bl	800b0e0 <__errno>
 8002480:	4603      	mov	r3, r0
 8002482:	220c      	movs	r2, #12
 8002484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002486:	f04f 33ff 	mov.w	r3, #4294967295
 800248a:	e009      	b.n	80024a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800248c:	4b08      	ldr	r3, [pc, #32]	@ (80024b0 <_sbrk+0x64>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002492:	4b07      	ldr	r3, [pc, #28]	@ (80024b0 <_sbrk+0x64>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4413      	add	r3, r2
 800249a:	4a05      	ldr	r2, [pc, #20]	@ (80024b0 <_sbrk+0x64>)
 800249c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800249e:	68fb      	ldr	r3, [r7, #12]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	3718      	adds	r7, #24
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20020000 	.word	0x20020000
 80024ac:	00000400 	.word	0x00000400
 80024b0:	200001f0 	.word	0x200001f0
 80024b4:	20000b00 	.word	0x20000b00

080024b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024bc:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <SystemInit+0x20>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c2:	4a05      	ldr	r2, [pc, #20]	@ (80024d8 <SystemInit+0x20>)
 80024c4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024cc:	bf00      	nop
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	e000ed00 	.word	0xe000ed00

080024dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024dc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002514 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024e0:	f7ff ffea 	bl	80024b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024e4:	480c      	ldr	r0, [pc, #48]	@ (8002518 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024e6:	490d      	ldr	r1, [pc, #52]	@ (800251c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024ec:	e002      	b.n	80024f4 <LoopCopyDataInit>

080024ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024f2:	3304      	adds	r3, #4

080024f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024f8:	d3f9      	bcc.n	80024ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024fa:	4a0a      	ldr	r2, [pc, #40]	@ (8002524 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024fc:	4c0a      	ldr	r4, [pc, #40]	@ (8002528 <LoopFillZerobss+0x22>)
  movs r3, #0
 80024fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002500:	e001      	b.n	8002506 <LoopFillZerobss>

08002502 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002502:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002504:	3204      	adds	r2, #4

08002506 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002506:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002508:	d3fb      	bcc.n	8002502 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800250a:	f008 fdef 	bl	800b0ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800250e:	f7fe fdb1 	bl	8001074 <main>
  bx  lr    
 8002512:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002514:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800251c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8002520:	0800bc28 	.word	0x0800bc28
  ldr r2, =_sbss
 8002524:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002528:	20000b00 	.word	0x20000b00

0800252c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800252c:	e7fe      	b.n	800252c <ADC_IRQHandler>
	...

08002530 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002534:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_Init+0x40>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a0d      	ldr	r2, [pc, #52]	@ (8002570 <HAL_Init+0x40>)
 800253a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800253e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002540:	4b0b      	ldr	r3, [pc, #44]	@ (8002570 <HAL_Init+0x40>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a0a      	ldr	r2, [pc, #40]	@ (8002570 <HAL_Init+0x40>)
 8002546:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800254a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800254c:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <HAL_Init+0x40>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a07      	ldr	r2, [pc, #28]	@ (8002570 <HAL_Init+0x40>)
 8002552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002556:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002558:	2003      	movs	r0, #3
 800255a:	f000 f94f 	bl	80027fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800255e:	2000      	movs	r0, #0
 8002560:	f000 f808 	bl	8002574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002564:	f7ff fd44 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	40023c00 	.word	0x40023c00

08002574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800257c:	4b12      	ldr	r3, [pc, #72]	@ (80025c8 <HAL_InitTick+0x54>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b12      	ldr	r3, [pc, #72]	@ (80025cc <HAL_InitTick+0x58>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f967 	bl	8002866 <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00e      	b.n	80025c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d80a      	bhi.n	80025be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f000 f92f 	bl	8002812 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b4:	4a06      	ldr	r2, [pc, #24]	@ (80025d0 <HAL_InitTick+0x5c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000008 	.word	0x20000008
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d8:	4b06      	ldr	r3, [pc, #24]	@ (80025f4 <HAL_IncTick+0x20>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_IncTick+0x24>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	@ (80025f8 <HAL_IncTick+0x24>)
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000008 	.word	0x20000008
 80025f8:	200001f4 	.word	0x200001f4

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200001f4 	.word	0x200001f4

08002614 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800261c:	f7ff ffee 	bl	80025fc <HAL_GetTick>
 8002620:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800262c:	d005      	beq.n	800263a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800262e:	4b0a      	ldr	r3, [pc, #40]	@ (8002658 <HAL_Delay+0x44>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	461a      	mov	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4413      	add	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800263a:	bf00      	nop
 800263c:	f7ff ffde 	bl	80025fc <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	429a      	cmp	r2, r3
 800264a:	d8f7      	bhi.n	800263c <HAL_Delay+0x28>
  {
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000008 	.word	0x20000008

0800265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800266c:	4b0c      	ldr	r3, [pc, #48]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002684:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002688:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800268e:	4a04      	ldr	r2, [pc, #16]	@ (80026a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	60d3      	str	r3, [r2, #12]
}
 8002694:	bf00      	nop
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr
 80026a0:	e000ed00 	.word	0xe000ed00

080026a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <__NVIC_GetPriorityGrouping+0x18>)
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	f003 0307 	and.w	r3, r3, #7
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr
 80026bc:	e000ed00 	.word	0xe000ed00

080026c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	4603      	mov	r3, r0
 80026c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	db0b      	blt.n	80026ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026d2:	79fb      	ldrb	r3, [r7, #7]
 80026d4:	f003 021f 	and.w	r2, r3, #31
 80026d8:	4907      	ldr	r1, [pc, #28]	@ (80026f8 <__NVIC_EnableIRQ+0x38>)
 80026da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026de:	095b      	lsrs	r3, r3, #5
 80026e0:	2001      	movs	r0, #1
 80026e2:	fa00 f202 	lsl.w	r2, r0, r2
 80026e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80026ea:	bf00      	nop
 80026ec:	370c      	adds	r7, #12
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
 80026f6:	bf00      	nop
 80026f8:	e000e100 	.word	0xe000e100

080026fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	4603      	mov	r3, r0
 8002704:	6039      	str	r1, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002708:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800270c:	2b00      	cmp	r3, #0
 800270e:	db0a      	blt.n	8002726 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	b2da      	uxtb	r2, r3
 8002714:	490c      	ldr	r1, [pc, #48]	@ (8002748 <__NVIC_SetPriority+0x4c>)
 8002716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271a:	0112      	lsls	r2, r2, #4
 800271c:	b2d2      	uxtb	r2, r2
 800271e:	440b      	add	r3, r1
 8002720:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002724:	e00a      	b.n	800273c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	4908      	ldr	r1, [pc, #32]	@ (800274c <__NVIC_SetPriority+0x50>)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	3b04      	subs	r3, #4
 8002734:	0112      	lsls	r2, r2, #4
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	440b      	add	r3, r1
 800273a:	761a      	strb	r2, [r3, #24]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr
 8002748:	e000e100 	.word	0xe000e100
 800274c:	e000ed00 	.word	0xe000ed00

08002750 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	@ 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	60f8      	str	r0, [r7, #12]
 8002758:	60b9      	str	r1, [r7, #8]
 800275a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f003 0307 	and.w	r3, r3, #7
 8002762:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f1c3 0307 	rsb	r3, r3, #7
 800276a:	2b04      	cmp	r3, #4
 800276c:	bf28      	it	cs
 800276e:	2304      	movcs	r3, #4
 8002770:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	3304      	adds	r3, #4
 8002776:	2b06      	cmp	r3, #6
 8002778:	d902      	bls.n	8002780 <NVIC_EncodePriority+0x30>
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3b03      	subs	r3, #3
 800277e:	e000      	b.n	8002782 <NVIC_EncodePriority+0x32>
 8002780:	2300      	movs	r3, #0
 8002782:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002784:	f04f 32ff 	mov.w	r2, #4294967295
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	fa02 f303 	lsl.w	r3, r2, r3
 800278e:	43da      	mvns	r2, r3
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002798:	f04f 31ff 	mov.w	r1, #4294967295
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	fa01 f303 	lsl.w	r3, r1, r3
 80027a2:	43d9      	mvns	r1, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	4313      	orrs	r3, r2
         );
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3724      	adds	r7, #36	@ 0x24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr
	...

080027b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b082      	sub	sp, #8
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027c8:	d301      	bcc.n	80027ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027ca:	2301      	movs	r3, #1
 80027cc:	e00f      	b.n	80027ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ce:	4a0a      	ldr	r2, [pc, #40]	@ (80027f8 <SysTick_Config+0x40>)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027d6:	210f      	movs	r1, #15
 80027d8:	f04f 30ff 	mov.w	r0, #4294967295
 80027dc:	f7ff ff8e 	bl	80026fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027e0:	4b05      	ldr	r3, [pc, #20]	@ (80027f8 <SysTick_Config+0x40>)
 80027e2:	2200      	movs	r2, #0
 80027e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027e6:	4b04      	ldr	r3, [pc, #16]	@ (80027f8 <SysTick_Config+0x40>)
 80027e8:	2207      	movs	r2, #7
 80027ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	e000e010 	.word	0xe000e010

080027fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f7ff ff29 	bl	800265c <__NVIC_SetPriorityGrouping>
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002812:	b580      	push	{r7, lr}
 8002814:	b086      	sub	sp, #24
 8002816:	af00      	add	r7, sp, #0
 8002818:	4603      	mov	r3, r0
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002824:	f7ff ff3e 	bl	80026a4 <__NVIC_GetPriorityGrouping>
 8002828:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	68b9      	ldr	r1, [r7, #8]
 800282e:	6978      	ldr	r0, [r7, #20]
 8002830:	f7ff ff8e 	bl	8002750 <NVIC_EncodePriority>
 8002834:	4602      	mov	r2, r0
 8002836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff ff5d 	bl	80026fc <__NVIC_SetPriority>
}
 8002842:	bf00      	nop
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b082      	sub	sp, #8
 800284e:	af00      	add	r7, sp, #0
 8002850:	4603      	mov	r3, r0
 8002852:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002854:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002858:	4618      	mov	r0, r3
 800285a:	f7ff ff31 	bl	80026c0 <__NVIC_EnableIRQ>
}
 800285e:	bf00      	nop
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b082      	sub	sp, #8
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff ffa2 	bl	80027b8 <SysTick_Config>
 8002874:	4603      	mov	r3, r0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3708      	adds	r7, #8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
	...

08002880 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002880:	b480      	push	{r7}
 8002882:	b089      	sub	sp, #36	@ 0x24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800288e:	2300      	movs	r3, #0
 8002890:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002892:	2300      	movs	r3, #0
 8002894:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002896:	2300      	movs	r3, #0
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e16b      	b.n	8002b74 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800289c:	2201      	movs	r2, #1
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	697a      	ldr	r2, [r7, #20]
 80028ac:	4013      	ands	r3, r2
 80028ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	f040 815a 	bne.w	8002b6e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d005      	beq.n	80028d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d130      	bne.n	8002934 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	2203      	movs	r2, #3
 80028de:	fa02 f303 	lsl.w	r3, r2, r3
 80028e2:	43db      	mvns	r3, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4013      	ands	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002908:	2201      	movs	r2, #1
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	69ba      	ldr	r2, [r7, #24]
 8002914:	4013      	ands	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	091b      	lsrs	r3, r3, #4
 800291e:	f003 0201 	and.w	r2, r3, #1
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	fa02 f303 	lsl.w	r3, r2, r3
 8002928:	69ba      	ldr	r2, [r7, #24]
 800292a:	4313      	orrs	r3, r2
 800292c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	69ba      	ldr	r2, [r7, #24]
 8002932:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 0303 	and.w	r3, r3, #3
 800293c:	2b03      	cmp	r3, #3
 800293e:	d017      	beq.n	8002970 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	005b      	lsls	r3, r3, #1
 800294a:	2203      	movs	r2, #3
 800294c:	fa02 f303 	lsl.w	r3, r2, r3
 8002950:	43db      	mvns	r3, r3
 8002952:	69ba      	ldr	r2, [r7, #24]
 8002954:	4013      	ands	r3, r2
 8002956:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	689a      	ldr	r2, [r3, #8]
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d123      	bne.n	80029c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	08da      	lsrs	r2, r3, #3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	3208      	adds	r2, #8
 8002984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002988:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	220f      	movs	r2, #15
 8002994:	fa02 f303 	lsl.w	r3, r2, r3
 8002998:	43db      	mvns	r3, r3
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4013      	ands	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	691a      	ldr	r2, [r3, #16]
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	f003 0307 	and.w	r3, r3, #7
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	fa02 f303 	lsl.w	r3, r2, r3
 80029b0:	69ba      	ldr	r2, [r7, #24]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	08da      	lsrs	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	3208      	adds	r2, #8
 80029be:	69b9      	ldr	r1, [r7, #24]
 80029c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	2203      	movs	r2, #3
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f003 0203 	and.w	r2, r3, #3
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 80b4 	beq.w	8002b6e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b60      	ldr	r3, [pc, #384]	@ (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	4a5f      	ldr	r2, [pc, #380]	@ (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a16:	4b5d      	ldr	r3, [pc, #372]	@ (8002b8c <HAL_GPIO_Init+0x30c>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a22:	4a5b      	ldr	r2, [pc, #364]	@ (8002b90 <HAL_GPIO_Init+0x310>)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	089b      	lsrs	r3, r3, #2
 8002a28:	3302      	adds	r3, #2
 8002a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	220f      	movs	r2, #15
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	43db      	mvns	r3, r3
 8002a40:	69ba      	ldr	r2, [r7, #24]
 8002a42:	4013      	ands	r3, r2
 8002a44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a52      	ldr	r2, [pc, #328]	@ (8002b94 <HAL_GPIO_Init+0x314>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d02b      	beq.n	8002aa6 <HAL_GPIO_Init+0x226>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a51      	ldr	r2, [pc, #324]	@ (8002b98 <HAL_GPIO_Init+0x318>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d025      	beq.n	8002aa2 <HAL_GPIO_Init+0x222>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a50      	ldr	r2, [pc, #320]	@ (8002b9c <HAL_GPIO_Init+0x31c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d01f      	beq.n	8002a9e <HAL_GPIO_Init+0x21e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a4f      	ldr	r2, [pc, #316]	@ (8002ba0 <HAL_GPIO_Init+0x320>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d019      	beq.n	8002a9a <HAL_GPIO_Init+0x21a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a4e      	ldr	r2, [pc, #312]	@ (8002ba4 <HAL_GPIO_Init+0x324>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d013      	beq.n	8002a96 <HAL_GPIO_Init+0x216>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a4d      	ldr	r2, [pc, #308]	@ (8002ba8 <HAL_GPIO_Init+0x328>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d00d      	beq.n	8002a92 <HAL_GPIO_Init+0x212>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a4c      	ldr	r2, [pc, #304]	@ (8002bac <HAL_GPIO_Init+0x32c>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d007      	beq.n	8002a8e <HAL_GPIO_Init+0x20e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a4b      	ldr	r2, [pc, #300]	@ (8002bb0 <HAL_GPIO_Init+0x330>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d101      	bne.n	8002a8a <HAL_GPIO_Init+0x20a>
 8002a86:	2307      	movs	r3, #7
 8002a88:	e00e      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	e00c      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e00a      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e008      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e006      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e004      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e002      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_GPIO_Init+0x228>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	69fa      	ldr	r2, [r7, #28]
 8002aaa:	f002 0203 	and.w	r2, r2, #3
 8002aae:	0092      	lsls	r2, r2, #2
 8002ab0:	4093      	lsls	r3, r2
 8002ab2:	69ba      	ldr	r2, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ab8:	4935      	ldr	r1, [pc, #212]	@ (8002b90 <HAL_GPIO_Init+0x310>)
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	089b      	lsrs	r3, r3, #2
 8002abe:	3302      	adds	r3, #2
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ac6:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d003      	beq.n	8002aea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aea:	4a32      	ldr	r2, [pc, #200]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af0:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	43db      	mvns	r3, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4013      	ands	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d003      	beq.n	8002b14 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	4313      	orrs	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b14:	4a27      	ldr	r2, [pc, #156]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1a:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	43db      	mvns	r3, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4013      	ands	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d003      	beq.n	8002b3e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	4313      	orrs	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b3e:	4a1d      	ldr	r2, [pc, #116]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b44:	4b1b      	ldr	r3, [pc, #108]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4013      	ands	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d003      	beq.n	8002b68 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b68:	4a12      	ldr	r2, [pc, #72]	@ (8002bb4 <HAL_GPIO_Init+0x334>)
 8002b6a:	69bb      	ldr	r3, [r7, #24]
 8002b6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	3301      	adds	r3, #1
 8002b72:	61fb      	str	r3, [r7, #28]
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	2b0f      	cmp	r3, #15
 8002b78:	f67f ae90 	bls.w	800289c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b7c:	bf00      	nop
 8002b7e:	bf00      	nop
 8002b80:	3724      	adds	r7, #36	@ 0x24
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr
 8002b8a:	bf00      	nop
 8002b8c:	40023800 	.word	0x40023800
 8002b90:	40013800 	.word	0x40013800
 8002b94:	40020000 	.word	0x40020000
 8002b98:	40020400 	.word	0x40020400
 8002b9c:	40020800 	.word	0x40020800
 8002ba0:	40020c00 	.word	0x40020c00
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	40021400 	.word	0x40021400
 8002bac:	40021800 	.word	0x40021800
 8002bb0:	40021c00 	.word	0x40021c00
 8002bb4:	40013c00 	.word	0x40013c00

08002bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	460b      	mov	r3, r1
 8002bc2:	807b      	strh	r3, [r7, #2]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc8:	787b      	ldrb	r3, [r7, #1]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d003      	beq.n	8002bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bce:	887a      	ldrh	r2, [r7, #2]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bd4:	e003      	b.n	8002bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bd6:	887b      	ldrh	r3, [r7, #2]
 8002bd8:	041a      	lsls	r2, r3, #16
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	619a      	str	r2, [r3, #24]
}
 8002bde:	bf00      	nop
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr

08002bea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002bea:	b580      	push	{r7, lr}
 8002bec:	b086      	sub	sp, #24
 8002bee:	af02      	add	r7, sp, #8
 8002bf0:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e059      	b.n	8002cb0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f007 fc3a 	bl	800a490 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2203      	movs	r2, #3
 8002c20:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c2a:	d102      	bne.n	8002c32 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f004 fa53 	bl	80070e2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	7c1a      	ldrb	r2, [r3, #16]
 8002c44:	f88d 2000 	strb.w	r2, [sp]
 8002c48:	3304      	adds	r3, #4
 8002c4a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c4c:	f004 f9d4 	bl	8006ff8 <USB_CoreInit>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2202      	movs	r2, #2
 8002c5a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e026      	b.n	8002cb0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f004 fa4b 	bl	8007104 <USB_SetCurrentMode>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d005      	beq.n	8002c80 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e017      	b.n	8002cb0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6818      	ldr	r0, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7c1a      	ldrb	r2, [r3, #16]
 8002c88:	f88d 2000 	strb.w	r2, [sp]
 8002c8c:	3304      	adds	r3, #4
 8002c8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c90:	f004 fbee 	bl	8007470 <USB_HostInit>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d005      	beq.n	8002ca6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e004      	b.n	8002cb0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b08b      	sub	sp, #44	@ 0x2c
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	4608      	mov	r0, r1
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	70fb      	strb	r3, [r7, #3]
 8002cca:	460b      	mov	r3, r1
 8002ccc:	70bb      	strb	r3, [r7, #2]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002cd2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002cd4:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_HCD_HC_Init+0x2c>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e09d      	b.n	8002e20 <HAL_HCD_HC_Init+0x168>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	3319      	adds	r3, #25
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002d00:	78fa      	ldrb	r2, [r7, #3]
 8002d02:	6879      	ldr	r1, [r7, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	011b      	lsls	r3, r3, #4
 8002d08:	1a9b      	subs	r3, r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	440b      	add	r3, r1
 8002d0e:	3314      	adds	r3, #20
 8002d10:	787a      	ldrb	r2, [r7, #1]
 8002d12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	1a9b      	subs	r3, r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3315      	adds	r3, #21
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002d28:	78fa      	ldrb	r2, [r7, #3]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	011b      	lsls	r3, r3, #4
 8002d30:	1a9b      	subs	r3, r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	3326      	adds	r3, #38	@ 0x26
 8002d38:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8002d3c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002d3e:	78fa      	ldrb	r2, [r7, #3]
 8002d40:	78bb      	ldrb	r3, [r7, #2]
 8002d42:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d46:	b2d8      	uxtb	r0, r3
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	011b      	lsls	r3, r3, #4
 8002d4e:	1a9b      	subs	r3, r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	3316      	adds	r3, #22
 8002d56:	4602      	mov	r2, r0
 8002d58:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	4619      	mov	r1, r3
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 fbc8 	bl	80034f4 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8002d64:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	da0a      	bge.n	8002d82 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3317      	adds	r3, #23
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	e009      	b.n	8002d96 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3317      	adds	r3, #23
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f004 fccc 	bl	8007738 <USB_GetHostSpeed>
 8002da0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8002da2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d10b      	bne.n	8002dc2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002daa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d107      	bne.n	8002dc2 <HAL_HCD_HC_Init+0x10a>
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d104      	bne.n	8002dc2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	2bbc      	cmp	r3, #188	@ 0xbc
 8002dbc:	d901      	bls.n	8002dc2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002dbe:	23bc      	movs	r3, #188	@ 0xbc
 8002dc0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002dc2:	78fa      	ldrb	r2, [r7, #3]
 8002dc4:	6879      	ldr	r1, [r7, #4]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	011b      	lsls	r3, r3, #4
 8002dca:	1a9b      	subs	r3, r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	440b      	add	r3, r1
 8002dd0:	3318      	adds	r3, #24
 8002dd2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002dd6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002dd8:	78fa      	ldrb	r2, [r7, #3]
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	b298      	uxth	r0, r3
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4613      	mov	r3, r2
 8002de2:	011b      	lsls	r3, r3, #4
 8002de4:	1a9b      	subs	r3, r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	440b      	add	r3, r1
 8002dea:	3328      	adds	r3, #40	@ 0x28
 8002dec:	4602      	mov	r2, r0
 8002dee:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6818      	ldr	r0, [r3, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	787c      	ldrb	r4, [r7, #1]
 8002dfa:	78ba      	ldrb	r2, [r7, #2]
 8002dfc:	78f9      	ldrb	r1, [r7, #3]
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002e04:	9301      	str	r3, [sp, #4]
 8002e06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4623      	mov	r3, r4
 8002e0e:	f004 fcbb 	bl	8007788 <USB_HC_Init>
 8002e12:	4603      	mov	r3, r0
 8002e14:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	371c      	adds	r7, #28
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd90      	pop	{r4, r7, pc}

08002e28 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	460b      	mov	r3, r1
 8002e32:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_HCD_HC_Halt+0x1e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e00f      	b.n	8002e66 <HAL_HCD_HC_Halt+0x3e>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	78fa      	ldrb	r2, [r7, #3]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f005 f84d 	bl	8007ef6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	3710      	adds	r7, #16
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
	...

08002e70 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b082      	sub	sp, #8
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	4608      	mov	r0, r1
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4603      	mov	r3, r0
 8002e80:	70fb      	strb	r3, [r7, #3]
 8002e82:	460b      	mov	r3, r1
 8002e84:	70bb      	strb	r3, [r7, #2]
 8002e86:	4613      	mov	r3, r2
 8002e88:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3317      	adds	r3, #23
 8002e9a:	78ba      	ldrb	r2, [r7, #2]
 8002e9c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002e9e:	78fa      	ldrb	r2, [r7, #3]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	011b      	lsls	r3, r3, #4
 8002ea6:	1a9b      	subs	r3, r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	440b      	add	r3, r1
 8002eac:	3326      	adds	r3, #38	@ 0x26
 8002eae:	787a      	ldrb	r2, [r7, #1]
 8002eb0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002eb2:	7c3b      	ldrb	r3, [r7, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d114      	bne.n	8002ee2 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	332a      	adds	r3, #42	@ 0x2a
 8002ec8:	2203      	movs	r2, #3
 8002eca:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3319      	adds	r3, #25
 8002edc:	7f3a      	ldrb	r2, [r7, #28]
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e009      	b.n	8002ef6 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	332a      	adds	r3, #42	@ 0x2a
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002ef6:	787b      	ldrb	r3, [r7, #1]
 8002ef8:	2b03      	cmp	r3, #3
 8002efa:	f200 8102 	bhi.w	8003102 <HAL_HCD_HC_SubmitRequest+0x292>
 8002efe:	a201      	add	r2, pc, #4	@ (adr r2, 8002f04 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	080030ed 	.word	0x080030ed
 8002f0c:	08002fd9 	.word	0x08002fd9
 8002f10:	08003063 	.word	0x08003063
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002f14:	7c3b      	ldrb	r3, [r7, #16]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	f040 80f5 	bne.w	8003106 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8002f1c:	78bb      	ldrb	r3, [r7, #2]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d12d      	bne.n	8002f7e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002f22:	8b3b      	ldrh	r3, [r7, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002f28:	78fa      	ldrb	r2, [r7, #3]
 8002f2a:	6879      	ldr	r1, [r7, #4]
 8002f2c:	4613      	mov	r3, r2
 8002f2e:	011b      	lsls	r3, r3, #4
 8002f30:	1a9b      	subs	r3, r3, r2
 8002f32:	009b      	lsls	r3, r3, #2
 8002f34:	440b      	add	r3, r1
 8002f36:	333d      	adds	r3, #61	@ 0x3d
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8002f3c:	78fa      	ldrb	r2, [r7, #3]
 8002f3e:	6879      	ldr	r1, [r7, #4]
 8002f40:	4613      	mov	r3, r2
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	009b      	lsls	r3, r3, #2
 8002f48:	440b      	add	r3, r1
 8002f4a:	333d      	adds	r3, #61	@ 0x3d
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10a      	bne.n	8002f68 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002f52:	78fa      	ldrb	r2, [r7, #3]
 8002f54:	6879      	ldr	r1, [r7, #4]
 8002f56:	4613      	mov	r3, r2
 8002f58:	011b      	lsls	r3, r3, #4
 8002f5a:	1a9b      	subs	r3, r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	440b      	add	r3, r1
 8002f60:	332a      	adds	r3, #42	@ 0x2a
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002f66:	e0ce      	b.n	8003106 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f68:	78fa      	ldrb	r2, [r7, #3]
 8002f6a:	6879      	ldr	r1, [r7, #4]
 8002f6c:	4613      	mov	r3, r2
 8002f6e:	011b      	lsls	r3, r3, #4
 8002f70:	1a9b      	subs	r3, r3, r2
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	440b      	add	r3, r1
 8002f76:	332a      	adds	r3, #42	@ 0x2a
 8002f78:	2202      	movs	r2, #2
 8002f7a:	701a      	strb	r2, [r3, #0]
      break;
 8002f7c:	e0c3      	b.n	8003106 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	331a      	adds	r3, #26
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	f040 80b8 	bne.w	8003106 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	333c      	adds	r3, #60	@ 0x3c
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10a      	bne.n	8002fc2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	332a      	adds	r3, #42	@ 0x2a
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	701a      	strb	r2, [r3, #0]
      break;
 8002fc0:	e0a1      	b.n	8003106 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	332a      	adds	r3, #42	@ 0x2a
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	701a      	strb	r2, [r3, #0]
      break;
 8002fd6:	e096      	b.n	8003106 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002fd8:	78bb      	ldrb	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d120      	bne.n	8003020 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	333d      	adds	r3, #61	@ 0x3d
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10a      	bne.n	800300a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002ff4:	78fa      	ldrb	r2, [r7, #3]
 8002ff6:	6879      	ldr	r1, [r7, #4]
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	1a9b      	subs	r3, r3, r2
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	440b      	add	r3, r1
 8003002:	332a      	adds	r3, #42	@ 0x2a
 8003004:	2200      	movs	r2, #0
 8003006:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003008:	e07e      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	332a      	adds	r3, #42	@ 0x2a
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
      break;
 800301e:	e073      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003020:	78fa      	ldrb	r2, [r7, #3]
 8003022:	6879      	ldr	r1, [r7, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	1a9b      	subs	r3, r3, r2
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	333c      	adds	r3, #60	@ 0x3c
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10a      	bne.n	800304c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	332a      	adds	r3, #42	@ 0x2a
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
      break;
 800304a:	e05d      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	6879      	ldr	r1, [r7, #4]
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	440b      	add	r3, r1
 800305a:	332a      	adds	r3, #42	@ 0x2a
 800305c:	2202      	movs	r2, #2
 800305e:	701a      	strb	r2, [r3, #0]
      break;
 8003060:	e052      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8003062:	78bb      	ldrb	r3, [r7, #2]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d120      	bne.n	80030aa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	333d      	adds	r3, #61	@ 0x3d
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10a      	bne.n	8003094 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	332a      	adds	r3, #42	@ 0x2a
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003092:	e039      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	332a      	adds	r3, #42	@ 0x2a
 80030a4:	2202      	movs	r2, #2
 80030a6:	701a      	strb	r2, [r3, #0]
      break;
 80030a8:	e02e      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	4613      	mov	r3, r2
 80030b0:	011b      	lsls	r3, r3, #4
 80030b2:	1a9b      	subs	r3, r3, r2
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	440b      	add	r3, r1
 80030b8:	333c      	adds	r3, #60	@ 0x3c
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10a      	bne.n	80030d6 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030c0:	78fa      	ldrb	r2, [r7, #3]
 80030c2:	6879      	ldr	r1, [r7, #4]
 80030c4:	4613      	mov	r3, r2
 80030c6:	011b      	lsls	r3, r3, #4
 80030c8:	1a9b      	subs	r3, r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	440b      	add	r3, r1
 80030ce:	332a      	adds	r3, #42	@ 0x2a
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
      break;
 80030d4:	e018      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030d6:	78fa      	ldrb	r2, [r7, #3]
 80030d8:	6879      	ldr	r1, [r7, #4]
 80030da:	4613      	mov	r3, r2
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	1a9b      	subs	r3, r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	440b      	add	r3, r1
 80030e4:	332a      	adds	r3, #42	@ 0x2a
 80030e6:	2202      	movs	r2, #2
 80030e8:	701a      	strb	r2, [r3, #0]
      break;
 80030ea:	e00d      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030ec:	78fa      	ldrb	r2, [r7, #3]
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	4613      	mov	r3, r2
 80030f2:	011b      	lsls	r3, r3, #4
 80030f4:	1a9b      	subs	r3, r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	440b      	add	r3, r1
 80030fa:	332a      	adds	r3, #42	@ 0x2a
 80030fc:	2200      	movs	r2, #0
 80030fe:	701a      	strb	r2, [r3, #0]
      break;
 8003100:	e002      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8003102:	bf00      	nop
 8003104:	e000      	b.n	8003108 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8003106:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003108:	78fa      	ldrb	r2, [r7, #3]
 800310a:	6879      	ldr	r1, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	440b      	add	r3, r1
 8003116:	332c      	adds	r3, #44	@ 0x2c
 8003118:	697a      	ldr	r2, [r7, #20]
 800311a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800311c:	78fa      	ldrb	r2, [r7, #3]
 800311e:	8b39      	ldrh	r1, [r7, #24]
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	4403      	add	r3, r0
 800312c:	3334      	adds	r3, #52	@ 0x34
 800312e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	334c      	adds	r3, #76	@ 0x4c
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3338      	adds	r3, #56	@ 0x38
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3315      	adds	r3, #21
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	1a9b      	subs	r3, r3, r2
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	334d      	adds	r3, #77	@ 0x4d
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6818      	ldr	r0, [r3, #0]
 8003184:	78fa      	ldrb	r2, [r7, #3]
 8003186:	4613      	mov	r3, r2
 8003188:	011b      	lsls	r3, r3, #4
 800318a:	1a9b      	subs	r3, r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	3310      	adds	r3, #16
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	4413      	add	r3, r2
 8003194:	1d19      	adds	r1, r3, #4
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	799b      	ldrb	r3, [r3, #6]
 800319a:	461a      	mov	r2, r3
 800319c:	f004 fc20 	bl	80079e0 <USB_HC_StartXfer>
 80031a0:	4603      	mov	r3, r0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop

080031ac <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f004 f914 	bl	80073f0 <USB_GetMode>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	f040 80fb 	bne.w	80033c6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 f8d7 	bl	8007388 <USB_ReadInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80f1 	beq.w	80033c4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f004 f8ce 	bl	8007388 <USB_ReadInterrupts>
 80031ec:	4603      	mov	r3, r0
 80031ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80031f6:	d104      	bne.n	8003202 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003200:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4618      	mov	r0, r3
 8003208:	f004 f8be 	bl	8007388 <USB_ReadInterrupts>
 800320c:	4603      	mov	r3, r0
 800320e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003212:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003216:	d104      	bne.n	8003222 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003220:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f004 f8ae 	bl	8007388 <USB_ReadInterrupts>
 800322c:	4603      	mov	r3, r0
 800322e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003232:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003236:	d104      	bne.n	8003242 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003240:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f004 f89e 	bl	8007388 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b02      	cmp	r3, #2
 8003254:	d103      	bne.n	800325e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2202      	movs	r2, #2
 800325c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f004 f890 	bl	8007388 <USB_ReadInterrupts>
 8003268:	4603      	mov	r3, r0
 800326a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800326e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003272:	d120      	bne.n	80032b6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800327c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0301 	and.w	r3, r3, #1
 800328a:	2b00      	cmp	r3, #0
 800328c:	d113      	bne.n	80032b6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800328e:	2110      	movs	r1, #16
 8003290:	6938      	ldr	r0, [r7, #16]
 8003292:	f003 ff83 	bl	800719c <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003296:	6938      	ldr	r0, [r7, #16]
 8003298:	f003 ffb2 	bl	8007200 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	7a5b      	ldrb	r3, [r3, #9]
 80032a0:	2b02      	cmp	r3, #2
 80032a2:	d105      	bne.n	80032b0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2101      	movs	r1, #1
 80032aa:	4618      	mov	r0, r3
 80032ac:	f004 f9a4 	bl	80075f8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f007 f96b 	bl	800a58c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f004 f864 	bl	8007388 <USB_ReadInterrupts>
 80032c0:	4603      	mov	r3, r0
 80032c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80032c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ca:	d102      	bne.n	80032d2 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f001 fd4d 	bl	8004d6c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f004 f856 	bl	8007388 <USB_ReadInterrupts>
 80032dc:	4603      	mov	r3, r0
 80032de:	f003 0308 	and.w	r3, r3, #8
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d106      	bne.n	80032f4 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f007 f934 	bl	800a554 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f004 f845 	bl	8007388 <USB_ReadInterrupts>
 80032fe:	4603      	mov	r3, r0
 8003300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003304:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003308:	d139      	bne.n	800337e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4618      	mov	r0, r3
 8003310:	f004 fde0 	bl	8007ed4 <USB_HC_ReadInterrupt>
 8003314:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003316:	2300      	movs	r3, #0
 8003318:	617b      	str	r3, [r7, #20]
 800331a:	e025      	b.n	8003368 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	68ba      	ldr	r2, [r7, #8]
 8003324:	fa22 f303 	lsr.w	r3, r2, r3
 8003328:	f003 0301 	and.w	r3, r3, #1
 800332c:	2b00      	cmp	r3, #0
 800332e:	d018      	beq.n	8003362 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003342:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003346:	d106      	bne.n	8003356 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 f905 	bl	800355e <HCD_HC_IN_IRQHandler>
 8003354:	e005      	b.n	8003362 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	4619      	mov	r1, r3
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 ff67 	bl	8004230 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	3301      	adds	r3, #1
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	795b      	ldrb	r3, [r3, #5]
 800336c:	461a      	mov	r2, r3
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	4293      	cmp	r3, r2
 8003372:	d3d3      	bcc.n	800331c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800337c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4618      	mov	r0, r3
 8003384:	f004 f800 	bl	8007388 <USB_ReadInterrupts>
 8003388:	4603      	mov	r3, r0
 800338a:	f003 0310 	and.w	r3, r3, #16
 800338e:	2b10      	cmp	r3, #16
 8003390:	d101      	bne.n	8003396 <HAL_HCD_IRQHandler+0x1ea>
 8003392:	2301      	movs	r3, #1
 8003394:	e000      	b.n	8003398 <HAL_HCD_IRQHandler+0x1ec>
 8003396:	2300      	movs	r3, #0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d014      	beq.n	80033c6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699a      	ldr	r2, [r3, #24]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0210 	bic.w	r2, r2, #16
 80033aa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f001 fbfe 	bl	8004bae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699a      	ldr	r2, [r3, #24]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0210 	orr.w	r2, r2, #16
 80033c0:	619a      	str	r2, [r3, #24]
 80033c2:	e000      	b.n	80033c6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80033c4:	bf00      	nop
    }
  }
}
 80033c6:	3718      	adds	r7, #24
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}

080033cc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_HCD_Start+0x16>
 80033de:	2302      	movs	r3, #2
 80033e0:	e013      	b.n	800340a <HAL_HCD_Start+0x3e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2101      	movs	r1, #1
 80033f0:	4618      	mov	r0, r3
 80033f2:	f004 f968 	bl	80076c6 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f003 fe60 	bl	80070c0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8003420:	2b01      	cmp	r3, #1
 8003422:	d101      	bne.n	8003428 <HAL_HCD_Stop+0x16>
 8003424:	2302      	movs	r3, #2
 8003426:	e00d      	b.n	8003444 <HAL_HCD_Stop+0x32>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2201      	movs	r2, #1
 800342c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f004 febb 	bl	80081b0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f004 f90a 	bl	8007672 <USB_ResetPort>
 800345e:	4603      	mov	r3, r0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003468:	b480      	push	{r7}
 800346a:	b083      	sub	sp, #12
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	460b      	mov	r3, r1
 8003472:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	334c      	adds	r3, #76	@ 0x4c
 8003484:	781b      	ldrb	r3, [r3, #0]
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	4613      	mov	r3, r2
 80034a4:	011b      	lsls	r3, r3, #4
 80034a6:	1a9b      	subs	r3, r3, r2
 80034a8:	009b      	lsls	r3, r3, #2
 80034aa:	440b      	add	r3, r1
 80034ac:	3338      	adds	r3, #56	@ 0x38
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f004 f94c 	bl	8007766 <USB_GetCurrentFrame>
 80034ce:	4603      	mov	r3, r0
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3708      	adds	r7, #8
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f004 f927 	bl	8007738 <USB_GetHostSpeed>
 80034ea:	4603      	mov	r3, r0
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3708      	adds	r7, #8
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}

080034f4 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b083      	sub	sp, #12
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
 80034fc:	460b      	mov	r3, r1
 80034fe:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8003500:	78fa      	ldrb	r2, [r7, #3]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	4613      	mov	r3, r2
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	1a9b      	subs	r3, r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	331a      	adds	r3, #26
 8003510:	2200      	movs	r2, #0
 8003512:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8003514:	78fa      	ldrb	r2, [r7, #3]
 8003516:	6879      	ldr	r1, [r7, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	011b      	lsls	r3, r3, #4
 800351c:	1a9b      	subs	r3, r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	440b      	add	r3, r1
 8003522:	331b      	adds	r3, #27
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	6879      	ldr	r1, [r7, #4]
 800352c:	4613      	mov	r3, r2
 800352e:	011b      	lsls	r3, r3, #4
 8003530:	1a9b      	subs	r3, r3, r2
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	440b      	add	r3, r1
 8003536:	3325      	adds	r3, #37	@ 0x25
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800353c:	78fa      	ldrb	r2, [r7, #3]
 800353e:	6879      	ldr	r1, [r7, #4]
 8003540:	4613      	mov	r3, r2
 8003542:	011b      	lsls	r3, r3, #4
 8003544:	1a9b      	subs	r3, r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	3324      	adds	r3, #36	@ 0x24
 800354c:	2200      	movs	r2, #0
 800354e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	370c      	adds	r7, #12
 8003556:	46bd      	mov	sp, r7
 8003558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355c:	4770      	bx	lr

0800355e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800355e:	b580      	push	{r7, lr}
 8003560:	b086      	sub	sp, #24
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
 8003566:	460b      	mov	r3, r1
 8003568:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f003 ff16 	bl	80073ae <USB_ReadChInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b04      	cmp	r3, #4
 800358a:	d11a      	bne.n	80035c2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	461a      	mov	r2, r3
 800359a:	2304      	movs	r3, #4
 800359c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800359e:	78fa      	ldrb	r2, [r7, #3]
 80035a0:	6879      	ldr	r1, [r7, #4]
 80035a2:	4613      	mov	r3, r2
 80035a4:	011b      	lsls	r3, r3, #4
 80035a6:	1a9b      	subs	r3, r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	440b      	add	r3, r1
 80035ac:	334d      	adds	r3, #77	@ 0x4d
 80035ae:	2207      	movs	r2, #7
 80035b0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	78fa      	ldrb	r2, [r7, #3]
 80035b8:	4611      	mov	r1, r2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f004 fc9b 	bl	8007ef6 <USB_HC_Halt>
 80035c0:	e09e      	b.n	8003700 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	78fa      	ldrb	r2, [r7, #3]
 80035c8:	4611      	mov	r1, r2
 80035ca:	4618      	mov	r0, r3
 80035cc:	f003 feef 	bl	80073ae <USB_ReadChInterrupts>
 80035d0:	4603      	mov	r3, r0
 80035d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035da:	d11b      	bne.n	8003614 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80035dc:	78fb      	ldrb	r3, [r7, #3]
 80035de:	015a      	lsls	r2, r3, #5
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	4413      	add	r3, r2
 80035e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035e8:	461a      	mov	r2, r3
 80035ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035ee:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	6879      	ldr	r1, [r7, #4]
 80035f4:	4613      	mov	r3, r2
 80035f6:	011b      	lsls	r3, r3, #4
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	440b      	add	r3, r1
 80035fe:	334d      	adds	r3, #77	@ 0x4d
 8003600:	2208      	movs	r2, #8
 8003602:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f004 fc72 	bl	8007ef6 <USB_HC_Halt>
 8003612:	e075      	b.n	8003700 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	78fa      	ldrb	r2, [r7, #3]
 800361a:	4611      	mov	r1, r2
 800361c:	4618      	mov	r0, r3
 800361e:	f003 fec6 	bl	80073ae <USB_ReadChInterrupts>
 8003622:	4603      	mov	r3, r0
 8003624:	f003 0308 	and.w	r3, r3, #8
 8003628:	2b08      	cmp	r3, #8
 800362a:	d11a      	bne.n	8003662 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800362c:	78fb      	ldrb	r3, [r7, #3]
 800362e:	015a      	lsls	r2, r3, #5
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	4413      	add	r3, r2
 8003634:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003638:	461a      	mov	r2, r3
 800363a:	2308      	movs	r3, #8
 800363c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800363e:	78fa      	ldrb	r2, [r7, #3]
 8003640:	6879      	ldr	r1, [r7, #4]
 8003642:	4613      	mov	r3, r2
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	1a9b      	subs	r3, r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	440b      	add	r3, r1
 800364c:	334d      	adds	r3, #77	@ 0x4d
 800364e:	2206      	movs	r2, #6
 8003650:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	78fa      	ldrb	r2, [r7, #3]
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f004 fc4b 	bl	8007ef6 <USB_HC_Halt>
 8003660:	e04e      	b.n	8003700 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	4611      	mov	r1, r2
 800366a:	4618      	mov	r0, r3
 800366c:	f003 fe9f 	bl	80073ae <USB_ReadChInterrupts>
 8003670:	4603      	mov	r3, r0
 8003672:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003676:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800367a:	d11b      	bne.n	80036b4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	015a      	lsls	r2, r3, #5
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4413      	add	r3, r2
 8003684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003688:	461a      	mov	r2, r3
 800368a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800368e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003690:	78fa      	ldrb	r2, [r7, #3]
 8003692:	6879      	ldr	r1, [r7, #4]
 8003694:	4613      	mov	r3, r2
 8003696:	011b      	lsls	r3, r3, #4
 8003698:	1a9b      	subs	r3, r3, r2
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	440b      	add	r3, r1
 800369e:	334d      	adds	r3, #77	@ 0x4d
 80036a0:	2209      	movs	r2, #9
 80036a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	78fa      	ldrb	r2, [r7, #3]
 80036aa:	4611      	mov	r1, r2
 80036ac:	4618      	mov	r0, r3
 80036ae:	f004 fc22 	bl	8007ef6 <USB_HC_Halt>
 80036b2:	e025      	b.n	8003700 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	78fa      	ldrb	r2, [r7, #3]
 80036ba:	4611      	mov	r1, r2
 80036bc:	4618      	mov	r0, r3
 80036be:	f003 fe76 	bl	80073ae <USB_ReadChInterrupts>
 80036c2:	4603      	mov	r3, r0
 80036c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c8:	2b80      	cmp	r3, #128	@ 0x80
 80036ca:	d119      	bne.n	8003700 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80036cc:	78fb      	ldrb	r3, [r7, #3]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036d8:	461a      	mov	r2, r3
 80036da:	2380      	movs	r3, #128	@ 0x80
 80036dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036de:	78fa      	ldrb	r2, [r7, #3]
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	4613      	mov	r3, r2
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	1a9b      	subs	r3, r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	334d      	adds	r3, #77	@ 0x4d
 80036ee:	2207      	movs	r2, #7
 80036f0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	78fa      	ldrb	r2, [r7, #3]
 80036f8:	4611      	mov	r1, r2
 80036fa:	4618      	mov	r0, r3
 80036fc:	f004 fbfb 	bl	8007ef6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f003 fe50 	bl	80073ae <USB_ReadChInterrupts>
 800370e:	4603      	mov	r3, r0
 8003710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003714:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003718:	d112      	bne.n	8003740 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f004 fbe7 	bl	8007ef6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	015a      	lsls	r2, r3, #5
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4413      	add	r3, r2
 8003730:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003734:	461a      	mov	r2, r3
 8003736:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800373a:	6093      	str	r3, [r2, #8]
 800373c:	f000 bd75 	b.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	78fa      	ldrb	r2, [r7, #3]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f003 fe30 	bl	80073ae <USB_ReadChInterrupts>
 800374e:	4603      	mov	r3, r0
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	f040 8128 	bne.w	80039aa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	015a      	lsls	r2, r3, #5
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	4413      	add	r3, r2
 8003762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003766:	461a      	mov	r2, r3
 8003768:	2320      	movs	r3, #32
 800376a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	331b      	adds	r3, #27
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d119      	bne.n	80037b6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003782:	78fa      	ldrb	r2, [r7, #3]
 8003784:	6879      	ldr	r1, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	011b      	lsls	r3, r3, #4
 800378a:	1a9b      	subs	r3, r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	440b      	add	r3, r1
 8003790:	331b      	adds	r3, #27
 8003792:	2200      	movs	r2, #0
 8003794:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003796:	78fb      	ldrb	r3, [r7, #3]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	4413      	add	r3, r2
 800379e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037b4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	799b      	ldrb	r3, [r3, #6]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d01b      	beq.n	80037f6 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3330      	adds	r3, #48	@ 0x30
 80037ce:	6819      	ldr	r1, [r3, #0]
 80037d0:	78fb      	ldrb	r3, [r7, #3]
 80037d2:	015a      	lsls	r2, r3, #5
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	4413      	add	r3, r2
 80037d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	1ac9      	subs	r1, r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4403      	add	r3, r0
 80037f2:	3338      	adds	r3, #56	@ 0x38
 80037f4:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	011b      	lsls	r3, r3, #4
 80037fe:	1a9b      	subs	r3, r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	440b      	add	r3, r1
 8003804:	334d      	adds	r3, #77	@ 0x4d
 8003806:	2201      	movs	r2, #1
 8003808:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800380a:	78fa      	ldrb	r2, [r7, #3]
 800380c:	6879      	ldr	r1, [r7, #4]
 800380e:	4613      	mov	r3, r2
 8003810:	011b      	lsls	r3, r3, #4
 8003812:	1a9b      	subs	r3, r3, r2
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	440b      	add	r3, r1
 8003818:	3344      	adds	r3, #68	@ 0x44
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	2301      	movs	r3, #1
 800382e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003830:	78fa      	ldrb	r2, [r7, #3]
 8003832:	6879      	ldr	r1, [r7, #4]
 8003834:	4613      	mov	r3, r2
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	1a9b      	subs	r3, r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	440b      	add	r3, r1
 800383e:	3326      	adds	r3, #38	@ 0x26
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00a      	beq.n	800385c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	3326      	adds	r3, #38	@ 0x26
 8003856:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003858:	2b02      	cmp	r3, #2
 800385a:	d110      	bne.n	800387e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	78fa      	ldrb	r2, [r7, #3]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f004 fb46 	bl	8007ef6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800386a:	78fb      	ldrb	r3, [r7, #3]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4413      	add	r3, r2
 8003872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003876:	461a      	mov	r2, r3
 8003878:	2310      	movs	r3, #16
 800387a:	6093      	str	r3, [r2, #8]
 800387c:	e03d      	b.n	80038fa <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	6879      	ldr	r1, [r7, #4]
 8003882:	4613      	mov	r3, r2
 8003884:	011b      	lsls	r3, r3, #4
 8003886:	1a9b      	subs	r3, r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	3326      	adds	r3, #38	@ 0x26
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d00a      	beq.n	80038aa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3326      	adds	r3, #38	@ 0x26
 80038a4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d127      	bne.n	80038fa <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	78fa      	ldrb	r2, [r7, #3]
 80038ba:	0151      	lsls	r1, r2, #5
 80038bc:	693a      	ldr	r2, [r7, #16]
 80038be:	440a      	add	r2, r1
 80038c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80038c8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80038ca:	78fa      	ldrb	r2, [r7, #3]
 80038cc:	6879      	ldr	r1, [r7, #4]
 80038ce:	4613      	mov	r3, r2
 80038d0:	011b      	lsls	r3, r3, #4
 80038d2:	1a9b      	subs	r3, r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	440b      	add	r3, r1
 80038d8:	334c      	adds	r3, #76	@ 0x4c
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038de:	78fa      	ldrb	r2, [r7, #3]
 80038e0:	6879      	ldr	r1, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	440b      	add	r3, r1
 80038ec:	334c      	adds	r3, #76	@ 0x4c
 80038ee:	781a      	ldrb	r2, [r3, #0]
 80038f0:	78fb      	ldrb	r3, [r7, #3]
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f006 fe57 	bl	800a5a8 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	799b      	ldrb	r3, [r3, #6]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d13b      	bne.n	800397a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8003902:	78fa      	ldrb	r2, [r7, #3]
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	4613      	mov	r3, r2
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	1a9b      	subs	r3, r3, r2
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	440b      	add	r3, r1
 8003910:	3338      	adds	r3, #56	@ 0x38
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4403      	add	r3, r0
 8003922:	3328      	adds	r3, #40	@ 0x28
 8003924:	881b      	ldrh	r3, [r3, #0]
 8003926:	440b      	add	r3, r1
 8003928:	1e59      	subs	r1, r3, #1
 800392a:	78fa      	ldrb	r2, [r7, #3]
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4613      	mov	r3, r2
 8003930:	011b      	lsls	r3, r3, #4
 8003932:	1a9b      	subs	r3, r3, r2
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4403      	add	r3, r0
 8003938:	3328      	adds	r3, #40	@ 0x28
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 8470 	beq.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800394a:	78fa      	ldrb	r2, [r7, #3]
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	4613      	mov	r3, r2
 8003950:	011b      	lsls	r3, r3, #4
 8003952:	1a9b      	subs	r3, r3, r2
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	440b      	add	r3, r1
 8003958:	333c      	adds	r3, #60	@ 0x3c
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	f083 0301 	eor.w	r3, r3, #1
 8003962:	b2d8      	uxtb	r0, r3
 8003964:	6879      	ldr	r1, [r7, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	1a9b      	subs	r3, r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	440b      	add	r3, r1
 8003970:	333c      	adds	r3, #60	@ 0x3c
 8003972:	4602      	mov	r2, r0
 8003974:	701a      	strb	r2, [r3, #0]
 8003976:	f000 bc58 	b.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800397a:	78fa      	ldrb	r2, [r7, #3]
 800397c:	6879      	ldr	r1, [r7, #4]
 800397e:	4613      	mov	r3, r2
 8003980:	011b      	lsls	r3, r3, #4
 8003982:	1a9b      	subs	r3, r3, r2
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	440b      	add	r3, r1
 8003988:	333c      	adds	r3, #60	@ 0x3c
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	78fa      	ldrb	r2, [r7, #3]
 800398e:	f083 0301 	eor.w	r3, r3, #1
 8003992:	b2d8      	uxtb	r0, r3
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	4613      	mov	r3, r2
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	1a9b      	subs	r3, r3, r2
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	440b      	add	r3, r1
 80039a0:	333c      	adds	r3, #60	@ 0x3c
 80039a2:	4602      	mov	r2, r0
 80039a4:	701a      	strb	r2, [r3, #0]
 80039a6:	f000 bc40 	b.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	78fa      	ldrb	r2, [r7, #3]
 80039b0:	4611      	mov	r1, r2
 80039b2:	4618      	mov	r0, r3
 80039b4:	f003 fcfb 	bl	80073ae <USB_ReadChInterrupts>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f003 0320 	and.w	r3, r3, #32
 80039be:	2b20      	cmp	r3, #32
 80039c0:	d131      	bne.n	8003a26 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80039c2:	78fb      	ldrb	r3, [r7, #3]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ce:	461a      	mov	r2, r3
 80039d0:	2320      	movs	r3, #32
 80039d2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80039d4:	78fa      	ldrb	r2, [r7, #3]
 80039d6:	6879      	ldr	r1, [r7, #4]
 80039d8:	4613      	mov	r3, r2
 80039da:	011b      	lsls	r3, r3, #4
 80039dc:	1a9b      	subs	r3, r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	440b      	add	r3, r1
 80039e2:	331a      	adds	r3, #26
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	f040 841f 	bne.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80039ec:	78fa      	ldrb	r2, [r7, #3]
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4613      	mov	r3, r2
 80039f2:	011b      	lsls	r3, r3, #4
 80039f4:	1a9b      	subs	r3, r3, r2
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	440b      	add	r3, r1
 80039fa:	331b      	adds	r3, #27
 80039fc:	2201      	movs	r2, #1
 80039fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	4613      	mov	r3, r2
 8003a06:	011b      	lsls	r3, r3, #4
 8003a08:	1a9b      	subs	r3, r3, r2
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	334d      	adds	r3, #77	@ 0x4d
 8003a10:	2203      	movs	r2, #3
 8003a12:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	4611      	mov	r1, r2
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f004 fa6a 	bl	8007ef6 <USB_HC_Halt>
 8003a22:	f000 bc02 	b.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	78fa      	ldrb	r2, [r7, #3]
 8003a2c:	4611      	mov	r1, r2
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f003 fcbd 	bl	80073ae <USB_ReadChInterrupts>
 8003a34:	4603      	mov	r3, r0
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	f040 8305 	bne.w	800404a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003a40:	78fb      	ldrb	r3, [r7, #3]
 8003a42:	015a      	lsls	r2, r3, #5
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4413      	add	r3, r2
 8003a48:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a4c:	461a      	mov	r2, r3
 8003a4e:	2302      	movs	r3, #2
 8003a50:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4613      	mov	r3, r2
 8003a58:	011b      	lsls	r3, r3, #4
 8003a5a:	1a9b      	subs	r3, r3, r2
 8003a5c:	009b      	lsls	r3, r3, #2
 8003a5e:	440b      	add	r3, r1
 8003a60:	334d      	adds	r3, #77	@ 0x4d
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d114      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	334d      	adds	r3, #77	@ 0x4d
 8003a78:	2202      	movs	r2, #2
 8003a7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a7c:	78fa      	ldrb	r2, [r7, #3]
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	4613      	mov	r3, r2
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	1a9b      	subs	r3, r3, r2
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	440b      	add	r3, r1
 8003a8a:	334c      	adds	r3, #76	@ 0x4c
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	701a      	strb	r2, [r3, #0]
 8003a90:	e2cc      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	334d      	adds	r3, #77	@ 0x4d
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b06      	cmp	r3, #6
 8003aa6:	d114      	bne.n	8003ad2 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	334d      	adds	r3, #77	@ 0x4d
 8003ab8:	2202      	movs	r2, #2
 8003aba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	334c      	adds	r3, #76	@ 0x4c
 8003acc:	2205      	movs	r2, #5
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	e2ac      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ad2:	78fa      	ldrb	r2, [r7, #3]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	1a9b      	subs	r3, r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	334d      	adds	r3, #77	@ 0x4d
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	2b07      	cmp	r3, #7
 8003ae6:	d00b      	beq.n	8003b00 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003ae8:	78fa      	ldrb	r2, [r7, #3]
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	4613      	mov	r3, r2
 8003aee:	011b      	lsls	r3, r3, #4
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	440b      	add	r3, r1
 8003af6:	334d      	adds	r3, #77	@ 0x4d
 8003af8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003afa:	2b09      	cmp	r3, #9
 8003afc:	f040 80a6 	bne.w	8003c4c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b00:	78fa      	ldrb	r2, [r7, #3]
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	440b      	add	r3, r1
 8003b0e:	334d      	adds	r3, #77	@ 0x4d
 8003b10:	2202      	movs	r2, #2
 8003b12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	6879      	ldr	r1, [r7, #4]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	1a9b      	subs	r3, r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	440b      	add	r3, r1
 8003b22:	3344      	adds	r3, #68	@ 0x44
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	011b      	lsls	r3, r3, #4
 8003b2e:	1a9b      	subs	r3, r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	4403      	add	r3, r0
 8003b34:	3344      	adds	r3, #68	@ 0x44
 8003b36:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	3344      	adds	r3, #68	@ 0x44
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d943      	bls.n	8003bd6 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b4e:	78fa      	ldrb	r2, [r7, #3]
 8003b50:	6879      	ldr	r1, [r7, #4]
 8003b52:	4613      	mov	r3, r2
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	1a9b      	subs	r3, r3, r2
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	440b      	add	r3, r1
 8003b5c:	3344      	adds	r3, #68	@ 0x44
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	6879      	ldr	r1, [r7, #4]
 8003b66:	4613      	mov	r3, r2
 8003b68:	011b      	lsls	r3, r3, #4
 8003b6a:	1a9b      	subs	r3, r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	331a      	adds	r3, #26
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d123      	bne.n	8003bc0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8003b78:	78fa      	ldrb	r2, [r7, #3]
 8003b7a:	6879      	ldr	r1, [r7, #4]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	011b      	lsls	r3, r3, #4
 8003b80:	1a9b      	subs	r3, r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	331b      	adds	r3, #27
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8003b8c:	78fa      	ldrb	r2, [r7, #3]
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	4613      	mov	r3, r2
 8003b92:	011b      	lsls	r3, r3, #4
 8003b94:	1a9b      	subs	r3, r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	331c      	adds	r3, #28
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	015a      	lsls	r2, r3, #5
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	4413      	add	r3, r2
 8003ba8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	78fa      	ldrb	r2, [r7, #3]
 8003bb0:	0151      	lsls	r1, r2, #5
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	440a      	add	r2, r1
 8003bb6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003bba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bbe:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003bc0:	78fa      	ldrb	r2, [r7, #3]
 8003bc2:	6879      	ldr	r1, [r7, #4]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	011b      	lsls	r3, r3, #4
 8003bc8:	1a9b      	subs	r3, r3, r2
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	440b      	add	r3, r1
 8003bce:	334c      	adds	r3, #76	@ 0x4c
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003bd4:	e229      	b.n	800402a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	6879      	ldr	r1, [r7, #4]
 8003bda:	4613      	mov	r3, r2
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	1a9b      	subs	r3, r3, r2
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	440b      	add	r3, r1
 8003be4:	334c      	adds	r3, #76	@ 0x4c
 8003be6:	2202      	movs	r2, #2
 8003be8:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3326      	adds	r3, #38	@ 0x26
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00b      	beq.n	8003c18 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	3326      	adds	r3, #38	@ 0x26
 8003c10:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	f040 8209 	bne.w	800402a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c18:	78fb      	ldrb	r3, [r7, #3]
 8003c1a:	015a      	lsls	r2, r3, #5
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003c2e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003c36:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003c38:	78fb      	ldrb	r3, [r7, #3]
 8003c3a:	015a      	lsls	r2, r3, #5
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4413      	add	r3, r2
 8003c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c44:	461a      	mov	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c4a:	e1ee      	b.n	800402a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	334d      	adds	r3, #77	@ 0x4d
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b05      	cmp	r3, #5
 8003c60:	f040 80c8 	bne.w	8003df4 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c64:	78fa      	ldrb	r2, [r7, #3]
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	011b      	lsls	r3, r3, #4
 8003c6c:	1a9b      	subs	r3, r3, r2
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	440b      	add	r3, r1
 8003c72:	334d      	adds	r3, #77	@ 0x4d
 8003c74:	2202      	movs	r2, #2
 8003c76:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003c78:	78fa      	ldrb	r2, [r7, #3]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	011b      	lsls	r3, r3, #4
 8003c80:	1a9b      	subs	r3, r3, r2
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	440b      	add	r3, r1
 8003c86:	331b      	adds	r3, #27
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	f040 81ce 	bne.w	800402c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003c90:	78fa      	ldrb	r2, [r7, #3]
 8003c92:	6879      	ldr	r1, [r7, #4]
 8003c94:	4613      	mov	r3, r2
 8003c96:	011b      	lsls	r3, r3, #4
 8003c98:	1a9b      	subs	r3, r3, r2
 8003c9a:	009b      	lsls	r3, r3, #2
 8003c9c:	440b      	add	r3, r1
 8003c9e:	3326      	adds	r3, #38	@ 0x26
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b03      	cmp	r3, #3
 8003ca4:	d16b      	bne.n	8003d7e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8003ca6:	78fa      	ldrb	r2, [r7, #3]
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	3348      	adds	r3, #72	@ 0x48
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	4613      	mov	r3, r2
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	1a9b      	subs	r3, r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4403      	add	r3, r0
 8003cc6:	3348      	adds	r3, #72	@ 0x48
 8003cc8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003cca:	78fa      	ldrb	r2, [r7, #3]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	011b      	lsls	r3, r3, #4
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	3348      	adds	r3, #72	@ 0x48
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d943      	bls.n	8003d68 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003ce0:	78fa      	ldrb	r2, [r7, #3]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	011b      	lsls	r3, r3, #4
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	3348      	adds	r3, #72	@ 0x48
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003cf4:	78fa      	ldrb	r2, [r7, #3]
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	1a9b      	subs	r3, r3, r2
 8003cfe:	009b      	lsls	r3, r3, #2
 8003d00:	440b      	add	r3, r1
 8003d02:	331b      	adds	r3, #27
 8003d04:	2200      	movs	r2, #0
 8003d06:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003d08:	78fa      	ldrb	r2, [r7, #3]
 8003d0a:	6879      	ldr	r1, [r7, #4]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	011b      	lsls	r3, r3, #4
 8003d10:	1a9b      	subs	r3, r3, r2
 8003d12:	009b      	lsls	r3, r3, #2
 8003d14:	440b      	add	r3, r1
 8003d16:	3344      	adds	r3, #68	@ 0x44
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d809      	bhi.n	8003d32 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	331c      	adds	r3, #28
 8003d2e:	2201      	movs	r2, #1
 8003d30:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	78fa      	ldrb	r2, [r7, #3]
 8003d42:	0151      	lsls	r1, r2, #5
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	440a      	add	r2, r1
 8003d48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d4c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d50:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	334c      	adds	r3, #76	@ 0x4c
 8003d62:	2204      	movs	r2, #4
 8003d64:	701a      	strb	r2, [r3, #0]
 8003d66:	e014      	b.n	8003d92 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	6879      	ldr	r1, [r7, #4]
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	009b      	lsls	r3, r3, #2
 8003d74:	440b      	add	r3, r1
 8003d76:	334c      	adds	r3, #76	@ 0x4c
 8003d78:	2202      	movs	r2, #2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	e009      	b.n	8003d92 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d7e:	78fa      	ldrb	r2, [r7, #3]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	334c      	adds	r3, #76	@ 0x4c
 8003d8e:	2202      	movs	r2, #2
 8003d90:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	3326      	adds	r3, #38	@ 0x26
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d00b      	beq.n	8003dc0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003da8:	78fa      	ldrb	r2, [r7, #3]
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	4613      	mov	r3, r2
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	1a9b      	subs	r3, r3, r2
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	440b      	add	r3, r1
 8003db6:	3326      	adds	r3, #38	@ 0x26
 8003db8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	f040 8136 	bne.w	800402c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	015a      	lsls	r2, r3, #5
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003dd6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003dde:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003de0:	78fb      	ldrb	r3, [r7, #3]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dec:	461a      	mov	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e11b      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003df4:	78fa      	ldrb	r2, [r7, #3]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	011b      	lsls	r3, r3, #4
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	334d      	adds	r3, #77	@ 0x4d
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	f040 8081 	bne.w	8003f0e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e0c:	78fa      	ldrb	r2, [r7, #3]
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	334d      	adds	r3, #77	@ 0x4d
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	331b      	adds	r3, #27
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	f040 80fa 	bne.w	800402c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e38:	78fa      	ldrb	r2, [r7, #3]
 8003e3a:	6879      	ldr	r1, [r7, #4]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	1a9b      	subs	r3, r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	334c      	adds	r3, #76	@ 0x4c
 8003e48:	2202      	movs	r2, #2
 8003e4a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8003e4c:	78fb      	ldrb	r3, [r7, #3]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	78fa      	ldrb	r2, [r7, #3]
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	693a      	ldr	r2, [r7, #16]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e6a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	78fa      	ldrb	r2, [r7, #3]
 8003e7c:	0151      	lsls	r1, r2, #5
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	440a      	add	r2, r1
 8003e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e8a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003e8c:	78fb      	ldrb	r3, [r7, #3]
 8003e8e:	015a      	lsls	r2, r3, #5
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4413      	add	r3, r2
 8003e94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	0151      	lsls	r1, r2, #5
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	440a      	add	r2, r1
 8003ea2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003ea6:	f023 0320 	bic.w	r3, r3, #32
 8003eaa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003eac:	78fa      	ldrb	r2, [r7, #3]
 8003eae:	6879      	ldr	r1, [r7, #4]
 8003eb0:	4613      	mov	r3, r2
 8003eb2:	011b      	lsls	r3, r3, #4
 8003eb4:	1a9b      	subs	r3, r3, r2
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	440b      	add	r3, r1
 8003eba:	3326      	adds	r3, #38	@ 0x26
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d00b      	beq.n	8003eda <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003ec2:	78fa      	ldrb	r2, [r7, #3]
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	4613      	mov	r3, r2
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	1a9b      	subs	r3, r3, r2
 8003ecc:	009b      	lsls	r3, r3, #2
 8003ece:	440b      	add	r3, r1
 8003ed0:	3326      	adds	r3, #38	@ 0x26
 8003ed2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	f040 80a9 	bne.w	800402c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003eda:	78fb      	ldrb	r3, [r7, #3]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ef0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ef8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f06:	461a      	mov	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	e08e      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	6879      	ldr	r1, [r7, #4]
 8003f12:	4613      	mov	r3, r2
 8003f14:	011b      	lsls	r3, r3, #4
 8003f16:	1a9b      	subs	r3, r3, r2
 8003f18:	009b      	lsls	r3, r3, #2
 8003f1a:	440b      	add	r3, r1
 8003f1c:	334d      	adds	r3, #77	@ 0x4d
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	2b04      	cmp	r3, #4
 8003f22:	d143      	bne.n	8003fac <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f24:	78fa      	ldrb	r2, [r7, #3]
 8003f26:	6879      	ldr	r1, [r7, #4]
 8003f28:	4613      	mov	r3, r2
 8003f2a:	011b      	lsls	r3, r3, #4
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	440b      	add	r3, r1
 8003f32:	334d      	adds	r3, #77	@ 0x4d
 8003f34:	2202      	movs	r2, #2
 8003f36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f38:	78fa      	ldrb	r2, [r7, #3]
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	4613      	mov	r3, r2
 8003f3e:	011b      	lsls	r3, r3, #4
 8003f40:	1a9b      	subs	r3, r3, r2
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	440b      	add	r3, r1
 8003f46:	334c      	adds	r3, #76	@ 0x4c
 8003f48:	2202      	movs	r2, #2
 8003f4a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3326      	adds	r3, #38	@ 0x26
 8003f5c:	781b      	ldrb	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00a      	beq.n	8003f78 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3326      	adds	r3, #38	@ 0x26
 8003f72:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d159      	bne.n	800402c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003f8e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f96:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f98:	78fb      	ldrb	r3, [r7, #3]
 8003f9a:	015a      	lsls	r2, r3, #5
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	4413      	add	r3, r2
 8003fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fa4:	461a      	mov	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6013      	str	r3, [r2, #0]
 8003faa:	e03f      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	334d      	adds	r3, #77	@ 0x4d
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d126      	bne.n	8004010 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003fc2:	78fa      	ldrb	r2, [r7, #3]
 8003fc4:	6879      	ldr	r1, [r7, #4]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	334d      	adds	r3, #77	@ 0x4d
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003fd6:	78fa      	ldrb	r2, [r7, #3]
 8003fd8:	6879      	ldr	r1, [r7, #4]
 8003fda:	4613      	mov	r3, r2
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	1a9b      	subs	r3, r3, r2
 8003fe0:	009b      	lsls	r3, r3, #2
 8003fe2:	440b      	add	r3, r1
 8003fe4:	3344      	adds	r3, #68	@ 0x44
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	1c59      	adds	r1, r3, #1
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	4613      	mov	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4403      	add	r3, r0
 8003ff6:	3344      	adds	r3, #68	@ 0x44
 8003ff8:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	334c      	adds	r3, #76	@ 0x4c
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
 800400e:	e00d      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	4613      	mov	r3, r2
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	1a9b      	subs	r3, r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	440b      	add	r3, r1
 800401e:	334d      	adds	r3, #77	@ 0x4d
 8004020:	781b      	ldrb	r3, [r3, #0]
 8004022:	2b02      	cmp	r3, #2
 8004024:	f000 8100 	beq.w	8004228 <HCD_HC_IN_IRQHandler+0xcca>
 8004028:	e000      	b.n	800402c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800402a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800402c:	78fa      	ldrb	r2, [r7, #3]
 800402e:	6879      	ldr	r1, [r7, #4]
 8004030:	4613      	mov	r3, r2
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	1a9b      	subs	r3, r3, r2
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	440b      	add	r3, r1
 800403a:	334c      	adds	r3, #76	@ 0x4c
 800403c:	781a      	ldrb	r2, [r3, #0]
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	4619      	mov	r1, r3
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f006 fab0 	bl	800a5a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004048:	e0ef      	b.n	800422a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	78fa      	ldrb	r2, [r7, #3]
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f003 f9ab 	bl	80073ae <USB_ReadChInterrupts>
 8004058:	4603      	mov	r3, r0
 800405a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405e:	2b40      	cmp	r3, #64	@ 0x40
 8004060:	d12f      	bne.n	80040c2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004062:	78fb      	ldrb	r3, [r7, #3]
 8004064:	015a      	lsls	r2, r3, #5
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	4413      	add	r3, r2
 800406a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800406e:	461a      	mov	r2, r3
 8004070:	2340      	movs	r3, #64	@ 0x40
 8004072:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	334d      	adds	r3, #77	@ 0x4d
 8004084:	2205      	movs	r2, #5
 8004086:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004088:	78fa      	ldrb	r2, [r7, #3]
 800408a:	6879      	ldr	r1, [r7, #4]
 800408c:	4613      	mov	r3, r2
 800408e:	011b      	lsls	r3, r3, #4
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	331a      	adds	r3, #26
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d109      	bne.n	80040b2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	3344      	adds	r3, #68	@ 0x44
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	4611      	mov	r1, r2
 80040ba:	4618      	mov	r0, r3
 80040bc:	f003 ff1b 	bl	8007ef6 <USB_HC_Halt>
 80040c0:	e0b3      	b.n	800422a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	78fa      	ldrb	r2, [r7, #3]
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f003 f96f 	bl	80073ae <USB_ReadChInterrupts>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f003 0310 	and.w	r3, r3, #16
 80040d6:	2b10      	cmp	r3, #16
 80040d8:	f040 80a7 	bne.w	800422a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80040dc:	78fa      	ldrb	r2, [r7, #3]
 80040de:	6879      	ldr	r1, [r7, #4]
 80040e0:	4613      	mov	r3, r2
 80040e2:	011b      	lsls	r3, r3, #4
 80040e4:	1a9b      	subs	r3, r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	3326      	adds	r3, #38	@ 0x26
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	2b03      	cmp	r3, #3
 80040f0:	d11b      	bne.n	800412a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80040f2:	78fa      	ldrb	r2, [r7, #3]
 80040f4:	6879      	ldr	r1, [r7, #4]
 80040f6:	4613      	mov	r3, r2
 80040f8:	011b      	lsls	r3, r3, #4
 80040fa:	1a9b      	subs	r3, r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	440b      	add	r3, r1
 8004100:	3344      	adds	r3, #68	@ 0x44
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004106:	78fa      	ldrb	r2, [r7, #3]
 8004108:	6879      	ldr	r1, [r7, #4]
 800410a:	4613      	mov	r3, r2
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	1a9b      	subs	r3, r3, r2
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	440b      	add	r3, r1
 8004114:	334d      	adds	r3, #77	@ 0x4d
 8004116:	2204      	movs	r2, #4
 8004118:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	78fa      	ldrb	r2, [r7, #3]
 8004120:	4611      	mov	r1, r2
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fee7 	bl	8007ef6 <USB_HC_Halt>
 8004128:	e03f      	b.n	80041aa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800412a:	78fa      	ldrb	r2, [r7, #3]
 800412c:	6879      	ldr	r1, [r7, #4]
 800412e:	4613      	mov	r3, r2
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	1a9b      	subs	r3, r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	440b      	add	r3, r1
 8004138:	3326      	adds	r3, #38	@ 0x26
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00a      	beq.n	8004156 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004140:	78fa      	ldrb	r2, [r7, #3]
 8004142:	6879      	ldr	r1, [r7, #4]
 8004144:	4613      	mov	r3, r2
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	009b      	lsls	r3, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	3326      	adds	r3, #38	@ 0x26
 8004150:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004152:	2b02      	cmp	r3, #2
 8004154:	d129      	bne.n	80041aa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004156:	78fa      	ldrb	r2, [r7, #3]
 8004158:	6879      	ldr	r1, [r7, #4]
 800415a:	4613      	mov	r3, r2
 800415c:	011b      	lsls	r3, r3, #4
 800415e:	1a9b      	subs	r3, r3, r2
 8004160:	009b      	lsls	r3, r3, #2
 8004162:	440b      	add	r3, r1
 8004164:	3344      	adds	r3, #68	@ 0x44
 8004166:	2200      	movs	r2, #0
 8004168:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	799b      	ldrb	r3, [r3, #6]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d00a      	beq.n	8004188 <HCD_HC_IN_IRQHandler+0xc2a>
 8004172:	78fa      	ldrb	r2, [r7, #3]
 8004174:	6879      	ldr	r1, [r7, #4]
 8004176:	4613      	mov	r3, r2
 8004178:	011b      	lsls	r3, r3, #4
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	440b      	add	r3, r1
 8004180:	331b      	adds	r3, #27
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d110      	bne.n	80041aa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004188:	78fa      	ldrb	r2, [r7, #3]
 800418a:	6879      	ldr	r1, [r7, #4]
 800418c:	4613      	mov	r3, r2
 800418e:	011b      	lsls	r3, r3, #4
 8004190:	1a9b      	subs	r3, r3, r2
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	440b      	add	r3, r1
 8004196:	334d      	adds	r3, #77	@ 0x4d
 8004198:	2204      	movs	r2, #4
 800419a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	78fa      	ldrb	r2, [r7, #3]
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f003 fea6 	bl	8007ef6 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80041aa:	78fa      	ldrb	r2, [r7, #3]
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	4613      	mov	r3, r2
 80041b0:	011b      	lsls	r3, r3, #4
 80041b2:	1a9b      	subs	r3, r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	440b      	add	r3, r1
 80041b8:	331b      	adds	r3, #27
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d129      	bne.n	8004214 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80041c0:	78fa      	ldrb	r2, [r7, #3]
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	4613      	mov	r3, r2
 80041c6:	011b      	lsls	r3, r3, #4
 80041c8:	1a9b      	subs	r3, r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	331b      	adds	r3, #27
 80041d0:	2200      	movs	r2, #0
 80041d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80041d4:	78fb      	ldrb	r3, [r7, #3]
 80041d6:	015a      	lsls	r2, r3, #5
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	4413      	add	r3, r2
 80041dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	0151      	lsls	r1, r2, #5
 80041e6:	693a      	ldr	r2, [r7, #16]
 80041e8:	440a      	add	r2, r1
 80041ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80041ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041f2:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80041f4:	78fb      	ldrb	r3, [r7, #3]
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	78fa      	ldrb	r2, [r7, #3]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	440a      	add	r2, r1
 800420a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800420e:	f043 0320 	orr.w	r3, r3, #32
 8004212:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	4413      	add	r3, r2
 800421c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004220:	461a      	mov	r2, r3
 8004222:	2310      	movs	r3, #16
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	e000      	b.n	800422a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004228:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	4611      	mov	r1, r2
 800424e:	4618      	mov	r0, r3
 8004250:	f003 f8ad 	bl	80073ae <USB_ReadChInterrupts>
 8004254:	4603      	mov	r3, r0
 8004256:	f003 0304 	and.w	r3, r3, #4
 800425a:	2b04      	cmp	r3, #4
 800425c:	d11b      	bne.n	8004296 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	4413      	add	r3, r2
 8004266:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800426a:	461a      	mov	r2, r3
 800426c:	2304      	movs	r3, #4
 800426e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004270:	78fa      	ldrb	r2, [r7, #3]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	4613      	mov	r3, r2
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	009b      	lsls	r3, r3, #2
 800427c:	440b      	add	r3, r1
 800427e:	334d      	adds	r3, #77	@ 0x4d
 8004280:	2207      	movs	r2, #7
 8004282:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	78fa      	ldrb	r2, [r7, #3]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f003 fe32 	bl	8007ef6 <USB_HC_Halt>
 8004292:	f000 bc89 	b.w	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 f885 	bl	80073ae <USB_ReadChInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b20      	cmp	r3, #32
 80042ac:	f040 8082 	bne.w	80043b4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042bc:	461a      	mov	r2, r3
 80042be:	2320      	movs	r3, #32
 80042c0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80042c2:	78fa      	ldrb	r2, [r7, #3]
 80042c4:	6879      	ldr	r1, [r7, #4]
 80042c6:	4613      	mov	r3, r2
 80042c8:	011b      	lsls	r3, r3, #4
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	440b      	add	r3, r1
 80042d0:	3319      	adds	r3, #25
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d124      	bne.n	8004322 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80042d8:	78fa      	ldrb	r2, [r7, #3]
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	4613      	mov	r3, r2
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	440b      	add	r3, r1
 80042e6:	3319      	adds	r3, #25
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80042ec:	78fa      	ldrb	r2, [r7, #3]
 80042ee:	6879      	ldr	r1, [r7, #4]
 80042f0:	4613      	mov	r3, r2
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	1a9b      	subs	r3, r3, r2
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	440b      	add	r3, r1
 80042fa:	334c      	adds	r3, #76	@ 0x4c
 80042fc:	2202      	movs	r2, #2
 80042fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004300:	78fa      	ldrb	r2, [r7, #3]
 8004302:	6879      	ldr	r1, [r7, #4]
 8004304:	4613      	mov	r3, r2
 8004306:	011b      	lsls	r3, r3, #4
 8004308:	1a9b      	subs	r3, r3, r2
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	440b      	add	r3, r1
 800430e:	334d      	adds	r3, #77	@ 0x4d
 8004310:	2203      	movs	r2, #3
 8004312:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	78fa      	ldrb	r2, [r7, #3]
 800431a:	4611      	mov	r1, r2
 800431c:	4618      	mov	r0, r3
 800431e:	f003 fdea 	bl	8007ef6 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004322:	78fa      	ldrb	r2, [r7, #3]
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	4613      	mov	r3, r2
 8004328:	011b      	lsls	r3, r3, #4
 800432a:	1a9b      	subs	r3, r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	440b      	add	r3, r1
 8004330:	331a      	adds	r3, #26
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b01      	cmp	r3, #1
 8004336:	f040 8437 	bne.w	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
 800433a:	78fa      	ldrb	r2, [r7, #3]
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	4613      	mov	r3, r2
 8004340:	011b      	lsls	r3, r3, #4
 8004342:	1a9b      	subs	r3, r3, r2
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	331b      	adds	r3, #27
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	f040 842b 	bne.w	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004352:	78fa      	ldrb	r2, [r7, #3]
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	4613      	mov	r3, r2
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	1a9b      	subs	r3, r3, r2
 800435c:	009b      	lsls	r3, r3, #2
 800435e:	440b      	add	r3, r1
 8004360:	3326      	adds	r3, #38	@ 0x26
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d009      	beq.n	800437c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004368:	78fa      	ldrb	r2, [r7, #3]
 800436a:	6879      	ldr	r1, [r7, #4]
 800436c:	4613      	mov	r3, r2
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	1a9b      	subs	r3, r3, r2
 8004372:	009b      	lsls	r3, r3, #2
 8004374:	440b      	add	r3, r1
 8004376:	331b      	adds	r3, #27
 8004378:	2201      	movs	r2, #1
 800437a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800437c:	78fa      	ldrb	r2, [r7, #3]
 800437e:	6879      	ldr	r1, [r7, #4]
 8004380:	4613      	mov	r3, r2
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	1a9b      	subs	r3, r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	440b      	add	r3, r1
 800438a:	334d      	adds	r3, #77	@ 0x4d
 800438c:	2203      	movs	r2, #3
 800438e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	78fa      	ldrb	r2, [r7, #3]
 8004396:	4611      	mov	r1, r2
 8004398:	4618      	mov	r0, r3
 800439a:	f003 fdac 	bl	8007ef6 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800439e:	78fa      	ldrb	r2, [r7, #3]
 80043a0:	6879      	ldr	r1, [r7, #4]
 80043a2:	4613      	mov	r3, r2
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	1a9b      	subs	r3, r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	440b      	add	r3, r1
 80043ac:	3344      	adds	r3, #68	@ 0x44
 80043ae:	2200      	movs	r2, #0
 80043b0:	601a      	str	r2, [r3, #0]
 80043b2:	e3f9      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	78fa      	ldrb	r2, [r7, #3]
 80043ba:	4611      	mov	r1, r2
 80043bc:	4618      	mov	r0, r3
 80043be:	f002 fff6 	bl	80073ae <USB_ReadChInterrupts>
 80043c2:	4603      	mov	r3, r0
 80043c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043cc:	d111      	bne.n	80043f2 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80043ce:	78fb      	ldrb	r3, [r7, #3]
 80043d0:	015a      	lsls	r2, r3, #5
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4413      	add	r3, r2
 80043d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043da:	461a      	mov	r2, r3
 80043dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80043e0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	78fa      	ldrb	r2, [r7, #3]
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f003 fd83 	bl	8007ef6 <USB_HC_Halt>
 80043f0:	e3da      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	78fa      	ldrb	r2, [r7, #3]
 80043f8:	4611      	mov	r1, r2
 80043fa:	4618      	mov	r0, r3
 80043fc:	f002 ffd7 	bl	80073ae <USB_ReadChInterrupts>
 8004400:	4603      	mov	r3, r0
 8004402:	f003 0301 	and.w	r3, r3, #1
 8004406:	2b01      	cmp	r3, #1
 8004408:	d168      	bne.n	80044dc <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800440a:	78fa      	ldrb	r2, [r7, #3]
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	4613      	mov	r3, r2
 8004410:	011b      	lsls	r3, r3, #4
 8004412:	1a9b      	subs	r3, r3, r2
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	440b      	add	r3, r1
 8004418:	3344      	adds	r3, #68	@ 0x44
 800441a:	2200      	movs	r2, #0
 800441c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	4611      	mov	r1, r2
 8004426:	4618      	mov	r0, r3
 8004428:	f002 ffc1 	bl	80073ae <USB_ReadChInterrupts>
 800442c:	4603      	mov	r3, r0
 800442e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004432:	2b40      	cmp	r3, #64	@ 0x40
 8004434:	d112      	bne.n	800445c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8004436:	78fa      	ldrb	r2, [r7, #3]
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	4613      	mov	r3, r2
 800443c:	011b      	lsls	r3, r3, #4
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	440b      	add	r3, r1
 8004444:	3319      	adds	r3, #25
 8004446:	2201      	movs	r2, #1
 8004448:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800444a:	78fb      	ldrb	r3, [r7, #3]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	4413      	add	r3, r2
 8004452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004456:	461a      	mov	r2, r3
 8004458:	2340      	movs	r3, #64	@ 0x40
 800445a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800445c:	78fa      	ldrb	r2, [r7, #3]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	331b      	adds	r3, #27
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d019      	beq.n	80044a6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004472:	78fa      	ldrb	r2, [r7, #3]
 8004474:	6879      	ldr	r1, [r7, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	331b      	adds	r3, #27
 8004482:	2200      	movs	r2, #0
 8004484:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004486:	78fb      	ldrb	r3, [r7, #3]
 8004488:	015a      	lsls	r2, r3, #5
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	4413      	add	r3, r2
 800448e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	78fa      	ldrb	r2, [r7, #3]
 8004496:	0151      	lsls	r1, r2, #5
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	440a      	add	r2, r1
 800449c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80044a4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80044a6:	78fb      	ldrb	r3, [r7, #3]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044b2:	461a      	mov	r2, r3
 80044b4:	2301      	movs	r3, #1
 80044b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80044b8:	78fa      	ldrb	r2, [r7, #3]
 80044ba:	6879      	ldr	r1, [r7, #4]
 80044bc:	4613      	mov	r3, r2
 80044be:	011b      	lsls	r3, r3, #4
 80044c0:	1a9b      	subs	r3, r3, r2
 80044c2:	009b      	lsls	r3, r3, #2
 80044c4:	440b      	add	r3, r1
 80044c6:	334d      	adds	r3, #77	@ 0x4d
 80044c8:	2201      	movs	r2, #1
 80044ca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f003 fd0e 	bl	8007ef6 <USB_HC_Halt>
 80044da:	e365      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	78fa      	ldrb	r2, [r7, #3]
 80044e2:	4611      	mov	r1, r2
 80044e4:	4618      	mov	r0, r3
 80044e6:	f002 ff62 	bl	80073ae <USB_ReadChInterrupts>
 80044ea:	4603      	mov	r3, r0
 80044ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f0:	2b40      	cmp	r3, #64	@ 0x40
 80044f2:	d139      	bne.n	8004568 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	334d      	adds	r3, #77	@ 0x4d
 8004504:	2205      	movs	r2, #5
 8004506:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004508:	78fa      	ldrb	r2, [r7, #3]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	1a9b      	subs	r3, r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	331a      	adds	r3, #26
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d109      	bne.n	8004532 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800451e:	78fa      	ldrb	r2, [r7, #3]
 8004520:	6879      	ldr	r1, [r7, #4]
 8004522:	4613      	mov	r3, r2
 8004524:	011b      	lsls	r3, r3, #4
 8004526:	1a9b      	subs	r3, r3, r2
 8004528:	009b      	lsls	r3, r3, #2
 800452a:	440b      	add	r3, r1
 800452c:	3319      	adds	r3, #25
 800452e:	2201      	movs	r2, #1
 8004530:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8004532:	78fa      	ldrb	r2, [r7, #3]
 8004534:	6879      	ldr	r1, [r7, #4]
 8004536:	4613      	mov	r3, r2
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	1a9b      	subs	r3, r3, r2
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	440b      	add	r3, r1
 8004540:	3344      	adds	r3, #68	@ 0x44
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	78fa      	ldrb	r2, [r7, #3]
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f003 fcd1 	bl	8007ef6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	4413      	add	r3, r2
 800455c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004560:	461a      	mov	r2, r3
 8004562:	2340      	movs	r3, #64	@ 0x40
 8004564:	6093      	str	r3, [r2, #8]
 8004566:	e31f      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	4611      	mov	r1, r2
 8004570:	4618      	mov	r0, r3
 8004572:	f002 ff1c 	bl	80073ae <USB_ReadChInterrupts>
 8004576:	4603      	mov	r3, r0
 8004578:	f003 0308 	and.w	r3, r3, #8
 800457c:	2b08      	cmp	r3, #8
 800457e:	d11a      	bne.n	80045b6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8004580:	78fb      	ldrb	r3, [r7, #3]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	4413      	add	r3, r2
 8004588:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800458c:	461a      	mov	r2, r3
 800458e:	2308      	movs	r3, #8
 8004590:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004592:	78fa      	ldrb	r2, [r7, #3]
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	4613      	mov	r3, r2
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	1a9b      	subs	r3, r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	440b      	add	r3, r1
 80045a0:	334d      	adds	r3, #77	@ 0x4d
 80045a2:	2206      	movs	r2, #6
 80045a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	4611      	mov	r1, r2
 80045ae:	4618      	mov	r0, r3
 80045b0:	f003 fca1 	bl	8007ef6 <USB_HC_Halt>
 80045b4:	e2f8      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	78fa      	ldrb	r2, [r7, #3]
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f002 fef5 	bl	80073ae <USB_ReadChInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0310 	and.w	r3, r3, #16
 80045ca:	2b10      	cmp	r3, #16
 80045cc:	d144      	bne.n	8004658 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	4613      	mov	r3, r2
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	440b      	add	r3, r1
 80045dc:	3344      	adds	r3, #68	@ 0x44
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80045e2:	78fa      	ldrb	r2, [r7, #3]
 80045e4:	6879      	ldr	r1, [r7, #4]
 80045e6:	4613      	mov	r3, r2
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	1a9b      	subs	r3, r3, r2
 80045ec:	009b      	lsls	r3, r3, #2
 80045ee:	440b      	add	r3, r1
 80045f0:	334d      	adds	r3, #77	@ 0x4d
 80045f2:	2204      	movs	r2, #4
 80045f4:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80045f6:	78fa      	ldrb	r2, [r7, #3]
 80045f8:	6879      	ldr	r1, [r7, #4]
 80045fa:	4613      	mov	r3, r2
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	1a9b      	subs	r3, r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	440b      	add	r3, r1
 8004604:	3319      	adds	r3, #25
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d114      	bne.n	8004636 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800460c:	78fa      	ldrb	r2, [r7, #3]
 800460e:	6879      	ldr	r1, [r7, #4]
 8004610:	4613      	mov	r3, r2
 8004612:	011b      	lsls	r3, r3, #4
 8004614:	1a9b      	subs	r3, r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	3318      	adds	r3, #24
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8004622:	78fa      	ldrb	r2, [r7, #3]
 8004624:	6879      	ldr	r1, [r7, #4]
 8004626:	4613      	mov	r3, r2
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	1a9b      	subs	r3, r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3319      	adds	r3, #25
 8004632:	2201      	movs	r2, #1
 8004634:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	78fa      	ldrb	r2, [r7, #3]
 800463c:	4611      	mov	r1, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f003 fc59 	bl	8007ef6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004644:	78fb      	ldrb	r3, [r7, #3]
 8004646:	015a      	lsls	r2, r3, #5
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	4413      	add	r3, r2
 800464c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004650:	461a      	mov	r2, r3
 8004652:	2310      	movs	r3, #16
 8004654:	6093      	str	r3, [r2, #8]
 8004656:	e2a7      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	78fa      	ldrb	r2, [r7, #3]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f002 fea4 	bl	80073ae <USB_ReadChInterrupts>
 8004666:	4603      	mov	r3, r0
 8004668:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800466c:	2b80      	cmp	r3, #128	@ 0x80
 800466e:	f040 8083 	bne.w	8004778 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	799b      	ldrb	r3, [r3, #6]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d111      	bne.n	800469e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800467a:	78fa      	ldrb	r2, [r7, #3]
 800467c:	6879      	ldr	r1, [r7, #4]
 800467e:	4613      	mov	r3, r2
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	1a9b      	subs	r3, r3, r2
 8004684:	009b      	lsls	r3, r3, #2
 8004686:	440b      	add	r3, r1
 8004688:	334d      	adds	r3, #77	@ 0x4d
 800468a:	2207      	movs	r2, #7
 800468c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f003 fc2d 	bl	8007ef6 <USB_HC_Halt>
 800469c:	e062      	b.n	8004764 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800469e:	78fa      	ldrb	r2, [r7, #3]
 80046a0:	6879      	ldr	r1, [r7, #4]
 80046a2:	4613      	mov	r3, r2
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	1a9b      	subs	r3, r3, r2
 80046a8:	009b      	lsls	r3, r3, #2
 80046aa:	440b      	add	r3, r1
 80046ac:	3344      	adds	r3, #68	@ 0x44
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	1c59      	adds	r1, r3, #1
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	4613      	mov	r3, r2
 80046b6:	011b      	lsls	r3, r3, #4
 80046b8:	1a9b      	subs	r3, r3, r2
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4403      	add	r3, r0
 80046be:	3344      	adds	r3, #68	@ 0x44
 80046c0:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80046c2:	78fa      	ldrb	r2, [r7, #3]
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	4613      	mov	r3, r2
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	1a9b      	subs	r3, r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	440b      	add	r3, r1
 80046d0:	3344      	adds	r3, #68	@ 0x44
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d922      	bls.n	800471e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80046d8:	78fa      	ldrb	r2, [r7, #3]
 80046da:	6879      	ldr	r1, [r7, #4]
 80046dc:	4613      	mov	r3, r2
 80046de:	011b      	lsls	r3, r3, #4
 80046e0:	1a9b      	subs	r3, r3, r2
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	3344      	adds	r3, #68	@ 0x44
 80046e8:	2200      	movs	r2, #0
 80046ea:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80046ec:	78fa      	ldrb	r2, [r7, #3]
 80046ee:	6879      	ldr	r1, [r7, #4]
 80046f0:	4613      	mov	r3, r2
 80046f2:	011b      	lsls	r3, r3, #4
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	440b      	add	r3, r1
 80046fa:	334c      	adds	r3, #76	@ 0x4c
 80046fc:	2204      	movs	r2, #4
 80046fe:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004700:	78fa      	ldrb	r2, [r7, #3]
 8004702:	6879      	ldr	r1, [r7, #4]
 8004704:	4613      	mov	r3, r2
 8004706:	011b      	lsls	r3, r3, #4
 8004708:	1a9b      	subs	r3, r3, r2
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	334c      	adds	r3, #76	@ 0x4c
 8004710:	781a      	ldrb	r2, [r3, #0]
 8004712:	78fb      	ldrb	r3, [r7, #3]
 8004714:	4619      	mov	r1, r3
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f005 ff46 	bl	800a5a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 800471c:	e022      	b.n	8004764 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800471e:	78fa      	ldrb	r2, [r7, #3]
 8004720:	6879      	ldr	r1, [r7, #4]
 8004722:	4613      	mov	r3, r2
 8004724:	011b      	lsls	r3, r3, #4
 8004726:	1a9b      	subs	r3, r3, r2
 8004728:	009b      	lsls	r3, r3, #2
 800472a:	440b      	add	r3, r1
 800472c:	334c      	adds	r3, #76	@ 0x4c
 800472e:	2202      	movs	r2, #2
 8004730:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004732:	78fb      	ldrb	r3, [r7, #3]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4413      	add	r3, r2
 800473a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004748:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004750:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004752:	78fb      	ldrb	r3, [r7, #3]
 8004754:	015a      	lsls	r2, r3, #5
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	4413      	add	r3, r2
 800475a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800475e:	461a      	mov	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8004764:	78fb      	ldrb	r3, [r7, #3]
 8004766:	015a      	lsls	r2, r3, #5
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	4413      	add	r3, r2
 800476c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004770:	461a      	mov	r2, r3
 8004772:	2380      	movs	r3, #128	@ 0x80
 8004774:	6093      	str	r3, [r2, #8]
 8004776:	e217      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	78fa      	ldrb	r2, [r7, #3]
 800477e:	4611      	mov	r1, r2
 8004780:	4618      	mov	r0, r3
 8004782:	f002 fe14 	bl	80073ae <USB_ReadChInterrupts>
 8004786:	4603      	mov	r3, r0
 8004788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800478c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004790:	d11b      	bne.n	80047ca <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004792:	78fa      	ldrb	r2, [r7, #3]
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	011b      	lsls	r3, r3, #4
 800479a:	1a9b      	subs	r3, r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	334d      	adds	r3, #77	@ 0x4d
 80047a2:	2209      	movs	r2, #9
 80047a4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	78fa      	ldrb	r2, [r7, #3]
 80047ac:	4611      	mov	r1, r2
 80047ae:	4618      	mov	r0, r3
 80047b0:	f003 fba1 	bl	8007ef6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80047b4:	78fb      	ldrb	r3, [r7, #3]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047c0:	461a      	mov	r2, r3
 80047c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047c6:	6093      	str	r3, [r2, #8]
 80047c8:	e1ee      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	78fa      	ldrb	r2, [r7, #3]
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f002 fdeb 	bl	80073ae <USB_ReadChInterrupts>
 80047d8:	4603      	mov	r3, r0
 80047da:	f003 0302 	and.w	r3, r3, #2
 80047de:	2b02      	cmp	r3, #2
 80047e0:	f040 81df 	bne.w	8004ba2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80047f0:	461a      	mov	r2, r3
 80047f2:	2302      	movs	r3, #2
 80047f4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80047f6:	78fa      	ldrb	r2, [r7, #3]
 80047f8:	6879      	ldr	r1, [r7, #4]
 80047fa:	4613      	mov	r3, r2
 80047fc:	011b      	lsls	r3, r3, #4
 80047fe:	1a9b      	subs	r3, r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	440b      	add	r3, r1
 8004804:	334d      	adds	r3, #77	@ 0x4d
 8004806:	781b      	ldrb	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	f040 8093 	bne.w	8004934 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800480e:	78fa      	ldrb	r2, [r7, #3]
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	011b      	lsls	r3, r3, #4
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	334d      	adds	r3, #77	@ 0x4d
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8004822:	78fa      	ldrb	r2, [r7, #3]
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	011b      	lsls	r3, r3, #4
 800482a:	1a9b      	subs	r3, r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	334c      	adds	r3, #76	@ 0x4c
 8004832:	2201      	movs	r2, #1
 8004834:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8004836:	78fa      	ldrb	r2, [r7, #3]
 8004838:	6879      	ldr	r1, [r7, #4]
 800483a:	4613      	mov	r3, r2
 800483c:	011b      	lsls	r3, r3, #4
 800483e:	1a9b      	subs	r3, r3, r2
 8004840:	009b      	lsls	r3, r3, #2
 8004842:	440b      	add	r3, r1
 8004844:	3326      	adds	r3, #38	@ 0x26
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b02      	cmp	r3, #2
 800484a:	d00b      	beq.n	8004864 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800484c:	78fa      	ldrb	r2, [r7, #3]
 800484e:	6879      	ldr	r1, [r7, #4]
 8004850:	4613      	mov	r3, r2
 8004852:	011b      	lsls	r3, r3, #4
 8004854:	1a9b      	subs	r3, r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	440b      	add	r3, r1
 800485a:	3326      	adds	r3, #38	@ 0x26
 800485c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800485e:	2b03      	cmp	r3, #3
 8004860:	f040 8190 	bne.w	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	799b      	ldrb	r3, [r3, #6]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d115      	bne.n	8004898 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800486c:	78fa      	ldrb	r2, [r7, #3]
 800486e:	6879      	ldr	r1, [r7, #4]
 8004870:	4613      	mov	r3, r2
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	1a9b      	subs	r3, r3, r2
 8004876:	009b      	lsls	r3, r3, #2
 8004878:	440b      	add	r3, r1
 800487a:	333d      	adds	r3, #61	@ 0x3d
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	78fa      	ldrb	r2, [r7, #3]
 8004880:	f083 0301 	eor.w	r3, r3, #1
 8004884:	b2d8      	uxtb	r0, r3
 8004886:	6879      	ldr	r1, [r7, #4]
 8004888:	4613      	mov	r3, r2
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	1a9b      	subs	r3, r3, r2
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	440b      	add	r3, r1
 8004892:	333d      	adds	r3, #61	@ 0x3d
 8004894:	4602      	mov	r2, r0
 8004896:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	799b      	ldrb	r3, [r3, #6]
 800489c:	2b01      	cmp	r3, #1
 800489e:	f040 8171 	bne.w	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	6879      	ldr	r1, [r7, #4]
 80048a6:	4613      	mov	r3, r2
 80048a8:	011b      	lsls	r3, r3, #4
 80048aa:	1a9b      	subs	r3, r3, r2
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	440b      	add	r3, r1
 80048b0:	3334      	adds	r3, #52	@ 0x34
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 8165 	beq.w	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80048ba:	78fa      	ldrb	r2, [r7, #3]
 80048bc:	6879      	ldr	r1, [r7, #4]
 80048be:	4613      	mov	r3, r2
 80048c0:	011b      	lsls	r3, r3, #4
 80048c2:	1a9b      	subs	r3, r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	440b      	add	r3, r1
 80048c8:	3334      	adds	r3, #52	@ 0x34
 80048ca:	6819      	ldr	r1, [r3, #0]
 80048cc:	78fa      	ldrb	r2, [r7, #3]
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	4613      	mov	r3, r2
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	1a9b      	subs	r3, r3, r2
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4403      	add	r3, r0
 80048da:	3328      	adds	r3, #40	@ 0x28
 80048dc:	881b      	ldrh	r3, [r3, #0]
 80048de:	440b      	add	r3, r1
 80048e0:	1e59      	subs	r1, r3, #1
 80048e2:	78fa      	ldrb	r2, [r7, #3]
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4613      	mov	r3, r2
 80048e8:	011b      	lsls	r3, r3, #4
 80048ea:	1a9b      	subs	r3, r3, r2
 80048ec:	009b      	lsls	r3, r3, #2
 80048ee:	4403      	add	r3, r0
 80048f0:	3328      	adds	r3, #40	@ 0x28
 80048f2:	881b      	ldrh	r3, [r3, #0]
 80048f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80048f8:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 813f 	beq.w	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8004906:	78fa      	ldrb	r2, [r7, #3]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	333d      	adds	r3, #61	@ 0x3d
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	78fa      	ldrb	r2, [r7, #3]
 800491a:	f083 0301 	eor.w	r3, r3, #1
 800491e:	b2d8      	uxtb	r0, r3
 8004920:	6879      	ldr	r1, [r7, #4]
 8004922:	4613      	mov	r3, r2
 8004924:	011b      	lsls	r3, r3, #4
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	440b      	add	r3, r1
 800492c:	333d      	adds	r3, #61	@ 0x3d
 800492e:	4602      	mov	r2, r0
 8004930:	701a      	strb	r2, [r3, #0]
 8004932:	e127      	b.n	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8004934:	78fa      	ldrb	r2, [r7, #3]
 8004936:	6879      	ldr	r1, [r7, #4]
 8004938:	4613      	mov	r3, r2
 800493a:	011b      	lsls	r3, r3, #4
 800493c:	1a9b      	subs	r3, r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	440b      	add	r3, r1
 8004942:	334d      	adds	r3, #77	@ 0x4d
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d120      	bne.n	800498c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800494a:	78fa      	ldrb	r2, [r7, #3]
 800494c:	6879      	ldr	r1, [r7, #4]
 800494e:	4613      	mov	r3, r2
 8004950:	011b      	lsls	r3, r3, #4
 8004952:	1a9b      	subs	r3, r3, r2
 8004954:	009b      	lsls	r3, r3, #2
 8004956:	440b      	add	r3, r1
 8004958:	334d      	adds	r3, #77	@ 0x4d
 800495a:	2202      	movs	r2, #2
 800495c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800495e:	78fa      	ldrb	r2, [r7, #3]
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	1a9b      	subs	r3, r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	331b      	adds	r3, #27
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	2b01      	cmp	r3, #1
 8004972:	f040 8107 	bne.w	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004976:	78fa      	ldrb	r2, [r7, #3]
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	011b      	lsls	r3, r3, #4
 800497e:	1a9b      	subs	r3, r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	334c      	adds	r3, #76	@ 0x4c
 8004986:	2202      	movs	r2, #2
 8004988:	701a      	strb	r2, [r3, #0]
 800498a:	e0fb      	b.n	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800498c:	78fa      	ldrb	r2, [r7, #3]
 800498e:	6879      	ldr	r1, [r7, #4]
 8004990:	4613      	mov	r3, r2
 8004992:	011b      	lsls	r3, r3, #4
 8004994:	1a9b      	subs	r3, r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	440b      	add	r3, r1
 800499a:	334d      	adds	r3, #77	@ 0x4d
 800499c:	781b      	ldrb	r3, [r3, #0]
 800499e:	2b04      	cmp	r3, #4
 80049a0:	d13a      	bne.n	8004a18 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049a2:	78fa      	ldrb	r2, [r7, #3]
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	4613      	mov	r3, r2
 80049a8:	011b      	lsls	r3, r3, #4
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	009b      	lsls	r3, r3, #2
 80049ae:	440b      	add	r3, r1
 80049b0:	334d      	adds	r3, #77	@ 0x4d
 80049b2:	2202      	movs	r2, #2
 80049b4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80049b6:	78fa      	ldrb	r2, [r7, #3]
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4613      	mov	r3, r2
 80049bc:	011b      	lsls	r3, r3, #4
 80049be:	1a9b      	subs	r3, r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	440b      	add	r3, r1
 80049c4:	334c      	adds	r3, #76	@ 0x4c
 80049c6:	2202      	movs	r2, #2
 80049c8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80049ca:	78fa      	ldrb	r2, [r7, #3]
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	1a9b      	subs	r3, r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	440b      	add	r3, r1
 80049d8:	331b      	adds	r3, #27
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 80d1 	bne.w	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80049e2:	78fa      	ldrb	r2, [r7, #3]
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	1a9b      	subs	r3, r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	331b      	adds	r3, #27
 80049f2:	2200      	movs	r2, #0
 80049f4:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	015a      	lsls	r2, r3, #5
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	4413      	add	r3, r2
 80049fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	78fa      	ldrb	r2, [r7, #3]
 8004a06:	0151      	lsls	r1, r2, #5
 8004a08:	693a      	ldr	r2, [r7, #16]
 8004a0a:	440a      	add	r2, r1
 8004a0c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a14:	6053      	str	r3, [r2, #4]
 8004a16:	e0b5      	b.n	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8004a18:	78fa      	ldrb	r2, [r7, #3]
 8004a1a:	6879      	ldr	r1, [r7, #4]
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	1a9b      	subs	r3, r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	440b      	add	r3, r1
 8004a26:	334d      	adds	r3, #77	@ 0x4d
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b05      	cmp	r3, #5
 8004a2c:	d114      	bne.n	8004a58 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a2e:	78fa      	ldrb	r2, [r7, #3]
 8004a30:	6879      	ldr	r1, [r7, #4]
 8004a32:	4613      	mov	r3, r2
 8004a34:	011b      	lsls	r3, r3, #4
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	009b      	lsls	r3, r3, #2
 8004a3a:	440b      	add	r3, r1
 8004a3c:	334d      	adds	r3, #77	@ 0x4d
 8004a3e:	2202      	movs	r2, #2
 8004a40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8004a42:	78fa      	ldrb	r2, [r7, #3]
 8004a44:	6879      	ldr	r1, [r7, #4]
 8004a46:	4613      	mov	r3, r2
 8004a48:	011b      	lsls	r3, r3, #4
 8004a4a:	1a9b      	subs	r3, r3, r2
 8004a4c:	009b      	lsls	r3, r3, #2
 8004a4e:	440b      	add	r3, r1
 8004a50:	334c      	adds	r3, #76	@ 0x4c
 8004a52:	2202      	movs	r2, #2
 8004a54:	701a      	strb	r2, [r3, #0]
 8004a56:	e095      	b.n	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004a58:	78fa      	ldrb	r2, [r7, #3]
 8004a5a:	6879      	ldr	r1, [r7, #4]
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	011b      	lsls	r3, r3, #4
 8004a60:	1a9b      	subs	r3, r3, r2
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	334d      	adds	r3, #77	@ 0x4d
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	2b06      	cmp	r3, #6
 8004a6c:	d114      	bne.n	8004a98 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004a6e:	78fa      	ldrb	r2, [r7, #3]
 8004a70:	6879      	ldr	r1, [r7, #4]
 8004a72:	4613      	mov	r3, r2
 8004a74:	011b      	lsls	r3, r3, #4
 8004a76:	1a9b      	subs	r3, r3, r2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	334d      	adds	r3, #77	@ 0x4d
 8004a7e:	2202      	movs	r2, #2
 8004a80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8004a82:	78fa      	ldrb	r2, [r7, #3]
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	4613      	mov	r3, r2
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	1a9b      	subs	r3, r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	440b      	add	r3, r1
 8004a90:	334c      	adds	r3, #76	@ 0x4c
 8004a92:	2205      	movs	r2, #5
 8004a94:	701a      	strb	r2, [r3, #0]
 8004a96:	e075      	b.n	8004b84 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	011b      	lsls	r3, r3, #4
 8004aa0:	1a9b      	subs	r3, r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	334d      	adds	r3, #77	@ 0x4d
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b07      	cmp	r3, #7
 8004aac:	d00a      	beq.n	8004ac4 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8004aae:	78fa      	ldrb	r2, [r7, #3]
 8004ab0:	6879      	ldr	r1, [r7, #4]
 8004ab2:	4613      	mov	r3, r2
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	1a9b      	subs	r3, r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	440b      	add	r3, r1
 8004abc:	334d      	adds	r3, #77	@ 0x4d
 8004abe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8004ac0:	2b09      	cmp	r3, #9
 8004ac2:	d170      	bne.n	8004ba6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004ac4:	78fa      	ldrb	r2, [r7, #3]
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	011b      	lsls	r3, r3, #4
 8004acc:	1a9b      	subs	r3, r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	440b      	add	r3, r1
 8004ad2:	334d      	adds	r3, #77	@ 0x4d
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004ad8:	78fa      	ldrb	r2, [r7, #3]
 8004ada:	6879      	ldr	r1, [r7, #4]
 8004adc:	4613      	mov	r3, r2
 8004ade:	011b      	lsls	r3, r3, #4
 8004ae0:	1a9b      	subs	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	440b      	add	r3, r1
 8004ae6:	3344      	adds	r3, #68	@ 0x44
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	1c59      	adds	r1, r3, #1
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	4613      	mov	r3, r2
 8004af0:	011b      	lsls	r3, r3, #4
 8004af2:	1a9b      	subs	r3, r3, r2
 8004af4:	009b      	lsls	r3, r3, #2
 8004af6:	4403      	add	r3, r0
 8004af8:	3344      	adds	r3, #68	@ 0x44
 8004afa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004afc:	78fa      	ldrb	r2, [r7, #3]
 8004afe:	6879      	ldr	r1, [r7, #4]
 8004b00:	4613      	mov	r3, r2
 8004b02:	011b      	lsls	r3, r3, #4
 8004b04:	1a9b      	subs	r3, r3, r2
 8004b06:	009b      	lsls	r3, r3, #2
 8004b08:	440b      	add	r3, r1
 8004b0a:	3344      	adds	r3, #68	@ 0x44
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d914      	bls.n	8004b3c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004b12:	78fa      	ldrb	r2, [r7, #3]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	011b      	lsls	r3, r3, #4
 8004b1a:	1a9b      	subs	r3, r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	3344      	adds	r3, #68	@ 0x44
 8004b22:	2200      	movs	r2, #0
 8004b24:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	6879      	ldr	r1, [r7, #4]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	011b      	lsls	r3, r3, #4
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	009b      	lsls	r3, r3, #2
 8004b32:	440b      	add	r3, r1
 8004b34:	334c      	adds	r3, #76	@ 0x4c
 8004b36:	2204      	movs	r2, #4
 8004b38:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b3a:	e022      	b.n	8004b82 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b3c:	78fa      	ldrb	r2, [r7, #3]
 8004b3e:	6879      	ldr	r1, [r7, #4]
 8004b40:	4613      	mov	r3, r2
 8004b42:	011b      	lsls	r3, r3, #4
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	440b      	add	r3, r1
 8004b4a:	334c      	adds	r3, #76	@ 0x4c
 8004b4c:	2202      	movs	r2, #2
 8004b4e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b66:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b6e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b70:	78fb      	ldrb	r3, [r7, #3]
 8004b72:	015a      	lsls	r2, r3, #5
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	4413      	add	r3, r2
 8004b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004b82:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004b84:	78fa      	ldrb	r2, [r7, #3]
 8004b86:	6879      	ldr	r1, [r7, #4]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	1a9b      	subs	r3, r3, r2
 8004b8e:	009b      	lsls	r3, r3, #2
 8004b90:	440b      	add	r3, r1
 8004b92:	334c      	adds	r3, #76	@ 0x4c
 8004b94:	781a      	ldrb	r2, [r3, #0]
 8004b96:	78fb      	ldrb	r3, [r7, #3]
 8004b98:	4619      	mov	r1, r3
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f005 fd04 	bl	800a5a8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004ba0:	e002      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8004ba2:	bf00      	nop
 8004ba4:	e000      	b.n	8004ba8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8004ba6:	bf00      	nop
  }
}
 8004ba8:	3718      	adds	r7, #24
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}

08004bae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b08a      	sub	sp, #40	@ 0x28
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6a1b      	ldr	r3, [r3, #32]
 8004bc6:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	f003 030f 	and.w	r3, r3, #15
 8004bce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	0c5b      	lsrs	r3, r3, #17
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	091b      	lsrs	r3, r3, #4
 8004bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004be2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d004      	beq.n	8004bf4 <HCD_RXQLVL_IRQHandler+0x46>
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	2b05      	cmp	r3, #5
 8004bee:	f000 80b6 	beq.w	8004d5e <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004bf2:	e0b7      	b.n	8004d64 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 80b3 	beq.w	8004d62 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004bfc:	6879      	ldr	r1, [r7, #4]
 8004bfe:	69ba      	ldr	r2, [r7, #24]
 8004c00:	4613      	mov	r3, r2
 8004c02:	011b      	lsls	r3, r3, #4
 8004c04:	1a9b      	subs	r3, r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	440b      	add	r3, r1
 8004c0a:	332c      	adds	r3, #44	@ 0x2c
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a7 	beq.w	8004d62 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004c14:	6879      	ldr	r1, [r7, #4]
 8004c16:	69ba      	ldr	r2, [r7, #24]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	011b      	lsls	r3, r3, #4
 8004c1c:	1a9b      	subs	r3, r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	440b      	add	r3, r1
 8004c22:	3338      	adds	r3, #56	@ 0x38
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	18d1      	adds	r1, r2, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	69ba      	ldr	r2, [r7, #24]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	011b      	lsls	r3, r3, #4
 8004c32:	1a9b      	subs	r3, r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	4403      	add	r3, r0
 8004c38:	3334      	adds	r3, #52	@ 0x34
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4299      	cmp	r1, r3
 8004c3e:	f200 8083 	bhi.w	8004d48 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6818      	ldr	r0, [r3, #0]
 8004c46:	6879      	ldr	r1, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	011b      	lsls	r3, r3, #4
 8004c4e:	1a9b      	subs	r3, r3, r2
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	332c      	adds	r3, #44	@ 0x2c
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	693a      	ldr	r2, [r7, #16]
 8004c5a:	b292      	uxth	r2, r2
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	f002 fb3b 	bl	80072d8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8004c62:	6879      	ldr	r1, [r7, #4]
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4613      	mov	r3, r2
 8004c68:	011b      	lsls	r3, r3, #4
 8004c6a:	1a9b      	subs	r3, r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	440b      	add	r3, r1
 8004c70:	332c      	adds	r3, #44	@ 0x2c
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	18d1      	adds	r1, r2, r3
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	011b      	lsls	r3, r3, #4
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	4403      	add	r3, r0
 8004c86:	332c      	adds	r3, #44	@ 0x2c
 8004c88:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004c8a:	6879      	ldr	r1, [r7, #4]
 8004c8c:	69ba      	ldr	r2, [r7, #24]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	011b      	lsls	r3, r3, #4
 8004c92:	1a9b      	subs	r3, r3, r2
 8004c94:	009b      	lsls	r3, r3, #2
 8004c96:	440b      	add	r3, r1
 8004c98:	3338      	adds	r3, #56	@ 0x38
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	18d1      	adds	r1, r2, r3
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	69ba      	ldr	r2, [r7, #24]
 8004ca4:	4613      	mov	r3, r2
 8004ca6:	011b      	lsls	r3, r3, #4
 8004ca8:	1a9b      	subs	r3, r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4403      	add	r3, r0
 8004cae:	3338      	adds	r3, #56	@ 0x38
 8004cb0:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	015a      	lsls	r2, r3, #5
 8004cb6:	6a3b      	ldr	r3, [r7, #32]
 8004cb8:	4413      	add	r3, r2
 8004cba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	0cdb      	lsrs	r3, r3, #19
 8004cc2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004cc6:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004cc8:	6879      	ldr	r1, [r7, #4]
 8004cca:	69ba      	ldr	r2, [r7, #24]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	1a9b      	subs	r3, r3, r2
 8004cd2:	009b      	lsls	r3, r3, #2
 8004cd4:	440b      	add	r3, r1
 8004cd6:	3328      	adds	r3, #40	@ 0x28
 8004cd8:	881b      	ldrh	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d13f      	bne.n	8004d62 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d03c      	beq.n	8004d62 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	6a3b      	ldr	r3, [r7, #32]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004cfe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004d06:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d14:	461a      	mov	r2, r3
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8004d1a:	6879      	ldr	r1, [r7, #4]
 8004d1c:	69ba      	ldr	r2, [r7, #24]
 8004d1e:	4613      	mov	r3, r2
 8004d20:	011b      	lsls	r3, r3, #4
 8004d22:	1a9b      	subs	r3, r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	333c      	adds	r3, #60	@ 0x3c
 8004d2a:	781b      	ldrb	r3, [r3, #0]
 8004d2c:	f083 0301 	eor.w	r3, r3, #1
 8004d30:	b2d8      	uxtb	r0, r3
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	333c      	adds	r3, #60	@ 0x3c
 8004d42:	4602      	mov	r2, r0
 8004d44:	701a      	strb	r2, [r3, #0]
      break;
 8004d46:	e00c      	b.n	8004d62 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004d48:	6879      	ldr	r1, [r7, #4]
 8004d4a:	69ba      	ldr	r2, [r7, #24]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	334c      	adds	r3, #76	@ 0x4c
 8004d58:	2204      	movs	r2, #4
 8004d5a:	701a      	strb	r2, [r3, #0]
      break;
 8004d5c:	e001      	b.n	8004d62 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8004d62:	bf00      	nop
  }
}
 8004d64:	bf00      	nop
 8004d66:	3728      	adds	r7, #40	@ 0x28
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}

08004d6c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b086      	sub	sp, #24
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004d98:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	f003 0302 	and.w	r3, r3, #2
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d10b      	bne.n	8004dbc <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d102      	bne.n	8004db4 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f005 fbde 	bl	800a570 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f043 0302 	orr.w	r3, r3, #2
 8004dba:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0308 	and.w	r3, r3, #8
 8004dc2:	2b08      	cmp	r3, #8
 8004dc4:	d132      	bne.n	8004e2c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	f043 0308 	orr.w	r3, r3, #8
 8004dcc:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b04      	cmp	r3, #4
 8004dd6:	d126      	bne.n	8004e26 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	7a5b      	ldrb	r3, [r3, #9]
 8004ddc:	2b02      	cmp	r3, #2
 8004dde:	d113      	bne.n	8004e08 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004de6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004dea:	d106      	bne.n	8004dfa <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	2102      	movs	r1, #2
 8004df2:	4618      	mov	r0, r3
 8004df4:	f002 fc00 	bl	80075f8 <USB_InitFSLSPClkSel>
 8004df8:	e011      	b.n	8004e1e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4618      	mov	r0, r3
 8004e02:	f002 fbf9 	bl	80075f8 <USB_InitFSLSPClkSel>
 8004e06:	e00a      	b.n	8004e1e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	79db      	ldrb	r3, [r3, #7]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d106      	bne.n	8004e1e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004e16:	461a      	mov	r2, r3
 8004e18:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004e1c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f005 fbd0 	bl	800a5c4 <HAL_HCD_PortEnabled_Callback>
 8004e24:	e002      	b.n	8004e2c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f005 fbda 	bl	800a5e0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f003 0320 	and.w	r3, r3, #32
 8004e32:	2b20      	cmp	r3, #32
 8004e34:	d103      	bne.n	8004e3e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	f043 0320 	orr.w	r3, r3, #32
 8004e3c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004e44:	461a      	mov	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	6013      	str	r3, [r2, #0]
}
 8004e4a:	bf00      	nop
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
	...

08004e54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d101      	bne.n	8004e66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e12b      	b.n	80050be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d106      	bne.n	8004e80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7fd f8e0 	bl	8002040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2224      	movs	r2, #36	@ 0x24
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ea6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004eb6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004eb8:	f001 fa20 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 8004ebc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	4a81      	ldr	r2, [pc, #516]	@ (80050c8 <HAL_I2C_Init+0x274>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d807      	bhi.n	8004ed8 <HAL_I2C_Init+0x84>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	4a80      	ldr	r2, [pc, #512]	@ (80050cc <HAL_I2C_Init+0x278>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	bf94      	ite	ls
 8004ed0:	2301      	movls	r3, #1
 8004ed2:	2300      	movhi	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	e006      	b.n	8004ee6 <HAL_I2C_Init+0x92>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a7d      	ldr	r2, [pc, #500]	@ (80050d0 <HAL_I2C_Init+0x27c>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	bf94      	ite	ls
 8004ee0:	2301      	movls	r3, #1
 8004ee2:	2300      	movhi	r3, #0
 8004ee4:	b2db      	uxtb	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d001      	beq.n	8004eee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e0e7      	b.n	80050be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4a78      	ldr	r2, [pc, #480]	@ (80050d4 <HAL_I2C_Init+0x280>)
 8004ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ef6:	0c9b      	lsrs	r3, r3, #18
 8004ef8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	430a      	orrs	r2, r1
 8004f0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4a6a      	ldr	r2, [pc, #424]	@ (80050c8 <HAL_I2C_Init+0x274>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d802      	bhi.n	8004f28 <HAL_I2C_Init+0xd4>
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	3301      	adds	r3, #1
 8004f26:	e009      	b.n	8004f3c <HAL_I2C_Init+0xe8>
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004f2e:	fb02 f303 	mul.w	r3, r2, r3
 8004f32:	4a69      	ldr	r2, [pc, #420]	@ (80050d8 <HAL_I2C_Init+0x284>)
 8004f34:	fba2 2303 	umull	r2, r3, r2, r3
 8004f38:	099b      	lsrs	r3, r3, #6
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	687a      	ldr	r2, [r7, #4]
 8004f3e:	6812      	ldr	r2, [r2, #0]
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f4e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	495c      	ldr	r1, [pc, #368]	@ (80050c8 <HAL_I2C_Init+0x274>)
 8004f58:	428b      	cmp	r3, r1
 8004f5a:	d819      	bhi.n	8004f90 <HAL_I2C_Init+0x13c>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	1e59      	subs	r1, r3, #1
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	685b      	ldr	r3, [r3, #4]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f6a:	1c59      	adds	r1, r3, #1
 8004f6c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f70:	400b      	ands	r3, r1
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d00a      	beq.n	8004f8c <HAL_I2C_Init+0x138>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	1e59      	subs	r1, r3, #1
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f84:	3301      	adds	r3, #1
 8004f86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f8a:	e051      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004f8c:	2304      	movs	r3, #4
 8004f8e:	e04f      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689b      	ldr	r3, [r3, #8]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d111      	bne.n	8004fbc <HAL_I2C_Init+0x168>
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	1e58      	subs	r0, r3, #1
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6859      	ldr	r1, [r3, #4]
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	005b      	lsls	r3, r3, #1
 8004fa4:	440b      	add	r3, r1
 8004fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004faa:	3301      	adds	r3, #1
 8004fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	e012      	b.n	8004fe2 <HAL_I2C_Init+0x18e>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	1e58      	subs	r0, r3, #1
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6859      	ldr	r1, [r3, #4]
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	440b      	add	r3, r1
 8004fca:	0099      	lsls	r1, r3, #2
 8004fcc:	440b      	add	r3, r1
 8004fce:	fbb0 f3f3 	udiv	r3, r0, r3
 8004fd2:	3301      	adds	r3, #1
 8004fd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d001      	beq.n	8004fea <HAL_I2C_Init+0x196>
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	e022      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10e      	bne.n	8005010 <HAL_I2C_Init+0x1bc>
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	1e58      	subs	r0, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6859      	ldr	r1, [r3, #4]
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	005b      	lsls	r3, r3, #1
 8004ffe:	440b      	add	r3, r1
 8005000:	fbb0 f3f3 	udiv	r3, r0, r3
 8005004:	3301      	adds	r3, #1
 8005006:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800500a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800500e:	e00f      	b.n	8005030 <HAL_I2C_Init+0x1dc>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	1e58      	subs	r0, r3, #1
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6859      	ldr	r1, [r3, #4]
 8005018:	460b      	mov	r3, r1
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	0099      	lsls	r1, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	fbb0 f3f3 	udiv	r3, r0, r3
 8005026:	3301      	adds	r3, #1
 8005028:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800502c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005030:	6879      	ldr	r1, [r7, #4]
 8005032:	6809      	ldr	r1, [r1, #0]
 8005034:	4313      	orrs	r3, r2
 8005036:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	69da      	ldr	r2, [r3, #28]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	431a      	orrs	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800505e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005062:	687a      	ldr	r2, [r7, #4]
 8005064:	6911      	ldr	r1, [r2, #16]
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68d2      	ldr	r2, [r2, #12]
 800506a:	4311      	orrs	r1, r2
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	6812      	ldr	r2, [r2, #0]
 8005070:	430b      	orrs	r3, r1
 8005072:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695a      	ldr	r2, [r3, #20]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681a      	ldr	r2, [r3, #0]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2220      	movs	r2, #32
 80050aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	000186a0 	.word	0x000186a0
 80050cc:	001e847f 	.word	0x001e847f
 80050d0:	003d08ff 	.word	0x003d08ff
 80050d4:	431bde83 	.word	0x431bde83
 80050d8:	10624dd3 	.word	0x10624dd3

080050dc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e128      	b.n	8005340 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d109      	bne.n	800510e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a90      	ldr	r2, [pc, #576]	@ (8005348 <HAL_I2S_Init+0x26c>)
 8005106:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fc ffe1 	bl	80020d0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	69db      	ldr	r3, [r3, #28]
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8005124:	f023 030f 	bic.w	r3, r3, #15
 8005128:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	2202      	movs	r2, #2
 8005130:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	2b02      	cmp	r3, #2
 8005138:	d060      	beq.n	80051fc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d102      	bne.n	8005148 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8005142:	2310      	movs	r3, #16
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e001      	b.n	800514c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8005148:	2320      	movs	r3, #32
 800514a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	2b20      	cmp	r3, #32
 8005152:	d802      	bhi.n	800515a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	005b      	lsls	r3, r3, #1
 8005158:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800515a:	2001      	movs	r0, #1
 800515c:	f001 f9d8 	bl	8006510 <HAL_RCCEx_GetPeriphCLKFreq>
 8005160:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800516a:	d125      	bne.n	80051b8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d010      	beq.n	8005196 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	fbb2 f2f3 	udiv	r2, r2, r3
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	005b      	lsls	r3, r3, #1
 8005186:	461a      	mov	r2, r3
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	695b      	ldr	r3, [r3, #20]
 800518c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005190:	3305      	adds	r3, #5
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	e01f      	b.n	80051d6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	00db      	lsls	r3, r3, #3
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	fbb2 f2f3 	udiv	r2, r2, r3
 80051a0:	4613      	mov	r3, r2
 80051a2:	009b      	lsls	r3, r3, #2
 80051a4:	4413      	add	r3, r2
 80051a6:	005b      	lsls	r3, r3, #1
 80051a8:	461a      	mov	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b2:	3305      	adds	r3, #5
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	e00e      	b.n	80051d6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	461a      	mov	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d2:	3305      	adds	r3, #5
 80051d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80051d6:	693b      	ldr	r3, [r7, #16]
 80051d8:	4a5c      	ldr	r2, [pc, #368]	@ (800534c <HAL_I2S_Init+0x270>)
 80051da:	fba2 2303 	umull	r2, r3, r2, r3
 80051de:	08db      	lsrs	r3, r3, #3
 80051e0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80051ea:	693a      	ldr	r2, [r7, #16]
 80051ec:	69bb      	ldr	r3, [r7, #24]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	085b      	lsrs	r3, r3, #1
 80051f2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	021b      	lsls	r3, r3, #8
 80051f8:	61bb      	str	r3, [r7, #24]
 80051fa:	e003      	b.n	8005204 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80051fc:	2302      	movs	r3, #2
 80051fe:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8005200:	2300      	movs	r3, #0
 8005202:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005204:	69fb      	ldr	r3, [r7, #28]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d902      	bls.n	8005210 <HAL_I2S_Init+0x134>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	2bff      	cmp	r3, #255	@ 0xff
 800520e:	d907      	bls.n	8005220 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005214:	f043 0210 	orr.w	r2, r3, #16
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e08f      	b.n	8005340 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	ea42 0103 	orr.w	r1, r2, r3
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	430a      	orrs	r2, r1
 8005232:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800523e:	f023 030f 	bic.w	r3, r3, #15
 8005242:	687a      	ldr	r2, [r7, #4]
 8005244:	6851      	ldr	r1, [r2, #4]
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	4311      	orrs	r1, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	68d2      	ldr	r2, [r2, #12]
 8005250:	4311      	orrs	r1, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6992      	ldr	r2, [r2, #24]
 8005256:	430a      	orrs	r2, r1
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005262:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6a1b      	ldr	r3, [r3, #32]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d161      	bne.n	8005330 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4a38      	ldr	r2, [pc, #224]	@ (8005350 <HAL_I2S_Init+0x274>)
 8005270:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a37      	ldr	r2, [pc, #220]	@ (8005354 <HAL_I2S_Init+0x278>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d101      	bne.n	8005280 <HAL_I2S_Init+0x1a4>
 800527c:	4b36      	ldr	r3, [pc, #216]	@ (8005358 <HAL_I2S_Init+0x27c>)
 800527e:	e001      	b.n	8005284 <HAL_I2S_Init+0x1a8>
 8005280:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	6812      	ldr	r2, [r2, #0]
 800528a:	4932      	ldr	r1, [pc, #200]	@ (8005354 <HAL_I2S_Init+0x278>)
 800528c:	428a      	cmp	r2, r1
 800528e:	d101      	bne.n	8005294 <HAL_I2S_Init+0x1b8>
 8005290:	4a31      	ldr	r2, [pc, #196]	@ (8005358 <HAL_I2S_Init+0x27c>)
 8005292:	e001      	b.n	8005298 <HAL_I2S_Init+0x1bc>
 8005294:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005298:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800529c:	f023 030f 	bic.w	r3, r3, #15
 80052a0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a2b      	ldr	r2, [pc, #172]	@ (8005354 <HAL_I2S_Init+0x278>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d101      	bne.n	80052b0 <HAL_I2S_Init+0x1d4>
 80052ac:	4b2a      	ldr	r3, [pc, #168]	@ (8005358 <HAL_I2S_Init+0x27c>)
 80052ae:	e001      	b.n	80052b4 <HAL_I2S_Init+0x1d8>
 80052b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052b4:	2202      	movs	r2, #2
 80052b6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a25      	ldr	r2, [pc, #148]	@ (8005354 <HAL_I2S_Init+0x278>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d101      	bne.n	80052c6 <HAL_I2S_Init+0x1ea>
 80052c2:	4b25      	ldr	r3, [pc, #148]	@ (8005358 <HAL_I2S_Init+0x27c>)
 80052c4:	e001      	b.n	80052ca <HAL_I2S_Init+0x1ee>
 80052c6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80052ca:	69db      	ldr	r3, [r3, #28]
 80052cc:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052d6:	d003      	beq.n	80052e0 <HAL_I2S_Init+0x204>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d103      	bne.n	80052e8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80052e0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	e001      	b.n	80052ec <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80052e8:	2300      	movs	r3, #0
 80052ea:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8005300:	4313      	orrs	r3, r2
 8005302:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800530a:	4313      	orrs	r3, r2
 800530c:	b29a      	uxth	r2, r3
 800530e:	897b      	ldrh	r3, [r7, #10]
 8005310:	4313      	orrs	r3, r2
 8005312:	b29b      	uxth	r3, r3
 8005314:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005318:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a0d      	ldr	r2, [pc, #52]	@ (8005354 <HAL_I2S_Init+0x278>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d101      	bne.n	8005328 <HAL_I2S_Init+0x24c>
 8005324:	4b0c      	ldr	r3, [pc, #48]	@ (8005358 <HAL_I2S_Init+0x27c>)
 8005326:	e001      	b.n	800532c <HAL_I2S_Init+0x250>
 8005328:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800532c:	897a      	ldrh	r2, [r7, #10]
 800532e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2200      	movs	r2, #0
 8005334:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3720      	adds	r7, #32
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	08005453 	.word	0x08005453
 800534c:	cccccccd 	.word	0xcccccccd
 8005350:	08005569 	.word	0x08005569
 8005354:	40003800 	.word	0x40003800
 8005358:	40003400 	.word	0x40003400

0800535c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a4:	881a      	ldrh	r2, [r3, #0]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b0:	1c9a      	adds	r2, r3, #2
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ba:	b29b      	uxth	r3, r3
 80053bc:	3b01      	subs	r3, #1
 80053be:	b29a      	uxth	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10e      	bne.n	80053ec <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80053dc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7ff ffb8 	bl	800535c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80053ec:	bf00      	nop
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b082      	sub	sp, #8
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005406:	b292      	uxth	r2, r2
 8005408:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800540e:	1c9a      	adds	r2, r3, #2
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005418:	b29b      	uxth	r3, r3
 800541a:	3b01      	subs	r3, #1
 800541c:	b29a      	uxth	r2, r3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005426:	b29b      	uxth	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10e      	bne.n	800544a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800543a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff ff93 	bl	8005370 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800544a:	bf00      	nop
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b086      	sub	sp, #24
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005468:	b2db      	uxtb	r3, r3
 800546a:	2b04      	cmp	r3, #4
 800546c:	d13a      	bne.n	80054e4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f003 0301 	and.w	r3, r3, #1
 8005474:	2b01      	cmp	r3, #1
 8005476:	d109      	bne.n	800548c <I2S_IRQHandler+0x3a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005482:	2b40      	cmp	r3, #64	@ 0x40
 8005484:	d102      	bne.n	800548c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f7ff ffb4 	bl	80053f4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800548c:	697b      	ldr	r3, [r7, #20]
 800548e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005492:	2b40      	cmp	r3, #64	@ 0x40
 8005494:	d126      	bne.n	80054e4 <I2S_IRQHandler+0x92>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	f003 0320 	and.w	r3, r3, #32
 80054a0:	2b20      	cmp	r3, #32
 80054a2:	d11f      	bne.n	80054e4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80054b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80054b4:	2300      	movs	r3, #0
 80054b6:	613b      	str	r3, [r7, #16]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	613b      	str	r3, [r7, #16]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	613b      	str	r3, [r7, #16]
 80054c8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2201      	movs	r2, #1
 80054ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	f043 0202 	orr.w	r2, r3, #2
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f7ff ff50 	bl	8005384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b03      	cmp	r3, #3
 80054ee:	d136      	bne.n	800555e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f003 0302 	and.w	r3, r3, #2
 80054f6:	2b02      	cmp	r3, #2
 80054f8:	d109      	bne.n	800550e <I2S_IRQHandler+0xbc>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005504:	2b80      	cmp	r3, #128	@ 0x80
 8005506:	d102      	bne.n	800550e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f7ff ff45 	bl	8005398 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d122      	bne.n	800555e <I2S_IRQHandler+0x10c>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	685b      	ldr	r3, [r3, #4]
 800551e:	f003 0320 	and.w	r3, r3, #32
 8005522:	2b20      	cmp	r3, #32
 8005524:	d11b      	bne.n	800555e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	685a      	ldr	r2, [r3, #4]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005534:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005536:	2300      	movs	r3, #0
 8005538:	60fb      	str	r3, [r7, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	60fb      	str	r3, [r7, #12]
 8005542:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005550:	f043 0204 	orr.w	r2, r3, #4
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f7ff ff13 	bl	8005384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
	...

08005568 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b088      	sub	sp, #32
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a92      	ldr	r2, [pc, #584]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d101      	bne.n	8005586 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005582:	4b92      	ldr	r3, [pc, #584]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005584:	e001      	b.n	800558a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005586:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a8b      	ldr	r2, [pc, #556]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d101      	bne.n	80055a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80055a0:	4b8a      	ldr	r3, [pc, #552]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80055a2:	e001      	b.n	80055a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80055a4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055b4:	d004      	beq.n	80055c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f040 8099 	bne.w	80056f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	2b02      	cmp	r3, #2
 80055c8:	d107      	bne.n	80055da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d002      	beq.n	80055da <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80055d4:	6878      	ldr	r0, [r7, #4]
 80055d6:	f000 f925 	bl	8005824 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80055da:	69bb      	ldr	r3, [r7, #24]
 80055dc:	f003 0301 	and.w	r3, r3, #1
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d107      	bne.n	80055f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 f9c8 	bl	8005984 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80055f4:	69bb      	ldr	r3, [r7, #24]
 80055f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055fa:	2b40      	cmp	r3, #64	@ 0x40
 80055fc:	d13a      	bne.n	8005674 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	f003 0320 	and.w	r3, r3, #32
 8005604:	2b00      	cmp	r3, #0
 8005606:	d035      	beq.n	8005674 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a6e      	ldr	r2, [pc, #440]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005612:	4b6e      	ldr	r3, [pc, #440]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005614:	e001      	b.n	800561a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005616:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800561a:	685a      	ldr	r2, [r3, #4]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4969      	ldr	r1, [pc, #420]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005622:	428b      	cmp	r3, r1
 8005624:	d101      	bne.n	800562a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005626:	4b69      	ldr	r3, [pc, #420]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005628:	e001      	b.n	800562e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800562a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800562e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005632:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005642:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	60fb      	str	r3, [r7, #12]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689b      	ldr	r3, [r3, #8]
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005666:	f043 0202 	orr.w	r2, r3, #2
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f7ff fe88 	bl	8005384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b08      	cmp	r3, #8
 800567c:	f040 80c3 	bne.w	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b00      	cmp	r3, #0
 8005688:	f000 80bd 	beq.w	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800569a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a49      	ldr	r2, [pc, #292]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d101      	bne.n	80056aa <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80056a6:	4b49      	ldr	r3, [pc, #292]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056a8:	e001      	b.n	80056ae <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80056aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4944      	ldr	r1, [pc, #272]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80056b6:	428b      	cmp	r3, r1
 80056b8:	d101      	bne.n	80056be <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80056ba:	4b44      	ldr	r3, [pc, #272]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80056bc:	e001      	b.n	80056c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80056be:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80056c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80056c6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80056c8:	2300      	movs	r3, #0
 80056ca:	60bb      	str	r3, [r7, #8]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	60bb      	str	r3, [r7, #8]
 80056d4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2201      	movs	r2, #1
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056e2:	f043 0204 	orr.w	r2, r3, #4
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fe4a 	bl	8005384 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80056f0:	e089      	b.n	8005806 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b02      	cmp	r3, #2
 80056fa:	d107      	bne.n	800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005702:	2b00      	cmp	r3, #0
 8005704:	d002      	beq.n	800570c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f000 f8be 	bl	8005888 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	f003 0301 	and.w	r3, r3, #1
 8005712:	2b01      	cmp	r3, #1
 8005714:	d107      	bne.n	8005726 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f8fd 	bl	8005920 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800572c:	2b40      	cmp	r3, #64	@ 0x40
 800572e:	d12f      	bne.n	8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f003 0320 	and.w	r3, r3, #32
 8005736:	2b00      	cmp	r3, #0
 8005738:	d02a      	beq.n	8005790 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005748:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	4a1e      	ldr	r2, [pc, #120]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d101      	bne.n	8005758 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005754:	4b1d      	ldr	r3, [pc, #116]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005756:	e001      	b.n	800575c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005758:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4919      	ldr	r1, [pc, #100]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005764:	428b      	cmp	r3, r1
 8005766:	d101      	bne.n	800576c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005768:	4b18      	ldr	r3, [pc, #96]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800576a:	e001      	b.n	8005770 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800576c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8005770:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005774:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2201      	movs	r2, #1
 800577a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005782:	f043 0202 	orr.w	r2, r3, #2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7ff fdfa 	bl	8005384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b08      	cmp	r3, #8
 8005798:	d136      	bne.n	8005808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d031      	beq.n	8005808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a07      	ldr	r2, [pc, #28]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d101      	bne.n	80057b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80057ae:	4b07      	ldr	r3, [pc, #28]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057b0:	e001      	b.n	80057b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80057b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4902      	ldr	r1, [pc, #8]	@ (80057c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80057be:	428b      	cmp	r3, r1
 80057c0:	d106      	bne.n	80057d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80057c2:	4b02      	ldr	r3, [pc, #8]	@ (80057cc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80057c4:	e006      	b.n	80057d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80057c6:	bf00      	nop
 80057c8:	40003800 	.word	0x40003800
 80057cc:	40003400 	.word	0x40003400
 80057d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80057d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80057d8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80057e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80057f6:	f043 0204 	orr.w	r2, r3, #4
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fdc0 	bl	8005384 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005804:	e000      	b.n	8005808 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005806:	bf00      	nop
}
 8005808:	bf00      	nop
 800580a:	3720      	adds	r7, #32
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005810:	b480      	push	{r7}
 8005812:	b083      	sub	sp, #12
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005818:	bf00      	nop
 800581a:	370c      	adds	r7, #12
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005830:	1c99      	adds	r1, r3, #2
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	6251      	str	r1, [r2, #36]	@ 0x24
 8005836:	881a      	ldrh	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d113      	bne.n	800587e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8005864:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800586a:	b29b      	uxth	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d106      	bne.n	800587e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2201      	movs	r2, #1
 8005874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff ffc9 	bl	8005810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800587e:	bf00      	nop
 8005880:	3708      	adds	r7, #8
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005894:	1c99      	adds	r1, r3, #2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6251      	str	r1, [r2, #36]	@ 0x24
 800589a:	8819      	ldrh	r1, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a1d      	ldr	r2, [pc, #116]	@ (8005918 <I2SEx_TxISR_I2SExt+0x90>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d101      	bne.n	80058aa <I2SEx_TxISR_I2SExt+0x22>
 80058a6:	4b1d      	ldr	r3, [pc, #116]	@ (800591c <I2SEx_TxISR_I2SExt+0x94>)
 80058a8:	e001      	b.n	80058ae <I2SEx_TxISR_I2SExt+0x26>
 80058aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058ae:	460a      	mov	r2, r1
 80058b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058b6:	b29b      	uxth	r3, r3
 80058b8:	3b01      	subs	r3, #1
 80058ba:	b29a      	uxth	r2, r3
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c4:	b29b      	uxth	r3, r3
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d121      	bne.n	800590e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4a12      	ldr	r2, [pc, #72]	@ (8005918 <I2SEx_TxISR_I2SExt+0x90>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d101      	bne.n	80058d8 <I2SEx_TxISR_I2SExt+0x50>
 80058d4:	4b11      	ldr	r3, [pc, #68]	@ (800591c <I2SEx_TxISR_I2SExt+0x94>)
 80058d6:	e001      	b.n	80058dc <I2SEx_TxISR_I2SExt+0x54>
 80058d8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058dc:	685a      	ldr	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	490d      	ldr	r1, [pc, #52]	@ (8005918 <I2SEx_TxISR_I2SExt+0x90>)
 80058e4:	428b      	cmp	r3, r1
 80058e6:	d101      	bne.n	80058ec <I2SEx_TxISR_I2SExt+0x64>
 80058e8:	4b0c      	ldr	r3, [pc, #48]	@ (800591c <I2SEx_TxISR_I2SExt+0x94>)
 80058ea:	e001      	b.n	80058f0 <I2SEx_TxISR_I2SExt+0x68>
 80058ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80058f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80058f4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d106      	bne.n	800590e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f7ff ff81 	bl	8005810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800590e:	bf00      	nop
 8005910:	3708      	adds	r7, #8
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	40003800 	.word	0x40003800
 800591c:	40003400 	.word	0x40003400

08005920 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68d8      	ldr	r0, [r3, #12]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005932:	1c99      	adds	r1, r3, #2
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8005938:	b282      	uxth	r2, r0
 800593a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8005940:	b29b      	uxth	r3, r3
 8005942:	3b01      	subs	r3, #1
 8005944:	b29a      	uxth	r2, r3
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d113      	bne.n	800597c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8005962:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	2b00      	cmp	r3, #0
 800596c:	d106      	bne.n	800597c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f7ff ff4a 	bl	8005810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800597c:	bf00      	nop
 800597e:	3708      	adds	r7, #8
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005984:	b580      	push	{r7, lr}
 8005986:	b082      	sub	sp, #8
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a20      	ldr	r2, [pc, #128]	@ (8005a14 <I2SEx_RxISR_I2SExt+0x90>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d101      	bne.n	800599a <I2SEx_RxISR_I2SExt+0x16>
 8005996:	4b20      	ldr	r3, [pc, #128]	@ (8005a18 <I2SEx_RxISR_I2SExt+0x94>)
 8005998:	e001      	b.n	800599e <I2SEx_RxISR_I2SExt+0x1a>
 800599a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800599e:	68d8      	ldr	r0, [r3, #12]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	1c99      	adds	r1, r3, #2
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80059aa:	b282      	uxth	r2, r0
 80059ac:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	3b01      	subs	r3, #1
 80059b6:	b29a      	uxth	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d121      	bne.n	8005a0a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a12      	ldr	r2, [pc, #72]	@ (8005a14 <I2SEx_RxISR_I2SExt+0x90>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d101      	bne.n	80059d4 <I2SEx_RxISR_I2SExt+0x50>
 80059d0:	4b11      	ldr	r3, [pc, #68]	@ (8005a18 <I2SEx_RxISR_I2SExt+0x94>)
 80059d2:	e001      	b.n	80059d8 <I2SEx_RxISR_I2SExt+0x54>
 80059d4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	490d      	ldr	r1, [pc, #52]	@ (8005a14 <I2SEx_RxISR_I2SExt+0x90>)
 80059e0:	428b      	cmp	r3, r1
 80059e2:	d101      	bne.n	80059e8 <I2SEx_RxISR_I2SExt+0x64>
 80059e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005a18 <I2SEx_RxISR_I2SExt+0x94>)
 80059e6:	e001      	b.n	80059ec <I2SEx_RxISR_I2SExt+0x68>
 80059e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80059ec:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80059f0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f7ff ff03 	bl	8005810 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005a0a:	bf00      	nop
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	40003800 	.word	0x40003800
 8005a18:	40003400 	.word	0x40003400

08005a1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d101      	bne.n	8005a2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	e267      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d075      	beq.n	8005b26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a3a:	4b88      	ldr	r3, [pc, #544]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	f003 030c 	and.w	r3, r3, #12
 8005a42:	2b04      	cmp	r3, #4
 8005a44:	d00c      	beq.n	8005a60 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a46:	4b85      	ldr	r3, [pc, #532]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005a4e:	2b08      	cmp	r3, #8
 8005a50:	d112      	bne.n	8005a78 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a52:	4b82      	ldr	r3, [pc, #520]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005a5a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a5e:	d10b      	bne.n	8005a78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a60:	4b7e      	ldr	r3, [pc, #504]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d05b      	beq.n	8005b24 <HAL_RCC_OscConfig+0x108>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d157      	bne.n	8005b24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e242      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a80:	d106      	bne.n	8005a90 <HAL_RCC_OscConfig+0x74>
 8005a82:	4b76      	ldr	r3, [pc, #472]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a75      	ldr	r2, [pc, #468]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a8c:	6013      	str	r3, [r2, #0]
 8005a8e:	e01d      	b.n	8005acc <HAL_RCC_OscConfig+0xb0>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a98:	d10c      	bne.n	8005ab4 <HAL_RCC_OscConfig+0x98>
 8005a9a:	4b70      	ldr	r3, [pc, #448]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a6f      	ldr	r2, [pc, #444]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005aa0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	4b6d      	ldr	r3, [pc, #436]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a6c      	ldr	r2, [pc, #432]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	e00b      	b.n	8005acc <HAL_RCC_OscConfig+0xb0>
 8005ab4:	4b69      	ldr	r3, [pc, #420]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a68      	ldr	r2, [pc, #416]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005aba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005abe:	6013      	str	r3, [r2, #0]
 8005ac0:	4b66      	ldr	r3, [pc, #408]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a65      	ldr	r2, [pc, #404]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005ac6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005aca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d013      	beq.n	8005afc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ad4:	f7fc fd92 	bl	80025fc <HAL_GetTick>
 8005ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ada:	e008      	b.n	8005aee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005adc:	f7fc fd8e 	bl	80025fc <HAL_GetTick>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	2b64      	cmp	r3, #100	@ 0x64
 8005ae8:	d901      	bls.n	8005aee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e207      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005aee:	4b5b      	ldr	r3, [pc, #364]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0f0      	beq.n	8005adc <HAL_RCC_OscConfig+0xc0>
 8005afa:	e014      	b.n	8005b26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005afc:	f7fc fd7e 	bl	80025fc <HAL_GetTick>
 8005b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b02:	e008      	b.n	8005b16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b04:	f7fc fd7a 	bl	80025fc <HAL_GetTick>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	1ad3      	subs	r3, r2, r3
 8005b0e:	2b64      	cmp	r3, #100	@ 0x64
 8005b10:	d901      	bls.n	8005b16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b12:	2303      	movs	r3, #3
 8005b14:	e1f3      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b16:	4b51      	ldr	r3, [pc, #324]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1f0      	bne.n	8005b04 <HAL_RCC_OscConfig+0xe8>
 8005b22:	e000      	b.n	8005b26 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f003 0302 	and.w	r3, r3, #2
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d063      	beq.n	8005bfa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b32:	4b4a      	ldr	r3, [pc, #296]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	f003 030c 	and.w	r3, r3, #12
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d00b      	beq.n	8005b56 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b3e:	4b47      	ldr	r3, [pc, #284]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005b46:	2b08      	cmp	r3, #8
 8005b48:	d11c      	bne.n	8005b84 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b4a:	4b44      	ldr	r3, [pc, #272]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b4c:	685b      	ldr	r3, [r3, #4]
 8005b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d116      	bne.n	8005b84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b56:	4b41      	ldr	r3, [pc, #260]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0302 	and.w	r3, r3, #2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_RCC_OscConfig+0x152>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d001      	beq.n	8005b6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e1c7      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	00db      	lsls	r3, r3, #3
 8005b7c:	4937      	ldr	r1, [pc, #220]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b82:	e03a      	b.n	8005bfa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d020      	beq.n	8005bce <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b8c:	4b34      	ldr	r3, [pc, #208]	@ (8005c60 <HAL_RCC_OscConfig+0x244>)
 8005b8e:	2201      	movs	r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b92:	f7fc fd33 	bl	80025fc <HAL_GetTick>
 8005b96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005b98:	e008      	b.n	8005bac <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005b9a:	f7fc fd2f 	bl	80025fc <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	d901      	bls.n	8005bac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005ba8:	2303      	movs	r3, #3
 8005baa:	e1a8      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bac:	4b2b      	ldr	r3, [pc, #172]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d0f0      	beq.n	8005b9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	4b28      	ldr	r3, [pc, #160]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	691b      	ldr	r3, [r3, #16]
 8005bc4:	00db      	lsls	r3, r3, #3
 8005bc6:	4925      	ldr	r1, [pc, #148]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]
 8005bcc:	e015      	b.n	8005bfa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bce:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <HAL_RCC_OscConfig+0x244>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bd4:	f7fc fd12 	bl	80025fc <HAL_GetTick>
 8005bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bda:	e008      	b.n	8005bee <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bdc:	f7fc fd0e 	bl	80025fc <HAL_GetTick>
 8005be0:	4602      	mov	r2, r0
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	1ad3      	subs	r3, r2, r3
 8005be6:	2b02      	cmp	r3, #2
 8005be8:	d901      	bls.n	8005bee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005bea:	2303      	movs	r3, #3
 8005bec:	e187      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bee:	4b1b      	ldr	r3, [pc, #108]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1f0      	bne.n	8005bdc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 0308 	and.w	r3, r3, #8
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d036      	beq.n	8005c74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c0e:	4b15      	ldr	r3, [pc, #84]	@ (8005c64 <HAL_RCC_OscConfig+0x248>)
 8005c10:	2201      	movs	r2, #1
 8005c12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c14:	f7fc fcf2 	bl	80025fc <HAL_GetTick>
 8005c18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c1a:	e008      	b.n	8005c2e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c1c:	f7fc fcee 	bl	80025fc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	d901      	bls.n	8005c2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e167      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c2e:	4b0b      	ldr	r3, [pc, #44]	@ (8005c5c <HAL_RCC_OscConfig+0x240>)
 8005c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0f0      	beq.n	8005c1c <HAL_RCC_OscConfig+0x200>
 8005c3a:	e01b      	b.n	8005c74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c3c:	4b09      	ldr	r3, [pc, #36]	@ (8005c64 <HAL_RCC_OscConfig+0x248>)
 8005c3e:	2200      	movs	r2, #0
 8005c40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c42:	f7fc fcdb 	bl	80025fc <HAL_GetTick>
 8005c46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c48:	e00e      	b.n	8005c68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c4a:	f7fc fcd7 	bl	80025fc <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b02      	cmp	r3, #2
 8005c56:	d907      	bls.n	8005c68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c58:	2303      	movs	r3, #3
 8005c5a:	e150      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
 8005c5c:	40023800 	.word	0x40023800
 8005c60:	42470000 	.word	0x42470000
 8005c64:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c68:	4b88      	ldr	r3, [pc, #544]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005c6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005c6c:	f003 0302 	and.w	r3, r3, #2
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1ea      	bne.n	8005c4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0304 	and.w	r3, r3, #4
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	f000 8097 	beq.w	8005db0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c82:	2300      	movs	r3, #0
 8005c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005c86:	4b81      	ldr	r3, [pc, #516]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d10f      	bne.n	8005cb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c92:	2300      	movs	r3, #0
 8005c94:	60bb      	str	r3, [r7, #8]
 8005c96:	4b7d      	ldr	r3, [pc, #500]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c9a:	4a7c      	ldr	r2, [pc, #496]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005c9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ca0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005ca2:	4b7a      	ldr	r3, [pc, #488]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005caa:	60bb      	str	r3, [r7, #8]
 8005cac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cb2:	4b77      	ldr	r3, [pc, #476]	@ (8005e90 <HAL_RCC_OscConfig+0x474>)
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d118      	bne.n	8005cf0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cbe:	4b74      	ldr	r3, [pc, #464]	@ (8005e90 <HAL_RCC_OscConfig+0x474>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	4a73      	ldr	r2, [pc, #460]	@ (8005e90 <HAL_RCC_OscConfig+0x474>)
 8005cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cca:	f7fc fc97 	bl	80025fc <HAL_GetTick>
 8005cce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cd0:	e008      	b.n	8005ce4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cd2:	f7fc fc93 	bl	80025fc <HAL_GetTick>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	1ad3      	subs	r3, r2, r3
 8005cdc:	2b02      	cmp	r3, #2
 8005cde:	d901      	bls.n	8005ce4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	e10c      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ce4:	4b6a      	ldr	r3, [pc, #424]	@ (8005e90 <HAL_RCC_OscConfig+0x474>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d0f0      	beq.n	8005cd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d106      	bne.n	8005d06 <HAL_RCC_OscConfig+0x2ea>
 8005cf8:	4b64      	ldr	r3, [pc, #400]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005cfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cfc:	4a63      	ldr	r2, [pc, #396]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005cfe:	f043 0301 	orr.w	r3, r3, #1
 8005d02:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d04:	e01c      	b.n	8005d40 <HAL_RCC_OscConfig+0x324>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b05      	cmp	r3, #5
 8005d0c:	d10c      	bne.n	8005d28 <HAL_RCC_OscConfig+0x30c>
 8005d0e:	4b5f      	ldr	r3, [pc, #380]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d12:	4a5e      	ldr	r2, [pc, #376]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d14:	f043 0304 	orr.w	r3, r3, #4
 8005d18:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d1a:	4b5c      	ldr	r3, [pc, #368]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d1e:	4a5b      	ldr	r2, [pc, #364]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d26:	e00b      	b.n	8005d40 <HAL_RCC_OscConfig+0x324>
 8005d28:	4b58      	ldr	r3, [pc, #352]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d2c:	4a57      	ldr	r2, [pc, #348]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d2e:	f023 0301 	bic.w	r3, r3, #1
 8005d32:	6713      	str	r3, [r2, #112]	@ 0x70
 8005d34:	4b55      	ldr	r3, [pc, #340]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d38:	4a54      	ldr	r2, [pc, #336]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d3a:	f023 0304 	bic.w	r3, r3, #4
 8005d3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d015      	beq.n	8005d74 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7fc fc58 	bl	80025fc <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d4e:	e00a      	b.n	8005d66 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d50:	f7fc fc54 	bl	80025fc <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d901      	bls.n	8005d66 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0cb      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d66:	4b49      	ldr	r3, [pc, #292]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d0ee      	beq.n	8005d50 <HAL_RCC_OscConfig+0x334>
 8005d72:	e014      	b.n	8005d9e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d74:	f7fc fc42 	bl	80025fc <HAL_GetTick>
 8005d78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d7a:	e00a      	b.n	8005d92 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d7c:	f7fc fc3e 	bl	80025fc <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e0b5      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d92:	4b3e      	ldr	r3, [pc, #248]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d96:	f003 0302 	and.w	r3, r3, #2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1ee      	bne.n	8005d7c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005d9e:	7dfb      	ldrb	r3, [r7, #23]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d105      	bne.n	8005db0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005da4:	4b39      	ldr	r3, [pc, #228]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005da8:	4a38      	ldr	r2, [pc, #224]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005daa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dae:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 80a1 	beq.w	8005efc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dba:	4b34      	ldr	r3, [pc, #208]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d05c      	beq.n	8005e80 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	699b      	ldr	r3, [r3, #24]
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d141      	bne.n	8005e52 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dce:	4b31      	ldr	r3, [pc, #196]	@ (8005e94 <HAL_RCC_OscConfig+0x478>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dd4:	f7fc fc12 	bl	80025fc <HAL_GetTick>
 8005dd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dda:	e008      	b.n	8005dee <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ddc:	f7fc fc0e 	bl	80025fc <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d901      	bls.n	8005dee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e087      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005dee:	4b27      	ldr	r3, [pc, #156]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1f0      	bne.n	8005ddc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	69da      	ldr	r2, [r3, #28]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a1b      	ldr	r3, [r3, #32]
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e08:	019b      	lsls	r3, r3, #6
 8005e0a:	431a      	orrs	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e10:	085b      	lsrs	r3, r3, #1
 8005e12:	3b01      	subs	r3, #1
 8005e14:	041b      	lsls	r3, r3, #16
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e1c:	061b      	lsls	r3, r3, #24
 8005e1e:	491b      	ldr	r1, [pc, #108]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005e20:	4313      	orrs	r3, r2
 8005e22:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e24:	4b1b      	ldr	r3, [pc, #108]	@ (8005e94 <HAL_RCC_OscConfig+0x478>)
 8005e26:	2201      	movs	r2, #1
 8005e28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e2a:	f7fc fbe7 	bl	80025fc <HAL_GetTick>
 8005e2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e30:	e008      	b.n	8005e44 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e32:	f7fc fbe3 	bl	80025fc <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e05c      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e44:	4b11      	ldr	r3, [pc, #68]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d0f0      	beq.n	8005e32 <HAL_RCC_OscConfig+0x416>
 8005e50:	e054      	b.n	8005efc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e52:	4b10      	ldr	r3, [pc, #64]	@ (8005e94 <HAL_RCC_OscConfig+0x478>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e58:	f7fc fbd0 	bl	80025fc <HAL_GetTick>
 8005e5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e5e:	e008      	b.n	8005e72 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005e60:	f7fc fbcc 	bl	80025fc <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d901      	bls.n	8005e72 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e045      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e72:	4b06      	ldr	r3, [pc, #24]	@ (8005e8c <HAL_RCC_OscConfig+0x470>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1f0      	bne.n	8005e60 <HAL_RCC_OscConfig+0x444>
 8005e7e:	e03d      	b.n	8005efc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	699b      	ldr	r3, [r3, #24]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d107      	bne.n	8005e98 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	e038      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
 8005e8c:	40023800 	.word	0x40023800
 8005e90:	40007000 	.word	0x40007000
 8005e94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005e98:	4b1b      	ldr	r3, [pc, #108]	@ (8005f08 <HAL_RCC_OscConfig+0x4ec>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d028      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d121      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d11a      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005ec8:	4013      	ands	r3, r2
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005ece:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d111      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ede:	085b      	lsrs	r3, r3, #1
 8005ee0:	3b01      	subs	r3, #1
 8005ee2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d107      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d001      	beq.n	8005efc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005ef8:	2301      	movs	r3, #1
 8005efa:	e000      	b.n	8005efe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3718      	adds	r7, #24
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
 8005f06:	bf00      	nop
 8005f08:	40023800 	.word	0x40023800

08005f0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d101      	bne.n	8005f20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e0cc      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005f20:	4b68      	ldr	r3, [pc, #416]	@ (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f003 0307 	and.w	r3, r3, #7
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d90c      	bls.n	8005f48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f2e:	4b65      	ldr	r3, [pc, #404]	@ (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f30:	683a      	ldr	r2, [r7, #0]
 8005f32:	b2d2      	uxtb	r2, r2
 8005f34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f36:	4b63      	ldr	r3, [pc, #396]	@ (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d001      	beq.n	8005f48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	e0b8      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d020      	beq.n	8005f96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d005      	beq.n	8005f6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f60:	4b59      	ldr	r3, [pc, #356]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	4a58      	ldr	r2, [pc, #352]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f66:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005f6a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f003 0308 	and.w	r3, r3, #8
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d005      	beq.n	8005f84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f78:	4b53      	ldr	r3, [pc, #332]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	4a52      	ldr	r2, [pc, #328]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005f82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f84:	4b50      	ldr	r3, [pc, #320]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	494d      	ldr	r1, [pc, #308]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005f92:	4313      	orrs	r3, r2
 8005f94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f003 0301 	and.w	r3, r3, #1
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d044      	beq.n	800602c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d107      	bne.n	8005fba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005faa:	4b47      	ldr	r3, [pc, #284]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d119      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e07f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d003      	beq.n	8005fca <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d107      	bne.n	8005fda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fca:	4b3f      	ldr	r3, [pc, #252]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d109      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e06f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005fda:	4b3b      	ldr	r3, [pc, #236]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d101      	bne.n	8005fea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	e067      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005fea:	4b37      	ldr	r3, [pc, #220]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f023 0203 	bic.w	r2, r3, #3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	4934      	ldr	r1, [pc, #208]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	4313      	orrs	r3, r2
 8005ffa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ffc:	f7fc fafe 	bl	80025fc <HAL_GetTick>
 8006000:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006002:	e00a      	b.n	800601a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006004:	f7fc fafa 	bl	80025fc <HAL_GetTick>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006012:	4293      	cmp	r3, r2
 8006014:	d901      	bls.n	800601a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006016:	2303      	movs	r3, #3
 8006018:	e04f      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601a:	4b2b      	ldr	r3, [pc, #172]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	f003 020c 	and.w	r2, r3, #12
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	429a      	cmp	r2, r3
 800602a:	d1eb      	bne.n	8006004 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800602c:	4b25      	ldr	r3, [pc, #148]	@ (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 0307 	and.w	r3, r3, #7
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d20c      	bcs.n	8006054 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800603a:	4b22      	ldr	r3, [pc, #136]	@ (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 800603c:	683a      	ldr	r2, [r7, #0]
 800603e:	b2d2      	uxtb	r2, r2
 8006040:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b20      	ldr	r3, [pc, #128]	@ (80060c4 <HAL_RCC_ClockConfig+0x1b8>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 0307 	and.w	r3, r3, #7
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d001      	beq.n	8006054 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e032      	b.n	80060ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0304 	and.w	r3, r3, #4
 800605c:	2b00      	cmp	r3, #0
 800605e:	d008      	beq.n	8006072 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006060:	4b19      	ldr	r3, [pc, #100]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006062:	689b      	ldr	r3, [r3, #8]
 8006064:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	4916      	ldr	r1, [pc, #88]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800606e:	4313      	orrs	r3, r2
 8006070:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d009      	beq.n	8006092 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800607e:	4b12      	ldr	r3, [pc, #72]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 8006080:	689b      	ldr	r3, [r3, #8]
 8006082:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	691b      	ldr	r3, [r3, #16]
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	490e      	ldr	r1, [pc, #56]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800608e:	4313      	orrs	r3, r2
 8006090:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006092:	f000 f821 	bl	80060d8 <HAL_RCC_GetSysClockFreq>
 8006096:	4602      	mov	r2, r0
 8006098:	4b0b      	ldr	r3, [pc, #44]	@ (80060c8 <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	689b      	ldr	r3, [r3, #8]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 030f 	and.w	r3, r3, #15
 80060a2:	490a      	ldr	r1, [pc, #40]	@ (80060cc <HAL_RCC_ClockConfig+0x1c0>)
 80060a4:	5ccb      	ldrb	r3, [r1, r3]
 80060a6:	fa22 f303 	lsr.w	r3, r2, r3
 80060aa:	4a09      	ldr	r2, [pc, #36]	@ (80060d0 <HAL_RCC_ClockConfig+0x1c4>)
 80060ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80060ae:	4b09      	ldr	r3, [pc, #36]	@ (80060d4 <HAL_RCC_ClockConfig+0x1c8>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fc fa5e 	bl	8002574 <HAL_InitTick>

  return HAL_OK;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	40023c00 	.word	0x40023c00
 80060c8:	40023800 	.word	0x40023800
 80060cc:	0800bbcc 	.word	0x0800bbcc
 80060d0:	20000000 	.word	0x20000000
 80060d4:	20000004 	.word	0x20000004

080060d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060dc:	b094      	sub	sp, #80	@ 0x50
 80060de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80060e0:	2300      	movs	r3, #0
 80060e2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80060e4:	2300      	movs	r3, #0
 80060e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80060ec:	2300      	movs	r3, #0
 80060ee:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80060f0:	4b79      	ldr	r3, [pc, #484]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	f003 030c 	and.w	r3, r3, #12
 80060f8:	2b08      	cmp	r3, #8
 80060fa:	d00d      	beq.n	8006118 <HAL_RCC_GetSysClockFreq+0x40>
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	f200 80e1 	bhi.w	80062c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006102:	2b00      	cmp	r3, #0
 8006104:	d002      	beq.n	800610c <HAL_RCC_GetSysClockFreq+0x34>
 8006106:	2b04      	cmp	r3, #4
 8006108:	d003      	beq.n	8006112 <HAL_RCC_GetSysClockFreq+0x3a>
 800610a:	e0db      	b.n	80062c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800610c:	4b73      	ldr	r3, [pc, #460]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x204>)
 800610e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006110:	e0db      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006112:	4b73      	ldr	r3, [pc, #460]	@ (80062e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8006114:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006116:	e0d8      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006118:	4b6f      	ldr	r3, [pc, #444]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x200>)
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006120:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006122:	4b6d      	ldr	r3, [pc, #436]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d063      	beq.n	80061f6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800612e:	4b6a      	ldr	r3, [pc, #424]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	099b      	lsrs	r3, r3, #6
 8006134:	2200      	movs	r2, #0
 8006136:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006138:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800613a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800613c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006140:	633b      	str	r3, [r7, #48]	@ 0x30
 8006142:	2300      	movs	r3, #0
 8006144:	637b      	str	r3, [r7, #52]	@ 0x34
 8006146:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800614a:	4622      	mov	r2, r4
 800614c:	462b      	mov	r3, r5
 800614e:	f04f 0000 	mov.w	r0, #0
 8006152:	f04f 0100 	mov.w	r1, #0
 8006156:	0159      	lsls	r1, r3, #5
 8006158:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800615c:	0150      	lsls	r0, r2, #5
 800615e:	4602      	mov	r2, r0
 8006160:	460b      	mov	r3, r1
 8006162:	4621      	mov	r1, r4
 8006164:	1a51      	subs	r1, r2, r1
 8006166:	6139      	str	r1, [r7, #16]
 8006168:	4629      	mov	r1, r5
 800616a:	eb63 0301 	sbc.w	r3, r3, r1
 800616e:	617b      	str	r3, [r7, #20]
 8006170:	f04f 0200 	mov.w	r2, #0
 8006174:	f04f 0300 	mov.w	r3, #0
 8006178:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800617c:	4659      	mov	r1, fp
 800617e:	018b      	lsls	r3, r1, #6
 8006180:	4651      	mov	r1, sl
 8006182:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006186:	4651      	mov	r1, sl
 8006188:	018a      	lsls	r2, r1, #6
 800618a:	4651      	mov	r1, sl
 800618c:	ebb2 0801 	subs.w	r8, r2, r1
 8006190:	4659      	mov	r1, fp
 8006192:	eb63 0901 	sbc.w	r9, r3, r1
 8006196:	f04f 0200 	mov.w	r2, #0
 800619a:	f04f 0300 	mov.w	r3, #0
 800619e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061aa:	4690      	mov	r8, r2
 80061ac:	4699      	mov	r9, r3
 80061ae:	4623      	mov	r3, r4
 80061b0:	eb18 0303 	adds.w	r3, r8, r3
 80061b4:	60bb      	str	r3, [r7, #8]
 80061b6:	462b      	mov	r3, r5
 80061b8:	eb49 0303 	adc.w	r3, r9, r3
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80061ca:	4629      	mov	r1, r5
 80061cc:	024b      	lsls	r3, r1, #9
 80061ce:	4621      	mov	r1, r4
 80061d0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80061d4:	4621      	mov	r1, r4
 80061d6:	024a      	lsls	r2, r1, #9
 80061d8:	4610      	mov	r0, r2
 80061da:	4619      	mov	r1, r3
 80061dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80061de:	2200      	movs	r2, #0
 80061e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061e4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80061e8:	f7fa f842 	bl	8000270 <__aeabi_uldivmod>
 80061ec:	4602      	mov	r2, r0
 80061ee:	460b      	mov	r3, r1
 80061f0:	4613      	mov	r3, r2
 80061f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80061f4:	e058      	b.n	80062a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80061f6:	4b38      	ldr	r3, [pc, #224]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	099b      	lsrs	r3, r3, #6
 80061fc:	2200      	movs	r2, #0
 80061fe:	4618      	mov	r0, r3
 8006200:	4611      	mov	r1, r2
 8006202:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006206:	623b      	str	r3, [r7, #32]
 8006208:	2300      	movs	r3, #0
 800620a:	627b      	str	r3, [r7, #36]	@ 0x24
 800620c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006210:	4642      	mov	r2, r8
 8006212:	464b      	mov	r3, r9
 8006214:	f04f 0000 	mov.w	r0, #0
 8006218:	f04f 0100 	mov.w	r1, #0
 800621c:	0159      	lsls	r1, r3, #5
 800621e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006222:	0150      	lsls	r0, r2, #5
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4641      	mov	r1, r8
 800622a:	ebb2 0a01 	subs.w	sl, r2, r1
 800622e:	4649      	mov	r1, r9
 8006230:	eb63 0b01 	sbc.w	fp, r3, r1
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006240:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006244:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006248:	ebb2 040a 	subs.w	r4, r2, sl
 800624c:	eb63 050b 	sbc.w	r5, r3, fp
 8006250:	f04f 0200 	mov.w	r2, #0
 8006254:	f04f 0300 	mov.w	r3, #0
 8006258:	00eb      	lsls	r3, r5, #3
 800625a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800625e:	00e2      	lsls	r2, r4, #3
 8006260:	4614      	mov	r4, r2
 8006262:	461d      	mov	r5, r3
 8006264:	4643      	mov	r3, r8
 8006266:	18e3      	adds	r3, r4, r3
 8006268:	603b      	str	r3, [r7, #0]
 800626a:	464b      	mov	r3, r9
 800626c:	eb45 0303 	adc.w	r3, r5, r3
 8006270:	607b      	str	r3, [r7, #4]
 8006272:	f04f 0200 	mov.w	r2, #0
 8006276:	f04f 0300 	mov.w	r3, #0
 800627a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800627e:	4629      	mov	r1, r5
 8006280:	028b      	lsls	r3, r1, #10
 8006282:	4621      	mov	r1, r4
 8006284:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006288:	4621      	mov	r1, r4
 800628a:	028a      	lsls	r2, r1, #10
 800628c:	4610      	mov	r0, r2
 800628e:	4619      	mov	r1, r3
 8006290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006292:	2200      	movs	r2, #0
 8006294:	61bb      	str	r3, [r7, #24]
 8006296:	61fa      	str	r2, [r7, #28]
 8006298:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800629c:	f7f9 ffe8 	bl	8000270 <__aeabi_uldivmod>
 80062a0:	4602      	mov	r2, r0
 80062a2:	460b      	mov	r3, r1
 80062a4:	4613      	mov	r3, r2
 80062a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80062a8:	4b0b      	ldr	r3, [pc, #44]	@ (80062d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80062aa:	685b      	ldr	r3, [r3, #4]
 80062ac:	0c1b      	lsrs	r3, r3, #16
 80062ae:	f003 0303 	and.w	r3, r3, #3
 80062b2:	3301      	adds	r3, #1
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80062b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c2:	e002      	b.n	80062ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80062c4:	4b05      	ldr	r3, [pc, #20]	@ (80062dc <HAL_RCC_GetSysClockFreq+0x204>)
 80062c6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80062c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80062ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3750      	adds	r7, #80	@ 0x50
 80062d0:	46bd      	mov	sp, r7
 80062d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80062d6:	bf00      	nop
 80062d8:	40023800 	.word	0x40023800
 80062dc:	00f42400 	.word	0x00f42400
 80062e0:	007a1200 	.word	0x007a1200

080062e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80062e8:	4b03      	ldr	r3, [pc, #12]	@ (80062f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80062ea:	681b      	ldr	r3, [r3, #0]
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr
 80062f6:	bf00      	nop
 80062f8:	20000000 	.word	0x20000000

080062fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006300:	f7ff fff0 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 8006304:	4602      	mov	r2, r0
 8006306:	4b05      	ldr	r3, [pc, #20]	@ (800631c <HAL_RCC_GetPCLK1Freq+0x20>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	0a9b      	lsrs	r3, r3, #10
 800630c:	f003 0307 	and.w	r3, r3, #7
 8006310:	4903      	ldr	r1, [pc, #12]	@ (8006320 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006312:	5ccb      	ldrb	r3, [r1, r3]
 8006314:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006318:	4618      	mov	r0, r3
 800631a:	bd80      	pop	{r7, pc}
 800631c:	40023800 	.word	0x40023800
 8006320:	0800bbdc 	.word	0x0800bbdc

08006324 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006328:	f7ff ffdc 	bl	80062e4 <HAL_RCC_GetHCLKFreq>
 800632c:	4602      	mov	r2, r0
 800632e:	4b05      	ldr	r3, [pc, #20]	@ (8006344 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006330:	689b      	ldr	r3, [r3, #8]
 8006332:	0b5b      	lsrs	r3, r3, #13
 8006334:	f003 0307 	and.w	r3, r3, #7
 8006338:	4903      	ldr	r1, [pc, #12]	@ (8006348 <HAL_RCC_GetPCLK2Freq+0x24>)
 800633a:	5ccb      	ldrb	r3, [r1, r3]
 800633c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006340:	4618      	mov	r0, r3
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40023800 	.word	0x40023800
 8006348:	0800bbdc 	.word	0x0800bbdc

0800634c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006354:	2300      	movs	r3, #0
 8006356:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0301 	and.w	r3, r3, #1
 8006364:	2b00      	cmp	r3, #0
 8006366:	d105      	bne.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006370:	2b00      	cmp	r3, #0
 8006372:	d035      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006374:	4b62      	ldr	r3, [pc, #392]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006376:	2200      	movs	r2, #0
 8006378:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800637a:	f7fc f93f 	bl	80025fc <HAL_GetTick>
 800637e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006380:	e008      	b.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006382:	f7fc f93b 	bl	80025fc <HAL_GetTick>
 8006386:	4602      	mov	r2, r0
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	2b02      	cmp	r3, #2
 800638e:	d901      	bls.n	8006394 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e0b0      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006394:	4b5b      	ldr	r3, [pc, #364]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d1f0      	bne.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	019a      	lsls	r2, r3, #6
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	071b      	lsls	r3, r3, #28
 80063ac:	4955      	ldr	r1, [pc, #340]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80063b4:	4b52      	ldr	r3, [pc, #328]	@ (8006500 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80063ba:	f7fc f91f 	bl	80025fc <HAL_GetTick>
 80063be:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063c0:	e008      	b.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80063c2:	f7fc f91b 	bl	80025fc <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	2b02      	cmp	r3, #2
 80063ce:	d901      	bls.n	80063d4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80063d0:	2303      	movs	r3, #3
 80063d2:	e090      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80063d4:	4b4b      	ldr	r3, [pc, #300]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d0f0      	beq.n	80063c2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0302 	and.w	r3, r3, #2
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	f000 8083 	beq.w	80064f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80063ee:	2300      	movs	r3, #0
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	4b44      	ldr	r3, [pc, #272]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f6:	4a43      	ldr	r2, [pc, #268]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80063f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80063fe:	4b41      	ldr	r3, [pc, #260]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006402:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006406:	60fb      	str	r3, [r7, #12]
 8006408:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800640a:	4b3f      	ldr	r3, [pc, #252]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4a3e      	ldr	r2, [pc, #248]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006414:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006416:	f7fc f8f1 	bl	80025fc <HAL_GetTick>
 800641a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800641c:	e008      	b.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800641e:	f7fc f8ed 	bl	80025fc <HAL_GetTick>
 8006422:	4602      	mov	r2, r0
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	1ad3      	subs	r3, r2, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	d901      	bls.n	8006430 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e062      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8006430:	4b35      	ldr	r3, [pc, #212]	@ (8006508 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006438:	2b00      	cmp	r3, #0
 800643a:	d0f0      	beq.n	800641e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800643c:	4b31      	ldr	r3, [pc, #196]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800643e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006440:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006444:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d02f      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x160>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	429a      	cmp	r2, r3
 8006458:	d028      	beq.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800645a:	4b2a      	ldr	r3, [pc, #168]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800645c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800645e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006462:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006464:	4b29      	ldr	r3, [pc, #164]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800646a:	4b28      	ldr	r3, [pc, #160]	@ (800650c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006470:	4a24      	ldr	r2, [pc, #144]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006476:	4b23      	ldr	r3, [pc, #140]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800647a:	f003 0301 	and.w	r3, r3, #1
 800647e:	2b01      	cmp	r3, #1
 8006480:	d114      	bne.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006482:	f7fc f8bb 	bl	80025fc <HAL_GetTick>
 8006486:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006488:	e00a      	b.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800648a:	f7fc f8b7 	bl	80025fc <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006498:	4293      	cmp	r3, r2
 800649a:	d901      	bls.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800649c:	2303      	movs	r3, #3
 800649e:	e02a      	b.n	80064f6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80064a0:	4b18      	ldr	r3, [pc, #96]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d0ee      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	68db      	ldr	r3, [r3, #12]
 80064b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064b8:	d10d      	bne.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80064ba:	4b12      	ldr	r3, [pc, #72]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	68db      	ldr	r3, [r3, #12]
 80064c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80064ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80064ce:	490d      	ldr	r1, [pc, #52]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d0:	4313      	orrs	r3, r2
 80064d2:	608b      	str	r3, [r1, #8]
 80064d4:	e005      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80064d6:	4b0b      	ldr	r3, [pc, #44]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	4a0a      	ldr	r2, [pc, #40]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064dc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80064e0:	6093      	str	r3, [r2, #8]
 80064e2:	4b08      	ldr	r3, [pc, #32]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064e4:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064ee:	4905      	ldr	r1, [pc, #20]	@ (8006504 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80064f0:	4313      	orrs	r3, r2
 80064f2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80064f4:	2300      	movs	r3, #0
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3718      	adds	r7, #24
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	42470068 	.word	0x42470068
 8006504:	40023800 	.word	0x40023800
 8006508:	40007000 	.word	0x40007000
 800650c:	42470e40 	.word	0x42470e40

08006510 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006518:	2300      	movs	r3, #0
 800651a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800651c:	2300      	movs	r3, #0
 800651e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006524:	2300      	movs	r3, #0
 8006526:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d13f      	bne.n	80065ae <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800652e:	4b24      	ldr	r3, [pc, #144]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006530:	689b      	ldr	r3, [r3, #8]
 8006532:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006536:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d006      	beq.n	800654c <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006544:	d12f      	bne.n	80065a6 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006546:	4b1f      	ldr	r3, [pc, #124]	@ (80065c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006548:	617b      	str	r3, [r7, #20]
          break;
 800654a:	e02f      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800654c:	4b1c      	ldr	r3, [pc, #112]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006554:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006558:	d108      	bne.n	800656c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800655a:	4b19      	ldr	r3, [pc, #100]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006562:	4a19      	ldr	r2, [pc, #100]	@ (80065c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006564:	fbb2 f3f3 	udiv	r3, r2, r3
 8006568:	613b      	str	r3, [r7, #16]
 800656a:	e007      	b.n	800657c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800656c:	4b14      	ldr	r3, [pc, #80]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006574:	4a15      	ldr	r2, [pc, #84]	@ (80065cc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006576:	fbb2 f3f3 	udiv	r3, r2, r3
 800657a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800657c:	4b10      	ldr	r3, [pc, #64]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800657e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006582:	099b      	lsrs	r3, r3, #6
 8006584:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006590:	4b0b      	ldr	r3, [pc, #44]	@ (80065c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006592:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006596:	0f1b      	lsrs	r3, r3, #28
 8006598:	f003 0307 	and.w	r3, r3, #7
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a2:	617b      	str	r3, [r7, #20]
          break;
 80065a4:	e002      	b.n	80065ac <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
          break;
 80065aa:	bf00      	nop
        }
      }
      break;
 80065ac:	e000      	b.n	80065b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80065ae:	bf00      	nop
    }
  }
  return frequency;
 80065b0:	697b      	ldr	r3, [r7, #20]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	371c      	adds	r7, #28
 80065b6:	46bd      	mov	sp, r7
 80065b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop
 80065c0:	40023800 	.word	0x40023800
 80065c4:	00bb8000 	.word	0x00bb8000
 80065c8:	007a1200 	.word	0x007a1200
 80065cc:	00f42400 	.word	0x00f42400

080065d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d101      	bne.n	80065e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e01c      	b.n	800661c <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	795b      	ldrb	r3, [r3, #5]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d105      	bne.n	80065f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fb fdec 	bl	80021d0 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0204 	orr.w	r2, r2, #4
 800660c:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	2201      	movs	r2, #1
 8006612:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800661a:	2300      	movs	r3, #0
}
 800661c:	4618      	mov	r0, r3
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}

08006624 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8006624:	b580      	push	{r7, lr}
 8006626:	b084      	sub	sp, #16
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
 800662c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800662e:	2300      	movs	r3, #0
 8006630:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	791b      	ldrb	r3, [r3, #4]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d101      	bne.n	800663e <HAL_RNG_GenerateRandomNumber+0x1a>
 800663a:	2302      	movs	r3, #2
 800663c:	e044      	b.n	80066c8 <HAL_RNG_GenerateRandomNumber+0xa4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	795b      	ldrb	r3, [r3, #5]
 8006648:	b2db      	uxtb	r3, r3
 800664a:	2b01      	cmp	r3, #1
 800664c:	d133      	bne.n	80066b6 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2202      	movs	r2, #2
 8006652:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006654:	f7fb ffd2 	bl	80025fc <HAL_GetTick>
 8006658:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800665a:	e018      	b.n	800668e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800665c:	f7fb ffce 	bl	80025fc <HAL_GetTick>
 8006660:	4602      	mov	r2, r0
 8006662:	68bb      	ldr	r3, [r7, #8]
 8006664:	1ad3      	subs	r3, r2, r3
 8006666:	2b02      	cmp	r3, #2
 8006668:	d911      	bls.n	800668e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	f003 0301 	and.w	r3, r3, #1
 8006674:	2b01      	cmp	r3, #1
 8006676:	d00a      	beq.n	800668e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2202      	movs	r2, #2
 8006682:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e01c      	b.n	80066c8 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	f003 0301 	and.w	r3, r3, #1
 8006698:	2b01      	cmp	r3, #1
 800669a:	d1df      	bne.n	800665c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	689a      	ldr	r2, [r3, #8]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	68da      	ldr	r2, [r3, #12]
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	715a      	strb	r2, [r3, #5]
 80066b4:	e004      	b.n	80066c0 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2204      	movs	r2, #4
 80066ba:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
 80066be:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	711a      	strb	r2, [r3, #4]

  return status;
 80066c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}

080066d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b082      	sub	sp, #8
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d101      	bne.n	80066e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e07b      	b.n	80067da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d108      	bne.n	80066fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066f2:	d009      	beq.n	8006708 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	61da      	str	r2, [r3, #28]
 80066fa:	e005      	b.n	8006708 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2200      	movs	r2, #0
 8006700:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2200      	movs	r2, #0
 8006706:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2200      	movs	r2, #0
 800670c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006714:	b2db      	uxtb	r3, r3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d106      	bne.n	8006728 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f7fb fd76 	bl	8002214 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800673e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006750:	431a      	orrs	r2, r3
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800675a:	431a      	orrs	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	431a      	orrs	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	695b      	ldr	r3, [r3, #20]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	431a      	orrs	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	699b      	ldr	r3, [r3, #24]
 8006774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006778:	431a      	orrs	r2, r3
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	69db      	ldr	r3, [r3, #28]
 800677e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006782:	431a      	orrs	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6a1b      	ldr	r3, [r3, #32]
 8006788:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800678c:	ea42 0103 	orr.w	r1, r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006794:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	430a      	orrs	r2, r1
 800679e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	699b      	ldr	r3, [r3, #24]
 80067a4:	0c1b      	lsrs	r3, r3, #16
 80067a6:	f003 0104 	and.w	r1, r3, #4
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ae:	f003 0210 	and.w	r2, r3, #16
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	430a      	orrs	r2, r1
 80067b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	69da      	ldr	r2, [r3, #28]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80067c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b082      	sub	sp, #8
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067f0:	2301      	movs	r3, #1
 80067f2:	e042      	b.n	800687a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d106      	bne.n	800680e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f7fb fd4b 	bl	80022a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	2224      	movs	r2, #36	@ 0x24
 8006812:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68da      	ldr	r2, [r3, #12]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006824:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f972 	bl	8006b10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800683a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695a      	ldr	r2, [r3, #20]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800684a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800685a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2200      	movs	r2, #0
 8006860:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2220      	movs	r2, #32
 800686e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2200      	movs	r2, #0
 8006876:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006878:	2300      	movs	r3, #0
}
 800687a:	4618      	mov	r0, r3
 800687c:	3708      	adds	r7, #8
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b08a      	sub	sp, #40	@ 0x28
 8006886:	af02      	add	r7, sp, #8
 8006888:	60f8      	str	r0, [r7, #12]
 800688a:	60b9      	str	r1, [r7, #8]
 800688c:	603b      	str	r3, [r7, #0]
 800688e:	4613      	mov	r3, r2
 8006890:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b20      	cmp	r3, #32
 80068a0:	d175      	bne.n	800698e <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_UART_Transmit+0x2c>
 80068a8:	88fb      	ldrh	r3, [r7, #6]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e06e      	b.n	8006990 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2200      	movs	r2, #0
 80068b6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2221      	movs	r2, #33	@ 0x21
 80068bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068c0:	f7fb fe9c 	bl	80025fc <HAL_GetTick>
 80068c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	88fa      	ldrh	r2, [r7, #6]
 80068ca:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	88fa      	ldrh	r2, [r7, #6]
 80068d0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	689b      	ldr	r3, [r3, #8]
 80068d6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068da:	d108      	bne.n	80068ee <HAL_UART_Transmit+0x6c>
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d104      	bne.n	80068ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068e4:	2300      	movs	r3, #0
 80068e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068e8:	68bb      	ldr	r3, [r7, #8]
 80068ea:	61bb      	str	r3, [r7, #24]
 80068ec:	e003      	b.n	80068f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068f2:	2300      	movs	r3, #0
 80068f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068f6:	e02e      	b.n	8006956 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	9300      	str	r3, [sp, #0]
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2200      	movs	r2, #0
 8006900:	2180      	movs	r1, #128	@ 0x80
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 f848 	bl	8006998 <UART_WaitOnFlagUntilTimeout>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2220      	movs	r2, #32
 8006912:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006916:	2303      	movs	r3, #3
 8006918:	e03a      	b.n	8006990 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10b      	bne.n	8006938 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	461a      	mov	r2, r3
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800692e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	3302      	adds	r3, #2
 8006934:	61bb      	str	r3, [r7, #24]
 8006936:	e007      	b.n	8006948 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006938:	69fb      	ldr	r3, [r7, #28]
 800693a:	781a      	ldrb	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	3301      	adds	r3, #1
 8006946:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800694c:	b29b      	uxth	r3, r3
 800694e:	3b01      	subs	r3, #1
 8006950:	b29a      	uxth	r2, r3
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800695a:	b29b      	uxth	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1cb      	bne.n	80068f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	9300      	str	r3, [sp, #0]
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	2200      	movs	r2, #0
 8006968:	2140      	movs	r1, #64	@ 0x40
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 f814 	bl	8006998 <UART_WaitOnFlagUntilTimeout>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d005      	beq.n	8006982 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2220      	movs	r2, #32
 800697a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e006      	b.n	8006990 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2220      	movs	r2, #32
 8006986:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	e000      	b.n	8006990 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800698e:	2302      	movs	r3, #2
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3720      	adds	r7, #32
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}

08006998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	603b      	str	r3, [r7, #0]
 80069a4:	4613      	mov	r3, r2
 80069a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069a8:	e03b      	b.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b0:	d037      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069b2:	f7fb fe23 	bl	80025fc <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	6a3a      	ldr	r2, [r7, #32]
 80069be:	429a      	cmp	r2, r3
 80069c0:	d302      	bcc.n	80069c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d101      	bne.n	80069cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e03a      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 0304 	and.w	r3, r3, #4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d023      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b80      	cmp	r3, #128	@ 0x80
 80069de:	d020      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x8a>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	2b40      	cmp	r3, #64	@ 0x40
 80069e4:	d01d      	beq.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 0308 	and.w	r3, r3, #8
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	d116      	bne.n	8006a22 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80069f4:	2300      	movs	r3, #0
 80069f6:	617b      	str	r3, [r7, #20]
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	685b      	ldr	r3, [r3, #4]
 8006a06:	617b      	str	r3, [r7, #20]
 8006a08:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a0a:	68f8      	ldr	r0, [r7, #12]
 8006a0c:	f000 f81d 	bl	8006a4a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2208      	movs	r2, #8
 8006a14:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e00f      	b.n	8006a42 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	4013      	ands	r3, r2
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	bf0c      	ite	eq
 8006a32:	2301      	moveq	r3, #1
 8006a34:	2300      	movne	r3, #0
 8006a36:	b2db      	uxtb	r3, r3
 8006a38:	461a      	mov	r2, r3
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d0b4      	beq.n	80069aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3718      	adds	r7, #24
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b095      	sub	sp, #84	@ 0x54
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	330c      	adds	r3, #12
 8006a58:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a64:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	330c      	adds	r3, #12
 8006a70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a72:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a76:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a7a:	e841 2300 	strex	r3, r2, [r1]
 8006a7e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d1e5      	bne.n	8006a52 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3314      	adds	r3, #20
 8006a8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8e:	6a3b      	ldr	r3, [r7, #32]
 8006a90:	e853 3f00 	ldrex	r3, [r3]
 8006a94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	f023 0301 	bic.w	r3, r3, #1
 8006a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	3314      	adds	r3, #20
 8006aa4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006aa6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006aa8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aaa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006aac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aae:	e841 2300 	strex	r3, r2, [r1]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d1e5      	bne.n	8006a86 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006abe:	2b01      	cmp	r3, #1
 8006ac0:	d119      	bne.n	8006af6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	330c      	adds	r3, #12
 8006ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	e853 3f00 	ldrex	r3, [r3]
 8006ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ad2:	68bb      	ldr	r3, [r7, #8]
 8006ad4:	f023 0310 	bic.w	r3, r3, #16
 8006ad8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	330c      	adds	r3, #12
 8006ae0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006ae2:	61ba      	str	r2, [r7, #24]
 8006ae4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae6:	6979      	ldr	r1, [r7, #20]
 8006ae8:	69ba      	ldr	r2, [r7, #24]
 8006aea:	e841 2300 	strex	r3, r2, [r1]
 8006aee:	613b      	str	r3, [r7, #16]
   return(result);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d1e5      	bne.n	8006ac2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2220      	movs	r2, #32
 8006afa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b04:	bf00      	nop
 8006b06:	3754      	adds	r7, #84	@ 0x54
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b14:	b0c0      	sub	sp, #256	@ 0x100
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b2c:	68d9      	ldr	r1, [r3, #12]
 8006b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b32:	681a      	ldr	r2, [r3, #0]
 8006b34:	ea40 0301 	orr.w	r3, r0, r1
 8006b38:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	431a      	orrs	r2, r3
 8006b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006b68:	f021 010c 	bic.w	r1, r1, #12
 8006b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006b76:	430b      	orrs	r3, r1
 8006b78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006b7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	695b      	ldr	r3, [r3, #20]
 8006b82:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b8a:	6999      	ldr	r1, [r3, #24]
 8006b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	ea40 0301 	orr.w	r3, r0, r1
 8006b96:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	4b8f      	ldr	r3, [pc, #572]	@ (8006ddc <UART_SetConfig+0x2cc>)
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d005      	beq.n	8006bb0 <UART_SetConfig+0xa0>
 8006ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	4b8d      	ldr	r3, [pc, #564]	@ (8006de0 <UART_SetConfig+0x2d0>)
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d104      	bne.n	8006bba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006bb0:	f7ff fbb8 	bl	8006324 <HAL_RCC_GetPCLK2Freq>
 8006bb4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006bb8:	e003      	b.n	8006bc2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bba:	f7ff fb9f 	bl	80062fc <HAL_RCC_GetPCLK1Freq>
 8006bbe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc6:	69db      	ldr	r3, [r3, #28]
 8006bc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006bcc:	f040 810c 	bne.w	8006de8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006bd0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006bda:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006bde:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006be2:	4622      	mov	r2, r4
 8006be4:	462b      	mov	r3, r5
 8006be6:	1891      	adds	r1, r2, r2
 8006be8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006bea:	415b      	adcs	r3, r3
 8006bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006bee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006bf2:	4621      	mov	r1, r4
 8006bf4:	eb12 0801 	adds.w	r8, r2, r1
 8006bf8:	4629      	mov	r1, r5
 8006bfa:	eb43 0901 	adc.w	r9, r3, r1
 8006bfe:	f04f 0200 	mov.w	r2, #0
 8006c02:	f04f 0300 	mov.w	r3, #0
 8006c06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006c0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006c0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006c12:	4690      	mov	r8, r2
 8006c14:	4699      	mov	r9, r3
 8006c16:	4623      	mov	r3, r4
 8006c18:	eb18 0303 	adds.w	r3, r8, r3
 8006c1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c20:	462b      	mov	r3, r5
 8006c22:	eb49 0303 	adc.w	r3, r9, r3
 8006c26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006c36:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006c3a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006c3e:	460b      	mov	r3, r1
 8006c40:	18db      	adds	r3, r3, r3
 8006c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8006c44:	4613      	mov	r3, r2
 8006c46:	eb42 0303 	adc.w	r3, r2, r3
 8006c4a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006c4c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006c50:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006c54:	f7f9 fb0c 	bl	8000270 <__aeabi_uldivmod>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	460b      	mov	r3, r1
 8006c5c:	4b61      	ldr	r3, [pc, #388]	@ (8006de4 <UART_SetConfig+0x2d4>)
 8006c5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006c62:	095b      	lsrs	r3, r3, #5
 8006c64:	011c      	lsls	r4, r3, #4
 8006c66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006c70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006c74:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006c78:	4642      	mov	r2, r8
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	1891      	adds	r1, r2, r2
 8006c7e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006c80:	415b      	adcs	r3, r3
 8006c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c84:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006c88:	4641      	mov	r1, r8
 8006c8a:	eb12 0a01 	adds.w	sl, r2, r1
 8006c8e:	4649      	mov	r1, r9
 8006c90:	eb43 0b01 	adc.w	fp, r3, r1
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	f04f 0300 	mov.w	r3, #0
 8006c9c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006ca0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006ca4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006ca8:	4692      	mov	sl, r2
 8006caa:	469b      	mov	fp, r3
 8006cac:	4643      	mov	r3, r8
 8006cae:	eb1a 0303 	adds.w	r3, sl, r3
 8006cb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006cb6:	464b      	mov	r3, r9
 8006cb8:	eb4b 0303 	adc.w	r3, fp, r3
 8006cbc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006ccc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006cd0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006cd4:	460b      	mov	r3, r1
 8006cd6:	18db      	adds	r3, r3, r3
 8006cd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cda:	4613      	mov	r3, r2
 8006cdc:	eb42 0303 	adc.w	r3, r2, r3
 8006ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ce2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ce6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006cea:	f7f9 fac1 	bl	8000270 <__aeabi_uldivmod>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	4611      	mov	r1, r2
 8006cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8006de4 <UART_SetConfig+0x2d4>)
 8006cf6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cfa:	095b      	lsrs	r3, r3, #5
 8006cfc:	2264      	movs	r2, #100	@ 0x64
 8006cfe:	fb02 f303 	mul.w	r3, r2, r3
 8006d02:	1acb      	subs	r3, r1, r3
 8006d04:	00db      	lsls	r3, r3, #3
 8006d06:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006d0a:	4b36      	ldr	r3, [pc, #216]	@ (8006de4 <UART_SetConfig+0x2d4>)
 8006d0c:	fba3 2302 	umull	r2, r3, r3, r2
 8006d10:	095b      	lsrs	r3, r3, #5
 8006d12:	005b      	lsls	r3, r3, #1
 8006d14:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006d18:	441c      	add	r4, r3
 8006d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006d24:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006d28:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	1891      	adds	r1, r2, r2
 8006d32:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006d34:	415b      	adcs	r3, r3
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	1851      	adds	r1, r2, r1
 8006d40:	6339      	str	r1, [r7, #48]	@ 0x30
 8006d42:	4649      	mov	r1, r9
 8006d44:	414b      	adcs	r3, r1
 8006d46:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006d54:	4659      	mov	r1, fp
 8006d56:	00cb      	lsls	r3, r1, #3
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5e:	4651      	mov	r1, sl
 8006d60:	00ca      	lsls	r2, r1, #3
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006d70:	464b      	mov	r3, r9
 8006d72:	460a      	mov	r2, r1
 8006d74:	eb42 0303 	adc.w	r3, r2, r3
 8006d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006d88:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006d8c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006d90:	460b      	mov	r3, r1
 8006d92:	18db      	adds	r3, r3, r3
 8006d94:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d96:	4613      	mov	r3, r2
 8006d98:	eb42 0303 	adc.w	r3, r2, r3
 8006d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006d9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006da2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006da6:	f7f9 fa63 	bl	8000270 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4b0d      	ldr	r3, [pc, #52]	@ (8006de4 <UART_SetConfig+0x2d4>)
 8006db0:	fba3 1302 	umull	r1, r3, r3, r2
 8006db4:	095b      	lsrs	r3, r3, #5
 8006db6:	2164      	movs	r1, #100	@ 0x64
 8006db8:	fb01 f303 	mul.w	r3, r1, r3
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	00db      	lsls	r3, r3, #3
 8006dc0:	3332      	adds	r3, #50	@ 0x32
 8006dc2:	4a08      	ldr	r2, [pc, #32]	@ (8006de4 <UART_SetConfig+0x2d4>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	f003 0207 	and.w	r2, r3, #7
 8006dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4422      	add	r2, r4
 8006dd6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006dd8:	e106      	b.n	8006fe8 <UART_SetConfig+0x4d8>
 8006dda:	bf00      	nop
 8006ddc:	40011000 	.word	0x40011000
 8006de0:	40011400 	.word	0x40011400
 8006de4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006de8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dec:	2200      	movs	r2, #0
 8006dee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006df2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006df6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006dfa:	4642      	mov	r2, r8
 8006dfc:	464b      	mov	r3, r9
 8006dfe:	1891      	adds	r1, r2, r2
 8006e00:	6239      	str	r1, [r7, #32]
 8006e02:	415b      	adcs	r3, r3
 8006e04:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e0a:	4641      	mov	r1, r8
 8006e0c:	1854      	adds	r4, r2, r1
 8006e0e:	4649      	mov	r1, r9
 8006e10:	eb43 0501 	adc.w	r5, r3, r1
 8006e14:	f04f 0200 	mov.w	r2, #0
 8006e18:	f04f 0300 	mov.w	r3, #0
 8006e1c:	00eb      	lsls	r3, r5, #3
 8006e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e22:	00e2      	lsls	r2, r4, #3
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	4643      	mov	r3, r8
 8006e2a:	18e3      	adds	r3, r4, r3
 8006e2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006e30:	464b      	mov	r3, r9
 8006e32:	eb45 0303 	adc.w	r3, r5, r3
 8006e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3e:	685b      	ldr	r3, [r3, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006e46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006e56:	4629      	mov	r1, r5
 8006e58:	008b      	lsls	r3, r1, #2
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e60:	4621      	mov	r1, r4
 8006e62:	008a      	lsls	r2, r1, #2
 8006e64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006e68:	f7f9 fa02 	bl	8000270 <__aeabi_uldivmod>
 8006e6c:	4602      	mov	r2, r0
 8006e6e:	460b      	mov	r3, r1
 8006e70:	4b60      	ldr	r3, [pc, #384]	@ (8006ff4 <UART_SetConfig+0x4e4>)
 8006e72:	fba3 2302 	umull	r2, r3, r3, r2
 8006e76:	095b      	lsrs	r3, r3, #5
 8006e78:	011c      	lsls	r4, r3, #4
 8006e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e7e:	2200      	movs	r2, #0
 8006e80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006e84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006e88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006e8c:	4642      	mov	r2, r8
 8006e8e:	464b      	mov	r3, r9
 8006e90:	1891      	adds	r1, r2, r2
 8006e92:	61b9      	str	r1, [r7, #24]
 8006e94:	415b      	adcs	r3, r3
 8006e96:	61fb      	str	r3, [r7, #28]
 8006e98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e9c:	4641      	mov	r1, r8
 8006e9e:	1851      	adds	r1, r2, r1
 8006ea0:	6139      	str	r1, [r7, #16]
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	414b      	adcs	r3, r1
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	f04f 0200 	mov.w	r2, #0
 8006eac:	f04f 0300 	mov.w	r3, #0
 8006eb0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006eb4:	4659      	mov	r1, fp
 8006eb6:	00cb      	lsls	r3, r1, #3
 8006eb8:	4651      	mov	r1, sl
 8006eba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ebe:	4651      	mov	r1, sl
 8006ec0:	00ca      	lsls	r2, r1, #3
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4619      	mov	r1, r3
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4642      	mov	r2, r8
 8006eca:	189b      	adds	r3, r3, r2
 8006ecc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ed0:	464b      	mov	r3, r9
 8006ed2:	460a      	mov	r2, r1
 8006ed4:	eb42 0303 	adc.w	r3, r2, r3
 8006ed8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006ee6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006ee8:	f04f 0200 	mov.w	r2, #0
 8006eec:	f04f 0300 	mov.w	r3, #0
 8006ef0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006ef4:	4649      	mov	r1, r9
 8006ef6:	008b      	lsls	r3, r1, #2
 8006ef8:	4641      	mov	r1, r8
 8006efa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006efe:	4641      	mov	r1, r8
 8006f00:	008a      	lsls	r2, r1, #2
 8006f02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f06:	f7f9 f9b3 	bl	8000270 <__aeabi_uldivmod>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	4b38      	ldr	r3, [pc, #224]	@ (8006ff4 <UART_SetConfig+0x4e4>)
 8006f12:	fba3 2301 	umull	r2, r3, r3, r1
 8006f16:	095b      	lsrs	r3, r3, #5
 8006f18:	2264      	movs	r2, #100	@ 0x64
 8006f1a:	fb02 f303 	mul.w	r3, r2, r3
 8006f1e:	1acb      	subs	r3, r1, r3
 8006f20:	011b      	lsls	r3, r3, #4
 8006f22:	3332      	adds	r3, #50	@ 0x32
 8006f24:	4a33      	ldr	r2, [pc, #204]	@ (8006ff4 <UART_SetConfig+0x4e4>)
 8006f26:	fba2 2303 	umull	r2, r3, r2, r3
 8006f2a:	095b      	lsrs	r3, r3, #5
 8006f2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006f30:	441c      	add	r4, r3
 8006f32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f36:	2200      	movs	r2, #0
 8006f38:	673b      	str	r3, [r7, #112]	@ 0x70
 8006f3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8006f3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006f40:	4642      	mov	r2, r8
 8006f42:	464b      	mov	r3, r9
 8006f44:	1891      	adds	r1, r2, r2
 8006f46:	60b9      	str	r1, [r7, #8]
 8006f48:	415b      	adcs	r3, r3
 8006f4a:	60fb      	str	r3, [r7, #12]
 8006f4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f50:	4641      	mov	r1, r8
 8006f52:	1851      	adds	r1, r2, r1
 8006f54:	6039      	str	r1, [r7, #0]
 8006f56:	4649      	mov	r1, r9
 8006f58:	414b      	adcs	r3, r1
 8006f5a:	607b      	str	r3, [r7, #4]
 8006f5c:	f04f 0200 	mov.w	r2, #0
 8006f60:	f04f 0300 	mov.w	r3, #0
 8006f64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006f68:	4659      	mov	r1, fp
 8006f6a:	00cb      	lsls	r3, r1, #3
 8006f6c:	4651      	mov	r1, sl
 8006f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f72:	4651      	mov	r1, sl
 8006f74:	00ca      	lsls	r2, r1, #3
 8006f76:	4610      	mov	r0, r2
 8006f78:	4619      	mov	r1, r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	4642      	mov	r2, r8
 8006f7e:	189b      	adds	r3, r3, r2
 8006f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006f82:	464b      	mov	r3, r9
 8006f84:	460a      	mov	r2, r1
 8006f86:	eb42 0303 	adc.w	r3, r2, r3
 8006f8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f96:	667a      	str	r2, [r7, #100]	@ 0x64
 8006f98:	f04f 0200 	mov.w	r2, #0
 8006f9c:	f04f 0300 	mov.w	r3, #0
 8006fa0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006fa4:	4649      	mov	r1, r9
 8006fa6:	008b      	lsls	r3, r1, #2
 8006fa8:	4641      	mov	r1, r8
 8006faa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fae:	4641      	mov	r1, r8
 8006fb0:	008a      	lsls	r2, r1, #2
 8006fb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006fb6:	f7f9 f95b 	bl	8000270 <__aeabi_uldivmod>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff4 <UART_SetConfig+0x4e4>)
 8006fc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006fc4:	095b      	lsrs	r3, r3, #5
 8006fc6:	2164      	movs	r1, #100	@ 0x64
 8006fc8:	fb01 f303 	mul.w	r3, r1, r3
 8006fcc:	1ad3      	subs	r3, r2, r3
 8006fce:	011b      	lsls	r3, r3, #4
 8006fd0:	3332      	adds	r3, #50	@ 0x32
 8006fd2:	4a08      	ldr	r2, [pc, #32]	@ (8006ff4 <UART_SetConfig+0x4e4>)
 8006fd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd8:	095b      	lsrs	r3, r3, #5
 8006fda:	f003 020f 	and.w	r2, r3, #15
 8006fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4422      	add	r2, r4
 8006fe6:	609a      	str	r2, [r3, #8]
}
 8006fe8:	bf00      	nop
 8006fea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff4:	51eb851f 	.word	0x51eb851f

08006ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b084      	sub	sp, #16
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	f107 001c 	add.w	r0, r7, #28
 8007006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800700a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800700e:	2b01      	cmp	r3, #1
 8007010:	d123      	bne.n	800705a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007016:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800703a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800703e:	2b01      	cmp	r3, #1
 8007040:	d105      	bne.n	800704e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f9dc 	bl	800740c <USB_CoreReset>
 8007054:	4603      	mov	r3, r0
 8007056:	73fb      	strb	r3, [r7, #15]
 8007058:	e01b      	b.n	8007092 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	68db      	ldr	r3, [r3, #12]
 800705e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f9d0 	bl	800740c <USB_CoreReset>
 800706c:	4603      	mov	r3, r0
 800706e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007070:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007074:	2b00      	cmp	r3, #0
 8007076:	d106      	bne.n	8007086 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	639a      	str	r2, [r3, #56]	@ 0x38
 8007084:	e005      	b.n	8007092 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800708a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007092:	7fbb      	ldrb	r3, [r7, #30]
 8007094:	2b01      	cmp	r3, #1
 8007096:	d10b      	bne.n	80070b0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	f043 0206 	orr.w	r2, r3, #6
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f043 0220 	orr.w	r2, r3, #32
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80070b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070bc:	b004      	add	sp, #16
 80070be:	4770      	bx	lr

080070c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689b      	ldr	r3, [r3, #8]
 80070cc:	f043 0201 	orr.w	r2, r3, #1
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	370c      	adds	r7, #12
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr

080070e2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070e2:	b480      	push	{r7}
 80070e4:	b083      	sub	sp, #12
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f023 0201 	bic.w	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070f6:	2300      	movs	r3, #0
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	370c      	adds	r7, #12
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007120:	78fb      	ldrb	r3, [r7, #3]
 8007122:	2b01      	cmp	r3, #1
 8007124:	d115      	bne.n	8007152 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007132:	200a      	movs	r0, #10
 8007134:	f7fb fa6e 	bl	8002614 <HAL_Delay>
      ms += 10U;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	330a      	adds	r3, #10
 800713c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800713e:	6878      	ldr	r0, [r7, #4]
 8007140:	f000 f956 	bl	80073f0 <USB_GetMode>
 8007144:	4603      	mov	r3, r0
 8007146:	2b01      	cmp	r3, #1
 8007148:	d01e      	beq.n	8007188 <USB_SetCurrentMode+0x84>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2bc7      	cmp	r3, #199	@ 0xc7
 800714e:	d9f0      	bls.n	8007132 <USB_SetCurrentMode+0x2e>
 8007150:	e01a      	b.n	8007188 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007152:	78fb      	ldrb	r3, [r7, #3]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d115      	bne.n	8007184 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	68db      	ldr	r3, [r3, #12]
 800715c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007164:	200a      	movs	r0, #10
 8007166:	f7fb fa55 	bl	8002614 <HAL_Delay>
      ms += 10U;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	330a      	adds	r3, #10
 800716e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f000 f93d 	bl	80073f0 <USB_GetMode>
 8007176:	4603      	mov	r3, r0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d005      	beq.n	8007188 <USB_SetCurrentMode+0x84>
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007180:	d9f0      	bls.n	8007164 <USB_SetCurrentMode+0x60>
 8007182:	e001      	b.n	8007188 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	e005      	b.n	8007194 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2bc8      	cmp	r3, #200	@ 0xc8
 800718c:	d101      	bne.n	8007192 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e000      	b.n	8007194 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071b6:	d901      	bls.n	80071bc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071b8:	2303      	movs	r3, #3
 80071ba:	e01b      	b.n	80071f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	daf2      	bge.n	80071aa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	019b      	lsls	r3, r3, #6
 80071cc:	f043 0220 	orr.w	r2, r3, #32
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071e0:	d901      	bls.n	80071e6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071e2:	2303      	movs	r3, #3
 80071e4:	e006      	b.n	80071f4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	691b      	ldr	r3, [r3, #16]
 80071ea:	f003 0320 	and.w	r3, r3, #32
 80071ee:	2b20      	cmp	r3, #32
 80071f0:	d0f0      	beq.n	80071d4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071f2:	2300      	movs	r3, #0
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr

08007200 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007200:	b480      	push	{r7}
 8007202:	b085      	sub	sp, #20
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007218:	d901      	bls.n	800721e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e018      	b.n	8007250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	2b00      	cmp	r3, #0
 8007224:	daf2      	bge.n	800720c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007226:	2300      	movs	r3, #0
 8007228:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	2210      	movs	r2, #16
 800722e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	3301      	adds	r3, #1
 8007234:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800723c:	d901      	bls.n	8007242 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800723e:	2303      	movs	r3, #3
 8007240:	e006      	b.n	8007250 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	691b      	ldr	r3, [r3, #16]
 8007246:	f003 0310 	and.w	r3, r3, #16
 800724a:	2b10      	cmp	r3, #16
 800724c:	d0f0      	beq.n	8007230 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800724e:	2300      	movs	r3, #0
}
 8007250:	4618      	mov	r0, r3
 8007252:	3714      	adds	r7, #20
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800725c:	b480      	push	{r7}
 800725e:	b089      	sub	sp, #36	@ 0x24
 8007260:	af00      	add	r7, sp, #0
 8007262:	60f8      	str	r0, [r7, #12]
 8007264:	60b9      	str	r1, [r7, #8]
 8007266:	4611      	mov	r1, r2
 8007268:	461a      	mov	r2, r3
 800726a:	460b      	mov	r3, r1
 800726c:	71fb      	strb	r3, [r7, #7]
 800726e:	4613      	mov	r3, r2
 8007270:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800727a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800727e:	2b00      	cmp	r3, #0
 8007280:	d123      	bne.n	80072ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007282:	88bb      	ldrh	r3, [r7, #4]
 8007284:	3303      	adds	r3, #3
 8007286:	089b      	lsrs	r3, r3, #2
 8007288:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
 800728e:	e018      	b.n	80072c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007290:	79fb      	ldrb	r3, [r7, #7]
 8007292:	031a      	lsls	r2, r3, #12
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	4413      	add	r3, r2
 8007298:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800729c:	461a      	mov	r2, r3
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80072a4:	69fb      	ldr	r3, [r7, #28]
 80072a6:	3301      	adds	r3, #1
 80072a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	3301      	adds	r3, #1
 80072ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	3301      	adds	r3, #1
 80072b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	3301      	adds	r3, #1
 80072ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	3301      	adds	r3, #1
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	69ba      	ldr	r2, [r7, #24]
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	d3e2      	bcc.n	8007290 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072ca:	2300      	movs	r3, #0
}
 80072cc:	4618      	mov	r0, r3
 80072ce:	3724      	adds	r7, #36	@ 0x24
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072d8:	b480      	push	{r7}
 80072da:	b08b      	sub	sp, #44	@ 0x2c
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	4613      	mov	r3, r2
 80072e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072ee:	88fb      	ldrh	r3, [r7, #6]
 80072f0:	089b      	lsrs	r3, r3, #2
 80072f2:	b29b      	uxth	r3, r3
 80072f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072f6:	88fb      	ldrh	r3, [r7, #6]
 80072f8:	f003 0303 	and.w	r3, r3, #3
 80072fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072fe:	2300      	movs	r3, #0
 8007300:	623b      	str	r3, [r7, #32]
 8007302:	e014      	b.n	800732e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800730e:	601a      	str	r2, [r3, #0]
    pDest++;
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	3301      	adds	r3, #1
 8007314:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007318:	3301      	adds	r3, #1
 800731a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800731c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800731e:	3301      	adds	r3, #1
 8007320:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	3301      	adds	r3, #1
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	3301      	adds	r3, #1
 800732c:	623b      	str	r3, [r7, #32]
 800732e:	6a3a      	ldr	r2, [r7, #32]
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	429a      	cmp	r2, r3
 8007334:	d3e6      	bcc.n	8007304 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007336:	8bfb      	ldrh	r3, [r7, #30]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01e      	beq.n	800737a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800733c:	2300      	movs	r3, #0
 800733e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007346:	461a      	mov	r2, r3
 8007348:	f107 0310 	add.w	r3, r7, #16
 800734c:	6812      	ldr	r2, [r2, #0]
 800734e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007350:	693a      	ldr	r2, [r7, #16]
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	b2db      	uxtb	r3, r3
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	fa22 f303 	lsr.w	r3, r2, r3
 800735c:	b2da      	uxtb	r2, r3
 800735e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007360:	701a      	strb	r2, [r3, #0]
      i++;
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	3301      	adds	r3, #1
 8007366:	623b      	str	r3, [r7, #32]
      pDest++;
 8007368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800736a:	3301      	adds	r3, #1
 800736c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800736e:	8bfb      	ldrh	r3, [r7, #30]
 8007370:	3b01      	subs	r3, #1
 8007372:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007374:	8bfb      	ldrh	r3, [r7, #30]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d1ea      	bne.n	8007350 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800737a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800737c:	4618      	mov	r0, r3
 800737e:	372c      	adds	r7, #44	@ 0x2c
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007388:	b480      	push	{r7}
 800738a:	b085      	sub	sp, #20
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	695b      	ldr	r3, [r3, #20]
 8007394:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	699b      	ldr	r3, [r3, #24]
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4013      	ands	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80073a0:	68fb      	ldr	r3, [r7, #12]
}
 80073a2:	4618      	mov	r0, r3
 80073a4:	3714      	adds	r7, #20
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80073ae:	b480      	push	{r7}
 80073b0:	b085      	sub	sp, #20
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
 80073b6:	460b      	mov	r3, r1
 80073b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80073be:	78fb      	ldrb	r3, [r7, #3]
 80073c0:	015a      	lsls	r2, r3, #5
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	4413      	add	r3, r2
 80073c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073da:	68db      	ldr	r3, [r3, #12]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	4013      	ands	r3, r2
 80073e0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073e2:	68bb      	ldr	r3, [r7, #8]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3714      	adds	r7, #20
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695b      	ldr	r3, [r3, #20]
 80073fc:	f003 0301 	and.w	r3, r3, #1
}
 8007400:	4618      	mov	r0, r3
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800740c:	b480      	push	{r7}
 800740e:	b085      	sub	sp, #20
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007414:	2300      	movs	r3, #0
 8007416:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	3301      	adds	r3, #1
 800741c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007424:	d901      	bls.n	800742a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007426:	2303      	movs	r3, #3
 8007428:	e01b      	b.n	8007462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	691b      	ldr	r3, [r3, #16]
 800742e:	2b00      	cmp	r3, #0
 8007430:	daf2      	bge.n	8007418 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007432:	2300      	movs	r3, #0
 8007434:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	691b      	ldr	r3, [r3, #16]
 800743a:	f043 0201 	orr.w	r2, r3, #1
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	3301      	adds	r3, #1
 8007446:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800744e:	d901      	bls.n	8007454 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e006      	b.n	8007462 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b01      	cmp	r3, #1
 800745e:	d0f0      	beq.n	8007442 <USB_CoreReset+0x36>

  return HAL_OK;
 8007460:	2300      	movs	r3, #0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3714      	adds	r7, #20
 8007466:	46bd      	mov	sp, r7
 8007468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746c:	4770      	bx	lr
	...

08007470 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007470:	b084      	sub	sp, #16
 8007472:	b580      	push	{r7, lr}
 8007474:	b086      	sub	sp, #24
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800747e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007482:	2300      	movs	r3, #0
 8007484:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007490:	461a      	mov	r2, r3
 8007492:	2300      	movs	r3, #0
 8007494:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800749a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074a6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074b2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d119      	bne.n	80074fa <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80074c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d10a      	bne.n	80074e4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	68fa      	ldr	r2, [r7, #12]
 80074d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074dc:	f043 0304 	orr.w	r3, r3, #4
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e014      	b.n	800750e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074f2:	f023 0304 	bic.w	r3, r3, #4
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	e009      	b.n	800750e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007508:	f023 0304 	bic.w	r3, r3, #4
 800750c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800750e:	2110      	movs	r1, #16
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff fe43 	bl	800719c <USB_FlushTxFifo>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	f7ff fe6d 	bl	8007200 <USB_FlushRxFifo>
 8007526:	4603      	mov	r3, r0
 8007528:	2b00      	cmp	r3, #0
 800752a:	d001      	beq.n	8007530 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800752c:	2301      	movs	r3, #1
 800752e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007530:	2300      	movs	r3, #0
 8007532:	613b      	str	r3, [r7, #16]
 8007534:	e015      	b.n	8007562 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	015a      	lsls	r2, r3, #5
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4413      	add	r3, r2
 800753e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007542:	461a      	mov	r2, r3
 8007544:	f04f 33ff 	mov.w	r3, #4294967295
 8007548:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007556:	461a      	mov	r2, r3
 8007558:	2300      	movs	r3, #0
 800755a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	3301      	adds	r3, #1
 8007560:	613b      	str	r3, [r7, #16]
 8007562:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007566:	461a      	mov	r2, r3
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	4293      	cmp	r3, r2
 800756c:	d3e3      	bcc.n	8007536 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2200      	movs	r2, #0
 8007572:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f04f 32ff 	mov.w	r2, #4294967295
 800757a:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	4a18      	ldr	r2, [pc, #96]	@ (80075e0 <USB_HostInit+0x170>)
 8007580:	4293      	cmp	r3, r2
 8007582:	d10b      	bne.n	800759c <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800758a:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	4a15      	ldr	r2, [pc, #84]	@ (80075e4 <USB_HostInit+0x174>)
 8007590:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	4a14      	ldr	r2, [pc, #80]	@ (80075e8 <USB_HostInit+0x178>)
 8007596:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800759a:	e009      	b.n	80075b0 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2280      	movs	r2, #128	@ 0x80
 80075a0:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	4a11      	ldr	r2, [pc, #68]	@ (80075ec <USB_HostInit+0x17c>)
 80075a6:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4a11      	ldr	r2, [pc, #68]	@ (80075f0 <USB_HostInit+0x180>)
 80075ac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80075b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d105      	bne.n	80075c4 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	699b      	ldr	r3, [r3, #24]
 80075bc:	f043 0210 	orr.w	r2, r3, #16
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	699a      	ldr	r2, [r3, #24]
 80075c8:	4b0a      	ldr	r3, [pc, #40]	@ (80075f4 <USB_HostInit+0x184>)
 80075ca:	4313      	orrs	r3, r2
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80075d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3718      	adds	r7, #24
 80075d6:	46bd      	mov	sp, r7
 80075d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075dc:	b004      	add	sp, #16
 80075de:	4770      	bx	lr
 80075e0:	40040000 	.word	0x40040000
 80075e4:	01000200 	.word	0x01000200
 80075e8:	00e00300 	.word	0x00e00300
 80075ec:	00600080 	.word	0x00600080
 80075f0:	004000e0 	.word	0x004000e0
 80075f4:	a3200008 	.word	0xa3200008

080075f8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	460b      	mov	r3, r1
 8007602:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68fa      	ldr	r2, [r7, #12]
 8007612:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007616:	f023 0303 	bic.w	r3, r3, #3
 800761a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	f003 0303 	and.w	r3, r3, #3
 800762a:	68f9      	ldr	r1, [r7, #12]
 800762c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007630:	4313      	orrs	r3, r2
 8007632:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	2b01      	cmp	r3, #1
 8007638:	d107      	bne.n	800764a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007640:	461a      	mov	r2, r3
 8007642:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007646:	6053      	str	r3, [r2, #4]
 8007648:	e00c      	b.n	8007664 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800764a:	78fb      	ldrb	r3, [r7, #3]
 800764c:	2b02      	cmp	r3, #2
 800764e:	d107      	bne.n	8007660 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007656:	461a      	mov	r2, r3
 8007658:	f241 7370 	movw	r3, #6000	@ 0x1770
 800765c:	6053      	str	r3, [r2, #4]
 800765e:	e001      	b.n	8007664 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007660:	2301      	movs	r3, #1
 8007662:	e000      	b.n	8007666 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800767e:	2300      	movs	r3, #0
 8007680:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007692:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800769c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076a0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80076a2:	2064      	movs	r0, #100	@ 0x64
 80076a4:	f7fa ffb6 	bl	8002614 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076b4:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80076b6:	200a      	movs	r0, #10
 80076b8:	f7fa ffac 	bl	8002614 <HAL_Delay>

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80076c6:	b480      	push	{r7}
 80076c8:	b085      	sub	sp, #20
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80076ea:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d109      	bne.n	800770a <USB_DriveVbus+0x44>
 80076f6:	78fb      	ldrb	r3, [r7, #3]
 80076f8:	2b01      	cmp	r3, #1
 80076fa:	d106      	bne.n	800770a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	68fa      	ldr	r2, [r7, #12]
 8007700:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007708:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007710:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007714:	d109      	bne.n	800772a <USB_DriveVbus+0x64>
 8007716:	78fb      	ldrb	r3, [r7, #3]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d106      	bne.n	800772a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	68fa      	ldr	r2, [r7, #12]
 8007720:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007724:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007728:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3714      	adds	r7, #20
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007744:	2300      	movs	r3, #0
 8007746:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	0c5b      	lsrs	r3, r3, #17
 8007756:	f003 0303 	and.w	r3, r3, #3
}
 800775a:	4618      	mov	r0, r3
 800775c:	3714      	adds	r7, #20
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr

08007766 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007766:	b480      	push	{r7}
 8007768:	b085      	sub	sp, #20
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007778:	689b      	ldr	r3, [r3, #8]
 800777a:	b29b      	uxth	r3, r3
}
 800777c:	4618      	mov	r0, r3
 800777e:	3714      	adds	r7, #20
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	4608      	mov	r0, r1
 8007792:	4611      	mov	r1, r2
 8007794:	461a      	mov	r2, r3
 8007796:	4603      	mov	r3, r0
 8007798:	70fb      	strb	r3, [r7, #3]
 800779a:	460b      	mov	r3, r1
 800779c:	70bb      	strb	r3, [r7, #2]
 800779e:	4613      	mov	r3, r2
 80077a0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80077a2:	2300      	movs	r3, #0
 80077a4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80077aa:	78fb      	ldrb	r3, [r7, #3]
 80077ac:	015a      	lsls	r2, r3, #5
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	4413      	add	r3, r2
 80077b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077b6:	461a      	mov	r2, r3
 80077b8:	f04f 33ff 	mov.w	r3, #4294967295
 80077bc:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80077be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	d87c      	bhi.n	80078c0 <USB_HC_Init+0x138>
 80077c6:	a201      	add	r2, pc, #4	@ (adr r2, 80077cc <USB_HC_Init+0x44>)
 80077c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077cc:	080077dd 	.word	0x080077dd
 80077d0:	08007883 	.word	0x08007883
 80077d4:	080077dd 	.word	0x080077dd
 80077d8:	08007845 	.word	0x08007845
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077dc:	78fb      	ldrb	r3, [r7, #3]
 80077de:	015a      	lsls	r2, r3, #5
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	4413      	add	r3, r2
 80077e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e8:	461a      	mov	r2, r3
 80077ea:	f240 439d 	movw	r3, #1181	@ 0x49d
 80077ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80077f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	da10      	bge.n	800781a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077f8:	78fb      	ldrb	r3, [r7, #3]
 80077fa:	015a      	lsls	r2, r3, #5
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	4413      	add	r3, r2
 8007800:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	78fa      	ldrb	r2, [r7, #3]
 8007808:	0151      	lsls	r1, r2, #5
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	440a      	add	r2, r1
 800780e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007812:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007816:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007818:	e055      	b.n	80078c6 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a6f      	ldr	r2, [pc, #444]	@ (80079dc <USB_HC_Init+0x254>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d151      	bne.n	80078c6 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8007822:	78fb      	ldrb	r3, [r7, #3]
 8007824:	015a      	lsls	r2, r3, #5
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	4413      	add	r3, r2
 800782a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	78fa      	ldrb	r2, [r7, #3]
 8007832:	0151      	lsls	r1, r2, #5
 8007834:	693a      	ldr	r2, [r7, #16]
 8007836:	440a      	add	r2, r1
 8007838:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800783c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007840:	60d3      	str	r3, [r2, #12]
      break;
 8007842:	e040      	b.n	80078c6 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	015a      	lsls	r2, r3, #5
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	4413      	add	r3, r2
 800784c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007850:	461a      	mov	r2, r3
 8007852:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007856:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007858:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800785c:	2b00      	cmp	r3, #0
 800785e:	da34      	bge.n	80078ca <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007860:	78fb      	ldrb	r3, [r7, #3]
 8007862:	015a      	lsls	r2, r3, #5
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	4413      	add	r3, r2
 8007868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786c:	68db      	ldr	r3, [r3, #12]
 800786e:	78fa      	ldrb	r2, [r7, #3]
 8007870:	0151      	lsls	r1, r2, #5
 8007872:	693a      	ldr	r2, [r7, #16]
 8007874:	440a      	add	r2, r1
 8007876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800787e:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007880:	e023      	b.n	80078ca <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007882:	78fb      	ldrb	r3, [r7, #3]
 8007884:	015a      	lsls	r2, r3, #5
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	4413      	add	r3, r2
 800788a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800788e:	461a      	mov	r2, r3
 8007890:	f240 2325 	movw	r3, #549	@ 0x225
 8007894:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007896:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800789a:	2b00      	cmp	r3, #0
 800789c:	da17      	bge.n	80078ce <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800789e:	78fb      	ldrb	r3, [r7, #3]
 80078a0:	015a      	lsls	r2, r3, #5
 80078a2:	693b      	ldr	r3, [r7, #16]
 80078a4:	4413      	add	r3, r2
 80078a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	78fa      	ldrb	r2, [r7, #3]
 80078ae:	0151      	lsls	r1, r2, #5
 80078b0:	693a      	ldr	r2, [r7, #16]
 80078b2:	440a      	add	r2, r1
 80078b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078b8:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80078bc:	60d3      	str	r3, [r2, #12]
      }
      break;
 80078be:	e006      	b.n	80078ce <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	77fb      	strb	r3, [r7, #31]
      break;
 80078c4:	e004      	b.n	80078d0 <USB_HC_Init+0x148>
      break;
 80078c6:	bf00      	nop
 80078c8:	e002      	b.n	80078d0 <USB_HC_Init+0x148>
      break;
 80078ca:	bf00      	nop
 80078cc:	e000      	b.n	80078d0 <USB_HC_Init+0x148>
      break;
 80078ce:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	015a      	lsls	r2, r3, #5
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	4413      	add	r3, r2
 80078d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078dc:	461a      	mov	r2, r3
 80078de:	2300      	movs	r3, #0
 80078e0:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80078e2:	78fb      	ldrb	r3, [r7, #3]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	78fa      	ldrb	r2, [r7, #3]
 80078f2:	0151      	lsls	r1, r2, #5
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	440a      	add	r2, r1
 80078f8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078fc:	f043 0302 	orr.w	r3, r3, #2
 8007900:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	78fb      	ldrb	r3, [r7, #3]
 800790c:	f003 030f 	and.w	r3, r3, #15
 8007910:	2101      	movs	r1, #1
 8007912:	fa01 f303 	lsl.w	r3, r1, r3
 8007916:	6939      	ldr	r1, [r7, #16]
 8007918:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800791c:	4313      	orrs	r3, r2
 800791e:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	699b      	ldr	r3, [r3, #24]
 8007924:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800792c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007930:	2b00      	cmp	r3, #0
 8007932:	da03      	bge.n	800793c <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007934:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007938:	61bb      	str	r3, [r7, #24]
 800793a:	e001      	b.n	8007940 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800793c:	2300      	movs	r3, #0
 800793e:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7ff fef9 	bl	8007738 <USB_GetHostSpeed>
 8007946:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007948:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800794c:	2b02      	cmp	r3, #2
 800794e:	d106      	bne.n	800795e <USB_HC_Init+0x1d6>
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2b02      	cmp	r3, #2
 8007954:	d003      	beq.n	800795e <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007956:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800795a:	617b      	str	r3, [r7, #20]
 800795c:	e001      	b.n	8007962 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800795e:	2300      	movs	r3, #0
 8007960:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007962:	787b      	ldrb	r3, [r7, #1]
 8007964:	059b      	lsls	r3, r3, #22
 8007966:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800796a:	78bb      	ldrb	r3, [r7, #2]
 800796c:	02db      	lsls	r3, r3, #11
 800796e:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007972:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007974:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007978:	049b      	lsls	r3, r3, #18
 800797a:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800797e:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007980:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8007982:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007986:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007988:	69bb      	ldr	r3, [r7, #24]
 800798a:	431a      	orrs	r2, r3
 800798c:	697b      	ldr	r3, [r7, #20]
 800798e:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007990:	78fa      	ldrb	r2, [r7, #3]
 8007992:	0151      	lsls	r1, r2, #5
 8007994:	693a      	ldr	r2, [r7, #16]
 8007996:	440a      	add	r2, r1
 8007998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800799c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80079a0:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80079a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079a6:	2b03      	cmp	r3, #3
 80079a8:	d003      	beq.n	80079b2 <USB_HC_Init+0x22a>
 80079aa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d10f      	bne.n	80079d2 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80079b2:	78fb      	ldrb	r3, [r7, #3]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079d0:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80079d2:	7ffb      	ldrb	r3, [r7, #31]
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3720      	adds	r7, #32
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	40040000 	.word	0x40040000

080079e0 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b08c      	sub	sp, #48	@ 0x30
 80079e4:	af02      	add	r7, sp, #8
 80079e6:	60f8      	str	r0, [r7, #12]
 80079e8:	60b9      	str	r1, [r7, #8]
 80079ea:	4613      	mov	r3, r2
 80079ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	785b      	ldrb	r3, [r3, #1]
 80079f6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80079f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079fc:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4a5d      	ldr	r2, [pc, #372]	@ (8007b78 <USB_HC_StartXfer+0x198>)
 8007a02:	4293      	cmp	r3, r2
 8007a04:	d12f      	bne.n	8007a66 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007a06:	79fb      	ldrb	r3, [r7, #7]
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d11c      	bne.n	8007a46 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	7c9b      	ldrb	r3, [r3, #18]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d003      	beq.n	8007a1c <USB_HC_StartXfer+0x3c>
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	7c9b      	ldrb	r3, [r3, #18]
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d124      	bne.n	8007a66 <USB_HC_StartXfer+0x86>
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	799b      	ldrb	r3, [r3, #6]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d120      	bne.n	8007a66 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a24:	69fb      	ldr	r3, [r7, #28]
 8007a26:	015a      	lsls	r2, r3, #5
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	4413      	add	r3, r2
 8007a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a30:	68db      	ldr	r3, [r3, #12]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	0151      	lsls	r1, r2, #5
 8007a36:	6a3a      	ldr	r2, [r7, #32]
 8007a38:	440a      	add	r2, r1
 8007a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a42:	60d3      	str	r3, [r2, #12]
 8007a44:	e00f      	b.n	8007a66 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	791b      	ldrb	r3, [r3, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d10b      	bne.n	8007a66 <USB_HC_StartXfer+0x86>
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	795b      	ldrb	r3, [r3, #5]
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d107      	bne.n	8007a66 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007a56:	68bb      	ldr	r3, [r7, #8]
 8007a58:	785b      	ldrb	r3, [r3, #1]
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	68f8      	ldr	r0, [r7, #12]
 8007a5e:	f000 fb6b 	bl	8008138 <USB_DoPing>
        return HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	e232      	b.n	8007ecc <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	799b      	ldrb	r3, [r3, #6]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d158      	bne.n	8007b20 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	78db      	ldrb	r3, [r3, #3]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a7a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	8a92      	ldrh	r2, [r2, #20]
 8007a80:	fb03 f202 	mul.w	r2, r3, r2
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	61da      	str	r2, [r3, #28]
 8007a88:	e07c      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	7c9b      	ldrb	r3, [r3, #18]
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	d130      	bne.n	8007af4 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	6a1b      	ldr	r3, [r3, #32]
 8007a96:	2bbc      	cmp	r3, #188	@ 0xbc
 8007a98:	d918      	bls.n	8007acc <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	8a9b      	ldrh	r3, [r3, #20]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	69da      	ldr	r2, [r3, #28]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d003      	beq.n	8007abc <USB_HC_StartXfer+0xdc>
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	68db      	ldr	r3, [r3, #12]
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d103      	bne.n	8007ac4 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	60da      	str	r2, [r3, #12]
 8007ac2:	e05f      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007ac4:	68bb      	ldr	r3, [r7, #8]
 8007ac6:	2201      	movs	r2, #1
 8007ac8:	60da      	str	r2, [r3, #12]
 8007aca:	e05b      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	6a1a      	ldr	r2, [r3, #32]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d007      	beq.n	8007aec <USB_HC_StartXfer+0x10c>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	68db      	ldr	r3, [r3, #12]
 8007ae0:	2b02      	cmp	r3, #2
 8007ae2:	d003      	beq.n	8007aec <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	2204      	movs	r2, #4
 8007ae8:	60da      	str	r2, [r3, #12]
 8007aea:	e04b      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	2203      	movs	r2, #3
 8007af0:	60da      	str	r2, [r3, #12]
 8007af2:	e047      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007af4:	79fb      	ldrb	r3, [r7, #7]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d10d      	bne.n	8007b16 <USB_HC_StartXfer+0x136>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	6a1b      	ldr	r3, [r3, #32]
 8007afe:	68ba      	ldr	r2, [r7, #8]
 8007b00:	8a92      	ldrh	r2, [r2, #20]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d907      	bls.n	8007b16 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	8a92      	ldrh	r2, [r2, #20]
 8007b0c:	fb03 f202 	mul.w	r2, r3, r2
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	61da      	str	r2, [r3, #28]
 8007b14:	e036      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	6a1a      	ldr	r2, [r3, #32]
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	61da      	str	r2, [r3, #28]
 8007b1e:	e031      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6a1b      	ldr	r3, [r3, #32]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d018      	beq.n	8007b5a <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	6a1b      	ldr	r3, [r3, #32]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	8a92      	ldrh	r2, [r2, #20]
 8007b30:	4413      	add	r3, r2
 8007b32:	3b01      	subs	r3, #1
 8007b34:	68ba      	ldr	r2, [r7, #8]
 8007b36:	8a92      	ldrh	r2, [r2, #20]
 8007b38:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b3c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007b3e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007b40:	8b7b      	ldrh	r3, [r7, #26]
 8007b42:	429a      	cmp	r2, r3
 8007b44:	d90b      	bls.n	8007b5e <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007b46:	8b7b      	ldrh	r3, [r7, #26]
 8007b48:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b4a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	8a92      	ldrh	r2, [r2, #20]
 8007b50:	fb03 f202 	mul.w	r2, r3, r2
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	61da      	str	r2, [r3, #28]
 8007b58:	e001      	b.n	8007b5e <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	78db      	ldrb	r3, [r3, #3]
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00a      	beq.n	8007b7c <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b66:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	8a92      	ldrh	r2, [r2, #20]
 8007b6c:	fb03 f202 	mul.w	r2, r3, r2
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	61da      	str	r2, [r3, #28]
 8007b74:	e006      	b.n	8007b84 <USB_HC_StartXfer+0x1a4>
 8007b76:	bf00      	nop
 8007b78:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	6a1a      	ldr	r2, [r3, #32]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b8c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b8e:	04d9      	lsls	r1, r3, #19
 8007b90:	4ba3      	ldr	r3, [pc, #652]	@ (8007e20 <USB_HC_StartXfer+0x440>)
 8007b92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	7d9b      	ldrb	r3, [r3, #22]
 8007b9a:	075b      	lsls	r3, r3, #29
 8007b9c:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007ba0:	69f9      	ldr	r1, [r7, #28]
 8007ba2:	0148      	lsls	r0, r1, #5
 8007ba4:	6a39      	ldr	r1, [r7, #32]
 8007ba6:	4401      	add	r1, r0
 8007ba8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007bac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007bae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007bb0:	79fb      	ldrb	r3, [r7, #7]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d009      	beq.n	8007bca <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	6999      	ldr	r1, [r3, #24]
 8007bba:	69fb      	ldr	r3, [r7, #28]
 8007bbc:	015a      	lsls	r2, r3, #5
 8007bbe:	6a3b      	ldr	r3, [r7, #32]
 8007bc0:	4413      	add	r3, r2
 8007bc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc6:	460a      	mov	r2, r1
 8007bc8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007bca:	6a3b      	ldr	r3, [r7, #32]
 8007bcc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bd0:	689b      	ldr	r3, [r3, #8]
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	bf0c      	ite	eq
 8007bda:	2301      	moveq	r3, #1
 8007bdc:	2300      	movne	r3, #0
 8007bde:	b2db      	uxtb	r3, r3
 8007be0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007be2:	69fb      	ldr	r3, [r7, #28]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	6a3b      	ldr	r3, [r7, #32]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	6a3a      	ldr	r2, [r7, #32]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bfc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007c00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007c02:	69fb      	ldr	r3, [r7, #28]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	6a3b      	ldr	r3, [r7, #32]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	7e7b      	ldrb	r3, [r7, #25]
 8007c12:	075b      	lsls	r3, r3, #29
 8007c14:	69f9      	ldr	r1, [r7, #28]
 8007c16:	0148      	lsls	r0, r1, #5
 8007c18:	6a39      	ldr	r1, [r7, #32]
 8007c1a:	4401      	add	r1, r0
 8007c1c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007c20:	4313      	orrs	r3, r2
 8007c22:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007c24:	68bb      	ldr	r3, [r7, #8]
 8007c26:	799b      	ldrb	r3, [r3, #6]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	f040 80c3 	bne.w	8007db4 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	7c5b      	ldrb	r3, [r3, #17]
 8007c32:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	69fa      	ldr	r2, [r7, #28]
 8007c3c:	0151      	lsls	r1, r2, #5
 8007c3e:	6a3a      	ldr	r2, [r7, #32]
 8007c40:	440a      	add	r2, r1
 8007c42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c4a:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007c4c:	69fb      	ldr	r3, [r7, #28]
 8007c4e:	015a      	lsls	r2, r3, #5
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	4413      	add	r3, r2
 8007c54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	69fa      	ldr	r2, [r7, #28]
 8007c5c:	0151      	lsls	r1, r2, #5
 8007c5e:	6a3a      	ldr	r2, [r7, #32]
 8007c60:	440a      	add	r2, r1
 8007c62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c66:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c6a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	79db      	ldrb	r3, [r3, #7]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d123      	bne.n	8007cbc <USB_HC_StartXfer+0x2dc>
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	78db      	ldrb	r3, [r3, #3]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11f      	bne.n	8007cbc <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c7c:	69fb      	ldr	r3, [r7, #28]
 8007c7e:	015a      	lsls	r2, r3, #5
 8007c80:	6a3b      	ldr	r3, [r7, #32]
 8007c82:	4413      	add	r3, r2
 8007c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	69fa      	ldr	r2, [r7, #28]
 8007c8c:	0151      	lsls	r1, r2, #5
 8007c8e:	6a3a      	ldr	r2, [r7, #32]
 8007c90:	440a      	add	r2, r1
 8007c92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c9a:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	015a      	lsls	r2, r3, #5
 8007ca0:	6a3b      	ldr	r3, [r7, #32]
 8007ca2:	4413      	add	r3, r2
 8007ca4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ca8:	68db      	ldr	r3, [r3, #12]
 8007caa:	69fa      	ldr	r2, [r7, #28]
 8007cac:	0151      	lsls	r1, r2, #5
 8007cae:	6a3a      	ldr	r2, [r7, #32]
 8007cb0:	440a      	add	r2, r1
 8007cb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007cba:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007cbc:	68bb      	ldr	r3, [r7, #8]
 8007cbe:	7c9b      	ldrb	r3, [r3, #18]
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d003      	beq.n	8007ccc <USB_HC_StartXfer+0x2ec>
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	7c9b      	ldrb	r3, [r3, #18]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d117      	bne.n	8007cfc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ccc:	68bb      	ldr	r3, [r7, #8]
 8007cce:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d113      	bne.n	8007cfc <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	78db      	ldrb	r3, [r3, #3]
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d10f      	bne.n	8007cfc <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cdc:	69fb      	ldr	r3, [r7, #28]
 8007cde:	015a      	lsls	r2, r3, #5
 8007ce0:	6a3b      	ldr	r3, [r7, #32]
 8007ce2:	4413      	add	r3, r2
 8007ce4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	69fa      	ldr	r2, [r7, #28]
 8007cec:	0151      	lsls	r1, r2, #5
 8007cee:	6a3a      	ldr	r2, [r7, #32]
 8007cf0:	440a      	add	r2, r1
 8007cf2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cf6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cfa:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	7c9b      	ldrb	r3, [r3, #18]
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d162      	bne.n	8007dca <USB_HC_StartXfer+0x3ea>
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	78db      	ldrb	r3, [r3, #3]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d15e      	bne.n	8007dca <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	68db      	ldr	r3, [r3, #12]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	2b03      	cmp	r3, #3
 8007d14:	d858      	bhi.n	8007dc8 <USB_HC_StartXfer+0x3e8>
 8007d16:	a201      	add	r2, pc, #4	@ (adr r2, 8007d1c <USB_HC_StartXfer+0x33c>)
 8007d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1c:	08007d2d 	.word	0x08007d2d
 8007d20:	08007d4f 	.word	0x08007d4f
 8007d24:	08007d71 	.word	0x08007d71
 8007d28:	08007d93 	.word	0x08007d93
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d38:	685b      	ldr	r3, [r3, #4]
 8007d3a:	69fa      	ldr	r2, [r7, #28]
 8007d3c:	0151      	lsls	r1, r2, #5
 8007d3e:	6a3a      	ldr	r2, [r7, #32]
 8007d40:	440a      	add	r2, r1
 8007d42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d46:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d4a:	6053      	str	r3, [r2, #4]
          break;
 8007d4c:	e03d      	b.n	8007dca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	6a3b      	ldr	r3, [r7, #32]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	69fa      	ldr	r2, [r7, #28]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	6a3a      	ldr	r2, [r7, #32]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d68:	f043 030e 	orr.w	r3, r3, #14
 8007d6c:	6053      	str	r3, [r2, #4]
          break;
 8007d6e:	e02c      	b.n	8007dca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007d70:	69fb      	ldr	r3, [r7, #28]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	6a3b      	ldr	r3, [r7, #32]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	69fa      	ldr	r2, [r7, #28]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	6a3a      	ldr	r2, [r7, #32]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d8e:	6053      	str	r3, [r2, #4]
          break;
 8007d90:	e01b      	b.n	8007dca <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007d92:	69fb      	ldr	r3, [r7, #28]
 8007d94:	015a      	lsls	r2, r3, #5
 8007d96:	6a3b      	ldr	r3, [r7, #32]
 8007d98:	4413      	add	r3, r2
 8007d9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9e:	685b      	ldr	r3, [r3, #4]
 8007da0:	69fa      	ldr	r2, [r7, #28]
 8007da2:	0151      	lsls	r1, r2, #5
 8007da4:	6a3a      	ldr	r2, [r7, #32]
 8007da6:	440a      	add	r2, r1
 8007da8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007dac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007db0:	6053      	str	r3, [r2, #4]
          break;
 8007db2:	e00a      	b.n	8007dca <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	015a      	lsls	r2, r3, #5
 8007db8:	6a3b      	ldr	r3, [r7, #32]
 8007dba:	4413      	add	r3, r2
 8007dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6053      	str	r3, [r2, #4]
 8007dc6:	e000      	b.n	8007dca <USB_HC_StartXfer+0x3ea>
          break;
 8007dc8:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	015a      	lsls	r2, r3, #5
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	4413      	add	r3, r2
 8007dd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007dda:	693b      	ldr	r3, [r7, #16]
 8007ddc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007de0:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	78db      	ldrb	r3, [r3, #3]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d004      	beq.n	8007df4 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007df0:	613b      	str	r3, [r7, #16]
 8007df2:	e003      	b.n	8007dfc <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dfa:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e02:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007e04:	69fb      	ldr	r3, [r7, #28]
 8007e06:	015a      	lsls	r2, r3, #5
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	4413      	add	r3, r2
 8007e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e10:	461a      	mov	r2, r3
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007e16:	79fb      	ldrb	r3, [r7, #7]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d003      	beq.n	8007e24 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	e055      	b.n	8007ecc <USB_HC_StartXfer+0x4ec>
 8007e20:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	78db      	ldrb	r3, [r3, #3]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d14e      	bne.n	8007eca <USB_HC_StartXfer+0x4ea>
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	6a1b      	ldr	r3, [r3, #32]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d04a      	beq.n	8007eca <USB_HC_StartXfer+0x4ea>
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	79db      	ldrb	r3, [r3, #7]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d146      	bne.n	8007eca <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	7c9b      	ldrb	r3, [r3, #18]
 8007e40:	2b03      	cmp	r3, #3
 8007e42:	d831      	bhi.n	8007ea8 <USB_HC_StartXfer+0x4c8>
 8007e44:	a201      	add	r2, pc, #4	@ (adr r2, 8007e4c <USB_HC_StartXfer+0x46c>)
 8007e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e4a:	bf00      	nop
 8007e4c:	08007e5d 	.word	0x08007e5d
 8007e50:	08007e81 	.word	0x08007e81
 8007e54:	08007e5d 	.word	0x08007e5d
 8007e58:	08007e81 	.word	0x08007e81
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e66:	8afa      	ldrh	r2, [r7, #22]
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e6c:	b29b      	uxth	r3, r3
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d91c      	bls.n	8007eac <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	f043 0220 	orr.w	r2, r3, #32
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e7e:	e015      	b.n	8007eac <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	6a1b      	ldr	r3, [r3, #32]
 8007e84:	3303      	adds	r3, #3
 8007e86:	089b      	lsrs	r3, r3, #2
 8007e88:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e8a:	8afa      	ldrh	r2, [r7, #22]
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e92:	691b      	ldr	r3, [r3, #16]
 8007e94:	b29b      	uxth	r3, r3
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d90a      	bls.n	8007eb0 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	619a      	str	r2, [r3, #24]
        }
        break;
 8007ea6:	e003      	b.n	8007eb0 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007ea8:	bf00      	nop
 8007eaa:	e002      	b.n	8007eb2 <USB_HC_StartXfer+0x4d2>
        break;
 8007eac:	bf00      	nop
 8007eae:	e000      	b.n	8007eb2 <USB_HC_StartXfer+0x4d2>
        break;
 8007eb0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6999      	ldr	r1, [r3, #24]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	785a      	ldrb	r2, [r3, #1]
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	2000      	movs	r0, #0
 8007ec2:	9000      	str	r0, [sp, #0]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f7ff f9c9 	bl	800725c <USB_WritePacket>
  }

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3728      	adds	r7, #40	@ 0x28
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b085      	sub	sp, #20
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	b29b      	uxth	r3, r3
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3714      	adds	r7, #20
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b089      	sub	sp, #36	@ 0x24
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
 8007efe:	460b      	mov	r3, r1
 8007f00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007f06:	78fb      	ldrb	r3, [r7, #3]
 8007f08:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007f0e:	69bb      	ldr	r3, [r7, #24]
 8007f10:	015a      	lsls	r2, r3, #5
 8007f12:	69fb      	ldr	r3, [r7, #28]
 8007f14:	4413      	add	r3, r2
 8007f16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	0c9b      	lsrs	r3, r3, #18
 8007f1e:	f003 0303 	and.w	r3, r3, #3
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	015a      	lsls	r2, r3, #5
 8007f28:	69fb      	ldr	r3, [r7, #28]
 8007f2a:	4413      	add	r3, r2
 8007f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	0fdb      	lsrs	r3, r3, #31
 8007f34:	f003 0301 	and.w	r3, r3, #1
 8007f38:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007f3a:	69bb      	ldr	r3, [r7, #24]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	69fb      	ldr	r3, [r7, #28]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	0fdb      	lsrs	r3, r3, #31
 8007f4a:	f003 0301 	and.w	r3, r3, #1
 8007f4e:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f003 0320 	and.w	r3, r3, #32
 8007f58:	2b20      	cmp	r3, #32
 8007f5a:	d10d      	bne.n	8007f78 <USB_HC_Halt+0x82>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d10a      	bne.n	8007f78 <USB_HC_Halt+0x82>
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d002      	beq.n	8007f74 <USB_HC_Halt+0x7e>
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b03      	cmp	r3, #3
 8007f72:	d101      	bne.n	8007f78 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007f74:	2300      	movs	r3, #0
 8007f76:	e0d8      	b.n	800812a <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f78:	697b      	ldr	r3, [r7, #20]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d002      	beq.n	8007f84 <USB_HC_Halt+0x8e>
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	2b02      	cmp	r3, #2
 8007f82:	d173      	bne.n	800806c <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f84:	69bb      	ldr	r3, [r7, #24]
 8007f86:	015a      	lsls	r2, r3, #5
 8007f88:	69fb      	ldr	r3, [r7, #28]
 8007f8a:	4413      	add	r3, r2
 8007f8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	0151      	lsls	r1, r2, #5
 8007f96:	69fa      	ldr	r2, [r7, #28]
 8007f98:	440a      	add	r2, r1
 8007f9a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f9e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007fa2:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f003 0320 	and.w	r3, r3, #32
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d14a      	bne.n	8008046 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fb4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d133      	bne.n	8008024 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007fbc:	69bb      	ldr	r3, [r7, #24]
 8007fbe:	015a      	lsls	r2, r3, #5
 8007fc0:	69fb      	ldr	r3, [r7, #28]
 8007fc2:	4413      	add	r3, r2
 8007fc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69ba      	ldr	r2, [r7, #24]
 8007fcc:	0151      	lsls	r1, r2, #5
 8007fce:	69fa      	ldr	r2, [r7, #28]
 8007fd0:	440a      	add	r2, r1
 8007fd2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fda:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	015a      	lsls	r2, r3, #5
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	4413      	add	r3, r2
 8007fe4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	69ba      	ldr	r2, [r7, #24]
 8007fec:	0151      	lsls	r1, r2, #5
 8007fee:	69fa      	ldr	r2, [r7, #28]
 8007ff0:	440a      	add	r2, r1
 8007ff2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ff6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ffa:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007ffc:	68bb      	ldr	r3, [r7, #8]
 8007ffe:	3301      	adds	r3, #1
 8008000:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008008:	d82e      	bhi.n	8008068 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	015a      	lsls	r2, r3, #5
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	4413      	add	r3, r2
 8008012:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800801c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008020:	d0ec      	beq.n	8007ffc <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008022:	e081      	b.n	8008128 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008024:	69bb      	ldr	r3, [r7, #24]
 8008026:	015a      	lsls	r2, r3, #5
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	4413      	add	r3, r2
 800802c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	69ba      	ldr	r2, [r7, #24]
 8008034:	0151      	lsls	r1, r2, #5
 8008036:	69fa      	ldr	r2, [r7, #28]
 8008038:	440a      	add	r2, r1
 800803a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800803e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008042:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008044:	e070      	b.n	8008128 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008046:	69bb      	ldr	r3, [r7, #24]
 8008048:	015a      	lsls	r2, r3, #5
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	4413      	add	r3, r2
 800804e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	69ba      	ldr	r2, [r7, #24]
 8008056:	0151      	lsls	r1, r2, #5
 8008058:	69fa      	ldr	r2, [r7, #28]
 800805a:	440a      	add	r2, r1
 800805c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008060:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008064:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008066:	e05f      	b.n	8008128 <USB_HC_Halt+0x232>
            break;
 8008068:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800806a:	e05d      	b.n	8008128 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800806c:	69bb      	ldr	r3, [r7, #24]
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69ba      	ldr	r2, [r7, #24]
 800807c:	0151      	lsls	r1, r2, #5
 800807e:	69fa      	ldr	r2, [r7, #28]
 8008080:	440a      	add	r2, r1
 8008082:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008086:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800808a:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008098:	2b00      	cmp	r3, #0
 800809a:	d133      	bne.n	8008104 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	015a      	lsls	r2, r3, #5
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	4413      	add	r3, r2
 80080a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	69ba      	ldr	r2, [r7, #24]
 80080ac:	0151      	lsls	r1, r2, #5
 80080ae:	69fa      	ldr	r2, [r7, #28]
 80080b0:	440a      	add	r2, r1
 80080b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080ba:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080bc:	69bb      	ldr	r3, [r7, #24]
 80080be:	015a      	lsls	r2, r3, #5
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	69ba      	ldr	r2, [r7, #24]
 80080cc:	0151      	lsls	r1, r2, #5
 80080ce:	69fa      	ldr	r2, [r7, #28]
 80080d0:	440a      	add	r2, r1
 80080d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080da:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	3301      	adds	r3, #1
 80080e0:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080e8:	d81d      	bhi.n	8008126 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080ea:	69bb      	ldr	r3, [r7, #24]
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008100:	d0ec      	beq.n	80080dc <USB_HC_Halt+0x1e6>
 8008102:	e011      	b.n	8008128 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008104:	69bb      	ldr	r3, [r7, #24]
 8008106:	015a      	lsls	r2, r3, #5
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	4413      	add	r3, r2
 800810c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	69ba      	ldr	r2, [r7, #24]
 8008114:	0151      	lsls	r1, r2, #5
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	440a      	add	r2, r1
 800811a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800811e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008122:	6013      	str	r3, [r2, #0]
 8008124:	e000      	b.n	8008128 <USB_HC_Halt+0x232>
          break;
 8008126:	bf00      	nop
    }
  }

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3724      	adds	r7, #36	@ 0x24
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008138:	b480      	push	{r7}
 800813a:	b087      	sub	sp, #28
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	460b      	mov	r3, r1
 8008142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008148:	78fb      	ldrb	r3, [r7, #3]
 800814a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800814c:	2301      	movs	r3, #1
 800814e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	04da      	lsls	r2, r3, #19
 8008154:	4b15      	ldr	r3, [pc, #84]	@ (80081ac <USB_DoPing+0x74>)
 8008156:	4013      	ands	r3, r2
 8008158:	693a      	ldr	r2, [r7, #16]
 800815a:	0151      	lsls	r1, r2, #5
 800815c:	697a      	ldr	r2, [r7, #20]
 800815e:	440a      	add	r2, r1
 8008160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008168:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	015a      	lsls	r2, r3, #5
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	4413      	add	r3, r2
 8008172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008180:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008188:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	015a      	lsls	r2, r3, #5
 800818e:	697b      	ldr	r3, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008196:	461a      	mov	r2, r3
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800819c:	2300      	movs	r3, #0
}
 800819e:	4618      	mov	r0, r3
 80081a0:	371c      	adds	r7, #28
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	1ff80000 	.word	0x1ff80000

080081b0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b088      	sub	sp, #32
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80081c0:	2300      	movs	r3, #0
 80081c2:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7fe ff8c 	bl	80070e2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081ca:	2110      	movs	r1, #16
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f7fe ffe5 	bl	800719c <USB_FlushTxFifo>
 80081d2:	4603      	mov	r3, r0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d001      	beq.n	80081dc <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081dc:	6878      	ldr	r0, [r7, #4]
 80081de:	f7ff f80f 	bl	8007200 <USB_FlushRxFifo>
 80081e2:	4603      	mov	r3, r0
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80081e8:	2301      	movs	r3, #1
 80081ea:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80081ec:	2300      	movs	r3, #0
 80081ee:	61bb      	str	r3, [r7, #24]
 80081f0:	e01f      	b.n	8008232 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	015a      	lsls	r2, r3, #5
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	4413      	add	r3, r2
 80081fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008208:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008210:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008218:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	4413      	add	r3, r2
 8008222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008226:	461a      	mov	r2, r3
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800822c:	69bb      	ldr	r3, [r7, #24]
 800822e:	3301      	adds	r3, #1
 8008230:	61bb      	str	r3, [r7, #24]
 8008232:	69bb      	ldr	r3, [r7, #24]
 8008234:	2b0f      	cmp	r3, #15
 8008236:	d9dc      	bls.n	80081f2 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008238:	2300      	movs	r3, #0
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	e034      	b.n	80082a8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800823e:	69bb      	ldr	r3, [r7, #24]
 8008240:	015a      	lsls	r2, r3, #5
 8008242:	697b      	ldr	r3, [r7, #20]
 8008244:	4413      	add	r3, r2
 8008246:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800824e:	693b      	ldr	r3, [r7, #16]
 8008250:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008254:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800825c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008264:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	015a      	lsls	r2, r3, #5
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	4413      	add	r3, r2
 800826e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008272:	461a      	mov	r2, r3
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	3301      	adds	r3, #1
 800827c:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008284:	d80c      	bhi.n	80082a0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008286:	69bb      	ldr	r3, [r7, #24]
 8008288:	015a      	lsls	r2, r3, #5
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	4413      	add	r3, r2
 800828e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008298:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800829c:	d0ec      	beq.n	8008278 <USB_StopHost+0xc8>
 800829e:	e000      	b.n	80082a2 <USB_StopHost+0xf2>
        break;
 80082a0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80082a2:	69bb      	ldr	r3, [r7, #24]
 80082a4:	3301      	adds	r3, #1
 80082a6:	61bb      	str	r3, [r7, #24]
 80082a8:	69bb      	ldr	r3, [r7, #24]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d9c7      	bls.n	800823e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082b4:	461a      	mov	r2, r3
 80082b6:	f04f 33ff 	mov.w	r3, #4294967295
 80082ba:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f04f 32ff 	mov.w	r2, #4294967295
 80082c2:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082c4:	6878      	ldr	r0, [r7, #4]
 80082c6:	f7fe fefb 	bl	80070c0 <USB_EnableGlobalInt>

  return ret;
 80082ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3720      	adds	r7, #32
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082d4:	b590      	push	{r4, r7, lr}
 80082d6:	b089      	sub	sp, #36	@ 0x24
 80082d8:	af04      	add	r7, sp, #16
 80082da:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80082dc:	2301      	movs	r3, #1
 80082de:	2202      	movs	r2, #2
 80082e0:	2102      	movs	r1, #2
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 fc85 	bl	8008bf2 <USBH_FindInterface>
 80082e8:	4603      	mov	r3, r0
 80082ea:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
 80082ee:	2bff      	cmp	r3, #255	@ 0xff
 80082f0:	d002      	beq.n	80082f8 <USBH_CDC_InterfaceInit+0x24>
 80082f2:	7bfb      	ldrb	r3, [r7, #15]
 80082f4:	2b01      	cmp	r3, #1
 80082f6:	d901      	bls.n	80082fc <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80082f8:	2302      	movs	r3, #2
 80082fa:	e13d      	b.n	8008578 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80082fc:	7bfb      	ldrb	r3, [r7, #15]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f000 fc5a 	bl	8008bba <USBH_SelectInterface>
 8008306:	4603      	mov	r3, r0
 8008308:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800830a:	7bbb      	ldrb	r3, [r7, #14]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008310:	2302      	movs	r3, #2
 8008312:	e131      	b.n	8008578 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800831a:	2050      	movs	r0, #80	@ 0x50
 800831c:	f002 fb64 	bl	800a9e8 <malloc>
 8008320:	4603      	mov	r3, r0
 8008322:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800832a:	69db      	ldr	r3, [r3, #28]
 800832c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d101      	bne.n	8008338 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008334:	2302      	movs	r3, #2
 8008336:	e11f      	b.n	8008578 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008338:	2250      	movs	r2, #80	@ 0x50
 800833a:	2100      	movs	r1, #0
 800833c:	68b8      	ldr	r0, [r7, #8]
 800833e:	f002 fe71 	bl	800b024 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	211a      	movs	r1, #26
 8008348:	fb01 f303 	mul.w	r3, r1, r3
 800834c:	4413      	add	r3, r2
 800834e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	b25b      	sxtb	r3, r3
 8008356:	2b00      	cmp	r3, #0
 8008358:	da15      	bge.n	8008386 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800835a:	7bfb      	ldrb	r3, [r7, #15]
 800835c:	687a      	ldr	r2, [r7, #4]
 800835e:	211a      	movs	r1, #26
 8008360:	fb01 f303 	mul.w	r3, r1, r3
 8008364:	4413      	add	r3, r2
 8008366:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800836a:	781a      	ldrb	r2, [r3, #0]
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008370:	7bfb      	ldrb	r3, [r7, #15]
 8008372:	687a      	ldr	r2, [r7, #4]
 8008374:	211a      	movs	r1, #26
 8008376:	fb01 f303 	mul.w	r3, r1, r3
 800837a:	4413      	add	r3, r2
 800837c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008380:	881a      	ldrh	r2, [r3, #0]
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	785b      	ldrb	r3, [r3, #1]
 800838a:	4619      	mov	r1, r3
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f001 ffbe 	bl	800a30e <USBH_AllocPipe>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	7819      	ldrb	r1, [r3, #0]
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	7858      	ldrb	r0, [r3, #1]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80083ae:	68ba      	ldr	r2, [r7, #8]
 80083b0:	8952      	ldrh	r2, [r2, #10]
 80083b2:	9202      	str	r2, [sp, #8]
 80083b4:	2203      	movs	r2, #3
 80083b6:	9201      	str	r2, [sp, #4]
 80083b8:	9300      	str	r3, [sp, #0]
 80083ba:	4623      	mov	r3, r4
 80083bc:	4602      	mov	r2, r0
 80083be:	6878      	ldr	r0, [r7, #4]
 80083c0:	f001 ff76 	bl	800a2b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2200      	movs	r2, #0
 80083ca:	4619      	mov	r1, r3
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f002 fa85 	bl	800a8dc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80083d2:	2300      	movs	r3, #0
 80083d4:	2200      	movs	r2, #0
 80083d6:	210a      	movs	r1, #10
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fc0a 	bl	8008bf2 <USBH_FindInterface>
 80083de:	4603      	mov	r3, r0
 80083e0:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083e2:	7bfb      	ldrb	r3, [r7, #15]
 80083e4:	2bff      	cmp	r3, #255	@ 0xff
 80083e6:	d002      	beq.n	80083ee <USBH_CDC_InterfaceInit+0x11a>
 80083e8:	7bfb      	ldrb	r3, [r7, #15]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d901      	bls.n	80083f2 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083ee:	2302      	movs	r3, #2
 80083f0:	e0c2      	b.n	8008578 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80083f2:	7bfb      	ldrb	r3, [r7, #15]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	211a      	movs	r1, #26
 80083f8:	fb01 f303 	mul.w	r3, r1, r3
 80083fc:	4413      	add	r3, r2
 80083fe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	b25b      	sxtb	r3, r3
 8008406:	2b00      	cmp	r3, #0
 8008408:	da16      	bge.n	8008438 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	687a      	ldr	r2, [r7, #4]
 800840e:	211a      	movs	r1, #26
 8008410:	fb01 f303 	mul.w	r3, r1, r3
 8008414:	4413      	add	r3, r2
 8008416:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800841a:	781a      	ldrb	r2, [r3, #0]
 800841c:	68bb      	ldr	r3, [r7, #8]
 800841e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008420:	7bfb      	ldrb	r3, [r7, #15]
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	211a      	movs	r1, #26
 8008426:	fb01 f303 	mul.w	r3, r1, r3
 800842a:	4413      	add	r3, r2
 800842c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008430:	881a      	ldrh	r2, [r3, #0]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	835a      	strh	r2, [r3, #26]
 8008436:	e015      	b.n	8008464 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008438:	7bfb      	ldrb	r3, [r7, #15]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	211a      	movs	r1, #26
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	4413      	add	r3, r2
 8008444:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008448:	781a      	ldrb	r2, [r3, #0]
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800844e:	7bfb      	ldrb	r3, [r7, #15]
 8008450:	687a      	ldr	r2, [r7, #4]
 8008452:	211a      	movs	r1, #26
 8008454:	fb01 f303 	mul.w	r3, r1, r3
 8008458:	4413      	add	r3, r2
 800845a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800845e:	881a      	ldrh	r2, [r3, #0]
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008464:	7bfb      	ldrb	r3, [r7, #15]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	211a      	movs	r1, #26
 800846a:	fb01 f303 	mul.w	r3, r1, r3
 800846e:	4413      	add	r3, r2
 8008470:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	b25b      	sxtb	r3, r3
 8008478:	2b00      	cmp	r3, #0
 800847a:	da16      	bge.n	80084aa <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800847c:	7bfb      	ldrb	r3, [r7, #15]
 800847e:	687a      	ldr	r2, [r7, #4]
 8008480:	211a      	movs	r1, #26
 8008482:	fb01 f303 	mul.w	r3, r1, r3
 8008486:	4413      	add	r3, r2
 8008488:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800848c:	781a      	ldrb	r2, [r3, #0]
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	687a      	ldr	r2, [r7, #4]
 8008496:	211a      	movs	r1, #26
 8008498:	fb01 f303 	mul.w	r3, r1, r3
 800849c:	4413      	add	r3, r2
 800849e:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084a2:	881a      	ldrh	r2, [r3, #0]
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	835a      	strh	r2, [r3, #26]
 80084a8:	e015      	b.n	80084d6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	211a      	movs	r1, #26
 80084b0:	fb01 f303 	mul.w	r3, r1, r3
 80084b4:	4413      	add	r3, r2
 80084b6:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80084ba:	781a      	ldrb	r2, [r3, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80084c0:	7bfb      	ldrb	r3, [r7, #15]
 80084c2:	687a      	ldr	r2, [r7, #4]
 80084c4:	211a      	movs	r1, #26
 80084c6:	fb01 f303 	mul.w	r3, r1, r3
 80084ca:	4413      	add	r3, r2
 80084cc:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084d0:	881a      	ldrh	r2, [r3, #0]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	7b9b      	ldrb	r3, [r3, #14]
 80084da:	4619      	mov	r1, r3
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f001 ff16 	bl	800a30e <USBH_AllocPipe>
 80084e2:	4603      	mov	r3, r0
 80084e4:	461a      	mov	r2, r3
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	7bdb      	ldrb	r3, [r3, #15]
 80084ee:	4619      	mov	r1, r3
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f001 ff0c 	bl	800a30e <USBH_AllocPipe>
 80084f6:	4603      	mov	r3, r0
 80084f8:	461a      	mov	r2, r3
 80084fa:	68bb      	ldr	r3, [r7, #8]
 80084fc:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80084fe:	68bb      	ldr	r3, [r7, #8]
 8008500:	7b59      	ldrb	r1, [r3, #13]
 8008502:	68bb      	ldr	r3, [r7, #8]
 8008504:	7b98      	ldrb	r0, [r3, #14]
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	8b12      	ldrh	r2, [r2, #24]
 8008516:	9202      	str	r2, [sp, #8]
 8008518:	2202      	movs	r2, #2
 800851a:	9201      	str	r2, [sp, #4]
 800851c:	9300      	str	r3, [sp, #0]
 800851e:	4623      	mov	r3, r4
 8008520:	4602      	mov	r2, r0
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f001 fec4 	bl	800a2b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	7b19      	ldrb	r1, [r3, #12]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	7bd8      	ldrb	r0, [r3, #15]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	8b52      	ldrh	r2, [r2, #26]
 8008540:	9202      	str	r2, [sp, #8]
 8008542:	2202      	movs	r2, #2
 8008544:	9201      	str	r2, [sp, #4]
 8008546:	9300      	str	r3, [sp, #0]
 8008548:	4623      	mov	r3, r4
 800854a:	4602      	mov	r2, r0
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f001 feaf 	bl	800a2b0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	2200      	movs	r2, #0
 8008556:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	7b5b      	ldrb	r3, [r3, #13]
 800855e:	2200      	movs	r2, #0
 8008560:	4619      	mov	r1, r3
 8008562:	6878      	ldr	r0, [r7, #4]
 8008564:	f002 f9ba 	bl	800a8dc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	7b1b      	ldrb	r3, [r3, #12]
 800856c:	2200      	movs	r2, #0
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f002 f9b3 	bl	800a8dc <USBH_LL_SetToggle>

  return USBH_OK;
 8008576:	2300      	movs	r3, #0
}
 8008578:	4618      	mov	r0, r3
 800857a:	3714      	adds	r7, #20
 800857c:	46bd      	mov	sp, r7
 800857e:	bd90      	pop	{r4, r7, pc}

08008580 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b084      	sub	sp, #16
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800858e:	69db      	ldr	r3, [r3, #28]
 8008590:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00e      	beq.n	80085b8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	781b      	ldrb	r3, [r3, #0]
 800859e:	4619      	mov	r1, r3
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f001 fea4 	bl	800a2ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f001 fecf 	bl	800a350 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2200      	movs	r2, #0
 80085b6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	7b1b      	ldrb	r3, [r3, #12]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d00e      	beq.n	80085de <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	7b1b      	ldrb	r3, [r3, #12]
 80085c4:	4619      	mov	r1, r3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f001 fe91 	bl	800a2ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	7b1b      	ldrb	r3, [r3, #12]
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f001 febc 	bl	800a350 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	7b5b      	ldrb	r3, [r3, #13]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d00e      	beq.n	8008604 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	7b5b      	ldrb	r3, [r3, #13]
 80085ea:	4619      	mov	r1, r3
 80085ec:	6878      	ldr	r0, [r7, #4]
 80085ee:	f001 fe7e 	bl	800a2ee <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	7b5b      	ldrb	r3, [r3, #13]
 80085f6:	4619      	mov	r1, r3
 80085f8:	6878      	ldr	r0, [r7, #4]
 80085fa:	f001 fea9 	bl	800a350 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00b      	beq.n	8008628 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008616:	69db      	ldr	r3, [r3, #28]
 8008618:	4618      	mov	r0, r3
 800861a:	f002 f9ed 	bl	800a9f8 <free>
    phost->pActiveClass->pData = 0U;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008624:	2200      	movs	r2, #0
 8008626:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008628:	2300      	movs	r3, #0
}
 800862a:	4618      	mov	r0, r3
 800862c:	3710      	adds	r7, #16
 800862e:	46bd      	mov	sp, r7
 8008630:	bd80      	pop	{r7, pc}

08008632 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008632:	b580      	push	{r7, lr}
 8008634:	b084      	sub	sp, #16
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	3340      	adds	r3, #64	@ 0x40
 8008648:	4619      	mov	r1, r3
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f8b1 	bl	80087b2 <GetLineCoding>
 8008650:	4603      	mov	r3, r0
 8008652:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008654:	7afb      	ldrb	r3, [r7, #11]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d105      	bne.n	8008666 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008660:	2102      	movs	r1, #2
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008666:	7afb      	ldrb	r3, [r7, #11]
}
 8008668:	4618      	mov	r0, r3
 800866a:	3710      	adds	r7, #16
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008678:	2301      	movs	r3, #1
 800867a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800867c:	2300      	movs	r3, #0
 800867e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008686:	69db      	ldr	r3, [r3, #28]
 8008688:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008690:	2b04      	cmp	r3, #4
 8008692:	d877      	bhi.n	8008784 <USBH_CDC_Process+0x114>
 8008694:	a201      	add	r2, pc, #4	@ (adr r2, 800869c <USBH_CDC_Process+0x2c>)
 8008696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869a:	bf00      	nop
 800869c:	080086b1 	.word	0x080086b1
 80086a0:	080086b7 	.word	0x080086b7
 80086a4:	080086e7 	.word	0x080086e7
 80086a8:	0800875b 	.word	0x0800875b
 80086ac:	08008769 	.word	0x08008769
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80086b0:	2300      	movs	r3, #0
 80086b2:	73fb      	strb	r3, [r7, #15]
      break;
 80086b4:	e06d      	b.n	8008792 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80086b6:	68bb      	ldr	r3, [r7, #8]
 80086b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ba:	4619      	mov	r1, r3
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 f897 	bl	80087f0 <SetLineCoding>
 80086c2:	4603      	mov	r3, r0
 80086c4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086c6:	7bbb      	ldrb	r3, [r7, #14]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d104      	bne.n	80086d6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	2202      	movs	r2, #2
 80086d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086d4:	e058      	b.n	8008788 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	2b01      	cmp	r3, #1
 80086da:	d055      	beq.n	8008788 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	2204      	movs	r2, #4
 80086e0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80086e4:	e050      	b.n	8008788 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	3340      	adds	r3, #64	@ 0x40
 80086ea:	4619      	mov	r1, r3
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f860 	bl	80087b2 <GetLineCoding>
 80086f2:	4603      	mov	r3, r0
 80086f4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086f6:	7bbb      	ldrb	r3, [r7, #14]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d126      	bne.n	800874a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	2200      	movs	r2, #0
 8008700:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800870a:	68bb      	ldr	r3, [r7, #8]
 800870c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800870e:	791b      	ldrb	r3, [r3, #4]
 8008710:	429a      	cmp	r2, r3
 8008712:	d13b      	bne.n	800878c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800871e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008720:	429a      	cmp	r2, r3
 8008722:	d133      	bne.n	800878c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008724:	68bb      	ldr	r3, [r7, #8]
 8008726:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800872e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008730:	429a      	cmp	r2, r3
 8008732:	d12b      	bne.n	800878c <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800873c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800873e:	429a      	cmp	r2, r3
 8008740:	d124      	bne.n	800878c <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f958 	bl	80089f8 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008748:	e020      	b.n	800878c <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	2b01      	cmp	r3, #1
 800874e:	d01d      	beq.n	800878c <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	2204      	movs	r2, #4
 8008754:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008758:	e018      	b.n	800878c <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f000 f867 	bl	800882e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008760:	6878      	ldr	r0, [r7, #4]
 8008762:	f000 f8da 	bl	800891a <CDC_ProcessReception>
      break;
 8008766:	e014      	b.n	8008792 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008768:	2100      	movs	r1, #0
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f001 f81a 	bl	80097a4 <USBH_ClrFeature>
 8008770:	4603      	mov	r3, r0
 8008772:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008774:	7bbb      	ldrb	r3, [r7, #14]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10a      	bne.n	8008790 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008782:	e005      	b.n	8008790 <USBH_CDC_Process+0x120>

    default:
      break;
 8008784:	bf00      	nop
 8008786:	e004      	b.n	8008792 <USBH_CDC_Process+0x122>
      break;
 8008788:	bf00      	nop
 800878a:	e002      	b.n	8008792 <USBH_CDC_Process+0x122>
      break;
 800878c:	bf00      	nop
 800878e:	e000      	b.n	8008792 <USBH_CDC_Process+0x122>
      break;
 8008790:	bf00      	nop

  }

  return status;
 8008792:	7bfb      	ldrb	r3, [r7, #15]
}
 8008794:	4618      	mov	r0, r3
 8008796:	3710      	adds	r7, #16
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800879c:	b480      	push	{r7}
 800879e:	b083      	sub	sp, #12
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	22a1      	movs	r2, #161	@ 0xa1
 80087c0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2221      	movs	r2, #33	@ 0x21
 80087c6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2200      	movs	r2, #0
 80087cc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2200      	movs	r2, #0
 80087d2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2207      	movs	r2, #7
 80087d8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	2207      	movs	r2, #7
 80087de:	4619      	mov	r1, r3
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f001 fb14 	bl	8009e0e <USBH_CtlReq>
 80087e6:	4603      	mov	r3, r0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3708      	adds	r7, #8
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd80      	pop	{r7, pc}

080087f0 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80087f0:	b580      	push	{r7, lr}
 80087f2:	b082      	sub	sp, #8
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2221      	movs	r2, #33	@ 0x21
 80087fe:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2220      	movs	r2, #32
 8008804:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2207      	movs	r2, #7
 8008816:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	2207      	movs	r2, #7
 800881c:	4619      	mov	r1, r3
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f001 faf5 	bl	8009e0e <USBH_CtlReq>
 8008824:	4603      	mov	r3, r0
}
 8008826:	4618      	mov	r0, r3
 8008828:	3708      	adds	r7, #8
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}

0800882e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800882e:	b580      	push	{r7, lr}
 8008830:	b086      	sub	sp, #24
 8008832:	af02      	add	r7, sp, #8
 8008834:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008840:	2300      	movs	r3, #0
 8008842:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800884a:	2b01      	cmp	r3, #1
 800884c:	d002      	beq.n	8008854 <CDC_ProcessTransmission+0x26>
 800884e:	2b02      	cmp	r3, #2
 8008850:	d023      	beq.n	800889a <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008852:	e05e      	b.n	8008912 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	8b12      	ldrh	r2, [r2, #24]
 800885c:	4293      	cmp	r3, r2
 800885e:	d90b      	bls.n	8008878 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	69d9      	ldr	r1, [r3, #28]
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	8b1a      	ldrh	r2, [r3, #24]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	7b5b      	ldrb	r3, [r3, #13]
 800886c:	2001      	movs	r0, #1
 800886e:	9000      	str	r0, [sp, #0]
 8008870:	6878      	ldr	r0, [r7, #4]
 8008872:	f001 fcda 	bl	800a22a <USBH_BulkSendData>
 8008876:	e00b      	b.n	8008890 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008880:	b29a      	uxth	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	7b5b      	ldrb	r3, [r3, #13]
 8008886:	2001      	movs	r0, #1
 8008888:	9000      	str	r0, [sp, #0]
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f001 fccd 	bl	800a22a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2202      	movs	r2, #2
 8008894:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008898:	e03b      	b.n	8008912 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	7b5b      	ldrb	r3, [r3, #13]
 800889e:	4619      	mov	r1, r3
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f001 fff1 	bl	800a888 <USBH_LL_GetURBState>
 80088a6:	4603      	mov	r3, r0
 80088a8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80088aa:	7afb      	ldrb	r3, [r7, #11]
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d128      	bne.n	8008902 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088b4:	68fa      	ldr	r2, [r7, #12]
 80088b6:	8b12      	ldrh	r2, [r2, #24]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d90e      	bls.n	80088da <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	68fa      	ldr	r2, [r7, #12]
 80088c2:	8b12      	ldrh	r2, [r2, #24]
 80088c4:	1a9a      	subs	r2, r3, r2
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	8b12      	ldrh	r2, [r2, #24]
 80088d2:	441a      	add	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	61da      	str	r2, [r3, #28]
 80088d8:	e002      	b.n	80088e0 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2200      	movs	r2, #0
 80088de:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	2201      	movs	r2, #1
 80088ec:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088f0:	e00e      	b.n	8008910 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80088fa:	6878      	ldr	r0, [r7, #4]
 80088fc:	f000 f868 	bl	80089d0 <USBH_CDC_TransmitCallback>
      break;
 8008900:	e006      	b.n	8008910 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008902:	7afb      	ldrb	r3, [r7, #11]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d103      	bne.n	8008910 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2201      	movs	r2, #1
 800890c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008910:	bf00      	nop
  }
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b086      	sub	sp, #24
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008928:	69db      	ldr	r3, [r3, #28]
 800892a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800892c:	2300      	movs	r3, #0
 800892e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008936:	2b03      	cmp	r3, #3
 8008938:	d002      	beq.n	8008940 <CDC_ProcessReception+0x26>
 800893a:	2b04      	cmp	r3, #4
 800893c:	d00e      	beq.n	800895c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800893e:	e043      	b.n	80089c8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	6a19      	ldr	r1, [r3, #32]
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	8b5a      	ldrh	r2, [r3, #26]
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	7b1b      	ldrb	r3, [r3, #12]
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 fc91 	bl	800a274 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	2204      	movs	r2, #4
 8008956:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800895a:	e035      	b.n	80089c8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	7b1b      	ldrb	r3, [r3, #12]
 8008960:	4619      	mov	r1, r3
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f001 ff90 	bl	800a888 <USBH_LL_GetURBState>
 8008968:	4603      	mov	r3, r0
 800896a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800896c:	7cfb      	ldrb	r3, [r7, #19]
 800896e:	2b01      	cmp	r3, #1
 8008970:	d129      	bne.n	80089c6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	7b1b      	ldrb	r3, [r3, #12]
 8008976:	4619      	mov	r1, r3
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f001 fef3 	bl	800a764 <USBH_LL_GetLastXferSize>
 800897e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008980:	697b      	ldr	r3, [r7, #20]
 8008982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008984:	68fa      	ldr	r2, [r7, #12]
 8008986:	429a      	cmp	r2, r3
 8008988:	d016      	beq.n	80089b8 <CDC_ProcessReception+0x9e>
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	8b5b      	ldrh	r3, [r3, #26]
 800898e:	461a      	mov	r2, r3
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	4293      	cmp	r3, r2
 8008994:	d110      	bne.n	80089b8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	1ad2      	subs	r2, r2, r3
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	6a1a      	ldr	r2, [r3, #32]
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	441a      	add	r2, r3
 80089aa:	697b      	ldr	r3, [r7, #20]
 80089ac:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80089ae:	697b      	ldr	r3, [r7, #20]
 80089b0:	2203      	movs	r2, #3
 80089b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80089b6:	e006      	b.n	80089c6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80089b8:	697b      	ldr	r3, [r7, #20]
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80089c0:	6878      	ldr	r0, [r7, #4]
 80089c2:	f000 f80f 	bl	80089e4 <USBH_CDC_ReceiveCallback>
      break;
 80089c6:	bf00      	nop
  }
}
 80089c8:	bf00      	nop
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b083      	sub	sp, #12
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089ec:	bf00      	nop
 80089ee:	370c      	adds	r7, #12
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr

080089f8 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80089f8:	b480      	push	{r7}
 80089fa:	b083      	sub	sp, #12
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008a00:	bf00      	nop
 8008a02:	370c      	adds	r7, #12
 8008a04:	46bd      	mov	sp, r7
 8008a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0a:	4770      	bx	lr

08008a0c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008a0c:	b580      	push	{r7, lr}
 8008a0e:	b084      	sub	sp, #16
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	60f8      	str	r0, [r7, #12]
 8008a14:	60b9      	str	r1, [r7, #8]
 8008a16:	4613      	mov	r3, r2
 8008a18:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d101      	bne.n	8008a24 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8008a20:	2302      	movs	r3, #2
 8008a22:	e029      	b.n	8008a78 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	79fa      	ldrb	r2, [r7, #7]
 8008a28:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008a3c:	68f8      	ldr	r0, [r7, #12]
 8008a3e:	f000 f81f 	bl	8008a80 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	2200      	movs	r2, #0
 8008a46:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2200      	movs	r2, #0
 8008a56:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d003      	beq.n	8008a70 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a70:	68f8      	ldr	r0, [r7, #12]
 8008a72:	f001 fdc3 	bl	800a5fc <USBH_LL_Init>

  return USBH_OK;
 8008a76:	2300      	movs	r3, #0
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
 8008a90:	e009      	b.n	8008aa6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a92:	687a      	ldr	r2, [r7, #4]
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	33e0      	adds	r3, #224	@ 0xe0
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	60fb      	str	r3, [r7, #12]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b0f      	cmp	r3, #15
 8008aaa:	d9f2      	bls.n	8008a92 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]
 8008ab0:	e009      	b.n	8008ac6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008ab2:	687a      	ldr	r2, [r7, #4]
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4413      	add	r3, r2
 8008ab8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008abc:	2200      	movs	r2, #0
 8008abe:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008acc:	d3f1      	bcc.n	8008ab2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2201      	movs	r2, #1
 8008ade:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2240      	movs	r2, #64	@ 0x40
 8008af2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2200      	movs	r2, #0
 8008af8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2201      	movs	r2, #1
 8008b06:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	2200      	movs	r2, #0
 8008b16:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	331c      	adds	r3, #28
 8008b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008b22:	2100      	movs	r1, #0
 8008b24:	4618      	mov	r0, r3
 8008b26:	f002 fa7d 	bl	800b024 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b34:	2100      	movs	r1, #0
 8008b36:	4618      	mov	r0, r3
 8008b38:	f002 fa74 	bl	800b024 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008b42:	2212      	movs	r2, #18
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f002 fa6c 	bl	800b024 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b52:	223e      	movs	r2, #62	@ 0x3e
 8008b54:	2100      	movs	r1, #0
 8008b56:	4618      	mov	r0, r3
 8008b58:	f002 fa64 	bl	800b024 <memset>

  return USBH_OK;
 8008b5c:	2300      	movs	r3, #0
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}

08008b66 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b66:	b480      	push	{r7}
 8008b68:	b085      	sub	sp, #20
 8008b6a:	af00      	add	r7, sp, #0
 8008b6c:	6078      	str	r0, [r7, #4]
 8008b6e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b70:	2300      	movs	r3, #0
 8008b72:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d016      	beq.n	8008ba8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10e      	bne.n	8008ba2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b8a:	1c59      	adds	r1, r3, #1
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	33de      	adds	r3, #222	@ 0xde
 8008b96:	6839      	ldr	r1, [r7, #0]
 8008b98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b9c:	2300      	movs	r3, #0
 8008b9e:	73fb      	strb	r3, [r7, #15]
 8008ba0:	e004      	b.n	8008bac <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	73fb      	strb	r3, [r7, #15]
 8008ba6:	e001      	b.n	8008bac <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008ba8:	2302      	movs	r3, #2
 8008baa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008bba:	b480      	push	{r7}
 8008bbc:	b085      	sub	sp, #20
 8008bbe:	af00      	add	r7, sp, #0
 8008bc0:	6078      	str	r0, [r7, #4]
 8008bc2:	460b      	mov	r3, r1
 8008bc4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008bd0:	78fa      	ldrb	r2, [r7, #3]
 8008bd2:	429a      	cmp	r2, r3
 8008bd4:	d204      	bcs.n	8008be0 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	78fa      	ldrb	r2, [r7, #3]
 8008bda:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008bde:	e001      	b.n	8008be4 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008be0:	2302      	movs	r3, #2
 8008be2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be6:	4618      	mov	r0, r3
 8008be8:	3714      	adds	r7, #20
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b087      	sub	sp, #28
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]
 8008bfa:	4608      	mov	r0, r1
 8008bfc:	4611      	mov	r1, r2
 8008bfe:	461a      	mov	r2, r3
 8008c00:	4603      	mov	r3, r0
 8008c02:	70fb      	strb	r3, [r7, #3]
 8008c04:	460b      	mov	r3, r1
 8008c06:	70bb      	strb	r3, [r7, #2]
 8008c08:	4613      	mov	r3, r2
 8008c0a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008c1a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c1c:	e025      	b.n	8008c6a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008c1e:	7dfb      	ldrb	r3, [r7, #23]
 8008c20:	221a      	movs	r2, #26
 8008c22:	fb02 f303 	mul.w	r3, r2, r3
 8008c26:	3308      	adds	r3, #8
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	4413      	add	r3, r2
 8008c2c:	3302      	adds	r3, #2
 8008c2e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	795b      	ldrb	r3, [r3, #5]
 8008c34:	78fa      	ldrb	r2, [r7, #3]
 8008c36:	429a      	cmp	r2, r3
 8008c38:	d002      	beq.n	8008c40 <USBH_FindInterface+0x4e>
 8008c3a:	78fb      	ldrb	r3, [r7, #3]
 8008c3c:	2bff      	cmp	r3, #255	@ 0xff
 8008c3e:	d111      	bne.n	8008c64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c40:	693b      	ldr	r3, [r7, #16]
 8008c42:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c44:	78ba      	ldrb	r2, [r7, #2]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d002      	beq.n	8008c50 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c4a:	78bb      	ldrb	r3, [r7, #2]
 8008c4c:	2bff      	cmp	r3, #255	@ 0xff
 8008c4e:	d109      	bne.n	8008c64 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c54:	787a      	ldrb	r2, [r7, #1]
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d002      	beq.n	8008c60 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c5a:	787b      	ldrb	r3, [r7, #1]
 8008c5c:	2bff      	cmp	r3, #255	@ 0xff
 8008c5e:	d101      	bne.n	8008c64 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c60:	7dfb      	ldrb	r3, [r7, #23]
 8008c62:	e006      	b.n	8008c72 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c64:	7dfb      	ldrb	r3, [r7, #23]
 8008c66:	3301      	adds	r3, #1
 8008c68:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c6a:	7dfb      	ldrb	r3, [r7, #23]
 8008c6c:	2b01      	cmp	r3, #1
 8008c6e:	d9d6      	bls.n	8008c1e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c70:	23ff      	movs	r3, #255	@ 0xff
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr

08008c7e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b082      	sub	sp, #8
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f001 fcf4 	bl	800a674 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c8c:	2101      	movs	r1, #1
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f001 fe0d 	bl	800a8ae <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c94:	2300      	movs	r3, #0
}
 8008c96:	4618      	mov	r0, r3
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
	...

08008ca0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	b088      	sub	sp, #32
 8008ca4:	af04      	add	r7, sp, #16
 8008ca6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008ca8:	2302      	movs	r3, #2
 8008caa:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008cb6:	b2db      	uxtb	r3, r3
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	d102      	bne.n	8008cc2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2203      	movs	r2, #3
 8008cc0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b0b      	cmp	r3, #11
 8008cca:	f200 81bb 	bhi.w	8009044 <USBH_Process+0x3a4>
 8008cce:	a201      	add	r2, pc, #4	@ (adr r2, 8008cd4 <USBH_Process+0x34>)
 8008cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cd4:	08008d05 	.word	0x08008d05
 8008cd8:	08008d37 	.word	0x08008d37
 8008cdc:	08008d9f 	.word	0x08008d9f
 8008ce0:	08008fdf 	.word	0x08008fdf
 8008ce4:	08009045 	.word	0x08009045
 8008ce8:	08008e3f 	.word	0x08008e3f
 8008cec:	08008f85 	.word	0x08008f85
 8008cf0:	08008e75 	.word	0x08008e75
 8008cf4:	08008e95 	.word	0x08008e95
 8008cf8:	08008eb3 	.word	0x08008eb3
 8008cfc:	08008ef7 	.word	0x08008ef7
 8008d00:	08008fc7 	.word	0x08008fc7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008d0a:	b2db      	uxtb	r3, r3
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 819b 	beq.w	8009048 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2201      	movs	r2, #1
 8008d16:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008d18:	20c8      	movs	r0, #200	@ 0xc8
 8008d1a:	f001 fe12 	bl	800a942 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f001 fd05 	bl	800a72e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d34:	e188      	b.n	8009048 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008d3c:	2b01      	cmp	r3, #1
 8008d3e:	d107      	bne.n	8008d50 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2200      	movs	r2, #0
 8008d44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2202      	movs	r2, #2
 8008d4c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d4e:	e18a      	b.n	8009066 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d56:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d5a:	d914      	bls.n	8008d86 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d62:	3301      	adds	r3, #1
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d72:	2b03      	cmp	r3, #3
 8008d74:	d903      	bls.n	8008d7e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	220d      	movs	r2, #13
 8008d7a:	701a      	strb	r2, [r3, #0]
      break;
 8008d7c:	e173      	b.n	8009066 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	2200      	movs	r2, #0
 8008d82:	701a      	strb	r2, [r3, #0]
      break;
 8008d84:	e16f      	b.n	8009066 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d8c:	f103 020a 	add.w	r2, r3, #10
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008d96:	200a      	movs	r0, #10
 8008d98:	f001 fdd3 	bl	800a942 <USBH_Delay>
      break;
 8008d9c:	e163      	b.n	8009066 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008dae:	2104      	movs	r1, #4
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008db4:	2064      	movs	r0, #100	@ 0x64
 8008db6:	f001 fdc4 	bl	800a942 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f001 fc90 	bl	800a6e0 <USBH_LL_GetSpeed>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2205      	movs	r2, #5
 8008dce:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008dd0:	2100      	movs	r1, #0
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f001 fa9b 	bl	800a30e <USBH_AllocPipe>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	461a      	mov	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008de0:	2180      	movs	r1, #128	@ 0x80
 8008de2:	6878      	ldr	r0, [r7, #4]
 8008de4:	f001 fa93 	bl	800a30e <USBH_AllocPipe>
 8008de8:	4603      	mov	r3, r0
 8008dea:	461a      	mov	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	7919      	ldrb	r1, [r3, #4]
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e00:	687a      	ldr	r2, [r7, #4]
 8008e02:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008e04:	9202      	str	r2, [sp, #8]
 8008e06:	2200      	movs	r2, #0
 8008e08:	9201      	str	r2, [sp, #4]
 8008e0a:	9300      	str	r3, [sp, #0]
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2280      	movs	r2, #128	@ 0x80
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 fa4d 	bl	800a2b0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	7959      	ldrb	r1, [r3, #5]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e2a:	9202      	str	r2, [sp, #8]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	9201      	str	r2, [sp, #4]
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	4603      	mov	r3, r0
 8008e34:	2200      	movs	r2, #0
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f001 fa3a 	bl	800a2b0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e3c:	e113      	b.n	8009066 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 f916 	bl	8009070 <USBH_HandleEnum>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e48:	7bbb      	ldrb	r3, [r7, #14]
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	f040 80fd 	bne.w	800904c <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d103      	bne.n	8008e6c <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2208      	movs	r2, #8
 8008e68:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e6a:	e0ef      	b.n	800904c <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2207      	movs	r2, #7
 8008e70:	701a      	strb	r2, [r3, #0]
      break;
 8008e72:	e0eb      	b.n	800904c <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	f000 80e8 	beq.w	8009050 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e86:	2101      	movs	r1, #1
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2208      	movs	r2, #8
 8008e90:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008e92:	e0dd      	b.n	8009050 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 fc3a 	bl	8009716 <USBH_SetCfg>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	f040 80d5 	bne.w	8009054 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2209      	movs	r2, #9
 8008eae:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eb0:	e0d0      	b.n	8009054 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008eb8:	f003 0320 	and.w	r3, r3, #32
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d016      	beq.n	8008eee <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008ec0:	2101      	movs	r1, #1
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 fc4a 	bl	800975c <USBH_SetFeature>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ecc:	7bbb      	ldrb	r3, [r7, #14]
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	220a      	movs	r2, #10
 8008ed8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eda:	e0bd      	b.n	8009058 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008edc:	7bbb      	ldrb	r3, [r7, #14]
 8008ede:	b2db      	uxtb	r3, r3
 8008ee0:	2b03      	cmp	r3, #3
 8008ee2:	f040 80b9 	bne.w	8009058 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	220a      	movs	r2, #10
 8008eea:	701a      	strb	r2, [r3, #0]
      break;
 8008eec:	e0b4      	b.n	8009058 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	220a      	movs	r2, #10
 8008ef2:	701a      	strb	r2, [r3, #0]
      break;
 8008ef4:	e0b0      	b.n	8009058 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80ad 	beq.w	800905c <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	73fb      	strb	r3, [r7, #15]
 8008f0e:	e016      	b.n	8008f3e <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008f10:	7bfa      	ldrb	r2, [r7, #15]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	32de      	adds	r2, #222	@ 0xde
 8008f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f1a:	791a      	ldrb	r2, [r3, #4]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008f22:	429a      	cmp	r2, r3
 8008f24:	d108      	bne.n	8008f38 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008f26:	7bfa      	ldrb	r2, [r7, #15]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	32de      	adds	r2, #222	@ 0xde
 8008f2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008f36:	e005      	b.n	8008f44 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f38:	7bfb      	ldrb	r3, [r7, #15]
 8008f3a:	3301      	adds	r3, #1
 8008f3c:	73fb      	strb	r3, [r7, #15]
 8008f3e:	7bfb      	ldrb	r3, [r7, #15]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0e5      	beq.n	8008f10 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d016      	beq.n	8008f7c <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f54:	689b      	ldr	r3, [r3, #8]
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	4798      	blx	r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d109      	bne.n	8008f74 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2206      	movs	r2, #6
 8008f64:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f6c:	2103      	movs	r1, #3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f72:	e073      	b.n	800905c <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	220d      	movs	r2, #13
 8008f78:	701a      	strb	r2, [r3, #0]
      break;
 8008f7a:	e06f      	b.n	800905c <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	220d      	movs	r2, #13
 8008f80:	701a      	strb	r2, [r3, #0]
      break;
 8008f82:	e06b      	b.n	800905c <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d017      	beq.n	8008fbe <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f94:	691b      	ldr	r3, [r3, #16]
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f9e:	7bbb      	ldrb	r3, [r7, #14]
 8008fa0:	b2db      	uxtb	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d103      	bne.n	8008fae <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	220b      	movs	r2, #11
 8008faa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008fac:	e058      	b.n	8009060 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008fae:	7bbb      	ldrb	r3, [r7, #14]
 8008fb0:	b2db      	uxtb	r3, r3
 8008fb2:	2b02      	cmp	r3, #2
 8008fb4:	d154      	bne.n	8009060 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	220d      	movs	r2, #13
 8008fba:	701a      	strb	r2, [r3, #0]
      break;
 8008fbc:	e050      	b.n	8009060 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	220d      	movs	r2, #13
 8008fc2:	701a      	strb	r2, [r3, #0]
      break;
 8008fc4:	e04c      	b.n	8009060 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d049      	beq.n	8009064 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fd6:	695b      	ldr	r3, [r3, #20]
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	4798      	blx	r3
      }
      break;
 8008fdc:	e042      	b.n	8009064 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008fe6:	6878      	ldr	r0, [r7, #4]
 8008fe8:	f7ff fd4a 	bl	8008a80 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d009      	beq.n	800900a <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2200      	movs	r2, #0
 8009006:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009010:	2b00      	cmp	r3, #0
 8009012:	d005      	beq.n	8009020 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800901a:	2105      	movs	r1, #5
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b01      	cmp	r3, #1
 800902a:	d107      	bne.n	800903c <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2200      	movs	r2, #0
 8009030:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7ff fe22 	bl	8008c7e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800903a:	e014      	b.n	8009066 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fb19 	bl	800a674 <USBH_LL_Start>
      break;
 8009042:	e010      	b.n	8009066 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009044:	bf00      	nop
 8009046:	e00e      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 8009048:	bf00      	nop
 800904a:	e00c      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 800904c:	bf00      	nop
 800904e:	e00a      	b.n	8009066 <USBH_Process+0x3c6>
    break;
 8009050:	bf00      	nop
 8009052:	e008      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 8009054:	bf00      	nop
 8009056:	e006      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 8009058:	bf00      	nop
 800905a:	e004      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 800905c:	bf00      	nop
 800905e:	e002      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 8009060:	bf00      	nop
 8009062:	e000      	b.n	8009066 <USBH_Process+0x3c6>
      break;
 8009064:	bf00      	nop
  }
  return USBH_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}

08009070 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b088      	sub	sp, #32
 8009074:	af04      	add	r7, sp, #16
 8009076:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009078:	2301      	movs	r3, #1
 800907a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800907c:	2301      	movs	r3, #1
 800907e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	785b      	ldrb	r3, [r3, #1]
 8009084:	2b07      	cmp	r3, #7
 8009086:	f200 81bd 	bhi.w	8009404 <USBH_HandleEnum+0x394>
 800908a:	a201      	add	r2, pc, #4	@ (adr r2, 8009090 <USBH_HandleEnum+0x20>)
 800908c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009090:	080090b1 	.word	0x080090b1
 8009094:	0800916b 	.word	0x0800916b
 8009098:	080091d5 	.word	0x080091d5
 800909c:	0800925f 	.word	0x0800925f
 80090a0:	080092c9 	.word	0x080092c9
 80090a4:	08009339 	.word	0x08009339
 80090a8:	0800937f 	.word	0x0800937f
 80090ac:	080093c5 	.word	0x080093c5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80090b0:	2108      	movs	r1, #8
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fa4c 	bl	8009550 <USBH_Get_DevDesc>
 80090b8:	4603      	mov	r3, r0
 80090ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80090bc:	7bbb      	ldrb	r3, [r7, #14]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d12e      	bne.n	8009120 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2201      	movs	r2, #1
 80090d0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	7919      	ldrb	r1, [r3, #4]
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090e2:	687a      	ldr	r2, [r7, #4]
 80090e4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090e6:	9202      	str	r2, [sp, #8]
 80090e8:	2200      	movs	r2, #0
 80090ea:	9201      	str	r2, [sp, #4]
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	4603      	mov	r3, r0
 80090f0:	2280      	movs	r2, #128	@ 0x80
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f001 f8dc 	bl	800a2b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7959      	ldrb	r1, [r3, #5]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009108:	687a      	ldr	r2, [r7, #4]
 800910a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800910c:	9202      	str	r2, [sp, #8]
 800910e:	2200      	movs	r2, #0
 8009110:	9201      	str	r2, [sp, #4]
 8009112:	9300      	str	r3, [sp, #0]
 8009114:	4603      	mov	r3, r0
 8009116:	2200      	movs	r2, #0
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f001 f8c9 	bl	800a2b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800911e:	e173      	b.n	8009408 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009120:	7bbb      	ldrb	r3, [r7, #14]
 8009122:	2b03      	cmp	r3, #3
 8009124:	f040 8170 	bne.w	8009408 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800912e:	3301      	adds	r3, #1
 8009130:	b2da      	uxtb	r2, r3
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800913e:	2b03      	cmp	r3, #3
 8009140:	d903      	bls.n	800914a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	220d      	movs	r2, #13
 8009146:	701a      	strb	r2, [r3, #0]
      break;
 8009148:	e15e      	b.n	8009408 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	795b      	ldrb	r3, [r3, #5]
 800914e:	4619      	mov	r1, r3
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f001 f8fd 	bl	800a350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	791b      	ldrb	r3, [r3, #4]
 800915a:	4619      	mov	r1, r3
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f001 f8f7 	bl	800a350 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	701a      	strb	r2, [r3, #0]
      break;
 8009168:	e14e      	b.n	8009408 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800916a:	2112      	movs	r1, #18
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f000 f9ef 	bl	8009550 <USBH_Get_DevDesc>
 8009172:	4603      	mov	r3, r0
 8009174:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009176:	7bbb      	ldrb	r3, [r7, #14]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d103      	bne.n	8009184 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	2202      	movs	r2, #2
 8009180:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009182:	e143      	b.n	800940c <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009184:	7bbb      	ldrb	r3, [r7, #14]
 8009186:	2b03      	cmp	r3, #3
 8009188:	f040 8140 	bne.w	800940c <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009192:	3301      	adds	r3, #1
 8009194:	b2da      	uxtb	r2, r3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80091a2:	2b03      	cmp	r3, #3
 80091a4:	d903      	bls.n	80091ae <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	220d      	movs	r2, #13
 80091aa:	701a      	strb	r2, [r3, #0]
      break;
 80091ac:	e12e      	b.n	800940c <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	795b      	ldrb	r3, [r3, #5]
 80091b2:	4619      	mov	r1, r3
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f001 f8cb 	bl	800a350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	791b      	ldrb	r3, [r3, #4]
 80091be:	4619      	mov	r1, r3
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f001 f8c5 	bl	800a350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	701a      	strb	r2, [r3, #0]
      break;
 80091d2:	e11b      	b.n	800940c <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80091d4:	2101      	movs	r1, #1
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fa79 	bl	80096ce <USBH_SetAddress>
 80091dc:	4603      	mov	r3, r0
 80091de:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091e0:	7bbb      	ldrb	r3, [r7, #14]
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d130      	bne.n	8009248 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80091e6:	2002      	movs	r0, #2
 80091e8:	f001 fbab 	bl	800a942 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2201      	movs	r2, #1
 80091f0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2203      	movs	r2, #3
 80091f8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	7919      	ldrb	r1, [r3, #4]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800920e:	9202      	str	r2, [sp, #8]
 8009210:	2200      	movs	r2, #0
 8009212:	9201      	str	r2, [sp, #4]
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	4603      	mov	r3, r0
 8009218:	2280      	movs	r2, #128	@ 0x80
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f001 f848 	bl	800a2b0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7959      	ldrb	r1, [r3, #5]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009234:	9202      	str	r2, [sp, #8]
 8009236:	2200      	movs	r2, #0
 8009238:	9201      	str	r2, [sp, #4]
 800923a:	9300      	str	r3, [sp, #0]
 800923c:	4603      	mov	r3, r0
 800923e:	2200      	movs	r2, #0
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f001 f835 	bl	800a2b0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009246:	e0e3      	b.n	8009410 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009248:	7bbb      	ldrb	r3, [r7, #14]
 800924a:	2b03      	cmp	r3, #3
 800924c:	f040 80e0 	bne.w	8009410 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	220d      	movs	r2, #13
 8009254:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2200      	movs	r2, #0
 800925a:	705a      	strb	r2, [r3, #1]
      break;
 800925c:	e0d8      	b.n	8009410 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800925e:	2109      	movs	r1, #9
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f000 f9a1 	bl	80095a8 <USBH_Get_CfgDesc>
 8009266:	4603      	mov	r3, r0
 8009268:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800926a:	7bbb      	ldrb	r3, [r7, #14]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d103      	bne.n	8009278 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2204      	movs	r2, #4
 8009274:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009276:	e0cd      	b.n	8009414 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009278:	7bbb      	ldrb	r3, [r7, #14]
 800927a:	2b03      	cmp	r3, #3
 800927c:	f040 80ca 	bne.w	8009414 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009286:	3301      	adds	r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009296:	2b03      	cmp	r3, #3
 8009298:	d903      	bls.n	80092a2 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	220d      	movs	r2, #13
 800929e:	701a      	strb	r2, [r3, #0]
      break;
 80092a0:	e0b8      	b.n	8009414 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	795b      	ldrb	r3, [r3, #5]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f001 f851 	bl	800a350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	791b      	ldrb	r3, [r3, #4]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 f84b 	bl	800a350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2200      	movs	r2, #0
 80092c4:	701a      	strb	r2, [r3, #0]
      break;
 80092c6:	e0a5      	b.n	8009414 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 f969 	bl	80095a8 <USBH_Get_CfgDesc>
 80092d6:	4603      	mov	r3, r0
 80092d8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092da:	7bbb      	ldrb	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d103      	bne.n	80092e8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2205      	movs	r2, #5
 80092e4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092e6:	e097      	b.n	8009418 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092e8:	7bbb      	ldrb	r3, [r7, #14]
 80092ea:	2b03      	cmp	r3, #3
 80092ec:	f040 8094 	bne.w	8009418 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092f6:	3301      	adds	r3, #1
 80092f8:	b2da      	uxtb	r2, r3
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009306:	2b03      	cmp	r3, #3
 8009308:	d903      	bls.n	8009312 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	220d      	movs	r2, #13
 800930e:	701a      	strb	r2, [r3, #0]
      break;
 8009310:	e082      	b.n	8009418 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	795b      	ldrb	r3, [r3, #5]
 8009316:	4619      	mov	r1, r3
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f819 	bl	800a350 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	791b      	ldrb	r3, [r3, #4]
 8009322:	4619      	mov	r1, r3
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 f813 	bl	800a350 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	701a      	strb	r2, [r3, #0]
      break;
 8009336:	e06f      	b.n	8009418 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800933e:	2b00      	cmp	r3, #0
 8009340:	d019      	beq.n	8009376 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800934e:	23ff      	movs	r3, #255	@ 0xff
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f000 f953 	bl	80095fc <USBH_Get_StringDesc>
 8009356:	4603      	mov	r3, r0
 8009358:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800935a:	7bbb      	ldrb	r3, [r7, #14]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d103      	bne.n	8009368 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2206      	movs	r2, #6
 8009364:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009366:	e059      	b.n	800941c <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b03      	cmp	r3, #3
 800936c:	d156      	bne.n	800941c <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2206      	movs	r2, #6
 8009372:	705a      	strb	r2, [r3, #1]
      break;
 8009374:	e052      	b.n	800941c <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2206      	movs	r2, #6
 800937a:	705a      	strb	r2, [r3, #1]
      break;
 800937c:	e04e      	b.n	800941c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009384:	2b00      	cmp	r3, #0
 8009386:	d019      	beq.n	80093bc <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009394:	23ff      	movs	r3, #255	@ 0xff
 8009396:	6878      	ldr	r0, [r7, #4]
 8009398:	f000 f930 	bl	80095fc <USBH_Get_StringDesc>
 800939c:	4603      	mov	r3, r0
 800939e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093a0:	7bbb      	ldrb	r3, [r7, #14]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d103      	bne.n	80093ae <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2207      	movs	r2, #7
 80093aa:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80093ac:	e038      	b.n	8009420 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093ae:	7bbb      	ldrb	r3, [r7, #14]
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d135      	bne.n	8009420 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2207      	movs	r2, #7
 80093b8:	705a      	strb	r2, [r3, #1]
      break;
 80093ba:	e031      	b.n	8009420 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2207      	movs	r2, #7
 80093c0:	705a      	strb	r2, [r3, #1]
      break;
 80093c2:	e02d      	b.n	8009420 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d017      	beq.n	80093fe <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093da:	23ff      	movs	r3, #255	@ 0xff
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 f90d 	bl	80095fc <USBH_Get_StringDesc>
 80093e2:	4603      	mov	r3, r0
 80093e4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093e6:	7bbb      	ldrb	r3, [r7, #14]
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d102      	bne.n	80093f2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80093ec:	2300      	movs	r3, #0
 80093ee:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093f0:	e018      	b.n	8009424 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093f2:	7bbb      	ldrb	r3, [r7, #14]
 80093f4:	2b03      	cmp	r3, #3
 80093f6:	d115      	bne.n	8009424 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	73fb      	strb	r3, [r7, #15]
      break;
 80093fc:	e012      	b.n	8009424 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80093fe:	2300      	movs	r3, #0
 8009400:	73fb      	strb	r3, [r7, #15]
      break;
 8009402:	e00f      	b.n	8009424 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009404:	bf00      	nop
 8009406:	e00e      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 8009408:	bf00      	nop
 800940a:	e00c      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 800940c:	bf00      	nop
 800940e:	e00a      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 8009410:	bf00      	nop
 8009412:	e008      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 8009414:	bf00      	nop
 8009416:	e006      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 8009418:	bf00      	nop
 800941a:	e004      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 800941c:	bf00      	nop
 800941e:	e002      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 8009420:	bf00      	nop
 8009422:	e000      	b.n	8009426 <USBH_HandleEnum+0x3b6>
      break;
 8009424:	bf00      	nop
  }
  return Status;
 8009426:	7bfb      	ldrb	r3, [r7, #15]
}
 8009428:	4618      	mov	r0, r3
 800942a:	3710      	adds	r7, #16
 800942c:	46bd      	mov	sp, r7
 800942e:	bd80      	pop	{r7, pc}

08009430 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009430:	b480      	push	{r7}
 8009432:	b083      	sub	sp, #12
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
 8009438:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	683a      	ldr	r2, [r7, #0]
 800943e:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr

0800944e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009464:	6878      	ldr	r0, [r7, #4]
 8009466:	f000 f804 	bl	8009472 <USBH_HandleSof>
}
 800946a:	bf00      	nop
 800946c:	3708      	adds	r7, #8
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}

08009472 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009472:	b580      	push	{r7, lr}
 8009474:	b082      	sub	sp, #8
 8009476:	af00      	add	r7, sp, #0
 8009478:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	781b      	ldrb	r3, [r3, #0]
 800947e:	b2db      	uxtb	r3, r3
 8009480:	2b0b      	cmp	r3, #11
 8009482:	d10a      	bne.n	800949a <USBH_HandleSof+0x28>
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800948a:	2b00      	cmp	r3, #0
 800948c:	d005      	beq.n	800949a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009494:	699b      	ldr	r3, [r3, #24]
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	4798      	blx	r3
  }
}
 800949a:	bf00      	nop
 800949c:	3708      	adds	r7, #8
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80094b2:	bf00      	nop
}
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr

080094be <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80094be:	b480      	push	{r7}
 80094c0:	b083      	sub	sp, #12
 80094c2:	af00      	add	r7, sp, #0
 80094c4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80094ce:	bf00      	nop
}
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr

080094da <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80094da:	b480      	push	{r7}
 80094dc:	b083      	sub	sp, #12
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2201      	movs	r2, #1
 80094e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b082      	sub	sp, #8
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2201      	movs	r2, #1
 8009514:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	2200      	movs	r2, #0
 8009524:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009528:	6878      	ldr	r0, [r7, #4]
 800952a:	f001 f8be 	bl	800a6aa <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	791b      	ldrb	r3, [r3, #4]
 8009532:	4619      	mov	r1, r3
 8009534:	6878      	ldr	r0, [r7, #4]
 8009536:	f000 ff0b 	bl	800a350 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	795b      	ldrb	r3, [r3, #5]
 800953e:	4619      	mov	r1, r3
 8009540:	6878      	ldr	r0, [r7, #4]
 8009542:	f000 ff05 	bl	800a350 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3708      	adds	r7, #8
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af02      	add	r7, sp, #8
 8009556:	6078      	str	r0, [r7, #4]
 8009558:	460b      	mov	r3, r1
 800955a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800955c:	887b      	ldrh	r3, [r7, #2]
 800955e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009562:	d901      	bls.n	8009568 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009564:	2303      	movs	r3, #3
 8009566:	e01b      	b.n	80095a0 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800956e:	887b      	ldrh	r3, [r7, #2]
 8009570:	9300      	str	r3, [sp, #0]
 8009572:	4613      	mov	r3, r2
 8009574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009578:	2100      	movs	r1, #0
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 f872 	bl	8009664 <USBH_GetDescriptor>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d109      	bne.n	800959e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009590:	887a      	ldrh	r2, [r7, #2]
 8009592:	4619      	mov	r1, r3
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f929 	bl	80097ec <USBH_ParseDevDesc>
 800959a:	4603      	mov	r3, r0
 800959c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800959e:	7bfb      	ldrb	r3, [r7, #15]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3710      	adds	r7, #16
 80095a4:	46bd      	mov	sp, r7
 80095a6:	bd80      	pop	{r7, pc}

080095a8 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af02      	add	r7, sp, #8
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	460b      	mov	r3, r1
 80095b2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	331c      	adds	r3, #28
 80095b8:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 80095ba:	887b      	ldrh	r3, [r7, #2]
 80095bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095c0:	d901      	bls.n	80095c6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e016      	b.n	80095f4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80095c6:	887b      	ldrh	r3, [r7, #2]
 80095c8:	9300      	str	r3, [sp, #0]
 80095ca:	68bb      	ldr	r3, [r7, #8]
 80095cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095d0:	2100      	movs	r1, #0
 80095d2:	6878      	ldr	r0, [r7, #4]
 80095d4:	f000 f846 	bl	8009664 <USBH_GetDescriptor>
 80095d8:	4603      	mov	r3, r0
 80095da:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80095dc:	7bfb      	ldrb	r3, [r7, #15]
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d107      	bne.n	80095f2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80095e2:	887b      	ldrh	r3, [r7, #2]
 80095e4:	461a      	mov	r2, r3
 80095e6:	68b9      	ldr	r1, [r7, #8]
 80095e8:	6878      	ldr	r0, [r7, #4]
 80095ea:	f000 f9af 	bl	800994c <USBH_ParseCfgDesc>
 80095ee:	4603      	mov	r3, r0
 80095f0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3710      	adds	r7, #16
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80095fc:	b580      	push	{r7, lr}
 80095fe:	b088      	sub	sp, #32
 8009600:	af02      	add	r7, sp, #8
 8009602:	60f8      	str	r0, [r7, #12]
 8009604:	607a      	str	r2, [r7, #4]
 8009606:	461a      	mov	r2, r3
 8009608:	460b      	mov	r3, r1
 800960a:	72fb      	strb	r3, [r7, #11]
 800960c:	4613      	mov	r3, r2
 800960e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009610:	893b      	ldrh	r3, [r7, #8]
 8009612:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009616:	d802      	bhi.n	800961e <USBH_Get_StringDesc+0x22>
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800961e:	2303      	movs	r3, #3
 8009620:	e01c      	b.n	800965c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	b29b      	uxth	r3, r3
 8009626:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800962a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009632:	893b      	ldrh	r3, [r7, #8]
 8009634:	9300      	str	r3, [sp, #0]
 8009636:	460b      	mov	r3, r1
 8009638:	2100      	movs	r1, #0
 800963a:	68f8      	ldr	r0, [r7, #12]
 800963c:	f000 f812 	bl	8009664 <USBH_GetDescriptor>
 8009640:	4603      	mov	r3, r0
 8009642:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009644:	7dfb      	ldrb	r3, [r7, #23]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d107      	bne.n	800965a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009650:	893a      	ldrh	r2, [r7, #8]
 8009652:	6879      	ldr	r1, [r7, #4]
 8009654:	4618      	mov	r0, r3
 8009656:	f000 fb8d 	bl	8009d74 <USBH_ParseStringDesc>
  }

  return status;
 800965a:	7dfb      	ldrb	r3, [r7, #23]
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}

08009664 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b084      	sub	sp, #16
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	607b      	str	r3, [r7, #4]
 800966e:	460b      	mov	r3, r1
 8009670:	72fb      	strb	r3, [r7, #11]
 8009672:	4613      	mov	r3, r2
 8009674:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	789b      	ldrb	r3, [r3, #2]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d11c      	bne.n	80096b8 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800967e:	7afb      	ldrb	r3, [r7, #11]
 8009680:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009684:	b2da      	uxtb	r2, r3
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2206      	movs	r2, #6
 800968e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	893a      	ldrh	r2, [r7, #8]
 8009694:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009696:	893b      	ldrh	r3, [r7, #8]
 8009698:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800969c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80096a0:	d104      	bne.n	80096ac <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	f240 4209 	movw	r2, #1033	@ 0x409
 80096a8:	829a      	strh	r2, [r3, #20]
 80096aa:	e002      	b.n	80096b2 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	8b3a      	ldrh	r2, [r7, #24]
 80096b6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80096b8:	8b3b      	ldrh	r3, [r7, #24]
 80096ba:	461a      	mov	r2, r3
 80096bc:	6879      	ldr	r1, [r7, #4]
 80096be:	68f8      	ldr	r0, [r7, #12]
 80096c0:	f000 fba5 	bl	8009e0e <USBH_CtlReq>
 80096c4:	4603      	mov	r3, r0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3710      	adds	r7, #16
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
 80096d6:	460b      	mov	r3, r1
 80096d8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	789b      	ldrb	r3, [r3, #2]
 80096de:	2b01      	cmp	r3, #1
 80096e0:	d10f      	bne.n	8009702 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2205      	movs	r2, #5
 80096ec:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80096ee:	78fb      	ldrb	r3, [r7, #3]
 80096f0:	b29a      	uxth	r2, r3
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	2200      	movs	r2, #0
 80096fa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2200      	movs	r2, #0
 8009700:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009702:	2200      	movs	r2, #0
 8009704:	2100      	movs	r1, #0
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 fb81 	bl	8009e0e <USBH_CtlReq>
 800970c:	4603      	mov	r3, r0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3708      	adds	r7, #8
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b082      	sub	sp, #8
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	460b      	mov	r3, r1
 8009720:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	789b      	ldrb	r3, [r3, #2]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d10e      	bne.n	8009748 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2200      	movs	r2, #0
 800972e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2209      	movs	r2, #9
 8009734:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	887a      	ldrh	r2, [r7, #2]
 800973a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2200      	movs	r2, #0
 8009740:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2200      	movs	r2, #0
 8009746:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009748:	2200      	movs	r2, #0
 800974a:	2100      	movs	r1, #0
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 fb5e 	bl	8009e0e <USBH_CtlReq>
 8009752:	4603      	mov	r3, r0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3708      	adds	r7, #8
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}

0800975c <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b082      	sub	sp, #8
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
 8009764:	460b      	mov	r3, r1
 8009766:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	789b      	ldrb	r3, [r3, #2]
 800976c:	2b01      	cmp	r3, #1
 800976e:	d10f      	bne.n	8009790 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2203      	movs	r2, #3
 800977a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800977c:	78fb      	ldrb	r3, [r7, #3]
 800977e:	b29a      	uxth	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009790:	2200      	movs	r2, #0
 8009792:	2100      	movs	r1, #0
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f000 fb3a 	bl	8009e0e <USBH_CtlReq>
 800979a:	4603      	mov	r3, r0
}
 800979c:	4618      	mov	r0, r3
 800979e:	3708      	adds	r7, #8
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bd80      	pop	{r7, pc}

080097a4 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	460b      	mov	r3, r1
 80097ae:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	789b      	ldrb	r3, [r3, #2]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d10f      	bne.n	80097d8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2201      	movs	r2, #1
 80097c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2200      	movs	r2, #0
 80097c8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80097ca:	78fb      	ldrb	r3, [r7, #3]
 80097cc:	b29a      	uxth	r2, r3
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2200      	movs	r2, #0
 80097d6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097d8:	2200      	movs	r2, #0
 80097da:	2100      	movs	r1, #0
 80097dc:	6878      	ldr	r0, [r7, #4]
 80097de:	f000 fb16 	bl	8009e0e <USBH_CtlReq>
 80097e2:	4603      	mov	r3, r0
}
 80097e4:	4618      	mov	r0, r3
 80097e6:	3708      	adds	r7, #8
 80097e8:	46bd      	mov	sp, r7
 80097ea:	bd80      	pop	{r7, pc}

080097ec <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097ec:	b480      	push	{r7}
 80097ee:	b087      	sub	sp, #28
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	60f8      	str	r0, [r7, #12]
 80097f4:	60b9      	str	r1, [r7, #8]
 80097f6:	4613      	mov	r3, r2
 80097f8:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009800:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009806:	68bb      	ldr	r3, [r7, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d101      	bne.n	8009810 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800980c:	2302      	movs	r3, #2
 800980e:	e094      	b.n	800993a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	781a      	ldrb	r2, [r3, #0]
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009818:	68bb      	ldr	r3, [r7, #8]
 800981a:	785a      	ldrb	r2, [r3, #1]
 800981c:	693b      	ldr	r3, [r7, #16]
 800981e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	3302      	adds	r3, #2
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	461a      	mov	r2, r3
 8009828:	68bb      	ldr	r3, [r7, #8]
 800982a:	3303      	adds	r3, #3
 800982c:	781b      	ldrb	r3, [r3, #0]
 800982e:	021b      	lsls	r3, r3, #8
 8009830:	b29b      	uxth	r3, r3
 8009832:	4313      	orrs	r3, r2
 8009834:	b29a      	uxth	r2, r3
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	791a      	ldrb	r2, [r3, #4]
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	795a      	ldrb	r2, [r3, #5]
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	799a      	ldrb	r2, [r3, #6]
 800984e:	693b      	ldr	r3, [r7, #16]
 8009850:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	79da      	ldrb	r2, [r3, #7]
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009860:	2b00      	cmp	r3, #0
 8009862:	d004      	beq.n	800986e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800986a:	2b01      	cmp	r3, #1
 800986c:	d11b      	bne.n	80098a6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	79db      	ldrb	r3, [r3, #7]
 8009872:	2b20      	cmp	r3, #32
 8009874:	dc0f      	bgt.n	8009896 <USBH_ParseDevDesc+0xaa>
 8009876:	2b08      	cmp	r3, #8
 8009878:	db0f      	blt.n	800989a <USBH_ParseDevDesc+0xae>
 800987a:	3b08      	subs	r3, #8
 800987c:	4a32      	ldr	r2, [pc, #200]	@ (8009948 <USBH_ParseDevDesc+0x15c>)
 800987e:	fa22 f303 	lsr.w	r3, r2, r3
 8009882:	f003 0301 	and.w	r3, r3, #1
 8009886:	2b00      	cmp	r3, #0
 8009888:	bf14      	ite	ne
 800988a:	2301      	movne	r3, #1
 800988c:	2300      	moveq	r3, #0
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d106      	bne.n	80098a2 <USBH_ParseDevDesc+0xb6>
 8009894:	e001      	b.n	800989a <USBH_ParseDevDesc+0xae>
 8009896:	2b40      	cmp	r3, #64	@ 0x40
 8009898:	d003      	beq.n	80098a2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	2208      	movs	r2, #8
 800989e:	71da      	strb	r2, [r3, #7]
        break;
 80098a0:	e000      	b.n	80098a4 <USBH_ParseDevDesc+0xb8>
        break;
 80098a2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80098a4:	e00e      	b.n	80098c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098ac:	2b02      	cmp	r3, #2
 80098ae:	d107      	bne.n	80098c0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	79db      	ldrb	r3, [r3, #7]
 80098b4:	2b08      	cmp	r3, #8
 80098b6:	d005      	beq.n	80098c4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 80098b8:	693b      	ldr	r3, [r7, #16]
 80098ba:	2208      	movs	r2, #8
 80098bc:	71da      	strb	r2, [r3, #7]
 80098be:	e001      	b.n	80098c4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80098c0:	2303      	movs	r3, #3
 80098c2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80098c4:	88fb      	ldrh	r3, [r7, #6]
 80098c6:	2b08      	cmp	r3, #8
 80098c8:	d936      	bls.n	8009938 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	3308      	adds	r3, #8
 80098ce:	781b      	ldrb	r3, [r3, #0]
 80098d0:	461a      	mov	r2, r3
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	3309      	adds	r3, #9
 80098d6:	781b      	ldrb	r3, [r3, #0]
 80098d8:	021b      	lsls	r3, r3, #8
 80098da:	b29b      	uxth	r3, r3
 80098dc:	4313      	orrs	r3, r2
 80098de:	b29a      	uxth	r2, r3
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80098e4:	68bb      	ldr	r3, [r7, #8]
 80098e6:	330a      	adds	r3, #10
 80098e8:	781b      	ldrb	r3, [r3, #0]
 80098ea:	461a      	mov	r2, r3
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	330b      	adds	r3, #11
 80098f0:	781b      	ldrb	r3, [r3, #0]
 80098f2:	021b      	lsls	r3, r3, #8
 80098f4:	b29b      	uxth	r3, r3
 80098f6:	4313      	orrs	r3, r2
 80098f8:	b29a      	uxth	r2, r3
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80098fe:	68bb      	ldr	r3, [r7, #8]
 8009900:	330c      	adds	r3, #12
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	461a      	mov	r2, r3
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	330d      	adds	r3, #13
 800990a:	781b      	ldrb	r3, [r3, #0]
 800990c:	021b      	lsls	r3, r3, #8
 800990e:	b29b      	uxth	r3, r3
 8009910:	4313      	orrs	r3, r2
 8009912:	b29a      	uxth	r2, r3
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	7b9a      	ldrb	r2, [r3, #14]
 800991c:	693b      	ldr	r3, [r7, #16]
 800991e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 8009920:	68bb      	ldr	r3, [r7, #8]
 8009922:	7bda      	ldrb	r2, [r3, #15]
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009928:	68bb      	ldr	r3, [r7, #8]
 800992a:	7c1a      	ldrb	r2, [r3, #16]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	7c5a      	ldrb	r2, [r3, #17]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009938:	7dfb      	ldrb	r3, [r7, #23]
}
 800993a:	4618      	mov	r0, r3
 800993c:	371c      	adds	r7, #28
 800993e:	46bd      	mov	sp, r7
 8009940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009944:	4770      	bx	lr
 8009946:	bf00      	nop
 8009948:	01000101 	.word	0x01000101

0800994c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800994c:	b580      	push	{r7, lr}
 800994e:	b08c      	sub	sp, #48	@ 0x30
 8009950:	af00      	add	r7, sp, #0
 8009952:	60f8      	str	r0, [r7, #12]
 8009954:	60b9      	str	r1, [r7, #8]
 8009956:	4613      	mov	r3, r2
 8009958:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009960:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009968:	2300      	movs	r3, #0
 800996a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800996e:	2300      	movs	r3, #0
 8009970:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d101      	bne.n	800997e <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800997a:	2302      	movs	r3, #2
 800997c:	e0da      	b.n	8009b34 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 8009982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	2b09      	cmp	r3, #9
 8009988:	d002      	beq.n	8009990 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800998a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998c:	2209      	movs	r2, #9
 800998e:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	781a      	ldrb	r2, [r3, #0]
 8009994:	6a3b      	ldr	r3, [r7, #32]
 8009996:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009998:	68bb      	ldr	r3, [r7, #8]
 800999a:	785a      	ldrb	r2, [r3, #1]
 800999c:	6a3b      	ldr	r3, [r7, #32]
 800999e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80099a0:	68bb      	ldr	r3, [r7, #8]
 80099a2:	3302      	adds	r3, #2
 80099a4:	781b      	ldrb	r3, [r3, #0]
 80099a6:	461a      	mov	r2, r3
 80099a8:	68bb      	ldr	r3, [r7, #8]
 80099aa:	3303      	adds	r3, #3
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	021b      	lsls	r3, r3, #8
 80099b0:	b29b      	uxth	r3, r3
 80099b2:	4313      	orrs	r3, r2
 80099b4:	b29b      	uxth	r3, r3
 80099b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80099ba:	bf28      	it	cs
 80099bc:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 80099c0:	b29a      	uxth	r2, r3
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	791a      	ldrb	r2, [r3, #4]
 80099ca:	6a3b      	ldr	r3, [r7, #32]
 80099cc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	795a      	ldrb	r2, [r3, #5]
 80099d2:	6a3b      	ldr	r3, [r7, #32]
 80099d4:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80099d6:	68bb      	ldr	r3, [r7, #8]
 80099d8:	799a      	ldrb	r2, [r3, #6]
 80099da:	6a3b      	ldr	r3, [r7, #32]
 80099dc:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	79da      	ldrb	r2, [r3, #7]
 80099e2:	6a3b      	ldr	r3, [r7, #32]
 80099e4:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80099e6:	68bb      	ldr	r3, [r7, #8]
 80099e8:	7a1a      	ldrb	r2, [r3, #8]
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80099ee:	88fb      	ldrh	r3, [r7, #6]
 80099f0:	2b09      	cmp	r3, #9
 80099f2:	f240 809d 	bls.w	8009b30 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80099f6:	2309      	movs	r3, #9
 80099f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80099fa:	2300      	movs	r3, #0
 80099fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099fe:	e081      	b.n	8009b04 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a00:	f107 0316 	add.w	r3, r7, #22
 8009a04:	4619      	mov	r1, r3
 8009a06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a08:	f000 f9e7 	bl	8009dda <USBH_GetNextDesc>
 8009a0c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009a0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b04      	cmp	r3, #4
 8009a14:	d176      	bne.n	8009b04 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009a16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a18:	781b      	ldrb	r3, [r3, #0]
 8009a1a:	2b09      	cmp	r3, #9
 8009a1c:	d002      	beq.n	8009a24 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 8009a1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a20:	2209      	movs	r2, #9
 8009a22:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a28:	221a      	movs	r2, #26
 8009a2a:	fb02 f303 	mul.w	r3, r2, r3
 8009a2e:	3308      	adds	r3, #8
 8009a30:	6a3a      	ldr	r2, [r7, #32]
 8009a32:	4413      	add	r3, r2
 8009a34:	3302      	adds	r3, #2
 8009a36:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009a38:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a3a:	69f8      	ldr	r0, [r7, #28]
 8009a3c:	f000 f87e 	bl	8009b3c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009a40:	2300      	movs	r3, #0
 8009a42:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a4a:	e043      	b.n	8009ad4 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a4c:	f107 0316 	add.w	r3, r7, #22
 8009a50:	4619      	mov	r1, r3
 8009a52:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a54:	f000 f9c1 	bl	8009dda <USBH_GetNextDesc>
 8009a58:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5c:	785b      	ldrb	r3, [r3, #1]
 8009a5e:	2b05      	cmp	r3, #5
 8009a60:	d138      	bne.n	8009ad4 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	795b      	ldrb	r3, [r3, #5]
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d113      	bne.n	8009a92 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a6a:	69fb      	ldr	r3, [r7, #28]
 8009a6c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a6e:	2b02      	cmp	r3, #2
 8009a70:	d003      	beq.n	8009a7a <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	799b      	ldrb	r3, [r3, #6]
 8009a76:	2b03      	cmp	r3, #3
 8009a78:	d10b      	bne.n	8009a92 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a7a:	69fb      	ldr	r3, [r7, #28]
 8009a7c:	79db      	ldrb	r3, [r3, #7]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d10b      	bne.n	8009a9a <USBH_ParseCfgDesc+0x14e>
 8009a82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	2b09      	cmp	r3, #9
 8009a88:	d007      	beq.n	8009a9a <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009a8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8c:	2209      	movs	r2, #9
 8009a8e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a90:	e003      	b.n	8009a9a <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a94:	2207      	movs	r2, #7
 8009a96:	701a      	strb	r2, [r3, #0]
 8009a98:	e000      	b.n	8009a9c <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a9a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aa0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009aa4:	3201      	adds	r2, #1
 8009aa6:	00d2      	lsls	r2, r2, #3
 8009aa8:	211a      	movs	r1, #26
 8009aaa:	fb01 f303 	mul.w	r3, r1, r3
 8009aae:	4413      	add	r3, r2
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	6a3a      	ldr	r2, [r7, #32]
 8009ab4:	4413      	add	r3, r2
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009aba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009abc:	69b9      	ldr	r1, [r7, #24]
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f000 f870 	bl	8009ba4 <USBH_ParseEPDesc>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009aca:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009ace:	3301      	adds	r3, #1
 8009ad0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ad4:	69fb      	ldr	r3, [r7, #28]
 8009ad6:	791b      	ldrb	r3, [r3, #4]
 8009ad8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d204      	bcs.n	8009aea <USBH_ParseCfgDesc+0x19e>
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	885a      	ldrh	r2, [r3, #2]
 8009ae4:	8afb      	ldrh	r3, [r7, #22]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d8b0      	bhi.n	8009a4c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009aea:	69fb      	ldr	r3, [r7, #28]
 8009aec:	791b      	ldrb	r3, [r3, #4]
 8009aee:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d201      	bcs.n	8009afa <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009af6:	2303      	movs	r3, #3
 8009af8:	e01c      	b.n	8009b34 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009afa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009afe:	3301      	adds	r3, #1
 8009b00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009b04:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d805      	bhi.n	8009b18 <USBH_ParseCfgDesc+0x1cc>
 8009b0c:	6a3b      	ldr	r3, [r7, #32]
 8009b0e:	885a      	ldrh	r2, [r3, #2]
 8009b10:	8afb      	ldrh	r3, [r7, #22]
 8009b12:	429a      	cmp	r2, r3
 8009b14:	f63f af74 	bhi.w	8009a00 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009b18:	6a3b      	ldr	r3, [r7, #32]
 8009b1a:	791b      	ldrb	r3, [r3, #4]
 8009b1c:	2b02      	cmp	r3, #2
 8009b1e:	bf28      	it	cs
 8009b20:	2302      	movcs	r3, #2
 8009b22:	b2db      	uxtb	r3, r3
 8009b24:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d201      	bcs.n	8009b30 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	e001      	b.n	8009b34 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009b30:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3730      	adds	r7, #48	@ 0x30
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}

08009b3c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
 8009b44:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	781a      	ldrb	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	785a      	ldrb	r2, [r3, #1]
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	789a      	ldrb	r2, [r3, #2]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	78da      	ldrb	r2, [r3, #3]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009b66:	683b      	ldr	r3, [r7, #0]
 8009b68:	3304      	adds	r3, #4
 8009b6a:	781b      	ldrb	r3, [r3, #0]
 8009b6c:	2b02      	cmp	r3, #2
 8009b6e:	bf28      	it	cs
 8009b70:	2302      	movcs	r3, #2
 8009b72:	b2da      	uxtb	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009b78:	683b      	ldr	r3, [r7, #0]
 8009b7a:	795a      	ldrb	r2, [r3, #5]
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009b80:	683b      	ldr	r3, [r7, #0]
 8009b82:	799a      	ldrb	r2, [r3, #6]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009b88:	683b      	ldr	r3, [r7, #0]
 8009b8a:	79da      	ldrb	r2, [r3, #7]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	7a1a      	ldrb	r2, [r3, #8]
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	721a      	strb	r2, [r3, #8]
}
 8009b98:	bf00      	nop
 8009b9a:	370c      	adds	r7, #12
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba2:	4770      	bx	lr

08009ba4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b087      	sub	sp, #28
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	60f8      	str	r0, [r7, #12]
 8009bac:	60b9      	str	r1, [r7, #8]
 8009bae:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	781a      	ldrb	r2, [r3, #0]
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	785a      	ldrb	r2, [r3, #1]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	789a      	ldrb	r2, [r3, #2]
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	78da      	ldrb	r2, [r3, #3]
 8009bd0:	68bb      	ldr	r3, [r7, #8]
 8009bd2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	3304      	adds	r3, #4
 8009bd8:	781b      	ldrb	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	3305      	adds	r3, #5
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	021b      	lsls	r3, r3, #8
 8009be4:	b29b      	uxth	r3, r3
 8009be6:	4313      	orrs	r3, r2
 8009be8:	b29a      	uxth	r2, r3
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	799a      	ldrb	r2, [r3, #6]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	889b      	ldrh	r3, [r3, #4]
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d009      	beq.n	8009c12 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009bfe:	68bb      	ldr	r3, [r7, #8]
 8009c00:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009c02:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009c06:	d804      	bhi.n	8009c12 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c10:	d901      	bls.n	8009c16 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009c12:	2303      	movs	r3, #3
 8009c14:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d136      	bne.n	8009c8e <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	78db      	ldrb	r3, [r3, #3]
 8009c24:	f003 0303 	and.w	r3, r3, #3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	d108      	bne.n	8009c3e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	889b      	ldrh	r3, [r3, #4]
 8009c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c34:	f240 8097 	bls.w	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c38:	2303      	movs	r3, #3
 8009c3a:	75fb      	strb	r3, [r7, #23]
 8009c3c:	e093      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	78db      	ldrb	r3, [r3, #3]
 8009c42:	f003 0303 	and.w	r3, r3, #3
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d107      	bne.n	8009c5a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	889b      	ldrh	r3, [r3, #4]
 8009c4e:	2b40      	cmp	r3, #64	@ 0x40
 8009c50:	f240 8089 	bls.w	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c54:	2303      	movs	r3, #3
 8009c56:	75fb      	strb	r3, [r7, #23]
 8009c58:	e085      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	78db      	ldrb	r3, [r3, #3]
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	2b01      	cmp	r3, #1
 8009c64:	d005      	beq.n	8009c72 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009c66:	68bb      	ldr	r3, [r7, #8]
 8009c68:	78db      	ldrb	r3, [r3, #3]
 8009c6a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c6e:	2b03      	cmp	r3, #3
 8009c70:	d10a      	bne.n	8009c88 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	799b      	ldrb	r3, [r3, #6]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <USBH_ParseEPDesc+0xde>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	799b      	ldrb	r3, [r3, #6]
 8009c7e:	2b10      	cmp	r3, #16
 8009c80:	d970      	bls.n	8009d64 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009c82:	2303      	movs	r3, #3
 8009c84:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c86:	e06d      	b.n	8009d64 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c88:	2303      	movs	r3, #3
 8009c8a:	75fb      	strb	r3, [r7, #23]
 8009c8c:	e06b      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c94:	2b01      	cmp	r3, #1
 8009c96:	d13c      	bne.n	8009d12 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	78db      	ldrb	r3, [r3, #3]
 8009c9c:	f003 0303 	and.w	r3, r3, #3
 8009ca0:	2b02      	cmp	r3, #2
 8009ca2:	d005      	beq.n	8009cb0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	78db      	ldrb	r3, [r3, #3]
 8009ca8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d106      	bne.n	8009cbe <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009cb0:	68bb      	ldr	r3, [r7, #8]
 8009cb2:	889b      	ldrh	r3, [r3, #4]
 8009cb4:	2b40      	cmp	r3, #64	@ 0x40
 8009cb6:	d956      	bls.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009cb8:	2303      	movs	r3, #3
 8009cba:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009cbc:	e053      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009cbe:	68bb      	ldr	r3, [r7, #8]
 8009cc0:	78db      	ldrb	r3, [r3, #3]
 8009cc2:	f003 0303 	and.w	r3, r3, #3
 8009cc6:	2b01      	cmp	r3, #1
 8009cc8:	d10e      	bne.n	8009ce8 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	799b      	ldrb	r3, [r3, #6]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009cd6:	2b10      	cmp	r3, #16
 8009cd8:	d803      	bhi.n	8009ce2 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009cde:	2b40      	cmp	r3, #64	@ 0x40
 8009ce0:	d941      	bls.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	75fb      	strb	r3, [r7, #23]
 8009ce6:	e03e      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	78db      	ldrb	r3, [r3, #3]
 8009cec:	f003 0303 	and.w	r3, r3, #3
 8009cf0:	2b03      	cmp	r3, #3
 8009cf2:	d10b      	bne.n	8009d0c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	799b      	ldrb	r3, [r3, #6]
 8009cf8:	2b00      	cmp	r3, #0
 8009cfa:	d004      	beq.n	8009d06 <USBH_ParseEPDesc+0x162>
 8009cfc:	68bb      	ldr	r3, [r7, #8]
 8009cfe:	889b      	ldrh	r3, [r3, #4]
 8009d00:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d04:	d32f      	bcc.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d06:	2303      	movs	r3, #3
 8009d08:	75fb      	strb	r3, [r7, #23]
 8009d0a:	e02c      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	e029      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d18:	2b02      	cmp	r3, #2
 8009d1a:	d120      	bne.n	8009d5e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	78db      	ldrb	r3, [r3, #3]
 8009d20:	f003 0303 	and.w	r3, r3, #3
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d106      	bne.n	8009d36 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	889b      	ldrh	r3, [r3, #4]
 8009d2c:	2b08      	cmp	r3, #8
 8009d2e:	d01a      	beq.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d30:	2303      	movs	r3, #3
 8009d32:	75fb      	strb	r3, [r7, #23]
 8009d34:	e017      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	78db      	ldrb	r3, [r3, #3]
 8009d3a:	f003 0303 	and.w	r3, r3, #3
 8009d3e:	2b03      	cmp	r3, #3
 8009d40:	d10a      	bne.n	8009d58 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	799b      	ldrb	r3, [r3, #6]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d003      	beq.n	8009d52 <USBH_ParseEPDesc+0x1ae>
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	889b      	ldrh	r3, [r3, #4]
 8009d4e:	2b08      	cmp	r3, #8
 8009d50:	d909      	bls.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d52:	2303      	movs	r3, #3
 8009d54:	75fb      	strb	r3, [r7, #23]
 8009d56:	e006      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	75fb      	strb	r3, [r7, #23]
 8009d5c:	e003      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009d5e:	2303      	movs	r3, #3
 8009d60:	75fb      	strb	r3, [r7, #23]
 8009d62:	e000      	b.n	8009d66 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d64:	bf00      	nop
  }

  return status;
 8009d66:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	371c      	adds	r7, #28
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b087      	sub	sp, #28
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	60f8      	str	r0, [r7, #12]
 8009d7c:	60b9      	str	r1, [r7, #8]
 8009d7e:	4613      	mov	r3, r2
 8009d80:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3301      	adds	r3, #1
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b03      	cmp	r3, #3
 8009d8a:	d120      	bne.n	8009dce <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	1e9a      	subs	r2, r3, #2
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	4293      	cmp	r3, r2
 8009d96:	bf28      	it	cs
 8009d98:	4613      	movcs	r3, r2
 8009d9a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	3302      	adds	r3, #2
 8009da0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009da2:	2300      	movs	r3, #0
 8009da4:	82fb      	strh	r3, [r7, #22]
 8009da6:	e00b      	b.n	8009dc0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009da8:	8afb      	ldrh	r3, [r7, #22]
 8009daa:	68fa      	ldr	r2, [r7, #12]
 8009dac:	4413      	add	r3, r2
 8009dae:	781a      	ldrb	r2, [r3, #0]
 8009db0:	68bb      	ldr	r3, [r7, #8]
 8009db2:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	3301      	adds	r3, #1
 8009db8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009dba:	8afb      	ldrh	r3, [r7, #22]
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	82fb      	strh	r3, [r7, #22]
 8009dc0:	8afa      	ldrh	r2, [r7, #22]
 8009dc2:	8abb      	ldrh	r3, [r7, #20]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d3ef      	bcc.n	8009da8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	701a      	strb	r2, [r3, #0]
  }
}
 8009dce:	bf00      	nop
 8009dd0:	371c      	adds	r7, #28
 8009dd2:	46bd      	mov	sp, r7
 8009dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd8:	4770      	bx	lr

08009dda <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009dda:	b480      	push	{r7}
 8009ddc:	b085      	sub	sp, #20
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
 8009de2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	881b      	ldrh	r3, [r3, #0]
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	7812      	ldrb	r2, [r2, #0]
 8009dec:	4413      	add	r3, r2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	4413      	add	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009e00:	68fb      	ldr	r3, [r7, #12]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3714      	adds	r7, #20
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b086      	sub	sp, #24
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	4613      	mov	r3, r2
 8009e1a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	789b      	ldrb	r3, [r3, #2]
 8009e24:	2b01      	cmp	r3, #1
 8009e26:	d002      	beq.n	8009e2e <USBH_CtlReq+0x20>
 8009e28:	2b02      	cmp	r3, #2
 8009e2a:	d00f      	beq.n	8009e4c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009e2c:	e027      	b.n	8009e7e <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	68ba      	ldr	r2, [r7, #8]
 8009e32:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	88fa      	ldrh	r2, [r7, #6]
 8009e38:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2202      	movs	r2, #2
 8009e44:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e46:	2301      	movs	r3, #1
 8009e48:	75fb      	strb	r3, [r7, #23]
      break;
 8009e4a:	e018      	b.n	8009e7e <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009e4c:	68f8      	ldr	r0, [r7, #12]
 8009e4e:	f000 f81b 	bl	8009e88 <USBH_HandleControl>
 8009e52:	4603      	mov	r3, r0
 8009e54:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d002      	beq.n	8009e62 <USBH_CtlReq+0x54>
 8009e5c:	7dfb      	ldrb	r3, [r7, #23]
 8009e5e:	2b03      	cmp	r3, #3
 8009e60:	d106      	bne.n	8009e70 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2201      	movs	r2, #1
 8009e66:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	761a      	strb	r2, [r3, #24]
      break;
 8009e6e:	e005      	b.n	8009e7c <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009e70:	7dfb      	ldrb	r3, [r7, #23]
 8009e72:	2b02      	cmp	r3, #2
 8009e74:	d102      	bne.n	8009e7c <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	2201      	movs	r2, #1
 8009e7a:	709a      	strb	r2, [r3, #2]
      break;
 8009e7c:	bf00      	nop
  }
  return status;
 8009e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3718      	adds	r7, #24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}

08009e88 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b086      	sub	sp, #24
 8009e8c:	af02      	add	r7, sp, #8
 8009e8e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e90:	2301      	movs	r3, #1
 8009e92:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e94:	2300      	movs	r3, #0
 8009e96:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	7e1b      	ldrb	r3, [r3, #24]
 8009e9c:	3b01      	subs	r3, #1
 8009e9e:	2b0a      	cmp	r3, #10
 8009ea0:	f200 8156 	bhi.w	800a150 <USBH_HandleControl+0x2c8>
 8009ea4:	a201      	add	r2, pc, #4	@ (adr r2, 8009eac <USBH_HandleControl+0x24>)
 8009ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eaa:	bf00      	nop
 8009eac:	08009ed9 	.word	0x08009ed9
 8009eb0:	08009ef3 	.word	0x08009ef3
 8009eb4:	08009f5d 	.word	0x08009f5d
 8009eb8:	08009f83 	.word	0x08009f83
 8009ebc:	08009fbb 	.word	0x08009fbb
 8009ec0:	08009fe5 	.word	0x08009fe5
 8009ec4:	0800a037 	.word	0x0800a037
 8009ec8:	0800a059 	.word	0x0800a059
 8009ecc:	0800a095 	.word	0x0800a095
 8009ed0:	0800a0bb 	.word	0x0800a0bb
 8009ed4:	0800a0f9 	.word	0x0800a0f9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f103 0110 	add.w	r1, r3, #16
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	795b      	ldrb	r3, [r3, #5]
 8009ee2:	461a      	mov	r2, r3
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f943 	bl	800a170 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2202      	movs	r2, #2
 8009eee:	761a      	strb	r2, [r3, #24]
      break;
 8009ef0:	e139      	b.n	800a166 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	795b      	ldrb	r3, [r3, #5]
 8009ef6:	4619      	mov	r1, r3
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fcc5 	bl	800a888 <USBH_LL_GetURBState>
 8009efe:	4603      	mov	r3, r0
 8009f00:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f02:	7bbb      	ldrb	r3, [r7, #14]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d11e      	bne.n	8009f46 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	7c1b      	ldrb	r3, [r3, #16]
 8009f0c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009f10:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	8adb      	ldrh	r3, [r3, #22]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00a      	beq.n	8009f30 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009f1a:	7b7b      	ldrb	r3, [r7, #13]
 8009f1c:	2b80      	cmp	r3, #128	@ 0x80
 8009f1e:	d103      	bne.n	8009f28 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2203      	movs	r2, #3
 8009f24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f26:	e115      	b.n	800a154 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2205      	movs	r2, #5
 8009f2c:	761a      	strb	r2, [r3, #24]
      break;
 8009f2e:	e111      	b.n	800a154 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009f30:	7b7b      	ldrb	r3, [r7, #13]
 8009f32:	2b80      	cmp	r3, #128	@ 0x80
 8009f34:	d103      	bne.n	8009f3e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	2209      	movs	r2, #9
 8009f3a:	761a      	strb	r2, [r3, #24]
      break;
 8009f3c:	e10a      	b.n	800a154 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2207      	movs	r2, #7
 8009f42:	761a      	strb	r2, [r3, #24]
      break;
 8009f44:	e106      	b.n	800a154 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f46:	7bbb      	ldrb	r3, [r7, #14]
 8009f48:	2b04      	cmp	r3, #4
 8009f4a:	d003      	beq.n	8009f54 <USBH_HandleControl+0xcc>
 8009f4c:	7bbb      	ldrb	r3, [r7, #14]
 8009f4e:	2b02      	cmp	r3, #2
 8009f50:	f040 8100 	bne.w	800a154 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	220b      	movs	r2, #11
 8009f58:	761a      	strb	r2, [r3, #24]
      break;
 8009f5a:	e0fb      	b.n	800a154 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f62:	b29a      	uxth	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6899      	ldr	r1, [r3, #8]
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	899a      	ldrh	r2, [r3, #12]
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	791b      	ldrb	r3, [r3, #4]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f93a 	bl	800a1ee <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2204      	movs	r2, #4
 8009f7e:	761a      	strb	r2, [r3, #24]
      break;
 8009f80:	e0f1      	b.n	800a166 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	791b      	ldrb	r3, [r3, #4]
 8009f86:	4619      	mov	r1, r3
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f000 fc7d 	bl	800a888 <USBH_LL_GetURBState>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f92:	7bbb      	ldrb	r3, [r7, #14]
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d102      	bne.n	8009f9e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	2209      	movs	r2, #9
 8009f9c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f9e:	7bbb      	ldrb	r3, [r7, #14]
 8009fa0:	2b05      	cmp	r3, #5
 8009fa2:	d102      	bne.n	8009faa <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009fa4:	2303      	movs	r3, #3
 8009fa6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fa8:	e0d6      	b.n	800a158 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009faa:	7bbb      	ldrb	r3, [r7, #14]
 8009fac:	2b04      	cmp	r3, #4
 8009fae:	f040 80d3 	bne.w	800a158 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	220b      	movs	r2, #11
 8009fb6:	761a      	strb	r2, [r3, #24]
      break;
 8009fb8:	e0ce      	b.n	800a158 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6899      	ldr	r1, [r3, #8]
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	899a      	ldrh	r2, [r3, #12]
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	795b      	ldrb	r3, [r3, #5]
 8009fc6:	2001      	movs	r0, #1
 8009fc8:	9000      	str	r0, [sp, #0]
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f8ea 	bl	800a1a4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fd6:	b29a      	uxth	r2, r3
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2206      	movs	r2, #6
 8009fe0:	761a      	strb	r2, [r3, #24]
      break;
 8009fe2:	e0c0      	b.n	800a166 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	795b      	ldrb	r3, [r3, #5]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fc4c 	bl	800a888 <USBH_LL_GetURBState>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009ff4:	7bbb      	ldrb	r3, [r7, #14]
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d103      	bne.n	800a002 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2207      	movs	r2, #7
 8009ffe:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a000:	e0ac      	b.n	800a15c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a002:	7bbb      	ldrb	r3, [r7, #14]
 800a004:	2b05      	cmp	r3, #5
 800a006:	d105      	bne.n	800a014 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	220c      	movs	r2, #12
 800a00c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a00e:	2303      	movs	r3, #3
 800a010:	73fb      	strb	r3, [r7, #15]
      break;
 800a012:	e0a3      	b.n	800a15c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a014:	7bbb      	ldrb	r3, [r7, #14]
 800a016:	2b02      	cmp	r3, #2
 800a018:	d103      	bne.n	800a022 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2205      	movs	r2, #5
 800a01e:	761a      	strb	r2, [r3, #24]
      break;
 800a020:	e09c      	b.n	800a15c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a022:	7bbb      	ldrb	r3, [r7, #14]
 800a024:	2b04      	cmp	r3, #4
 800a026:	f040 8099 	bne.w	800a15c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	220b      	movs	r2, #11
 800a02e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a030:	2302      	movs	r3, #2
 800a032:	73fb      	strb	r3, [r7, #15]
      break;
 800a034:	e092      	b.n	800a15c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	791b      	ldrb	r3, [r3, #4]
 800a03a:	2200      	movs	r2, #0
 800a03c:	2100      	movs	r1, #0
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f000 f8d5 	bl	800a1ee <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2208      	movs	r2, #8
 800a054:	761a      	strb	r2, [r3, #24]

      break;
 800a056:	e086      	b.n	800a166 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	791b      	ldrb	r3, [r3, #4]
 800a05c:	4619      	mov	r1, r3
 800a05e:	6878      	ldr	r0, [r7, #4]
 800a060:	f000 fc12 	bl	800a888 <USBH_LL_GetURBState>
 800a064:	4603      	mov	r3, r0
 800a066:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a068:	7bbb      	ldrb	r3, [r7, #14]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d105      	bne.n	800a07a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	220d      	movs	r2, #13
 800a072:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a078:	e072      	b.n	800a160 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a07a:	7bbb      	ldrb	r3, [r7, #14]
 800a07c:	2b04      	cmp	r3, #4
 800a07e:	d103      	bne.n	800a088 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	220b      	movs	r2, #11
 800a084:	761a      	strb	r2, [r3, #24]
      break;
 800a086:	e06b      	b.n	800a160 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a088:	7bbb      	ldrb	r3, [r7, #14]
 800a08a:	2b05      	cmp	r3, #5
 800a08c:	d168      	bne.n	800a160 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a08e:	2303      	movs	r3, #3
 800a090:	73fb      	strb	r3, [r7, #15]
      break;
 800a092:	e065      	b.n	800a160 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	795b      	ldrb	r3, [r3, #5]
 800a098:	2201      	movs	r2, #1
 800a09a:	9200      	str	r2, [sp, #0]
 800a09c:	2200      	movs	r2, #0
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f87f 	bl	800a1a4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a0ac:	b29a      	uxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	761a      	strb	r2, [r3, #24]
      break;
 800a0b8:	e055      	b.n	800a166 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	795b      	ldrb	r3, [r3, #5]
 800a0be:	4619      	mov	r1, r3
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f000 fbe1 	bl	800a888 <USBH_LL_GetURBState>
 800a0c6:	4603      	mov	r3, r0
 800a0c8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0ca:	7bbb      	ldrb	r3, [r7, #14]
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d105      	bne.n	800a0dc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	220d      	movs	r2, #13
 800a0d8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0da:	e043      	b.n	800a164 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	2b02      	cmp	r3, #2
 800a0e0:	d103      	bne.n	800a0ea <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2209      	movs	r2, #9
 800a0e6:	761a      	strb	r2, [r3, #24]
      break;
 800a0e8:	e03c      	b.n	800a164 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a0ea:	7bbb      	ldrb	r3, [r7, #14]
 800a0ec:	2b04      	cmp	r3, #4
 800a0ee:	d139      	bne.n	800a164 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	220b      	movs	r2, #11
 800a0f4:	761a      	strb	r2, [r3, #24]
      break;
 800a0f6:	e035      	b.n	800a164 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	7e5b      	ldrb	r3, [r3, #25]
 800a0fc:	3301      	adds	r3, #1
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	765a      	strb	r2, [r3, #25]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	7e5b      	ldrb	r3, [r3, #25]
 800a108:	2b02      	cmp	r3, #2
 800a10a:	d806      	bhi.n	800a11a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2201      	movs	r2, #1
 800a110:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	2201      	movs	r2, #1
 800a116:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a118:	e025      	b.n	800a166 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a120:	2106      	movs	r1, #6
 800a122:	6878      	ldr	r0, [r7, #4]
 800a124:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	2200      	movs	r2, #0
 800a12a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	795b      	ldrb	r3, [r3, #5]
 800a130:	4619      	mov	r1, r3
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f000 f90c 	bl	800a350 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	791b      	ldrb	r3, [r3, #4]
 800a13c:	4619      	mov	r1, r3
 800a13e:	6878      	ldr	r0, [r7, #4]
 800a140:	f000 f906 	bl	800a350 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a14a:	2302      	movs	r3, #2
 800a14c:	73fb      	strb	r3, [r7, #15]
      break;
 800a14e:	e00a      	b.n	800a166 <USBH_HandleControl+0x2de>

    default:
      break;
 800a150:	bf00      	nop
 800a152:	e008      	b.n	800a166 <USBH_HandleControl+0x2de>
      break;
 800a154:	bf00      	nop
 800a156:	e006      	b.n	800a166 <USBH_HandleControl+0x2de>
      break;
 800a158:	bf00      	nop
 800a15a:	e004      	b.n	800a166 <USBH_HandleControl+0x2de>
      break;
 800a15c:	bf00      	nop
 800a15e:	e002      	b.n	800a166 <USBH_HandleControl+0x2de>
      break;
 800a160:	bf00      	nop
 800a162:	e000      	b.n	800a166 <USBH_HandleControl+0x2de>
      break;
 800a164:	bf00      	nop
  }

  return status;
 800a166:	7bfb      	ldrb	r3, [r7, #15]
}
 800a168:	4618      	mov	r0, r3
 800a16a:	3710      	adds	r7, #16
 800a16c:	46bd      	mov	sp, r7
 800a16e:	bd80      	pop	{r7, pc}

0800a170 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b088      	sub	sp, #32
 800a174:	af04      	add	r7, sp, #16
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4613      	mov	r3, r2
 800a17c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a17e:	79f9      	ldrb	r1, [r7, #7]
 800a180:	2300      	movs	r3, #0
 800a182:	9303      	str	r3, [sp, #12]
 800a184:	2308      	movs	r3, #8
 800a186:	9302      	str	r3, [sp, #8]
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	9301      	str	r3, [sp, #4]
 800a18c:	2300      	movs	r3, #0
 800a18e:	9300      	str	r3, [sp, #0]
 800a190:	2300      	movs	r3, #0
 800a192:	2200      	movs	r2, #0
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 fb46 	bl	800a826 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a19a:	2300      	movs	r3, #0
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af04      	add	r7, sp, #16
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	4611      	mov	r1, r2
 800a1b0:	461a      	mov	r2, r3
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	80fb      	strh	r3, [r7, #6]
 800a1b6:	4613      	mov	r3, r2
 800a1b8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d001      	beq.n	800a1c8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1c8:	7979      	ldrb	r1, [r7, #5]
 800a1ca:	7e3b      	ldrb	r3, [r7, #24]
 800a1cc:	9303      	str	r3, [sp, #12]
 800a1ce:	88fb      	ldrh	r3, [r7, #6]
 800a1d0:	9302      	str	r3, [sp, #8]
 800a1d2:	68bb      	ldr	r3, [r7, #8]
 800a1d4:	9301      	str	r3, [sp, #4]
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	9300      	str	r3, [sp, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	2200      	movs	r2, #0
 800a1de:	68f8      	ldr	r0, [r7, #12]
 800a1e0:	f000 fb21 	bl	800a826 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3710      	adds	r7, #16
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}

0800a1ee <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a1ee:	b580      	push	{r7, lr}
 800a1f0:	b088      	sub	sp, #32
 800a1f2:	af04      	add	r7, sp, #16
 800a1f4:	60f8      	str	r0, [r7, #12]
 800a1f6:	60b9      	str	r1, [r7, #8]
 800a1f8:	4611      	mov	r1, r2
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	80fb      	strh	r3, [r7, #6]
 800a200:	4613      	mov	r3, r2
 800a202:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a204:	7979      	ldrb	r1, [r7, #5]
 800a206:	2300      	movs	r3, #0
 800a208:	9303      	str	r3, [sp, #12]
 800a20a:	88fb      	ldrh	r3, [r7, #6]
 800a20c:	9302      	str	r3, [sp, #8]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	9301      	str	r3, [sp, #4]
 800a212:	2301      	movs	r3, #1
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	2300      	movs	r3, #0
 800a218:	2201      	movs	r2, #1
 800a21a:	68f8      	ldr	r0, [r7, #12]
 800a21c:	f000 fb03 	bl	800a826 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a220:	2300      	movs	r3, #0

}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a22a:	b580      	push	{r7, lr}
 800a22c:	b088      	sub	sp, #32
 800a22e:	af04      	add	r7, sp, #16
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	4611      	mov	r1, r2
 800a236:	461a      	mov	r2, r3
 800a238:	460b      	mov	r3, r1
 800a23a:	80fb      	strh	r3, [r7, #6]
 800a23c:	4613      	mov	r3, r2
 800a23e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a246:	2b00      	cmp	r3, #0
 800a248:	d001      	beq.n	800a24e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a24a:	2300      	movs	r3, #0
 800a24c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a24e:	7979      	ldrb	r1, [r7, #5]
 800a250:	7e3b      	ldrb	r3, [r7, #24]
 800a252:	9303      	str	r3, [sp, #12]
 800a254:	88fb      	ldrh	r3, [r7, #6]
 800a256:	9302      	str	r3, [sp, #8]
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	9301      	str	r3, [sp, #4]
 800a25c:	2301      	movs	r3, #1
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	2302      	movs	r3, #2
 800a262:	2200      	movs	r2, #0
 800a264:	68f8      	ldr	r0, [r7, #12]
 800a266:	f000 fade 	bl	800a826 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a26a:	2300      	movs	r3, #0
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b088      	sub	sp, #32
 800a278:	af04      	add	r7, sp, #16
 800a27a:	60f8      	str	r0, [r7, #12]
 800a27c:	60b9      	str	r1, [r7, #8]
 800a27e:	4611      	mov	r1, r2
 800a280:	461a      	mov	r2, r3
 800a282:	460b      	mov	r3, r1
 800a284:	80fb      	strh	r3, [r7, #6]
 800a286:	4613      	mov	r3, r2
 800a288:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a28a:	7979      	ldrb	r1, [r7, #5]
 800a28c:	2300      	movs	r3, #0
 800a28e:	9303      	str	r3, [sp, #12]
 800a290:	88fb      	ldrh	r3, [r7, #6]
 800a292:	9302      	str	r3, [sp, #8]
 800a294:	68bb      	ldr	r3, [r7, #8]
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	2301      	movs	r3, #1
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	2302      	movs	r3, #2
 800a29e:	2201      	movs	r2, #1
 800a2a0:	68f8      	ldr	r0, [r7, #12]
 800a2a2:	f000 fac0 	bl	800a826 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b086      	sub	sp, #24
 800a2b4:	af04      	add	r7, sp, #16
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	4608      	mov	r0, r1
 800a2ba:	4611      	mov	r1, r2
 800a2bc:	461a      	mov	r2, r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	70fb      	strb	r3, [r7, #3]
 800a2c2:	460b      	mov	r3, r1
 800a2c4:	70bb      	strb	r3, [r7, #2]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a2ca:	7878      	ldrb	r0, [r7, #1]
 800a2cc:	78ba      	ldrb	r2, [r7, #2]
 800a2ce:	78f9      	ldrb	r1, [r7, #3]
 800a2d0:	8b3b      	ldrh	r3, [r7, #24]
 800a2d2:	9302      	str	r3, [sp, #8]
 800a2d4:	7d3b      	ldrb	r3, [r7, #20]
 800a2d6:	9301      	str	r3, [sp, #4]
 800a2d8:	7c3b      	ldrb	r3, [r7, #16]
 800a2da:	9300      	str	r3, [sp, #0]
 800a2dc:	4603      	mov	r3, r0
 800a2de:	6878      	ldr	r0, [r7, #4]
 800a2e0:	f000 fa53 	bl	800a78a <USBH_LL_OpenPipe>

  return USBH_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}

0800a2ee <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b082      	sub	sp, #8
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a2fa:	78fb      	ldrb	r3, [r7, #3]
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	6878      	ldr	r0, [r7, #4]
 800a300:	f000 fa72 	bl	800a7e8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b084      	sub	sp, #16
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a31a:	6878      	ldr	r0, [r7, #4]
 800a31c:	f000 f836 	bl	800a38c <USBH_GetFreePipe>
 800a320:	4603      	mov	r3, r0
 800a322:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a324:	89fb      	ldrh	r3, [r7, #14]
 800a326:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d00a      	beq.n	800a344 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a32e:	78fa      	ldrb	r2, [r7, #3]
 800a330:	89fb      	ldrh	r3, [r7, #14]
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a33a:	6879      	ldr	r1, [r7, #4]
 800a33c:	33e0      	adds	r3, #224	@ 0xe0
 800a33e:	009b      	lsls	r3, r3, #2
 800a340:	440b      	add	r3, r1
 800a342:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a344:	89fb      	ldrh	r3, [r7, #14]
 800a346:	b2db      	uxtb	r3, r3
}
 800a348:	4618      	mov	r0, r3
 800a34a:	3710      	adds	r7, #16
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bd80      	pop	{r7, pc}

0800a350 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a350:	b480      	push	{r7}
 800a352:	b083      	sub	sp, #12
 800a354:	af00      	add	r7, sp, #0
 800a356:	6078      	str	r0, [r7, #4]
 800a358:	460b      	mov	r3, r1
 800a35a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a35c:	78fb      	ldrb	r3, [r7, #3]
 800a35e:	2b0f      	cmp	r3, #15
 800a360:	d80d      	bhi.n	800a37e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a362:	78fb      	ldrb	r3, [r7, #3]
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	33e0      	adds	r3, #224	@ 0xe0
 800a368:	009b      	lsls	r3, r3, #2
 800a36a:	4413      	add	r3, r2
 800a36c:	685a      	ldr	r2, [r3, #4]
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a374:	6879      	ldr	r1, [r7, #4]
 800a376:	33e0      	adds	r3, #224	@ 0xe0
 800a378:	009b      	lsls	r3, r3, #2
 800a37a:	440b      	add	r3, r1
 800a37c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	370c      	adds	r7, #12
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a394:	2300      	movs	r3, #0
 800a396:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a398:	2300      	movs	r3, #0
 800a39a:	73fb      	strb	r3, [r7, #15]
 800a39c:	e00f      	b.n	800a3be <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	687a      	ldr	r2, [r7, #4]
 800a3a2:	33e0      	adds	r3, #224	@ 0xe0
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d102      	bne.n	800a3b8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a3b2:	7bfb      	ldrb	r3, [r7, #15]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	e007      	b.n	800a3c8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a3b8:	7bfb      	ldrb	r3, [r7, #15]
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	73fb      	strb	r3, [r7, #15]
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	2b0f      	cmp	r3, #15
 800a3c2:	d9ec      	bls.n	800a39e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a3c4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	3714      	adds	r7, #20
 800a3cc:	46bd      	mov	sp, r7
 800a3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d2:	4770      	bx	lr

0800a3d4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a3d8:	2201      	movs	r2, #1
 800a3da:	490e      	ldr	r1, [pc, #56]	@ (800a414 <MX_USB_HOST_Init+0x40>)
 800a3dc:	480e      	ldr	r0, [pc, #56]	@ (800a418 <MX_USB_HOST_Init+0x44>)
 800a3de:	f7fe fb15 	bl	8008a0c <USBH_Init>
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d001      	beq.n	800a3ec <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a3e8:	f7f7 f8b8 	bl	800155c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a3ec:	490b      	ldr	r1, [pc, #44]	@ (800a41c <MX_USB_HOST_Init+0x48>)
 800a3ee:	480a      	ldr	r0, [pc, #40]	@ (800a418 <MX_USB_HOST_Init+0x44>)
 800a3f0:	f7fe fbb9 	bl	8008b66 <USBH_RegisterClass>
 800a3f4:	4603      	mov	r3, r0
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d001      	beq.n	800a3fe <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a3fa:	f7f7 f8af 	bl	800155c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a3fe:	4806      	ldr	r0, [pc, #24]	@ (800a418 <MX_USB_HOST_Init+0x44>)
 800a400:	f7fe fc3d 	bl	8008c7e <USBH_Start>
 800a404:	4603      	mov	r3, r0
 800a406:	2b00      	cmp	r3, #0
 800a408:	d001      	beq.n	800a40e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a40a:	f7f7 f8a7 	bl	800155c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a40e:	bf00      	nop
 800a410:	bd80      	pop	{r7, pc}
 800a412:	bf00      	nop
 800a414:	0800a435 	.word	0x0800a435
 800a418:	200001f8 	.word	0x200001f8
 800a41c:	2000000c 	.word	0x2000000c

0800a420 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a424:	4802      	ldr	r0, [pc, #8]	@ (800a430 <MX_USB_HOST_Process+0x10>)
 800a426:	f7fe fc3b 	bl	8008ca0 <USBH_Process>
}
 800a42a:	bf00      	nop
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	200001f8 	.word	0x200001f8

0800a434 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	460b      	mov	r3, r1
 800a43e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a440:	78fb      	ldrb	r3, [r7, #3]
 800a442:	3b01      	subs	r3, #1
 800a444:	2b04      	cmp	r3, #4
 800a446:	d819      	bhi.n	800a47c <USBH_UserProcess+0x48>
 800a448:	a201      	add	r2, pc, #4	@ (adr r2, 800a450 <USBH_UserProcess+0x1c>)
 800a44a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a44e:	bf00      	nop
 800a450:	0800a47d 	.word	0x0800a47d
 800a454:	0800a46d 	.word	0x0800a46d
 800a458:	0800a47d 	.word	0x0800a47d
 800a45c:	0800a475 	.word	0x0800a475
 800a460:	0800a465 	.word	0x0800a465
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a464:	4b09      	ldr	r3, [pc, #36]	@ (800a48c <USBH_UserProcess+0x58>)
 800a466:	2203      	movs	r2, #3
 800a468:	701a      	strb	r2, [r3, #0]
  break;
 800a46a:	e008      	b.n	800a47e <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a46c:	4b07      	ldr	r3, [pc, #28]	@ (800a48c <USBH_UserProcess+0x58>)
 800a46e:	2202      	movs	r2, #2
 800a470:	701a      	strb	r2, [r3, #0]
  break;
 800a472:	e004      	b.n	800a47e <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a474:	4b05      	ldr	r3, [pc, #20]	@ (800a48c <USBH_UserProcess+0x58>)
 800a476:	2201      	movs	r2, #1
 800a478:	701a      	strb	r2, [r3, #0]
  break;
 800a47a:	e000      	b.n	800a47e <USBH_UserProcess+0x4a>

  default:
  break;
 800a47c:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a47e:	bf00      	nop
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr
 800a48a:	bf00      	nop
 800a48c:	200005d0 	.word	0x200005d0

0800a490 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a490:	b580      	push	{r7, lr}
 800a492:	b08a      	sub	sp, #40	@ 0x28
 800a494:	af00      	add	r7, sp, #0
 800a496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a498:	f107 0314 	add.w	r3, r7, #20
 800a49c:	2200      	movs	r2, #0
 800a49e:	601a      	str	r2, [r3, #0]
 800a4a0:	605a      	str	r2, [r3, #4]
 800a4a2:	609a      	str	r2, [r3, #8]
 800a4a4:	60da      	str	r2, [r3, #12]
 800a4a6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a4b0:	d147      	bne.n	800a542 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	613b      	str	r3, [r7, #16]
 800a4b6:	4b25      	ldr	r3, [pc, #148]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ba:	4a24      	ldr	r2, [pc, #144]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a4bc:	f043 0301 	orr.w	r3, r3, #1
 800a4c0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a4c2:	4b22      	ldr	r3, [pc, #136]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c6:	f003 0301 	and.w	r3, r3, #1
 800a4ca:	613b      	str	r3, [r7, #16]
 800a4cc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a4ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a4dc:	f107 0314 	add.w	r3, r7, #20
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	481b      	ldr	r0, [pc, #108]	@ (800a550 <HAL_HCD_MspInit+0xc0>)
 800a4e4:	f7f8 f9cc 	bl	8002880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a4e8:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a4ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ee:	2302      	movs	r3, #2
 800a4f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4fa:	230a      	movs	r3, #10
 800a4fc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4fe:	f107 0314 	add.w	r3, r7, #20
 800a502:	4619      	mov	r1, r3
 800a504:	4812      	ldr	r0, [pc, #72]	@ (800a550 <HAL_HCD_MspInit+0xc0>)
 800a506:	f7f8 f9bb 	bl	8002880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a50a:	4b10      	ldr	r3, [pc, #64]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a50c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a50e:	4a0f      	ldr	r2, [pc, #60]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a514:	6353      	str	r3, [r2, #52]	@ 0x34
 800a516:	2300      	movs	r3, #0
 800a518:	60fb      	str	r3, [r7, #12]
 800a51a:	4b0c      	ldr	r3, [pc, #48]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51e:	4a0b      	ldr	r2, [pc, #44]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a524:	6453      	str	r3, [r2, #68]	@ 0x44
 800a526:	4b09      	ldr	r3, [pc, #36]	@ (800a54c <HAL_HCD_MspInit+0xbc>)
 800a528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a52a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a52e:	60fb      	str	r3, [r7, #12]
 800a530:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a532:	2200      	movs	r2, #0
 800a534:	2100      	movs	r1, #0
 800a536:	2043      	movs	r0, #67	@ 0x43
 800a538:	f7f8 f96b 	bl	8002812 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a53c:	2043      	movs	r0, #67	@ 0x43
 800a53e:	f7f8 f984 	bl	800284a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a542:	bf00      	nop
 800a544:	3728      	adds	r7, #40	@ 0x28
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	40023800 	.word	0x40023800
 800a550:	40020000 	.word	0x40020000

0800a554 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b082      	sub	sp, #8
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a562:	4618      	mov	r0, r3
 800a564:	f7fe ff73 	bl	800944e <USBH_LL_IncTimer>
}
 800a568:	bf00      	nop
 800a56a:	3708      	adds	r7, #8
 800a56c:	46bd      	mov	sp, r7
 800a56e:	bd80      	pop	{r7, pc}

0800a570 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b082      	sub	sp, #8
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a57e:	4618      	mov	r0, r3
 800a580:	f7fe ffab 	bl	80094da <USBH_LL_Connect>
}
 800a584:	bf00      	nop
 800a586:	3708      	adds	r7, #8
 800a588:	46bd      	mov	sp, r7
 800a58a:	bd80      	pop	{r7, pc}

0800a58c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b082      	sub	sp, #8
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a59a:	4618      	mov	r0, r3
 800a59c:	f7fe ffb4 	bl	8009508 <USBH_LL_Disconnect>
}
 800a5a0:	bf00      	nop
 800a5a2:	3708      	adds	r7, #8
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b083      	sub	sp, #12
 800a5ac:	af00      	add	r7, sp, #0
 800a5ae:	6078      	str	r0, [r7, #4]
 800a5b0:	460b      	mov	r3, r1
 800a5b2:	70fb      	strb	r3, [r7, #3]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a5b8:	bf00      	nop
 800a5ba:	370c      	adds	r7, #12
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c2:	4770      	bx	lr

0800a5c4 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5c4:	b580      	push	{r7, lr}
 800a5c6:	b082      	sub	sp, #8
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe ff65 	bl	80094a2 <USBH_LL_PortEnabled>
}
 800a5d8:	bf00      	nop
 800a5da:	3708      	adds	r7, #8
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b082      	sub	sp, #8
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe ff65 	bl	80094be <USBH_LL_PortDisabled>
}
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b082      	sub	sp, #8
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d12a      	bne.n	800a664 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a60e:	4a18      	ldr	r2, [pc, #96]	@ (800a670 <USBH_LL_Init+0x74>)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	4a15      	ldr	r2, [pc, #84]	@ (800a670 <USBH_LL_Init+0x74>)
 800a61a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a61e:	4b14      	ldr	r3, [pc, #80]	@ (800a670 <USBH_LL_Init+0x74>)
 800a620:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a624:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a626:	4b12      	ldr	r3, [pc, #72]	@ (800a670 <USBH_LL_Init+0x74>)
 800a628:	2208      	movs	r2, #8
 800a62a:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a62c:	4b10      	ldr	r3, [pc, #64]	@ (800a670 <USBH_LL_Init+0x74>)
 800a62e:	2201      	movs	r2, #1
 800a630:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a632:	4b0f      	ldr	r3, [pc, #60]	@ (800a670 <USBH_LL_Init+0x74>)
 800a634:	2200      	movs	r2, #0
 800a636:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a638:	4b0d      	ldr	r3, [pc, #52]	@ (800a670 <USBH_LL_Init+0x74>)
 800a63a:	2202      	movs	r2, #2
 800a63c:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a63e:	4b0c      	ldr	r3, [pc, #48]	@ (800a670 <USBH_LL_Init+0x74>)
 800a640:	2200      	movs	r2, #0
 800a642:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a644:	480a      	ldr	r0, [pc, #40]	@ (800a670 <USBH_LL_Init+0x74>)
 800a646:	f7f8 fad0 	bl	8002bea <HAL_HCD_Init>
 800a64a:	4603      	mov	r3, r0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d001      	beq.n	800a654 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a650:	f7f6 ff84 	bl	800155c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a654:	4806      	ldr	r0, [pc, #24]	@ (800a670 <USBH_LL_Init+0x74>)
 800a656:	f7f8 ff31 	bl	80034bc <HAL_HCD_GetCurrentFrame>
 800a65a:	4603      	mov	r3, r0
 800a65c:	4619      	mov	r1, r3
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f7fe fee6 	bl	8009430 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	3708      	adds	r7, #8
 800a66a:	46bd      	mov	sp, r7
 800a66c:	bd80      	pop	{r7, pc}
 800a66e:	bf00      	nop
 800a670:	200005d4 	.word	0x200005d4

0800a674 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b084      	sub	sp, #16
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a67c:	2300      	movs	r3, #0
 800a67e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a680:	2300      	movs	r3, #0
 800a682:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f8 fe9e 	bl	80033cc <HAL_HCD_Start>
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a694:	7bfb      	ldrb	r3, [r7, #15]
 800a696:	4618      	mov	r0, r3
 800a698:	f000 f95e 	bl	800a958 <USBH_Get_USB_Status>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6a2:	4618      	mov	r0, r3
 800a6a4:	3710      	adds	r7, #16
 800a6a6:	46bd      	mov	sp, r7
 800a6a8:	bd80      	pop	{r7, pc}

0800a6aa <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a6aa:	b580      	push	{r7, lr}
 800a6ac:	b084      	sub	sp, #16
 800a6ae:	af00      	add	r7, sp, #0
 800a6b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6c0:	4618      	mov	r0, r3
 800a6c2:	f7f8 fea6 	bl	8003412 <HAL_HCD_Stop>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	f000 f943 	bl	800a958 <USBH_Get_USB_Status>
 800a6d2:	4603      	mov	r3, r0
 800a6d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d8:	4618      	mov	r0, r3
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}

0800a6e0 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a6e0:	b580      	push	{r7, lr}
 800a6e2:	b084      	sub	sp, #16
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a6e8:	2301      	movs	r3, #1
 800a6ea:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6f2:	4618      	mov	r0, r3
 800a6f4:	f7f8 fef0 	bl	80034d8 <HAL_HCD_GetCurrentSpeed>
 800a6f8:	4603      	mov	r3, r0
 800a6fa:	2b02      	cmp	r3, #2
 800a6fc:	d00c      	beq.n	800a718 <USBH_LL_GetSpeed+0x38>
 800a6fe:	2b02      	cmp	r3, #2
 800a700:	d80d      	bhi.n	800a71e <USBH_LL_GetSpeed+0x3e>
 800a702:	2b00      	cmp	r3, #0
 800a704:	d002      	beq.n	800a70c <USBH_LL_GetSpeed+0x2c>
 800a706:	2b01      	cmp	r3, #1
 800a708:	d003      	beq.n	800a712 <USBH_LL_GetSpeed+0x32>
 800a70a:	e008      	b.n	800a71e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a70c:	2300      	movs	r3, #0
 800a70e:	73fb      	strb	r3, [r7, #15]
    break;
 800a710:	e008      	b.n	800a724 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a712:	2301      	movs	r3, #1
 800a714:	73fb      	strb	r3, [r7, #15]
    break;
 800a716:	e005      	b.n	800a724 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a718:	2302      	movs	r3, #2
 800a71a:	73fb      	strb	r3, [r7, #15]
    break;
 800a71c:	e002      	b.n	800a724 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a71e:	2301      	movs	r3, #1
 800a720:	73fb      	strb	r3, [r7, #15]
    break;
 800a722:	bf00      	nop
  }
  return  speed;
 800a724:	7bfb      	ldrb	r3, [r7, #15]
}
 800a726:	4618      	mov	r0, r3
 800a728:	3710      	adds	r7, #16
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}

0800a72e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a72e:	b580      	push	{r7, lr}
 800a730:	b084      	sub	sp, #16
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a744:	4618      	mov	r0, r3
 800a746:	f7f8 fe81 	bl	800344c <HAL_HCD_ResetPort>
 800a74a:	4603      	mov	r3, r0
 800a74c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	4618      	mov	r0, r3
 800a752:	f000 f901 	bl	800a958 <USBH_Get_USB_Status>
 800a756:	4603      	mov	r3, r0
 800a758:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a75a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a75c:	4618      	mov	r0, r3
 800a75e:	3710      	adds	r7, #16
 800a760:	46bd      	mov	sp, r7
 800a762:	bd80      	pop	{r7, pc}

0800a764 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b082      	sub	sp, #8
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]
 800a76c:	460b      	mov	r3, r1
 800a76e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a776:	78fa      	ldrb	r2, [r7, #3]
 800a778:	4611      	mov	r1, r2
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7f8 fe89 	bl	8003492 <HAL_HCD_HC_GetXferCount>
 800a780:	4603      	mov	r3, r0
}
 800a782:	4618      	mov	r0, r3
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a78a:	b590      	push	{r4, r7, lr}
 800a78c:	b089      	sub	sp, #36	@ 0x24
 800a78e:	af04      	add	r7, sp, #16
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	4608      	mov	r0, r1
 800a794:	4611      	mov	r1, r2
 800a796:	461a      	mov	r2, r3
 800a798:	4603      	mov	r3, r0
 800a79a:	70fb      	strb	r3, [r7, #3]
 800a79c:	460b      	mov	r3, r1
 800a79e:	70bb      	strb	r3, [r7, #2]
 800a7a0:	4613      	mov	r3, r2
 800a7a2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a7b2:	787c      	ldrb	r4, [r7, #1]
 800a7b4:	78ba      	ldrb	r2, [r7, #2]
 800a7b6:	78f9      	ldrb	r1, [r7, #3]
 800a7b8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a7ba:	9302      	str	r3, [sp, #8]
 800a7bc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7c0:	9301      	str	r3, [sp, #4]
 800a7c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7c6:	9300      	str	r3, [sp, #0]
 800a7c8:	4623      	mov	r3, r4
 800a7ca:	f7f8 fa75 	bl	8002cb8 <HAL_HCD_HC_Init>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7d2:	7bfb      	ldrb	r3, [r7, #15]
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	f000 f8bf 	bl	800a958 <USBH_Get_USB_Status>
 800a7da:	4603      	mov	r3, r0
 800a7dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	3714      	adds	r7, #20
 800a7e4:	46bd      	mov	sp, r7
 800a7e6:	bd90      	pop	{r4, r7, pc}

0800a7e8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b084      	sub	sp, #16
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a802:	78fa      	ldrb	r2, [r7, #3]
 800a804:	4611      	mov	r1, r2
 800a806:	4618      	mov	r0, r3
 800a808:	f7f8 fb0e 	bl	8002e28 <HAL_HCD_HC_Halt>
 800a80c:	4603      	mov	r3, r0
 800a80e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a810:	7bfb      	ldrb	r3, [r7, #15]
 800a812:	4618      	mov	r0, r3
 800a814:	f000 f8a0 	bl	800a958 <USBH_Get_USB_Status>
 800a818:	4603      	mov	r3, r0
 800a81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a81e:	4618      	mov	r0, r3
 800a820:	3710      	adds	r7, #16
 800a822:	46bd      	mov	sp, r7
 800a824:	bd80      	pop	{r7, pc}

0800a826 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a826:	b590      	push	{r4, r7, lr}
 800a828:	b089      	sub	sp, #36	@ 0x24
 800a82a:	af04      	add	r7, sp, #16
 800a82c:	6078      	str	r0, [r7, #4]
 800a82e:	4608      	mov	r0, r1
 800a830:	4611      	mov	r1, r2
 800a832:	461a      	mov	r2, r3
 800a834:	4603      	mov	r3, r0
 800a836:	70fb      	strb	r3, [r7, #3]
 800a838:	460b      	mov	r3, r1
 800a83a:	70bb      	strb	r3, [r7, #2]
 800a83c:	4613      	mov	r3, r2
 800a83e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a840:	2300      	movs	r3, #0
 800a842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a844:	2300      	movs	r3, #0
 800a846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a84e:	787c      	ldrb	r4, [r7, #1]
 800a850:	78ba      	ldrb	r2, [r7, #2]
 800a852:	78f9      	ldrb	r1, [r7, #3]
 800a854:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a858:	9303      	str	r3, [sp, #12]
 800a85a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a85c:	9302      	str	r3, [sp, #8]
 800a85e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a860:	9301      	str	r3, [sp, #4]
 800a862:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a866:	9300      	str	r3, [sp, #0]
 800a868:	4623      	mov	r3, r4
 800a86a:	f7f8 fb01 	bl	8002e70 <HAL_HCD_HC_SubmitRequest>
 800a86e:	4603      	mov	r3, r0
 800a870:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a872:	7bfb      	ldrb	r3, [r7, #15]
 800a874:	4618      	mov	r0, r3
 800a876:	f000 f86f 	bl	800a958 <USBH_Get_USB_Status>
 800a87a:	4603      	mov	r3, r0
 800a87c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a87e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a880:	4618      	mov	r0, r3
 800a882:	3714      	adds	r7, #20
 800a884:	46bd      	mov	sp, r7
 800a886:	bd90      	pop	{r4, r7, pc}

0800a888 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b082      	sub	sp, #8
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	460b      	mov	r3, r1
 800a892:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a89a:	78fa      	ldrb	r2, [r7, #3]
 800a89c:	4611      	mov	r1, r2
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7f8 fde2 	bl	8003468 <HAL_HCD_HC_GetURBState>
 800a8a4:	4603      	mov	r3, r0
}
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	3708      	adds	r7, #8
 800a8aa:	46bd      	mov	sp, r7
 800a8ac:	bd80      	pop	{r7, pc}

0800a8ae <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a8ae:	b580      	push	{r7, lr}
 800a8b0:	b082      	sub	sp, #8
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
 800a8b6:	460b      	mov	r3, r1
 800a8b8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d103      	bne.n	800a8cc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 f872 	bl	800a9b0 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a8cc:	20c8      	movs	r0, #200	@ 0xc8
 800a8ce:	f7f7 fea1 	bl	8002614 <HAL_Delay>
  return USBH_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	3708      	adds	r7, #8
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	bd80      	pop	{r7, pc}

0800a8dc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a8dc:	b480      	push	{r7}
 800a8de:	b085      	sub	sp, #20
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	6078      	str	r0, [r7, #4]
 800a8e4:	460b      	mov	r3, r1
 800a8e6:	70fb      	strb	r3, [r7, #3]
 800a8e8:	4613      	mov	r3, r2
 800a8ea:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8f2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a8f4:	78fa      	ldrb	r2, [r7, #3]
 800a8f6:	68f9      	ldr	r1, [r7, #12]
 800a8f8:	4613      	mov	r3, r2
 800a8fa:	011b      	lsls	r3, r3, #4
 800a8fc:	1a9b      	subs	r3, r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	440b      	add	r3, r1
 800a902:	3317      	adds	r3, #23
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d00a      	beq.n	800a920 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a90a:	78fa      	ldrb	r2, [r7, #3]
 800a90c:	68f9      	ldr	r1, [r7, #12]
 800a90e:	4613      	mov	r3, r2
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	1a9b      	subs	r3, r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	440b      	add	r3, r1
 800a918:	333c      	adds	r3, #60	@ 0x3c
 800a91a:	78ba      	ldrb	r2, [r7, #2]
 800a91c:	701a      	strb	r2, [r3, #0]
 800a91e:	e009      	b.n	800a934 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a920:	78fa      	ldrb	r2, [r7, #3]
 800a922:	68f9      	ldr	r1, [r7, #12]
 800a924:	4613      	mov	r3, r2
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	1a9b      	subs	r3, r3, r2
 800a92a:	009b      	lsls	r3, r3, #2
 800a92c:	440b      	add	r3, r1
 800a92e:	333d      	adds	r3, #61	@ 0x3d
 800a930:	78ba      	ldrb	r2, [r7, #2]
 800a932:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a934:	2300      	movs	r3, #0
}
 800a936:	4618      	mov	r0, r3
 800a938:	3714      	adds	r7, #20
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr

0800a942 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a942:	b580      	push	{r7, lr}
 800a944:	b082      	sub	sp, #8
 800a946:	af00      	add	r7, sp, #0
 800a948:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a94a:	6878      	ldr	r0, [r7, #4]
 800a94c:	f7f7 fe62 	bl	8002614 <HAL_Delay>
}
 800a950:	bf00      	nop
 800a952:	3708      	adds	r7, #8
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	4603      	mov	r3, r0
 800a960:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a962:	2300      	movs	r3, #0
 800a964:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a966:	79fb      	ldrb	r3, [r7, #7]
 800a968:	2b03      	cmp	r3, #3
 800a96a:	d817      	bhi.n	800a99c <USBH_Get_USB_Status+0x44>
 800a96c:	a201      	add	r2, pc, #4	@ (adr r2, 800a974 <USBH_Get_USB_Status+0x1c>)
 800a96e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a972:	bf00      	nop
 800a974:	0800a985 	.word	0x0800a985
 800a978:	0800a98b 	.word	0x0800a98b
 800a97c:	0800a991 	.word	0x0800a991
 800a980:	0800a997 	.word	0x0800a997
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a984:	2300      	movs	r3, #0
 800a986:	73fb      	strb	r3, [r7, #15]
    break;
 800a988:	e00b      	b.n	800a9a2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a98a:	2302      	movs	r3, #2
 800a98c:	73fb      	strb	r3, [r7, #15]
    break;
 800a98e:	e008      	b.n	800a9a2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a990:	2301      	movs	r3, #1
 800a992:	73fb      	strb	r3, [r7, #15]
    break;
 800a994:	e005      	b.n	800a9a2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a996:	2302      	movs	r3, #2
 800a998:	73fb      	strb	r3, [r7, #15]
    break;
 800a99a:	e002      	b.n	800a9a2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a99c:	2302      	movs	r3, #2
 800a99e:	73fb      	strb	r3, [r7, #15]
    break;
 800a9a0:	bf00      	nop
  }
  return usb_status;
 800a9a2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3714      	adds	r7, #20
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a9b0:	b580      	push	{r7, lr}
 800a9b2:	b084      	sub	sp, #16
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a9ba:	79fb      	ldrb	r3, [r7, #7]
 800a9bc:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d102      	bne.n	800a9ca <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a9c4:	2300      	movs	r3, #0
 800a9c6:	73fb      	strb	r3, [r7, #15]
 800a9c8:	e001      	b.n	800a9ce <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a9ce:	7bfb      	ldrb	r3, [r7, #15]
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	2101      	movs	r1, #1
 800a9d4:	4803      	ldr	r0, [pc, #12]	@ (800a9e4 <MX_DriverVbusFS+0x34>)
 800a9d6:	f7f8 f8ef 	bl	8002bb8 <HAL_GPIO_WritePin>
}
 800a9da:	bf00      	nop
 800a9dc:	3710      	adds	r7, #16
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	bd80      	pop	{r7, pc}
 800a9e2:	bf00      	nop
 800a9e4:	40020800 	.word	0x40020800

0800a9e8 <malloc>:
 800a9e8:	4b02      	ldr	r3, [pc, #8]	@ (800a9f4 <malloc+0xc>)
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	f000 b82d 	b.w	800aa4c <_malloc_r>
 800a9f2:	bf00      	nop
 800a9f4:	20000038 	.word	0x20000038

0800a9f8 <free>:
 800a9f8:	4b02      	ldr	r3, [pc, #8]	@ (800aa04 <free+0xc>)
 800a9fa:	4601      	mov	r1, r0
 800a9fc:	6818      	ldr	r0, [r3, #0]
 800a9fe:	f000 bbab 	b.w	800b158 <_free_r>
 800aa02:	bf00      	nop
 800aa04:	20000038 	.word	0x20000038

0800aa08 <sbrk_aligned>:
 800aa08:	b570      	push	{r4, r5, r6, lr}
 800aa0a:	4e0f      	ldr	r6, [pc, #60]	@ (800aa48 <sbrk_aligned+0x40>)
 800aa0c:	460c      	mov	r4, r1
 800aa0e:	6831      	ldr	r1, [r6, #0]
 800aa10:	4605      	mov	r5, r0
 800aa12:	b911      	cbnz	r1, 800aa1a <sbrk_aligned+0x12>
 800aa14:	f000 fb42 	bl	800b09c <_sbrk_r>
 800aa18:	6030      	str	r0, [r6, #0]
 800aa1a:	4621      	mov	r1, r4
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	f000 fb3d 	bl	800b09c <_sbrk_r>
 800aa22:	1c43      	adds	r3, r0, #1
 800aa24:	d103      	bne.n	800aa2e <sbrk_aligned+0x26>
 800aa26:	f04f 34ff 	mov.w	r4, #4294967295
 800aa2a:	4620      	mov	r0, r4
 800aa2c:	bd70      	pop	{r4, r5, r6, pc}
 800aa2e:	1cc4      	adds	r4, r0, #3
 800aa30:	f024 0403 	bic.w	r4, r4, #3
 800aa34:	42a0      	cmp	r0, r4
 800aa36:	d0f8      	beq.n	800aa2a <sbrk_aligned+0x22>
 800aa38:	1a21      	subs	r1, r4, r0
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	f000 fb2e 	bl	800b09c <_sbrk_r>
 800aa40:	3001      	adds	r0, #1
 800aa42:	d1f2      	bne.n	800aa2a <sbrk_aligned+0x22>
 800aa44:	e7ef      	b.n	800aa26 <sbrk_aligned+0x1e>
 800aa46:	bf00      	nop
 800aa48:	200009b4 	.word	0x200009b4

0800aa4c <_malloc_r>:
 800aa4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa50:	1ccd      	adds	r5, r1, #3
 800aa52:	f025 0503 	bic.w	r5, r5, #3
 800aa56:	3508      	adds	r5, #8
 800aa58:	2d0c      	cmp	r5, #12
 800aa5a:	bf38      	it	cc
 800aa5c:	250c      	movcc	r5, #12
 800aa5e:	2d00      	cmp	r5, #0
 800aa60:	4606      	mov	r6, r0
 800aa62:	db01      	blt.n	800aa68 <_malloc_r+0x1c>
 800aa64:	42a9      	cmp	r1, r5
 800aa66:	d904      	bls.n	800aa72 <_malloc_r+0x26>
 800aa68:	230c      	movs	r3, #12
 800aa6a:	6033      	str	r3, [r6, #0]
 800aa6c:	2000      	movs	r0, #0
 800aa6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab48 <_malloc_r+0xfc>
 800aa76:	f000 f869 	bl	800ab4c <__malloc_lock>
 800aa7a:	f8d8 3000 	ldr.w	r3, [r8]
 800aa7e:	461c      	mov	r4, r3
 800aa80:	bb44      	cbnz	r4, 800aad4 <_malloc_r+0x88>
 800aa82:	4629      	mov	r1, r5
 800aa84:	4630      	mov	r0, r6
 800aa86:	f7ff ffbf 	bl	800aa08 <sbrk_aligned>
 800aa8a:	1c43      	adds	r3, r0, #1
 800aa8c:	4604      	mov	r4, r0
 800aa8e:	d158      	bne.n	800ab42 <_malloc_r+0xf6>
 800aa90:	f8d8 4000 	ldr.w	r4, [r8]
 800aa94:	4627      	mov	r7, r4
 800aa96:	2f00      	cmp	r7, #0
 800aa98:	d143      	bne.n	800ab22 <_malloc_r+0xd6>
 800aa9a:	2c00      	cmp	r4, #0
 800aa9c:	d04b      	beq.n	800ab36 <_malloc_r+0xea>
 800aa9e:	6823      	ldr	r3, [r4, #0]
 800aaa0:	4639      	mov	r1, r7
 800aaa2:	4630      	mov	r0, r6
 800aaa4:	eb04 0903 	add.w	r9, r4, r3
 800aaa8:	f000 faf8 	bl	800b09c <_sbrk_r>
 800aaac:	4581      	cmp	r9, r0
 800aaae:	d142      	bne.n	800ab36 <_malloc_r+0xea>
 800aab0:	6821      	ldr	r1, [r4, #0]
 800aab2:	1a6d      	subs	r5, r5, r1
 800aab4:	4629      	mov	r1, r5
 800aab6:	4630      	mov	r0, r6
 800aab8:	f7ff ffa6 	bl	800aa08 <sbrk_aligned>
 800aabc:	3001      	adds	r0, #1
 800aabe:	d03a      	beq.n	800ab36 <_malloc_r+0xea>
 800aac0:	6823      	ldr	r3, [r4, #0]
 800aac2:	442b      	add	r3, r5
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	f8d8 3000 	ldr.w	r3, [r8]
 800aaca:	685a      	ldr	r2, [r3, #4]
 800aacc:	bb62      	cbnz	r2, 800ab28 <_malloc_r+0xdc>
 800aace:	f8c8 7000 	str.w	r7, [r8]
 800aad2:	e00f      	b.n	800aaf4 <_malloc_r+0xa8>
 800aad4:	6822      	ldr	r2, [r4, #0]
 800aad6:	1b52      	subs	r2, r2, r5
 800aad8:	d420      	bmi.n	800ab1c <_malloc_r+0xd0>
 800aada:	2a0b      	cmp	r2, #11
 800aadc:	d917      	bls.n	800ab0e <_malloc_r+0xc2>
 800aade:	1961      	adds	r1, r4, r5
 800aae0:	42a3      	cmp	r3, r4
 800aae2:	6025      	str	r5, [r4, #0]
 800aae4:	bf18      	it	ne
 800aae6:	6059      	strne	r1, [r3, #4]
 800aae8:	6863      	ldr	r3, [r4, #4]
 800aaea:	bf08      	it	eq
 800aaec:	f8c8 1000 	streq.w	r1, [r8]
 800aaf0:	5162      	str	r2, [r4, r5]
 800aaf2:	604b      	str	r3, [r1, #4]
 800aaf4:	4630      	mov	r0, r6
 800aaf6:	f000 f82f 	bl	800ab58 <__malloc_unlock>
 800aafa:	f104 000b 	add.w	r0, r4, #11
 800aafe:	1d23      	adds	r3, r4, #4
 800ab00:	f020 0007 	bic.w	r0, r0, #7
 800ab04:	1ac2      	subs	r2, r0, r3
 800ab06:	bf1c      	itt	ne
 800ab08:	1a1b      	subne	r3, r3, r0
 800ab0a:	50a3      	strne	r3, [r4, r2]
 800ab0c:	e7af      	b.n	800aa6e <_malloc_r+0x22>
 800ab0e:	6862      	ldr	r2, [r4, #4]
 800ab10:	42a3      	cmp	r3, r4
 800ab12:	bf0c      	ite	eq
 800ab14:	f8c8 2000 	streq.w	r2, [r8]
 800ab18:	605a      	strne	r2, [r3, #4]
 800ab1a:	e7eb      	b.n	800aaf4 <_malloc_r+0xa8>
 800ab1c:	4623      	mov	r3, r4
 800ab1e:	6864      	ldr	r4, [r4, #4]
 800ab20:	e7ae      	b.n	800aa80 <_malloc_r+0x34>
 800ab22:	463c      	mov	r4, r7
 800ab24:	687f      	ldr	r7, [r7, #4]
 800ab26:	e7b6      	b.n	800aa96 <_malloc_r+0x4a>
 800ab28:	461a      	mov	r2, r3
 800ab2a:	685b      	ldr	r3, [r3, #4]
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	d1fb      	bne.n	800ab28 <_malloc_r+0xdc>
 800ab30:	2300      	movs	r3, #0
 800ab32:	6053      	str	r3, [r2, #4]
 800ab34:	e7de      	b.n	800aaf4 <_malloc_r+0xa8>
 800ab36:	230c      	movs	r3, #12
 800ab38:	6033      	str	r3, [r6, #0]
 800ab3a:	4630      	mov	r0, r6
 800ab3c:	f000 f80c 	bl	800ab58 <__malloc_unlock>
 800ab40:	e794      	b.n	800aa6c <_malloc_r+0x20>
 800ab42:	6005      	str	r5, [r0, #0]
 800ab44:	e7d6      	b.n	800aaf4 <_malloc_r+0xa8>
 800ab46:	bf00      	nop
 800ab48:	200009b8 	.word	0x200009b8

0800ab4c <__malloc_lock>:
 800ab4c:	4801      	ldr	r0, [pc, #4]	@ (800ab54 <__malloc_lock+0x8>)
 800ab4e:	f000 baf2 	b.w	800b136 <__retarget_lock_acquire_recursive>
 800ab52:	bf00      	nop
 800ab54:	20000afc 	.word	0x20000afc

0800ab58 <__malloc_unlock>:
 800ab58:	4801      	ldr	r0, [pc, #4]	@ (800ab60 <__malloc_unlock+0x8>)
 800ab5a:	f000 baed 	b.w	800b138 <__retarget_lock_release_recursive>
 800ab5e:	bf00      	nop
 800ab60:	20000afc 	.word	0x20000afc

0800ab64 <std>:
 800ab64:	2300      	movs	r3, #0
 800ab66:	b510      	push	{r4, lr}
 800ab68:	4604      	mov	r4, r0
 800ab6a:	e9c0 3300 	strd	r3, r3, [r0]
 800ab6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ab72:	6083      	str	r3, [r0, #8]
 800ab74:	8181      	strh	r1, [r0, #12]
 800ab76:	6643      	str	r3, [r0, #100]	@ 0x64
 800ab78:	81c2      	strh	r2, [r0, #14]
 800ab7a:	6183      	str	r3, [r0, #24]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	2208      	movs	r2, #8
 800ab80:	305c      	adds	r0, #92	@ 0x5c
 800ab82:	f000 fa4f 	bl	800b024 <memset>
 800ab86:	4b0d      	ldr	r3, [pc, #52]	@ (800abbc <std+0x58>)
 800ab88:	6263      	str	r3, [r4, #36]	@ 0x24
 800ab8a:	4b0d      	ldr	r3, [pc, #52]	@ (800abc0 <std+0x5c>)
 800ab8c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ab8e:	4b0d      	ldr	r3, [pc, #52]	@ (800abc4 <std+0x60>)
 800ab90:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ab92:	4b0d      	ldr	r3, [pc, #52]	@ (800abc8 <std+0x64>)
 800ab94:	6323      	str	r3, [r4, #48]	@ 0x30
 800ab96:	4b0d      	ldr	r3, [pc, #52]	@ (800abcc <std+0x68>)
 800ab98:	6224      	str	r4, [r4, #32]
 800ab9a:	429c      	cmp	r4, r3
 800ab9c:	d006      	beq.n	800abac <std+0x48>
 800ab9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800aba2:	4294      	cmp	r4, r2
 800aba4:	d002      	beq.n	800abac <std+0x48>
 800aba6:	33d0      	adds	r3, #208	@ 0xd0
 800aba8:	429c      	cmp	r4, r3
 800abaa:	d105      	bne.n	800abb8 <std+0x54>
 800abac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800abb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800abb4:	f000 babe 	b.w	800b134 <__retarget_lock_init_recursive>
 800abb8:	bd10      	pop	{r4, pc}
 800abba:	bf00      	nop
 800abbc:	0800ae75 	.word	0x0800ae75
 800abc0:	0800ae97 	.word	0x0800ae97
 800abc4:	0800aecf 	.word	0x0800aecf
 800abc8:	0800aef3 	.word	0x0800aef3
 800abcc:	200009bc 	.word	0x200009bc

0800abd0 <stdio_exit_handler>:
 800abd0:	4a02      	ldr	r2, [pc, #8]	@ (800abdc <stdio_exit_handler+0xc>)
 800abd2:	4903      	ldr	r1, [pc, #12]	@ (800abe0 <stdio_exit_handler+0x10>)
 800abd4:	4803      	ldr	r0, [pc, #12]	@ (800abe4 <stdio_exit_handler+0x14>)
 800abd6:	f000 b869 	b.w	800acac <_fwalk_sglue>
 800abda:	bf00      	nop
 800abdc:	2000002c 	.word	0x2000002c
 800abe0:	0800b891 	.word	0x0800b891
 800abe4:	2000003c 	.word	0x2000003c

0800abe8 <cleanup_stdio>:
 800abe8:	6841      	ldr	r1, [r0, #4]
 800abea:	4b0c      	ldr	r3, [pc, #48]	@ (800ac1c <cleanup_stdio+0x34>)
 800abec:	4299      	cmp	r1, r3
 800abee:	b510      	push	{r4, lr}
 800abf0:	4604      	mov	r4, r0
 800abf2:	d001      	beq.n	800abf8 <cleanup_stdio+0x10>
 800abf4:	f000 fe4c 	bl	800b890 <_fflush_r>
 800abf8:	68a1      	ldr	r1, [r4, #8]
 800abfa:	4b09      	ldr	r3, [pc, #36]	@ (800ac20 <cleanup_stdio+0x38>)
 800abfc:	4299      	cmp	r1, r3
 800abfe:	d002      	beq.n	800ac06 <cleanup_stdio+0x1e>
 800ac00:	4620      	mov	r0, r4
 800ac02:	f000 fe45 	bl	800b890 <_fflush_r>
 800ac06:	68e1      	ldr	r1, [r4, #12]
 800ac08:	4b06      	ldr	r3, [pc, #24]	@ (800ac24 <cleanup_stdio+0x3c>)
 800ac0a:	4299      	cmp	r1, r3
 800ac0c:	d004      	beq.n	800ac18 <cleanup_stdio+0x30>
 800ac0e:	4620      	mov	r0, r4
 800ac10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac14:	f000 be3c 	b.w	800b890 <_fflush_r>
 800ac18:	bd10      	pop	{r4, pc}
 800ac1a:	bf00      	nop
 800ac1c:	200009bc 	.word	0x200009bc
 800ac20:	20000a24 	.word	0x20000a24
 800ac24:	20000a8c 	.word	0x20000a8c

0800ac28 <global_stdio_init.part.0>:
 800ac28:	b510      	push	{r4, lr}
 800ac2a:	4b0b      	ldr	r3, [pc, #44]	@ (800ac58 <global_stdio_init.part.0+0x30>)
 800ac2c:	4c0b      	ldr	r4, [pc, #44]	@ (800ac5c <global_stdio_init.part.0+0x34>)
 800ac2e:	4a0c      	ldr	r2, [pc, #48]	@ (800ac60 <global_stdio_init.part.0+0x38>)
 800ac30:	601a      	str	r2, [r3, #0]
 800ac32:	4620      	mov	r0, r4
 800ac34:	2200      	movs	r2, #0
 800ac36:	2104      	movs	r1, #4
 800ac38:	f7ff ff94 	bl	800ab64 <std>
 800ac3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ac40:	2201      	movs	r2, #1
 800ac42:	2109      	movs	r1, #9
 800ac44:	f7ff ff8e 	bl	800ab64 <std>
 800ac48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ac4c:	2202      	movs	r2, #2
 800ac4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac52:	2112      	movs	r1, #18
 800ac54:	f7ff bf86 	b.w	800ab64 <std>
 800ac58:	20000af4 	.word	0x20000af4
 800ac5c:	200009bc 	.word	0x200009bc
 800ac60:	0800abd1 	.word	0x0800abd1

0800ac64 <__sfp_lock_acquire>:
 800ac64:	4801      	ldr	r0, [pc, #4]	@ (800ac6c <__sfp_lock_acquire+0x8>)
 800ac66:	f000 ba66 	b.w	800b136 <__retarget_lock_acquire_recursive>
 800ac6a:	bf00      	nop
 800ac6c:	20000afd 	.word	0x20000afd

0800ac70 <__sfp_lock_release>:
 800ac70:	4801      	ldr	r0, [pc, #4]	@ (800ac78 <__sfp_lock_release+0x8>)
 800ac72:	f000 ba61 	b.w	800b138 <__retarget_lock_release_recursive>
 800ac76:	bf00      	nop
 800ac78:	20000afd 	.word	0x20000afd

0800ac7c <__sinit>:
 800ac7c:	b510      	push	{r4, lr}
 800ac7e:	4604      	mov	r4, r0
 800ac80:	f7ff fff0 	bl	800ac64 <__sfp_lock_acquire>
 800ac84:	6a23      	ldr	r3, [r4, #32]
 800ac86:	b11b      	cbz	r3, 800ac90 <__sinit+0x14>
 800ac88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac8c:	f7ff bff0 	b.w	800ac70 <__sfp_lock_release>
 800ac90:	4b04      	ldr	r3, [pc, #16]	@ (800aca4 <__sinit+0x28>)
 800ac92:	6223      	str	r3, [r4, #32]
 800ac94:	4b04      	ldr	r3, [pc, #16]	@ (800aca8 <__sinit+0x2c>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d1f5      	bne.n	800ac88 <__sinit+0xc>
 800ac9c:	f7ff ffc4 	bl	800ac28 <global_stdio_init.part.0>
 800aca0:	e7f2      	b.n	800ac88 <__sinit+0xc>
 800aca2:	bf00      	nop
 800aca4:	0800abe9 	.word	0x0800abe9
 800aca8:	20000af4 	.word	0x20000af4

0800acac <_fwalk_sglue>:
 800acac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acb0:	4607      	mov	r7, r0
 800acb2:	4688      	mov	r8, r1
 800acb4:	4614      	mov	r4, r2
 800acb6:	2600      	movs	r6, #0
 800acb8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800acbc:	f1b9 0901 	subs.w	r9, r9, #1
 800acc0:	d505      	bpl.n	800acce <_fwalk_sglue+0x22>
 800acc2:	6824      	ldr	r4, [r4, #0]
 800acc4:	2c00      	cmp	r4, #0
 800acc6:	d1f7      	bne.n	800acb8 <_fwalk_sglue+0xc>
 800acc8:	4630      	mov	r0, r6
 800acca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acce:	89ab      	ldrh	r3, [r5, #12]
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d907      	bls.n	800ace4 <_fwalk_sglue+0x38>
 800acd4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800acd8:	3301      	adds	r3, #1
 800acda:	d003      	beq.n	800ace4 <_fwalk_sglue+0x38>
 800acdc:	4629      	mov	r1, r5
 800acde:	4638      	mov	r0, r7
 800ace0:	47c0      	blx	r8
 800ace2:	4306      	orrs	r6, r0
 800ace4:	3568      	adds	r5, #104	@ 0x68
 800ace6:	e7e9      	b.n	800acbc <_fwalk_sglue+0x10>

0800ace8 <iprintf>:
 800ace8:	b40f      	push	{r0, r1, r2, r3}
 800acea:	b507      	push	{r0, r1, r2, lr}
 800acec:	4906      	ldr	r1, [pc, #24]	@ (800ad08 <iprintf+0x20>)
 800acee:	ab04      	add	r3, sp, #16
 800acf0:	6808      	ldr	r0, [r1, #0]
 800acf2:	f853 2b04 	ldr.w	r2, [r3], #4
 800acf6:	6881      	ldr	r1, [r0, #8]
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	f000 faa1 	bl	800b240 <_vfiprintf_r>
 800acfe:	b003      	add	sp, #12
 800ad00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad04:	b004      	add	sp, #16
 800ad06:	4770      	bx	lr
 800ad08:	20000038 	.word	0x20000038

0800ad0c <setvbuf>:
 800ad0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad10:	461d      	mov	r5, r3
 800ad12:	4b57      	ldr	r3, [pc, #348]	@ (800ae70 <setvbuf+0x164>)
 800ad14:	681f      	ldr	r7, [r3, #0]
 800ad16:	4604      	mov	r4, r0
 800ad18:	460e      	mov	r6, r1
 800ad1a:	4690      	mov	r8, r2
 800ad1c:	b127      	cbz	r7, 800ad28 <setvbuf+0x1c>
 800ad1e:	6a3b      	ldr	r3, [r7, #32]
 800ad20:	b913      	cbnz	r3, 800ad28 <setvbuf+0x1c>
 800ad22:	4638      	mov	r0, r7
 800ad24:	f7ff ffaa 	bl	800ac7c <__sinit>
 800ad28:	f1b8 0f02 	cmp.w	r8, #2
 800ad2c:	d006      	beq.n	800ad3c <setvbuf+0x30>
 800ad2e:	f1b8 0f01 	cmp.w	r8, #1
 800ad32:	f200 809a 	bhi.w	800ae6a <setvbuf+0x15e>
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	f2c0 8097 	blt.w	800ae6a <setvbuf+0x15e>
 800ad3c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ad3e:	07d9      	lsls	r1, r3, #31
 800ad40:	d405      	bmi.n	800ad4e <setvbuf+0x42>
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	059a      	lsls	r2, r3, #22
 800ad46:	d402      	bmi.n	800ad4e <setvbuf+0x42>
 800ad48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ad4a:	f000 f9f4 	bl	800b136 <__retarget_lock_acquire_recursive>
 800ad4e:	4621      	mov	r1, r4
 800ad50:	4638      	mov	r0, r7
 800ad52:	f000 fd9d 	bl	800b890 <_fflush_r>
 800ad56:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad58:	b141      	cbz	r1, 800ad6c <setvbuf+0x60>
 800ad5a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad5e:	4299      	cmp	r1, r3
 800ad60:	d002      	beq.n	800ad68 <setvbuf+0x5c>
 800ad62:	4638      	mov	r0, r7
 800ad64:	f000 f9f8 	bl	800b158 <_free_r>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	61a3      	str	r3, [r4, #24]
 800ad70:	6063      	str	r3, [r4, #4]
 800ad72:	89a3      	ldrh	r3, [r4, #12]
 800ad74:	061b      	lsls	r3, r3, #24
 800ad76:	d503      	bpl.n	800ad80 <setvbuf+0x74>
 800ad78:	6921      	ldr	r1, [r4, #16]
 800ad7a:	4638      	mov	r0, r7
 800ad7c:	f000 f9ec 	bl	800b158 <_free_r>
 800ad80:	89a3      	ldrh	r3, [r4, #12]
 800ad82:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800ad86:	f023 0303 	bic.w	r3, r3, #3
 800ad8a:	f1b8 0f02 	cmp.w	r8, #2
 800ad8e:	81a3      	strh	r3, [r4, #12]
 800ad90:	d061      	beq.n	800ae56 <setvbuf+0x14a>
 800ad92:	ab01      	add	r3, sp, #4
 800ad94:	466a      	mov	r2, sp
 800ad96:	4621      	mov	r1, r4
 800ad98:	4638      	mov	r0, r7
 800ad9a:	f000 fda1 	bl	800b8e0 <__swhatbuf_r>
 800ad9e:	89a3      	ldrh	r3, [r4, #12]
 800ada0:	4318      	orrs	r0, r3
 800ada2:	81a0      	strh	r0, [r4, #12]
 800ada4:	bb2d      	cbnz	r5, 800adf2 <setvbuf+0xe6>
 800ada6:	9d00      	ldr	r5, [sp, #0]
 800ada8:	4628      	mov	r0, r5
 800adaa:	f7ff fe1d 	bl	800a9e8 <malloc>
 800adae:	4606      	mov	r6, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d152      	bne.n	800ae5a <setvbuf+0x14e>
 800adb4:	f8dd 9000 	ldr.w	r9, [sp]
 800adb8:	45a9      	cmp	r9, r5
 800adba:	d140      	bne.n	800ae3e <setvbuf+0x132>
 800adbc:	f04f 35ff 	mov.w	r5, #4294967295
 800adc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800adc4:	f043 0202 	orr.w	r2, r3, #2
 800adc8:	81a2      	strh	r2, [r4, #12]
 800adca:	2200      	movs	r2, #0
 800adcc:	60a2      	str	r2, [r4, #8]
 800adce:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800add2:	6022      	str	r2, [r4, #0]
 800add4:	6122      	str	r2, [r4, #16]
 800add6:	2201      	movs	r2, #1
 800add8:	6162      	str	r2, [r4, #20]
 800adda:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800addc:	07d6      	lsls	r6, r2, #31
 800adde:	d404      	bmi.n	800adea <setvbuf+0xde>
 800ade0:	0598      	lsls	r0, r3, #22
 800ade2:	d402      	bmi.n	800adea <setvbuf+0xde>
 800ade4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ade6:	f000 f9a7 	bl	800b138 <__retarget_lock_release_recursive>
 800adea:	4628      	mov	r0, r5
 800adec:	b003      	add	sp, #12
 800adee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800adf2:	2e00      	cmp	r6, #0
 800adf4:	d0d8      	beq.n	800ada8 <setvbuf+0x9c>
 800adf6:	6a3b      	ldr	r3, [r7, #32]
 800adf8:	b913      	cbnz	r3, 800ae00 <setvbuf+0xf4>
 800adfa:	4638      	mov	r0, r7
 800adfc:	f7ff ff3e 	bl	800ac7c <__sinit>
 800ae00:	f1b8 0f01 	cmp.w	r8, #1
 800ae04:	bf08      	it	eq
 800ae06:	89a3      	ldrheq	r3, [r4, #12]
 800ae08:	6026      	str	r6, [r4, #0]
 800ae0a:	bf04      	itt	eq
 800ae0c:	f043 0301 	orreq.w	r3, r3, #1
 800ae10:	81a3      	strheq	r3, [r4, #12]
 800ae12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae16:	f013 0208 	ands.w	r2, r3, #8
 800ae1a:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800ae1e:	d01e      	beq.n	800ae5e <setvbuf+0x152>
 800ae20:	07d9      	lsls	r1, r3, #31
 800ae22:	bf41      	itttt	mi
 800ae24:	2200      	movmi	r2, #0
 800ae26:	426d      	negmi	r5, r5
 800ae28:	60a2      	strmi	r2, [r4, #8]
 800ae2a:	61a5      	strmi	r5, [r4, #24]
 800ae2c:	bf58      	it	pl
 800ae2e:	60a5      	strpl	r5, [r4, #8]
 800ae30:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ae32:	07d2      	lsls	r2, r2, #31
 800ae34:	d401      	bmi.n	800ae3a <setvbuf+0x12e>
 800ae36:	059b      	lsls	r3, r3, #22
 800ae38:	d513      	bpl.n	800ae62 <setvbuf+0x156>
 800ae3a:	2500      	movs	r5, #0
 800ae3c:	e7d5      	b.n	800adea <setvbuf+0xde>
 800ae3e:	4648      	mov	r0, r9
 800ae40:	f7ff fdd2 	bl	800a9e8 <malloc>
 800ae44:	4606      	mov	r6, r0
 800ae46:	2800      	cmp	r0, #0
 800ae48:	d0b8      	beq.n	800adbc <setvbuf+0xb0>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ae50:	81a3      	strh	r3, [r4, #12]
 800ae52:	464d      	mov	r5, r9
 800ae54:	e7cf      	b.n	800adf6 <setvbuf+0xea>
 800ae56:	2500      	movs	r5, #0
 800ae58:	e7b2      	b.n	800adc0 <setvbuf+0xb4>
 800ae5a:	46a9      	mov	r9, r5
 800ae5c:	e7f5      	b.n	800ae4a <setvbuf+0x13e>
 800ae5e:	60a2      	str	r2, [r4, #8]
 800ae60:	e7e6      	b.n	800ae30 <setvbuf+0x124>
 800ae62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae64:	f000 f968 	bl	800b138 <__retarget_lock_release_recursive>
 800ae68:	e7e7      	b.n	800ae3a <setvbuf+0x12e>
 800ae6a:	f04f 35ff 	mov.w	r5, #4294967295
 800ae6e:	e7bc      	b.n	800adea <setvbuf+0xde>
 800ae70:	20000038 	.word	0x20000038

0800ae74 <__sread>:
 800ae74:	b510      	push	{r4, lr}
 800ae76:	460c      	mov	r4, r1
 800ae78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae7c:	f000 f8fc 	bl	800b078 <_read_r>
 800ae80:	2800      	cmp	r0, #0
 800ae82:	bfab      	itete	ge
 800ae84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ae86:	89a3      	ldrhlt	r3, [r4, #12]
 800ae88:	181b      	addge	r3, r3, r0
 800ae8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ae8e:	bfac      	ite	ge
 800ae90:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ae92:	81a3      	strhlt	r3, [r4, #12]
 800ae94:	bd10      	pop	{r4, pc}

0800ae96 <__swrite>:
 800ae96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae9a:	461f      	mov	r7, r3
 800ae9c:	898b      	ldrh	r3, [r1, #12]
 800ae9e:	05db      	lsls	r3, r3, #23
 800aea0:	4605      	mov	r5, r0
 800aea2:	460c      	mov	r4, r1
 800aea4:	4616      	mov	r6, r2
 800aea6:	d505      	bpl.n	800aeb4 <__swrite+0x1e>
 800aea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeac:	2302      	movs	r3, #2
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f000 f8d0 	bl	800b054 <_lseek_r>
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aeba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aebe:	81a3      	strh	r3, [r4, #12]
 800aec0:	4632      	mov	r2, r6
 800aec2:	463b      	mov	r3, r7
 800aec4:	4628      	mov	r0, r5
 800aec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aeca:	f000 b8f7 	b.w	800b0bc <_write_r>

0800aece <__sseek>:
 800aece:	b510      	push	{r4, lr}
 800aed0:	460c      	mov	r4, r1
 800aed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aed6:	f000 f8bd 	bl	800b054 <_lseek_r>
 800aeda:	1c43      	adds	r3, r0, #1
 800aedc:	89a3      	ldrh	r3, [r4, #12]
 800aede:	bf15      	itete	ne
 800aee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800aeea:	81a3      	strheq	r3, [r4, #12]
 800aeec:	bf18      	it	ne
 800aeee:	81a3      	strhne	r3, [r4, #12]
 800aef0:	bd10      	pop	{r4, pc}

0800aef2 <__sclose>:
 800aef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aef6:	f000 b89d 	b.w	800b034 <_close_r>

0800aefa <__swbuf_r>:
 800aefa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aefc:	460e      	mov	r6, r1
 800aefe:	4614      	mov	r4, r2
 800af00:	4605      	mov	r5, r0
 800af02:	b118      	cbz	r0, 800af0c <__swbuf_r+0x12>
 800af04:	6a03      	ldr	r3, [r0, #32]
 800af06:	b90b      	cbnz	r3, 800af0c <__swbuf_r+0x12>
 800af08:	f7ff feb8 	bl	800ac7c <__sinit>
 800af0c:	69a3      	ldr	r3, [r4, #24]
 800af0e:	60a3      	str	r3, [r4, #8]
 800af10:	89a3      	ldrh	r3, [r4, #12]
 800af12:	071a      	lsls	r2, r3, #28
 800af14:	d501      	bpl.n	800af1a <__swbuf_r+0x20>
 800af16:	6923      	ldr	r3, [r4, #16]
 800af18:	b943      	cbnz	r3, 800af2c <__swbuf_r+0x32>
 800af1a:	4621      	mov	r1, r4
 800af1c:	4628      	mov	r0, r5
 800af1e:	f000 f82b 	bl	800af78 <__swsetup_r>
 800af22:	b118      	cbz	r0, 800af2c <__swbuf_r+0x32>
 800af24:	f04f 37ff 	mov.w	r7, #4294967295
 800af28:	4638      	mov	r0, r7
 800af2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af2c:	6823      	ldr	r3, [r4, #0]
 800af2e:	6922      	ldr	r2, [r4, #16]
 800af30:	1a98      	subs	r0, r3, r2
 800af32:	6963      	ldr	r3, [r4, #20]
 800af34:	b2f6      	uxtb	r6, r6
 800af36:	4283      	cmp	r3, r0
 800af38:	4637      	mov	r7, r6
 800af3a:	dc05      	bgt.n	800af48 <__swbuf_r+0x4e>
 800af3c:	4621      	mov	r1, r4
 800af3e:	4628      	mov	r0, r5
 800af40:	f000 fca6 	bl	800b890 <_fflush_r>
 800af44:	2800      	cmp	r0, #0
 800af46:	d1ed      	bne.n	800af24 <__swbuf_r+0x2a>
 800af48:	68a3      	ldr	r3, [r4, #8]
 800af4a:	3b01      	subs	r3, #1
 800af4c:	60a3      	str	r3, [r4, #8]
 800af4e:	6823      	ldr	r3, [r4, #0]
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	6022      	str	r2, [r4, #0]
 800af54:	701e      	strb	r6, [r3, #0]
 800af56:	6962      	ldr	r2, [r4, #20]
 800af58:	1c43      	adds	r3, r0, #1
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d004      	beq.n	800af68 <__swbuf_r+0x6e>
 800af5e:	89a3      	ldrh	r3, [r4, #12]
 800af60:	07db      	lsls	r3, r3, #31
 800af62:	d5e1      	bpl.n	800af28 <__swbuf_r+0x2e>
 800af64:	2e0a      	cmp	r6, #10
 800af66:	d1df      	bne.n	800af28 <__swbuf_r+0x2e>
 800af68:	4621      	mov	r1, r4
 800af6a:	4628      	mov	r0, r5
 800af6c:	f000 fc90 	bl	800b890 <_fflush_r>
 800af70:	2800      	cmp	r0, #0
 800af72:	d0d9      	beq.n	800af28 <__swbuf_r+0x2e>
 800af74:	e7d6      	b.n	800af24 <__swbuf_r+0x2a>
	...

0800af78 <__swsetup_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4b29      	ldr	r3, [pc, #164]	@ (800b020 <__swsetup_r+0xa8>)
 800af7c:	4605      	mov	r5, r0
 800af7e:	6818      	ldr	r0, [r3, #0]
 800af80:	460c      	mov	r4, r1
 800af82:	b118      	cbz	r0, 800af8c <__swsetup_r+0x14>
 800af84:	6a03      	ldr	r3, [r0, #32]
 800af86:	b90b      	cbnz	r3, 800af8c <__swsetup_r+0x14>
 800af88:	f7ff fe78 	bl	800ac7c <__sinit>
 800af8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af90:	0719      	lsls	r1, r3, #28
 800af92:	d422      	bmi.n	800afda <__swsetup_r+0x62>
 800af94:	06da      	lsls	r2, r3, #27
 800af96:	d407      	bmi.n	800afa8 <__swsetup_r+0x30>
 800af98:	2209      	movs	r2, #9
 800af9a:	602a      	str	r2, [r5, #0]
 800af9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800afa0:	81a3      	strh	r3, [r4, #12]
 800afa2:	f04f 30ff 	mov.w	r0, #4294967295
 800afa6:	e033      	b.n	800b010 <__swsetup_r+0x98>
 800afa8:	0758      	lsls	r0, r3, #29
 800afaa:	d512      	bpl.n	800afd2 <__swsetup_r+0x5a>
 800afac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800afae:	b141      	cbz	r1, 800afc2 <__swsetup_r+0x4a>
 800afb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800afb4:	4299      	cmp	r1, r3
 800afb6:	d002      	beq.n	800afbe <__swsetup_r+0x46>
 800afb8:	4628      	mov	r0, r5
 800afba:	f000 f8cd 	bl	800b158 <_free_r>
 800afbe:	2300      	movs	r3, #0
 800afc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afc8:	81a3      	strh	r3, [r4, #12]
 800afca:	2300      	movs	r3, #0
 800afcc:	6063      	str	r3, [r4, #4]
 800afce:	6923      	ldr	r3, [r4, #16]
 800afd0:	6023      	str	r3, [r4, #0]
 800afd2:	89a3      	ldrh	r3, [r4, #12]
 800afd4:	f043 0308 	orr.w	r3, r3, #8
 800afd8:	81a3      	strh	r3, [r4, #12]
 800afda:	6923      	ldr	r3, [r4, #16]
 800afdc:	b94b      	cbnz	r3, 800aff2 <__swsetup_r+0x7a>
 800afde:	89a3      	ldrh	r3, [r4, #12]
 800afe0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afe4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afe8:	d003      	beq.n	800aff2 <__swsetup_r+0x7a>
 800afea:	4621      	mov	r1, r4
 800afec:	4628      	mov	r0, r5
 800afee:	f000 fc9d 	bl	800b92c <__smakebuf_r>
 800aff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aff6:	f013 0201 	ands.w	r2, r3, #1
 800affa:	d00a      	beq.n	800b012 <__swsetup_r+0x9a>
 800affc:	2200      	movs	r2, #0
 800affe:	60a2      	str	r2, [r4, #8]
 800b000:	6962      	ldr	r2, [r4, #20]
 800b002:	4252      	negs	r2, r2
 800b004:	61a2      	str	r2, [r4, #24]
 800b006:	6922      	ldr	r2, [r4, #16]
 800b008:	b942      	cbnz	r2, 800b01c <__swsetup_r+0xa4>
 800b00a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b00e:	d1c5      	bne.n	800af9c <__swsetup_r+0x24>
 800b010:	bd38      	pop	{r3, r4, r5, pc}
 800b012:	0799      	lsls	r1, r3, #30
 800b014:	bf58      	it	pl
 800b016:	6962      	ldrpl	r2, [r4, #20]
 800b018:	60a2      	str	r2, [r4, #8]
 800b01a:	e7f4      	b.n	800b006 <__swsetup_r+0x8e>
 800b01c:	2000      	movs	r0, #0
 800b01e:	e7f7      	b.n	800b010 <__swsetup_r+0x98>
 800b020:	20000038 	.word	0x20000038

0800b024 <memset>:
 800b024:	4402      	add	r2, r0
 800b026:	4603      	mov	r3, r0
 800b028:	4293      	cmp	r3, r2
 800b02a:	d100      	bne.n	800b02e <memset+0xa>
 800b02c:	4770      	bx	lr
 800b02e:	f803 1b01 	strb.w	r1, [r3], #1
 800b032:	e7f9      	b.n	800b028 <memset+0x4>

0800b034 <_close_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	4d06      	ldr	r5, [pc, #24]	@ (800b050 <_close_r+0x1c>)
 800b038:	2300      	movs	r3, #0
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	602b      	str	r3, [r5, #0]
 800b040:	f7f7 f9cf 	bl	80023e2 <_close>
 800b044:	1c43      	adds	r3, r0, #1
 800b046:	d102      	bne.n	800b04e <_close_r+0x1a>
 800b048:	682b      	ldr	r3, [r5, #0]
 800b04a:	b103      	cbz	r3, 800b04e <_close_r+0x1a>
 800b04c:	6023      	str	r3, [r4, #0]
 800b04e:	bd38      	pop	{r3, r4, r5, pc}
 800b050:	20000af8 	.word	0x20000af8

0800b054 <_lseek_r>:
 800b054:	b538      	push	{r3, r4, r5, lr}
 800b056:	4d07      	ldr	r5, [pc, #28]	@ (800b074 <_lseek_r+0x20>)
 800b058:	4604      	mov	r4, r0
 800b05a:	4608      	mov	r0, r1
 800b05c:	4611      	mov	r1, r2
 800b05e:	2200      	movs	r2, #0
 800b060:	602a      	str	r2, [r5, #0]
 800b062:	461a      	mov	r2, r3
 800b064:	f7f7 f9e4 	bl	8002430 <_lseek>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_lseek_r+0x1e>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_lseek_r+0x1e>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	20000af8 	.word	0x20000af8

0800b078 <_read_r>:
 800b078:	b538      	push	{r3, r4, r5, lr}
 800b07a:	4d07      	ldr	r5, [pc, #28]	@ (800b098 <_read_r+0x20>)
 800b07c:	4604      	mov	r4, r0
 800b07e:	4608      	mov	r0, r1
 800b080:	4611      	mov	r1, r2
 800b082:	2200      	movs	r2, #0
 800b084:	602a      	str	r2, [r5, #0]
 800b086:	461a      	mov	r2, r3
 800b088:	f7f7 f98e 	bl	80023a8 <_read>
 800b08c:	1c43      	adds	r3, r0, #1
 800b08e:	d102      	bne.n	800b096 <_read_r+0x1e>
 800b090:	682b      	ldr	r3, [r5, #0]
 800b092:	b103      	cbz	r3, 800b096 <_read_r+0x1e>
 800b094:	6023      	str	r3, [r4, #0]
 800b096:	bd38      	pop	{r3, r4, r5, pc}
 800b098:	20000af8 	.word	0x20000af8

0800b09c <_sbrk_r>:
 800b09c:	b538      	push	{r3, r4, r5, lr}
 800b09e:	4d06      	ldr	r5, [pc, #24]	@ (800b0b8 <_sbrk_r+0x1c>)
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	4604      	mov	r4, r0
 800b0a4:	4608      	mov	r0, r1
 800b0a6:	602b      	str	r3, [r5, #0]
 800b0a8:	f7f7 f9d0 	bl	800244c <_sbrk>
 800b0ac:	1c43      	adds	r3, r0, #1
 800b0ae:	d102      	bne.n	800b0b6 <_sbrk_r+0x1a>
 800b0b0:	682b      	ldr	r3, [r5, #0]
 800b0b2:	b103      	cbz	r3, 800b0b6 <_sbrk_r+0x1a>
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	bd38      	pop	{r3, r4, r5, pc}
 800b0b8:	20000af8 	.word	0x20000af8

0800b0bc <_write_r>:
 800b0bc:	b538      	push	{r3, r4, r5, lr}
 800b0be:	4d07      	ldr	r5, [pc, #28]	@ (800b0dc <_write_r+0x20>)
 800b0c0:	4604      	mov	r4, r0
 800b0c2:	4608      	mov	r0, r1
 800b0c4:	4611      	mov	r1, r2
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	602a      	str	r2, [r5, #0]
 800b0ca:	461a      	mov	r2, r3
 800b0cc:	f7f5 fcf8 	bl	8000ac0 <_write>
 800b0d0:	1c43      	adds	r3, r0, #1
 800b0d2:	d102      	bne.n	800b0da <_write_r+0x1e>
 800b0d4:	682b      	ldr	r3, [r5, #0]
 800b0d6:	b103      	cbz	r3, 800b0da <_write_r+0x1e>
 800b0d8:	6023      	str	r3, [r4, #0]
 800b0da:	bd38      	pop	{r3, r4, r5, pc}
 800b0dc:	20000af8 	.word	0x20000af8

0800b0e0 <__errno>:
 800b0e0:	4b01      	ldr	r3, [pc, #4]	@ (800b0e8 <__errno+0x8>)
 800b0e2:	6818      	ldr	r0, [r3, #0]
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	20000038 	.word	0x20000038

0800b0ec <__libc_init_array>:
 800b0ec:	b570      	push	{r4, r5, r6, lr}
 800b0ee:	4d0d      	ldr	r5, [pc, #52]	@ (800b124 <__libc_init_array+0x38>)
 800b0f0:	4c0d      	ldr	r4, [pc, #52]	@ (800b128 <__libc_init_array+0x3c>)
 800b0f2:	1b64      	subs	r4, r4, r5
 800b0f4:	10a4      	asrs	r4, r4, #2
 800b0f6:	2600      	movs	r6, #0
 800b0f8:	42a6      	cmp	r6, r4
 800b0fa:	d109      	bne.n	800b110 <__libc_init_array+0x24>
 800b0fc:	4d0b      	ldr	r5, [pc, #44]	@ (800b12c <__libc_init_array+0x40>)
 800b0fe:	4c0c      	ldr	r4, [pc, #48]	@ (800b130 <__libc_init_array+0x44>)
 800b100:	f000 fc72 	bl	800b9e8 <_init>
 800b104:	1b64      	subs	r4, r4, r5
 800b106:	10a4      	asrs	r4, r4, #2
 800b108:	2600      	movs	r6, #0
 800b10a:	42a6      	cmp	r6, r4
 800b10c:	d105      	bne.n	800b11a <__libc_init_array+0x2e>
 800b10e:	bd70      	pop	{r4, r5, r6, pc}
 800b110:	f855 3b04 	ldr.w	r3, [r5], #4
 800b114:	4798      	blx	r3
 800b116:	3601      	adds	r6, #1
 800b118:	e7ee      	b.n	800b0f8 <__libc_init_array+0xc>
 800b11a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b11e:	4798      	blx	r3
 800b120:	3601      	adds	r6, #1
 800b122:	e7f2      	b.n	800b10a <__libc_init_array+0x1e>
 800b124:	0800bc20 	.word	0x0800bc20
 800b128:	0800bc20 	.word	0x0800bc20
 800b12c:	0800bc20 	.word	0x0800bc20
 800b130:	0800bc24 	.word	0x0800bc24

0800b134 <__retarget_lock_init_recursive>:
 800b134:	4770      	bx	lr

0800b136 <__retarget_lock_acquire_recursive>:
 800b136:	4770      	bx	lr

0800b138 <__retarget_lock_release_recursive>:
 800b138:	4770      	bx	lr

0800b13a <memcpy>:
 800b13a:	440a      	add	r2, r1
 800b13c:	4291      	cmp	r1, r2
 800b13e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b142:	d100      	bne.n	800b146 <memcpy+0xc>
 800b144:	4770      	bx	lr
 800b146:	b510      	push	{r4, lr}
 800b148:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b14c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b150:	4291      	cmp	r1, r2
 800b152:	d1f9      	bne.n	800b148 <memcpy+0xe>
 800b154:	bd10      	pop	{r4, pc}
	...

0800b158 <_free_r>:
 800b158:	b538      	push	{r3, r4, r5, lr}
 800b15a:	4605      	mov	r5, r0
 800b15c:	2900      	cmp	r1, #0
 800b15e:	d041      	beq.n	800b1e4 <_free_r+0x8c>
 800b160:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b164:	1f0c      	subs	r4, r1, #4
 800b166:	2b00      	cmp	r3, #0
 800b168:	bfb8      	it	lt
 800b16a:	18e4      	addlt	r4, r4, r3
 800b16c:	f7ff fcee 	bl	800ab4c <__malloc_lock>
 800b170:	4a1d      	ldr	r2, [pc, #116]	@ (800b1e8 <_free_r+0x90>)
 800b172:	6813      	ldr	r3, [r2, #0]
 800b174:	b933      	cbnz	r3, 800b184 <_free_r+0x2c>
 800b176:	6063      	str	r3, [r4, #4]
 800b178:	6014      	str	r4, [r2, #0]
 800b17a:	4628      	mov	r0, r5
 800b17c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b180:	f7ff bcea 	b.w	800ab58 <__malloc_unlock>
 800b184:	42a3      	cmp	r3, r4
 800b186:	d908      	bls.n	800b19a <_free_r+0x42>
 800b188:	6820      	ldr	r0, [r4, #0]
 800b18a:	1821      	adds	r1, r4, r0
 800b18c:	428b      	cmp	r3, r1
 800b18e:	bf01      	itttt	eq
 800b190:	6819      	ldreq	r1, [r3, #0]
 800b192:	685b      	ldreq	r3, [r3, #4]
 800b194:	1809      	addeq	r1, r1, r0
 800b196:	6021      	streq	r1, [r4, #0]
 800b198:	e7ed      	b.n	800b176 <_free_r+0x1e>
 800b19a:	461a      	mov	r2, r3
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	b10b      	cbz	r3, 800b1a4 <_free_r+0x4c>
 800b1a0:	42a3      	cmp	r3, r4
 800b1a2:	d9fa      	bls.n	800b19a <_free_r+0x42>
 800b1a4:	6811      	ldr	r1, [r2, #0]
 800b1a6:	1850      	adds	r0, r2, r1
 800b1a8:	42a0      	cmp	r0, r4
 800b1aa:	d10b      	bne.n	800b1c4 <_free_r+0x6c>
 800b1ac:	6820      	ldr	r0, [r4, #0]
 800b1ae:	4401      	add	r1, r0
 800b1b0:	1850      	adds	r0, r2, r1
 800b1b2:	4283      	cmp	r3, r0
 800b1b4:	6011      	str	r1, [r2, #0]
 800b1b6:	d1e0      	bne.n	800b17a <_free_r+0x22>
 800b1b8:	6818      	ldr	r0, [r3, #0]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	6053      	str	r3, [r2, #4]
 800b1be:	4408      	add	r0, r1
 800b1c0:	6010      	str	r0, [r2, #0]
 800b1c2:	e7da      	b.n	800b17a <_free_r+0x22>
 800b1c4:	d902      	bls.n	800b1cc <_free_r+0x74>
 800b1c6:	230c      	movs	r3, #12
 800b1c8:	602b      	str	r3, [r5, #0]
 800b1ca:	e7d6      	b.n	800b17a <_free_r+0x22>
 800b1cc:	6820      	ldr	r0, [r4, #0]
 800b1ce:	1821      	adds	r1, r4, r0
 800b1d0:	428b      	cmp	r3, r1
 800b1d2:	bf04      	itt	eq
 800b1d4:	6819      	ldreq	r1, [r3, #0]
 800b1d6:	685b      	ldreq	r3, [r3, #4]
 800b1d8:	6063      	str	r3, [r4, #4]
 800b1da:	bf04      	itt	eq
 800b1dc:	1809      	addeq	r1, r1, r0
 800b1de:	6021      	streq	r1, [r4, #0]
 800b1e0:	6054      	str	r4, [r2, #4]
 800b1e2:	e7ca      	b.n	800b17a <_free_r+0x22>
 800b1e4:	bd38      	pop	{r3, r4, r5, pc}
 800b1e6:	bf00      	nop
 800b1e8:	200009b8 	.word	0x200009b8

0800b1ec <__sfputc_r>:
 800b1ec:	6893      	ldr	r3, [r2, #8]
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	b410      	push	{r4}
 800b1f4:	6093      	str	r3, [r2, #8]
 800b1f6:	da08      	bge.n	800b20a <__sfputc_r+0x1e>
 800b1f8:	6994      	ldr	r4, [r2, #24]
 800b1fa:	42a3      	cmp	r3, r4
 800b1fc:	db01      	blt.n	800b202 <__sfputc_r+0x16>
 800b1fe:	290a      	cmp	r1, #10
 800b200:	d103      	bne.n	800b20a <__sfputc_r+0x1e>
 800b202:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b206:	f7ff be78 	b.w	800aefa <__swbuf_r>
 800b20a:	6813      	ldr	r3, [r2, #0]
 800b20c:	1c58      	adds	r0, r3, #1
 800b20e:	6010      	str	r0, [r2, #0]
 800b210:	7019      	strb	r1, [r3, #0]
 800b212:	4608      	mov	r0, r1
 800b214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b218:	4770      	bx	lr

0800b21a <__sfputs_r>:
 800b21a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b21c:	4606      	mov	r6, r0
 800b21e:	460f      	mov	r7, r1
 800b220:	4614      	mov	r4, r2
 800b222:	18d5      	adds	r5, r2, r3
 800b224:	42ac      	cmp	r4, r5
 800b226:	d101      	bne.n	800b22c <__sfputs_r+0x12>
 800b228:	2000      	movs	r0, #0
 800b22a:	e007      	b.n	800b23c <__sfputs_r+0x22>
 800b22c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b230:	463a      	mov	r2, r7
 800b232:	4630      	mov	r0, r6
 800b234:	f7ff ffda 	bl	800b1ec <__sfputc_r>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d1f3      	bne.n	800b224 <__sfputs_r+0xa>
 800b23c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b240 <_vfiprintf_r>:
 800b240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b244:	460d      	mov	r5, r1
 800b246:	b09d      	sub	sp, #116	@ 0x74
 800b248:	4614      	mov	r4, r2
 800b24a:	4698      	mov	r8, r3
 800b24c:	4606      	mov	r6, r0
 800b24e:	b118      	cbz	r0, 800b258 <_vfiprintf_r+0x18>
 800b250:	6a03      	ldr	r3, [r0, #32]
 800b252:	b90b      	cbnz	r3, 800b258 <_vfiprintf_r+0x18>
 800b254:	f7ff fd12 	bl	800ac7c <__sinit>
 800b258:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b25a:	07d9      	lsls	r1, r3, #31
 800b25c:	d405      	bmi.n	800b26a <_vfiprintf_r+0x2a>
 800b25e:	89ab      	ldrh	r3, [r5, #12]
 800b260:	059a      	lsls	r2, r3, #22
 800b262:	d402      	bmi.n	800b26a <_vfiprintf_r+0x2a>
 800b264:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b266:	f7ff ff66 	bl	800b136 <__retarget_lock_acquire_recursive>
 800b26a:	89ab      	ldrh	r3, [r5, #12]
 800b26c:	071b      	lsls	r3, r3, #28
 800b26e:	d501      	bpl.n	800b274 <_vfiprintf_r+0x34>
 800b270:	692b      	ldr	r3, [r5, #16]
 800b272:	b99b      	cbnz	r3, 800b29c <_vfiprintf_r+0x5c>
 800b274:	4629      	mov	r1, r5
 800b276:	4630      	mov	r0, r6
 800b278:	f7ff fe7e 	bl	800af78 <__swsetup_r>
 800b27c:	b170      	cbz	r0, 800b29c <_vfiprintf_r+0x5c>
 800b27e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b280:	07dc      	lsls	r4, r3, #31
 800b282:	d504      	bpl.n	800b28e <_vfiprintf_r+0x4e>
 800b284:	f04f 30ff 	mov.w	r0, #4294967295
 800b288:	b01d      	add	sp, #116	@ 0x74
 800b28a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b28e:	89ab      	ldrh	r3, [r5, #12]
 800b290:	0598      	lsls	r0, r3, #22
 800b292:	d4f7      	bmi.n	800b284 <_vfiprintf_r+0x44>
 800b294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b296:	f7ff ff4f 	bl	800b138 <__retarget_lock_release_recursive>
 800b29a:	e7f3      	b.n	800b284 <_vfiprintf_r+0x44>
 800b29c:	2300      	movs	r3, #0
 800b29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2a0:	2320      	movs	r3, #32
 800b2a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b2a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2aa:	2330      	movs	r3, #48	@ 0x30
 800b2ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b45c <_vfiprintf_r+0x21c>
 800b2b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b2b4:	f04f 0901 	mov.w	r9, #1
 800b2b8:	4623      	mov	r3, r4
 800b2ba:	469a      	mov	sl, r3
 800b2bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2c0:	b10a      	cbz	r2, 800b2c6 <_vfiprintf_r+0x86>
 800b2c2:	2a25      	cmp	r2, #37	@ 0x25
 800b2c4:	d1f9      	bne.n	800b2ba <_vfiprintf_r+0x7a>
 800b2c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b2ca:	d00b      	beq.n	800b2e4 <_vfiprintf_r+0xa4>
 800b2cc:	465b      	mov	r3, fp
 800b2ce:	4622      	mov	r2, r4
 800b2d0:	4629      	mov	r1, r5
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	f7ff ffa1 	bl	800b21a <__sfputs_r>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	f000 80a7 	beq.w	800b42c <_vfiprintf_r+0x1ec>
 800b2de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b2e0:	445a      	add	r2, fp
 800b2e2:	9209      	str	r2, [sp, #36]	@ 0x24
 800b2e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	f000 809f 	beq.w	800b42c <_vfiprintf_r+0x1ec>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b2f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b2f8:	f10a 0a01 	add.w	sl, sl, #1
 800b2fc:	9304      	str	r3, [sp, #16]
 800b2fe:	9307      	str	r3, [sp, #28]
 800b300:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b304:	931a      	str	r3, [sp, #104]	@ 0x68
 800b306:	4654      	mov	r4, sl
 800b308:	2205      	movs	r2, #5
 800b30a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b30e:	4853      	ldr	r0, [pc, #332]	@ (800b45c <_vfiprintf_r+0x21c>)
 800b310:	f7f4 ff5e 	bl	80001d0 <memchr>
 800b314:	9a04      	ldr	r2, [sp, #16]
 800b316:	b9d8      	cbnz	r0, 800b350 <_vfiprintf_r+0x110>
 800b318:	06d1      	lsls	r1, r2, #27
 800b31a:	bf44      	itt	mi
 800b31c:	2320      	movmi	r3, #32
 800b31e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b322:	0713      	lsls	r3, r2, #28
 800b324:	bf44      	itt	mi
 800b326:	232b      	movmi	r3, #43	@ 0x2b
 800b328:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b32c:	f89a 3000 	ldrb.w	r3, [sl]
 800b330:	2b2a      	cmp	r3, #42	@ 0x2a
 800b332:	d015      	beq.n	800b360 <_vfiprintf_r+0x120>
 800b334:	9a07      	ldr	r2, [sp, #28]
 800b336:	4654      	mov	r4, sl
 800b338:	2000      	movs	r0, #0
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4621      	mov	r1, r4
 800b340:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b344:	3b30      	subs	r3, #48	@ 0x30
 800b346:	2b09      	cmp	r3, #9
 800b348:	d94b      	bls.n	800b3e2 <_vfiprintf_r+0x1a2>
 800b34a:	b1b0      	cbz	r0, 800b37a <_vfiprintf_r+0x13a>
 800b34c:	9207      	str	r2, [sp, #28]
 800b34e:	e014      	b.n	800b37a <_vfiprintf_r+0x13a>
 800b350:	eba0 0308 	sub.w	r3, r0, r8
 800b354:	fa09 f303 	lsl.w	r3, r9, r3
 800b358:	4313      	orrs	r3, r2
 800b35a:	9304      	str	r3, [sp, #16]
 800b35c:	46a2      	mov	sl, r4
 800b35e:	e7d2      	b.n	800b306 <_vfiprintf_r+0xc6>
 800b360:	9b03      	ldr	r3, [sp, #12]
 800b362:	1d19      	adds	r1, r3, #4
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	9103      	str	r1, [sp, #12]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	bfbb      	ittet	lt
 800b36c:	425b      	neglt	r3, r3
 800b36e:	f042 0202 	orrlt.w	r2, r2, #2
 800b372:	9307      	strge	r3, [sp, #28]
 800b374:	9307      	strlt	r3, [sp, #28]
 800b376:	bfb8      	it	lt
 800b378:	9204      	strlt	r2, [sp, #16]
 800b37a:	7823      	ldrb	r3, [r4, #0]
 800b37c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b37e:	d10a      	bne.n	800b396 <_vfiprintf_r+0x156>
 800b380:	7863      	ldrb	r3, [r4, #1]
 800b382:	2b2a      	cmp	r3, #42	@ 0x2a
 800b384:	d132      	bne.n	800b3ec <_vfiprintf_r+0x1ac>
 800b386:	9b03      	ldr	r3, [sp, #12]
 800b388:	1d1a      	adds	r2, r3, #4
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	9203      	str	r2, [sp, #12]
 800b38e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b392:	3402      	adds	r4, #2
 800b394:	9305      	str	r3, [sp, #20]
 800b396:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b46c <_vfiprintf_r+0x22c>
 800b39a:	7821      	ldrb	r1, [r4, #0]
 800b39c:	2203      	movs	r2, #3
 800b39e:	4650      	mov	r0, sl
 800b3a0:	f7f4 ff16 	bl	80001d0 <memchr>
 800b3a4:	b138      	cbz	r0, 800b3b6 <_vfiprintf_r+0x176>
 800b3a6:	9b04      	ldr	r3, [sp, #16]
 800b3a8:	eba0 000a 	sub.w	r0, r0, sl
 800b3ac:	2240      	movs	r2, #64	@ 0x40
 800b3ae:	4082      	lsls	r2, r0
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	3401      	adds	r4, #1
 800b3b4:	9304      	str	r3, [sp, #16]
 800b3b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ba:	4829      	ldr	r0, [pc, #164]	@ (800b460 <_vfiprintf_r+0x220>)
 800b3bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b3c0:	2206      	movs	r2, #6
 800b3c2:	f7f4 ff05 	bl	80001d0 <memchr>
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	d03f      	beq.n	800b44a <_vfiprintf_r+0x20a>
 800b3ca:	4b26      	ldr	r3, [pc, #152]	@ (800b464 <_vfiprintf_r+0x224>)
 800b3cc:	bb1b      	cbnz	r3, 800b416 <_vfiprintf_r+0x1d6>
 800b3ce:	9b03      	ldr	r3, [sp, #12]
 800b3d0:	3307      	adds	r3, #7
 800b3d2:	f023 0307 	bic.w	r3, r3, #7
 800b3d6:	3308      	adds	r3, #8
 800b3d8:	9303      	str	r3, [sp, #12]
 800b3da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b3dc:	443b      	add	r3, r7
 800b3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800b3e0:	e76a      	b.n	800b2b8 <_vfiprintf_r+0x78>
 800b3e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	2001      	movs	r0, #1
 800b3ea:	e7a8      	b.n	800b33e <_vfiprintf_r+0xfe>
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	3401      	adds	r4, #1
 800b3f0:	9305      	str	r3, [sp, #20]
 800b3f2:	4619      	mov	r1, r3
 800b3f4:	f04f 0c0a 	mov.w	ip, #10
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b3fe:	3a30      	subs	r2, #48	@ 0x30
 800b400:	2a09      	cmp	r2, #9
 800b402:	d903      	bls.n	800b40c <_vfiprintf_r+0x1cc>
 800b404:	2b00      	cmp	r3, #0
 800b406:	d0c6      	beq.n	800b396 <_vfiprintf_r+0x156>
 800b408:	9105      	str	r1, [sp, #20]
 800b40a:	e7c4      	b.n	800b396 <_vfiprintf_r+0x156>
 800b40c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b410:	4604      	mov	r4, r0
 800b412:	2301      	movs	r3, #1
 800b414:	e7f0      	b.n	800b3f8 <_vfiprintf_r+0x1b8>
 800b416:	ab03      	add	r3, sp, #12
 800b418:	9300      	str	r3, [sp, #0]
 800b41a:	462a      	mov	r2, r5
 800b41c:	4b12      	ldr	r3, [pc, #72]	@ (800b468 <_vfiprintf_r+0x228>)
 800b41e:	a904      	add	r1, sp, #16
 800b420:	4630      	mov	r0, r6
 800b422:	f3af 8000 	nop.w
 800b426:	4607      	mov	r7, r0
 800b428:	1c78      	adds	r0, r7, #1
 800b42a:	d1d6      	bne.n	800b3da <_vfiprintf_r+0x19a>
 800b42c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b42e:	07d9      	lsls	r1, r3, #31
 800b430:	d405      	bmi.n	800b43e <_vfiprintf_r+0x1fe>
 800b432:	89ab      	ldrh	r3, [r5, #12]
 800b434:	059a      	lsls	r2, r3, #22
 800b436:	d402      	bmi.n	800b43e <_vfiprintf_r+0x1fe>
 800b438:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b43a:	f7ff fe7d 	bl	800b138 <__retarget_lock_release_recursive>
 800b43e:	89ab      	ldrh	r3, [r5, #12]
 800b440:	065b      	lsls	r3, r3, #25
 800b442:	f53f af1f 	bmi.w	800b284 <_vfiprintf_r+0x44>
 800b446:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b448:	e71e      	b.n	800b288 <_vfiprintf_r+0x48>
 800b44a:	ab03      	add	r3, sp, #12
 800b44c:	9300      	str	r3, [sp, #0]
 800b44e:	462a      	mov	r2, r5
 800b450:	4b05      	ldr	r3, [pc, #20]	@ (800b468 <_vfiprintf_r+0x228>)
 800b452:	a904      	add	r1, sp, #16
 800b454:	4630      	mov	r0, r6
 800b456:	f000 f879 	bl	800b54c <_printf_i>
 800b45a:	e7e4      	b.n	800b426 <_vfiprintf_r+0x1e6>
 800b45c:	0800bbe4 	.word	0x0800bbe4
 800b460:	0800bbee 	.word	0x0800bbee
 800b464:	00000000 	.word	0x00000000
 800b468:	0800b21b 	.word	0x0800b21b
 800b46c:	0800bbea 	.word	0x0800bbea

0800b470 <_printf_common>:
 800b470:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b474:	4616      	mov	r6, r2
 800b476:	4698      	mov	r8, r3
 800b478:	688a      	ldr	r2, [r1, #8]
 800b47a:	690b      	ldr	r3, [r1, #16]
 800b47c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b480:	4293      	cmp	r3, r2
 800b482:	bfb8      	it	lt
 800b484:	4613      	movlt	r3, r2
 800b486:	6033      	str	r3, [r6, #0]
 800b488:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b48c:	4607      	mov	r7, r0
 800b48e:	460c      	mov	r4, r1
 800b490:	b10a      	cbz	r2, 800b496 <_printf_common+0x26>
 800b492:	3301      	adds	r3, #1
 800b494:	6033      	str	r3, [r6, #0]
 800b496:	6823      	ldr	r3, [r4, #0]
 800b498:	0699      	lsls	r1, r3, #26
 800b49a:	bf42      	ittt	mi
 800b49c:	6833      	ldrmi	r3, [r6, #0]
 800b49e:	3302      	addmi	r3, #2
 800b4a0:	6033      	strmi	r3, [r6, #0]
 800b4a2:	6825      	ldr	r5, [r4, #0]
 800b4a4:	f015 0506 	ands.w	r5, r5, #6
 800b4a8:	d106      	bne.n	800b4b8 <_printf_common+0x48>
 800b4aa:	f104 0a19 	add.w	sl, r4, #25
 800b4ae:	68e3      	ldr	r3, [r4, #12]
 800b4b0:	6832      	ldr	r2, [r6, #0]
 800b4b2:	1a9b      	subs	r3, r3, r2
 800b4b4:	42ab      	cmp	r3, r5
 800b4b6:	dc26      	bgt.n	800b506 <_printf_common+0x96>
 800b4b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b4bc:	6822      	ldr	r2, [r4, #0]
 800b4be:	3b00      	subs	r3, #0
 800b4c0:	bf18      	it	ne
 800b4c2:	2301      	movne	r3, #1
 800b4c4:	0692      	lsls	r2, r2, #26
 800b4c6:	d42b      	bmi.n	800b520 <_printf_common+0xb0>
 800b4c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b4cc:	4641      	mov	r1, r8
 800b4ce:	4638      	mov	r0, r7
 800b4d0:	47c8      	blx	r9
 800b4d2:	3001      	adds	r0, #1
 800b4d4:	d01e      	beq.n	800b514 <_printf_common+0xa4>
 800b4d6:	6823      	ldr	r3, [r4, #0]
 800b4d8:	6922      	ldr	r2, [r4, #16]
 800b4da:	f003 0306 	and.w	r3, r3, #6
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	bf02      	ittt	eq
 800b4e2:	68e5      	ldreq	r5, [r4, #12]
 800b4e4:	6833      	ldreq	r3, [r6, #0]
 800b4e6:	1aed      	subeq	r5, r5, r3
 800b4e8:	68a3      	ldr	r3, [r4, #8]
 800b4ea:	bf0c      	ite	eq
 800b4ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b4f0:	2500      	movne	r5, #0
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	bfc4      	itt	gt
 800b4f6:	1a9b      	subgt	r3, r3, r2
 800b4f8:	18ed      	addgt	r5, r5, r3
 800b4fa:	2600      	movs	r6, #0
 800b4fc:	341a      	adds	r4, #26
 800b4fe:	42b5      	cmp	r5, r6
 800b500:	d11a      	bne.n	800b538 <_printf_common+0xc8>
 800b502:	2000      	movs	r0, #0
 800b504:	e008      	b.n	800b518 <_printf_common+0xa8>
 800b506:	2301      	movs	r3, #1
 800b508:	4652      	mov	r2, sl
 800b50a:	4641      	mov	r1, r8
 800b50c:	4638      	mov	r0, r7
 800b50e:	47c8      	blx	r9
 800b510:	3001      	adds	r0, #1
 800b512:	d103      	bne.n	800b51c <_printf_common+0xac>
 800b514:	f04f 30ff 	mov.w	r0, #4294967295
 800b518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b51c:	3501      	adds	r5, #1
 800b51e:	e7c6      	b.n	800b4ae <_printf_common+0x3e>
 800b520:	18e1      	adds	r1, r4, r3
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	2030      	movs	r0, #48	@ 0x30
 800b526:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b52a:	4422      	add	r2, r4
 800b52c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b530:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b534:	3302      	adds	r3, #2
 800b536:	e7c7      	b.n	800b4c8 <_printf_common+0x58>
 800b538:	2301      	movs	r3, #1
 800b53a:	4622      	mov	r2, r4
 800b53c:	4641      	mov	r1, r8
 800b53e:	4638      	mov	r0, r7
 800b540:	47c8      	blx	r9
 800b542:	3001      	adds	r0, #1
 800b544:	d0e6      	beq.n	800b514 <_printf_common+0xa4>
 800b546:	3601      	adds	r6, #1
 800b548:	e7d9      	b.n	800b4fe <_printf_common+0x8e>
	...

0800b54c <_printf_i>:
 800b54c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b550:	7e0f      	ldrb	r7, [r1, #24]
 800b552:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b554:	2f78      	cmp	r7, #120	@ 0x78
 800b556:	4691      	mov	r9, r2
 800b558:	4680      	mov	r8, r0
 800b55a:	460c      	mov	r4, r1
 800b55c:	469a      	mov	sl, r3
 800b55e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b562:	d807      	bhi.n	800b574 <_printf_i+0x28>
 800b564:	2f62      	cmp	r7, #98	@ 0x62
 800b566:	d80a      	bhi.n	800b57e <_printf_i+0x32>
 800b568:	2f00      	cmp	r7, #0
 800b56a:	f000 80d1 	beq.w	800b710 <_printf_i+0x1c4>
 800b56e:	2f58      	cmp	r7, #88	@ 0x58
 800b570:	f000 80b8 	beq.w	800b6e4 <_printf_i+0x198>
 800b574:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b578:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b57c:	e03a      	b.n	800b5f4 <_printf_i+0xa8>
 800b57e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b582:	2b15      	cmp	r3, #21
 800b584:	d8f6      	bhi.n	800b574 <_printf_i+0x28>
 800b586:	a101      	add	r1, pc, #4	@ (adr r1, 800b58c <_printf_i+0x40>)
 800b588:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b58c:	0800b5e5 	.word	0x0800b5e5
 800b590:	0800b5f9 	.word	0x0800b5f9
 800b594:	0800b575 	.word	0x0800b575
 800b598:	0800b575 	.word	0x0800b575
 800b59c:	0800b575 	.word	0x0800b575
 800b5a0:	0800b575 	.word	0x0800b575
 800b5a4:	0800b5f9 	.word	0x0800b5f9
 800b5a8:	0800b575 	.word	0x0800b575
 800b5ac:	0800b575 	.word	0x0800b575
 800b5b0:	0800b575 	.word	0x0800b575
 800b5b4:	0800b575 	.word	0x0800b575
 800b5b8:	0800b6f7 	.word	0x0800b6f7
 800b5bc:	0800b623 	.word	0x0800b623
 800b5c0:	0800b6b1 	.word	0x0800b6b1
 800b5c4:	0800b575 	.word	0x0800b575
 800b5c8:	0800b575 	.word	0x0800b575
 800b5cc:	0800b719 	.word	0x0800b719
 800b5d0:	0800b575 	.word	0x0800b575
 800b5d4:	0800b623 	.word	0x0800b623
 800b5d8:	0800b575 	.word	0x0800b575
 800b5dc:	0800b575 	.word	0x0800b575
 800b5e0:	0800b6b9 	.word	0x0800b6b9
 800b5e4:	6833      	ldr	r3, [r6, #0]
 800b5e6:	1d1a      	adds	r2, r3, #4
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	6032      	str	r2, [r6, #0]
 800b5ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b5f0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	e09c      	b.n	800b732 <_printf_i+0x1e6>
 800b5f8:	6833      	ldr	r3, [r6, #0]
 800b5fa:	6820      	ldr	r0, [r4, #0]
 800b5fc:	1d19      	adds	r1, r3, #4
 800b5fe:	6031      	str	r1, [r6, #0]
 800b600:	0606      	lsls	r6, r0, #24
 800b602:	d501      	bpl.n	800b608 <_printf_i+0xbc>
 800b604:	681d      	ldr	r5, [r3, #0]
 800b606:	e003      	b.n	800b610 <_printf_i+0xc4>
 800b608:	0645      	lsls	r5, r0, #25
 800b60a:	d5fb      	bpl.n	800b604 <_printf_i+0xb8>
 800b60c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b610:	2d00      	cmp	r5, #0
 800b612:	da03      	bge.n	800b61c <_printf_i+0xd0>
 800b614:	232d      	movs	r3, #45	@ 0x2d
 800b616:	426d      	negs	r5, r5
 800b618:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b61c:	4858      	ldr	r0, [pc, #352]	@ (800b780 <_printf_i+0x234>)
 800b61e:	230a      	movs	r3, #10
 800b620:	e011      	b.n	800b646 <_printf_i+0xfa>
 800b622:	6821      	ldr	r1, [r4, #0]
 800b624:	6833      	ldr	r3, [r6, #0]
 800b626:	0608      	lsls	r0, r1, #24
 800b628:	f853 5b04 	ldr.w	r5, [r3], #4
 800b62c:	d402      	bmi.n	800b634 <_printf_i+0xe8>
 800b62e:	0649      	lsls	r1, r1, #25
 800b630:	bf48      	it	mi
 800b632:	b2ad      	uxthmi	r5, r5
 800b634:	2f6f      	cmp	r7, #111	@ 0x6f
 800b636:	4852      	ldr	r0, [pc, #328]	@ (800b780 <_printf_i+0x234>)
 800b638:	6033      	str	r3, [r6, #0]
 800b63a:	bf14      	ite	ne
 800b63c:	230a      	movne	r3, #10
 800b63e:	2308      	moveq	r3, #8
 800b640:	2100      	movs	r1, #0
 800b642:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b646:	6866      	ldr	r6, [r4, #4]
 800b648:	60a6      	str	r6, [r4, #8]
 800b64a:	2e00      	cmp	r6, #0
 800b64c:	db05      	blt.n	800b65a <_printf_i+0x10e>
 800b64e:	6821      	ldr	r1, [r4, #0]
 800b650:	432e      	orrs	r6, r5
 800b652:	f021 0104 	bic.w	r1, r1, #4
 800b656:	6021      	str	r1, [r4, #0]
 800b658:	d04b      	beq.n	800b6f2 <_printf_i+0x1a6>
 800b65a:	4616      	mov	r6, r2
 800b65c:	fbb5 f1f3 	udiv	r1, r5, r3
 800b660:	fb03 5711 	mls	r7, r3, r1, r5
 800b664:	5dc7      	ldrb	r7, [r0, r7]
 800b666:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b66a:	462f      	mov	r7, r5
 800b66c:	42bb      	cmp	r3, r7
 800b66e:	460d      	mov	r5, r1
 800b670:	d9f4      	bls.n	800b65c <_printf_i+0x110>
 800b672:	2b08      	cmp	r3, #8
 800b674:	d10b      	bne.n	800b68e <_printf_i+0x142>
 800b676:	6823      	ldr	r3, [r4, #0]
 800b678:	07df      	lsls	r7, r3, #31
 800b67a:	d508      	bpl.n	800b68e <_printf_i+0x142>
 800b67c:	6923      	ldr	r3, [r4, #16]
 800b67e:	6861      	ldr	r1, [r4, #4]
 800b680:	4299      	cmp	r1, r3
 800b682:	bfde      	ittt	le
 800b684:	2330      	movle	r3, #48	@ 0x30
 800b686:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b68a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b68e:	1b92      	subs	r2, r2, r6
 800b690:	6122      	str	r2, [r4, #16]
 800b692:	f8cd a000 	str.w	sl, [sp]
 800b696:	464b      	mov	r3, r9
 800b698:	aa03      	add	r2, sp, #12
 800b69a:	4621      	mov	r1, r4
 800b69c:	4640      	mov	r0, r8
 800b69e:	f7ff fee7 	bl	800b470 <_printf_common>
 800b6a2:	3001      	adds	r0, #1
 800b6a4:	d14a      	bne.n	800b73c <_printf_i+0x1f0>
 800b6a6:	f04f 30ff 	mov.w	r0, #4294967295
 800b6aa:	b004      	add	sp, #16
 800b6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b0:	6823      	ldr	r3, [r4, #0]
 800b6b2:	f043 0320 	orr.w	r3, r3, #32
 800b6b6:	6023      	str	r3, [r4, #0]
 800b6b8:	4832      	ldr	r0, [pc, #200]	@ (800b784 <_printf_i+0x238>)
 800b6ba:	2778      	movs	r7, #120	@ 0x78
 800b6bc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b6c0:	6823      	ldr	r3, [r4, #0]
 800b6c2:	6831      	ldr	r1, [r6, #0]
 800b6c4:	061f      	lsls	r7, r3, #24
 800b6c6:	f851 5b04 	ldr.w	r5, [r1], #4
 800b6ca:	d402      	bmi.n	800b6d2 <_printf_i+0x186>
 800b6cc:	065f      	lsls	r7, r3, #25
 800b6ce:	bf48      	it	mi
 800b6d0:	b2ad      	uxthmi	r5, r5
 800b6d2:	6031      	str	r1, [r6, #0]
 800b6d4:	07d9      	lsls	r1, r3, #31
 800b6d6:	bf44      	itt	mi
 800b6d8:	f043 0320 	orrmi.w	r3, r3, #32
 800b6dc:	6023      	strmi	r3, [r4, #0]
 800b6de:	b11d      	cbz	r5, 800b6e8 <_printf_i+0x19c>
 800b6e0:	2310      	movs	r3, #16
 800b6e2:	e7ad      	b.n	800b640 <_printf_i+0xf4>
 800b6e4:	4826      	ldr	r0, [pc, #152]	@ (800b780 <_printf_i+0x234>)
 800b6e6:	e7e9      	b.n	800b6bc <_printf_i+0x170>
 800b6e8:	6823      	ldr	r3, [r4, #0]
 800b6ea:	f023 0320 	bic.w	r3, r3, #32
 800b6ee:	6023      	str	r3, [r4, #0]
 800b6f0:	e7f6      	b.n	800b6e0 <_printf_i+0x194>
 800b6f2:	4616      	mov	r6, r2
 800b6f4:	e7bd      	b.n	800b672 <_printf_i+0x126>
 800b6f6:	6833      	ldr	r3, [r6, #0]
 800b6f8:	6825      	ldr	r5, [r4, #0]
 800b6fa:	6961      	ldr	r1, [r4, #20]
 800b6fc:	1d18      	adds	r0, r3, #4
 800b6fe:	6030      	str	r0, [r6, #0]
 800b700:	062e      	lsls	r6, r5, #24
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	d501      	bpl.n	800b70a <_printf_i+0x1be>
 800b706:	6019      	str	r1, [r3, #0]
 800b708:	e002      	b.n	800b710 <_printf_i+0x1c4>
 800b70a:	0668      	lsls	r0, r5, #25
 800b70c:	d5fb      	bpl.n	800b706 <_printf_i+0x1ba>
 800b70e:	8019      	strh	r1, [r3, #0]
 800b710:	2300      	movs	r3, #0
 800b712:	6123      	str	r3, [r4, #16]
 800b714:	4616      	mov	r6, r2
 800b716:	e7bc      	b.n	800b692 <_printf_i+0x146>
 800b718:	6833      	ldr	r3, [r6, #0]
 800b71a:	1d1a      	adds	r2, r3, #4
 800b71c:	6032      	str	r2, [r6, #0]
 800b71e:	681e      	ldr	r6, [r3, #0]
 800b720:	6862      	ldr	r2, [r4, #4]
 800b722:	2100      	movs	r1, #0
 800b724:	4630      	mov	r0, r6
 800b726:	f7f4 fd53 	bl	80001d0 <memchr>
 800b72a:	b108      	cbz	r0, 800b730 <_printf_i+0x1e4>
 800b72c:	1b80      	subs	r0, r0, r6
 800b72e:	6060      	str	r0, [r4, #4]
 800b730:	6863      	ldr	r3, [r4, #4]
 800b732:	6123      	str	r3, [r4, #16]
 800b734:	2300      	movs	r3, #0
 800b736:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b73a:	e7aa      	b.n	800b692 <_printf_i+0x146>
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	4632      	mov	r2, r6
 800b740:	4649      	mov	r1, r9
 800b742:	4640      	mov	r0, r8
 800b744:	47d0      	blx	sl
 800b746:	3001      	adds	r0, #1
 800b748:	d0ad      	beq.n	800b6a6 <_printf_i+0x15a>
 800b74a:	6823      	ldr	r3, [r4, #0]
 800b74c:	079b      	lsls	r3, r3, #30
 800b74e:	d413      	bmi.n	800b778 <_printf_i+0x22c>
 800b750:	68e0      	ldr	r0, [r4, #12]
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	4298      	cmp	r0, r3
 800b756:	bfb8      	it	lt
 800b758:	4618      	movlt	r0, r3
 800b75a:	e7a6      	b.n	800b6aa <_printf_i+0x15e>
 800b75c:	2301      	movs	r3, #1
 800b75e:	4632      	mov	r2, r6
 800b760:	4649      	mov	r1, r9
 800b762:	4640      	mov	r0, r8
 800b764:	47d0      	blx	sl
 800b766:	3001      	adds	r0, #1
 800b768:	d09d      	beq.n	800b6a6 <_printf_i+0x15a>
 800b76a:	3501      	adds	r5, #1
 800b76c:	68e3      	ldr	r3, [r4, #12]
 800b76e:	9903      	ldr	r1, [sp, #12]
 800b770:	1a5b      	subs	r3, r3, r1
 800b772:	42ab      	cmp	r3, r5
 800b774:	dcf2      	bgt.n	800b75c <_printf_i+0x210>
 800b776:	e7eb      	b.n	800b750 <_printf_i+0x204>
 800b778:	2500      	movs	r5, #0
 800b77a:	f104 0619 	add.w	r6, r4, #25
 800b77e:	e7f5      	b.n	800b76c <_printf_i+0x220>
 800b780:	0800bbf5 	.word	0x0800bbf5
 800b784:	0800bc06 	.word	0x0800bc06

0800b788 <__sflush_r>:
 800b788:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b78c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b790:	0716      	lsls	r6, r2, #28
 800b792:	4605      	mov	r5, r0
 800b794:	460c      	mov	r4, r1
 800b796:	d454      	bmi.n	800b842 <__sflush_r+0xba>
 800b798:	684b      	ldr	r3, [r1, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	dc02      	bgt.n	800b7a4 <__sflush_r+0x1c>
 800b79e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	dd48      	ble.n	800b836 <__sflush_r+0xae>
 800b7a4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7a6:	2e00      	cmp	r6, #0
 800b7a8:	d045      	beq.n	800b836 <__sflush_r+0xae>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800b7b0:	682f      	ldr	r7, [r5, #0]
 800b7b2:	6a21      	ldr	r1, [r4, #32]
 800b7b4:	602b      	str	r3, [r5, #0]
 800b7b6:	d030      	beq.n	800b81a <__sflush_r+0x92>
 800b7b8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	0759      	lsls	r1, r3, #29
 800b7be:	d505      	bpl.n	800b7cc <__sflush_r+0x44>
 800b7c0:	6863      	ldr	r3, [r4, #4]
 800b7c2:	1ad2      	subs	r2, r2, r3
 800b7c4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b7c6:	b10b      	cbz	r3, 800b7cc <__sflush_r+0x44>
 800b7c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800b7ca:	1ad2      	subs	r2, r2, r3
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800b7d0:	6a21      	ldr	r1, [r4, #32]
 800b7d2:	4628      	mov	r0, r5
 800b7d4:	47b0      	blx	r6
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	d106      	bne.n	800b7ea <__sflush_r+0x62>
 800b7dc:	6829      	ldr	r1, [r5, #0]
 800b7de:	291d      	cmp	r1, #29
 800b7e0:	d82b      	bhi.n	800b83a <__sflush_r+0xb2>
 800b7e2:	4a2a      	ldr	r2, [pc, #168]	@ (800b88c <__sflush_r+0x104>)
 800b7e4:	40ca      	lsrs	r2, r1
 800b7e6:	07d6      	lsls	r6, r2, #31
 800b7e8:	d527      	bpl.n	800b83a <__sflush_r+0xb2>
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	6062      	str	r2, [r4, #4]
 800b7ee:	04d9      	lsls	r1, r3, #19
 800b7f0:	6922      	ldr	r2, [r4, #16]
 800b7f2:	6022      	str	r2, [r4, #0]
 800b7f4:	d504      	bpl.n	800b800 <__sflush_r+0x78>
 800b7f6:	1c42      	adds	r2, r0, #1
 800b7f8:	d101      	bne.n	800b7fe <__sflush_r+0x76>
 800b7fa:	682b      	ldr	r3, [r5, #0]
 800b7fc:	b903      	cbnz	r3, 800b800 <__sflush_r+0x78>
 800b7fe:	6560      	str	r0, [r4, #84]	@ 0x54
 800b800:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b802:	602f      	str	r7, [r5, #0]
 800b804:	b1b9      	cbz	r1, 800b836 <__sflush_r+0xae>
 800b806:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b80a:	4299      	cmp	r1, r3
 800b80c:	d002      	beq.n	800b814 <__sflush_r+0x8c>
 800b80e:	4628      	mov	r0, r5
 800b810:	f7ff fca2 	bl	800b158 <_free_r>
 800b814:	2300      	movs	r3, #0
 800b816:	6363      	str	r3, [r4, #52]	@ 0x34
 800b818:	e00d      	b.n	800b836 <__sflush_r+0xae>
 800b81a:	2301      	movs	r3, #1
 800b81c:	4628      	mov	r0, r5
 800b81e:	47b0      	blx	r6
 800b820:	4602      	mov	r2, r0
 800b822:	1c50      	adds	r0, r2, #1
 800b824:	d1c9      	bne.n	800b7ba <__sflush_r+0x32>
 800b826:	682b      	ldr	r3, [r5, #0]
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d0c6      	beq.n	800b7ba <__sflush_r+0x32>
 800b82c:	2b1d      	cmp	r3, #29
 800b82e:	d001      	beq.n	800b834 <__sflush_r+0xac>
 800b830:	2b16      	cmp	r3, #22
 800b832:	d11e      	bne.n	800b872 <__sflush_r+0xea>
 800b834:	602f      	str	r7, [r5, #0]
 800b836:	2000      	movs	r0, #0
 800b838:	e022      	b.n	800b880 <__sflush_r+0xf8>
 800b83a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b83e:	b21b      	sxth	r3, r3
 800b840:	e01b      	b.n	800b87a <__sflush_r+0xf2>
 800b842:	690f      	ldr	r7, [r1, #16]
 800b844:	2f00      	cmp	r7, #0
 800b846:	d0f6      	beq.n	800b836 <__sflush_r+0xae>
 800b848:	0793      	lsls	r3, r2, #30
 800b84a:	680e      	ldr	r6, [r1, #0]
 800b84c:	bf08      	it	eq
 800b84e:	694b      	ldreq	r3, [r1, #20]
 800b850:	600f      	str	r7, [r1, #0]
 800b852:	bf18      	it	ne
 800b854:	2300      	movne	r3, #0
 800b856:	eba6 0807 	sub.w	r8, r6, r7
 800b85a:	608b      	str	r3, [r1, #8]
 800b85c:	f1b8 0f00 	cmp.w	r8, #0
 800b860:	dde9      	ble.n	800b836 <__sflush_r+0xae>
 800b862:	6a21      	ldr	r1, [r4, #32]
 800b864:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800b866:	4643      	mov	r3, r8
 800b868:	463a      	mov	r2, r7
 800b86a:	4628      	mov	r0, r5
 800b86c:	47b0      	blx	r6
 800b86e:	2800      	cmp	r0, #0
 800b870:	dc08      	bgt.n	800b884 <__sflush_r+0xfc>
 800b872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b87a:	81a3      	strh	r3, [r4, #12]
 800b87c:	f04f 30ff 	mov.w	r0, #4294967295
 800b880:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b884:	4407      	add	r7, r0
 800b886:	eba8 0800 	sub.w	r8, r8, r0
 800b88a:	e7e7      	b.n	800b85c <__sflush_r+0xd4>
 800b88c:	20400001 	.word	0x20400001

0800b890 <_fflush_r>:
 800b890:	b538      	push	{r3, r4, r5, lr}
 800b892:	690b      	ldr	r3, [r1, #16]
 800b894:	4605      	mov	r5, r0
 800b896:	460c      	mov	r4, r1
 800b898:	b913      	cbnz	r3, 800b8a0 <_fflush_r+0x10>
 800b89a:	2500      	movs	r5, #0
 800b89c:	4628      	mov	r0, r5
 800b89e:	bd38      	pop	{r3, r4, r5, pc}
 800b8a0:	b118      	cbz	r0, 800b8aa <_fflush_r+0x1a>
 800b8a2:	6a03      	ldr	r3, [r0, #32]
 800b8a4:	b90b      	cbnz	r3, 800b8aa <_fflush_r+0x1a>
 800b8a6:	f7ff f9e9 	bl	800ac7c <__sinit>
 800b8aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d0f3      	beq.n	800b89a <_fflush_r+0xa>
 800b8b2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b8b4:	07d0      	lsls	r0, r2, #31
 800b8b6:	d404      	bmi.n	800b8c2 <_fflush_r+0x32>
 800b8b8:	0599      	lsls	r1, r3, #22
 800b8ba:	d402      	bmi.n	800b8c2 <_fflush_r+0x32>
 800b8bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8be:	f7ff fc3a 	bl	800b136 <__retarget_lock_acquire_recursive>
 800b8c2:	4628      	mov	r0, r5
 800b8c4:	4621      	mov	r1, r4
 800b8c6:	f7ff ff5f 	bl	800b788 <__sflush_r>
 800b8ca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b8cc:	07da      	lsls	r2, r3, #31
 800b8ce:	4605      	mov	r5, r0
 800b8d0:	d4e4      	bmi.n	800b89c <_fflush_r+0xc>
 800b8d2:	89a3      	ldrh	r3, [r4, #12]
 800b8d4:	059b      	lsls	r3, r3, #22
 800b8d6:	d4e1      	bmi.n	800b89c <_fflush_r+0xc>
 800b8d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b8da:	f7ff fc2d 	bl	800b138 <__retarget_lock_release_recursive>
 800b8de:	e7dd      	b.n	800b89c <_fflush_r+0xc>

0800b8e0 <__swhatbuf_r>:
 800b8e0:	b570      	push	{r4, r5, r6, lr}
 800b8e2:	460c      	mov	r4, r1
 800b8e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8e8:	2900      	cmp	r1, #0
 800b8ea:	b096      	sub	sp, #88	@ 0x58
 800b8ec:	4615      	mov	r5, r2
 800b8ee:	461e      	mov	r6, r3
 800b8f0:	da0d      	bge.n	800b90e <__swhatbuf_r+0x2e>
 800b8f2:	89a3      	ldrh	r3, [r4, #12]
 800b8f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b8f8:	f04f 0100 	mov.w	r1, #0
 800b8fc:	bf14      	ite	ne
 800b8fe:	2340      	movne	r3, #64	@ 0x40
 800b900:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b904:	2000      	movs	r0, #0
 800b906:	6031      	str	r1, [r6, #0]
 800b908:	602b      	str	r3, [r5, #0]
 800b90a:	b016      	add	sp, #88	@ 0x58
 800b90c:	bd70      	pop	{r4, r5, r6, pc}
 800b90e:	466a      	mov	r2, sp
 800b910:	f000 f848 	bl	800b9a4 <_fstat_r>
 800b914:	2800      	cmp	r0, #0
 800b916:	dbec      	blt.n	800b8f2 <__swhatbuf_r+0x12>
 800b918:	9901      	ldr	r1, [sp, #4]
 800b91a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b91e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b922:	4259      	negs	r1, r3
 800b924:	4159      	adcs	r1, r3
 800b926:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b92a:	e7eb      	b.n	800b904 <__swhatbuf_r+0x24>

0800b92c <__smakebuf_r>:
 800b92c:	898b      	ldrh	r3, [r1, #12]
 800b92e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b930:	079d      	lsls	r5, r3, #30
 800b932:	4606      	mov	r6, r0
 800b934:	460c      	mov	r4, r1
 800b936:	d507      	bpl.n	800b948 <__smakebuf_r+0x1c>
 800b938:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b93c:	6023      	str	r3, [r4, #0]
 800b93e:	6123      	str	r3, [r4, #16]
 800b940:	2301      	movs	r3, #1
 800b942:	6163      	str	r3, [r4, #20]
 800b944:	b003      	add	sp, #12
 800b946:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b948:	ab01      	add	r3, sp, #4
 800b94a:	466a      	mov	r2, sp
 800b94c:	f7ff ffc8 	bl	800b8e0 <__swhatbuf_r>
 800b950:	9f00      	ldr	r7, [sp, #0]
 800b952:	4605      	mov	r5, r0
 800b954:	4639      	mov	r1, r7
 800b956:	4630      	mov	r0, r6
 800b958:	f7ff f878 	bl	800aa4c <_malloc_r>
 800b95c:	b948      	cbnz	r0, 800b972 <__smakebuf_r+0x46>
 800b95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b962:	059a      	lsls	r2, r3, #22
 800b964:	d4ee      	bmi.n	800b944 <__smakebuf_r+0x18>
 800b966:	f023 0303 	bic.w	r3, r3, #3
 800b96a:	f043 0302 	orr.w	r3, r3, #2
 800b96e:	81a3      	strh	r3, [r4, #12]
 800b970:	e7e2      	b.n	800b938 <__smakebuf_r+0xc>
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	6020      	str	r0, [r4, #0]
 800b976:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b97a:	81a3      	strh	r3, [r4, #12]
 800b97c:	9b01      	ldr	r3, [sp, #4]
 800b97e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b982:	b15b      	cbz	r3, 800b99c <__smakebuf_r+0x70>
 800b984:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b988:	4630      	mov	r0, r6
 800b98a:	f000 f81d 	bl	800b9c8 <_isatty_r>
 800b98e:	b128      	cbz	r0, 800b99c <__smakebuf_r+0x70>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f023 0303 	bic.w	r3, r3, #3
 800b996:	f043 0301 	orr.w	r3, r3, #1
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	89a3      	ldrh	r3, [r4, #12]
 800b99e:	431d      	orrs	r5, r3
 800b9a0:	81a5      	strh	r5, [r4, #12]
 800b9a2:	e7cf      	b.n	800b944 <__smakebuf_r+0x18>

0800b9a4 <_fstat_r>:
 800b9a4:	b538      	push	{r3, r4, r5, lr}
 800b9a6:	4d07      	ldr	r5, [pc, #28]	@ (800b9c4 <_fstat_r+0x20>)
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	4604      	mov	r4, r0
 800b9ac:	4608      	mov	r0, r1
 800b9ae:	4611      	mov	r1, r2
 800b9b0:	602b      	str	r3, [r5, #0]
 800b9b2:	f7f6 fd22 	bl	80023fa <_fstat>
 800b9b6:	1c43      	adds	r3, r0, #1
 800b9b8:	d102      	bne.n	800b9c0 <_fstat_r+0x1c>
 800b9ba:	682b      	ldr	r3, [r5, #0]
 800b9bc:	b103      	cbz	r3, 800b9c0 <_fstat_r+0x1c>
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	bd38      	pop	{r3, r4, r5, pc}
 800b9c2:	bf00      	nop
 800b9c4:	20000af8 	.word	0x20000af8

0800b9c8 <_isatty_r>:
 800b9c8:	b538      	push	{r3, r4, r5, lr}
 800b9ca:	4d06      	ldr	r5, [pc, #24]	@ (800b9e4 <_isatty_r+0x1c>)
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	4608      	mov	r0, r1
 800b9d2:	602b      	str	r3, [r5, #0]
 800b9d4:	f7f6 fd21 	bl	800241a <_isatty>
 800b9d8:	1c43      	adds	r3, r0, #1
 800b9da:	d102      	bne.n	800b9e2 <_isatty_r+0x1a>
 800b9dc:	682b      	ldr	r3, [r5, #0]
 800b9de:	b103      	cbz	r3, 800b9e2 <_isatty_r+0x1a>
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	20000af8 	.word	0x20000af8

0800b9e8 <_init>:
 800b9e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ea:	bf00      	nop
 800b9ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ee:	bc08      	pop	{r3}
 800b9f0:	469e      	mov	lr, r3
 800b9f2:	4770      	bx	lr

0800b9f4 <_fini>:
 800b9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9f6:	bf00      	nop
 800b9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9fa:	bc08      	pop	{r3}
 800b9fc:	469e      	mov	lr, r3
 800b9fe:	4770      	bx	lr
